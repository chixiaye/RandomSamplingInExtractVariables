{
  "id" : 517,
  "expression" : "mMission",
  "projectName" : "TeamNewPipe@NewPipe",
  "commitID" : "d7574973e97fa7a3a21aa59967311f6091941830",
  "filePath" : "/app/src/main/java/us/shandian/giga/get/DownloadInitializer.java",
  "occurrences" : 58,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "mMission",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 44,
      "startColumnNumber" : 12,
      "endLineNumber" : 44,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 44,
        "startColumnNumber" : 12,
        "endLineNumber" : 44,
        "endColumnNumber" : 28
      },
      "nodeContext" : "mMission.current",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 44,
        "startColumnNumber" : 12,
        "endLineNumber" : 44,
        "endColumnNumber" : 32
      },
      "nodeContext" : "mMission.current > 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 44,
        "startColumnNumber" : 8,
        "endLineNumber" : 44,
        "endColumnNumber" : 98
      },
      "nodeContext" : "if (mMission.current > 0) mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 44,
        "startColumnNumber" : 8,
        "endLineNumber" : 44,
        "endColumnNumber" : 98
      },
      "nodeContext" : "if (mMission.current > 0) mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "us.shandian.giga.get.DownloadMission"
  }, {
    "nodeContext" : "mMission",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 44,
      "startColumnNumber" : 34,
      "endLineNumber" : 44,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 44,
        "startColumnNumber" : 34,
        "endLineNumber" : 44,
        "endColumnNumber" : 97
      },
      "nodeContext" : "mMission.resetState(false,true,DownloadMission.ERROR_NOTHING)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 44,
        "startColumnNumber" : 34,
        "endLineNumber" : 44,
        "endColumnNumber" : 98
      },
      "nodeContext" : "mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 44,
        "startColumnNumber" : 8,
        "endLineNumber" : 44,
        "endColumnNumber" : 98
      },
      "nodeContext" : "if (mMission.current > 0) mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 44,
        "startColumnNumber" : 8,
        "endLineNumber" : 44,
        "endColumnNumber" : 98
      },
      "nodeContext" : "if (mMission.current > 0) mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "us.shandian.giga.get.DownloadMission"
  }, {
    "nodeContext" : "mMission",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 51,
      "startColumnNumber" : 20,
      "endLineNumber" : 51,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 51,
        "startColumnNumber" : 20,
        "endLineNumber" : 51,
        "endColumnNumber" : 35
      },
      "nodeContext" : "mMission.blocks",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 51,
        "startColumnNumber" : 20,
        "endLineNumber" : 51,
        "endColumnNumber" : 43
      },
      "nodeContext" : "mMission.blocks == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 51,
        "startColumnNumber" : 20,
        "endLineNumber" : 51,
        "endColumnNumber" : 68
      },
      "nodeContext" : "mMission.blocks == null && mMission.current == 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2140,
        "startLineNumber" : 51,
        "startColumnNumber" : 16,
        "endLineNumber" : 95,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (mMission.blocks == null && mMission.current == 0) {\n  long finalLength=0;\n  long lowestSize=Long.MAX_VALUE;\n  for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n    mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (Thread.interrupted())     return;\n    long length=Utility.getContentLength(mConn);\n    if (i == 0) {\n      httpCode=mConn.getResponseCode();\n      mMission.length=length;\n    }\n    if (length > 0)     finalLength+=length;\n    if (length < lowestSize)     lowestSize=length;\n  }\n  mMission.nearLength=finalLength;\n  if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n    if (lowestSize < 1) {\n      mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n    }\n else {\n      mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n    }\n  }\n}\n else {\n  mConn=mMission.openConnection(true,-1,-1);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (!mMission.running || Thread.interrupted())   return;\n  httpCode=mConn.getResponseCode();\n  mMission.length=Utility.getContentLength(mConn);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 208,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5639,
        "startLineNumber" : 50,
        "startColumnNumber" : 16,
        "endLineNumber" : 173,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6689,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n catch (InterruptedIOException|ClosedByInterruptException e) {\n  return;\n}\ncatch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 673,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 6713,
        "startLineNumber" : 49,
        "startColumnNumber" : 21,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 674,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6726,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 676,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 51,
        "startColumnNumber" : 20,
        "endLineNumber" : 51,
        "endColumnNumber" : 68
      },
      "nodeContext" : "mMission.blocks == null && mMission.current == 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "us.shandian.giga.get.DownloadMission"
  }, {
    "nodeContext" : "mMission",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 51,
      "startColumnNumber" : 47,
      "endLineNumber" : 51,
      "endColumnNumber" : 55
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 51,
        "startColumnNumber" : 47,
        "endLineNumber" : 51,
        "endColumnNumber" : 63
      },
      "nodeContext" : "mMission.current",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 51,
        "startColumnNumber" : 47,
        "endLineNumber" : 51,
        "endColumnNumber" : 68
      },
      "nodeContext" : "mMission.current == 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 51,
        "startColumnNumber" : 20,
        "endLineNumber" : 51,
        "endColumnNumber" : 68
      },
      "nodeContext" : "mMission.blocks == null && mMission.current == 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2140,
        "startLineNumber" : 51,
        "startColumnNumber" : 16,
        "endLineNumber" : 95,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (mMission.blocks == null && mMission.current == 0) {\n  long finalLength=0;\n  long lowestSize=Long.MAX_VALUE;\n  for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n    mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (Thread.interrupted())     return;\n    long length=Utility.getContentLength(mConn);\n    if (i == 0) {\n      httpCode=mConn.getResponseCode();\n      mMission.length=length;\n    }\n    if (length > 0)     finalLength+=length;\n    if (length < lowestSize)     lowestSize=length;\n  }\n  mMission.nearLength=finalLength;\n  if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n    if (lowestSize < 1) {\n      mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n    }\n else {\n      mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n    }\n  }\n}\n else {\n  mConn=mMission.openConnection(true,-1,-1);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (!mMission.running || Thread.interrupted())   return;\n  httpCode=mConn.getResponseCode();\n  mMission.length=Utility.getContentLength(mConn);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 208,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5639,
        "startLineNumber" : 50,
        "startColumnNumber" : 16,
        "endLineNumber" : 173,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6689,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n catch (InterruptedIOException|ClosedByInterruptException e) {\n  return;\n}\ncatch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 673,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 6713,
        "startLineNumber" : 49,
        "startColumnNumber" : 21,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 674,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6726,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 676,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 51,
        "startColumnNumber" : 20,
        "endLineNumber" : 51,
        "endColumnNumber" : 68
      },
      "nodeContext" : "mMission.blocks == null && mMission.current == 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "us.shandian.giga.get.DownloadMission"
  }, {
    "nodeContext" : "mMission",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 56,
      "startColumnNumber" : 40,
      "endLineNumber" : 56,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 56,
        "startColumnNumber" : 40,
        "endLineNumber" : 56,
        "endColumnNumber" : 53
      },
      "nodeContext" : "mMission.urls",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 56,
        "startColumnNumber" : 40,
        "endLineNumber" : 56,
        "endColumnNumber" : 60
      },
      "nodeContext" : "mMission.urls.length",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 56,
        "startColumnNumber" : 36,
        "endLineNumber" : 56,
        "endColumnNumber" : 60
      },
      "nodeContext" : "i < mMission.urls.length",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 56,
        "startColumnNumber" : 36,
        "endLineNumber" : 56,
        "endColumnNumber" : 80
      },
      "nodeContext" : "i < mMission.urls.length && mMission.running",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 727,
        "startLineNumber" : 56,
        "startColumnNumber" : 20,
        "endLineNumber" : 71,
        "endColumnNumber" : 21
      },
      "nodeContext" : "for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n  mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (Thread.interrupted())   return;\n  long length=Utility.getContentLength(mConn);\n  if (i == 0) {\n    httpCode=mConn.getResponseCode();\n    mMission.length=length;\n  }\n  if (length > 0)   finalLength+=length;\n  if (length < lowestSize)   lowestSize=length;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 91,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1638,
        "startLineNumber" : 51,
        "startColumnNumber" : 70,
        "endLineNumber" : 85,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  long finalLength=0;\n  long lowestSize=Long.MAX_VALUE;\n  for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n    mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (Thread.interrupted())     return;\n    long length=Utility.getContentLength(mConn);\n    if (i == 0) {\n      httpCode=mConn.getResponseCode();\n      mMission.length=length;\n    }\n    if (length > 0)     finalLength+=length;\n    if (length < lowestSize)     lowestSize=length;\n  }\n  mMission.nearLength=finalLength;\n  if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n    if (lowestSize < 1) {\n      mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n    }\n else {\n      mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 150,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2140,
        "startLineNumber" : 51,
        "startColumnNumber" : 16,
        "endLineNumber" : 95,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (mMission.blocks == null && mMission.current == 0) {\n  long finalLength=0;\n  long lowestSize=Long.MAX_VALUE;\n  for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n    mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (Thread.interrupted())     return;\n    long length=Utility.getContentLength(mConn);\n    if (i == 0) {\n      httpCode=mConn.getResponseCode();\n      mMission.length=length;\n    }\n    if (length > 0)     finalLength+=length;\n    if (length < lowestSize)     lowestSize=length;\n  }\n  mMission.nearLength=finalLength;\n  if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n    if (lowestSize < 1) {\n      mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n    }\n else {\n      mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n    }\n  }\n}\n else {\n  mConn=mMission.openConnection(true,-1,-1);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (!mMission.running || Thread.interrupted())   return;\n  httpCode=mConn.getResponseCode();\n  mMission.length=Utility.getContentLength(mConn);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 208,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5639,
        "startLineNumber" : 50,
        "startColumnNumber" : 16,
        "endLineNumber" : 173,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6689,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n catch (InterruptedIOException|ClosedByInterruptException e) {\n  return;\n}\ncatch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 673,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 6713,
        "startLineNumber" : 49,
        "startColumnNumber" : 21,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 674,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6726,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 676,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 56,
        "startColumnNumber" : 36,
        "endLineNumber" : 56,
        "endColumnNumber" : 80
      },
      "nodeContext" : "i < mMission.urls.length && mMission.running",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "us.shandian.giga.get.DownloadMission"
  }, {
    "nodeContext" : "mMission",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 56,
      "startColumnNumber" : 64,
      "endLineNumber" : 56,
      "endColumnNumber" : 72
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 56,
        "startColumnNumber" : 64,
        "endLineNumber" : 56,
        "endColumnNumber" : 80
      },
      "nodeContext" : "mMission.running",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 56,
        "startColumnNumber" : 36,
        "endLineNumber" : 56,
        "endColumnNumber" : 80
      },
      "nodeContext" : "i < mMission.urls.length && mMission.running",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 727,
        "startLineNumber" : 56,
        "startColumnNumber" : 20,
        "endLineNumber" : 71,
        "endColumnNumber" : 21
      },
      "nodeContext" : "for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n  mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (Thread.interrupted())   return;\n  long length=Utility.getContentLength(mConn);\n  if (i == 0) {\n    httpCode=mConn.getResponseCode();\n    mMission.length=length;\n  }\n  if (length > 0)   finalLength+=length;\n  if (length < lowestSize)   lowestSize=length;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 91,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1638,
        "startLineNumber" : 51,
        "startColumnNumber" : 70,
        "endLineNumber" : 85,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  long finalLength=0;\n  long lowestSize=Long.MAX_VALUE;\n  for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n    mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (Thread.interrupted())     return;\n    long length=Utility.getContentLength(mConn);\n    if (i == 0) {\n      httpCode=mConn.getResponseCode();\n      mMission.length=length;\n    }\n    if (length > 0)     finalLength+=length;\n    if (length < lowestSize)     lowestSize=length;\n  }\n  mMission.nearLength=finalLength;\n  if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n    if (lowestSize < 1) {\n      mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n    }\n else {\n      mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 150,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2140,
        "startLineNumber" : 51,
        "startColumnNumber" : 16,
        "endLineNumber" : 95,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (mMission.blocks == null && mMission.current == 0) {\n  long finalLength=0;\n  long lowestSize=Long.MAX_VALUE;\n  for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n    mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (Thread.interrupted())     return;\n    long length=Utility.getContentLength(mConn);\n    if (i == 0) {\n      httpCode=mConn.getResponseCode();\n      mMission.length=length;\n    }\n    if (length > 0)     finalLength+=length;\n    if (length < lowestSize)     lowestSize=length;\n  }\n  mMission.nearLength=finalLength;\n  if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n    if (lowestSize < 1) {\n      mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n    }\n else {\n      mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n    }\n  }\n}\n else {\n  mConn=mMission.openConnection(true,-1,-1);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (!mMission.running || Thread.interrupted())   return;\n  httpCode=mConn.getResponseCode();\n  mMission.length=Utility.getContentLength(mConn);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 208,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5639,
        "startLineNumber" : 50,
        "startColumnNumber" : 16,
        "endLineNumber" : 173,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6689,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n catch (InterruptedIOException|ClosedByInterruptException e) {\n  return;\n}\ncatch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 673,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 6713,
        "startLineNumber" : 49,
        "startColumnNumber" : 21,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 674,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6726,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 676,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 56,
        "startColumnNumber" : 36,
        "endLineNumber" : 56,
        "endColumnNumber" : 80
      },
      "nodeContext" : "i < mMission.urls.length && mMission.running",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "us.shandian.giga.get.DownloadMission"
  }, {
    "nodeContext" : "mMission",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 57,
      "startColumnNumber" : 32,
      "endLineNumber" : 57,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 57,
        "startColumnNumber" : 32,
        "endLineNumber" : 57,
        "endColumnNumber" : 87
      },
      "nodeContext" : "mMission.openConnection(mMission.urls[i],true,-1,-1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 57,
        "startColumnNumber" : 24,
        "endLineNumber" : 57,
        "endColumnNumber" : 87
      },
      "nodeContext" : "mConn=mMission.openConnection(mMission.urls[i],true,-1,-1)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 57,
        "startColumnNumber" : 24,
        "endLineNumber" : 57,
        "endColumnNumber" : 88
      },
      "nodeContext" : "mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 660,
        "startLineNumber" : 56,
        "startColumnNumber" : 87,
        "endLineNumber" : 71,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (Thread.interrupted())   return;\n  long length=Utility.getContentLength(mConn);\n  if (i == 0) {\n    httpCode=mConn.getResponseCode();\n    mMission.length=length;\n  }\n  if (length > 0)   finalLength+=length;\n  if (length < lowestSize)   lowestSize=length;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 72,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 727,
        "startLineNumber" : 56,
        "startColumnNumber" : 20,
        "endLineNumber" : 71,
        "endColumnNumber" : 21
      },
      "nodeContext" : "for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n  mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (Thread.interrupted())   return;\n  long length=Utility.getContentLength(mConn);\n  if (i == 0) {\n    httpCode=mConn.getResponseCode();\n    mMission.length=length;\n  }\n  if (length > 0)   finalLength+=length;\n  if (length < lowestSize)   lowestSize=length;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 91,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1638,
        "startLineNumber" : 51,
        "startColumnNumber" : 70,
        "endLineNumber" : 85,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  long finalLength=0;\n  long lowestSize=Long.MAX_VALUE;\n  for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n    mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (Thread.interrupted())     return;\n    long length=Utility.getContentLength(mConn);\n    if (i == 0) {\n      httpCode=mConn.getResponseCode();\n      mMission.length=length;\n    }\n    if (length > 0)     finalLength+=length;\n    if (length < lowestSize)     lowestSize=length;\n  }\n  mMission.nearLength=finalLength;\n  if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n    if (lowestSize < 1) {\n      mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n    }\n else {\n      mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 150,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2140,
        "startLineNumber" : 51,
        "startColumnNumber" : 16,
        "endLineNumber" : 95,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (mMission.blocks == null && mMission.current == 0) {\n  long finalLength=0;\n  long lowestSize=Long.MAX_VALUE;\n  for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n    mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (Thread.interrupted())     return;\n    long length=Utility.getContentLength(mConn);\n    if (i == 0) {\n      httpCode=mConn.getResponseCode();\n      mMission.length=length;\n    }\n    if (length > 0)     finalLength+=length;\n    if (length < lowestSize)     lowestSize=length;\n  }\n  mMission.nearLength=finalLength;\n  if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n    if (lowestSize < 1) {\n      mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n    }\n else {\n      mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n    }\n  }\n}\n else {\n  mConn=mMission.openConnection(true,-1,-1);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (!mMission.running || Thread.interrupted())   return;\n  httpCode=mConn.getResponseCode();\n  mMission.length=Utility.getContentLength(mConn);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 208,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5639,
        "startLineNumber" : 50,
        "startColumnNumber" : 16,
        "endLineNumber" : 173,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6689,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n catch (InterruptedIOException|ClosedByInterruptException e) {\n  return;\n}\ncatch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 673,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 6713,
        "startLineNumber" : 49,
        "startColumnNumber" : 21,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 674,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6726,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 676,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 57,
        "startColumnNumber" : 24,
        "endLineNumber" : 57,
        "endColumnNumber" : 88
      },
      "nodeContext" : "mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "us.shandian.giga.get.DownloadMission"
  }, {
    "nodeContext" : "mMission",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 57,
      "startColumnNumber" : 56,
      "endLineNumber" : 57,
      "endColumnNumber" : 64
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 57,
        "startColumnNumber" : 56,
        "endLineNumber" : 57,
        "endColumnNumber" : 69
      },
      "nodeContext" : "mMission.urls",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 57,
        "startColumnNumber" : 56,
        "endLineNumber" : 57,
        "endColumnNumber" : 72
      },
      "nodeContext" : "mMission.urls[i]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 57,
        "startColumnNumber" : 32,
        "endLineNumber" : 57,
        "endColumnNumber" : 87
      },
      "nodeContext" : "mMission.openConnection(mMission.urls[i],true,-1,-1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 57,
        "startColumnNumber" : 24,
        "endLineNumber" : 57,
        "endColumnNumber" : 87
      },
      "nodeContext" : "mConn=mMission.openConnection(mMission.urls[i],true,-1,-1)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 57,
        "startColumnNumber" : 24,
        "endLineNumber" : 57,
        "endColumnNumber" : 88
      },
      "nodeContext" : "mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 660,
        "startLineNumber" : 56,
        "startColumnNumber" : 87,
        "endLineNumber" : 71,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (Thread.interrupted())   return;\n  long length=Utility.getContentLength(mConn);\n  if (i == 0) {\n    httpCode=mConn.getResponseCode();\n    mMission.length=length;\n  }\n  if (length > 0)   finalLength+=length;\n  if (length < lowestSize)   lowestSize=length;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 72,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 727,
        "startLineNumber" : 56,
        "startColumnNumber" : 20,
        "endLineNumber" : 71,
        "endColumnNumber" : 21
      },
      "nodeContext" : "for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n  mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (Thread.interrupted())   return;\n  long length=Utility.getContentLength(mConn);\n  if (i == 0) {\n    httpCode=mConn.getResponseCode();\n    mMission.length=length;\n  }\n  if (length > 0)   finalLength+=length;\n  if (length < lowestSize)   lowestSize=length;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 91,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1638,
        "startLineNumber" : 51,
        "startColumnNumber" : 70,
        "endLineNumber" : 85,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  long finalLength=0;\n  long lowestSize=Long.MAX_VALUE;\n  for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n    mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (Thread.interrupted())     return;\n    long length=Utility.getContentLength(mConn);\n    if (i == 0) {\n      httpCode=mConn.getResponseCode();\n      mMission.length=length;\n    }\n    if (length > 0)     finalLength+=length;\n    if (length < lowestSize)     lowestSize=length;\n  }\n  mMission.nearLength=finalLength;\n  if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n    if (lowestSize < 1) {\n      mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n    }\n else {\n      mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 150,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2140,
        "startLineNumber" : 51,
        "startColumnNumber" : 16,
        "endLineNumber" : 95,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (mMission.blocks == null && mMission.current == 0) {\n  long finalLength=0;\n  long lowestSize=Long.MAX_VALUE;\n  for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n    mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (Thread.interrupted())     return;\n    long length=Utility.getContentLength(mConn);\n    if (i == 0) {\n      httpCode=mConn.getResponseCode();\n      mMission.length=length;\n    }\n    if (length > 0)     finalLength+=length;\n    if (length < lowestSize)     lowestSize=length;\n  }\n  mMission.nearLength=finalLength;\n  if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n    if (lowestSize < 1) {\n      mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n    }\n else {\n      mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n    }\n  }\n}\n else {\n  mConn=mMission.openConnection(true,-1,-1);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (!mMission.running || Thread.interrupted())   return;\n  httpCode=mConn.getResponseCode();\n  mMission.length=Utility.getContentLength(mConn);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 208,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5639,
        "startLineNumber" : 50,
        "startColumnNumber" : 16,
        "endLineNumber" : 173,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6689,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n catch (InterruptedIOException|ClosedByInterruptException e) {\n  return;\n}\ncatch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 673,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 6713,
        "startLineNumber" : 49,
        "startColumnNumber" : 21,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 674,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6726,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 676,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 57,
        "startColumnNumber" : 24,
        "endLineNumber" : 57,
        "endColumnNumber" : 88
      },
      "nodeContext" : "mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "us.shandian.giga.get.DownloadMission"
  }, {
    "nodeContext" : "mMission",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 58,
      "startColumnNumber" : 24,
      "endLineNumber" : 58,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 58,
        "startColumnNumber" : 24,
        "endLineNumber" : 58,
        "endColumnNumber" : 64
      },
      "nodeContext" : "mMission.establishConnection(mId,mConn)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 58,
        "startColumnNumber" : 24,
        "endLineNumber" : 58,
        "endColumnNumber" : 65
      },
      "nodeContext" : "mMission.establishConnection(mId,mConn);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 660,
        "startLineNumber" : 56,
        "startColumnNumber" : 87,
        "endLineNumber" : 71,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (Thread.interrupted())   return;\n  long length=Utility.getContentLength(mConn);\n  if (i == 0) {\n    httpCode=mConn.getResponseCode();\n    mMission.length=length;\n  }\n  if (length > 0)   finalLength+=length;\n  if (length < lowestSize)   lowestSize=length;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 72,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 727,
        "startLineNumber" : 56,
        "startColumnNumber" : 20,
        "endLineNumber" : 71,
        "endColumnNumber" : 21
      },
      "nodeContext" : "for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n  mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (Thread.interrupted())   return;\n  long length=Utility.getContentLength(mConn);\n  if (i == 0) {\n    httpCode=mConn.getResponseCode();\n    mMission.length=length;\n  }\n  if (length > 0)   finalLength+=length;\n  if (length < lowestSize)   lowestSize=length;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 91,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1638,
        "startLineNumber" : 51,
        "startColumnNumber" : 70,
        "endLineNumber" : 85,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  long finalLength=0;\n  long lowestSize=Long.MAX_VALUE;\n  for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n    mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (Thread.interrupted())     return;\n    long length=Utility.getContentLength(mConn);\n    if (i == 0) {\n      httpCode=mConn.getResponseCode();\n      mMission.length=length;\n    }\n    if (length > 0)     finalLength+=length;\n    if (length < lowestSize)     lowestSize=length;\n  }\n  mMission.nearLength=finalLength;\n  if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n    if (lowestSize < 1) {\n      mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n    }\n else {\n      mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 150,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2140,
        "startLineNumber" : 51,
        "startColumnNumber" : 16,
        "endLineNumber" : 95,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (mMission.blocks == null && mMission.current == 0) {\n  long finalLength=0;\n  long lowestSize=Long.MAX_VALUE;\n  for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n    mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (Thread.interrupted())     return;\n    long length=Utility.getContentLength(mConn);\n    if (i == 0) {\n      httpCode=mConn.getResponseCode();\n      mMission.length=length;\n    }\n    if (length > 0)     finalLength+=length;\n    if (length < lowestSize)     lowestSize=length;\n  }\n  mMission.nearLength=finalLength;\n  if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n    if (lowestSize < 1) {\n      mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n    }\n else {\n      mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n    }\n  }\n}\n else {\n  mConn=mMission.openConnection(true,-1,-1);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (!mMission.running || Thread.interrupted())   return;\n  httpCode=mConn.getResponseCode();\n  mMission.length=Utility.getContentLength(mConn);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 208,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5639,
        "startLineNumber" : 50,
        "startColumnNumber" : 16,
        "endLineNumber" : 173,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6689,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n catch (InterruptedIOException|ClosedByInterruptException e) {\n  return;\n}\ncatch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 673,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 6713,
        "startLineNumber" : 49,
        "startColumnNumber" : 21,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 674,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6726,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 676,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 58,
        "startColumnNumber" : 24,
        "endLineNumber" : 58,
        "endColumnNumber" : 65
      },
      "nodeContext" : "mMission.establishConnection(mId,mConn);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "us.shandian.giga.get.DownloadMission"
  }, {
    "nodeContext" : "mMission",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 66,
      "startColumnNumber" : 28,
      "endLineNumber" : 66,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 66,
        "startColumnNumber" : 28,
        "endLineNumber" : 66,
        "endColumnNumber" : 43
      },
      "nodeContext" : "mMission.length",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 66,
        "startColumnNumber" : 28,
        "endLineNumber" : 66,
        "endColumnNumber" : 52
      },
      "nodeContext" : "mMission.length=length",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 66,
        "startColumnNumber" : 28,
        "endLineNumber" : 66,
        "endColumnNumber" : 53
      },
      "nodeContext" : "mMission.length=length;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 145,
        "startLineNumber" : 64,
        "startColumnNumber" : 36,
        "endLineNumber" : 67,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  httpCode=mConn.getResponseCode();\n  mMission.length=length;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 157,
        "startLineNumber" : 64,
        "startColumnNumber" : 24,
        "endLineNumber" : 67,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (i == 0) {\n  httpCode=mConn.getResponseCode();\n  mMission.length=length;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 660,
        "startLineNumber" : 56,
        "startColumnNumber" : 87,
        "endLineNumber" : 71,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (Thread.interrupted())   return;\n  long length=Utility.getContentLength(mConn);\n  if (i == 0) {\n    httpCode=mConn.getResponseCode();\n    mMission.length=length;\n  }\n  if (length > 0)   finalLength+=length;\n  if (length < lowestSize)   lowestSize=length;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 72,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 727,
        "startLineNumber" : 56,
        "startColumnNumber" : 20,
        "endLineNumber" : 71,
        "endColumnNumber" : 21
      },
      "nodeContext" : "for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n  mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (Thread.interrupted())   return;\n  long length=Utility.getContentLength(mConn);\n  if (i == 0) {\n    httpCode=mConn.getResponseCode();\n    mMission.length=length;\n  }\n  if (length > 0)   finalLength+=length;\n  if (length < lowestSize)   lowestSize=length;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 91,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1638,
        "startLineNumber" : 51,
        "startColumnNumber" : 70,
        "endLineNumber" : 85,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  long finalLength=0;\n  long lowestSize=Long.MAX_VALUE;\n  for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n    mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (Thread.interrupted())     return;\n    long length=Utility.getContentLength(mConn);\n    if (i == 0) {\n      httpCode=mConn.getResponseCode();\n      mMission.length=length;\n    }\n    if (length > 0)     finalLength+=length;\n    if (length < lowestSize)     lowestSize=length;\n  }\n  mMission.nearLength=finalLength;\n  if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n    if (lowestSize < 1) {\n      mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n    }\n else {\n      mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 150,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2140,
        "startLineNumber" : 51,
        "startColumnNumber" : 16,
        "endLineNumber" : 95,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (mMission.blocks == null && mMission.current == 0) {\n  long finalLength=0;\n  long lowestSize=Long.MAX_VALUE;\n  for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n    mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (Thread.interrupted())     return;\n    long length=Utility.getContentLength(mConn);\n    if (i == 0) {\n      httpCode=mConn.getResponseCode();\n      mMission.length=length;\n    }\n    if (length > 0)     finalLength+=length;\n    if (length < lowestSize)     lowestSize=length;\n  }\n  mMission.nearLength=finalLength;\n  if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n    if (lowestSize < 1) {\n      mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n    }\n else {\n      mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n    }\n  }\n}\n else {\n  mConn=mMission.openConnection(true,-1,-1);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (!mMission.running || Thread.interrupted())   return;\n  httpCode=mConn.getResponseCode();\n  mMission.length=Utility.getContentLength(mConn);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 208,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5639,
        "startLineNumber" : 50,
        "startColumnNumber" : 16,
        "endLineNumber" : 173,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6689,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n catch (InterruptedIOException|ClosedByInterruptException e) {\n  return;\n}\ncatch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 673,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 6713,
        "startLineNumber" : 49,
        "startColumnNumber" : 21,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 674,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6726,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 676,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 66,
        "startColumnNumber" : 28,
        "endLineNumber" : 66,
        "endColumnNumber" : 53
      },
      "nodeContext" : "mMission.length=length;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "us.shandian.giga.get.Mission"
  }, {
    "nodeContext" : "mMission",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 73,
      "startColumnNumber" : 20,
      "endLineNumber" : 73,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 73,
        "startColumnNumber" : 20,
        "endLineNumber" : 73,
        "endColumnNumber" : 39
      },
      "nodeContext" : "mMission.nearLength",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 73,
        "startColumnNumber" : 20,
        "endLineNumber" : 73,
        "endColumnNumber" : 53
      },
      "nodeContext" : "mMission.nearLength=finalLength",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 73,
        "startColumnNumber" : 20,
        "endLineNumber" : 73,
        "endColumnNumber" : 54
      },
      "nodeContext" : "mMission.nearLength=finalLength;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1638,
        "startLineNumber" : 51,
        "startColumnNumber" : 70,
        "endLineNumber" : 85,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  long finalLength=0;\n  long lowestSize=Long.MAX_VALUE;\n  for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n    mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (Thread.interrupted())     return;\n    long length=Utility.getContentLength(mConn);\n    if (i == 0) {\n      httpCode=mConn.getResponseCode();\n      mMission.length=length;\n    }\n    if (length > 0)     finalLength+=length;\n    if (length < lowestSize)     lowestSize=length;\n  }\n  mMission.nearLength=finalLength;\n  if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n    if (lowestSize < 1) {\n      mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n    }\n else {\n      mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 150,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2140,
        "startLineNumber" : 51,
        "startColumnNumber" : 16,
        "endLineNumber" : 95,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (mMission.blocks == null && mMission.current == 0) {\n  long finalLength=0;\n  long lowestSize=Long.MAX_VALUE;\n  for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n    mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (Thread.interrupted())     return;\n    long length=Utility.getContentLength(mConn);\n    if (i == 0) {\n      httpCode=mConn.getResponseCode();\n      mMission.length=length;\n    }\n    if (length > 0)     finalLength+=length;\n    if (length < lowestSize)     lowestSize=length;\n  }\n  mMission.nearLength=finalLength;\n  if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n    if (lowestSize < 1) {\n      mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n    }\n else {\n      mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n    }\n  }\n}\n else {\n  mConn=mMission.openConnection(true,-1,-1);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (!mMission.running || Thread.interrupted())   return;\n  httpCode=mConn.getResponseCode();\n  mMission.length=Utility.getContentLength(mConn);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 208,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5639,
        "startLineNumber" : 50,
        "startColumnNumber" : 16,
        "endLineNumber" : 173,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6689,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n catch (InterruptedIOException|ClosedByInterruptException e) {\n  return;\n}\ncatch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 673,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 6713,
        "startLineNumber" : 49,
        "startColumnNumber" : 21,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 674,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6726,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 676,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 73,
        "startColumnNumber" : 20,
        "endLineNumber" : 73,
        "endColumnNumber" : 54
      },
      "nodeContext" : "mMission.nearLength=finalLength;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "us.shandian.giga.get.DownloadMission"
  }, {
    "nodeContext" : "mMission",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 76,
      "startColumnNumber" : 24,
      "endLineNumber" : 76,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 76,
        "startColumnNumber" : 24,
        "endLineNumber" : 76,
        "endColumnNumber" : 44
      },
      "nodeContext" : "mMission.psAlgorithm",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 76,
        "startColumnNumber" : 24,
        "endLineNumber" : 76,
        "endColumnNumber" : 52
      },
      "nodeContext" : "mMission.psAlgorithm != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 76,
        "startColumnNumber" : 24,
        "endLineNumber" : 76,
        "endColumnNumber" : 89
      },
      "nodeContext" : "mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 571,
        "startLineNumber" : 76,
        "startColumnNumber" : 20,
        "endLineNumber" : 84,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n  if (lowestSize < 1) {\n    mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n  }\n else {\n    mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 40,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1638,
        "startLineNumber" : 51,
        "startColumnNumber" : 70,
        "endLineNumber" : 85,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  long finalLength=0;\n  long lowestSize=Long.MAX_VALUE;\n  for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n    mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (Thread.interrupted())     return;\n    long length=Utility.getContentLength(mConn);\n    if (i == 0) {\n      httpCode=mConn.getResponseCode();\n      mMission.length=length;\n    }\n    if (length > 0)     finalLength+=length;\n    if (length < lowestSize)     lowestSize=length;\n  }\n  mMission.nearLength=finalLength;\n  if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n    if (lowestSize < 1) {\n      mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n    }\n else {\n      mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 150,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2140,
        "startLineNumber" : 51,
        "startColumnNumber" : 16,
        "endLineNumber" : 95,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (mMission.blocks == null && mMission.current == 0) {\n  long finalLength=0;\n  long lowestSize=Long.MAX_VALUE;\n  for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n    mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (Thread.interrupted())     return;\n    long length=Utility.getContentLength(mConn);\n    if (i == 0) {\n      httpCode=mConn.getResponseCode();\n      mMission.length=length;\n    }\n    if (length > 0)     finalLength+=length;\n    if (length < lowestSize)     lowestSize=length;\n  }\n  mMission.nearLength=finalLength;\n  if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n    if (lowestSize < 1) {\n      mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n    }\n else {\n      mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n    }\n  }\n}\n else {\n  mConn=mMission.openConnection(true,-1,-1);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (!mMission.running || Thread.interrupted())   return;\n  httpCode=mConn.getResponseCode();\n  mMission.length=Utility.getContentLength(mConn);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 208,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5639,
        "startLineNumber" : 50,
        "startColumnNumber" : 16,
        "endLineNumber" : 173,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6689,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n catch (InterruptedIOException|ClosedByInterruptException e) {\n  return;\n}\ncatch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 673,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 6713,
        "startLineNumber" : 49,
        "startColumnNumber" : 21,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 674,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6726,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 676,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 76,
        "startColumnNumber" : 24,
        "endLineNumber" : 76,
        "endColumnNumber" : 89
      },
      "nodeContext" : "mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "us.shandian.giga.get.DownloadMission"
  }, {
    "nodeContext" : "mMission",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 76,
      "startColumnNumber" : 56,
      "endLineNumber" : 76,
      "endColumnNumber" : 64
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 76,
        "startColumnNumber" : 56,
        "endLineNumber" : 76,
        "endColumnNumber" : 76
      },
      "nodeContext" : "mMission.psAlgorithm",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 76,
        "startColumnNumber" : 56,
        "endLineNumber" : 76,
        "endColumnNumber" : 89
      },
      "nodeContext" : "mMission.psAlgorithm.reserveSpace",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 76,
        "startColumnNumber" : 24,
        "endLineNumber" : 76,
        "endColumnNumber" : 89
      },
      "nodeContext" : "mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 571,
        "startLineNumber" : 76,
        "startColumnNumber" : 20,
        "endLineNumber" : 84,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n  if (lowestSize < 1) {\n    mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n  }\n else {\n    mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 40,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1638,
        "startLineNumber" : 51,
        "startColumnNumber" : 70,
        "endLineNumber" : 85,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  long finalLength=0;\n  long lowestSize=Long.MAX_VALUE;\n  for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n    mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (Thread.interrupted())     return;\n    long length=Utility.getContentLength(mConn);\n    if (i == 0) {\n      httpCode=mConn.getResponseCode();\n      mMission.length=length;\n    }\n    if (length > 0)     finalLength+=length;\n    if (length < lowestSize)     lowestSize=length;\n  }\n  mMission.nearLength=finalLength;\n  if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n    if (lowestSize < 1) {\n      mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n    }\n else {\n      mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 150,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2140,
        "startLineNumber" : 51,
        "startColumnNumber" : 16,
        "endLineNumber" : 95,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (mMission.blocks == null && mMission.current == 0) {\n  long finalLength=0;\n  long lowestSize=Long.MAX_VALUE;\n  for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n    mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (Thread.interrupted())     return;\n    long length=Utility.getContentLength(mConn);\n    if (i == 0) {\n      httpCode=mConn.getResponseCode();\n      mMission.length=length;\n    }\n    if (length > 0)     finalLength+=length;\n    if (length < lowestSize)     lowestSize=length;\n  }\n  mMission.nearLength=finalLength;\n  if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n    if (lowestSize < 1) {\n      mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n    }\n else {\n      mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n    }\n  }\n}\n else {\n  mConn=mMission.openConnection(true,-1,-1);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (!mMission.running || Thread.interrupted())   return;\n  httpCode=mConn.getResponseCode();\n  mMission.length=Utility.getContentLength(mConn);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 208,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5639,
        "startLineNumber" : 50,
        "startColumnNumber" : 16,
        "endLineNumber" : 173,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6689,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n catch (InterruptedIOException|ClosedByInterruptException e) {\n  return;\n}\ncatch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 673,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 6713,
        "startLineNumber" : 49,
        "startColumnNumber" : 21,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 674,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6726,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 676,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 76,
        "startColumnNumber" : 24,
        "endLineNumber" : 76,
        "endColumnNumber" : 89
      },
      "nodeContext" : "mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "us.shandian.giga.get.DownloadMission"
  }, {
    "nodeContext" : "mMission",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 79,
      "startColumnNumber" : 28,
      "endLineNumber" : 79,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 79,
        "startColumnNumber" : 28,
        "endLineNumber" : 79,
        "endColumnNumber" : 44
      },
      "nodeContext" : "mMission.offsets",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 79,
        "startColumnNumber" : 28,
        "endLineNumber" : 79,
        "endColumnNumber" : 47
      },
      "nodeContext" : "mMission.offsets[0]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 79,
        "startColumnNumber" : 28,
        "endLineNumber" : 79,
        "endColumnNumber" : 71
      },
      "nodeContext" : "mMission.offsets[0]=RESERVE_SPACE_DEFAULT",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 79,
        "startColumnNumber" : 28,
        "endLineNumber" : 79,
        "endColumnNumber" : 72
      },
      "nodeContext" : "mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 174,
        "startLineNumber" : 77,
        "startColumnNumber" : 44,
        "endLineNumber" : 80,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 452,
        "startLineNumber" : 77,
        "startColumnNumber" : 24,
        "endLineNumber" : 83,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (lowestSize < 1) {\n  mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n}\n else {\n  mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 500,
        "startLineNumber" : 76,
        "startColumnNumber" : 91,
        "endLineNumber" : 84,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (lowestSize < 1) {\n    mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n  }\n else {\n    mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 28,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 571,
        "startLineNumber" : 76,
        "startColumnNumber" : 20,
        "endLineNumber" : 84,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n  if (lowestSize < 1) {\n    mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n  }\n else {\n    mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 40,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1638,
        "startLineNumber" : 51,
        "startColumnNumber" : 70,
        "endLineNumber" : 85,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  long finalLength=0;\n  long lowestSize=Long.MAX_VALUE;\n  for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n    mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (Thread.interrupted())     return;\n    long length=Utility.getContentLength(mConn);\n    if (i == 0) {\n      httpCode=mConn.getResponseCode();\n      mMission.length=length;\n    }\n    if (length > 0)     finalLength+=length;\n    if (length < lowestSize)     lowestSize=length;\n  }\n  mMission.nearLength=finalLength;\n  if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n    if (lowestSize < 1) {\n      mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n    }\n else {\n      mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 150,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2140,
        "startLineNumber" : 51,
        "startColumnNumber" : 16,
        "endLineNumber" : 95,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (mMission.blocks == null && mMission.current == 0) {\n  long finalLength=0;\n  long lowestSize=Long.MAX_VALUE;\n  for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n    mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (Thread.interrupted())     return;\n    long length=Utility.getContentLength(mConn);\n    if (i == 0) {\n      httpCode=mConn.getResponseCode();\n      mMission.length=length;\n    }\n    if (length > 0)     finalLength+=length;\n    if (length < lowestSize)     lowestSize=length;\n  }\n  mMission.nearLength=finalLength;\n  if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n    if (lowestSize < 1) {\n      mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n    }\n else {\n      mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n    }\n  }\n}\n else {\n  mConn=mMission.openConnection(true,-1,-1);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (!mMission.running || Thread.interrupted())   return;\n  httpCode=mConn.getResponseCode();\n  mMission.length=Utility.getContentLength(mConn);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 208,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5639,
        "startLineNumber" : 50,
        "startColumnNumber" : 16,
        "endLineNumber" : 173,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6689,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n catch (InterruptedIOException|ClosedByInterruptException e) {\n  return;\n}\ncatch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 673,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 6713,
        "startLineNumber" : 49,
        "startColumnNumber" : 21,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 674,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6726,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 676,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 79,
        "startColumnNumber" : 28,
        "endLineNumber" : 79,
        "endColumnNumber" : 72
      },
      "nodeContext" : "mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "us.shandian.giga.get.DownloadMission"
  }, {
    "nodeContext" : "mMission",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 82,
      "startColumnNumber" : 28,
      "endLineNumber" : 82,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 82,
        "startColumnNumber" : 28,
        "endLineNumber" : 82,
        "endColumnNumber" : 44
      },
      "nodeContext" : "mMission.offsets",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 82,
        "startColumnNumber" : 28,
        "endLineNumber" : 82,
        "endColumnNumber" : 47
      },
      "nodeContext" : "mMission.offsets[0]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 82,
        "startColumnNumber" : 28,
        "endLineNumber" : 82,
        "endColumnNumber" : 121
      },
      "nodeContext" : "mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM",
      "nodeType" : "Assignment",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 82,
        "startColumnNumber" : 28,
        "endLineNumber" : 82,
        "endColumnNumber" : 122
      },
      "nodeContext" : "mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 252,
        "startLineNumber" : 80,
        "startColumnNumber" : 31,
        "endLineNumber" : 83,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 452,
        "startLineNumber" : 77,
        "startColumnNumber" : 24,
        "endLineNumber" : 83,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (lowestSize < 1) {\n  mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n}\n else {\n  mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 500,
        "startLineNumber" : 76,
        "startColumnNumber" : 91,
        "endLineNumber" : 84,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (lowestSize < 1) {\n    mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n  }\n else {\n    mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 28,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 571,
        "startLineNumber" : 76,
        "startColumnNumber" : 20,
        "endLineNumber" : 84,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n  if (lowestSize < 1) {\n    mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n  }\n else {\n    mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 40,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1638,
        "startLineNumber" : 51,
        "startColumnNumber" : 70,
        "endLineNumber" : 85,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  long finalLength=0;\n  long lowestSize=Long.MAX_VALUE;\n  for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n    mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (Thread.interrupted())     return;\n    long length=Utility.getContentLength(mConn);\n    if (i == 0) {\n      httpCode=mConn.getResponseCode();\n      mMission.length=length;\n    }\n    if (length > 0)     finalLength+=length;\n    if (length < lowestSize)     lowestSize=length;\n  }\n  mMission.nearLength=finalLength;\n  if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n    if (lowestSize < 1) {\n      mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n    }\n else {\n      mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 150,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2140,
        "startLineNumber" : 51,
        "startColumnNumber" : 16,
        "endLineNumber" : 95,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (mMission.blocks == null && mMission.current == 0) {\n  long finalLength=0;\n  long lowestSize=Long.MAX_VALUE;\n  for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n    mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (Thread.interrupted())     return;\n    long length=Utility.getContentLength(mConn);\n    if (i == 0) {\n      httpCode=mConn.getResponseCode();\n      mMission.length=length;\n    }\n    if (length > 0)     finalLength+=length;\n    if (length < lowestSize)     lowestSize=length;\n  }\n  mMission.nearLength=finalLength;\n  if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n    if (lowestSize < 1) {\n      mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n    }\n else {\n      mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n    }\n  }\n}\n else {\n  mConn=mMission.openConnection(true,-1,-1);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (!mMission.running || Thread.interrupted())   return;\n  httpCode=mConn.getResponseCode();\n  mMission.length=Utility.getContentLength(mConn);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 208,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5639,
        "startLineNumber" : 50,
        "startColumnNumber" : 16,
        "endLineNumber" : 173,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6689,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n catch (InterruptedIOException|ClosedByInterruptException e) {\n  return;\n}\ncatch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 673,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 6713,
        "startLineNumber" : 49,
        "startColumnNumber" : 21,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 674,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6726,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 676,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 82,
        "startColumnNumber" : 28,
        "endLineNumber" : 82,
        "endColumnNumber" : 122
      },
      "nodeContext" : "mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "us.shandian.giga.get.DownloadMission"
  }, {
    "nodeContext" : "mMission",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 87,
      "startColumnNumber" : 28,
      "endLineNumber" : 87,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 87,
        "startColumnNumber" : 28,
        "endLineNumber" : 87,
        "endColumnNumber" : 65
      },
      "nodeContext" : "mMission.openConnection(true,-1,-1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 87,
        "startColumnNumber" : 20,
        "endLineNumber" : 87,
        "endColumnNumber" : 65
      },
      "nodeContext" : "mConn=mMission.openConnection(true,-1,-1)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 87,
        "startColumnNumber" : 20,
        "endLineNumber" : 87,
        "endColumnNumber" : 66
      },
      "nodeContext" : "mConn=mMission.openConnection(true,-1,-1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 442,
        "startLineNumber" : 85,
        "startColumnNumber" : 23,
        "endLineNumber" : 95,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  mConn=mMission.openConnection(true,-1,-1);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (!mMission.running || Thread.interrupted())   return;\n  httpCode=mConn.getResponseCode();\n  mMission.length=Utility.getContentLength(mConn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 46,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2140,
        "startLineNumber" : 51,
        "startColumnNumber" : 16,
        "endLineNumber" : 95,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (mMission.blocks == null && mMission.current == 0) {\n  long finalLength=0;\n  long lowestSize=Long.MAX_VALUE;\n  for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n    mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (Thread.interrupted())     return;\n    long length=Utility.getContentLength(mConn);\n    if (i == 0) {\n      httpCode=mConn.getResponseCode();\n      mMission.length=length;\n    }\n    if (length > 0)     finalLength+=length;\n    if (length < lowestSize)     lowestSize=length;\n  }\n  mMission.nearLength=finalLength;\n  if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n    if (lowestSize < 1) {\n      mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n    }\n else {\n      mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n    }\n  }\n}\n else {\n  mConn=mMission.openConnection(true,-1,-1);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (!mMission.running || Thread.interrupted())   return;\n  httpCode=mConn.getResponseCode();\n  mMission.length=Utility.getContentLength(mConn);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 208,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5639,
        "startLineNumber" : 50,
        "startColumnNumber" : 16,
        "endLineNumber" : 173,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6689,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n catch (InterruptedIOException|ClosedByInterruptException e) {\n  return;\n}\ncatch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 673,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 6713,
        "startLineNumber" : 49,
        "startColumnNumber" : 21,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 674,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6726,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 676,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 87,
        "startColumnNumber" : 20,
        "endLineNumber" : 87,
        "endColumnNumber" : 66
      },
      "nodeContext" : "mConn=mMission.openConnection(true,-1,-1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "us.shandian.giga.get.DownloadMission"
  }, {
    "nodeContext" : "mMission",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 88,
      "startColumnNumber" : 20,
      "endLineNumber" : 88,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 88,
        "startColumnNumber" : 20,
        "endLineNumber" : 88,
        "endColumnNumber" : 60
      },
      "nodeContext" : "mMission.establishConnection(mId,mConn)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 88,
        "startColumnNumber" : 20,
        "endLineNumber" : 88,
        "endColumnNumber" : 61
      },
      "nodeContext" : "mMission.establishConnection(mId,mConn);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 442,
        "startLineNumber" : 85,
        "startColumnNumber" : 23,
        "endLineNumber" : 95,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  mConn=mMission.openConnection(true,-1,-1);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (!mMission.running || Thread.interrupted())   return;\n  httpCode=mConn.getResponseCode();\n  mMission.length=Utility.getContentLength(mConn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 46,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2140,
        "startLineNumber" : 51,
        "startColumnNumber" : 16,
        "endLineNumber" : 95,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (mMission.blocks == null && mMission.current == 0) {\n  long finalLength=0;\n  long lowestSize=Long.MAX_VALUE;\n  for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n    mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (Thread.interrupted())     return;\n    long length=Utility.getContentLength(mConn);\n    if (i == 0) {\n      httpCode=mConn.getResponseCode();\n      mMission.length=length;\n    }\n    if (length > 0)     finalLength+=length;\n    if (length < lowestSize)     lowestSize=length;\n  }\n  mMission.nearLength=finalLength;\n  if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n    if (lowestSize < 1) {\n      mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n    }\n else {\n      mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n    }\n  }\n}\n else {\n  mConn=mMission.openConnection(true,-1,-1);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (!mMission.running || Thread.interrupted())   return;\n  httpCode=mConn.getResponseCode();\n  mMission.length=Utility.getContentLength(mConn);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 208,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5639,
        "startLineNumber" : 50,
        "startColumnNumber" : 16,
        "endLineNumber" : 173,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6689,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n catch (InterruptedIOException|ClosedByInterruptException e) {\n  return;\n}\ncatch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 673,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 6713,
        "startLineNumber" : 49,
        "startColumnNumber" : 21,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 674,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6726,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 676,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 88,
        "startColumnNumber" : 20,
        "endLineNumber" : 88,
        "endColumnNumber" : 61
      },
      "nodeContext" : "mMission.establishConnection(mId,mConn);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "us.shandian.giga.get.DownloadMission"
  }, {
    "nodeContext" : "mMission",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 91,
      "startColumnNumber" : 25,
      "endLineNumber" : 91,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 91,
        "startColumnNumber" : 25,
        "endLineNumber" : 91,
        "endColumnNumber" : 41
      },
      "nodeContext" : "mMission.running",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 91,
        "startColumnNumber" : 24,
        "endLineNumber" : 91,
        "endColumnNumber" : 41
      },
      "nodeContext" : "!mMission.running",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 91,
        "startColumnNumber" : 24,
        "endLineNumber" : 91,
        "endColumnNumber" : 65
      },
      "nodeContext" : "!mMission.running || Thread.interrupted()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 91,
        "startColumnNumber" : 20,
        "endLineNumber" : 91,
        "endColumnNumber" : 74
      },
      "nodeContext" : "if (!mMission.running || Thread.interrupted()) return;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 442,
        "startLineNumber" : 85,
        "startColumnNumber" : 23,
        "endLineNumber" : 95,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  mConn=mMission.openConnection(true,-1,-1);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (!mMission.running || Thread.interrupted())   return;\n  httpCode=mConn.getResponseCode();\n  mMission.length=Utility.getContentLength(mConn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 46,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2140,
        "startLineNumber" : 51,
        "startColumnNumber" : 16,
        "endLineNumber" : 95,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (mMission.blocks == null && mMission.current == 0) {\n  long finalLength=0;\n  long lowestSize=Long.MAX_VALUE;\n  for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n    mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (Thread.interrupted())     return;\n    long length=Utility.getContentLength(mConn);\n    if (i == 0) {\n      httpCode=mConn.getResponseCode();\n      mMission.length=length;\n    }\n    if (length > 0)     finalLength+=length;\n    if (length < lowestSize)     lowestSize=length;\n  }\n  mMission.nearLength=finalLength;\n  if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n    if (lowestSize < 1) {\n      mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n    }\n else {\n      mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n    }\n  }\n}\n else {\n  mConn=mMission.openConnection(true,-1,-1);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (!mMission.running || Thread.interrupted())   return;\n  httpCode=mConn.getResponseCode();\n  mMission.length=Utility.getContentLength(mConn);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 208,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5639,
        "startLineNumber" : 50,
        "startColumnNumber" : 16,
        "endLineNumber" : 173,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6689,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n catch (InterruptedIOException|ClosedByInterruptException e) {\n  return;\n}\ncatch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 673,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 6713,
        "startLineNumber" : 49,
        "startColumnNumber" : 21,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 674,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6726,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 676,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 91,
        "startColumnNumber" : 20,
        "endLineNumber" : 91,
        "endColumnNumber" : 74
      },
      "nodeContext" : "if (!mMission.running || Thread.interrupted()) return;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "us.shandian.giga.get.DownloadMission"
  }, {
    "nodeContext" : "mMission",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 94,
      "startColumnNumber" : 20,
      "endLineNumber" : 94,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 94,
        "startColumnNumber" : 20,
        "endLineNumber" : 94,
        "endColumnNumber" : 35
      },
      "nodeContext" : "mMission.length",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 94,
        "startColumnNumber" : 20,
        "endLineNumber" : 94,
        "endColumnNumber" : 69
      },
      "nodeContext" : "mMission.length=Utility.getContentLength(mConn)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 94,
        "startColumnNumber" : 20,
        "endLineNumber" : 94,
        "endColumnNumber" : 70
      },
      "nodeContext" : "mMission.length=Utility.getContentLength(mConn);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 442,
        "startLineNumber" : 85,
        "startColumnNumber" : 23,
        "endLineNumber" : 95,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  mConn=mMission.openConnection(true,-1,-1);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (!mMission.running || Thread.interrupted())   return;\n  httpCode=mConn.getResponseCode();\n  mMission.length=Utility.getContentLength(mConn);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 46,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2140,
        "startLineNumber" : 51,
        "startColumnNumber" : 16,
        "endLineNumber" : 95,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (mMission.blocks == null && mMission.current == 0) {\n  long finalLength=0;\n  long lowestSize=Long.MAX_VALUE;\n  for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n    mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (Thread.interrupted())     return;\n    long length=Utility.getContentLength(mConn);\n    if (i == 0) {\n      httpCode=mConn.getResponseCode();\n      mMission.length=length;\n    }\n    if (length > 0)     finalLength+=length;\n    if (length < lowestSize)     lowestSize=length;\n  }\n  mMission.nearLength=finalLength;\n  if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n    if (lowestSize < 1) {\n      mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n    }\n else {\n      mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n    }\n  }\n}\n else {\n  mConn=mMission.openConnection(true,-1,-1);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (!mMission.running || Thread.interrupted())   return;\n  httpCode=mConn.getResponseCode();\n  mMission.length=Utility.getContentLength(mConn);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 208,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5639,
        "startLineNumber" : 50,
        "startColumnNumber" : 16,
        "endLineNumber" : 173,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6689,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n catch (InterruptedIOException|ClosedByInterruptException e) {\n  return;\n}\ncatch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 673,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 6713,
        "startLineNumber" : 49,
        "startColumnNumber" : 21,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 674,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6726,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 676,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 94,
        "startColumnNumber" : 20,
        "endLineNumber" : 94,
        "endColumnNumber" : 70
      },
      "nodeContext" : "mMission.length=Utility.getContentLength(mConn);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "us.shandian.giga.get.Mission"
  }, {
    "nodeContext" : "mMission",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 97,
      "startColumnNumber" : 20,
      "endLineNumber" : 97,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 97,
        "startColumnNumber" : 20,
        "endLineNumber" : 97,
        "endColumnNumber" : 35
      },
      "nodeContext" : "mMission.length",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 97,
        "startColumnNumber" : 20,
        "endLineNumber" : 97,
        "endColumnNumber" : 40
      },
      "nodeContext" : "mMission.length == 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 97,
        "startColumnNumber" : 20,
        "endLineNumber" : 97,
        "endColumnNumber" : 59
      },
      "nodeContext" : "mMission.length == 0 || httpCode == 204",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 179,
        "startLineNumber" : 97,
        "startColumnNumber" : 16,
        "endLineNumber" : 100,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (mMission.length == 0 || httpCode == 204) {\n  mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5639,
        "startLineNumber" : 50,
        "startColumnNumber" : 16,
        "endLineNumber" : 173,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6689,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n catch (InterruptedIOException|ClosedByInterruptException e) {\n  return;\n}\ncatch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 673,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 6713,
        "startLineNumber" : 49,
        "startColumnNumber" : 21,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 674,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6726,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 676,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 97,
        "startColumnNumber" : 20,
        "endLineNumber" : 97,
        "endColumnNumber" : 59
      },
      "nodeContext" : "mMission.length == 0 || httpCode == 204",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "us.shandian.giga.get.Mission"
  }, {
    "nodeContext" : "mMission",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 98,
      "startColumnNumber" : 20,
      "endLineNumber" : 98,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 98,
        "startColumnNumber" : 20,
        "endLineNumber" : 98,
        "endColumnNumber" : 85
      },
      "nodeContext" : "mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 98,
        "startColumnNumber" : 20,
        "endLineNumber" : 98,
        "endColumnNumber" : 86
      },
      "nodeContext" : "mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 134,
        "startLineNumber" : 97,
        "startColumnNumber" : 61,
        "endLineNumber" : 100,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 179,
        "startLineNumber" : 97,
        "startColumnNumber" : 16,
        "endLineNumber" : 100,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (mMission.length == 0 || httpCode == 204) {\n  mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5639,
        "startLineNumber" : 50,
        "startColumnNumber" : 16,
        "endLineNumber" : 173,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6689,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n catch (InterruptedIOException|ClosedByInterruptException e) {\n  return;\n}\ncatch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 673,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 6713,
        "startLineNumber" : 49,
        "startColumnNumber" : 21,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 674,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6726,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 676,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 98,
        "startColumnNumber" : 20,
        "endLineNumber" : 98,
        "endColumnNumber" : 86
      },
      "nodeContext" : "mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "us.shandian.giga.get.DownloadMission"
  }, {
    "nodeContext" : "mMission",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 103,
      "startColumnNumber" : 20,
      "endLineNumber" : 103,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 103,
        "startColumnNumber" : 20,
        "endLineNumber" : 103,
        "endColumnNumber" : 35
      },
      "nodeContext" : "mMission.length",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 103,
        "startColumnNumber" : 20,
        "endLineNumber" : 103,
        "endColumnNumber" : 41
      },
      "nodeContext" : "mMission.length == -1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 103,
        "startColumnNumber" : 20,
        "endLineNumber" : 103,
        "endColumnNumber" : 75
      },
      "nodeContext" : "mMission.length == -1 && mConn.getResponseCode() == 200",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2086,
        "startLineNumber" : 103,
        "startColumnNumber" : 16,
        "endLineNumber" : 148,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n  mMission.blocks=new int[0];\n  mMission.length=0;\n  mMission.unknownLength=true;\n  if (DEBUG) {\n    Log.d(TAG,\"falling back (unknown length)\");\n  }\n}\n else {\n  mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (!mMission.running || Thread.interrupted())   return;\nsynchronized (mMission.LOCK) {\n    if (mConn.getResponseCode() == 206) {\n      if (mMission.threadCount > 1) {\n        int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n        if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)         count++;\n        mMission.blocks=new int[count];\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n      }\n      if (DEBUG) {\n        Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n      }\n    }\n else {\n      mMission.blocks=new int[0];\n      mMission.unknownLength=false;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n      }\n    }\n  }\n  if (!mMission.running || Thread.interrupted())   return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 207,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5639,
        "startLineNumber" : 50,
        "startColumnNumber" : 16,
        "endLineNumber" : 173,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6689,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n catch (InterruptedIOException|ClosedByInterruptException e) {\n  return;\n}\ncatch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 673,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 6713,
        "startLineNumber" : 49,
        "startColumnNumber" : 21,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 674,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6726,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 676,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 103,
        "startColumnNumber" : 20,
        "endLineNumber" : 103,
        "endColumnNumber" : 75
      },
      "nodeContext" : "mMission.length == -1 && mConn.getResponseCode() == 200",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "us.shandian.giga.get.Mission"
  }, {
    "nodeContext" : "mMission",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 104,
      "startColumnNumber" : 20,
      "endLineNumber" : 104,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 104,
        "startColumnNumber" : 20,
        "endLineNumber" : 104,
        "endColumnNumber" : 35
      },
      "nodeContext" : "mMission.blocks",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 104,
        "startColumnNumber" : 20,
        "endLineNumber" : 104,
        "endColumnNumber" : 48
      },
      "nodeContext" : "mMission.blocks=new int[0]",
      "nodeType" : "Assignment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 104,
        "startColumnNumber" : 20,
        "endLineNumber" : 104,
        "endColumnNumber" : 49
      },
      "nodeContext" : "mMission.blocks=new int[0];\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 286,
        "startLineNumber" : 103,
        "startColumnNumber" : 77,
        "endLineNumber" : 111,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  mMission.blocks=new int[0];\n  mMission.length=0;\n  mMission.unknownLength=true;\n  if (DEBUG) {\n    Log.d(TAG,\"falling back (unknown length)\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 32,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2086,
        "startLineNumber" : 103,
        "startColumnNumber" : 16,
        "endLineNumber" : 148,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n  mMission.blocks=new int[0];\n  mMission.length=0;\n  mMission.unknownLength=true;\n  if (DEBUG) {\n    Log.d(TAG,\"falling back (unknown length)\");\n  }\n}\n else {\n  mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (!mMission.running || Thread.interrupted())   return;\nsynchronized (mMission.LOCK) {\n    if (mConn.getResponseCode() == 206) {\n      if (mMission.threadCount > 1) {\n        int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n        if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)         count++;\n        mMission.blocks=new int[count];\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n      }\n      if (DEBUG) {\n        Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n      }\n    }\n else {\n      mMission.blocks=new int[0];\n      mMission.unknownLength=false;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n      }\n    }\n  }\n  if (!mMission.running || Thread.interrupted())   return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 207,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5639,
        "startLineNumber" : 50,
        "startColumnNumber" : 16,
        "endLineNumber" : 173,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6689,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n catch (InterruptedIOException|ClosedByInterruptException e) {\n  return;\n}\ncatch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 673,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 6713,
        "startLineNumber" : 49,
        "startColumnNumber" : 21,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 674,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6726,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 676,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 104,
        "startColumnNumber" : 20,
        "endLineNumber" : 104,
        "endColumnNumber" : 49
      },
      "nodeContext" : "mMission.blocks=new int[0];\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "us.shandian.giga.get.DownloadMission"
  }, {
    "nodeContext" : "mMission",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 105,
      "startColumnNumber" : 20,
      "endLineNumber" : 105,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 105,
        "startColumnNumber" : 20,
        "endLineNumber" : 105,
        "endColumnNumber" : 35
      },
      "nodeContext" : "mMission.length",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 105,
        "startColumnNumber" : 20,
        "endLineNumber" : 105,
        "endColumnNumber" : 39
      },
      "nodeContext" : "mMission.length=0",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 105,
        "startColumnNumber" : 20,
        "endLineNumber" : 105,
        "endColumnNumber" : 40
      },
      "nodeContext" : "mMission.length=0;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 286,
        "startLineNumber" : 103,
        "startColumnNumber" : 77,
        "endLineNumber" : 111,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  mMission.blocks=new int[0];\n  mMission.length=0;\n  mMission.unknownLength=true;\n  if (DEBUG) {\n    Log.d(TAG,\"falling back (unknown length)\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 32,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2086,
        "startLineNumber" : 103,
        "startColumnNumber" : 16,
        "endLineNumber" : 148,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n  mMission.blocks=new int[0];\n  mMission.length=0;\n  mMission.unknownLength=true;\n  if (DEBUG) {\n    Log.d(TAG,\"falling back (unknown length)\");\n  }\n}\n else {\n  mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (!mMission.running || Thread.interrupted())   return;\nsynchronized (mMission.LOCK) {\n    if (mConn.getResponseCode() == 206) {\n      if (mMission.threadCount > 1) {\n        int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n        if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)         count++;\n        mMission.blocks=new int[count];\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n      }\n      if (DEBUG) {\n        Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n      }\n    }\n else {\n      mMission.blocks=new int[0];\n      mMission.unknownLength=false;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n      }\n    }\n  }\n  if (!mMission.running || Thread.interrupted())   return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 207,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5639,
        "startLineNumber" : 50,
        "startColumnNumber" : 16,
        "endLineNumber" : 173,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6689,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n catch (InterruptedIOException|ClosedByInterruptException e) {\n  return;\n}\ncatch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 673,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 6713,
        "startLineNumber" : 49,
        "startColumnNumber" : 21,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 674,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6726,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 676,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 105,
        "startColumnNumber" : 20,
        "endLineNumber" : 105,
        "endColumnNumber" : 40
      },
      "nodeContext" : "mMission.length=0;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "us.shandian.giga.get.Mission"
  }, {
    "nodeContext" : "mMission",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 106,
      "startColumnNumber" : 20,
      "endLineNumber" : 106,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 106,
        "startColumnNumber" : 20,
        "endLineNumber" : 106,
        "endColumnNumber" : 42
      },
      "nodeContext" : "mMission.unknownLength",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 106,
        "startColumnNumber" : 20,
        "endLineNumber" : 106,
        "endColumnNumber" : 49
      },
      "nodeContext" : "mMission.unknownLength=true",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 106,
        "startColumnNumber" : 20,
        "endLineNumber" : 106,
        "endColumnNumber" : 50
      },
      "nodeContext" : "mMission.unknownLength=true;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 286,
        "startLineNumber" : 103,
        "startColumnNumber" : 77,
        "endLineNumber" : 111,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  mMission.blocks=new int[0];\n  mMission.length=0;\n  mMission.unknownLength=true;\n  if (DEBUG) {\n    Log.d(TAG,\"falling back (unknown length)\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 32,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2086,
        "startLineNumber" : 103,
        "startColumnNumber" : 16,
        "endLineNumber" : 148,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n  mMission.blocks=new int[0];\n  mMission.length=0;\n  mMission.unknownLength=true;\n  if (DEBUG) {\n    Log.d(TAG,\"falling back (unknown length)\");\n  }\n}\n else {\n  mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (!mMission.running || Thread.interrupted())   return;\nsynchronized (mMission.LOCK) {\n    if (mConn.getResponseCode() == 206) {\n      if (mMission.threadCount > 1) {\n        int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n        if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)         count++;\n        mMission.blocks=new int[count];\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n      }\n      if (DEBUG) {\n        Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n      }\n    }\n else {\n      mMission.blocks=new int[0];\n      mMission.unknownLength=false;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n      }\n    }\n  }\n  if (!mMission.running || Thread.interrupted())   return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 207,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5639,
        "startLineNumber" : 50,
        "startColumnNumber" : 16,
        "endLineNumber" : 173,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6689,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n catch (InterruptedIOException|ClosedByInterruptException e) {\n  return;\n}\ncatch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 673,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 6713,
        "startLineNumber" : 49,
        "startColumnNumber" : 21,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 674,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6726,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 676,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 106,
        "startColumnNumber" : 20,
        "endLineNumber" : 106,
        "endColumnNumber" : 50
      },
      "nodeContext" : "mMission.unknownLength=true;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "us.shandian.giga.get.DownloadMission"
  }, {
    "nodeContext" : "mMission",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 113,
      "startColumnNumber" : 28,
      "endLineNumber" : 113,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 113,
        "startColumnNumber" : 28,
        "endLineNumber" : 113,
        "endColumnNumber" : 96
      },
      "nodeContext" : "mMission.openConnection(true,mMission.length - 10,mMission.length)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 113,
        "startColumnNumber" : 20,
        "endLineNumber" : 113,
        "endColumnNumber" : 96
      },
      "nodeContext" : "mConn=mMission.openConnection(true,mMission.length - 10,mMission.length)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 113,
        "startColumnNumber" : 20,
        "endLineNumber" : 113,
        "endColumnNumber" : 97
      },
      "nodeContext" : "mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1733,
        "startLineNumber" : 111,
        "startColumnNumber" : 23,
        "endLineNumber" : 148,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (!mMission.running || Thread.interrupted())   return;\nsynchronized (mMission.LOCK) {\n    if (mConn.getResponseCode() == 206) {\n      if (mMission.threadCount > 1) {\n        int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n        if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)         count++;\n        mMission.blocks=new int[count];\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n      }\n      if (DEBUG) {\n        Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n      }\n    }\n else {\n      mMission.blocks=new int[0];\n      mMission.unknownLength=false;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n      }\n    }\n  }\n  if (!mMission.running || Thread.interrupted())   return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 162,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2086,
        "startLineNumber" : 103,
        "startColumnNumber" : 16,
        "endLineNumber" : 148,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n  mMission.blocks=new int[0];\n  mMission.length=0;\n  mMission.unknownLength=true;\n  if (DEBUG) {\n    Log.d(TAG,\"falling back (unknown length)\");\n  }\n}\n else {\n  mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (!mMission.running || Thread.interrupted())   return;\nsynchronized (mMission.LOCK) {\n    if (mConn.getResponseCode() == 206) {\n      if (mMission.threadCount > 1) {\n        int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n        if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)         count++;\n        mMission.blocks=new int[count];\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n      }\n      if (DEBUG) {\n        Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n      }\n    }\n else {\n      mMission.blocks=new int[0];\n      mMission.unknownLength=false;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n      }\n    }\n  }\n  if (!mMission.running || Thread.interrupted())   return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 207,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5639,
        "startLineNumber" : 50,
        "startColumnNumber" : 16,
        "endLineNumber" : 173,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6689,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n catch (InterruptedIOException|ClosedByInterruptException e) {\n  return;\n}\ncatch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 673,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 6713,
        "startLineNumber" : 49,
        "startColumnNumber" : 21,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 674,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6726,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 676,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 113,
        "startColumnNumber" : 20,
        "endLineNumber" : 113,
        "endColumnNumber" : 97
      },
      "nodeContext" : "mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "us.shandian.giga.get.DownloadMission"
  }, {
    "nodeContext" : "mMission",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 113,
      "startColumnNumber" : 58,
      "endLineNumber" : 113,
      "endColumnNumber" : 66
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 113,
        "startColumnNumber" : 58,
        "endLineNumber" : 113,
        "endColumnNumber" : 73
      },
      "nodeContext" : "mMission.length",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 113,
        "startColumnNumber" : 58,
        "endLineNumber" : 113,
        "endColumnNumber" : 78
      },
      "nodeContext" : "mMission.length - 10",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 113,
        "startColumnNumber" : 28,
        "endLineNumber" : 113,
        "endColumnNumber" : 96
      },
      "nodeContext" : "mMission.openConnection(true,mMission.length - 10,mMission.length)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 113,
        "startColumnNumber" : 20,
        "endLineNumber" : 113,
        "endColumnNumber" : 96
      },
      "nodeContext" : "mConn=mMission.openConnection(true,mMission.length - 10,mMission.length)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 113,
        "startColumnNumber" : 20,
        "endLineNumber" : 113,
        "endColumnNumber" : 97
      },
      "nodeContext" : "mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1733,
        "startLineNumber" : 111,
        "startColumnNumber" : 23,
        "endLineNumber" : 148,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (!mMission.running || Thread.interrupted())   return;\nsynchronized (mMission.LOCK) {\n    if (mConn.getResponseCode() == 206) {\n      if (mMission.threadCount > 1) {\n        int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n        if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)         count++;\n        mMission.blocks=new int[count];\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n      }\n      if (DEBUG) {\n        Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n      }\n    }\n else {\n      mMission.blocks=new int[0];\n      mMission.unknownLength=false;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n      }\n    }\n  }\n  if (!mMission.running || Thread.interrupted())   return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 162,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2086,
        "startLineNumber" : 103,
        "startColumnNumber" : 16,
        "endLineNumber" : 148,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n  mMission.blocks=new int[0];\n  mMission.length=0;\n  mMission.unknownLength=true;\n  if (DEBUG) {\n    Log.d(TAG,\"falling back (unknown length)\");\n  }\n}\n else {\n  mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (!mMission.running || Thread.interrupted())   return;\nsynchronized (mMission.LOCK) {\n    if (mConn.getResponseCode() == 206) {\n      if (mMission.threadCount > 1) {\n        int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n        if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)         count++;\n        mMission.blocks=new int[count];\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n      }\n      if (DEBUG) {\n        Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n      }\n    }\n else {\n      mMission.blocks=new int[0];\n      mMission.unknownLength=false;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n      }\n    }\n  }\n  if (!mMission.running || Thread.interrupted())   return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 207,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5639,
        "startLineNumber" : 50,
        "startColumnNumber" : 16,
        "endLineNumber" : 173,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6689,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n catch (InterruptedIOException|ClosedByInterruptException e) {\n  return;\n}\ncatch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 673,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 6713,
        "startLineNumber" : 49,
        "startColumnNumber" : 21,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 674,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6726,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 676,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 113,
        "startColumnNumber" : 20,
        "endLineNumber" : 113,
        "endColumnNumber" : 97
      },
      "nodeContext" : "mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "us.shandian.giga.get.Mission"
  }, {
    "nodeContext" : "mMission",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 113,
      "startColumnNumber" : 80,
      "endLineNumber" : 113,
      "endColumnNumber" : 88
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 113,
        "startColumnNumber" : 80,
        "endLineNumber" : 113,
        "endColumnNumber" : 95
      },
      "nodeContext" : "mMission.length",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 113,
        "startColumnNumber" : 28,
        "endLineNumber" : 113,
        "endColumnNumber" : 96
      },
      "nodeContext" : "mMission.openConnection(true,mMission.length - 10,mMission.length)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 113,
        "startColumnNumber" : 20,
        "endLineNumber" : 113,
        "endColumnNumber" : 96
      },
      "nodeContext" : "mConn=mMission.openConnection(true,mMission.length - 10,mMission.length)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 113,
        "startColumnNumber" : 20,
        "endLineNumber" : 113,
        "endColumnNumber" : 97
      },
      "nodeContext" : "mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1733,
        "startLineNumber" : 111,
        "startColumnNumber" : 23,
        "endLineNumber" : 148,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (!mMission.running || Thread.interrupted())   return;\nsynchronized (mMission.LOCK) {\n    if (mConn.getResponseCode() == 206) {\n      if (mMission.threadCount > 1) {\n        int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n        if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)         count++;\n        mMission.blocks=new int[count];\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n      }\n      if (DEBUG) {\n        Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n      }\n    }\n else {\n      mMission.blocks=new int[0];\n      mMission.unknownLength=false;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n      }\n    }\n  }\n  if (!mMission.running || Thread.interrupted())   return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 162,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2086,
        "startLineNumber" : 103,
        "startColumnNumber" : 16,
        "endLineNumber" : 148,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n  mMission.blocks=new int[0];\n  mMission.length=0;\n  mMission.unknownLength=true;\n  if (DEBUG) {\n    Log.d(TAG,\"falling back (unknown length)\");\n  }\n}\n else {\n  mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (!mMission.running || Thread.interrupted())   return;\nsynchronized (mMission.LOCK) {\n    if (mConn.getResponseCode() == 206) {\n      if (mMission.threadCount > 1) {\n        int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n        if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)         count++;\n        mMission.blocks=new int[count];\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n      }\n      if (DEBUG) {\n        Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n      }\n    }\n else {\n      mMission.blocks=new int[0];\n      mMission.unknownLength=false;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n      }\n    }\n  }\n  if (!mMission.running || Thread.interrupted())   return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 207,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5639,
        "startLineNumber" : 50,
        "startColumnNumber" : 16,
        "endLineNumber" : 173,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6689,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n catch (InterruptedIOException|ClosedByInterruptException e) {\n  return;\n}\ncatch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 673,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 6713,
        "startLineNumber" : 49,
        "startColumnNumber" : 21,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 674,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6726,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 676,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 113,
        "startColumnNumber" : 20,
        "endLineNumber" : 113,
        "endColumnNumber" : 97
      },
      "nodeContext" : "mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "us.shandian.giga.get.Mission"
  }, {
    "nodeContext" : "mMission",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 114,
      "startColumnNumber" : 20,
      "endLineNumber" : 114,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 114,
        "startColumnNumber" : 20,
        "endLineNumber" : 114,
        "endColumnNumber" : 60
      },
      "nodeContext" : "mMission.establishConnection(mId,mConn)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 114,
        "startColumnNumber" : 20,
        "endLineNumber" : 114,
        "endColumnNumber" : 61
      },
      "nodeContext" : "mMission.establishConnection(mId,mConn);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1733,
        "startLineNumber" : 111,
        "startColumnNumber" : 23,
        "endLineNumber" : 148,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (!mMission.running || Thread.interrupted())   return;\nsynchronized (mMission.LOCK) {\n    if (mConn.getResponseCode() == 206) {\n      if (mMission.threadCount > 1) {\n        int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n        if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)         count++;\n        mMission.blocks=new int[count];\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n      }\n      if (DEBUG) {\n        Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n      }\n    }\n else {\n      mMission.blocks=new int[0];\n      mMission.unknownLength=false;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n      }\n    }\n  }\n  if (!mMission.running || Thread.interrupted())   return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 162,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2086,
        "startLineNumber" : 103,
        "startColumnNumber" : 16,
        "endLineNumber" : 148,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n  mMission.blocks=new int[0];\n  mMission.length=0;\n  mMission.unknownLength=true;\n  if (DEBUG) {\n    Log.d(TAG,\"falling back (unknown length)\");\n  }\n}\n else {\n  mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (!mMission.running || Thread.interrupted())   return;\nsynchronized (mMission.LOCK) {\n    if (mConn.getResponseCode() == 206) {\n      if (mMission.threadCount > 1) {\n        int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n        if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)         count++;\n        mMission.blocks=new int[count];\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n      }\n      if (DEBUG) {\n        Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n      }\n    }\n else {\n      mMission.blocks=new int[0];\n      mMission.unknownLength=false;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n      }\n    }\n  }\n  if (!mMission.running || Thread.interrupted())   return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 207,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5639,
        "startLineNumber" : 50,
        "startColumnNumber" : 16,
        "endLineNumber" : 173,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6689,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n catch (InterruptedIOException|ClosedByInterruptException e) {\n  return;\n}\ncatch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 673,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 6713,
        "startLineNumber" : 49,
        "startColumnNumber" : 21,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 674,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6726,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 676,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 114,
        "startColumnNumber" : 20,
        "endLineNumber" : 114,
        "endColumnNumber" : 61
      },
      "nodeContext" : "mMission.establishConnection(mId,mConn);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "us.shandian.giga.get.DownloadMission"
  }, {
    "nodeContext" : "mMission",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 117,
      "startColumnNumber" : 25,
      "endLineNumber" : 117,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 117,
        "startColumnNumber" : 25,
        "endLineNumber" : 117,
        "endColumnNumber" : 41
      },
      "nodeContext" : "mMission.running",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 117,
        "startColumnNumber" : 24,
        "endLineNumber" : 117,
        "endColumnNumber" : 41
      },
      "nodeContext" : "!mMission.running",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 117,
        "startColumnNumber" : 24,
        "endLineNumber" : 117,
        "endColumnNumber" : 65
      },
      "nodeContext" : "!mMission.running || Thread.interrupted()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 117,
        "startColumnNumber" : 20,
        "endLineNumber" : 117,
        "endColumnNumber" : 74
      },
      "nodeContext" : "if (!mMission.running || Thread.interrupted()) return;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1733,
        "startLineNumber" : 111,
        "startColumnNumber" : 23,
        "endLineNumber" : 148,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (!mMission.running || Thread.interrupted())   return;\nsynchronized (mMission.LOCK) {\n    if (mConn.getResponseCode() == 206) {\n      if (mMission.threadCount > 1) {\n        int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n        if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)         count++;\n        mMission.blocks=new int[count];\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n      }\n      if (DEBUG) {\n        Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n      }\n    }\n else {\n      mMission.blocks=new int[0];\n      mMission.unknownLength=false;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n      }\n    }\n  }\n  if (!mMission.running || Thread.interrupted())   return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 162,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2086,
        "startLineNumber" : 103,
        "startColumnNumber" : 16,
        "endLineNumber" : 148,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n  mMission.blocks=new int[0];\n  mMission.length=0;\n  mMission.unknownLength=true;\n  if (DEBUG) {\n    Log.d(TAG,\"falling back (unknown length)\");\n  }\n}\n else {\n  mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (!mMission.running || Thread.interrupted())   return;\nsynchronized (mMission.LOCK) {\n    if (mConn.getResponseCode() == 206) {\n      if (mMission.threadCount > 1) {\n        int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n        if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)         count++;\n        mMission.blocks=new int[count];\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n      }\n      if (DEBUG) {\n        Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n      }\n    }\n else {\n      mMission.blocks=new int[0];\n      mMission.unknownLength=false;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n      }\n    }\n  }\n  if (!mMission.running || Thread.interrupted())   return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 207,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5639,
        "startLineNumber" : 50,
        "startColumnNumber" : 16,
        "endLineNumber" : 173,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6689,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n catch (InterruptedIOException|ClosedByInterruptException e) {\n  return;\n}\ncatch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 673,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 6713,
        "startLineNumber" : 49,
        "startColumnNumber" : 21,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 674,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6726,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 676,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 117,
        "startColumnNumber" : 20,
        "endLineNumber" : 117,
        "endColumnNumber" : 74
      },
      "nodeContext" : "if (!mMission.running || Thread.interrupted()) return;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "us.shandian.giga.get.DownloadMission"
  }, {
    "nodeContext" : "mMission",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 119,
      "startColumnNumber" : 34,
      "endLineNumber" : 119,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 119,
        "startColumnNumber" : 34,
        "endLineNumber" : 119,
        "endColumnNumber" : 47
      },
      "nodeContext" : "mMission.LOCK",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1315,
        "startLineNumber" : 119,
        "startColumnNumber" : 20,
        "endLineNumber" : 145,
        "endColumnNumber" : 21
      },
      "nodeContext" : "synchronized (mMission.LOCK) {\n  if (mConn.getResponseCode() == 206) {\n    if (mMission.threadCount > 1) {\n      int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n      if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)       count++;\n      mMission.blocks=new int[count];\n    }\n else {\n      mMission.blocks=new int[0];\n      mMission.unknownLength=false;\n    }\n    if (DEBUG) {\n      Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n    }\n  }\n else {\n    mMission.blocks=new int[0];\n    mMission.unknownLength=false;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n    }\n  }\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 117,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1733,
        "startLineNumber" : 111,
        "startColumnNumber" : 23,
        "endLineNumber" : 148,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (!mMission.running || Thread.interrupted())   return;\nsynchronized (mMission.LOCK) {\n    if (mConn.getResponseCode() == 206) {\n      if (mMission.threadCount > 1) {\n        int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n        if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)         count++;\n        mMission.blocks=new int[count];\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n      }\n      if (DEBUG) {\n        Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n      }\n    }\n else {\n      mMission.blocks=new int[0];\n      mMission.unknownLength=false;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n      }\n    }\n  }\n  if (!mMission.running || Thread.interrupted())   return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 162,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2086,
        "startLineNumber" : 103,
        "startColumnNumber" : 16,
        "endLineNumber" : 148,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n  mMission.blocks=new int[0];\n  mMission.length=0;\n  mMission.unknownLength=true;\n  if (DEBUG) {\n    Log.d(TAG,\"falling back (unknown length)\");\n  }\n}\n else {\n  mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (!mMission.running || Thread.interrupted())   return;\nsynchronized (mMission.LOCK) {\n    if (mConn.getResponseCode() == 206) {\n      if (mMission.threadCount > 1) {\n        int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n        if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)         count++;\n        mMission.blocks=new int[count];\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n      }\n      if (DEBUG) {\n        Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n      }\n    }\n else {\n      mMission.blocks=new int[0];\n      mMission.unknownLength=false;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n      }\n    }\n  }\n  if (!mMission.running || Thread.interrupted())   return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 207,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5639,
        "startLineNumber" : 50,
        "startColumnNumber" : 16,
        "endLineNumber" : 173,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6689,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n catch (InterruptedIOException|ClosedByInterruptException e) {\n  return;\n}\ncatch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 673,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 6713,
        "startLineNumber" : 49,
        "startColumnNumber" : 21,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 674,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6726,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 676,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 119,
        "startColumnNumber" : 34,
        "endLineNumber" : 119,
        "endColumnNumber" : 47
      },
      "nodeContext" : "mMission.LOCK",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "us.shandian.giga.get.DownloadMission"
  }, {
    "nodeContext" : "mMission",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 122,
      "startColumnNumber" : 32,
      "endLineNumber" : 122,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 122,
        "startColumnNumber" : 32,
        "endLineNumber" : 122,
        "endColumnNumber" : 52
      },
      "nodeContext" : "mMission.threadCount",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 122,
        "startColumnNumber" : 32,
        "endLineNumber" : 122,
        "endColumnNumber" : 56
      },
      "nodeContext" : "mMission.threadCount > 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 586,
        "startLineNumber" : 122,
        "startColumnNumber" : 28,
        "endLineNumber" : 131,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (mMission.threadCount > 1) {\n  int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n  if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)   count++;\n  mMission.blocks=new int[count];\n}\n else {\n  mMission.blocks=new int[0];\n  mMission.unknownLength=false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 62,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 810,
        "startLineNumber" : 120,
        "startColumnNumber" : 60,
        "endLineNumber" : 136,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  if (mMission.threadCount > 1) {\n    int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n    if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)     count++;\n    mMission.blocks=new int[count];\n  }\n else {\n    mMission.blocks=new int[0];\n    mMission.unknownLength=false;\n  }\n  if (DEBUG) {\n    Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 76,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1238,
        "startLineNumber" : 120,
        "startColumnNumber" : 24,
        "endLineNumber" : 144,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (mConn.getResponseCode() == 206) {\n  if (mMission.threadCount > 1) {\n    int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n    if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)     count++;\n    mMission.blocks=new int[count];\n  }\n else {\n    mMission.blocks=new int[0];\n    mMission.unknownLength=false;\n  }\n  if (DEBUG) {\n    Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n  }\n}\n else {\n  mMission.blocks=new int[0];\n  mMission.unknownLength=false;\n  if (DEBUG) {\n    Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 112,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 1286,
        "startLineNumber" : 119,
        "startColumnNumber" : 49,
        "endLineNumber" : 145,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (mConn.getResponseCode() == 206) {\n    if (mMission.threadCount > 1) {\n      int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n      if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)       count++;\n      mMission.blocks=new int[count];\n    }\n else {\n      mMission.blocks=new int[0];\n      mMission.unknownLength=false;\n    }\n    if (DEBUG) {\n      Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n    }\n  }\n else {\n    mMission.blocks=new int[0];\n    mMission.unknownLength=false;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 113,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1315,
        "startLineNumber" : 119,
        "startColumnNumber" : 20,
        "endLineNumber" : 145,
        "endColumnNumber" : 21
      },
      "nodeContext" : "synchronized (mMission.LOCK) {\n  if (mConn.getResponseCode() == 206) {\n    if (mMission.threadCount > 1) {\n      int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n      if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)       count++;\n      mMission.blocks=new int[count];\n    }\n else {\n      mMission.blocks=new int[0];\n      mMission.unknownLength=false;\n    }\n    if (DEBUG) {\n      Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n    }\n  }\n else {\n    mMission.blocks=new int[0];\n    mMission.unknownLength=false;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n    }\n  }\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 117,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1733,
        "startLineNumber" : 111,
        "startColumnNumber" : 23,
        "endLineNumber" : 148,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (!mMission.running || Thread.interrupted())   return;\nsynchronized (mMission.LOCK) {\n    if (mConn.getResponseCode() == 206) {\n      if (mMission.threadCount > 1) {\n        int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n        if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)         count++;\n        mMission.blocks=new int[count];\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n      }\n      if (DEBUG) {\n        Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n      }\n    }\n else {\n      mMission.blocks=new int[0];\n      mMission.unknownLength=false;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n      }\n    }\n  }\n  if (!mMission.running || Thread.interrupted())   return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 162,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2086,
        "startLineNumber" : 103,
        "startColumnNumber" : 16,
        "endLineNumber" : 148,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n  mMission.blocks=new int[0];\n  mMission.length=0;\n  mMission.unknownLength=true;\n  if (DEBUG) {\n    Log.d(TAG,\"falling back (unknown length)\");\n  }\n}\n else {\n  mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (!mMission.running || Thread.interrupted())   return;\nsynchronized (mMission.LOCK) {\n    if (mConn.getResponseCode() == 206) {\n      if (mMission.threadCount > 1) {\n        int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n        if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)         count++;\n        mMission.blocks=new int[count];\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n      }\n      if (DEBUG) {\n        Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n      }\n    }\n else {\n      mMission.blocks=new int[0];\n      mMission.unknownLength=false;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n      }\n    }\n  }\n  if (!mMission.running || Thread.interrupted())   return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 207,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5639,
        "startLineNumber" : 50,
        "startColumnNumber" : 16,
        "endLineNumber" : 173,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6689,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n catch (InterruptedIOException|ClosedByInterruptException e) {\n  return;\n}\ncatch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 673,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 6713,
        "startLineNumber" : 49,
        "startColumnNumber" : 21,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 674,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6726,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 676,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 122,
        "startColumnNumber" : 32,
        "endLineNumber" : 122,
        "endColumnNumber" : 56
      },
      "nodeContext" : "mMission.threadCount > 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "us.shandian.giga.get.DownloadMission"
  }, {
    "nodeContext" : "mMission",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 123,
      "startColumnNumber" : 51,
      "endLineNumber" : 123,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 123,
        "startColumnNumber" : 51,
        "endLineNumber" : 123,
        "endColumnNumber" : 66
      },
      "nodeContext" : "mMission.length",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 123,
        "startColumnNumber" : 51,
        "endLineNumber" : 123,
        "endColumnNumber" : 95
      },
      "nodeContext" : "mMission.length / DownloadMission.BLOCK_SIZE",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 123,
        "startColumnNumber" : 50,
        "endLineNumber" : 123,
        "endColumnNumber" : 96
      },
      "nodeContext" : "(mMission.length / DownloadMission.BLOCK_SIZE)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 123,
        "startColumnNumber" : 44,
        "endLineNumber" : 123,
        "endColumnNumber" : 96
      },
      "nodeContext" : "(int)(mMission.length / DownloadMission.BLOCK_SIZE)",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 123,
        "startColumnNumber" : 36,
        "endLineNumber" : 123,
        "endColumnNumber" : 96
      },
      "nodeContext" : "count=(int)(mMission.length / DownloadMission.BLOCK_SIZE)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 123,
        "startColumnNumber" : 32,
        "endLineNumber" : 123,
        "endColumnNumber" : 97
      },
      "nodeContext" : "int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 297,
        "startLineNumber" : 122,
        "startColumnNumber" : 58,
        "endLineNumber" : 127,
        "endColumnNumber" : 29
      },
      "nodeContext" : "{\n  int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n  if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)   count++;\n  mMission.blocks=new int[count];\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 39,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 586,
        "startLineNumber" : 122,
        "startColumnNumber" : 28,
        "endLineNumber" : 131,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (mMission.threadCount > 1) {\n  int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n  if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)   count++;\n  mMission.blocks=new int[count];\n}\n else {\n  mMission.blocks=new int[0];\n  mMission.unknownLength=false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 62,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 810,
        "startLineNumber" : 120,
        "startColumnNumber" : 60,
        "endLineNumber" : 136,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  if (mMission.threadCount > 1) {\n    int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n    if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)     count++;\n    mMission.blocks=new int[count];\n  }\n else {\n    mMission.blocks=new int[0];\n    mMission.unknownLength=false;\n  }\n  if (DEBUG) {\n    Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 76,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1238,
        "startLineNumber" : 120,
        "startColumnNumber" : 24,
        "endLineNumber" : 144,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (mConn.getResponseCode() == 206) {\n  if (mMission.threadCount > 1) {\n    int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n    if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)     count++;\n    mMission.blocks=new int[count];\n  }\n else {\n    mMission.blocks=new int[0];\n    mMission.unknownLength=false;\n  }\n  if (DEBUG) {\n    Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n  }\n}\n else {\n  mMission.blocks=new int[0];\n  mMission.unknownLength=false;\n  if (DEBUG) {\n    Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 112,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 1286,
        "startLineNumber" : 119,
        "startColumnNumber" : 49,
        "endLineNumber" : 145,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (mConn.getResponseCode() == 206) {\n    if (mMission.threadCount > 1) {\n      int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n      if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)       count++;\n      mMission.blocks=new int[count];\n    }\n else {\n      mMission.blocks=new int[0];\n      mMission.unknownLength=false;\n    }\n    if (DEBUG) {\n      Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n    }\n  }\n else {\n    mMission.blocks=new int[0];\n    mMission.unknownLength=false;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 113,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1315,
        "startLineNumber" : 119,
        "startColumnNumber" : 20,
        "endLineNumber" : 145,
        "endColumnNumber" : 21
      },
      "nodeContext" : "synchronized (mMission.LOCK) {\n  if (mConn.getResponseCode() == 206) {\n    if (mMission.threadCount > 1) {\n      int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n      if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)       count++;\n      mMission.blocks=new int[count];\n    }\n else {\n      mMission.blocks=new int[0];\n      mMission.unknownLength=false;\n    }\n    if (DEBUG) {\n      Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n    }\n  }\n else {\n    mMission.blocks=new int[0];\n    mMission.unknownLength=false;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n    }\n  }\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 117,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1733,
        "startLineNumber" : 111,
        "startColumnNumber" : 23,
        "endLineNumber" : 148,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (!mMission.running || Thread.interrupted())   return;\nsynchronized (mMission.LOCK) {\n    if (mConn.getResponseCode() == 206) {\n      if (mMission.threadCount > 1) {\n        int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n        if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)         count++;\n        mMission.blocks=new int[count];\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n      }\n      if (DEBUG) {\n        Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n      }\n    }\n else {\n      mMission.blocks=new int[0];\n      mMission.unknownLength=false;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n      }\n    }\n  }\n  if (!mMission.running || Thread.interrupted())   return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 162,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2086,
        "startLineNumber" : 103,
        "startColumnNumber" : 16,
        "endLineNumber" : 148,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n  mMission.blocks=new int[0];\n  mMission.length=0;\n  mMission.unknownLength=true;\n  if (DEBUG) {\n    Log.d(TAG,\"falling back (unknown length)\");\n  }\n}\n else {\n  mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (!mMission.running || Thread.interrupted())   return;\nsynchronized (mMission.LOCK) {\n    if (mConn.getResponseCode() == 206) {\n      if (mMission.threadCount > 1) {\n        int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n        if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)         count++;\n        mMission.blocks=new int[count];\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n      }\n      if (DEBUG) {\n        Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n      }\n    }\n else {\n      mMission.blocks=new int[0];\n      mMission.unknownLength=false;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n      }\n    }\n  }\n  if (!mMission.running || Thread.interrupted())   return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 207,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5639,
        "startLineNumber" : 50,
        "startColumnNumber" : 16,
        "endLineNumber" : 173,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6689,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n catch (InterruptedIOException|ClosedByInterruptException e) {\n  return;\n}\ncatch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 673,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 6713,
        "startLineNumber" : 49,
        "startColumnNumber" : 21,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 674,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6726,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 676,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 123,
        "startColumnNumber" : 32,
        "endLineNumber" : 123,
        "endColumnNumber" : 97
      },
      "nodeContext" : "int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "us.shandian.giga.get.Mission"
  }, {
    "nodeContext" : "mMission",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 124,
      "startColumnNumber" : 75,
      "endLineNumber" : 124,
      "endColumnNumber" : 83
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 124,
        "startColumnNumber" : 75,
        "endLineNumber" : 124,
        "endColumnNumber" : 90
      },
      "nodeContext" : "mMission.length",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 124,
        "startColumnNumber" : 36,
        "endLineNumber" : 124,
        "endColumnNumber" : 90
      },
      "nodeContext" : "(count * DownloadMission.BLOCK_SIZE) < mMission.length",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 124,
        "startColumnNumber" : 32,
        "endLineNumber" : 124,
        "endColumnNumber" : 100
      },
      "nodeContext" : "if ((count * DownloadMission.BLOCK_SIZE) < mMission.length) count++;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 297,
        "startLineNumber" : 122,
        "startColumnNumber" : 58,
        "endLineNumber" : 127,
        "endColumnNumber" : 29
      },
      "nodeContext" : "{\n  int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n  if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)   count++;\n  mMission.blocks=new int[count];\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 39,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 586,
        "startLineNumber" : 122,
        "startColumnNumber" : 28,
        "endLineNumber" : 131,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (mMission.threadCount > 1) {\n  int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n  if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)   count++;\n  mMission.blocks=new int[count];\n}\n else {\n  mMission.blocks=new int[0];\n  mMission.unknownLength=false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 62,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 810,
        "startLineNumber" : 120,
        "startColumnNumber" : 60,
        "endLineNumber" : 136,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  if (mMission.threadCount > 1) {\n    int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n    if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)     count++;\n    mMission.blocks=new int[count];\n  }\n else {\n    mMission.blocks=new int[0];\n    mMission.unknownLength=false;\n  }\n  if (DEBUG) {\n    Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 76,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1238,
        "startLineNumber" : 120,
        "startColumnNumber" : 24,
        "endLineNumber" : 144,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (mConn.getResponseCode() == 206) {\n  if (mMission.threadCount > 1) {\n    int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n    if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)     count++;\n    mMission.blocks=new int[count];\n  }\n else {\n    mMission.blocks=new int[0];\n    mMission.unknownLength=false;\n  }\n  if (DEBUG) {\n    Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n  }\n}\n else {\n  mMission.blocks=new int[0];\n  mMission.unknownLength=false;\n  if (DEBUG) {\n    Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 112,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 1286,
        "startLineNumber" : 119,
        "startColumnNumber" : 49,
        "endLineNumber" : 145,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (mConn.getResponseCode() == 206) {\n    if (mMission.threadCount > 1) {\n      int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n      if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)       count++;\n      mMission.blocks=new int[count];\n    }\n else {\n      mMission.blocks=new int[0];\n      mMission.unknownLength=false;\n    }\n    if (DEBUG) {\n      Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n    }\n  }\n else {\n    mMission.blocks=new int[0];\n    mMission.unknownLength=false;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 113,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1315,
        "startLineNumber" : 119,
        "startColumnNumber" : 20,
        "endLineNumber" : 145,
        "endColumnNumber" : 21
      },
      "nodeContext" : "synchronized (mMission.LOCK) {\n  if (mConn.getResponseCode() == 206) {\n    if (mMission.threadCount > 1) {\n      int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n      if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)       count++;\n      mMission.blocks=new int[count];\n    }\n else {\n      mMission.blocks=new int[0];\n      mMission.unknownLength=false;\n    }\n    if (DEBUG) {\n      Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n    }\n  }\n else {\n    mMission.blocks=new int[0];\n    mMission.unknownLength=false;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n    }\n  }\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 117,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1733,
        "startLineNumber" : 111,
        "startColumnNumber" : 23,
        "endLineNumber" : 148,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (!mMission.running || Thread.interrupted())   return;\nsynchronized (mMission.LOCK) {\n    if (mConn.getResponseCode() == 206) {\n      if (mMission.threadCount > 1) {\n        int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n        if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)         count++;\n        mMission.blocks=new int[count];\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n      }\n      if (DEBUG) {\n        Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n      }\n    }\n else {\n      mMission.blocks=new int[0];\n      mMission.unknownLength=false;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n      }\n    }\n  }\n  if (!mMission.running || Thread.interrupted())   return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 162,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2086,
        "startLineNumber" : 103,
        "startColumnNumber" : 16,
        "endLineNumber" : 148,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n  mMission.blocks=new int[0];\n  mMission.length=0;\n  mMission.unknownLength=true;\n  if (DEBUG) {\n    Log.d(TAG,\"falling back (unknown length)\");\n  }\n}\n else {\n  mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (!mMission.running || Thread.interrupted())   return;\nsynchronized (mMission.LOCK) {\n    if (mConn.getResponseCode() == 206) {\n      if (mMission.threadCount > 1) {\n        int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n        if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)         count++;\n        mMission.blocks=new int[count];\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n      }\n      if (DEBUG) {\n        Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n      }\n    }\n else {\n      mMission.blocks=new int[0];\n      mMission.unknownLength=false;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n      }\n    }\n  }\n  if (!mMission.running || Thread.interrupted())   return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 207,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5639,
        "startLineNumber" : 50,
        "startColumnNumber" : 16,
        "endLineNumber" : 173,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6689,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n catch (InterruptedIOException|ClosedByInterruptException e) {\n  return;\n}\ncatch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 673,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 6713,
        "startLineNumber" : 49,
        "startColumnNumber" : 21,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 674,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6726,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 676,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 124,
        "startColumnNumber" : 32,
        "endLineNumber" : 124,
        "endColumnNumber" : 100
      },
      "nodeContext" : "if ((count * DownloadMission.BLOCK_SIZE) < mMission.length) count++;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "us.shandian.giga.get.Mission"
  }, {
    "nodeContext" : "mMission",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 126,
      "startColumnNumber" : 32,
      "endLineNumber" : 126,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 126,
        "startColumnNumber" : 32,
        "endLineNumber" : 126,
        "endColumnNumber" : 47
      },
      "nodeContext" : "mMission.blocks",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 126,
        "startColumnNumber" : 32,
        "endLineNumber" : 126,
        "endColumnNumber" : 64
      },
      "nodeContext" : "mMission.blocks=new int[count]",
      "nodeType" : "Assignment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 126,
        "startColumnNumber" : 32,
        "endLineNumber" : 126,
        "endColumnNumber" : 65
      },
      "nodeContext" : "mMission.blocks=new int[count];\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 297,
        "startLineNumber" : 122,
        "startColumnNumber" : 58,
        "endLineNumber" : 127,
        "endColumnNumber" : 29
      },
      "nodeContext" : "{\n  int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n  if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)   count++;\n  mMission.blocks=new int[count];\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 39,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 586,
        "startLineNumber" : 122,
        "startColumnNumber" : 28,
        "endLineNumber" : 131,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (mMission.threadCount > 1) {\n  int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n  if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)   count++;\n  mMission.blocks=new int[count];\n}\n else {\n  mMission.blocks=new int[0];\n  mMission.unknownLength=false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 62,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 810,
        "startLineNumber" : 120,
        "startColumnNumber" : 60,
        "endLineNumber" : 136,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  if (mMission.threadCount > 1) {\n    int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n    if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)     count++;\n    mMission.blocks=new int[count];\n  }\n else {\n    mMission.blocks=new int[0];\n    mMission.unknownLength=false;\n  }\n  if (DEBUG) {\n    Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 76,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1238,
        "startLineNumber" : 120,
        "startColumnNumber" : 24,
        "endLineNumber" : 144,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (mConn.getResponseCode() == 206) {\n  if (mMission.threadCount > 1) {\n    int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n    if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)     count++;\n    mMission.blocks=new int[count];\n  }\n else {\n    mMission.blocks=new int[0];\n    mMission.unknownLength=false;\n  }\n  if (DEBUG) {\n    Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n  }\n}\n else {\n  mMission.blocks=new int[0];\n  mMission.unknownLength=false;\n  if (DEBUG) {\n    Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 112,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 1286,
        "startLineNumber" : 119,
        "startColumnNumber" : 49,
        "endLineNumber" : 145,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (mConn.getResponseCode() == 206) {\n    if (mMission.threadCount > 1) {\n      int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n      if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)       count++;\n      mMission.blocks=new int[count];\n    }\n else {\n      mMission.blocks=new int[0];\n      mMission.unknownLength=false;\n    }\n    if (DEBUG) {\n      Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n    }\n  }\n else {\n    mMission.blocks=new int[0];\n    mMission.unknownLength=false;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 113,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1315,
        "startLineNumber" : 119,
        "startColumnNumber" : 20,
        "endLineNumber" : 145,
        "endColumnNumber" : 21
      },
      "nodeContext" : "synchronized (mMission.LOCK) {\n  if (mConn.getResponseCode() == 206) {\n    if (mMission.threadCount > 1) {\n      int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n      if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)       count++;\n      mMission.blocks=new int[count];\n    }\n else {\n      mMission.blocks=new int[0];\n      mMission.unknownLength=false;\n    }\n    if (DEBUG) {\n      Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n    }\n  }\n else {\n    mMission.blocks=new int[0];\n    mMission.unknownLength=false;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n    }\n  }\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 117,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1733,
        "startLineNumber" : 111,
        "startColumnNumber" : 23,
        "endLineNumber" : 148,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (!mMission.running || Thread.interrupted())   return;\nsynchronized (mMission.LOCK) {\n    if (mConn.getResponseCode() == 206) {\n      if (mMission.threadCount > 1) {\n        int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n        if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)         count++;\n        mMission.blocks=new int[count];\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n      }\n      if (DEBUG) {\n        Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n      }\n    }\n else {\n      mMission.blocks=new int[0];\n      mMission.unknownLength=false;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n      }\n    }\n  }\n  if (!mMission.running || Thread.interrupted())   return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 162,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2086,
        "startLineNumber" : 103,
        "startColumnNumber" : 16,
        "endLineNumber" : 148,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n  mMission.blocks=new int[0];\n  mMission.length=0;\n  mMission.unknownLength=true;\n  if (DEBUG) {\n    Log.d(TAG,\"falling back (unknown length)\");\n  }\n}\n else {\n  mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (!mMission.running || Thread.interrupted())   return;\nsynchronized (mMission.LOCK) {\n    if (mConn.getResponseCode() == 206) {\n      if (mMission.threadCount > 1) {\n        int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n        if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)         count++;\n        mMission.blocks=new int[count];\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n      }\n      if (DEBUG) {\n        Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n      }\n    }\n else {\n      mMission.blocks=new int[0];\n      mMission.unknownLength=false;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n      }\n    }\n  }\n  if (!mMission.running || Thread.interrupted())   return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 207,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5639,
        "startLineNumber" : 50,
        "startColumnNumber" : 16,
        "endLineNumber" : 173,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6689,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n catch (InterruptedIOException|ClosedByInterruptException e) {\n  return;\n}\ncatch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 673,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 6713,
        "startLineNumber" : 49,
        "startColumnNumber" : 21,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 674,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6726,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 676,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 126,
        "startColumnNumber" : 32,
        "endLineNumber" : 126,
        "endColumnNumber" : 65
      },
      "nodeContext" : "mMission.blocks=new int[count];\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "us.shandian.giga.get.DownloadMission"
  }, {
    "nodeContext" : "mMission",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 129,
      "startColumnNumber" : 32,
      "endLineNumber" : 129,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 129,
        "startColumnNumber" : 32,
        "endLineNumber" : 129,
        "endColumnNumber" : 47
      },
      "nodeContext" : "mMission.blocks",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 129,
        "startColumnNumber" : 32,
        "endLineNumber" : 129,
        "endColumnNumber" : 60
      },
      "nodeContext" : "mMission.blocks=new int[0]",
      "nodeType" : "Assignment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 129,
        "startColumnNumber" : 32,
        "endLineNumber" : 129,
        "endColumnNumber" : 61
      },
      "nodeContext" : "mMission.blocks=new int[0];\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 253,
        "startLineNumber" : 127,
        "startColumnNumber" : 35,
        "endLineNumber" : 131,
        "endColumnNumber" : 29
      },
      "nodeContext" : "{\n  mMission.blocks=new int[0];\n  mMission.unknownLength=false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 586,
        "startLineNumber" : 122,
        "startColumnNumber" : 28,
        "endLineNumber" : 131,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (mMission.threadCount > 1) {\n  int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n  if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)   count++;\n  mMission.blocks=new int[count];\n}\n else {\n  mMission.blocks=new int[0];\n  mMission.unknownLength=false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 62,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 810,
        "startLineNumber" : 120,
        "startColumnNumber" : 60,
        "endLineNumber" : 136,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  if (mMission.threadCount > 1) {\n    int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n    if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)     count++;\n    mMission.blocks=new int[count];\n  }\n else {\n    mMission.blocks=new int[0];\n    mMission.unknownLength=false;\n  }\n  if (DEBUG) {\n    Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 76,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1238,
        "startLineNumber" : 120,
        "startColumnNumber" : 24,
        "endLineNumber" : 144,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (mConn.getResponseCode() == 206) {\n  if (mMission.threadCount > 1) {\n    int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n    if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)     count++;\n    mMission.blocks=new int[count];\n  }\n else {\n    mMission.blocks=new int[0];\n    mMission.unknownLength=false;\n  }\n  if (DEBUG) {\n    Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n  }\n}\n else {\n  mMission.blocks=new int[0];\n  mMission.unknownLength=false;\n  if (DEBUG) {\n    Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 112,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 1286,
        "startLineNumber" : 119,
        "startColumnNumber" : 49,
        "endLineNumber" : 145,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (mConn.getResponseCode() == 206) {\n    if (mMission.threadCount > 1) {\n      int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n      if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)       count++;\n      mMission.blocks=new int[count];\n    }\n else {\n      mMission.blocks=new int[0];\n      mMission.unknownLength=false;\n    }\n    if (DEBUG) {\n      Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n    }\n  }\n else {\n    mMission.blocks=new int[0];\n    mMission.unknownLength=false;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 113,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1315,
        "startLineNumber" : 119,
        "startColumnNumber" : 20,
        "endLineNumber" : 145,
        "endColumnNumber" : 21
      },
      "nodeContext" : "synchronized (mMission.LOCK) {\n  if (mConn.getResponseCode() == 206) {\n    if (mMission.threadCount > 1) {\n      int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n      if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)       count++;\n      mMission.blocks=new int[count];\n    }\n else {\n      mMission.blocks=new int[0];\n      mMission.unknownLength=false;\n    }\n    if (DEBUG) {\n      Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n    }\n  }\n else {\n    mMission.blocks=new int[0];\n    mMission.unknownLength=false;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n    }\n  }\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 117,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1733,
        "startLineNumber" : 111,
        "startColumnNumber" : 23,
        "endLineNumber" : 148,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (!mMission.running || Thread.interrupted())   return;\nsynchronized (mMission.LOCK) {\n    if (mConn.getResponseCode() == 206) {\n      if (mMission.threadCount > 1) {\n        int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n        if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)         count++;\n        mMission.blocks=new int[count];\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n      }\n      if (DEBUG) {\n        Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n      }\n    }\n else {\n      mMission.blocks=new int[0];\n      mMission.unknownLength=false;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n      }\n    }\n  }\n  if (!mMission.running || Thread.interrupted())   return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 162,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2086,
        "startLineNumber" : 103,
        "startColumnNumber" : 16,
        "endLineNumber" : 148,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n  mMission.blocks=new int[0];\n  mMission.length=0;\n  mMission.unknownLength=true;\n  if (DEBUG) {\n    Log.d(TAG,\"falling back (unknown length)\");\n  }\n}\n else {\n  mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (!mMission.running || Thread.interrupted())   return;\nsynchronized (mMission.LOCK) {\n    if (mConn.getResponseCode() == 206) {\n      if (mMission.threadCount > 1) {\n        int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n        if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)         count++;\n        mMission.blocks=new int[count];\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n      }\n      if (DEBUG) {\n        Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n      }\n    }\n else {\n      mMission.blocks=new int[0];\n      mMission.unknownLength=false;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n      }\n    }\n  }\n  if (!mMission.running || Thread.interrupted())   return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 207,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5639,
        "startLineNumber" : 50,
        "startColumnNumber" : 16,
        "endLineNumber" : 173,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6689,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n catch (InterruptedIOException|ClosedByInterruptException e) {\n  return;\n}\ncatch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 673,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 6713,
        "startLineNumber" : 49,
        "startColumnNumber" : 21,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 674,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6726,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 676,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 129,
        "startColumnNumber" : 32,
        "endLineNumber" : 129,
        "endColumnNumber" : 61
      },
      "nodeContext" : "mMission.blocks=new int[0];\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "us.shandian.giga.get.DownloadMission"
  }, {
    "nodeContext" : "mMission",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 130,
      "startColumnNumber" : 32,
      "endLineNumber" : 130,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 130,
        "startColumnNumber" : 32,
        "endLineNumber" : 130,
        "endColumnNumber" : 54
      },
      "nodeContext" : "mMission.unknownLength",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 130,
        "startColumnNumber" : 32,
        "endLineNumber" : 130,
        "endColumnNumber" : 62
      },
      "nodeContext" : "mMission.unknownLength=false",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 130,
        "startColumnNumber" : 32,
        "endLineNumber" : 130,
        "endColumnNumber" : 63
      },
      "nodeContext" : "mMission.unknownLength=false;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 253,
        "startLineNumber" : 127,
        "startColumnNumber" : 35,
        "endLineNumber" : 131,
        "endColumnNumber" : 29
      },
      "nodeContext" : "{\n  mMission.blocks=new int[0];\n  mMission.unknownLength=false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 586,
        "startLineNumber" : 122,
        "startColumnNumber" : 28,
        "endLineNumber" : 131,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (mMission.threadCount > 1) {\n  int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n  if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)   count++;\n  mMission.blocks=new int[count];\n}\n else {\n  mMission.blocks=new int[0];\n  mMission.unknownLength=false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 62,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 810,
        "startLineNumber" : 120,
        "startColumnNumber" : 60,
        "endLineNumber" : 136,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  if (mMission.threadCount > 1) {\n    int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n    if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)     count++;\n    mMission.blocks=new int[count];\n  }\n else {\n    mMission.blocks=new int[0];\n    mMission.unknownLength=false;\n  }\n  if (DEBUG) {\n    Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 76,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1238,
        "startLineNumber" : 120,
        "startColumnNumber" : 24,
        "endLineNumber" : 144,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (mConn.getResponseCode() == 206) {\n  if (mMission.threadCount > 1) {\n    int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n    if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)     count++;\n    mMission.blocks=new int[count];\n  }\n else {\n    mMission.blocks=new int[0];\n    mMission.unknownLength=false;\n  }\n  if (DEBUG) {\n    Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n  }\n}\n else {\n  mMission.blocks=new int[0];\n  mMission.unknownLength=false;\n  if (DEBUG) {\n    Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 112,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 1286,
        "startLineNumber" : 119,
        "startColumnNumber" : 49,
        "endLineNumber" : 145,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (mConn.getResponseCode() == 206) {\n    if (mMission.threadCount > 1) {\n      int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n      if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)       count++;\n      mMission.blocks=new int[count];\n    }\n else {\n      mMission.blocks=new int[0];\n      mMission.unknownLength=false;\n    }\n    if (DEBUG) {\n      Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n    }\n  }\n else {\n    mMission.blocks=new int[0];\n    mMission.unknownLength=false;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 113,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1315,
        "startLineNumber" : 119,
        "startColumnNumber" : 20,
        "endLineNumber" : 145,
        "endColumnNumber" : 21
      },
      "nodeContext" : "synchronized (mMission.LOCK) {\n  if (mConn.getResponseCode() == 206) {\n    if (mMission.threadCount > 1) {\n      int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n      if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)       count++;\n      mMission.blocks=new int[count];\n    }\n else {\n      mMission.blocks=new int[0];\n      mMission.unknownLength=false;\n    }\n    if (DEBUG) {\n      Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n    }\n  }\n else {\n    mMission.blocks=new int[0];\n    mMission.unknownLength=false;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n    }\n  }\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 117,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1733,
        "startLineNumber" : 111,
        "startColumnNumber" : 23,
        "endLineNumber" : 148,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (!mMission.running || Thread.interrupted())   return;\nsynchronized (mMission.LOCK) {\n    if (mConn.getResponseCode() == 206) {\n      if (mMission.threadCount > 1) {\n        int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n        if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)         count++;\n        mMission.blocks=new int[count];\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n      }\n      if (DEBUG) {\n        Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n      }\n    }\n else {\n      mMission.blocks=new int[0];\n      mMission.unknownLength=false;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n      }\n    }\n  }\n  if (!mMission.running || Thread.interrupted())   return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 162,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2086,
        "startLineNumber" : 103,
        "startColumnNumber" : 16,
        "endLineNumber" : 148,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n  mMission.blocks=new int[0];\n  mMission.length=0;\n  mMission.unknownLength=true;\n  if (DEBUG) {\n    Log.d(TAG,\"falling back (unknown length)\");\n  }\n}\n else {\n  mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (!mMission.running || Thread.interrupted())   return;\nsynchronized (mMission.LOCK) {\n    if (mConn.getResponseCode() == 206) {\n      if (mMission.threadCount > 1) {\n        int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n        if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)         count++;\n        mMission.blocks=new int[count];\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n      }\n      if (DEBUG) {\n        Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n      }\n    }\n else {\n      mMission.blocks=new int[0];\n      mMission.unknownLength=false;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n      }\n    }\n  }\n  if (!mMission.running || Thread.interrupted())   return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 207,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5639,
        "startLineNumber" : 50,
        "startColumnNumber" : 16,
        "endLineNumber" : 173,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6689,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n catch (InterruptedIOException|ClosedByInterruptException e) {\n  return;\n}\ncatch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 673,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 6713,
        "startLineNumber" : 49,
        "startColumnNumber" : 21,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 674,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6726,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 676,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 130,
        "startColumnNumber" : 32,
        "endLineNumber" : 130,
        "endColumnNumber" : 63
      },
      "nodeContext" : "mMission.unknownLength=false;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "us.shandian.giga.get.DownloadMission"
  }, {
    "nodeContext" : "mMission",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 138,
      "startColumnNumber" : 28,
      "endLineNumber" : 138,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 138,
        "startColumnNumber" : 28,
        "endLineNumber" : 138,
        "endColumnNumber" : 43
      },
      "nodeContext" : "mMission.blocks",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 138,
        "startColumnNumber" : 28,
        "endLineNumber" : 138,
        "endColumnNumber" : 56
      },
      "nodeContext" : "mMission.blocks=new int[0]",
      "nodeType" : "Assignment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 138,
        "startColumnNumber" : 28,
        "endLineNumber" : 138,
        "endColumnNumber" : 57
      },
      "nodeContext" : "mMission.blocks=new int[0];\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 386,
        "startLineNumber" : 136,
        "startColumnNumber" : 31,
        "endLineNumber" : 144,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  mMission.blocks=new int[0];\n  mMission.unknownLength=false;\n  if (DEBUG) {\n    Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 30,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1238,
        "startLineNumber" : 120,
        "startColumnNumber" : 24,
        "endLineNumber" : 144,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (mConn.getResponseCode() == 206) {\n  if (mMission.threadCount > 1) {\n    int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n    if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)     count++;\n    mMission.blocks=new int[count];\n  }\n else {\n    mMission.blocks=new int[0];\n    mMission.unknownLength=false;\n  }\n  if (DEBUG) {\n    Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n  }\n}\n else {\n  mMission.blocks=new int[0];\n  mMission.unknownLength=false;\n  if (DEBUG) {\n    Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 112,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 1286,
        "startLineNumber" : 119,
        "startColumnNumber" : 49,
        "endLineNumber" : 145,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (mConn.getResponseCode() == 206) {\n    if (mMission.threadCount > 1) {\n      int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n      if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)       count++;\n      mMission.blocks=new int[count];\n    }\n else {\n      mMission.blocks=new int[0];\n      mMission.unknownLength=false;\n    }\n    if (DEBUG) {\n      Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n    }\n  }\n else {\n    mMission.blocks=new int[0];\n    mMission.unknownLength=false;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 113,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1315,
        "startLineNumber" : 119,
        "startColumnNumber" : 20,
        "endLineNumber" : 145,
        "endColumnNumber" : 21
      },
      "nodeContext" : "synchronized (mMission.LOCK) {\n  if (mConn.getResponseCode() == 206) {\n    if (mMission.threadCount > 1) {\n      int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n      if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)       count++;\n      mMission.blocks=new int[count];\n    }\n else {\n      mMission.blocks=new int[0];\n      mMission.unknownLength=false;\n    }\n    if (DEBUG) {\n      Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n    }\n  }\n else {\n    mMission.blocks=new int[0];\n    mMission.unknownLength=false;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n    }\n  }\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 117,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1733,
        "startLineNumber" : 111,
        "startColumnNumber" : 23,
        "endLineNumber" : 148,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (!mMission.running || Thread.interrupted())   return;\nsynchronized (mMission.LOCK) {\n    if (mConn.getResponseCode() == 206) {\n      if (mMission.threadCount > 1) {\n        int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n        if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)         count++;\n        mMission.blocks=new int[count];\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n      }\n      if (DEBUG) {\n        Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n      }\n    }\n else {\n      mMission.blocks=new int[0];\n      mMission.unknownLength=false;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n      }\n    }\n  }\n  if (!mMission.running || Thread.interrupted())   return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 162,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2086,
        "startLineNumber" : 103,
        "startColumnNumber" : 16,
        "endLineNumber" : 148,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n  mMission.blocks=new int[0];\n  mMission.length=0;\n  mMission.unknownLength=true;\n  if (DEBUG) {\n    Log.d(TAG,\"falling back (unknown length)\");\n  }\n}\n else {\n  mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (!mMission.running || Thread.interrupted())   return;\nsynchronized (mMission.LOCK) {\n    if (mConn.getResponseCode() == 206) {\n      if (mMission.threadCount > 1) {\n        int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n        if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)         count++;\n        mMission.blocks=new int[count];\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n      }\n      if (DEBUG) {\n        Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n      }\n    }\n else {\n      mMission.blocks=new int[0];\n      mMission.unknownLength=false;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n      }\n    }\n  }\n  if (!mMission.running || Thread.interrupted())   return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 207,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5639,
        "startLineNumber" : 50,
        "startColumnNumber" : 16,
        "endLineNumber" : 173,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6689,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n catch (InterruptedIOException|ClosedByInterruptException e) {\n  return;\n}\ncatch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 673,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 6713,
        "startLineNumber" : 49,
        "startColumnNumber" : 21,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 674,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6726,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 676,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 138,
        "startColumnNumber" : 28,
        "endLineNumber" : 138,
        "endColumnNumber" : 57
      },
      "nodeContext" : "mMission.blocks=new int[0];\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "us.shandian.giga.get.DownloadMission"
  }, {
    "nodeContext" : "mMission",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 139,
      "startColumnNumber" : 28,
      "endLineNumber" : 139,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 139,
        "startColumnNumber" : 28,
        "endLineNumber" : 139,
        "endColumnNumber" : 50
      },
      "nodeContext" : "mMission.unknownLength",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 139,
        "startColumnNumber" : 28,
        "endLineNumber" : 139,
        "endColumnNumber" : 58
      },
      "nodeContext" : "mMission.unknownLength=false",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 139,
        "startColumnNumber" : 28,
        "endLineNumber" : 139,
        "endColumnNumber" : 59
      },
      "nodeContext" : "mMission.unknownLength=false;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 386,
        "startLineNumber" : 136,
        "startColumnNumber" : 31,
        "endLineNumber" : 144,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  mMission.blocks=new int[0];\n  mMission.unknownLength=false;\n  if (DEBUG) {\n    Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 30,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1238,
        "startLineNumber" : 120,
        "startColumnNumber" : 24,
        "endLineNumber" : 144,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (mConn.getResponseCode() == 206) {\n  if (mMission.threadCount > 1) {\n    int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n    if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)     count++;\n    mMission.blocks=new int[count];\n  }\n else {\n    mMission.blocks=new int[0];\n    mMission.unknownLength=false;\n  }\n  if (DEBUG) {\n    Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n  }\n}\n else {\n  mMission.blocks=new int[0];\n  mMission.unknownLength=false;\n  if (DEBUG) {\n    Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 112,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 1286,
        "startLineNumber" : 119,
        "startColumnNumber" : 49,
        "endLineNumber" : 145,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (mConn.getResponseCode() == 206) {\n    if (mMission.threadCount > 1) {\n      int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n      if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)       count++;\n      mMission.blocks=new int[count];\n    }\n else {\n      mMission.blocks=new int[0];\n      mMission.unknownLength=false;\n    }\n    if (DEBUG) {\n      Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n    }\n  }\n else {\n    mMission.blocks=new int[0];\n    mMission.unknownLength=false;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 113,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1315,
        "startLineNumber" : 119,
        "startColumnNumber" : 20,
        "endLineNumber" : 145,
        "endColumnNumber" : 21
      },
      "nodeContext" : "synchronized (mMission.LOCK) {\n  if (mConn.getResponseCode() == 206) {\n    if (mMission.threadCount > 1) {\n      int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n      if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)       count++;\n      mMission.blocks=new int[count];\n    }\n else {\n      mMission.blocks=new int[0];\n      mMission.unknownLength=false;\n    }\n    if (DEBUG) {\n      Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n    }\n  }\n else {\n    mMission.blocks=new int[0];\n    mMission.unknownLength=false;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n    }\n  }\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 117,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1733,
        "startLineNumber" : 111,
        "startColumnNumber" : 23,
        "endLineNumber" : 148,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (!mMission.running || Thread.interrupted())   return;\nsynchronized (mMission.LOCK) {\n    if (mConn.getResponseCode() == 206) {\n      if (mMission.threadCount > 1) {\n        int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n        if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)         count++;\n        mMission.blocks=new int[count];\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n      }\n      if (DEBUG) {\n        Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n      }\n    }\n else {\n      mMission.blocks=new int[0];\n      mMission.unknownLength=false;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n      }\n    }\n  }\n  if (!mMission.running || Thread.interrupted())   return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 162,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2086,
        "startLineNumber" : 103,
        "startColumnNumber" : 16,
        "endLineNumber" : 148,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n  mMission.blocks=new int[0];\n  mMission.length=0;\n  mMission.unknownLength=true;\n  if (DEBUG) {\n    Log.d(TAG,\"falling back (unknown length)\");\n  }\n}\n else {\n  mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (!mMission.running || Thread.interrupted())   return;\nsynchronized (mMission.LOCK) {\n    if (mConn.getResponseCode() == 206) {\n      if (mMission.threadCount > 1) {\n        int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n        if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)         count++;\n        mMission.blocks=new int[count];\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n      }\n      if (DEBUG) {\n        Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n      }\n    }\n else {\n      mMission.blocks=new int[0];\n      mMission.unknownLength=false;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n      }\n    }\n  }\n  if (!mMission.running || Thread.interrupted())   return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 207,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5639,
        "startLineNumber" : 50,
        "startColumnNumber" : 16,
        "endLineNumber" : 173,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6689,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n catch (InterruptedIOException|ClosedByInterruptException e) {\n  return;\n}\ncatch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 673,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 6713,
        "startLineNumber" : 49,
        "startColumnNumber" : 21,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 674,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6726,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 676,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 139,
        "startColumnNumber" : 28,
        "endLineNumber" : 139,
        "endColumnNumber" : 59
      },
      "nodeContext" : "mMission.unknownLength=false;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "us.shandian.giga.get.DownloadMission"
  }, {
    "nodeContext" : "mMission",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 147,
      "startColumnNumber" : 25,
      "endLineNumber" : 147,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 147,
        "startColumnNumber" : 25,
        "endLineNumber" : 147,
        "endColumnNumber" : 41
      },
      "nodeContext" : "mMission.running",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 147,
        "startColumnNumber" : 24,
        "endLineNumber" : 147,
        "endColumnNumber" : 41
      },
      "nodeContext" : "!mMission.running",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 147,
        "startColumnNumber" : 24,
        "endLineNumber" : 147,
        "endColumnNumber" : 65
      },
      "nodeContext" : "!mMission.running || Thread.interrupted()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 147,
        "startColumnNumber" : 20,
        "endLineNumber" : 147,
        "endColumnNumber" : 74
      },
      "nodeContext" : "if (!mMission.running || Thread.interrupted()) return;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1733,
        "startLineNumber" : 111,
        "startColumnNumber" : 23,
        "endLineNumber" : 148,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (!mMission.running || Thread.interrupted())   return;\nsynchronized (mMission.LOCK) {\n    if (mConn.getResponseCode() == 206) {\n      if (mMission.threadCount > 1) {\n        int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n        if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)         count++;\n        mMission.blocks=new int[count];\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n      }\n      if (DEBUG) {\n        Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n      }\n    }\n else {\n      mMission.blocks=new int[0];\n      mMission.unknownLength=false;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n      }\n    }\n  }\n  if (!mMission.running || Thread.interrupted())   return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 162,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2086,
        "startLineNumber" : 103,
        "startColumnNumber" : 16,
        "endLineNumber" : 148,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n  mMission.blocks=new int[0];\n  mMission.length=0;\n  mMission.unknownLength=true;\n  if (DEBUG) {\n    Log.d(TAG,\"falling back (unknown length)\");\n  }\n}\n else {\n  mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n  mMission.establishConnection(mId,mConn);\n  dispose();\n  if (!mMission.running || Thread.interrupted())   return;\nsynchronized (mMission.LOCK) {\n    if (mConn.getResponseCode() == 206) {\n      if (mMission.threadCount > 1) {\n        int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n        if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)         count++;\n        mMission.blocks=new int[count];\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n      }\n      if (DEBUG) {\n        Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n      }\n    }\n else {\n      mMission.blocks=new int[0];\n      mMission.unknownLength=false;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n      }\n    }\n  }\n  if (!mMission.running || Thread.interrupted())   return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 207,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5639,
        "startLineNumber" : 50,
        "startColumnNumber" : 16,
        "endLineNumber" : 173,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6689,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n catch (InterruptedIOException|ClosedByInterruptException e) {\n  return;\n}\ncatch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 673,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 6713,
        "startLineNumber" : 49,
        "startColumnNumber" : 21,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 674,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6726,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 676,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 147,
        "startColumnNumber" : 20,
        "endLineNumber" : 147,
        "endColumnNumber" : 74
      },
      "nodeContext" : "if (!mMission.running || Thread.interrupted()) return;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "us.shandian.giga.get.DownloadMission"
  }, {
    "nodeContext" : "mMission",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 150,
      "startColumnNumber" : 33,
      "endLineNumber" : 150,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 150,
        "startColumnNumber" : 33,
        "endLineNumber" : 150,
        "endColumnNumber" : 49
      },
      "nodeContext" : "mMission.storage",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 150,
        "startColumnNumber" : 33,
        "endLineNumber" : 150,
        "endColumnNumber" : 61
      },
      "nodeContext" : "mMission.storage.getStream()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 150,
        "startColumnNumber" : 28,
        "endLineNumber" : 150,
        "endColumnNumber" : 61
      },
      "nodeContext" : "fs=mMission.storage.getStream()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 150,
        "startColumnNumber" : 16,
        "endLineNumber" : 150,
        "endColumnNumber" : 62
      },
      "nodeContext" : "SharpStream fs=mMission.storage.getStream();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5639,
        "startLineNumber" : 50,
        "startColumnNumber" : 16,
        "endLineNumber" : 173,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6689,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n catch (InterruptedIOException|ClosedByInterruptException e) {\n  return;\n}\ncatch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 673,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 6713,
        "startLineNumber" : 49,
        "startColumnNumber" : 21,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 674,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6726,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 676,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 150,
        "startColumnNumber" : 16,
        "endLineNumber" : 150,
        "endColumnNumber" : 62
      },
      "nodeContext" : "SharpStream fs=mMission.storage.getStream();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "us.shandian.giga.get.Mission"
  }, {
    "nodeContext" : "mMission",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 151,
      "startColumnNumber" : 29,
      "endLineNumber" : 151,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 151,
        "startColumnNumber" : 29,
        "endLineNumber" : 151,
        "endColumnNumber" : 45
      },
      "nodeContext" : "mMission.offsets",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 151,
        "startColumnNumber" : 29,
        "endLineNumber" : 151,
        "endColumnNumber" : 63
      },
      "nodeContext" : "mMission.offsets[mMission.current]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 151,
        "startColumnNumber" : 29,
        "endLineNumber" : 151,
        "endColumnNumber" : 81
      },
      "nodeContext" : "mMission.offsets[mMission.current] + mMission.length",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 151,
        "startColumnNumber" : 16,
        "endLineNumber" : 151,
        "endColumnNumber" : 82
      },
      "nodeContext" : "fs.setLength(mMission.offsets[mMission.current] + mMission.length)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 151,
        "startColumnNumber" : 16,
        "endLineNumber" : 151,
        "endColumnNumber" : 83
      },
      "nodeContext" : "fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5639,
        "startLineNumber" : 50,
        "startColumnNumber" : 16,
        "endLineNumber" : 173,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6689,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n catch (InterruptedIOException|ClosedByInterruptException e) {\n  return;\n}\ncatch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 673,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 6713,
        "startLineNumber" : 49,
        "startColumnNumber" : 21,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 674,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6726,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 676,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 151,
        "startColumnNumber" : 16,
        "endLineNumber" : 151,
        "endColumnNumber" : 83
      },
      "nodeContext" : "fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "us.shandian.giga.get.DownloadMission"
  }, {
    "nodeContext" : "mMission",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 151,
      "startColumnNumber" : 46,
      "endLineNumber" : 151,
      "endColumnNumber" : 54
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,index]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 151,
        "startColumnNumber" : 46,
        "endLineNumber" : 151,
        "endColumnNumber" : 62
      },
      "nodeContext" : "mMission.current",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 151,
        "startColumnNumber" : 29,
        "endLineNumber" : 151,
        "endColumnNumber" : 63
      },
      "nodeContext" : "mMission.offsets[mMission.current]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 151,
        "startColumnNumber" : 29,
        "endLineNumber" : 151,
        "endColumnNumber" : 81
      },
      "nodeContext" : "mMission.offsets[mMission.current] + mMission.length",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 151,
        "startColumnNumber" : 16,
        "endLineNumber" : 151,
        "endColumnNumber" : 82
      },
      "nodeContext" : "fs.setLength(mMission.offsets[mMission.current] + mMission.length)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 151,
        "startColumnNumber" : 16,
        "endLineNumber" : 151,
        "endColumnNumber" : 83
      },
      "nodeContext" : "fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5639,
        "startLineNumber" : 50,
        "startColumnNumber" : 16,
        "endLineNumber" : 173,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6689,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n catch (InterruptedIOException|ClosedByInterruptException e) {\n  return;\n}\ncatch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 673,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 6713,
        "startLineNumber" : 49,
        "startColumnNumber" : 21,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 674,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6726,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 676,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 151,
        "startColumnNumber" : 16,
        "endLineNumber" : 151,
        "endColumnNumber" : 83
      },
      "nodeContext" : "fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "us.shandian.giga.get.DownloadMission"
  }, {
    "nodeContext" : "mMission",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 151,
      "startColumnNumber" : 66,
      "endLineNumber" : 151,
      "endColumnNumber" : 74
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 151,
        "startColumnNumber" : 66,
        "endLineNumber" : 151,
        "endColumnNumber" : 81
      },
      "nodeContext" : "mMission.length",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 151,
        "startColumnNumber" : 29,
        "endLineNumber" : 151,
        "endColumnNumber" : 81
      },
      "nodeContext" : "mMission.offsets[mMission.current] + mMission.length",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 151,
        "startColumnNumber" : 16,
        "endLineNumber" : 151,
        "endColumnNumber" : 82
      },
      "nodeContext" : "fs.setLength(mMission.offsets[mMission.current] + mMission.length)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 151,
        "startColumnNumber" : 16,
        "endLineNumber" : 151,
        "endColumnNumber" : 83
      },
      "nodeContext" : "fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5639,
        "startLineNumber" : 50,
        "startColumnNumber" : 16,
        "endLineNumber" : 173,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6689,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n catch (InterruptedIOException|ClosedByInterruptException e) {\n  return;\n}\ncatch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 673,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 6713,
        "startLineNumber" : 49,
        "startColumnNumber" : 21,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 674,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6726,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 676,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 151,
        "startColumnNumber" : 16,
        "endLineNumber" : 151,
        "endColumnNumber" : 83
      },
      "nodeContext" : "fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "us.shandian.giga.get.Mission"
  }, {
    "nodeContext" : "mMission",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 152,
      "startColumnNumber" : 24,
      "endLineNumber" : 152,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 152,
        "startColumnNumber" : 24,
        "endLineNumber" : 152,
        "endColumnNumber" : 40
      },
      "nodeContext" : "mMission.offsets",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 152,
        "startColumnNumber" : 24,
        "endLineNumber" : 152,
        "endColumnNumber" : 58
      },
      "nodeContext" : "mMission.offsets[mMission.current]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 152,
        "startColumnNumber" : 16,
        "endLineNumber" : 152,
        "endColumnNumber" : 59
      },
      "nodeContext" : "fs.seek(mMission.offsets[mMission.current])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 152,
        "startColumnNumber" : 16,
        "endLineNumber" : 152,
        "endColumnNumber" : 60
      },
      "nodeContext" : "fs.seek(mMission.offsets[mMission.current]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5639,
        "startLineNumber" : 50,
        "startColumnNumber" : 16,
        "endLineNumber" : 173,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6689,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n catch (InterruptedIOException|ClosedByInterruptException e) {\n  return;\n}\ncatch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 673,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 6713,
        "startLineNumber" : 49,
        "startColumnNumber" : 21,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 674,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6726,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 676,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 152,
        "startColumnNumber" : 16,
        "endLineNumber" : 152,
        "endColumnNumber" : 60
      },
      "nodeContext" : "fs.seek(mMission.offsets[mMission.current]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "us.shandian.giga.get.DownloadMission"
  }, {
    "nodeContext" : "mMission",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 152,
      "startColumnNumber" : 41,
      "endLineNumber" : 152,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,index]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 152,
        "startColumnNumber" : 41,
        "endLineNumber" : 152,
        "endColumnNumber" : 57
      },
      "nodeContext" : "mMission.current",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 152,
        "startColumnNumber" : 24,
        "endLineNumber" : 152,
        "endColumnNumber" : 58
      },
      "nodeContext" : "mMission.offsets[mMission.current]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 152,
        "startColumnNumber" : 16,
        "endLineNumber" : 152,
        "endColumnNumber" : 59
      },
      "nodeContext" : "fs.seek(mMission.offsets[mMission.current])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 152,
        "startColumnNumber" : 16,
        "endLineNumber" : 152,
        "endColumnNumber" : 60
      },
      "nodeContext" : "fs.seek(mMission.offsets[mMission.current]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5639,
        "startLineNumber" : 50,
        "startColumnNumber" : 16,
        "endLineNumber" : 173,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6689,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n catch (InterruptedIOException|ClosedByInterruptException e) {\n  return;\n}\ncatch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 673,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 6713,
        "startLineNumber" : 49,
        "startColumnNumber" : 21,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 674,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6726,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 676,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 152,
        "startColumnNumber" : 16,
        "endLineNumber" : 152,
        "endColumnNumber" : 60
      },
      "nodeContext" : "fs.seek(mMission.offsets[mMission.current]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "us.shandian.giga.get.DownloadMission"
  }, {
    "nodeContext" : "mMission",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 155,
      "startColumnNumber" : 21,
      "endLineNumber" : 155,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 155,
        "startColumnNumber" : 21,
        "endLineNumber" : 155,
        "endColumnNumber" : 37
      },
      "nodeContext" : "mMission.running",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 155,
        "startColumnNumber" : 20,
        "endLineNumber" : 155,
        "endColumnNumber" : 37
      },
      "nodeContext" : "!mMission.running",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 155,
        "startColumnNumber" : 20,
        "endLineNumber" : 155,
        "endColumnNumber" : 61
      },
      "nodeContext" : "!mMission.running || Thread.interrupted()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 155,
        "startColumnNumber" : 16,
        "endLineNumber" : 155,
        "endColumnNumber" : 70
      },
      "nodeContext" : "if (!mMission.running || Thread.interrupted()) return;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5639,
        "startLineNumber" : 50,
        "startColumnNumber" : 16,
        "endLineNumber" : 173,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6689,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n catch (InterruptedIOException|ClosedByInterruptException e) {\n  return;\n}\ncatch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 673,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 6713,
        "startLineNumber" : 49,
        "startColumnNumber" : 21,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 674,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6726,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 676,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 155,
        "startColumnNumber" : 16,
        "endLineNumber" : 155,
        "endColumnNumber" : 70
      },
      "nodeContext" : "if (!mMission.running || Thread.interrupted()) return;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "us.shandian.giga.get.DownloadMission"
  }, {
    "nodeContext" : "mMission",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 157,
      "startColumnNumber" : 21,
      "endLineNumber" : 157,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 157,
        "startColumnNumber" : 21,
        "endLineNumber" : 157,
        "endColumnNumber" : 43
      },
      "nodeContext" : "mMission.unknownLength",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 157,
        "startColumnNumber" : 20,
        "endLineNumber" : 157,
        "endColumnNumber" : 43
      },
      "nodeContext" : "!mMission.unknownLength",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 157,
        "startColumnNumber" : 20,
        "endLineNumber" : 157,
        "endColumnNumber" : 76
      },
      "nodeContext" : "!mMission.unknownLength && mMission.recoveryInfo != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 718,
        "startLineNumber" : 157,
        "startColumnNumber" : 16,
        "endLineNumber" : 169,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n  String entityTag=mConn.getHeaderField(\"ETAG\");\n  String lastModified=mConn.getHeaderField(\"Last-Modified\");\n  MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n  if (!TextUtils.isEmpty(entityTag)) {\n    recovery.validateCondition=entityTag;\n  }\n else   if (!TextUtils.isEmpty(lastModified)) {\n    recovery.validateCondition=lastModified;\n  }\n else {\n    recovery.validateCondition=null;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 75,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5639,
        "startLineNumber" : 50,
        "startColumnNumber" : 16,
        "endLineNumber" : 173,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6689,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n catch (InterruptedIOException|ClosedByInterruptException e) {\n  return;\n}\ncatch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 673,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 6713,
        "startLineNumber" : 49,
        "startColumnNumber" : 21,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 674,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6726,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 676,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 157,
        "startColumnNumber" : 20,
        "endLineNumber" : 157,
        "endColumnNumber" : 76
      },
      "nodeContext" : "!mMission.unknownLength && mMission.recoveryInfo != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "us.shandian.giga.get.DownloadMission"
  }, {
    "nodeContext" : "mMission",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 157,
      "startColumnNumber" : 47,
      "endLineNumber" : 157,
      "endColumnNumber" : 55
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 157,
        "startColumnNumber" : 47,
        "endLineNumber" : 157,
        "endColumnNumber" : 68
      },
      "nodeContext" : "mMission.recoveryInfo",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 157,
        "startColumnNumber" : 47,
        "endLineNumber" : 157,
        "endColumnNumber" : 76
      },
      "nodeContext" : "mMission.recoveryInfo != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 157,
        "startColumnNumber" : 20,
        "endLineNumber" : 157,
        "endColumnNumber" : 76
      },
      "nodeContext" : "!mMission.unknownLength && mMission.recoveryInfo != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 718,
        "startLineNumber" : 157,
        "startColumnNumber" : 16,
        "endLineNumber" : 169,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n  String entityTag=mConn.getHeaderField(\"ETAG\");\n  String lastModified=mConn.getHeaderField(\"Last-Modified\");\n  MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n  if (!TextUtils.isEmpty(entityTag)) {\n    recovery.validateCondition=entityTag;\n  }\n else   if (!TextUtils.isEmpty(lastModified)) {\n    recovery.validateCondition=lastModified;\n  }\n else {\n    recovery.validateCondition=null;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 75,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5639,
        "startLineNumber" : 50,
        "startColumnNumber" : 16,
        "endLineNumber" : 173,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6689,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n catch (InterruptedIOException|ClosedByInterruptException e) {\n  return;\n}\ncatch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 673,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 6713,
        "startLineNumber" : 49,
        "startColumnNumber" : 21,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 674,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6726,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 676,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 157,
        "startColumnNumber" : 20,
        "endLineNumber" : 157,
        "endColumnNumber" : 76
      },
      "nodeContext" : "!mMission.unknownLength && mMission.recoveryInfo != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "us.shandian.giga.get.DownloadMission"
  }, {
    "nodeContext" : "mMission",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 160,
      "startColumnNumber" : 51,
      "endLineNumber" : 160,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 160,
        "startColumnNumber" : 51,
        "endLineNumber" : 160,
        "endColumnNumber" : 72
      },
      "nodeContext" : "mMission.recoveryInfo",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 160,
        "startColumnNumber" : 51,
        "endLineNumber" : 160,
        "endColumnNumber" : 90
      },
      "nodeContext" : "mMission.recoveryInfo[mMission.current]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 160,
        "startColumnNumber" : 40,
        "endLineNumber" : 160,
        "endColumnNumber" : 90
      },
      "nodeContext" : "recovery=mMission.recoveryInfo[mMission.current]",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 160,
        "startColumnNumber" : 20,
        "endLineNumber" : 160,
        "endColumnNumber" : 91
      },
      "nodeContext" : "MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 656,
        "startLineNumber" : 157,
        "startColumnNumber" : 78,
        "endLineNumber" : 169,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  String entityTag=mConn.getHeaderField(\"ETAG\");\n  String lastModified=mConn.getHeaderField(\"Last-Modified\");\n  MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n  if (!TextUtils.isEmpty(entityTag)) {\n    recovery.validateCondition=entityTag;\n  }\n else   if (!TextUtils.isEmpty(lastModified)) {\n    recovery.validateCondition=lastModified;\n  }\n else {\n    recovery.validateCondition=null;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 64,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 718,
        "startLineNumber" : 157,
        "startColumnNumber" : 16,
        "endLineNumber" : 169,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n  String entityTag=mConn.getHeaderField(\"ETAG\");\n  String lastModified=mConn.getHeaderField(\"Last-Modified\");\n  MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n  if (!TextUtils.isEmpty(entityTag)) {\n    recovery.validateCondition=entityTag;\n  }\n else   if (!TextUtils.isEmpty(lastModified)) {\n    recovery.validateCondition=lastModified;\n  }\n else {\n    recovery.validateCondition=null;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 75,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5639,
        "startLineNumber" : 50,
        "startColumnNumber" : 16,
        "endLineNumber" : 173,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6689,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n catch (InterruptedIOException|ClosedByInterruptException e) {\n  return;\n}\ncatch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 673,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 6713,
        "startLineNumber" : 49,
        "startColumnNumber" : 21,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 674,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6726,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 676,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 160,
        "startColumnNumber" : 20,
        "endLineNumber" : 160,
        "endColumnNumber" : 91
      },
      "nodeContext" : "MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "us.shandian.giga.get.DownloadMission"
  }, {
    "nodeContext" : "mMission",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 160,
      "startColumnNumber" : 73,
      "endLineNumber" : 160,
      "endColumnNumber" : 81
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,index]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 160,
        "startColumnNumber" : 73,
        "endLineNumber" : 160,
        "endColumnNumber" : 89
      },
      "nodeContext" : "mMission.current",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 160,
        "startColumnNumber" : 51,
        "endLineNumber" : 160,
        "endColumnNumber" : 90
      },
      "nodeContext" : "mMission.recoveryInfo[mMission.current]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 160,
        "startColumnNumber" : 40,
        "endLineNumber" : 160,
        "endColumnNumber" : 90
      },
      "nodeContext" : "recovery=mMission.recoveryInfo[mMission.current]",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 160,
        "startColumnNumber" : 20,
        "endLineNumber" : 160,
        "endColumnNumber" : 91
      },
      "nodeContext" : "MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 656,
        "startLineNumber" : 157,
        "startColumnNumber" : 78,
        "endLineNumber" : 169,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  String entityTag=mConn.getHeaderField(\"ETAG\");\n  String lastModified=mConn.getHeaderField(\"Last-Modified\");\n  MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n  if (!TextUtils.isEmpty(entityTag)) {\n    recovery.validateCondition=entityTag;\n  }\n else   if (!TextUtils.isEmpty(lastModified)) {\n    recovery.validateCondition=lastModified;\n  }\n else {\n    recovery.validateCondition=null;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 64,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 718,
        "startLineNumber" : 157,
        "startColumnNumber" : 16,
        "endLineNumber" : 169,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n  String entityTag=mConn.getHeaderField(\"ETAG\");\n  String lastModified=mConn.getHeaderField(\"Last-Modified\");\n  MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n  if (!TextUtils.isEmpty(entityTag)) {\n    recovery.validateCondition=entityTag;\n  }\n else   if (!TextUtils.isEmpty(lastModified)) {\n    recovery.validateCondition=lastModified;\n  }\n else {\n    recovery.validateCondition=null;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 75,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5639,
        "startLineNumber" : 50,
        "startColumnNumber" : 16,
        "endLineNumber" : 173,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6689,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n catch (InterruptedIOException|ClosedByInterruptException e) {\n  return;\n}\ncatch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 673,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 6713,
        "startLineNumber" : 49,
        "startColumnNumber" : 21,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 674,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6726,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 676,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 160,
        "startColumnNumber" : 20,
        "endLineNumber" : 160,
        "endColumnNumber" : 91
      },
      "nodeContext" : "MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "us.shandian.giga.get.DownloadMission"
  }, {
    "nodeContext" : "mMission",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 171,
      "startColumnNumber" : 16,
      "endLineNumber" : 171,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 171,
        "startColumnNumber" : 16,
        "endLineNumber" : 171,
        "endColumnNumber" : 32
      },
      "nodeContext" : "mMission.running",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 171,
        "startColumnNumber" : 16,
        "endLineNumber" : 171,
        "endColumnNumber" : 40
      },
      "nodeContext" : "mMission.running=false",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 171,
        "startColumnNumber" : 16,
        "endLineNumber" : 171,
        "endColumnNumber" : 41
      },
      "nodeContext" : "mMission.running=false;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5639,
        "startLineNumber" : 50,
        "startColumnNumber" : 16,
        "endLineNumber" : 173,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6689,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n catch (InterruptedIOException|ClosedByInterruptException e) {\n  return;\n}\ncatch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 673,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 6713,
        "startLineNumber" : 49,
        "startColumnNumber" : 21,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 674,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6726,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 676,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 171,
        "startColumnNumber" : 16,
        "endLineNumber" : 171,
        "endColumnNumber" : 41
      },
      "nodeContext" : "mMission.running=false;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "us.shandian.giga.get.DownloadMission"
  }, {
    "nodeContext" : "mMission",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 176,
      "startColumnNumber" : 21,
      "endLineNumber" : 176,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 176,
        "startColumnNumber" : 21,
        "endLineNumber" : 176,
        "endColumnNumber" : 37
      },
      "nodeContext" : "mMission.running",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 176,
        "startColumnNumber" : 20,
        "endLineNumber" : 176,
        "endColumnNumber" : 37
      },
      "nodeContext" : "!mMission.running",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 176,
        "startColumnNumber" : 20,
        "endLineNumber" : 176,
        "endColumnNumber" : 62
      },
      "nodeContext" : "!mMission.running || super.isInterrupted()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 176,
        "startColumnNumber" : 16,
        "endLineNumber" : 176,
        "endColumnNumber" : 71
      },
      "nodeContext" : "if (!mMission.running || super.isInterrupted()) return;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 923,
        "startLineNumber" : 175,
        "startColumnNumber" : 34,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 89,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 943,
        "startLineNumber" : 175,
        "startColumnNumber" : 14,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "catch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 94,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6689,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n catch (InterruptedIOException|ClosedByInterruptException e) {\n  return;\n}\ncatch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 673,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 6713,
        "startLineNumber" : 49,
        "startColumnNumber" : 21,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 674,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6726,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 676,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 176,
        "startColumnNumber" : 16,
        "endLineNumber" : 176,
        "endColumnNumber" : 71
      },
      "nodeContext" : "if (!mMission.running || super.isInterrupted()) return;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "us.shandian.giga.get.DownloadMission"
  }, {
    "nodeContext" : "mMission",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 181,
      "startColumnNumber" : 20,
      "endLineNumber" : 181,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 181,
        "startColumnNumber" : 20,
        "endLineNumber" : 181,
        "endColumnNumber" : 60
      },
      "nodeContext" : "mMission.doRecover(ERROR_HTTP_FORBIDDEN)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 181,
        "startColumnNumber" : 20,
        "endLineNumber" : 181,
        "endColumnNumber" : 61
      },
      "nodeContext" : "mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 206,
        "startLineNumber" : 178,
        "startColumnNumber" : 130,
        "endLineNumber" : 183,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  interrupt();\n  mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 320,
        "startLineNumber" : 178,
        "startColumnNumber" : 16,
        "endLineNumber" : 183,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n  interrupt();\n  mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 29,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 923,
        "startLineNumber" : 175,
        "startColumnNumber" : 34,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 89,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 943,
        "startLineNumber" : 175,
        "startColumnNumber" : 14,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "catch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 94,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6689,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n catch (InterruptedIOException|ClosedByInterruptException e) {\n  return;\n}\ncatch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 673,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 6713,
        "startLineNumber" : 49,
        "startColumnNumber" : 21,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 674,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6726,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 676,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 181,
        "startColumnNumber" : 20,
        "endLineNumber" : 181,
        "endColumnNumber" : 61
      },
      "nodeContext" : "mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "us.shandian.giga.get.DownloadMission"
  }, {
    "nodeContext" : "mMission",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 186,
      "startColumnNumber" : 20,
      "endLineNumber" : 186,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 186,
        "startColumnNumber" : 20,
        "endLineNumber" : 186,
        "endColumnNumber" : 84
      },
      "nodeContext" : "mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 186,
        "startColumnNumber" : 20,
        "endLineNumber" : 186,
        "endColumnNumber" : 85
      },
      "nodeContext" : "mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 133,
        "startLineNumber" : 185,
        "startColumnNumber" : 94,
        "endLineNumber" : 188,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 211,
        "startLineNumber" : 185,
        "startColumnNumber" : 16,
        "endLineNumber" : 188,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n  mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 923,
        "startLineNumber" : 175,
        "startColumnNumber" : 34,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 89,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 943,
        "startLineNumber" : 175,
        "startColumnNumber" : 14,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "catch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 94,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6689,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n catch (InterruptedIOException|ClosedByInterruptException e) {\n  return;\n}\ncatch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 673,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 6713,
        "startLineNumber" : 49,
        "startColumnNumber" : 21,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 674,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6726,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 676,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 186,
        "startColumnNumber" : 20,
        "endLineNumber" : 186,
        "endColumnNumber" : 85
      },
      "nodeContext" : "mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "us.shandian.giga.get.DownloadMission"
  }, {
    "nodeContext" : "mMission",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 190,
      "startColumnNumber" : 35,
      "endLineNumber" : 190,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 190,
        "startColumnNumber" : 35,
        "endLineNumber" : 190,
        "endColumnNumber" : 52
      },
      "nodeContext" : "mMission.maxRetry",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 190,
        "startColumnNumber" : 20,
        "endLineNumber" : 190,
        "endColumnNumber" : 52
      },
      "nodeContext" : "retryCount++ > mMission.maxRetry",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 187,
        "startLineNumber" : 190,
        "startColumnNumber" : 16,
        "endLineNumber" : 194,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (retryCount++ > mMission.maxRetry) {\n  Log.e(TAG,\"initializer failed\",e);\n  mMission.notifyError(e);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 923,
        "startLineNumber" : 175,
        "startColumnNumber" : 34,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 89,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 943,
        "startLineNumber" : 175,
        "startColumnNumber" : 14,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "catch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 94,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6689,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n catch (InterruptedIOException|ClosedByInterruptException e) {\n  return;\n}\ncatch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 673,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 6713,
        "startLineNumber" : 49,
        "startColumnNumber" : 21,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 674,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6726,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 676,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 190,
        "startColumnNumber" : 20,
        "endLineNumber" : 190,
        "endColumnNumber" : 52
      },
      "nodeContext" : "retryCount++ > mMission.maxRetry",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "us.shandian.giga.get.DownloadMission"
  }, {
    "nodeContext" : "mMission",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 192,
      "startColumnNumber" : 20,
      "endLineNumber" : 192,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 192,
        "startColumnNumber" : 20,
        "endLineNumber" : 192,
        "endColumnNumber" : 43
      },
      "nodeContext" : "mMission.notifyError(e)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 192,
        "startColumnNumber" : 20,
        "endLineNumber" : 192,
        "endColumnNumber" : 44
      },
      "nodeContext" : "mMission.notifyError(e);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 149,
        "startLineNumber" : 190,
        "startColumnNumber" : 54,
        "endLineNumber" : 194,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  Log.e(TAG,\"initializer failed\",e);\n  mMission.notifyError(e);\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 187,
        "startLineNumber" : 190,
        "startColumnNumber" : 16,
        "endLineNumber" : 194,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (retryCount++ > mMission.maxRetry) {\n  Log.e(TAG,\"initializer failed\",e);\n  mMission.notifyError(e);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 923,
        "startLineNumber" : 175,
        "startColumnNumber" : 34,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 89,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 943,
        "startLineNumber" : 175,
        "startColumnNumber" : 14,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "catch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 94,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6689,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  if (mMission.blocks == null && mMission.current == 0) {\n    long finalLength=0;\n    long lowestSize=Long.MAX_VALUE;\n    for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n      mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (Thread.interrupted())       return;\n      long length=Utility.getContentLength(mConn);\n      if (i == 0) {\n        httpCode=mConn.getResponseCode();\n        mMission.length=length;\n      }\n      if (length > 0)       finalLength+=length;\n      if (length < lowestSize)       lowestSize=length;\n    }\n    mMission.nearLength=finalLength;\n    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n      if (lowestSize < 1) {\n        mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n      }\n else {\n        mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n      }\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,-1,-1);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\n    httpCode=mConn.getResponseCode();\n    mMission.length=Utility.getContentLength(mConn);\n  }\n  if (mMission.length == 0 || httpCode == 204) {\n    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n    return;\n  }\n  if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n    mMission.blocks=new int[0];\n    mMission.length=0;\n    mMission.unknownLength=true;\n    if (DEBUG) {\n      Log.d(TAG,\"falling back (unknown length)\");\n    }\n  }\n else {\n    mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n    mMission.establishConnection(mId,mConn);\n    dispose();\n    if (!mMission.running || Thread.interrupted())     return;\nsynchronized (mMission.LOCK) {\n      if (mConn.getResponseCode() == 206) {\n        if (mMission.threadCount > 1) {\n          int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n          if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)           count++;\n          mMission.blocks=new int[count];\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n        }\n        if (DEBUG) {\n          Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n        }\n      }\n else {\n        mMission.blocks=new int[0];\n        mMission.unknownLength=false;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n        }\n      }\n    }\n    if (!mMission.running || Thread.interrupted())     return;\n  }\n  SharpStream fs=mMission.storage.getStream();\n  fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n  fs.seek(mMission.offsets[mMission.current]);\n  fs.close();\n  if (!mMission.running || Thread.interrupted())   return;\n  if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n    String entityTag=mConn.getHeaderField(\"ETAG\");\n    String lastModified=mConn.getHeaderField(\"Last-Modified\");\n    MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n    if (!TextUtils.isEmpty(entityTag)) {\n      recovery.validateCondition=entityTag;\n    }\n else     if (!TextUtils.isEmpty(lastModified)) {\n      recovery.validateCondition=lastModified;\n    }\n else {\n      recovery.validateCondition=null;\n    }\n  }\n  mMission.running=false;\n  break;\n}\n catch (InterruptedIOException|ClosedByInterruptException e) {\n  return;\n}\ncatch (Exception e) {\n  if (!mMission.running || super.isInterrupted())   return;\n  if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n    interrupt();\n    mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n    return;\n  }\n  if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n    return;\n  }\n  if (retryCount++ > mMission.maxRetry) {\n    Log.e(TAG,\"initializer failed\",e);\n    mMission.notifyError(e);\n    return;\n  }\n  Log.e(TAG,\"initializer failed, retrying\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 673,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 6713,
        "startLineNumber" : 49,
        "startColumnNumber" : 21,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 674,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6726,
        "startLineNumber" : 49,
        "startColumnNumber" : 8,
        "endLineNumber" : 198,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (true) {\n  try {\n    if (mMission.blocks == null && mMission.current == 0) {\n      long finalLength=0;\n      long lowestSize=Long.MAX_VALUE;\n      for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n        mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (Thread.interrupted())         return;\n        long length=Utility.getContentLength(mConn);\n        if (i == 0) {\n          httpCode=mConn.getResponseCode();\n          mMission.length=length;\n        }\n        if (length > 0)         finalLength+=length;\n        if (length < lowestSize)         lowestSize=length;\n      }\n      mMission.nearLength=finalLength;\n      if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n        if (lowestSize < 1) {\n          mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n        }\n else {\n          mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n        }\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,-1,-1);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\n      httpCode=mConn.getResponseCode();\n      mMission.length=Utility.getContentLength(mConn);\n    }\n    if (mMission.length == 0 || httpCode == 204) {\n      mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n      return;\n    }\n    if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n      mMission.blocks=new int[0];\n      mMission.length=0;\n      mMission.unknownLength=true;\n      if (DEBUG) {\n        Log.d(TAG,\"falling back (unknown length)\");\n      }\n    }\n else {\n      mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n      mMission.establishConnection(mId,mConn);\n      dispose();\n      if (!mMission.running || Thread.interrupted())       return;\nsynchronized (mMission.LOCK) {\n        if (mConn.getResponseCode() == 206) {\n          if (mMission.threadCount > 1) {\n            int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n            if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)             count++;\n            mMission.blocks=new int[count];\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n          }\n          if (DEBUG) {\n            Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n          }\n        }\n else {\n          mMission.blocks=new int[0];\n          mMission.unknownLength=false;\n          if (DEBUG) {\n            Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n          }\n        }\n      }\n      if (!mMission.running || Thread.interrupted())       return;\n    }\n    SharpStream fs=mMission.storage.getStream();\n    fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n    fs.seek(mMission.offsets[mMission.current]);\n    fs.close();\n    if (!mMission.running || Thread.interrupted())     return;\n    if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n      String entityTag=mConn.getHeaderField(\"ETAG\");\n      String lastModified=mConn.getHeaderField(\"Last-Modified\");\n      MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n      if (!TextUtils.isEmpty(entityTag)) {\n        recovery.validateCondition=entityTag;\n      }\n else       if (!TextUtils.isEmpty(lastModified)) {\n        recovery.validateCondition=lastModified;\n      }\n else {\n        recovery.validateCondition=null;\n      }\n    }\n    mMission.running=false;\n    break;\n  }\n catch (  InterruptedIOException|ClosedByInterruptException e) {\n    return;\n  }\ncatch (  Exception e) {\n    if (!mMission.running || super.isInterrupted())     return;\n    if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      interrupt();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n    if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n      mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n      return;\n    }\n    if (retryCount++ > mMission.maxRetry) {\n      Log.e(TAG,\"initializer failed\",e);\n      mMission.notifyError(e);\n      return;\n    }\n    Log.e(TAG,\"initializer failed, retrying\",e);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 676,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 192,
        "startColumnNumber" : 20,
        "endLineNumber" : 192,
        "endColumnNumber" : 44
      },
      "nodeContext" : "mMission.notifyError(e);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "us.shandian.giga.get.DownloadMission"
  }, {
    "nodeContext" : "mMission",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 200,
      "startColumnNumber" : 8,
      "endLineNumber" : 200,
      "endColumnNumber" : 16
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 200,
        "startColumnNumber" : 8,
        "endLineNumber" : 200,
        "endColumnNumber" : 24
      },
      "nodeContext" : "mMission.start()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 200,
        "startColumnNumber" : 8,
        "endLineNumber" : 200,
        "endColumnNumber" : 25
      },
      "nodeContext" : "mMission.start();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6926,
        "startLineNumber" : 43,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 706,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6958,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  if (mMission.current > 0)   mMission.resetState(false,true,DownloadMission.ERROR_NOTHING);\n  int retryCount=0;\n  int httpCode=204;\n  while (true) {\n    try {\n      if (mMission.blocks == null && mMission.current == 0) {\n        long finalLength=0;\n        long lowestSize=Long.MAX_VALUE;\n        for (int i=0; i < mMission.urls.length && mMission.running; i++) {\n          mConn=mMission.openConnection(mMission.urls[i],true,-1,-1);\n          mMission.establishConnection(mId,mConn);\n          dispose();\n          if (Thread.interrupted())           return;\n          long length=Utility.getContentLength(mConn);\n          if (i == 0) {\n            httpCode=mConn.getResponseCode();\n            mMission.length=length;\n          }\n          if (length > 0)           finalLength+=length;\n          if (length < lowestSize)           lowestSize=length;\n        }\n        mMission.nearLength=finalLength;\n        if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {\n          if (lowestSize < 1) {\n            mMission.offsets[0]=RESERVE_SPACE_DEFAULT;\n          }\n else {\n            mMission.offsets[0]=lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;\n          }\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,-1,-1);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\n        httpCode=mConn.getResponseCode();\n        mMission.length=Utility.getContentLength(mConn);\n      }\n      if (mMission.length == 0 || httpCode == 204) {\n        mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT,null);\n        return;\n      }\n      if (mMission.length == -1 && mConn.getResponseCode() == 200) {\n        mMission.blocks=new int[0];\n        mMission.length=0;\n        mMission.unknownLength=true;\n        if (DEBUG) {\n          Log.d(TAG,\"falling back (unknown length)\");\n        }\n      }\n else {\n        mConn=mMission.openConnection(true,mMission.length - 10,mMission.length);\n        mMission.establishConnection(mId,mConn);\n        dispose();\n        if (!mMission.running || Thread.interrupted())         return;\nsynchronized (mMission.LOCK) {\n          if (mConn.getResponseCode() == 206) {\n            if (mMission.threadCount > 1) {\n              int count=(int)(mMission.length / DownloadMission.BLOCK_SIZE);\n              if ((count * DownloadMission.BLOCK_SIZE) < mMission.length)               count++;\n              mMission.blocks=new int[count];\n            }\n else {\n              mMission.blocks=new int[0];\n              mMission.unknownLength=false;\n            }\n            if (DEBUG) {\n              Log.d(TAG,\"http response code = \" + mConn.getResponseCode());\n            }\n          }\n else {\n            mMission.blocks=new int[0];\n            mMission.unknownLength=false;\n            if (DEBUG) {\n              Log.d(TAG,\"falling back due http response code = \" + mConn.getResponseCode());\n            }\n          }\n        }\n        if (!mMission.running || Thread.interrupted())         return;\n      }\n      SharpStream fs=mMission.storage.getStream();\n      fs.setLength(mMission.offsets[mMission.current] + mMission.length);\n      fs.seek(mMission.offsets[mMission.current]);\n      fs.close();\n      if (!mMission.running || Thread.interrupted())       return;\n      if (!mMission.unknownLength && mMission.recoveryInfo != null) {\n        String entityTag=mConn.getHeaderField(\"ETAG\");\n        String lastModified=mConn.getHeaderField(\"Last-Modified\");\n        MissionRecoveryInfo recovery=mMission.recoveryInfo[mMission.current];\n        if (!TextUtils.isEmpty(entityTag)) {\n          recovery.validateCondition=entityTag;\n        }\n else         if (!TextUtils.isEmpty(lastModified)) {\n          recovery.validateCondition=lastModified;\n        }\n else {\n          recovery.validateCondition=null;\n        }\n      }\n      mMission.running=false;\n      break;\n    }\n catch (    InterruptedIOException|ClosedByInterruptException e) {\n      return;\n    }\ncatch (    Exception e) {\n      if (!mMission.running || super.isInterrupted())       return;\n      if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n        interrupt();\n        mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n        return;\n      }\n      if (e instanceof IOException && e.getMessage().contains(\"Permission denied\")) {\n        mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED,e);\n        return;\n      }\n      if (retryCount++ > mMission.maxRetry) {\n        Log.e(TAG,\"initializer failed\",e);\n        mMission.notifyError(e);\n        return;\n      }\n      Log.e(TAG,\"initializer failed, retrying\",e);\n    }\n  }\n  mMission.start();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 200,
        "startColumnNumber" : 8,
        "endLineNumber" : 200,
        "endColumnNumber" : 25
      },
      "nodeContext" : "mMission.start();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "us.shandian.giga.get.DownloadMission"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 44,
    "startColumnNumber" : 12,
    "endLineNumber" : 44,
    "endColumnNumber" : 20
  }, {
    "charLength" : 8,
    "startLineNumber" : 44,
    "startColumnNumber" : 34,
    "endLineNumber" : 44,
    "endColumnNumber" : 42
  }, {
    "charLength" : 8,
    "startLineNumber" : 51,
    "startColumnNumber" : 20,
    "endLineNumber" : 51,
    "endColumnNumber" : 28
  }, {
    "charLength" : 8,
    "startLineNumber" : 51,
    "startColumnNumber" : 47,
    "endLineNumber" : 51,
    "endColumnNumber" : 55
  }, {
    "charLength" : 8,
    "startLineNumber" : 56,
    "startColumnNumber" : 40,
    "endLineNumber" : 56,
    "endColumnNumber" : 48
  }, {
    "charLength" : 8,
    "startLineNumber" : 56,
    "startColumnNumber" : 64,
    "endLineNumber" : 56,
    "endColumnNumber" : 72
  }, {
    "charLength" : 8,
    "startLineNumber" : 57,
    "startColumnNumber" : 32,
    "endLineNumber" : 57,
    "endColumnNumber" : 40
  }, {
    "charLength" : 8,
    "startLineNumber" : 57,
    "startColumnNumber" : 56,
    "endLineNumber" : 57,
    "endColumnNumber" : 64
  }, {
    "charLength" : 8,
    "startLineNumber" : 58,
    "startColumnNumber" : 24,
    "endLineNumber" : 58,
    "endColumnNumber" : 32
  }, {
    "charLength" : 8,
    "startLineNumber" : 66,
    "startColumnNumber" : 28,
    "endLineNumber" : 66,
    "endColumnNumber" : 36
  }, {
    "charLength" : 8,
    "startLineNumber" : 73,
    "startColumnNumber" : 20,
    "endLineNumber" : 73,
    "endColumnNumber" : 28
  }, {
    "charLength" : 8,
    "startLineNumber" : 76,
    "startColumnNumber" : 24,
    "endLineNumber" : 76,
    "endColumnNumber" : 32
  }, {
    "charLength" : 8,
    "startLineNumber" : 76,
    "startColumnNumber" : 56,
    "endLineNumber" : 76,
    "endColumnNumber" : 64
  }, {
    "charLength" : 8,
    "startLineNumber" : 79,
    "startColumnNumber" : 28,
    "endLineNumber" : 79,
    "endColumnNumber" : 36
  }, {
    "charLength" : 8,
    "startLineNumber" : 82,
    "startColumnNumber" : 28,
    "endLineNumber" : 82,
    "endColumnNumber" : 36
  }, {
    "charLength" : 8,
    "startLineNumber" : 87,
    "startColumnNumber" : 28,
    "endLineNumber" : 87,
    "endColumnNumber" : 36
  }, {
    "charLength" : 8,
    "startLineNumber" : 88,
    "startColumnNumber" : 20,
    "endLineNumber" : 88,
    "endColumnNumber" : 28
  }, {
    "charLength" : 8,
    "startLineNumber" : 91,
    "startColumnNumber" : 25,
    "endLineNumber" : 91,
    "endColumnNumber" : 33
  }, {
    "charLength" : 8,
    "startLineNumber" : 94,
    "startColumnNumber" : 20,
    "endLineNumber" : 94,
    "endColumnNumber" : 28
  }, {
    "charLength" : 8,
    "startLineNumber" : 97,
    "startColumnNumber" : 20,
    "endLineNumber" : 97,
    "endColumnNumber" : 28
  }, {
    "charLength" : 8,
    "startLineNumber" : 98,
    "startColumnNumber" : 20,
    "endLineNumber" : 98,
    "endColumnNumber" : 28
  }, {
    "charLength" : 8,
    "startLineNumber" : 103,
    "startColumnNumber" : 20,
    "endLineNumber" : 103,
    "endColumnNumber" : 28
  }, {
    "charLength" : 8,
    "startLineNumber" : 104,
    "startColumnNumber" : 20,
    "endLineNumber" : 104,
    "endColumnNumber" : 28
  }, {
    "charLength" : 8,
    "startLineNumber" : 105,
    "startColumnNumber" : 20,
    "endLineNumber" : 105,
    "endColumnNumber" : 28
  }, {
    "charLength" : 8,
    "startLineNumber" : 106,
    "startColumnNumber" : 20,
    "endLineNumber" : 106,
    "endColumnNumber" : 28
  }, {
    "charLength" : 8,
    "startLineNumber" : 113,
    "startColumnNumber" : 28,
    "endLineNumber" : 113,
    "endColumnNumber" : 36
  }, {
    "charLength" : 8,
    "startLineNumber" : 113,
    "startColumnNumber" : 58,
    "endLineNumber" : 113,
    "endColumnNumber" : 66
  }, {
    "charLength" : 8,
    "startLineNumber" : 113,
    "startColumnNumber" : 80,
    "endLineNumber" : 113,
    "endColumnNumber" : 88
  }, {
    "charLength" : 8,
    "startLineNumber" : 114,
    "startColumnNumber" : 20,
    "endLineNumber" : 114,
    "endColumnNumber" : 28
  }, {
    "charLength" : 8,
    "startLineNumber" : 117,
    "startColumnNumber" : 25,
    "endLineNumber" : 117,
    "endColumnNumber" : 33
  }, {
    "charLength" : 8,
    "startLineNumber" : 119,
    "startColumnNumber" : 34,
    "endLineNumber" : 119,
    "endColumnNumber" : 42
  }, {
    "charLength" : 8,
    "startLineNumber" : 122,
    "startColumnNumber" : 32,
    "endLineNumber" : 122,
    "endColumnNumber" : 40
  }, {
    "charLength" : 8,
    "startLineNumber" : 123,
    "startColumnNumber" : 51,
    "endLineNumber" : 123,
    "endColumnNumber" : 59
  }, {
    "charLength" : 8,
    "startLineNumber" : 124,
    "startColumnNumber" : 75,
    "endLineNumber" : 124,
    "endColumnNumber" : 83
  }, {
    "charLength" : 8,
    "startLineNumber" : 126,
    "startColumnNumber" : 32,
    "endLineNumber" : 126,
    "endColumnNumber" : 40
  }, {
    "charLength" : 8,
    "startLineNumber" : 129,
    "startColumnNumber" : 32,
    "endLineNumber" : 129,
    "endColumnNumber" : 40
  }, {
    "charLength" : 8,
    "startLineNumber" : 130,
    "startColumnNumber" : 32,
    "endLineNumber" : 130,
    "endColumnNumber" : 40
  }, {
    "charLength" : 8,
    "startLineNumber" : 138,
    "startColumnNumber" : 28,
    "endLineNumber" : 138,
    "endColumnNumber" : 36
  }, {
    "charLength" : 8,
    "startLineNumber" : 139,
    "startColumnNumber" : 28,
    "endLineNumber" : 139,
    "endColumnNumber" : 36
  }, {
    "charLength" : 8,
    "startLineNumber" : 147,
    "startColumnNumber" : 25,
    "endLineNumber" : 147,
    "endColumnNumber" : 33
  }, {
    "charLength" : 8,
    "startLineNumber" : 150,
    "startColumnNumber" : 33,
    "endLineNumber" : 150,
    "endColumnNumber" : 41
  }, {
    "charLength" : 8,
    "startLineNumber" : 151,
    "startColumnNumber" : 29,
    "endLineNumber" : 151,
    "endColumnNumber" : 37
  }, {
    "charLength" : 8,
    "startLineNumber" : 151,
    "startColumnNumber" : 46,
    "endLineNumber" : 151,
    "endColumnNumber" : 54
  }, {
    "charLength" : 8,
    "startLineNumber" : 151,
    "startColumnNumber" : 66,
    "endLineNumber" : 151,
    "endColumnNumber" : 74
  }, {
    "charLength" : 8,
    "startLineNumber" : 152,
    "startColumnNumber" : 24,
    "endLineNumber" : 152,
    "endColumnNumber" : 32
  }, {
    "charLength" : 8,
    "startLineNumber" : 152,
    "startColumnNumber" : 41,
    "endLineNumber" : 152,
    "endColumnNumber" : 49
  }, {
    "charLength" : 8,
    "startLineNumber" : 155,
    "startColumnNumber" : 21,
    "endLineNumber" : 155,
    "endColumnNumber" : 29
  }, {
    "charLength" : 8,
    "startLineNumber" : 157,
    "startColumnNumber" : 21,
    "endLineNumber" : 157,
    "endColumnNumber" : 29
  }, {
    "charLength" : 8,
    "startLineNumber" : 157,
    "startColumnNumber" : 47,
    "endLineNumber" : 157,
    "endColumnNumber" : 55
  }, {
    "charLength" : 8,
    "startLineNumber" : 160,
    "startColumnNumber" : 51,
    "endLineNumber" : 160,
    "endColumnNumber" : 59
  }, {
    "charLength" : 8,
    "startLineNumber" : 160,
    "startColumnNumber" : 73,
    "endLineNumber" : 160,
    "endColumnNumber" : 81
  }, {
    "charLength" : 8,
    "startLineNumber" : 171,
    "startColumnNumber" : 16,
    "endLineNumber" : 171,
    "endColumnNumber" : 24
  }, {
    "charLength" : 8,
    "startLineNumber" : 176,
    "startColumnNumber" : 21,
    "endLineNumber" : 176,
    "endColumnNumber" : 29
  }, {
    "charLength" : 8,
    "startLineNumber" : 181,
    "startColumnNumber" : 20,
    "endLineNumber" : 181,
    "endColumnNumber" : 28
  }, {
    "charLength" : 8,
    "startLineNumber" : 186,
    "startColumnNumber" : 20,
    "endLineNumber" : 186,
    "endColumnNumber" : 28
  }, {
    "charLength" : 8,
    "startLineNumber" : 190,
    "startColumnNumber" : 35,
    "endLineNumber" : 190,
    "endColumnNumber" : 43
  }, {
    "charLength" : 8,
    "startLineNumber" : 192,
    "startColumnNumber" : 20,
    "endLineNumber" : 192,
    "endColumnNumber" : 28
  }, {
    "charLength" : 8,
    "startLineNumber" : 200,
    "startColumnNumber" : 8,
    "endLineNumber" : 200,
    "endColumnNumber" : 16
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 32,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 33,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 34,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 35,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 36,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 37,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 38,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 39,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 40,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 41,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 42,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 43,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 44,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 45,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 46,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 47,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 48,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 49,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 50,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 51,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 52,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 53,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 54,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 55,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 56,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 57,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 32,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 33,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 34,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 35,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 36,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 37,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 38,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 39,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 40,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 41,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 42,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 43,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 44,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 45,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 46,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 47,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 48,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 49,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 50,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 51,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 52,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 53,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 54,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 55,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 56,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 57,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 33,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 34,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 35,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 36,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 37,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 38,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 39,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 40,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 41,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 42,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 43,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 44,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 45,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 46,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 47,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 48,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 49,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 50,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 51,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 52,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 53,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 54,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 55,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 56,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 57,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 33,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 34,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 35,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 36,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 37,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 38,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 39,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 40,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 41,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 42,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 43,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 44,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 45,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 46,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 47,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 48,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 49,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 50,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 51,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 52,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 53,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 54,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 55,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 56,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 57,
    "layout" : 8
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 11
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 11
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 21,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 22,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 23,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 24,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 25,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 26,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 27,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 28,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 29,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 30,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 31,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 32,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 33,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 34,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 35,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 36,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 37,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 38,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 39,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 40,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 41,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 42,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 43,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 44,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 45,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 46,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 47,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 48,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 49,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 50,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 51,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 52,
    "layout" : 8
  }, {
    "firstKey" : 4,
    "secondKey" : 53,
    "layout" : 8
  }, {
    "firstKey" : 4,
    "secondKey" : 54,
    "layout" : 8
  }, {
    "firstKey" : 4,
    "secondKey" : 55,
    "layout" : 8
  }, {
    "firstKey" : 4,
    "secondKey" : 56,
    "layout" : 8
  }, {
    "firstKey" : 4,
    "secondKey" : 57,
    "layout" : 11
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 24,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 25,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 26,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 27,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 28,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 29,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 30,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 31,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 32,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 33,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 34,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 35,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 36,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 37,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 38,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 39,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 40,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 41,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 42,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 43,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 44,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 45,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 46,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 47,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 48,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 49,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 50,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 51,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 52,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 53,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 54,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 55,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 56,
    "layout" : 6
  }, {
    "firstKey" : 5,
    "secondKey" : 57,
    "layout" : 9
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 11
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 11
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 0
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 6,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 21,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 22,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 23,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 24,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 25,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 26,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 27,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 28,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 29,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 30,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 31,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 32,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 33,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 34,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 35,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 36,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 37,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 38,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 39,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 40,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 41,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 42,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 43,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 44,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 45,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 46,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 47,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 48,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 49,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 50,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 51,
    "layout" : 7
  }, {
    "firstKey" : 6,
    "secondKey" : 52,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 53,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 54,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 55,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 56,
    "layout" : 8
  }, {
    "firstKey" : 6,
    "secondKey" : 57,
    "layout" : 11
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 13
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 13
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 7,
    "secondKey" : 15,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 16,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 17,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 18,
    "layout" : 8
  }, {
    "firstKey" : 7,
    "secondKey" : 19,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 20,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 21,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 22,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 23,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 24,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 25,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 26,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 27,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 28,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 29,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 30,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 31,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 32,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 33,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 34,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 35,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 36,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 37,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 38,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 39,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 40,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 41,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 42,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 43,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 44,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 45,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 46,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 47,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 48,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 49,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 50,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 51,
    "layout" : 9
  }, {
    "firstKey" : 7,
    "secondKey" : 52,
    "layout" : 10
  }, {
    "firstKey" : 7,
    "secondKey" : 53,
    "layout" : 10
  }, {
    "firstKey" : 7,
    "secondKey" : 54,
    "layout" : 10
  }, {
    "firstKey" : 7,
    "secondKey" : 55,
    "layout" : 10
  }, {
    "firstKey" : 7,
    "secondKey" : 56,
    "layout" : 10
  }, {
    "firstKey" : 7,
    "secondKey" : 57,
    "layout" : 13
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 25,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 26,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 27,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 28,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 29,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 30,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 31,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 32,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 33,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 34,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 35,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 36,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 37,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 38,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 39,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 40,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 41,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 42,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 43,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 44,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 45,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 46,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 47,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 48,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 49,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 50,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 51,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 52,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 53,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 54,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 55,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 56,
    "layout" : 7
  }, {
    "firstKey" : 8,
    "secondKey" : 57,
    "layout" : 10
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 13
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 13
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 9,
    "secondKey" : 15,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 16,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 17,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 18,
    "layout" : 8
  }, {
    "firstKey" : 9,
    "secondKey" : 19,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 20,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 21,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 22,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 23,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 24,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 25,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 26,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 27,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 28,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 29,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 30,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 31,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 32,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 33,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 34,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 35,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 36,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 37,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 38,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 39,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 40,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 41,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 42,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 43,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 44,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 45,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 46,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 47,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 48,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 49,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 50,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 51,
    "layout" : 9
  }, {
    "firstKey" : 9,
    "secondKey" : 52,
    "layout" : 10
  }, {
    "firstKey" : 9,
    "secondKey" : 53,
    "layout" : 10
  }, {
    "firstKey" : 9,
    "secondKey" : 54,
    "layout" : 10
  }, {
    "firstKey" : 9,
    "secondKey" : 55,
    "layout" : 10
  }, {
    "firstKey" : 9,
    "secondKey" : 56,
    "layout" : 10
  }, {
    "firstKey" : 9,
    "secondKey" : 57,
    "layout" : 13
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 24,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 25,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 26,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 27,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 28,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 29,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 30,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 31,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 32,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 33,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 34,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 35,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 36,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 37,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 38,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 39,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 40,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 41,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 42,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 43,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 44,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 45,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 46,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 47,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 48,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 49,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 50,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 51,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 52,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 53,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 54,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 55,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 56,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 57,
    "layout" : 9
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 11,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 25,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 26,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 27,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 28,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 29,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 30,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 31,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 32,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 33,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 34,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 35,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 36,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 37,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 38,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 39,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 40,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 41,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 42,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 43,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 44,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 45,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 46,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 47,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 48,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 49,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 50,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 51,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 52,
    "layout" : 7
  }, {
    "firstKey" : 11,
    "secondKey" : 53,
    "layout" : 7
  }, {
    "firstKey" : 11,
    "secondKey" : 54,
    "layout" : 7
  }, {
    "firstKey" : 11,
    "secondKey" : 55,
    "layout" : 7
  }, {
    "firstKey" : 11,
    "secondKey" : 56,
    "layout" : 7
  }, {
    "firstKey" : 11,
    "secondKey" : 57,
    "layout" : 10
  }, {
    "firstKey" : 12,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 12,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 12,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 25,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 26,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 27,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 28,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 29,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 30,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 31,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 32,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 33,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 34,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 35,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 36,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 37,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 38,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 39,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 40,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 41,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 42,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 43,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 44,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 45,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 46,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 47,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 48,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 49,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 50,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 51,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 52,
    "layout" : 7
  }, {
    "firstKey" : 12,
    "secondKey" : 53,
    "layout" : 7
  }, {
    "firstKey" : 12,
    "secondKey" : 54,
    "layout" : 7
  }, {
    "firstKey" : 12,
    "secondKey" : 55,
    "layout" : 7
  }, {
    "firstKey" : 12,
    "secondKey" : 56,
    "layout" : 7
  }, {
    "firstKey" : 12,
    "secondKey" : 57,
    "layout" : 10
  }, {
    "firstKey" : 13,
    "secondKey" : 0,
    "layout" : 14
  }, {
    "firstKey" : 13,
    "secondKey" : 1,
    "layout" : 14
  }, {
    "firstKey" : 13,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 13,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 13,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 13,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 13,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 13,
    "secondKey" : 7,
    "layout" : 8
  }, {
    "firstKey" : 13,
    "secondKey" : 8,
    "layout" : 8
  }, {
    "firstKey" : 13,
    "secondKey" : 9,
    "layout" : 8
  }, {
    "firstKey" : 13,
    "secondKey" : 10,
    "layout" : 8
  }, {
    "firstKey" : 13,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 13,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 13,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 15,
    "layout" : 9
  }, {
    "firstKey" : 13,
    "secondKey" : 16,
    "layout" : 9
  }, {
    "firstKey" : 13,
    "secondKey" : 17,
    "layout" : 9
  }, {
    "firstKey" : 13,
    "secondKey" : 18,
    "layout" : 9
  }, {
    "firstKey" : 13,
    "secondKey" : 19,
    "layout" : 10
  }, {
    "firstKey" : 13,
    "secondKey" : 20,
    "layout" : 10
  }, {
    "firstKey" : 13,
    "secondKey" : 21,
    "layout" : 10
  }, {
    "firstKey" : 13,
    "secondKey" : 22,
    "layout" : 10
  }, {
    "firstKey" : 13,
    "secondKey" : 23,
    "layout" : 10
  }, {
    "firstKey" : 13,
    "secondKey" : 24,
    "layout" : 10
  }, {
    "firstKey" : 13,
    "secondKey" : 25,
    "layout" : 10
  }, {
    "firstKey" : 13,
    "secondKey" : 26,
    "layout" : 10
  }, {
    "firstKey" : 13,
    "secondKey" : 27,
    "layout" : 10
  }, {
    "firstKey" : 13,
    "secondKey" : 28,
    "layout" : 10
  }, {
    "firstKey" : 13,
    "secondKey" : 29,
    "layout" : 10
  }, {
    "firstKey" : 13,
    "secondKey" : 30,
    "layout" : 10
  }, {
    "firstKey" : 13,
    "secondKey" : 31,
    "layout" : 10
  }, {
    "firstKey" : 13,
    "secondKey" : 32,
    "layout" : 10
  }, {
    "firstKey" : 13,
    "secondKey" : 33,
    "layout" : 10
  }, {
    "firstKey" : 13,
    "secondKey" : 34,
    "layout" : 10
  }, {
    "firstKey" : 13,
    "secondKey" : 35,
    "layout" : 10
  }, {
    "firstKey" : 13,
    "secondKey" : 36,
    "layout" : 10
  }, {
    "firstKey" : 13,
    "secondKey" : 37,
    "layout" : 10
  }, {
    "firstKey" : 13,
    "secondKey" : 38,
    "layout" : 10
  }, {
    "firstKey" : 13,
    "secondKey" : 39,
    "layout" : 10
  }, {
    "firstKey" : 13,
    "secondKey" : 40,
    "layout" : 10
  }, {
    "firstKey" : 13,
    "secondKey" : 41,
    "layout" : 10
  }, {
    "firstKey" : 13,
    "secondKey" : 42,
    "layout" : 10
  }, {
    "firstKey" : 13,
    "secondKey" : 43,
    "layout" : 10
  }, {
    "firstKey" : 13,
    "secondKey" : 44,
    "layout" : 10
  }, {
    "firstKey" : 13,
    "secondKey" : 45,
    "layout" : 10
  }, {
    "firstKey" : 13,
    "secondKey" : 46,
    "layout" : 10
  }, {
    "firstKey" : 13,
    "secondKey" : 47,
    "layout" : 10
  }, {
    "firstKey" : 13,
    "secondKey" : 48,
    "layout" : 10
  }, {
    "firstKey" : 13,
    "secondKey" : 49,
    "layout" : 10
  }, {
    "firstKey" : 13,
    "secondKey" : 50,
    "layout" : 10
  }, {
    "firstKey" : 13,
    "secondKey" : 51,
    "layout" : 10
  }, {
    "firstKey" : 13,
    "secondKey" : 52,
    "layout" : 11
  }, {
    "firstKey" : 13,
    "secondKey" : 53,
    "layout" : 11
  }, {
    "firstKey" : 13,
    "secondKey" : 54,
    "layout" : 11
  }, {
    "firstKey" : 13,
    "secondKey" : 55,
    "layout" : 11
  }, {
    "firstKey" : 13,
    "secondKey" : 56,
    "layout" : 11
  }, {
    "firstKey" : 13,
    "secondKey" : 57,
    "layout" : 14
  }, {
    "firstKey" : 14,
    "secondKey" : 0,
    "layout" : 14
  }, {
    "firstKey" : 14,
    "secondKey" : 1,
    "layout" : 14
  }, {
    "firstKey" : 14,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 14,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 14,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 7,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 8,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 9,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 10,
    "layout" : 8
  }, {
    "firstKey" : 14,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 14,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 14,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 15,
    "layout" : 9
  }, {
    "firstKey" : 14,
    "secondKey" : 16,
    "layout" : 9
  }, {
    "firstKey" : 14,
    "secondKey" : 17,
    "layout" : 9
  }, {
    "firstKey" : 14,
    "secondKey" : 18,
    "layout" : 9
  }, {
    "firstKey" : 14,
    "secondKey" : 19,
    "layout" : 10
  }, {
    "firstKey" : 14,
    "secondKey" : 20,
    "layout" : 10
  }, {
    "firstKey" : 14,
    "secondKey" : 21,
    "layout" : 10
  }, {
    "firstKey" : 14,
    "secondKey" : 22,
    "layout" : 10
  }, {
    "firstKey" : 14,
    "secondKey" : 23,
    "layout" : 10
  }, {
    "firstKey" : 14,
    "secondKey" : 24,
    "layout" : 10
  }, {
    "firstKey" : 14,
    "secondKey" : 25,
    "layout" : 10
  }, {
    "firstKey" : 14,
    "secondKey" : 26,
    "layout" : 10
  }, {
    "firstKey" : 14,
    "secondKey" : 27,
    "layout" : 10
  }, {
    "firstKey" : 14,
    "secondKey" : 28,
    "layout" : 10
  }, {
    "firstKey" : 14,
    "secondKey" : 29,
    "layout" : 10
  }, {
    "firstKey" : 14,
    "secondKey" : 30,
    "layout" : 10
  }, {
    "firstKey" : 14,
    "secondKey" : 31,
    "layout" : 10
  }, {
    "firstKey" : 14,
    "secondKey" : 32,
    "layout" : 10
  }, {
    "firstKey" : 14,
    "secondKey" : 33,
    "layout" : 10
  }, {
    "firstKey" : 14,
    "secondKey" : 34,
    "layout" : 10
  }, {
    "firstKey" : 14,
    "secondKey" : 35,
    "layout" : 10
  }, {
    "firstKey" : 14,
    "secondKey" : 36,
    "layout" : 10
  }, {
    "firstKey" : 14,
    "secondKey" : 37,
    "layout" : 10
  }, {
    "firstKey" : 14,
    "secondKey" : 38,
    "layout" : 10
  }, {
    "firstKey" : 14,
    "secondKey" : 39,
    "layout" : 10
  }, {
    "firstKey" : 14,
    "secondKey" : 40,
    "layout" : 10
  }, {
    "firstKey" : 14,
    "secondKey" : 41,
    "layout" : 10
  }, {
    "firstKey" : 14,
    "secondKey" : 42,
    "layout" : 10
  }, {
    "firstKey" : 14,
    "secondKey" : 43,
    "layout" : 10
  }, {
    "firstKey" : 14,
    "secondKey" : 44,
    "layout" : 10
  }, {
    "firstKey" : 14,
    "secondKey" : 45,
    "layout" : 10
  }, {
    "firstKey" : 14,
    "secondKey" : 46,
    "layout" : 10
  }, {
    "firstKey" : 14,
    "secondKey" : 47,
    "layout" : 10
  }, {
    "firstKey" : 14,
    "secondKey" : 48,
    "layout" : 10
  }, {
    "firstKey" : 14,
    "secondKey" : 49,
    "layout" : 10
  }, {
    "firstKey" : 14,
    "secondKey" : 50,
    "layout" : 10
  }, {
    "firstKey" : 14,
    "secondKey" : 51,
    "layout" : 10
  }, {
    "firstKey" : 14,
    "secondKey" : 52,
    "layout" : 11
  }, {
    "firstKey" : 14,
    "secondKey" : 53,
    "layout" : 11
  }, {
    "firstKey" : 14,
    "secondKey" : 54,
    "layout" : 11
  }, {
    "firstKey" : 14,
    "secondKey" : 55,
    "layout" : 11
  }, {
    "firstKey" : 14,
    "secondKey" : 56,
    "layout" : 11
  }, {
    "firstKey" : 14,
    "secondKey" : 57,
    "layout" : 14
  }, {
    "firstKey" : 15,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 15,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 15,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 24,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 25,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 26,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 27,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 28,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 29,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 30,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 31,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 32,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 33,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 34,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 35,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 36,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 37,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 38,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 39,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 40,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 41,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 42,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 43,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 44,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 45,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 46,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 47,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 48,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 49,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 50,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 51,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 52,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 53,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 54,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 55,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 56,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 57,
    "layout" : 9
  }, {
    "firstKey" : 16,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 16,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 16,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 33,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 34,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 35,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 36,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 37,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 38,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 39,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 40,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 41,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 42,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 43,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 44,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 45,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 46,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 47,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 48,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 49,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 50,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 51,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 52,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 53,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 54,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 55,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 56,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 57,
    "layout" : 8
  }, {
    "firstKey" : 17,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 17,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 17,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 25,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 26,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 27,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 28,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 29,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 30,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 31,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 32,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 33,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 34,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 35,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 36,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 37,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 38,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 39,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 40,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 41,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 42,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 43,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 44,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 45,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 46,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 47,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 48,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 49,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 50,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 51,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 52,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 53,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 54,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 55,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 56,
    "layout" : 7
  }, {
    "firstKey" : 17,
    "secondKey" : 57,
    "layout" : 10
  }, {
    "firstKey" : 18,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 18,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 18,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 24,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 25,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 26,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 27,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 28,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 29,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 30,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 31,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 32,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 33,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 34,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 35,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 36,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 37,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 38,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 39,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 40,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 41,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 42,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 43,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 44,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 45,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 46,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 47,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 48,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 49,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 50,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 51,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 52,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 53,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 54,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 55,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 56,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 57,
    "layout" : 9
  }, {
    "firstKey" : 19,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 19,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 19,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 33,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 34,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 35,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 36,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 37,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 38,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 39,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 40,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 41,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 42,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 43,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 44,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 45,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 46,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 47,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 48,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 49,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 50,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 51,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 52,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 53,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 54,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 55,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 56,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 57,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 20,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 33,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 34,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 35,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 36,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 37,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 38,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 39,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 40,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 41,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 42,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 43,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 44,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 45,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 46,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 47,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 48,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 49,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 50,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 51,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 52,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 53,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 54,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 55,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 56,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 57,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 21,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 32,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 33,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 34,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 35,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 36,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 37,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 38,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 39,
    "layout" : 3
  }, {
    "firstKey" : 21,
    "secondKey" : 40,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 41,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 42,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 43,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 44,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 45,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 46,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 47,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 48,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 49,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 50,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 51,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 52,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 53,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 54,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 55,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 56,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 57,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 22,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 22,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 22,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 22,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 22,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 22,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 22,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 22,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 22,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 22,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 22,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 22,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 22,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 22,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 22,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 22,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 22,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 22,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 22,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 22,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 22,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 22,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 33,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 34,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 35,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 36,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 37,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 38,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 39,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 40,
    "layout" : 5
  }, {
    "firstKey" : 22,
    "secondKey" : 41,
    "layout" : 5
  }, {
    "firstKey" : 22,
    "secondKey" : 42,
    "layout" : 5
  }, {
    "firstKey" : 22,
    "secondKey" : 43,
    "layout" : 5
  }, {
    "firstKey" : 22,
    "secondKey" : 44,
    "layout" : 5
  }, {
    "firstKey" : 22,
    "secondKey" : 45,
    "layout" : 5
  }, {
    "firstKey" : 22,
    "secondKey" : 46,
    "layout" : 5
  }, {
    "firstKey" : 22,
    "secondKey" : 47,
    "layout" : 5
  }, {
    "firstKey" : 22,
    "secondKey" : 48,
    "layout" : 5
  }, {
    "firstKey" : 22,
    "secondKey" : 49,
    "layout" : 5
  }, {
    "firstKey" : 22,
    "secondKey" : 50,
    "layout" : 5
  }, {
    "firstKey" : 22,
    "secondKey" : 51,
    "layout" : 5
  }, {
    "firstKey" : 22,
    "secondKey" : 52,
    "layout" : 6
  }, {
    "firstKey" : 22,
    "secondKey" : 53,
    "layout" : 6
  }, {
    "firstKey" : 22,
    "secondKey" : 54,
    "layout" : 6
  }, {
    "firstKey" : 22,
    "secondKey" : 55,
    "layout" : 6
  }, {
    "firstKey" : 22,
    "secondKey" : 56,
    "layout" : 6
  }, {
    "firstKey" : 22,
    "secondKey" : 57,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 23,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 33,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 34,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 35,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 36,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 37,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 38,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 39,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 40,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 41,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 42,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 43,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 44,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 45,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 46,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 47,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 48,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 49,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 50,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 51,
    "layout" : 5
  }, {
    "firstKey" : 23,
    "secondKey" : 52,
    "layout" : 6
  }, {
    "firstKey" : 23,
    "secondKey" : 53,
    "layout" : 6
  }, {
    "firstKey" : 23,
    "secondKey" : 54,
    "layout" : 6
  }, {
    "firstKey" : 23,
    "secondKey" : 55,
    "layout" : 6
  }, {
    "firstKey" : 23,
    "secondKey" : 56,
    "layout" : 6
  }, {
    "firstKey" : 23,
    "secondKey" : 57,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 24,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 24,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 24,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 33,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 34,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 35,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 36,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 37,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 38,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 39,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 40,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 41,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 42,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 43,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 44,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 45,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 46,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 47,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 48,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 49,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 50,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 51,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 52,
    "layout" : 6
  }, {
    "firstKey" : 24,
    "secondKey" : 53,
    "layout" : 6
  }, {
    "firstKey" : 24,
    "secondKey" : 54,
    "layout" : 6
  }, {
    "firstKey" : 24,
    "secondKey" : 55,
    "layout" : 6
  }, {
    "firstKey" : 24,
    "secondKey" : 56,
    "layout" : 6
  }, {
    "firstKey" : 24,
    "secondKey" : 57,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 25,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 25,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 25,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 25,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 25,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 25,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 25,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 25,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 25,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 25,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 25,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 25,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 25,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 25,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 25,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 25,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 25,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 25,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 25,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 25,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 26,
    "layout" : 0
  }, {
    "firstKey" : 25,
    "secondKey" : 27,
    "layout" : 0
  }, {
    "firstKey" : 25,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 25,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 25,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 25,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 25,
    "secondKey" : 32,
    "layout" : 3
  }, {
    "firstKey" : 25,
    "secondKey" : 33,
    "layout" : 3
  }, {
    "firstKey" : 25,
    "secondKey" : 34,
    "layout" : 3
  }, {
    "firstKey" : 25,
    "secondKey" : 35,
    "layout" : 3
  }, {
    "firstKey" : 25,
    "secondKey" : 36,
    "layout" : 3
  }, {
    "firstKey" : 25,
    "secondKey" : 37,
    "layout" : 3
  }, {
    "firstKey" : 25,
    "secondKey" : 38,
    "layout" : 3
  }, {
    "firstKey" : 25,
    "secondKey" : 39,
    "layout" : 3
  }, {
    "firstKey" : 25,
    "secondKey" : 40,
    "layout" : 5
  }, {
    "firstKey" : 25,
    "secondKey" : 41,
    "layout" : 5
  }, {
    "firstKey" : 25,
    "secondKey" : 42,
    "layout" : 5
  }, {
    "firstKey" : 25,
    "secondKey" : 43,
    "layout" : 5
  }, {
    "firstKey" : 25,
    "secondKey" : 44,
    "layout" : 5
  }, {
    "firstKey" : 25,
    "secondKey" : 45,
    "layout" : 5
  }, {
    "firstKey" : 25,
    "secondKey" : 46,
    "layout" : 5
  }, {
    "firstKey" : 25,
    "secondKey" : 47,
    "layout" : 5
  }, {
    "firstKey" : 25,
    "secondKey" : 48,
    "layout" : 5
  }, {
    "firstKey" : 25,
    "secondKey" : 49,
    "layout" : 5
  }, {
    "firstKey" : 25,
    "secondKey" : 50,
    "layout" : 5
  }, {
    "firstKey" : 25,
    "secondKey" : 51,
    "layout" : 5
  }, {
    "firstKey" : 25,
    "secondKey" : 52,
    "layout" : 6
  }, {
    "firstKey" : 25,
    "secondKey" : 53,
    "layout" : 6
  }, {
    "firstKey" : 25,
    "secondKey" : 54,
    "layout" : 6
  }, {
    "firstKey" : 25,
    "secondKey" : 55,
    "layout" : 6
  }, {
    "firstKey" : 25,
    "secondKey" : 56,
    "layout" : 6
  }, {
    "firstKey" : 25,
    "secondKey" : 57,
    "layout" : 9
  }, {
    "firstKey" : 26,
    "secondKey" : 0,
    "layout" : 11
  }, {
    "firstKey" : 26,
    "secondKey" : 1,
    "layout" : 11
  }, {
    "firstKey" : 26,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 26,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 26,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 26,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 26,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 26,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 26,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 26,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 26,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 26,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 26,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 26,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 26,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 26,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 26,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 26,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 26,
    "secondKey" : 18,
    "layout" : 7
  }, {
    "firstKey" : 26,
    "secondKey" : 19,
    "layout" : 7
  }, {
    "firstKey" : 26,
    "secondKey" : 20,
    "layout" : 7
  }, {
    "firstKey" : 26,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 26,
    "secondKey" : 28,
    "layout" : 5
  }, {
    "firstKey" : 26,
    "secondKey" : 29,
    "layout" : 5
  }, {
    "firstKey" : 26,
    "secondKey" : 30,
    "layout" : 5
  }, {
    "firstKey" : 26,
    "secondKey" : 31,
    "layout" : 5
  }, {
    "firstKey" : 26,
    "secondKey" : 32,
    "layout" : 5
  }, {
    "firstKey" : 26,
    "secondKey" : 33,
    "layout" : 5
  }, {
    "firstKey" : 26,
    "secondKey" : 34,
    "layout" : 5
  }, {
    "firstKey" : 26,
    "secondKey" : 35,
    "layout" : 5
  }, {
    "firstKey" : 26,
    "secondKey" : 36,
    "layout" : 5
  }, {
    "firstKey" : 26,
    "secondKey" : 37,
    "layout" : 5
  }, {
    "firstKey" : 26,
    "secondKey" : 38,
    "layout" : 5
  }, {
    "firstKey" : 26,
    "secondKey" : 39,
    "layout" : 5
  }, {
    "firstKey" : 26,
    "secondKey" : 40,
    "layout" : 7
  }, {
    "firstKey" : 26,
    "secondKey" : 41,
    "layout" : 7
  }, {
    "firstKey" : 26,
    "secondKey" : 42,
    "layout" : 7
  }, {
    "firstKey" : 26,
    "secondKey" : 43,
    "layout" : 7
  }, {
    "firstKey" : 26,
    "secondKey" : 44,
    "layout" : 7
  }, {
    "firstKey" : 26,
    "secondKey" : 45,
    "layout" : 7
  }, {
    "firstKey" : 26,
    "secondKey" : 46,
    "layout" : 7
  }, {
    "firstKey" : 26,
    "secondKey" : 47,
    "layout" : 7
  }, {
    "firstKey" : 26,
    "secondKey" : 48,
    "layout" : 7
  }, {
    "firstKey" : 26,
    "secondKey" : 49,
    "layout" : 7
  }, {
    "firstKey" : 26,
    "secondKey" : 50,
    "layout" : 7
  }, {
    "firstKey" : 26,
    "secondKey" : 51,
    "layout" : 7
  }, {
    "firstKey" : 26,
    "secondKey" : 52,
    "layout" : 8
  }, {
    "firstKey" : 26,
    "secondKey" : 53,
    "layout" : 8
  }, {
    "firstKey" : 26,
    "secondKey" : 54,
    "layout" : 8
  }, {
    "firstKey" : 26,
    "secondKey" : 55,
    "layout" : 8
  }, {
    "firstKey" : 26,
    "secondKey" : 56,
    "layout" : 8
  }, {
    "firstKey" : 26,
    "secondKey" : 57,
    "layout" : 11
  }, {
    "firstKey" : 27,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 27,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 27,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 27,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 27,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 27,
    "secondKey" : 24,
    "layout" : 5
  }, {
    "firstKey" : 27,
    "secondKey" : 25,
    "layout" : 1
  }, {
    "firstKey" : 27,
    "secondKey" : 26,
    "layout" : 1
  }, {
    "firstKey" : 27,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 27,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 27,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 27,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 27,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 27,
    "secondKey" : 33,
    "layout" : 4
  }, {
    "firstKey" : 27,
    "secondKey" : 34,
    "layout" : 4
  }, {
    "firstKey" : 27,
    "secondKey" : 35,
    "layout" : 4
  }, {
    "firstKey" : 27,
    "secondKey" : 36,
    "layout" : 4
  }, {
    "firstKey" : 27,
    "secondKey" : 37,
    "layout" : 4
  }, {
    "firstKey" : 27,
    "secondKey" : 38,
    "layout" : 4
  }, {
    "firstKey" : 27,
    "secondKey" : 39,
    "layout" : 4
  }, {
    "firstKey" : 27,
    "secondKey" : 40,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 41,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 42,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 43,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 44,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 45,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 46,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 47,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 48,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 49,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 50,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 51,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 52,
    "layout" : 7
  }, {
    "firstKey" : 27,
    "secondKey" : 53,
    "layout" : 7
  }, {
    "firstKey" : 27,
    "secondKey" : 54,
    "layout" : 7
  }, {
    "firstKey" : 27,
    "secondKey" : 55,
    "layout" : 7
  }, {
    "firstKey" : 27,
    "secondKey" : 56,
    "layout" : 7
  }, {
    "firstKey" : 27,
    "secondKey" : 57,
    "layout" : 10
  }, {
    "firstKey" : 28,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 28,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 28,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 28,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 28,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 28,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 28,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 37,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 28,
    "secondKey" : 40,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 41,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 42,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 43,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 44,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 45,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 46,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 47,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 48,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 49,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 50,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 51,
    "layout" : 4
  }, {
    "firstKey" : 28,
    "secondKey" : 52,
    "layout" : 5
  }, {
    "firstKey" : 28,
    "secondKey" : 53,
    "layout" : 5
  }, {
    "firstKey" : 28,
    "secondKey" : 54,
    "layout" : 5
  }, {
    "firstKey" : 28,
    "secondKey" : 55,
    "layout" : 5
  }, {
    "firstKey" : 28,
    "secondKey" : 56,
    "layout" : 5
  }, {
    "firstKey" : 28,
    "secondKey" : 57,
    "layout" : 8
  }, {
    "firstKey" : 29,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 29,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 29,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 24,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 29,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 29,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 29,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 29,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 29,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 29,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 29,
    "secondKey" : 33,
    "layout" : 4
  }, {
    "firstKey" : 29,
    "secondKey" : 34,
    "layout" : 4
  }, {
    "firstKey" : 29,
    "secondKey" : 35,
    "layout" : 4
  }, {
    "firstKey" : 29,
    "secondKey" : 36,
    "layout" : 4
  }, {
    "firstKey" : 29,
    "secondKey" : 37,
    "layout" : 4
  }, {
    "firstKey" : 29,
    "secondKey" : 38,
    "layout" : 4
  }, {
    "firstKey" : 29,
    "secondKey" : 39,
    "layout" : 4
  }, {
    "firstKey" : 29,
    "secondKey" : 40,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 41,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 42,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 43,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 44,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 45,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 46,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 47,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 48,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 49,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 50,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 51,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 52,
    "layout" : 7
  }, {
    "firstKey" : 29,
    "secondKey" : 53,
    "layout" : 7
  }, {
    "firstKey" : 29,
    "secondKey" : 54,
    "layout" : 7
  }, {
    "firstKey" : 29,
    "secondKey" : 55,
    "layout" : 7
  }, {
    "firstKey" : 29,
    "secondKey" : 56,
    "layout" : 7
  }, {
    "firstKey" : 29,
    "secondKey" : 57,
    "layout" : 10
  }, {
    "firstKey" : 30,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 30,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 30,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 30,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 30,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 30,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 30,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 30,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 30,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 30,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 30,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 30,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 30,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 30,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 30,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 30,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 30,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 30,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 30,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 30,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 30,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 30,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 30,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 30,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 30,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 31,
    "layout" : 1
  }, {
    "firstKey" : 30,
    "secondKey" : 32,
    "layout" : 1
  }, {
    "firstKey" : 30,
    "secondKey" : 33,
    "layout" : 1
  }, {
    "firstKey" : 30,
    "secondKey" : 34,
    "layout" : 1
  }, {
    "firstKey" : 30,
    "secondKey" : 35,
    "layout" : 1
  }, {
    "firstKey" : 30,
    "secondKey" : 36,
    "layout" : 1
  }, {
    "firstKey" : 30,
    "secondKey" : 37,
    "layout" : 1
  }, {
    "firstKey" : 30,
    "secondKey" : 38,
    "layout" : 1
  }, {
    "firstKey" : 30,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 30,
    "secondKey" : 40,
    "layout" : 4
  }, {
    "firstKey" : 30,
    "secondKey" : 41,
    "layout" : 4
  }, {
    "firstKey" : 30,
    "secondKey" : 42,
    "layout" : 4
  }, {
    "firstKey" : 30,
    "secondKey" : 43,
    "layout" : 4
  }, {
    "firstKey" : 30,
    "secondKey" : 44,
    "layout" : 4
  }, {
    "firstKey" : 30,
    "secondKey" : 45,
    "layout" : 4
  }, {
    "firstKey" : 30,
    "secondKey" : 46,
    "layout" : 4
  }, {
    "firstKey" : 30,
    "secondKey" : 47,
    "layout" : 4
  }, {
    "firstKey" : 30,
    "secondKey" : 48,
    "layout" : 4
  }, {
    "firstKey" : 30,
    "secondKey" : 49,
    "layout" : 4
  }, {
    "firstKey" : 30,
    "secondKey" : 50,
    "layout" : 4
  }, {
    "firstKey" : 30,
    "secondKey" : 51,
    "layout" : 4
  }, {
    "firstKey" : 30,
    "secondKey" : 52,
    "layout" : 5
  }, {
    "firstKey" : 30,
    "secondKey" : 53,
    "layout" : 5
  }, {
    "firstKey" : 30,
    "secondKey" : 54,
    "layout" : 5
  }, {
    "firstKey" : 30,
    "secondKey" : 55,
    "layout" : 5
  }, {
    "firstKey" : 30,
    "secondKey" : 56,
    "layout" : 5
  }, {
    "firstKey" : 30,
    "secondKey" : 57,
    "layout" : 8
  }, {
    "firstKey" : 31,
    "secondKey" : 0,
    "layout" : 13
  }, {
    "firstKey" : 31,
    "secondKey" : 1,
    "layout" : 13
  }, {
    "firstKey" : 31,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 4,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 5,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 6,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 7,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 8,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 9,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 10,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 11,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 12,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 13,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 14,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 15,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 16,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 17,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 18,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 19,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 20,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 21,
    "layout" : 8
  }, {
    "firstKey" : 31,
    "secondKey" : 22,
    "layout" : 8
  }, {
    "firstKey" : 31,
    "secondKey" : 23,
    "layout" : 8
  }, {
    "firstKey" : 31,
    "secondKey" : 24,
    "layout" : 8
  }, {
    "firstKey" : 31,
    "secondKey" : 25,
    "layout" : 7
  }, {
    "firstKey" : 31,
    "secondKey" : 26,
    "layout" : 7
  }, {
    "firstKey" : 31,
    "secondKey" : 27,
    "layout" : 7
  }, {
    "firstKey" : 31,
    "secondKey" : 28,
    "layout" : 7
  }, {
    "firstKey" : 31,
    "secondKey" : 29,
    "layout" : 7
  }, {
    "firstKey" : 31,
    "secondKey" : 30,
    "layout" : 6
  }, {
    "firstKey" : 31,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 31,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 31,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 31,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 31,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 31,
    "secondKey" : 37,
    "layout" : 4
  }, {
    "firstKey" : 31,
    "secondKey" : 38,
    "layout" : 4
  }, {
    "firstKey" : 31,
    "secondKey" : 39,
    "layout" : 7
  }, {
    "firstKey" : 31,
    "secondKey" : 40,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 41,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 42,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 43,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 44,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 45,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 46,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 47,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 48,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 49,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 50,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 51,
    "layout" : 9
  }, {
    "firstKey" : 31,
    "secondKey" : 52,
    "layout" : 10
  }, {
    "firstKey" : 31,
    "secondKey" : 53,
    "layout" : 10
  }, {
    "firstKey" : 31,
    "secondKey" : 54,
    "layout" : 10
  }, {
    "firstKey" : 31,
    "secondKey" : 55,
    "layout" : 10
  }, {
    "firstKey" : 31,
    "secondKey" : 56,
    "layout" : 10
  }, {
    "firstKey" : 31,
    "secondKey" : 57,
    "layout" : 13
  }, {
    "firstKey" : 32,
    "secondKey" : 0,
    "layout" : 18
  }, {
    "firstKey" : 32,
    "secondKey" : 1,
    "layout" : 18
  }, {
    "firstKey" : 32,
    "secondKey" : 2,
    "layout" : 14
  }, {
    "firstKey" : 32,
    "secondKey" : 3,
    "layout" : 14
  }, {
    "firstKey" : 32,
    "secondKey" : 4,
    "layout" : 14
  }, {
    "firstKey" : 32,
    "secondKey" : 5,
    "layout" : 14
  }, {
    "firstKey" : 32,
    "secondKey" : 6,
    "layout" : 14
  }, {
    "firstKey" : 32,
    "secondKey" : 7,
    "layout" : 14
  }, {
    "firstKey" : 32,
    "secondKey" : 8,
    "layout" : 14
  }, {
    "firstKey" : 32,
    "secondKey" : 9,
    "layout" : 14
  }, {
    "firstKey" : 32,
    "secondKey" : 10,
    "layout" : 14
  }, {
    "firstKey" : 32,
    "secondKey" : 11,
    "layout" : 14
  }, {
    "firstKey" : 32,
    "secondKey" : 12,
    "layout" : 14
  }, {
    "firstKey" : 32,
    "secondKey" : 13,
    "layout" : 14
  }, {
    "firstKey" : 32,
    "secondKey" : 14,
    "layout" : 14
  }, {
    "firstKey" : 32,
    "secondKey" : 15,
    "layout" : 14
  }, {
    "firstKey" : 32,
    "secondKey" : 16,
    "layout" : 14
  }, {
    "firstKey" : 32,
    "secondKey" : 17,
    "layout" : 14
  }, {
    "firstKey" : 32,
    "secondKey" : 18,
    "layout" : 14
  }, {
    "firstKey" : 32,
    "secondKey" : 19,
    "layout" : 14
  }, {
    "firstKey" : 32,
    "secondKey" : 20,
    "layout" : 14
  }, {
    "firstKey" : 32,
    "secondKey" : 21,
    "layout" : 13
  }, {
    "firstKey" : 32,
    "secondKey" : 22,
    "layout" : 13
  }, {
    "firstKey" : 32,
    "secondKey" : 23,
    "layout" : 13
  }, {
    "firstKey" : 32,
    "secondKey" : 24,
    "layout" : 13
  }, {
    "firstKey" : 32,
    "secondKey" : 25,
    "layout" : 12
  }, {
    "firstKey" : 32,
    "secondKey" : 26,
    "layout" : 12
  }, {
    "firstKey" : 32,
    "secondKey" : 27,
    "layout" : 12
  }, {
    "firstKey" : 32,
    "secondKey" : 28,
    "layout" : 12
  }, {
    "firstKey" : 32,
    "secondKey" : 29,
    "layout" : 12
  }, {
    "firstKey" : 32,
    "secondKey" : 30,
    "layout" : 11
  }, {
    "firstKey" : 32,
    "secondKey" : 31,
    "layout" : 7
  }, {
    "firstKey" : 32,
    "secondKey" : 33,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 34,
    "layout" : 6
  }, {
    "firstKey" : 32,
    "secondKey" : 35,
    "layout" : 7
  }, {
    "firstKey" : 32,
    "secondKey" : 36,
    "layout" : 7
  }, {
    "firstKey" : 32,
    "secondKey" : 37,
    "layout" : 9
  }, {
    "firstKey" : 32,
    "secondKey" : 38,
    "layout" : 9
  }, {
    "firstKey" : 32,
    "secondKey" : 39,
    "layout" : 12
  }, {
    "firstKey" : 32,
    "secondKey" : 40,
    "layout" : 14
  }, {
    "firstKey" : 32,
    "secondKey" : 41,
    "layout" : 14
  }, {
    "firstKey" : 32,
    "secondKey" : 42,
    "layout" : 14
  }, {
    "firstKey" : 32,
    "secondKey" : 43,
    "layout" : 14
  }, {
    "firstKey" : 32,
    "secondKey" : 44,
    "layout" : 14
  }, {
    "firstKey" : 32,
    "secondKey" : 45,
    "layout" : 14
  }, {
    "firstKey" : 32,
    "secondKey" : 46,
    "layout" : 14
  }, {
    "firstKey" : 32,
    "secondKey" : 47,
    "layout" : 14
  }, {
    "firstKey" : 32,
    "secondKey" : 48,
    "layout" : 14
  }, {
    "firstKey" : 32,
    "secondKey" : 49,
    "layout" : 14
  }, {
    "firstKey" : 32,
    "secondKey" : 50,
    "layout" : 14
  }, {
    "firstKey" : 32,
    "secondKey" : 51,
    "layout" : 14
  }, {
    "firstKey" : 32,
    "secondKey" : 52,
    "layout" : 15
  }, {
    "firstKey" : 32,
    "secondKey" : 53,
    "layout" : 15
  }, {
    "firstKey" : 32,
    "secondKey" : 54,
    "layout" : 15
  }, {
    "firstKey" : 32,
    "secondKey" : 55,
    "layout" : 15
  }, {
    "firstKey" : 32,
    "secondKey" : 56,
    "layout" : 15
  }, {
    "firstKey" : 32,
    "secondKey" : 57,
    "layout" : 18
  }, {
    "firstKey" : 33,
    "secondKey" : 0,
    "layout" : 15
  }, {
    "firstKey" : 33,
    "secondKey" : 1,
    "layout" : 15
  }, {
    "firstKey" : 33,
    "secondKey" : 2,
    "layout" : 11
  }, {
    "firstKey" : 33,
    "secondKey" : 3,
    "layout" : 11
  }, {
    "firstKey" : 33,
    "secondKey" : 4,
    "layout" : 11
  }, {
    "firstKey" : 33,
    "secondKey" : 5,
    "layout" : 11
  }, {
    "firstKey" : 33,
    "secondKey" : 6,
    "layout" : 11
  }, {
    "firstKey" : 33,
    "secondKey" : 7,
    "layout" : 11
  }, {
    "firstKey" : 33,
    "secondKey" : 8,
    "layout" : 11
  }, {
    "firstKey" : 33,
    "secondKey" : 9,
    "layout" : 11
  }, {
    "firstKey" : 33,
    "secondKey" : 10,
    "layout" : 11
  }, {
    "firstKey" : 33,
    "secondKey" : 11,
    "layout" : 11
  }, {
    "firstKey" : 33,
    "secondKey" : 12,
    "layout" : 11
  }, {
    "firstKey" : 33,
    "secondKey" : 13,
    "layout" : 11
  }, {
    "firstKey" : 33,
    "secondKey" : 14,
    "layout" : 11
  }, {
    "firstKey" : 33,
    "secondKey" : 15,
    "layout" : 11
  }, {
    "firstKey" : 33,
    "secondKey" : 16,
    "layout" : 11
  }, {
    "firstKey" : 33,
    "secondKey" : 17,
    "layout" : 11
  }, {
    "firstKey" : 33,
    "secondKey" : 18,
    "layout" : 11
  }, {
    "firstKey" : 33,
    "secondKey" : 19,
    "layout" : 11
  }, {
    "firstKey" : 33,
    "secondKey" : 20,
    "layout" : 11
  }, {
    "firstKey" : 33,
    "secondKey" : 21,
    "layout" : 10
  }, {
    "firstKey" : 33,
    "secondKey" : 22,
    "layout" : 10
  }, {
    "firstKey" : 33,
    "secondKey" : 23,
    "layout" : 10
  }, {
    "firstKey" : 33,
    "secondKey" : 24,
    "layout" : 10
  }, {
    "firstKey" : 33,
    "secondKey" : 25,
    "layout" : 9
  }, {
    "firstKey" : 33,
    "secondKey" : 26,
    "layout" : 9
  }, {
    "firstKey" : 33,
    "secondKey" : 27,
    "layout" : 9
  }, {
    "firstKey" : 33,
    "secondKey" : 28,
    "layout" : 9
  }, {
    "firstKey" : 33,
    "secondKey" : 29,
    "layout" : 9
  }, {
    "firstKey" : 33,
    "secondKey" : 30,
    "layout" : 8
  }, {
    "firstKey" : 33,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 33,
    "secondKey" : 32,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 34,
    "layout" : 3
  }, {
    "firstKey" : 33,
    "secondKey" : 35,
    "layout" : 4
  }, {
    "firstKey" : 33,
    "secondKey" : 36,
    "layout" : 4
  }, {
    "firstKey" : 33,
    "secondKey" : 37,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 38,
    "layout" : 6
  }, {
    "firstKey" : 33,
    "secondKey" : 39,
    "layout" : 9
  }, {
    "firstKey" : 33,
    "secondKey" : 40,
    "layout" : 11
  }, {
    "firstKey" : 33,
    "secondKey" : 41,
    "layout" : 11
  }, {
    "firstKey" : 33,
    "secondKey" : 42,
    "layout" : 11
  }, {
    "firstKey" : 33,
    "secondKey" : 43,
    "layout" : 11
  }, {
    "firstKey" : 33,
    "secondKey" : 44,
    "layout" : 11
  }, {
    "firstKey" : 33,
    "secondKey" : 45,
    "layout" : 11
  }, {
    "firstKey" : 33,
    "secondKey" : 46,
    "layout" : 11
  }, {
    "firstKey" : 33,
    "secondKey" : 47,
    "layout" : 11
  }, {
    "firstKey" : 33,
    "secondKey" : 48,
    "layout" : 11
  }, {
    "firstKey" : 33,
    "secondKey" : 49,
    "layout" : 11
  }, {
    "firstKey" : 33,
    "secondKey" : 50,
    "layout" : 11
  }, {
    "firstKey" : 33,
    "secondKey" : 51,
    "layout" : 11
  }, {
    "firstKey" : 33,
    "secondKey" : 52,
    "layout" : 12
  }, {
    "firstKey" : 33,
    "secondKey" : 53,
    "layout" : 12
  }, {
    "firstKey" : 33,
    "secondKey" : 54,
    "layout" : 12
  }, {
    "firstKey" : 33,
    "secondKey" : 55,
    "layout" : 12
  }, {
    "firstKey" : 33,
    "secondKey" : 56,
    "layout" : 12
  }, {
    "firstKey" : 33,
    "secondKey" : 57,
    "layout" : 15
  }, {
    "firstKey" : 34,
    "secondKey" : 0,
    "layout" : 15
  }, {
    "firstKey" : 34,
    "secondKey" : 1,
    "layout" : 15
  }, {
    "firstKey" : 34,
    "secondKey" : 2,
    "layout" : 11
  }, {
    "firstKey" : 34,
    "secondKey" : 3,
    "layout" : 11
  }, {
    "firstKey" : 34,
    "secondKey" : 4,
    "layout" : 11
  }, {
    "firstKey" : 34,
    "secondKey" : 5,
    "layout" : 11
  }, {
    "firstKey" : 34,
    "secondKey" : 6,
    "layout" : 11
  }, {
    "firstKey" : 34,
    "secondKey" : 7,
    "layout" : 11
  }, {
    "firstKey" : 34,
    "secondKey" : 8,
    "layout" : 11
  }, {
    "firstKey" : 34,
    "secondKey" : 9,
    "layout" : 11
  }, {
    "firstKey" : 34,
    "secondKey" : 10,
    "layout" : 11
  }, {
    "firstKey" : 34,
    "secondKey" : 11,
    "layout" : 11
  }, {
    "firstKey" : 34,
    "secondKey" : 12,
    "layout" : 11
  }, {
    "firstKey" : 34,
    "secondKey" : 13,
    "layout" : 11
  }, {
    "firstKey" : 34,
    "secondKey" : 14,
    "layout" : 11
  }, {
    "firstKey" : 34,
    "secondKey" : 15,
    "layout" : 11
  }, {
    "firstKey" : 34,
    "secondKey" : 16,
    "layout" : 11
  }, {
    "firstKey" : 34,
    "secondKey" : 17,
    "layout" : 11
  }, {
    "firstKey" : 34,
    "secondKey" : 18,
    "layout" : 11
  }, {
    "firstKey" : 34,
    "secondKey" : 19,
    "layout" : 11
  }, {
    "firstKey" : 34,
    "secondKey" : 20,
    "layout" : 11
  }, {
    "firstKey" : 34,
    "secondKey" : 21,
    "layout" : 10
  }, {
    "firstKey" : 34,
    "secondKey" : 22,
    "layout" : 10
  }, {
    "firstKey" : 34,
    "secondKey" : 23,
    "layout" : 10
  }, {
    "firstKey" : 34,
    "secondKey" : 24,
    "layout" : 10
  }, {
    "firstKey" : 34,
    "secondKey" : 25,
    "layout" : 9
  }, {
    "firstKey" : 34,
    "secondKey" : 26,
    "layout" : 9
  }, {
    "firstKey" : 34,
    "secondKey" : 27,
    "layout" : 9
  }, {
    "firstKey" : 34,
    "secondKey" : 28,
    "layout" : 9
  }, {
    "firstKey" : 34,
    "secondKey" : 29,
    "layout" : 9
  }, {
    "firstKey" : 34,
    "secondKey" : 30,
    "layout" : 8
  }, {
    "firstKey" : 34,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 34,
    "secondKey" : 32,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 33,
    "layout" : 3
  }, {
    "firstKey" : 34,
    "secondKey" : 35,
    "layout" : 4
  }, {
    "firstKey" : 34,
    "secondKey" : 36,
    "layout" : 4
  }, {
    "firstKey" : 34,
    "secondKey" : 37,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 38,
    "layout" : 6
  }, {
    "firstKey" : 34,
    "secondKey" : 39,
    "layout" : 9
  }, {
    "firstKey" : 34,
    "secondKey" : 40,
    "layout" : 11
  }, {
    "firstKey" : 34,
    "secondKey" : 41,
    "layout" : 11
  }, {
    "firstKey" : 34,
    "secondKey" : 42,
    "layout" : 11
  }, {
    "firstKey" : 34,
    "secondKey" : 43,
    "layout" : 11
  }, {
    "firstKey" : 34,
    "secondKey" : 44,
    "layout" : 11
  }, {
    "firstKey" : 34,
    "secondKey" : 45,
    "layout" : 11
  }, {
    "firstKey" : 34,
    "secondKey" : 46,
    "layout" : 11
  }, {
    "firstKey" : 34,
    "secondKey" : 47,
    "layout" : 11
  }, {
    "firstKey" : 34,
    "secondKey" : 48,
    "layout" : 11
  }, {
    "firstKey" : 34,
    "secondKey" : 49,
    "layout" : 11
  }, {
    "firstKey" : 34,
    "secondKey" : 50,
    "layout" : 11
  }, {
    "firstKey" : 34,
    "secondKey" : 51,
    "layout" : 11
  }, {
    "firstKey" : 34,
    "secondKey" : 52,
    "layout" : 12
  }, {
    "firstKey" : 34,
    "secondKey" : 53,
    "layout" : 12
  }, {
    "firstKey" : 34,
    "secondKey" : 54,
    "layout" : 12
  }, {
    "firstKey" : 34,
    "secondKey" : 55,
    "layout" : 12
  }, {
    "firstKey" : 34,
    "secondKey" : 56,
    "layout" : 12
  }, {
    "firstKey" : 34,
    "secondKey" : 57,
    "layout" : 15
  }, {
    "firstKey" : 35,
    "secondKey" : 0,
    "layout" : 15
  }, {
    "firstKey" : 35,
    "secondKey" : 1,
    "layout" : 15
  }, {
    "firstKey" : 35,
    "secondKey" : 2,
    "layout" : 11
  }, {
    "firstKey" : 35,
    "secondKey" : 3,
    "layout" : 11
  }, {
    "firstKey" : 35,
    "secondKey" : 4,
    "layout" : 11
  }, {
    "firstKey" : 35,
    "secondKey" : 5,
    "layout" : 11
  }, {
    "firstKey" : 35,
    "secondKey" : 6,
    "layout" : 11
  }, {
    "firstKey" : 35,
    "secondKey" : 7,
    "layout" : 11
  }, {
    "firstKey" : 35,
    "secondKey" : 8,
    "layout" : 11
  }, {
    "firstKey" : 35,
    "secondKey" : 9,
    "layout" : 11
  }, {
    "firstKey" : 35,
    "secondKey" : 10,
    "layout" : 11
  }, {
    "firstKey" : 35,
    "secondKey" : 11,
    "layout" : 11
  }, {
    "firstKey" : 35,
    "secondKey" : 12,
    "layout" : 11
  }, {
    "firstKey" : 35,
    "secondKey" : 13,
    "layout" : 11
  }, {
    "firstKey" : 35,
    "secondKey" : 14,
    "layout" : 11
  }, {
    "firstKey" : 35,
    "secondKey" : 15,
    "layout" : 11
  }, {
    "firstKey" : 35,
    "secondKey" : 16,
    "layout" : 11
  }, {
    "firstKey" : 35,
    "secondKey" : 17,
    "layout" : 11
  }, {
    "firstKey" : 35,
    "secondKey" : 18,
    "layout" : 11
  }, {
    "firstKey" : 35,
    "secondKey" : 19,
    "layout" : 11
  }, {
    "firstKey" : 35,
    "secondKey" : 20,
    "layout" : 11
  }, {
    "firstKey" : 35,
    "secondKey" : 21,
    "layout" : 10
  }, {
    "firstKey" : 35,
    "secondKey" : 22,
    "layout" : 10
  }, {
    "firstKey" : 35,
    "secondKey" : 23,
    "layout" : 10
  }, {
    "firstKey" : 35,
    "secondKey" : 24,
    "layout" : 10
  }, {
    "firstKey" : 35,
    "secondKey" : 25,
    "layout" : 9
  }, {
    "firstKey" : 35,
    "secondKey" : 26,
    "layout" : 9
  }, {
    "firstKey" : 35,
    "secondKey" : 27,
    "layout" : 9
  }, {
    "firstKey" : 35,
    "secondKey" : 28,
    "layout" : 9
  }, {
    "firstKey" : 35,
    "secondKey" : 29,
    "layout" : 9
  }, {
    "firstKey" : 35,
    "secondKey" : 30,
    "layout" : 8
  }, {
    "firstKey" : 35,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 35,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 35,
    "secondKey" : 33,
    "layout" : 4
  }, {
    "firstKey" : 35,
    "secondKey" : 34,
    "layout" : 4
  }, {
    "firstKey" : 35,
    "secondKey" : 36,
    "layout" : 3
  }, {
    "firstKey" : 35,
    "secondKey" : 37,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 38,
    "layout" : 6
  }, {
    "firstKey" : 35,
    "secondKey" : 39,
    "layout" : 9
  }, {
    "firstKey" : 35,
    "secondKey" : 40,
    "layout" : 11
  }, {
    "firstKey" : 35,
    "secondKey" : 41,
    "layout" : 11
  }, {
    "firstKey" : 35,
    "secondKey" : 42,
    "layout" : 11
  }, {
    "firstKey" : 35,
    "secondKey" : 43,
    "layout" : 11
  }, {
    "firstKey" : 35,
    "secondKey" : 44,
    "layout" : 11
  }, {
    "firstKey" : 35,
    "secondKey" : 45,
    "layout" : 11
  }, {
    "firstKey" : 35,
    "secondKey" : 46,
    "layout" : 11
  }, {
    "firstKey" : 35,
    "secondKey" : 47,
    "layout" : 11
  }, {
    "firstKey" : 35,
    "secondKey" : 48,
    "layout" : 11
  }, {
    "firstKey" : 35,
    "secondKey" : 49,
    "layout" : 11
  }, {
    "firstKey" : 35,
    "secondKey" : 50,
    "layout" : 11
  }, {
    "firstKey" : 35,
    "secondKey" : 51,
    "layout" : 11
  }, {
    "firstKey" : 35,
    "secondKey" : 52,
    "layout" : 12
  }, {
    "firstKey" : 35,
    "secondKey" : 53,
    "layout" : 12
  }, {
    "firstKey" : 35,
    "secondKey" : 54,
    "layout" : 12
  }, {
    "firstKey" : 35,
    "secondKey" : 55,
    "layout" : 12
  }, {
    "firstKey" : 35,
    "secondKey" : 56,
    "layout" : 12
  }, {
    "firstKey" : 35,
    "secondKey" : 57,
    "layout" : 15
  }, {
    "firstKey" : 36,
    "secondKey" : 0,
    "layout" : 15
  }, {
    "firstKey" : 36,
    "secondKey" : 1,
    "layout" : 15
  }, {
    "firstKey" : 36,
    "secondKey" : 2,
    "layout" : 11
  }, {
    "firstKey" : 36,
    "secondKey" : 3,
    "layout" : 11
  }, {
    "firstKey" : 36,
    "secondKey" : 4,
    "layout" : 11
  }, {
    "firstKey" : 36,
    "secondKey" : 5,
    "layout" : 11
  }, {
    "firstKey" : 36,
    "secondKey" : 6,
    "layout" : 11
  }, {
    "firstKey" : 36,
    "secondKey" : 7,
    "layout" : 11
  }, {
    "firstKey" : 36,
    "secondKey" : 8,
    "layout" : 11
  }, {
    "firstKey" : 36,
    "secondKey" : 9,
    "layout" : 11
  }, {
    "firstKey" : 36,
    "secondKey" : 10,
    "layout" : 11
  }, {
    "firstKey" : 36,
    "secondKey" : 11,
    "layout" : 11
  }, {
    "firstKey" : 36,
    "secondKey" : 12,
    "layout" : 11
  }, {
    "firstKey" : 36,
    "secondKey" : 13,
    "layout" : 11
  }, {
    "firstKey" : 36,
    "secondKey" : 14,
    "layout" : 11
  }, {
    "firstKey" : 36,
    "secondKey" : 15,
    "layout" : 11
  }, {
    "firstKey" : 36,
    "secondKey" : 16,
    "layout" : 11
  }, {
    "firstKey" : 36,
    "secondKey" : 17,
    "layout" : 11
  }, {
    "firstKey" : 36,
    "secondKey" : 18,
    "layout" : 11
  }, {
    "firstKey" : 36,
    "secondKey" : 19,
    "layout" : 11
  }, {
    "firstKey" : 36,
    "secondKey" : 20,
    "layout" : 11
  }, {
    "firstKey" : 36,
    "secondKey" : 21,
    "layout" : 10
  }, {
    "firstKey" : 36,
    "secondKey" : 22,
    "layout" : 10
  }, {
    "firstKey" : 36,
    "secondKey" : 23,
    "layout" : 10
  }, {
    "firstKey" : 36,
    "secondKey" : 24,
    "layout" : 10
  }, {
    "firstKey" : 36,
    "secondKey" : 25,
    "layout" : 9
  }, {
    "firstKey" : 36,
    "secondKey" : 26,
    "layout" : 9
  }, {
    "firstKey" : 36,
    "secondKey" : 27,
    "layout" : 9
  }, {
    "firstKey" : 36,
    "secondKey" : 28,
    "layout" : 9
  }, {
    "firstKey" : 36,
    "secondKey" : 29,
    "layout" : 9
  }, {
    "firstKey" : 36,
    "secondKey" : 30,
    "layout" : 8
  }, {
    "firstKey" : 36,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 36,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 36,
    "secondKey" : 33,
    "layout" : 4
  }, {
    "firstKey" : 36,
    "secondKey" : 34,
    "layout" : 4
  }, {
    "firstKey" : 36,
    "secondKey" : 35,
    "layout" : 3
  }, {
    "firstKey" : 36,
    "secondKey" : 37,
    "layout" : 6
  }, {
    "firstKey" : 36,
    "secondKey" : 38,
    "layout" : 6
  }, {
    "firstKey" : 36,
    "secondKey" : 39,
    "layout" : 9
  }, {
    "firstKey" : 36,
    "secondKey" : 40,
    "layout" : 11
  }, {
    "firstKey" : 36,
    "secondKey" : 41,
    "layout" : 11
  }, {
    "firstKey" : 36,
    "secondKey" : 42,
    "layout" : 11
  }, {
    "firstKey" : 36,
    "secondKey" : 43,
    "layout" : 11
  }, {
    "firstKey" : 36,
    "secondKey" : 44,
    "layout" : 11
  }, {
    "firstKey" : 36,
    "secondKey" : 45,
    "layout" : 11
  }, {
    "firstKey" : 36,
    "secondKey" : 46,
    "layout" : 11
  }, {
    "firstKey" : 36,
    "secondKey" : 47,
    "layout" : 11
  }, {
    "firstKey" : 36,
    "secondKey" : 48,
    "layout" : 11
  }, {
    "firstKey" : 36,
    "secondKey" : 49,
    "layout" : 11
  }, {
    "firstKey" : 36,
    "secondKey" : 50,
    "layout" : 11
  }, {
    "firstKey" : 36,
    "secondKey" : 51,
    "layout" : 11
  }, {
    "firstKey" : 36,
    "secondKey" : 52,
    "layout" : 12
  }, {
    "firstKey" : 36,
    "secondKey" : 53,
    "layout" : 12
  }, {
    "firstKey" : 36,
    "secondKey" : 54,
    "layout" : 12
  }, {
    "firstKey" : 36,
    "secondKey" : 55,
    "layout" : 12
  }, {
    "firstKey" : 36,
    "secondKey" : 56,
    "layout" : 12
  }, {
    "firstKey" : 36,
    "secondKey" : 57,
    "layout" : 15
  }, {
    "firstKey" : 37,
    "secondKey" : 0,
    "layout" : 13
  }, {
    "firstKey" : 37,
    "secondKey" : 1,
    "layout" : 13
  }, {
    "firstKey" : 37,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 37,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 37,
    "secondKey" : 4,
    "layout" : 9
  }, {
    "firstKey" : 37,
    "secondKey" : 5,
    "layout" : 9
  }, {
    "firstKey" : 37,
    "secondKey" : 6,
    "layout" : 9
  }, {
    "firstKey" : 37,
    "secondKey" : 7,
    "layout" : 9
  }, {
    "firstKey" : 37,
    "secondKey" : 8,
    "layout" : 9
  }, {
    "firstKey" : 37,
    "secondKey" : 9,
    "layout" : 9
  }, {
    "firstKey" : 37,
    "secondKey" : 10,
    "layout" : 9
  }, {
    "firstKey" : 37,
    "secondKey" : 11,
    "layout" : 9
  }, {
    "firstKey" : 37,
    "secondKey" : 12,
    "layout" : 9
  }, {
    "firstKey" : 37,
    "secondKey" : 13,
    "layout" : 9
  }, {
    "firstKey" : 37,
    "secondKey" : 14,
    "layout" : 9
  }, {
    "firstKey" : 37,
    "secondKey" : 15,
    "layout" : 9
  }, {
    "firstKey" : 37,
    "secondKey" : 16,
    "layout" : 9
  }, {
    "firstKey" : 37,
    "secondKey" : 17,
    "layout" : 9
  }, {
    "firstKey" : 37,
    "secondKey" : 18,
    "layout" : 9
  }, {
    "firstKey" : 37,
    "secondKey" : 19,
    "layout" : 9
  }, {
    "firstKey" : 37,
    "secondKey" : 20,
    "layout" : 9
  }, {
    "firstKey" : 37,
    "secondKey" : 21,
    "layout" : 8
  }, {
    "firstKey" : 37,
    "secondKey" : 22,
    "layout" : 8
  }, {
    "firstKey" : 37,
    "secondKey" : 23,
    "layout" : 8
  }, {
    "firstKey" : 37,
    "secondKey" : 24,
    "layout" : 8
  }, {
    "firstKey" : 37,
    "secondKey" : 25,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 26,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 27,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 28,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 29,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 30,
    "layout" : 6
  }, {
    "firstKey" : 37,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 37,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 37,
    "secondKey" : 33,
    "layout" : 4
  }, {
    "firstKey" : 37,
    "secondKey" : 34,
    "layout" : 4
  }, {
    "firstKey" : 37,
    "secondKey" : 35,
    "layout" : 4
  }, {
    "firstKey" : 37,
    "secondKey" : 36,
    "layout" : 4
  }, {
    "firstKey" : 37,
    "secondKey" : 38,
    "layout" : 3
  }, {
    "firstKey" : 37,
    "secondKey" : 39,
    "layout" : 7
  }, {
    "firstKey" : 37,
    "secondKey" : 40,
    "layout" : 9
  }, {
    "firstKey" : 37,
    "secondKey" : 41,
    "layout" : 9
  }, {
    "firstKey" : 37,
    "secondKey" : 42,
    "layout" : 9
  }, {
    "firstKey" : 37,
    "secondKey" : 43,
    "layout" : 9
  }, {
    "firstKey" : 37,
    "secondKey" : 44,
    "layout" : 9
  }, {
    "firstKey" : 37,
    "secondKey" : 45,
    "layout" : 9
  }, {
    "firstKey" : 37,
    "secondKey" : 46,
    "layout" : 9
  }, {
    "firstKey" : 37,
    "secondKey" : 47,
    "layout" : 9
  }, {
    "firstKey" : 37,
    "secondKey" : 48,
    "layout" : 9
  }, {
    "firstKey" : 37,
    "secondKey" : 49,
    "layout" : 9
  }, {
    "firstKey" : 37,
    "secondKey" : 50,
    "layout" : 9
  }, {
    "firstKey" : 37,
    "secondKey" : 51,
    "layout" : 9
  }, {
    "firstKey" : 37,
    "secondKey" : 52,
    "layout" : 10
  }, {
    "firstKey" : 37,
    "secondKey" : 53,
    "layout" : 10
  }, {
    "firstKey" : 37,
    "secondKey" : 54,
    "layout" : 10
  }, {
    "firstKey" : 37,
    "secondKey" : 55,
    "layout" : 10
  }, {
    "firstKey" : 37,
    "secondKey" : 56,
    "layout" : 10
  }, {
    "firstKey" : 37,
    "secondKey" : 57,
    "layout" : 13
  }, {
    "firstKey" : 38,
    "secondKey" : 0,
    "layout" : 13
  }, {
    "firstKey" : 38,
    "secondKey" : 1,
    "layout" : 13
  }, {
    "firstKey" : 38,
    "secondKey" : 2,
    "layout" : 9
  }, {
    "firstKey" : 38,
    "secondKey" : 3,
    "layout" : 9
  }, {
    "firstKey" : 38,
    "secondKey" : 4,
    "layout" : 9
  }, {
    "firstKey" : 38,
    "secondKey" : 5,
    "layout" : 9
  }, {
    "firstKey" : 38,
    "secondKey" : 6,
    "layout" : 9
  }, {
    "firstKey" : 38,
    "secondKey" : 7,
    "layout" : 9
  }, {
    "firstKey" : 38,
    "secondKey" : 8,
    "layout" : 9
  }, {
    "firstKey" : 38,
    "secondKey" : 9,
    "layout" : 9
  }, {
    "firstKey" : 38,
    "secondKey" : 10,
    "layout" : 9
  }, {
    "firstKey" : 38,
    "secondKey" : 11,
    "layout" : 9
  }, {
    "firstKey" : 38,
    "secondKey" : 12,
    "layout" : 9
  }, {
    "firstKey" : 38,
    "secondKey" : 13,
    "layout" : 9
  }, {
    "firstKey" : 38,
    "secondKey" : 14,
    "layout" : 9
  }, {
    "firstKey" : 38,
    "secondKey" : 15,
    "layout" : 9
  }, {
    "firstKey" : 38,
    "secondKey" : 16,
    "layout" : 9
  }, {
    "firstKey" : 38,
    "secondKey" : 17,
    "layout" : 9
  }, {
    "firstKey" : 38,
    "secondKey" : 18,
    "layout" : 9
  }, {
    "firstKey" : 38,
    "secondKey" : 19,
    "layout" : 9
  }, {
    "firstKey" : 38,
    "secondKey" : 20,
    "layout" : 9
  }, {
    "firstKey" : 38,
    "secondKey" : 21,
    "layout" : 8
  }, {
    "firstKey" : 38,
    "secondKey" : 22,
    "layout" : 8
  }, {
    "firstKey" : 38,
    "secondKey" : 23,
    "layout" : 8
  }, {
    "firstKey" : 38,
    "secondKey" : 24,
    "layout" : 8
  }, {
    "firstKey" : 38,
    "secondKey" : 25,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 26,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 27,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 28,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 29,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 30,
    "layout" : 6
  }, {
    "firstKey" : 38,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 38,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 38,
    "secondKey" : 33,
    "layout" : 4
  }, {
    "firstKey" : 38,
    "secondKey" : 34,
    "layout" : 4
  }, {
    "firstKey" : 38,
    "secondKey" : 35,
    "layout" : 4
  }, {
    "firstKey" : 38,
    "secondKey" : 36,
    "layout" : 4
  }, {
    "firstKey" : 38,
    "secondKey" : 37,
    "layout" : 3
  }, {
    "firstKey" : 38,
    "secondKey" : 39,
    "layout" : 7
  }, {
    "firstKey" : 38,
    "secondKey" : 40,
    "layout" : 9
  }, {
    "firstKey" : 38,
    "secondKey" : 41,
    "layout" : 9
  }, {
    "firstKey" : 38,
    "secondKey" : 42,
    "layout" : 9
  }, {
    "firstKey" : 38,
    "secondKey" : 43,
    "layout" : 9
  }, {
    "firstKey" : 38,
    "secondKey" : 44,
    "layout" : 9
  }, {
    "firstKey" : 38,
    "secondKey" : 45,
    "layout" : 9
  }, {
    "firstKey" : 38,
    "secondKey" : 46,
    "layout" : 9
  }, {
    "firstKey" : 38,
    "secondKey" : 47,
    "layout" : 9
  }, {
    "firstKey" : 38,
    "secondKey" : 48,
    "layout" : 9
  }, {
    "firstKey" : 38,
    "secondKey" : 49,
    "layout" : 9
  }, {
    "firstKey" : 38,
    "secondKey" : 50,
    "layout" : 9
  }, {
    "firstKey" : 38,
    "secondKey" : 51,
    "layout" : 9
  }, {
    "firstKey" : 38,
    "secondKey" : 52,
    "layout" : 10
  }, {
    "firstKey" : 38,
    "secondKey" : 53,
    "layout" : 10
  }, {
    "firstKey" : 38,
    "secondKey" : 54,
    "layout" : 10
  }, {
    "firstKey" : 38,
    "secondKey" : 55,
    "layout" : 10
  }, {
    "firstKey" : 38,
    "secondKey" : 56,
    "layout" : 10
  }, {
    "firstKey" : 38,
    "secondKey" : 57,
    "layout" : 13
  }, {
    "firstKey" : 39,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 39,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 39,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 24,
    "layout" : 5
  }, {
    "firstKey" : 39,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 39,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 39,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 39,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 39,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 39,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 39,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 39,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 39,
    "secondKey" : 33,
    "layout" : 4
  }, {
    "firstKey" : 39,
    "secondKey" : 34,
    "layout" : 4
  }, {
    "firstKey" : 39,
    "secondKey" : 35,
    "layout" : 4
  }, {
    "firstKey" : 39,
    "secondKey" : 36,
    "layout" : 4
  }, {
    "firstKey" : 39,
    "secondKey" : 37,
    "layout" : 4
  }, {
    "firstKey" : 39,
    "secondKey" : 38,
    "layout" : 4
  }, {
    "firstKey" : 39,
    "secondKey" : 40,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 41,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 42,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 43,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 44,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 45,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 46,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 47,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 48,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 49,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 50,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 51,
    "layout" : 6
  }, {
    "firstKey" : 39,
    "secondKey" : 52,
    "layout" : 7
  }, {
    "firstKey" : 39,
    "secondKey" : 53,
    "layout" : 7
  }, {
    "firstKey" : 39,
    "secondKey" : 54,
    "layout" : 7
  }, {
    "firstKey" : 39,
    "secondKey" : 55,
    "layout" : 7
  }, {
    "firstKey" : 39,
    "secondKey" : 56,
    "layout" : 7
  }, {
    "firstKey" : 39,
    "secondKey" : 57,
    "layout" : 10
  }, {
    "firstKey" : 40,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 40,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 40,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 33,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 34,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 35,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 36,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 37,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 38,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 39,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 41,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 42,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 43,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 44,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 45,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 46,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 47,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 48,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 49,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 50,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 51,
    "layout" : 4
  }, {
    "firstKey" : 40,
    "secondKey" : 52,
    "layout" : 5
  }, {
    "firstKey" : 40,
    "secondKey" : 53,
    "layout" : 5
  }, {
    "firstKey" : 40,
    "secondKey" : 54,
    "layout" : 5
  }, {
    "firstKey" : 40,
    "secondKey" : 55,
    "layout" : 5
  }, {
    "firstKey" : 40,
    "secondKey" : 56,
    "layout" : 5
  }, {
    "firstKey" : 40,
    "secondKey" : 57,
    "layout" : 8
  }, {
    "firstKey" : 41,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 41,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 41,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 41,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 41,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 41,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 41,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 41,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 41,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 41,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 41,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 41,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 41,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 41,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 41,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 41,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 41,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 41,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 41,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 41,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 41,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 41,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 41,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 41,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 41,
    "secondKey" : 24,
    "layout" : 5
  }, {
    "firstKey" : 41,
    "secondKey" : 25,
    "layout" : 5
  }, {
    "firstKey" : 41,
    "secondKey" : 26,
    "layout" : 5
  }, {
    "firstKey" : 41,
    "secondKey" : 27,
    "layout" : 5
  }, {
    "firstKey" : 41,
    "secondKey" : 28,
    "layout" : 5
  }, {
    "firstKey" : 41,
    "secondKey" : 29,
    "layout" : 5
  }, {
    "firstKey" : 41,
    "secondKey" : 30,
    "layout" : 5
  }, {
    "firstKey" : 41,
    "secondKey" : 31,
    "layout" : 5
  }, {
    "firstKey" : 41,
    "secondKey" : 32,
    "layout" : 5
  }, {
    "firstKey" : 41,
    "secondKey" : 33,
    "layout" : 5
  }, {
    "firstKey" : 41,
    "secondKey" : 34,
    "layout" : 5
  }, {
    "firstKey" : 41,
    "secondKey" : 35,
    "layout" : 5
  }, {
    "firstKey" : 41,
    "secondKey" : 36,
    "layout" : 5
  }, {
    "firstKey" : 41,
    "secondKey" : 37,
    "layout" : 5
  }, {
    "firstKey" : 41,
    "secondKey" : 38,
    "layout" : 5
  }, {
    "firstKey" : 41,
    "secondKey" : 39,
    "layout" : 5
  }, {
    "firstKey" : 41,
    "secondKey" : 40,
    "layout" : 5
  }, {
    "firstKey" : 41,
    "secondKey" : 42,
    "layout" : 1
  }, {
    "firstKey" : 41,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 41,
    "secondKey" : 44,
    "layout" : 5
  }, {
    "firstKey" : 41,
    "secondKey" : 45,
    "layout" : 5
  }, {
    "firstKey" : 41,
    "secondKey" : 46,
    "layout" : 5
  }, {
    "firstKey" : 41,
    "secondKey" : 47,
    "layout" : 5
  }, {
    "firstKey" : 41,
    "secondKey" : 48,
    "layout" : 5
  }, {
    "firstKey" : 41,
    "secondKey" : 49,
    "layout" : 5
  }, {
    "firstKey" : 41,
    "secondKey" : 50,
    "layout" : 5
  }, {
    "firstKey" : 41,
    "secondKey" : 51,
    "layout" : 5
  }, {
    "firstKey" : 41,
    "secondKey" : 52,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 53,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 54,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 55,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 56,
    "layout" : 6
  }, {
    "firstKey" : 41,
    "secondKey" : 57,
    "layout" : 9
  }, {
    "firstKey" : 42,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 42,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 42,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 42,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 42,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 42,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 42,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 42,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 42,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 42,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 42,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 42,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 42,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 42,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 42,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 42,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 42,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 42,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 42,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 42,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 42,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 42,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 42,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 42,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 42,
    "secondKey" : 24,
    "layout" : 5
  }, {
    "firstKey" : 42,
    "secondKey" : 25,
    "layout" : 5
  }, {
    "firstKey" : 42,
    "secondKey" : 26,
    "layout" : 5
  }, {
    "firstKey" : 42,
    "secondKey" : 27,
    "layout" : 5
  }, {
    "firstKey" : 42,
    "secondKey" : 28,
    "layout" : 5
  }, {
    "firstKey" : 42,
    "secondKey" : 29,
    "layout" : 5
  }, {
    "firstKey" : 42,
    "secondKey" : 30,
    "layout" : 5
  }, {
    "firstKey" : 42,
    "secondKey" : 31,
    "layout" : 5
  }, {
    "firstKey" : 42,
    "secondKey" : 32,
    "layout" : 5
  }, {
    "firstKey" : 42,
    "secondKey" : 33,
    "layout" : 5
  }, {
    "firstKey" : 42,
    "secondKey" : 34,
    "layout" : 5
  }, {
    "firstKey" : 42,
    "secondKey" : 35,
    "layout" : 5
  }, {
    "firstKey" : 42,
    "secondKey" : 36,
    "layout" : 5
  }, {
    "firstKey" : 42,
    "secondKey" : 37,
    "layout" : 5
  }, {
    "firstKey" : 42,
    "secondKey" : 38,
    "layout" : 5
  }, {
    "firstKey" : 42,
    "secondKey" : 39,
    "layout" : 5
  }, {
    "firstKey" : 42,
    "secondKey" : 40,
    "layout" : 5
  }, {
    "firstKey" : 42,
    "secondKey" : 41,
    "layout" : 1
  }, {
    "firstKey" : 42,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 42,
    "secondKey" : 44,
    "layout" : 5
  }, {
    "firstKey" : 42,
    "secondKey" : 45,
    "layout" : 5
  }, {
    "firstKey" : 42,
    "secondKey" : 46,
    "layout" : 5
  }, {
    "firstKey" : 42,
    "secondKey" : 47,
    "layout" : 5
  }, {
    "firstKey" : 42,
    "secondKey" : 48,
    "layout" : 5
  }, {
    "firstKey" : 42,
    "secondKey" : 49,
    "layout" : 5
  }, {
    "firstKey" : 42,
    "secondKey" : 50,
    "layout" : 5
  }, {
    "firstKey" : 42,
    "secondKey" : 51,
    "layout" : 5
  }, {
    "firstKey" : 42,
    "secondKey" : 52,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 53,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 54,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 55,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 56,
    "layout" : 6
  }, {
    "firstKey" : 42,
    "secondKey" : 57,
    "layout" : 9
  }, {
    "firstKey" : 43,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 43,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 43,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 33,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 34,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 35,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 36,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 37,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 38,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 39,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 40,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 41,
    "layout" : 1
  }, {
    "firstKey" : 43,
    "secondKey" : 42,
    "layout" : 1
  }, {
    "firstKey" : 43,
    "secondKey" : 44,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 45,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 46,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 47,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 48,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 49,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 50,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 51,
    "layout" : 4
  }, {
    "firstKey" : 43,
    "secondKey" : 52,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 53,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 54,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 55,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 56,
    "layout" : 5
  }, {
    "firstKey" : 43,
    "secondKey" : 57,
    "layout" : 8
  }, {
    "firstKey" : 44,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 44,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 44,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 33,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 34,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 35,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 36,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 37,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 38,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 39,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 40,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 41,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 42,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 43,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 45,
    "layout" : 1
  }, {
    "firstKey" : 44,
    "secondKey" : 46,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 47,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 48,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 49,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 50,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 51,
    "layout" : 4
  }, {
    "firstKey" : 44,
    "secondKey" : 52,
    "layout" : 5
  }, {
    "firstKey" : 44,
    "secondKey" : 53,
    "layout" : 5
  }, {
    "firstKey" : 44,
    "secondKey" : 54,
    "layout" : 5
  }, {
    "firstKey" : 44,
    "secondKey" : 55,
    "layout" : 5
  }, {
    "firstKey" : 44,
    "secondKey" : 56,
    "layout" : 5
  }, {
    "firstKey" : 44,
    "secondKey" : 57,
    "layout" : 8
  }, {
    "firstKey" : 45,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 45,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 45,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 33,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 34,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 35,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 36,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 37,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 38,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 39,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 40,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 41,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 42,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 43,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 44,
    "layout" : 1
  }, {
    "firstKey" : 45,
    "secondKey" : 46,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 47,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 48,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 49,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 50,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 51,
    "layout" : 4
  }, {
    "firstKey" : 45,
    "secondKey" : 52,
    "layout" : 5
  }, {
    "firstKey" : 45,
    "secondKey" : 53,
    "layout" : 5
  }, {
    "firstKey" : 45,
    "secondKey" : 54,
    "layout" : 5
  }, {
    "firstKey" : 45,
    "secondKey" : 55,
    "layout" : 5
  }, {
    "firstKey" : 45,
    "secondKey" : 56,
    "layout" : 5
  }, {
    "firstKey" : 45,
    "secondKey" : 57,
    "layout" : 8
  }, {
    "firstKey" : 46,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 46,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 46,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 33,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 34,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 35,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 36,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 37,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 38,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 39,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 40,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 41,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 42,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 43,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 44,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 45,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 47,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 48,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 49,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 50,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 51,
    "layout" : 4
  }, {
    "firstKey" : 46,
    "secondKey" : 52,
    "layout" : 5
  }, {
    "firstKey" : 46,
    "secondKey" : 53,
    "layout" : 5
  }, {
    "firstKey" : 46,
    "secondKey" : 54,
    "layout" : 5
  }, {
    "firstKey" : 46,
    "secondKey" : 55,
    "layout" : 5
  }, {
    "firstKey" : 46,
    "secondKey" : 56,
    "layout" : 5
  }, {
    "firstKey" : 46,
    "secondKey" : 57,
    "layout" : 8
  }, {
    "firstKey" : 47,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 47,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 47,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 47,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 47,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 47,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 47,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 47,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 47,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 47,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 47,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 47,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 47,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 47,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 47,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 47,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 47,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 47,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 47,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 47,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 47,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 47,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 47,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 47,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 47,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 47,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 47,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 47,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 47,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 47,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 47,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 47,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 47,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 47,
    "secondKey" : 33,
    "layout" : 4
  }, {
    "firstKey" : 47,
    "secondKey" : 34,
    "layout" : 4
  }, {
    "firstKey" : 47,
    "secondKey" : 35,
    "layout" : 4
  }, {
    "firstKey" : 47,
    "secondKey" : 36,
    "layout" : 4
  }, {
    "firstKey" : 47,
    "secondKey" : 37,
    "layout" : 4
  }, {
    "firstKey" : 47,
    "secondKey" : 38,
    "layout" : 4
  }, {
    "firstKey" : 47,
    "secondKey" : 39,
    "layout" : 4
  }, {
    "firstKey" : 47,
    "secondKey" : 40,
    "layout" : 4
  }, {
    "firstKey" : 47,
    "secondKey" : 41,
    "layout" : 4
  }, {
    "firstKey" : 47,
    "secondKey" : 42,
    "layout" : 4
  }, {
    "firstKey" : 47,
    "secondKey" : 43,
    "layout" : 4
  }, {
    "firstKey" : 47,
    "secondKey" : 44,
    "layout" : 4
  }, {
    "firstKey" : 47,
    "secondKey" : 45,
    "layout" : 4
  }, {
    "firstKey" : 47,
    "secondKey" : 46,
    "layout" : 4
  }, {
    "firstKey" : 47,
    "secondKey" : 48,
    "layout" : 2
  }, {
    "firstKey" : 47,
    "secondKey" : 49,
    "layout" : 3
  }, {
    "firstKey" : 47,
    "secondKey" : 50,
    "layout" : 3
  }, {
    "firstKey" : 47,
    "secondKey" : 51,
    "layout" : 4
  }, {
    "firstKey" : 47,
    "secondKey" : 52,
    "layout" : 5
  }, {
    "firstKey" : 47,
    "secondKey" : 53,
    "layout" : 5
  }, {
    "firstKey" : 47,
    "secondKey" : 54,
    "layout" : 5
  }, {
    "firstKey" : 47,
    "secondKey" : 55,
    "layout" : 5
  }, {
    "firstKey" : 47,
    "secondKey" : 56,
    "layout" : 5
  }, {
    "firstKey" : 47,
    "secondKey" : 57,
    "layout" : 8
  }, {
    "firstKey" : 48,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 48,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 48,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 48,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 48,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 48,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 48,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 48,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 48,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 48,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 48,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 48,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 48,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 48,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 48,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 48,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 48,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 48,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 48,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 48,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 48,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 48,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 48,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 48,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 48,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 48,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 48,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 48,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 48,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 48,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 48,
    "secondKey" : 30,
    "layout" : 4
  }, {
    "firstKey" : 48,
    "secondKey" : 31,
    "layout" : 4
  }, {
    "firstKey" : 48,
    "secondKey" : 32,
    "layout" : 4
  }, {
    "firstKey" : 48,
    "secondKey" : 33,
    "layout" : 4
  }, {
    "firstKey" : 48,
    "secondKey" : 34,
    "layout" : 4
  }, {
    "firstKey" : 48,
    "secondKey" : 35,
    "layout" : 4
  }, {
    "firstKey" : 48,
    "secondKey" : 36,
    "layout" : 4
  }, {
    "firstKey" : 48,
    "secondKey" : 37,
    "layout" : 4
  }, {
    "firstKey" : 48,
    "secondKey" : 38,
    "layout" : 4
  }, {
    "firstKey" : 48,
    "secondKey" : 39,
    "layout" : 4
  }, {
    "firstKey" : 48,
    "secondKey" : 40,
    "layout" : 4
  }, {
    "firstKey" : 48,
    "secondKey" : 41,
    "layout" : 4
  }, {
    "firstKey" : 48,
    "secondKey" : 42,
    "layout" : 4
  }, {
    "firstKey" : 48,
    "secondKey" : 43,
    "layout" : 4
  }, {
    "firstKey" : 48,
    "secondKey" : 44,
    "layout" : 4
  }, {
    "firstKey" : 48,
    "secondKey" : 45,
    "layout" : 4
  }, {
    "firstKey" : 48,
    "secondKey" : 46,
    "layout" : 4
  }, {
    "firstKey" : 48,
    "secondKey" : 47,
    "layout" : 2
  }, {
    "firstKey" : 48,
    "secondKey" : 49,
    "layout" : 3
  }, {
    "firstKey" : 48,
    "secondKey" : 50,
    "layout" : 3
  }, {
    "firstKey" : 48,
    "secondKey" : 51,
    "layout" : 4
  }, {
    "firstKey" : 48,
    "secondKey" : 52,
    "layout" : 5
  }, {
    "firstKey" : 48,
    "secondKey" : 53,
    "layout" : 5
  }, {
    "firstKey" : 48,
    "secondKey" : 54,
    "layout" : 5
  }, {
    "firstKey" : 48,
    "secondKey" : 55,
    "layout" : 5
  }, {
    "firstKey" : 48,
    "secondKey" : 56,
    "layout" : 5
  }, {
    "firstKey" : 48,
    "secondKey" : 57,
    "layout" : 8
  }, {
    "firstKey" : 49,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 49,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 49,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 49,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 49,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 49,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 49,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 49,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 49,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 49,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 49,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 49,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 49,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 49,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 49,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 49,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 49,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 49,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 49,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 49,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 49,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 49,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 49,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 49,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 49,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 49,
    "secondKey" : 25,
    "layout" : 6
  }, {
    "firstKey" : 49,
    "secondKey" : 26,
    "layout" : 6
  }, {
    "firstKey" : 49,
    "secondKey" : 27,
    "layout" : 6
  }, {
    "firstKey" : 49,
    "secondKey" : 28,
    "layout" : 6
  }, {
    "firstKey" : 49,
    "secondKey" : 29,
    "layout" : 6
  }, {
    "firstKey" : 49,
    "secondKey" : 30,
    "layout" : 6
  }, {
    "firstKey" : 49,
    "secondKey" : 31,
    "layout" : 6
  }, {
    "firstKey" : 49,
    "secondKey" : 32,
    "layout" : 6
  }, {
    "firstKey" : 49,
    "secondKey" : 33,
    "layout" : 6
  }, {
    "firstKey" : 49,
    "secondKey" : 34,
    "layout" : 6
  }, {
    "firstKey" : 49,
    "secondKey" : 35,
    "layout" : 6
  }, {
    "firstKey" : 49,
    "secondKey" : 36,
    "layout" : 6
  }, {
    "firstKey" : 49,
    "secondKey" : 37,
    "layout" : 6
  }, {
    "firstKey" : 49,
    "secondKey" : 38,
    "layout" : 6
  }, {
    "firstKey" : 49,
    "secondKey" : 39,
    "layout" : 6
  }, {
    "firstKey" : 49,
    "secondKey" : 40,
    "layout" : 6
  }, {
    "firstKey" : 49,
    "secondKey" : 41,
    "layout" : 6
  }, {
    "firstKey" : 49,
    "secondKey" : 42,
    "layout" : 6
  }, {
    "firstKey" : 49,
    "secondKey" : 43,
    "layout" : 6
  }, {
    "firstKey" : 49,
    "secondKey" : 44,
    "layout" : 6
  }, {
    "firstKey" : 49,
    "secondKey" : 45,
    "layout" : 6
  }, {
    "firstKey" : 49,
    "secondKey" : 46,
    "layout" : 6
  }, {
    "firstKey" : 49,
    "secondKey" : 47,
    "layout" : 5
  }, {
    "firstKey" : 49,
    "secondKey" : 48,
    "layout" : 5
  }, {
    "firstKey" : 49,
    "secondKey" : 50,
    "layout" : 1
  }, {
    "firstKey" : 49,
    "secondKey" : 51,
    "layout" : 6
  }, {
    "firstKey" : 49,
    "secondKey" : 52,
    "layout" : 7
  }, {
    "firstKey" : 49,
    "secondKey" : 53,
    "layout" : 7
  }, {
    "firstKey" : 49,
    "secondKey" : 54,
    "layout" : 7
  }, {
    "firstKey" : 49,
    "secondKey" : 55,
    "layout" : 7
  }, {
    "firstKey" : 49,
    "secondKey" : 56,
    "layout" : 7
  }, {
    "firstKey" : 49,
    "secondKey" : 57,
    "layout" : 10
  }, {
    "firstKey" : 50,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 50,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 50,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 50,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 50,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 50,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 50,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 50,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 50,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 50,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 50,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 50,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 50,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 50,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 50,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 50,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 50,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 50,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 50,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 50,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 50,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 50,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 50,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 50,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 50,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 50,
    "secondKey" : 25,
    "layout" : 6
  }, {
    "firstKey" : 50,
    "secondKey" : 26,
    "layout" : 6
  }, {
    "firstKey" : 50,
    "secondKey" : 27,
    "layout" : 6
  }, {
    "firstKey" : 50,
    "secondKey" : 28,
    "layout" : 6
  }, {
    "firstKey" : 50,
    "secondKey" : 29,
    "layout" : 6
  }, {
    "firstKey" : 50,
    "secondKey" : 30,
    "layout" : 6
  }, {
    "firstKey" : 50,
    "secondKey" : 31,
    "layout" : 6
  }, {
    "firstKey" : 50,
    "secondKey" : 32,
    "layout" : 6
  }, {
    "firstKey" : 50,
    "secondKey" : 33,
    "layout" : 6
  }, {
    "firstKey" : 50,
    "secondKey" : 34,
    "layout" : 6
  }, {
    "firstKey" : 50,
    "secondKey" : 35,
    "layout" : 6
  }, {
    "firstKey" : 50,
    "secondKey" : 36,
    "layout" : 6
  }, {
    "firstKey" : 50,
    "secondKey" : 37,
    "layout" : 6
  }, {
    "firstKey" : 50,
    "secondKey" : 38,
    "layout" : 6
  }, {
    "firstKey" : 50,
    "secondKey" : 39,
    "layout" : 6
  }, {
    "firstKey" : 50,
    "secondKey" : 40,
    "layout" : 6
  }, {
    "firstKey" : 50,
    "secondKey" : 41,
    "layout" : 6
  }, {
    "firstKey" : 50,
    "secondKey" : 42,
    "layout" : 6
  }, {
    "firstKey" : 50,
    "secondKey" : 43,
    "layout" : 6
  }, {
    "firstKey" : 50,
    "secondKey" : 44,
    "layout" : 6
  }, {
    "firstKey" : 50,
    "secondKey" : 45,
    "layout" : 6
  }, {
    "firstKey" : 50,
    "secondKey" : 46,
    "layout" : 6
  }, {
    "firstKey" : 50,
    "secondKey" : 47,
    "layout" : 5
  }, {
    "firstKey" : 50,
    "secondKey" : 48,
    "layout" : 5
  }, {
    "firstKey" : 50,
    "secondKey" : 49,
    "layout" : 1
  }, {
    "firstKey" : 50,
    "secondKey" : 51,
    "layout" : 6
  }, {
    "firstKey" : 50,
    "secondKey" : 52,
    "layout" : 7
  }, {
    "firstKey" : 50,
    "secondKey" : 53,
    "layout" : 7
  }, {
    "firstKey" : 50,
    "secondKey" : 54,
    "layout" : 7
  }, {
    "firstKey" : 50,
    "secondKey" : 55,
    "layout" : 7
  }, {
    "firstKey" : 50,
    "secondKey" : 56,
    "layout" : 7
  }, {
    "firstKey" : 50,
    "secondKey" : 57,
    "layout" : 10
  }, {
    "firstKey" : 51,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 51,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 51,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 51,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 51,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 51,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 51,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 51,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 51,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 51,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 51,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 51,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 51,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 51,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 51,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 51,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 51,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 51,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 51,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 51,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 51,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 51,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 51,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 51,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 51,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 51,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 51,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 51,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 51,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 51,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 51,
    "secondKey" : 30,
    "layout" : 3
  }, {
    "firstKey" : 51,
    "secondKey" : 31,
    "layout" : 3
  }, {
    "firstKey" : 51,
    "secondKey" : 32,
    "layout" : 3
  }, {
    "firstKey" : 51,
    "secondKey" : 33,
    "layout" : 3
  }, {
    "firstKey" : 51,
    "secondKey" : 34,
    "layout" : 3
  }, {
    "firstKey" : 51,
    "secondKey" : 35,
    "layout" : 3
  }, {
    "firstKey" : 51,
    "secondKey" : 36,
    "layout" : 3
  }, {
    "firstKey" : 51,
    "secondKey" : 37,
    "layout" : 3
  }, {
    "firstKey" : 51,
    "secondKey" : 38,
    "layout" : 3
  }, {
    "firstKey" : 51,
    "secondKey" : 39,
    "layout" : 3
  }, {
    "firstKey" : 51,
    "secondKey" : 40,
    "layout" : 3
  }, {
    "firstKey" : 51,
    "secondKey" : 41,
    "layout" : 3
  }, {
    "firstKey" : 51,
    "secondKey" : 42,
    "layout" : 3
  }, {
    "firstKey" : 51,
    "secondKey" : 43,
    "layout" : 3
  }, {
    "firstKey" : 51,
    "secondKey" : 44,
    "layout" : 3
  }, {
    "firstKey" : 51,
    "secondKey" : 45,
    "layout" : 3
  }, {
    "firstKey" : 51,
    "secondKey" : 46,
    "layout" : 3
  }, {
    "firstKey" : 51,
    "secondKey" : 47,
    "layout" : 3
  }, {
    "firstKey" : 51,
    "secondKey" : 48,
    "layout" : 3
  }, {
    "firstKey" : 51,
    "secondKey" : 49,
    "layout" : 3
  }, {
    "firstKey" : 51,
    "secondKey" : 50,
    "layout" : 3
  }, {
    "firstKey" : 51,
    "secondKey" : 52,
    "layout" : 4
  }, {
    "firstKey" : 51,
    "secondKey" : 53,
    "layout" : 4
  }, {
    "firstKey" : 51,
    "secondKey" : 54,
    "layout" : 4
  }, {
    "firstKey" : 51,
    "secondKey" : 55,
    "layout" : 4
  }, {
    "firstKey" : 51,
    "secondKey" : 56,
    "layout" : 4
  }, {
    "firstKey" : 51,
    "secondKey" : 57,
    "layout" : 7
  }, {
    "firstKey" : 52,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 52,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 52,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 52,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 52,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 52,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 52,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 52,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 52,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 52,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 52,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 52,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 52,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 52,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 52,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 52,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 52,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 52,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 52,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 52,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 52,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 52,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 52,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 52,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 52,
    "secondKey" : 25,
    "layout" : 6
  }, {
    "firstKey" : 52,
    "secondKey" : 26,
    "layout" : 6
  }, {
    "firstKey" : 52,
    "secondKey" : 27,
    "layout" : 6
  }, {
    "firstKey" : 52,
    "secondKey" : 28,
    "layout" : 6
  }, {
    "firstKey" : 52,
    "secondKey" : 29,
    "layout" : 6
  }, {
    "firstKey" : 52,
    "secondKey" : 30,
    "layout" : 6
  }, {
    "firstKey" : 52,
    "secondKey" : 31,
    "layout" : 6
  }, {
    "firstKey" : 52,
    "secondKey" : 32,
    "layout" : 6
  }, {
    "firstKey" : 52,
    "secondKey" : 33,
    "layout" : 6
  }, {
    "firstKey" : 52,
    "secondKey" : 34,
    "layout" : 6
  }, {
    "firstKey" : 52,
    "secondKey" : 35,
    "layout" : 6
  }, {
    "firstKey" : 52,
    "secondKey" : 36,
    "layout" : 6
  }, {
    "firstKey" : 52,
    "secondKey" : 37,
    "layout" : 6
  }, {
    "firstKey" : 52,
    "secondKey" : 38,
    "layout" : 6
  }, {
    "firstKey" : 52,
    "secondKey" : 39,
    "layout" : 6
  }, {
    "firstKey" : 52,
    "secondKey" : 40,
    "layout" : 6
  }, {
    "firstKey" : 52,
    "secondKey" : 41,
    "layout" : 6
  }, {
    "firstKey" : 52,
    "secondKey" : 42,
    "layout" : 6
  }, {
    "firstKey" : 52,
    "secondKey" : 43,
    "layout" : 6
  }, {
    "firstKey" : 52,
    "secondKey" : 44,
    "layout" : 6
  }, {
    "firstKey" : 52,
    "secondKey" : 45,
    "layout" : 6
  }, {
    "firstKey" : 52,
    "secondKey" : 46,
    "layout" : 6
  }, {
    "firstKey" : 52,
    "secondKey" : 47,
    "layout" : 6
  }, {
    "firstKey" : 52,
    "secondKey" : 48,
    "layout" : 6
  }, {
    "firstKey" : 52,
    "secondKey" : 49,
    "layout" : 6
  }, {
    "firstKey" : 52,
    "secondKey" : 50,
    "layout" : 6
  }, {
    "firstKey" : 52,
    "secondKey" : 51,
    "layout" : 6
  }, {
    "firstKey" : 52,
    "secondKey" : 53,
    "layout" : 4
  }, {
    "firstKey" : 52,
    "secondKey" : 54,
    "layout" : 4
  }, {
    "firstKey" : 52,
    "secondKey" : 55,
    "layout" : 4
  }, {
    "firstKey" : 52,
    "secondKey" : 56,
    "layout" : 4
  }, {
    "firstKey" : 52,
    "secondKey" : 57,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 53,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 53,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 53,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 53,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 53,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 53,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 53,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 53,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 53,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 53,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 53,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 53,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 53,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 53,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 53,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 53,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 53,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 53,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 53,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 53,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 53,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 53,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 53,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 53,
    "secondKey" : 25,
    "layout" : 6
  }, {
    "firstKey" : 53,
    "secondKey" : 26,
    "layout" : 6
  }, {
    "firstKey" : 53,
    "secondKey" : 27,
    "layout" : 6
  }, {
    "firstKey" : 53,
    "secondKey" : 28,
    "layout" : 6
  }, {
    "firstKey" : 53,
    "secondKey" : 29,
    "layout" : 6
  }, {
    "firstKey" : 53,
    "secondKey" : 30,
    "layout" : 6
  }, {
    "firstKey" : 53,
    "secondKey" : 31,
    "layout" : 6
  }, {
    "firstKey" : 53,
    "secondKey" : 32,
    "layout" : 6
  }, {
    "firstKey" : 53,
    "secondKey" : 33,
    "layout" : 6
  }, {
    "firstKey" : 53,
    "secondKey" : 34,
    "layout" : 6
  }, {
    "firstKey" : 53,
    "secondKey" : 35,
    "layout" : 6
  }, {
    "firstKey" : 53,
    "secondKey" : 36,
    "layout" : 6
  }, {
    "firstKey" : 53,
    "secondKey" : 37,
    "layout" : 6
  }, {
    "firstKey" : 53,
    "secondKey" : 38,
    "layout" : 6
  }, {
    "firstKey" : 53,
    "secondKey" : 39,
    "layout" : 6
  }, {
    "firstKey" : 53,
    "secondKey" : 40,
    "layout" : 6
  }, {
    "firstKey" : 53,
    "secondKey" : 41,
    "layout" : 6
  }, {
    "firstKey" : 53,
    "secondKey" : 42,
    "layout" : 6
  }, {
    "firstKey" : 53,
    "secondKey" : 43,
    "layout" : 6
  }, {
    "firstKey" : 53,
    "secondKey" : 44,
    "layout" : 6
  }, {
    "firstKey" : 53,
    "secondKey" : 45,
    "layout" : 6
  }, {
    "firstKey" : 53,
    "secondKey" : 46,
    "layout" : 6
  }, {
    "firstKey" : 53,
    "secondKey" : 47,
    "layout" : 6
  }, {
    "firstKey" : 53,
    "secondKey" : 48,
    "layout" : 6
  }, {
    "firstKey" : 53,
    "secondKey" : 49,
    "layout" : 6
  }, {
    "firstKey" : 53,
    "secondKey" : 50,
    "layout" : 6
  }, {
    "firstKey" : 53,
    "secondKey" : 51,
    "layout" : 6
  }, {
    "firstKey" : 53,
    "secondKey" : 52,
    "layout" : 4
  }, {
    "firstKey" : 53,
    "secondKey" : 54,
    "layout" : 4
  }, {
    "firstKey" : 53,
    "secondKey" : 55,
    "layout" : 4
  }, {
    "firstKey" : 53,
    "secondKey" : 56,
    "layout" : 4
  }, {
    "firstKey" : 53,
    "secondKey" : 57,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 54,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 54,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 54,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 54,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 54,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 54,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 54,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 54,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 54,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 54,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 54,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 54,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 54,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 54,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 54,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 54,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 54,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 54,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 54,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 54,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 54,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 54,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 54,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 54,
    "secondKey" : 25,
    "layout" : 6
  }, {
    "firstKey" : 54,
    "secondKey" : 26,
    "layout" : 6
  }, {
    "firstKey" : 54,
    "secondKey" : 27,
    "layout" : 6
  }, {
    "firstKey" : 54,
    "secondKey" : 28,
    "layout" : 6
  }, {
    "firstKey" : 54,
    "secondKey" : 29,
    "layout" : 6
  }, {
    "firstKey" : 54,
    "secondKey" : 30,
    "layout" : 6
  }, {
    "firstKey" : 54,
    "secondKey" : 31,
    "layout" : 6
  }, {
    "firstKey" : 54,
    "secondKey" : 32,
    "layout" : 6
  }, {
    "firstKey" : 54,
    "secondKey" : 33,
    "layout" : 6
  }, {
    "firstKey" : 54,
    "secondKey" : 34,
    "layout" : 6
  }, {
    "firstKey" : 54,
    "secondKey" : 35,
    "layout" : 6
  }, {
    "firstKey" : 54,
    "secondKey" : 36,
    "layout" : 6
  }, {
    "firstKey" : 54,
    "secondKey" : 37,
    "layout" : 6
  }, {
    "firstKey" : 54,
    "secondKey" : 38,
    "layout" : 6
  }, {
    "firstKey" : 54,
    "secondKey" : 39,
    "layout" : 6
  }, {
    "firstKey" : 54,
    "secondKey" : 40,
    "layout" : 6
  }, {
    "firstKey" : 54,
    "secondKey" : 41,
    "layout" : 6
  }, {
    "firstKey" : 54,
    "secondKey" : 42,
    "layout" : 6
  }, {
    "firstKey" : 54,
    "secondKey" : 43,
    "layout" : 6
  }, {
    "firstKey" : 54,
    "secondKey" : 44,
    "layout" : 6
  }, {
    "firstKey" : 54,
    "secondKey" : 45,
    "layout" : 6
  }, {
    "firstKey" : 54,
    "secondKey" : 46,
    "layout" : 6
  }, {
    "firstKey" : 54,
    "secondKey" : 47,
    "layout" : 6
  }, {
    "firstKey" : 54,
    "secondKey" : 48,
    "layout" : 6
  }, {
    "firstKey" : 54,
    "secondKey" : 49,
    "layout" : 6
  }, {
    "firstKey" : 54,
    "secondKey" : 50,
    "layout" : 6
  }, {
    "firstKey" : 54,
    "secondKey" : 51,
    "layout" : 6
  }, {
    "firstKey" : 54,
    "secondKey" : 52,
    "layout" : 4
  }, {
    "firstKey" : 54,
    "secondKey" : 53,
    "layout" : 4
  }, {
    "firstKey" : 54,
    "secondKey" : 55,
    "layout" : 4
  }, {
    "firstKey" : 54,
    "secondKey" : 56,
    "layout" : 4
  }, {
    "firstKey" : 54,
    "secondKey" : 57,
    "layout" : 9
  }, {
    "firstKey" : 55,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 55,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 55,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 55,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 55,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 55,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 55,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 55,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 55,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 55,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 55,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 55,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 55,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 55,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 55,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 55,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 55,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 55,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 55,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 55,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 55,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 55,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 55,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 55,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 55,
    "secondKey" : 24,
    "layout" : 5
  }, {
    "firstKey" : 55,
    "secondKey" : 25,
    "layout" : 5
  }, {
    "firstKey" : 55,
    "secondKey" : 26,
    "layout" : 5
  }, {
    "firstKey" : 55,
    "secondKey" : 27,
    "layout" : 5
  }, {
    "firstKey" : 55,
    "secondKey" : 28,
    "layout" : 5
  }, {
    "firstKey" : 55,
    "secondKey" : 29,
    "layout" : 5
  }, {
    "firstKey" : 55,
    "secondKey" : 30,
    "layout" : 5
  }, {
    "firstKey" : 55,
    "secondKey" : 31,
    "layout" : 5
  }, {
    "firstKey" : 55,
    "secondKey" : 32,
    "layout" : 5
  }, {
    "firstKey" : 55,
    "secondKey" : 33,
    "layout" : 5
  }, {
    "firstKey" : 55,
    "secondKey" : 34,
    "layout" : 5
  }, {
    "firstKey" : 55,
    "secondKey" : 35,
    "layout" : 5
  }, {
    "firstKey" : 55,
    "secondKey" : 36,
    "layout" : 5
  }, {
    "firstKey" : 55,
    "secondKey" : 37,
    "layout" : 5
  }, {
    "firstKey" : 55,
    "secondKey" : 38,
    "layout" : 5
  }, {
    "firstKey" : 55,
    "secondKey" : 39,
    "layout" : 5
  }, {
    "firstKey" : 55,
    "secondKey" : 40,
    "layout" : 5
  }, {
    "firstKey" : 55,
    "secondKey" : 41,
    "layout" : 5
  }, {
    "firstKey" : 55,
    "secondKey" : 42,
    "layout" : 5
  }, {
    "firstKey" : 55,
    "secondKey" : 43,
    "layout" : 5
  }, {
    "firstKey" : 55,
    "secondKey" : 44,
    "layout" : 5
  }, {
    "firstKey" : 55,
    "secondKey" : 45,
    "layout" : 5
  }, {
    "firstKey" : 55,
    "secondKey" : 46,
    "layout" : 5
  }, {
    "firstKey" : 55,
    "secondKey" : 47,
    "layout" : 5
  }, {
    "firstKey" : 55,
    "secondKey" : 48,
    "layout" : 5
  }, {
    "firstKey" : 55,
    "secondKey" : 49,
    "layout" : 5
  }, {
    "firstKey" : 55,
    "secondKey" : 50,
    "layout" : 5
  }, {
    "firstKey" : 55,
    "secondKey" : 51,
    "layout" : 5
  }, {
    "firstKey" : 55,
    "secondKey" : 52,
    "layout" : 3
  }, {
    "firstKey" : 55,
    "secondKey" : 53,
    "layout" : 3
  }, {
    "firstKey" : 55,
    "secondKey" : 54,
    "layout" : 3
  }, {
    "firstKey" : 55,
    "secondKey" : 56,
    "layout" : 2
  }, {
    "firstKey" : 55,
    "secondKey" : 57,
    "layout" : 8
  }, {
    "firstKey" : 56,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 56,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 56,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 56,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 56,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 56,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 56,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 56,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 56,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 56,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 56,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 56,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 56,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 56,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 56,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 56,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 56,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 56,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 56,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 56,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 56,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 56,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 56,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 56,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 56,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 56,
    "secondKey" : 25,
    "layout" : 6
  }, {
    "firstKey" : 56,
    "secondKey" : 26,
    "layout" : 6
  }, {
    "firstKey" : 56,
    "secondKey" : 27,
    "layout" : 6
  }, {
    "firstKey" : 56,
    "secondKey" : 28,
    "layout" : 6
  }, {
    "firstKey" : 56,
    "secondKey" : 29,
    "layout" : 6
  }, {
    "firstKey" : 56,
    "secondKey" : 30,
    "layout" : 6
  }, {
    "firstKey" : 56,
    "secondKey" : 31,
    "layout" : 6
  }, {
    "firstKey" : 56,
    "secondKey" : 32,
    "layout" : 6
  }, {
    "firstKey" : 56,
    "secondKey" : 33,
    "layout" : 6
  }, {
    "firstKey" : 56,
    "secondKey" : 34,
    "layout" : 6
  }, {
    "firstKey" : 56,
    "secondKey" : 35,
    "layout" : 6
  }, {
    "firstKey" : 56,
    "secondKey" : 36,
    "layout" : 6
  }, {
    "firstKey" : 56,
    "secondKey" : 37,
    "layout" : 6
  }, {
    "firstKey" : 56,
    "secondKey" : 38,
    "layout" : 6
  }, {
    "firstKey" : 56,
    "secondKey" : 39,
    "layout" : 6
  }, {
    "firstKey" : 56,
    "secondKey" : 40,
    "layout" : 6
  }, {
    "firstKey" : 56,
    "secondKey" : 41,
    "layout" : 6
  }, {
    "firstKey" : 56,
    "secondKey" : 42,
    "layout" : 6
  }, {
    "firstKey" : 56,
    "secondKey" : 43,
    "layout" : 6
  }, {
    "firstKey" : 56,
    "secondKey" : 44,
    "layout" : 6
  }, {
    "firstKey" : 56,
    "secondKey" : 45,
    "layout" : 6
  }, {
    "firstKey" : 56,
    "secondKey" : 46,
    "layout" : 6
  }, {
    "firstKey" : 56,
    "secondKey" : 47,
    "layout" : 6
  }, {
    "firstKey" : 56,
    "secondKey" : 48,
    "layout" : 6
  }, {
    "firstKey" : 56,
    "secondKey" : 49,
    "layout" : 6
  }, {
    "firstKey" : 56,
    "secondKey" : 50,
    "layout" : 6
  }, {
    "firstKey" : 56,
    "secondKey" : 51,
    "layout" : 6
  }, {
    "firstKey" : 56,
    "secondKey" : 52,
    "layout" : 4
  }, {
    "firstKey" : 56,
    "secondKey" : 53,
    "layout" : 4
  }, {
    "firstKey" : 56,
    "secondKey" : 54,
    "layout" : 4
  }, {
    "firstKey" : 56,
    "secondKey" : 55,
    "layout" : 3
  }, {
    "firstKey" : 56,
    "secondKey" : 57,
    "layout" : 9
  }, {
    "firstKey" : 57,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 57,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 57,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 57,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 57,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 57,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 57,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 57,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 57,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 57,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 57,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 57,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 57,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 57,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 57,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 57,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 57,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 57,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 57,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 57,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 57,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 57,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 57,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 57,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 57,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 57,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 57,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 57,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 57,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 57,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 57,
    "secondKey" : 30,
    "layout" : 2
  }, {
    "firstKey" : 57,
    "secondKey" : 31,
    "layout" : 2
  }, {
    "firstKey" : 57,
    "secondKey" : 32,
    "layout" : 2
  }, {
    "firstKey" : 57,
    "secondKey" : 33,
    "layout" : 2
  }, {
    "firstKey" : 57,
    "secondKey" : 34,
    "layout" : 2
  }, {
    "firstKey" : 57,
    "secondKey" : 35,
    "layout" : 2
  }, {
    "firstKey" : 57,
    "secondKey" : 36,
    "layout" : 2
  }, {
    "firstKey" : 57,
    "secondKey" : 37,
    "layout" : 2
  }, {
    "firstKey" : 57,
    "secondKey" : 38,
    "layout" : 2
  }, {
    "firstKey" : 57,
    "secondKey" : 39,
    "layout" : 2
  }, {
    "firstKey" : 57,
    "secondKey" : 40,
    "layout" : 2
  }, {
    "firstKey" : 57,
    "secondKey" : 41,
    "layout" : 2
  }, {
    "firstKey" : 57,
    "secondKey" : 42,
    "layout" : 2
  }, {
    "firstKey" : 57,
    "secondKey" : 43,
    "layout" : 2
  }, {
    "firstKey" : 57,
    "secondKey" : 44,
    "layout" : 2
  }, {
    "firstKey" : 57,
    "secondKey" : 45,
    "layout" : 2
  }, {
    "firstKey" : 57,
    "secondKey" : 46,
    "layout" : 2
  }, {
    "firstKey" : 57,
    "secondKey" : 47,
    "layout" : 2
  }, {
    "firstKey" : 57,
    "secondKey" : 48,
    "layout" : 2
  }, {
    "firstKey" : 57,
    "secondKey" : 49,
    "layout" : 2
  }, {
    "firstKey" : 57,
    "secondKey" : 50,
    "layout" : 2
  }, {
    "firstKey" : 57,
    "secondKey" : 51,
    "layout" : 2
  }, {
    "firstKey" : 57,
    "secondKey" : 52,
    "layout" : 2
  }, {
    "firstKey" : 57,
    "secondKey" : 53,
    "layout" : 2
  }, {
    "firstKey" : 57,
    "secondKey" : 54,
    "layout" : 2
  }, {
    "firstKey" : 57,
    "secondKey" : 55,
    "layout" : 2
  }, {
    "firstKey" : 57,
    "secondKey" : 56,
    "layout" : 2
  } ]
}