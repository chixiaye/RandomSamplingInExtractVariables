{
  "id" : 310,
  "expression" : "EventType.NodeDeleted",
  "projectName" : "apache@zookeeper",
  "commitID" : "c6639c9842973a7954c8baa412d6825cb833d51f",
  "filePath" : "/src/java/test/org/apache/zookeeper/test/ZooKeeperTestClient.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "EventType.NodeDeleted",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 269,
      "startColumnNumber" : 29,
      "endLineNumber" : 269,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 269,
        "startColumnNumber" : 10,
        "endLineNumber" : 269,
        "endColumnNumber" : 50
      },
      "nodeContext" : "event.getType() == EventType.NodeDeleted",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 269,
        "startColumnNumber" : 10,
        "endLineNumber" : 270,
        "endColumnNumber" : 53
      },
      "nodeContext" : "event.getType() == EventType.NodeDeleted && event.getPath().equalsIgnoreCase(nodeName)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 269,
        "startColumnNumber" : 9,
        "endLineNumber" : 270,
        "endColumnNumber" : 54
      },
      "nodeContext" : "(event.getType() == EventType.NodeDeleted && event.getPath().equalsIgnoreCase(nodeName))",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 221,
        "startLineNumber" : 267,
        "startColumnNumber" : 10,
        "endLineNumber" : 270,
        "endColumnNumber" : 54
      },
      "nodeContext" : "(event.getType() == EventType.NodeChildrenChanged && event.getPath().equalsIgnoreCase(parentName)) || (event.getType() == EventType.NodeDeleted && event.getPath().equalsIgnoreCase(nodeName))",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 31,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 223,
        "startLineNumber" : 267,
        "startColumnNumber" : 9,
        "endLineNumber" : 270,
        "endColumnNumber" : 55
      },
      "nodeContext" : "((event.getType() == EventType.NodeChildrenChanged && event.getPath().equalsIgnoreCase(parentName)) || (event.getType() == EventType.NodeDeleted && event.getPath().equalsIgnoreCase(nodeName)))",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 32,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 224,
        "startLineNumber" : 267,
        "startColumnNumber" : 8,
        "endLineNumber" : 270,
        "endColumnNumber" : 55
      },
      "nodeContext" : "!((event.getType() == EventType.NodeChildrenChanged && event.getPath().equalsIgnoreCase(parentName)) || (event.getType() == EventType.NodeDeleted && event.getPath().equalsIgnoreCase(nodeName)))",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 33,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 441,
        "startLineNumber" : 267,
        "startColumnNumber" : 4,
        "endLineNumber" : 274,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!((event.getType() == EventType.NodeChildrenChanged && event.getPath().equalsIgnoreCase(parentName)) || (event.getType() == EventType.NodeDeleted && event.getPath().equalsIgnoreCase(nodeName)))) {\n  System.out.print(parentName + \" \" + EventType.NodeChildrenChanged+ \" \"+ nodeName+ \" \"+ EventType.NodeDeleted);\n  fail(\"Unexpected first event was delivered: \" + event.toString());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 61,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4858,
        "startLineNumber" : 160,
        "startColumnNumber" : 48,
        "endLineNumber" : 300,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  checkRoot();\n  String parentName=testDirOnZK;\n  String nodeName=parentName + \"/enode_abc\";\n  ZooKeeper zk=new ZooKeeper(hostPort,10000,this);\n  ZooKeeper zk_1=new ZooKeeper(hostPort,10000,this);\n  Stat stat=zk_1.exists(parentName,false);\n  if (stat == null) {\n    try {\n      zk.create(parentName,null,Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    }\n catch (    KeeperException ke) {\n      fail(\"Creating node \" + parentName + ke.getMessage());\n    }\n  }\n  stat=zk_1.exists(nodeName,false);\n  if (stat != null) {\n    try {\n      zk.delete(nodeName,-1);\n    }\n catch (    KeeperException ke) {\n      Code code=ke.code();\n      boolean valid=code == KeeperException.Code.NONODE || code == KeeperException.Code.NOTEMPTY;\n      if (!valid) {\n        fail(\"Unexpected exception code for delete: \" + ke.getMessage());\n      }\n    }\n  }\n  List<String> firstGen=zk_1.getChildren(parentName,true);\n  try {\n    zk.create(nodeName,null,Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  }\n catch (  KeeperException ke) {\n    Code code=ke.code();\n    boolean valid=code == KeeperException.Code.NODEEXISTS;\n    if (!valid) {\n      fail(\"Unexpected exception code for createin: \" + ke.getMessage());\n    }\n  }\n  Thread.sleep(5000);\n  WatchedEvent event=events.poll(10,TimeUnit.SECONDS);\n  if (event == null) {\n    throw new IOException(\"No event was delivered promptly\");\n  }\n  if (event.getType() != EventType.NodeChildrenChanged || !event.getPath().equalsIgnoreCase(parentName)) {\n    fail(\"Unexpected event was delivered: \" + event.toString());\n  }\n  stat=zk_1.exists(nodeName,false);\n  if (stat == null) {\n    fail(\"node \" + nodeName + \" should exist\");\n  }\n  try {\n    zk.delete(parentName,-1);\n    fail(\"Should be impossible to delete a non-empty node \" + parentName);\n  }\n catch (  KeeperException ke) {\n    Code code=ke.code();\n    boolean valid=code == KeeperException.Code.NOTEMPTY;\n    if (!valid) {\n      fail(\"Unexpected exception code for delete: \" + code);\n    }\n  }\n  try {\n    zk.create(nodeName + \"/def\",null,Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n    fail(\"Should be impossible to create child off Ephemeral node \" + nodeName);\n  }\n catch (  KeeperException ke) {\n    Code code=ke.code();\n    boolean valid=code == KeeperException.Code.NOCHILDRENFOREPHEMERALS;\n    if (!valid) {\n      fail(\"Unexpected exception code for createin: \" + code);\n    }\n  }\n  try {\n    List<String> children=zk.getChildren(nodeName,false);\n    if (children.size() > 0) {\n      fail(\"ephemeral node \" + nodeName + \" should not have children\");\n    }\n  }\n catch (  KeeperException ke) {\n    Code code=ke.code();\n    boolean valid=code == KeeperException.Code.NONODE;\n    if (!valid) {\n      fail(\"Unexpected exception code for createin: \" + code);\n    }\n  }\n  firstGen=zk_1.getChildren(parentName,true);\n  stat=zk_1.exists(nodeName,true);\n  if (stat == null) {\n    fail(\"node \" + nodeName + \" should exist\");\n  }\n  System.out.println(\"session id of zk: \" + zk.getSessionId());\n  System.out.println(\"session id of zk_1: \" + zk_1.getSessionId());\n  zk.close();\n  stat=zk_1.exists(\"nosuchnode\",false);\n  event=this.getEvent(10);\n  if (event == null) {\n    throw new AssertionFailedError(\"First event was not delivered promptly\");\n  }\n  if (!((event.getType() == EventType.NodeChildrenChanged && event.getPath().equalsIgnoreCase(parentName)) || (event.getType() == EventType.NodeDeleted && event.getPath().equalsIgnoreCase(nodeName)))) {\n    System.out.print(parentName + \" \" + EventType.NodeChildrenChanged+ \" \"+ nodeName+ \" \"+ EventType.NodeDeleted);\n    fail(\"Unexpected first event was delivered: \" + event.toString());\n  }\n  event=this.getEvent(10);\n  if (event == null) {\n    throw new AssertionFailedError(\"Second event was not delivered promptly\");\n  }\n  if (!((event.getType() == EventType.NodeChildrenChanged && event.getPath().equalsIgnoreCase(parentName)) || (event.getType() == EventType.NodeDeleted && event.getPath().equalsIgnoreCase(nodeName)))) {\n    System.out.print(parentName + \" \" + EventType.NodeChildrenChanged+ \" \"+ nodeName+ \" \"+ EventType.NodeDeleted);\n    fail(\"Unexpected second event was delivered: \" + event.toString());\n  }\n  firstGen=zk_1.getChildren(parentName,false);\n  stat=zk_1.exists(nodeName,false);\n  if (stat != null) {\n    fail(\"node \" + nodeName + \" should have been deleted\");\n  }\n  if (firstGen.contains(nodeName)) {\n    fail(\"node \" + nodeName + \" should not be a children\");\n  }\n  deleteZKDir(zk_1,nodeName);\n  zk_1.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 726,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4954,
        "startLineNumber" : 159,
        "startColumnNumber" : 2,
        "endLineNumber" : 300,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void enode_test_2() throws IOException, InterruptedException, KeeperException {\n  checkRoot();\n  String parentName=testDirOnZK;\n  String nodeName=parentName + \"/enode_abc\";\n  ZooKeeper zk=new ZooKeeper(hostPort,10000,this);\n  ZooKeeper zk_1=new ZooKeeper(hostPort,10000,this);\n  Stat stat=zk_1.exists(parentName,false);\n  if (stat == null) {\n    try {\n      zk.create(parentName,null,Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    }\n catch (    KeeperException ke) {\n      fail(\"Creating node \" + parentName + ke.getMessage());\n    }\n  }\n  stat=zk_1.exists(nodeName,false);\n  if (stat != null) {\n    try {\n      zk.delete(nodeName,-1);\n    }\n catch (    KeeperException ke) {\n      Code code=ke.code();\n      boolean valid=code == KeeperException.Code.NONODE || code == KeeperException.Code.NOTEMPTY;\n      if (!valid) {\n        fail(\"Unexpected exception code for delete: \" + ke.getMessage());\n      }\n    }\n  }\n  List<String> firstGen=zk_1.getChildren(parentName,true);\n  try {\n    zk.create(nodeName,null,Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  }\n catch (  KeeperException ke) {\n    Code code=ke.code();\n    boolean valid=code == KeeperException.Code.NODEEXISTS;\n    if (!valid) {\n      fail(\"Unexpected exception code for createin: \" + ke.getMessage());\n    }\n  }\n  Thread.sleep(5000);\n  WatchedEvent event=events.poll(10,TimeUnit.SECONDS);\n  if (event == null) {\n    throw new IOException(\"No event was delivered promptly\");\n  }\n  if (event.getType() != EventType.NodeChildrenChanged || !event.getPath().equalsIgnoreCase(parentName)) {\n    fail(\"Unexpected event was delivered: \" + event.toString());\n  }\n  stat=zk_1.exists(nodeName,false);\n  if (stat == null) {\n    fail(\"node \" + nodeName + \" should exist\");\n  }\n  try {\n    zk.delete(parentName,-1);\n    fail(\"Should be impossible to delete a non-empty node \" + parentName);\n  }\n catch (  KeeperException ke) {\n    Code code=ke.code();\n    boolean valid=code == KeeperException.Code.NOTEMPTY;\n    if (!valid) {\n      fail(\"Unexpected exception code for delete: \" + code);\n    }\n  }\n  try {\n    zk.create(nodeName + \"/def\",null,Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n    fail(\"Should be impossible to create child off Ephemeral node \" + nodeName);\n  }\n catch (  KeeperException ke) {\n    Code code=ke.code();\n    boolean valid=code == KeeperException.Code.NOCHILDRENFOREPHEMERALS;\n    if (!valid) {\n      fail(\"Unexpected exception code for createin: \" + code);\n    }\n  }\n  try {\n    List<String> children=zk.getChildren(nodeName,false);\n    if (children.size() > 0) {\n      fail(\"ephemeral node \" + nodeName + \" should not have children\");\n    }\n  }\n catch (  KeeperException ke) {\n    Code code=ke.code();\n    boolean valid=code == KeeperException.Code.NONODE;\n    if (!valid) {\n      fail(\"Unexpected exception code for createin: \" + code);\n    }\n  }\n  firstGen=zk_1.getChildren(parentName,true);\n  stat=zk_1.exists(nodeName,true);\n  if (stat == null) {\n    fail(\"node \" + nodeName + \" should exist\");\n  }\n  System.out.println(\"session id of zk: \" + zk.getSessionId());\n  System.out.println(\"session id of zk_1: \" + zk_1.getSessionId());\n  zk.close();\n  stat=zk_1.exists(\"nosuchnode\",false);\n  event=this.getEvent(10);\n  if (event == null) {\n    throw new AssertionFailedError(\"First event was not delivered promptly\");\n  }\n  if (!((event.getType() == EventType.NodeChildrenChanged && event.getPath().equalsIgnoreCase(parentName)) || (event.getType() == EventType.NodeDeleted && event.getPath().equalsIgnoreCase(nodeName)))) {\n    System.out.print(parentName + \" \" + EventType.NodeChildrenChanged+ \" \"+ nodeName+ \" \"+ EventType.NodeDeleted);\n    fail(\"Unexpected first event was delivered: \" + event.toString());\n  }\n  event=this.getEvent(10);\n  if (event == null) {\n    throw new AssertionFailedError(\"Second event was not delivered promptly\");\n  }\n  if (!((event.getType() == EventType.NodeChildrenChanged && event.getPath().equalsIgnoreCase(parentName)) || (event.getType() == EventType.NodeDeleted && event.getPath().equalsIgnoreCase(nodeName)))) {\n    System.out.print(parentName + \" \" + EventType.NodeChildrenChanged+ \" \"+ nodeName+ \" \"+ EventType.NodeDeleted);\n    fail(\"Unexpected second event was delivered: \" + event.toString());\n  }\n  firstGen=zk_1.getChildren(parentName,false);\n  stat=zk_1.exists(nodeName,false);\n  if (stat != null) {\n    fail(\"node \" + nodeName + \" should have been deleted\");\n  }\n  if (firstGen.contains(nodeName)) {\n    fail(\"node \" + nodeName + \" should not be a children\");\n  }\n  deleteZKDir(zk_1,nodeName);\n  zk_1.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 736,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 269,
        "startColumnNumber" : 10,
        "endLineNumber" : 269,
        "endColumnNumber" : 50
      },
      "nodeContext" : "event.getType() == EventType.NodeDeleted",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "org.apache.zookeeper.Watcher.Event.EventType"
  }, {
    "nodeContext" : "EventType.NodeDeleted",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 272,
      "startColumnNumber" : 67,
      "endLineNumber" : 272,
      "endColumnNumber" : 88
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 271,
        "startColumnNumber" : 23,
        "endLineNumber" : 272,
        "endColumnNumber" : 88
      },
      "nodeContext" : "parentName + \" \" + EventType.NodeChildrenChanged+ \" \"+ nodeName+ \" \"+ EventType.NodeDeleted",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 123,
        "startLineNumber" : 271,
        "startColumnNumber" : 6,
        "endLineNumber" : 272,
        "endColumnNumber" : 89
      },
      "nodeContext" : "System.out.print(parentName + \" \" + EventType.NodeChildrenChanged+ \" \"+ nodeName+ \" \"+ EventType.NodeDeleted)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 271,
        "startColumnNumber" : 6,
        "endLineNumber" : 272,
        "endColumnNumber" : 90
      },
      "nodeContext" : "System.out.print(parentName + \" \" + EventType.NodeChildrenChanged+ \" \"+ nodeName+ \" \"+ EventType.NodeDeleted);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 211,
        "startLineNumber" : 270,
        "startColumnNumber" : 57,
        "endLineNumber" : 274,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  System.out.print(parentName + \" \" + EventType.NodeChildrenChanged+ \" \"+ nodeName+ \" \"+ EventType.NodeDeleted);\n  fail(\"Unexpected first event was delivered: \" + event.toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 27,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 441,
        "startLineNumber" : 267,
        "startColumnNumber" : 4,
        "endLineNumber" : 274,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!((event.getType() == EventType.NodeChildrenChanged && event.getPath().equalsIgnoreCase(parentName)) || (event.getType() == EventType.NodeDeleted && event.getPath().equalsIgnoreCase(nodeName)))) {\n  System.out.print(parentName + \" \" + EventType.NodeChildrenChanged+ \" \"+ nodeName+ \" \"+ EventType.NodeDeleted);\n  fail(\"Unexpected first event was delivered: \" + event.toString());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 61,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4858,
        "startLineNumber" : 160,
        "startColumnNumber" : 48,
        "endLineNumber" : 300,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  checkRoot();\n  String parentName=testDirOnZK;\n  String nodeName=parentName + \"/enode_abc\";\n  ZooKeeper zk=new ZooKeeper(hostPort,10000,this);\n  ZooKeeper zk_1=new ZooKeeper(hostPort,10000,this);\n  Stat stat=zk_1.exists(parentName,false);\n  if (stat == null) {\n    try {\n      zk.create(parentName,null,Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    }\n catch (    KeeperException ke) {\n      fail(\"Creating node \" + parentName + ke.getMessage());\n    }\n  }\n  stat=zk_1.exists(nodeName,false);\n  if (stat != null) {\n    try {\n      zk.delete(nodeName,-1);\n    }\n catch (    KeeperException ke) {\n      Code code=ke.code();\n      boolean valid=code == KeeperException.Code.NONODE || code == KeeperException.Code.NOTEMPTY;\n      if (!valid) {\n        fail(\"Unexpected exception code for delete: \" + ke.getMessage());\n      }\n    }\n  }\n  List<String> firstGen=zk_1.getChildren(parentName,true);\n  try {\n    zk.create(nodeName,null,Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  }\n catch (  KeeperException ke) {\n    Code code=ke.code();\n    boolean valid=code == KeeperException.Code.NODEEXISTS;\n    if (!valid) {\n      fail(\"Unexpected exception code for createin: \" + ke.getMessage());\n    }\n  }\n  Thread.sleep(5000);\n  WatchedEvent event=events.poll(10,TimeUnit.SECONDS);\n  if (event == null) {\n    throw new IOException(\"No event was delivered promptly\");\n  }\n  if (event.getType() != EventType.NodeChildrenChanged || !event.getPath().equalsIgnoreCase(parentName)) {\n    fail(\"Unexpected event was delivered: \" + event.toString());\n  }\n  stat=zk_1.exists(nodeName,false);\n  if (stat == null) {\n    fail(\"node \" + nodeName + \" should exist\");\n  }\n  try {\n    zk.delete(parentName,-1);\n    fail(\"Should be impossible to delete a non-empty node \" + parentName);\n  }\n catch (  KeeperException ke) {\n    Code code=ke.code();\n    boolean valid=code == KeeperException.Code.NOTEMPTY;\n    if (!valid) {\n      fail(\"Unexpected exception code for delete: \" + code);\n    }\n  }\n  try {\n    zk.create(nodeName + \"/def\",null,Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n    fail(\"Should be impossible to create child off Ephemeral node \" + nodeName);\n  }\n catch (  KeeperException ke) {\n    Code code=ke.code();\n    boolean valid=code == KeeperException.Code.NOCHILDRENFOREPHEMERALS;\n    if (!valid) {\n      fail(\"Unexpected exception code for createin: \" + code);\n    }\n  }\n  try {\n    List<String> children=zk.getChildren(nodeName,false);\n    if (children.size() > 0) {\n      fail(\"ephemeral node \" + nodeName + \" should not have children\");\n    }\n  }\n catch (  KeeperException ke) {\n    Code code=ke.code();\n    boolean valid=code == KeeperException.Code.NONODE;\n    if (!valid) {\n      fail(\"Unexpected exception code for createin: \" + code);\n    }\n  }\n  firstGen=zk_1.getChildren(parentName,true);\n  stat=zk_1.exists(nodeName,true);\n  if (stat == null) {\n    fail(\"node \" + nodeName + \" should exist\");\n  }\n  System.out.println(\"session id of zk: \" + zk.getSessionId());\n  System.out.println(\"session id of zk_1: \" + zk_1.getSessionId());\n  zk.close();\n  stat=zk_1.exists(\"nosuchnode\",false);\n  event=this.getEvent(10);\n  if (event == null) {\n    throw new AssertionFailedError(\"First event was not delivered promptly\");\n  }\n  if (!((event.getType() == EventType.NodeChildrenChanged && event.getPath().equalsIgnoreCase(parentName)) || (event.getType() == EventType.NodeDeleted && event.getPath().equalsIgnoreCase(nodeName)))) {\n    System.out.print(parentName + \" \" + EventType.NodeChildrenChanged+ \" \"+ nodeName+ \" \"+ EventType.NodeDeleted);\n    fail(\"Unexpected first event was delivered: \" + event.toString());\n  }\n  event=this.getEvent(10);\n  if (event == null) {\n    throw new AssertionFailedError(\"Second event was not delivered promptly\");\n  }\n  if (!((event.getType() == EventType.NodeChildrenChanged && event.getPath().equalsIgnoreCase(parentName)) || (event.getType() == EventType.NodeDeleted && event.getPath().equalsIgnoreCase(nodeName)))) {\n    System.out.print(parentName + \" \" + EventType.NodeChildrenChanged+ \" \"+ nodeName+ \" \"+ EventType.NodeDeleted);\n    fail(\"Unexpected second event was delivered: \" + event.toString());\n  }\n  firstGen=zk_1.getChildren(parentName,false);\n  stat=zk_1.exists(nodeName,false);\n  if (stat != null) {\n    fail(\"node \" + nodeName + \" should have been deleted\");\n  }\n  if (firstGen.contains(nodeName)) {\n    fail(\"node \" + nodeName + \" should not be a children\");\n  }\n  deleteZKDir(zk_1,nodeName);\n  zk_1.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 726,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4954,
        "startLineNumber" : 159,
        "startColumnNumber" : 2,
        "endLineNumber" : 300,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void enode_test_2() throws IOException, InterruptedException, KeeperException {\n  checkRoot();\n  String parentName=testDirOnZK;\n  String nodeName=parentName + \"/enode_abc\";\n  ZooKeeper zk=new ZooKeeper(hostPort,10000,this);\n  ZooKeeper zk_1=new ZooKeeper(hostPort,10000,this);\n  Stat stat=zk_1.exists(parentName,false);\n  if (stat == null) {\n    try {\n      zk.create(parentName,null,Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    }\n catch (    KeeperException ke) {\n      fail(\"Creating node \" + parentName + ke.getMessage());\n    }\n  }\n  stat=zk_1.exists(nodeName,false);\n  if (stat != null) {\n    try {\n      zk.delete(nodeName,-1);\n    }\n catch (    KeeperException ke) {\n      Code code=ke.code();\n      boolean valid=code == KeeperException.Code.NONODE || code == KeeperException.Code.NOTEMPTY;\n      if (!valid) {\n        fail(\"Unexpected exception code for delete: \" + ke.getMessage());\n      }\n    }\n  }\n  List<String> firstGen=zk_1.getChildren(parentName,true);\n  try {\n    zk.create(nodeName,null,Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  }\n catch (  KeeperException ke) {\n    Code code=ke.code();\n    boolean valid=code == KeeperException.Code.NODEEXISTS;\n    if (!valid) {\n      fail(\"Unexpected exception code for createin: \" + ke.getMessage());\n    }\n  }\n  Thread.sleep(5000);\n  WatchedEvent event=events.poll(10,TimeUnit.SECONDS);\n  if (event == null) {\n    throw new IOException(\"No event was delivered promptly\");\n  }\n  if (event.getType() != EventType.NodeChildrenChanged || !event.getPath().equalsIgnoreCase(parentName)) {\n    fail(\"Unexpected event was delivered: \" + event.toString());\n  }\n  stat=zk_1.exists(nodeName,false);\n  if (stat == null) {\n    fail(\"node \" + nodeName + \" should exist\");\n  }\n  try {\n    zk.delete(parentName,-1);\n    fail(\"Should be impossible to delete a non-empty node \" + parentName);\n  }\n catch (  KeeperException ke) {\n    Code code=ke.code();\n    boolean valid=code == KeeperException.Code.NOTEMPTY;\n    if (!valid) {\n      fail(\"Unexpected exception code for delete: \" + code);\n    }\n  }\n  try {\n    zk.create(nodeName + \"/def\",null,Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n    fail(\"Should be impossible to create child off Ephemeral node \" + nodeName);\n  }\n catch (  KeeperException ke) {\n    Code code=ke.code();\n    boolean valid=code == KeeperException.Code.NOCHILDRENFOREPHEMERALS;\n    if (!valid) {\n      fail(\"Unexpected exception code for createin: \" + code);\n    }\n  }\n  try {\n    List<String> children=zk.getChildren(nodeName,false);\n    if (children.size() > 0) {\n      fail(\"ephemeral node \" + nodeName + \" should not have children\");\n    }\n  }\n catch (  KeeperException ke) {\n    Code code=ke.code();\n    boolean valid=code == KeeperException.Code.NONODE;\n    if (!valid) {\n      fail(\"Unexpected exception code for createin: \" + code);\n    }\n  }\n  firstGen=zk_1.getChildren(parentName,true);\n  stat=zk_1.exists(nodeName,true);\n  if (stat == null) {\n    fail(\"node \" + nodeName + \" should exist\");\n  }\n  System.out.println(\"session id of zk: \" + zk.getSessionId());\n  System.out.println(\"session id of zk_1: \" + zk_1.getSessionId());\n  zk.close();\n  stat=zk_1.exists(\"nosuchnode\",false);\n  event=this.getEvent(10);\n  if (event == null) {\n    throw new AssertionFailedError(\"First event was not delivered promptly\");\n  }\n  if (!((event.getType() == EventType.NodeChildrenChanged && event.getPath().equalsIgnoreCase(parentName)) || (event.getType() == EventType.NodeDeleted && event.getPath().equalsIgnoreCase(nodeName)))) {\n    System.out.print(parentName + \" \" + EventType.NodeChildrenChanged+ \" \"+ nodeName+ \" \"+ EventType.NodeDeleted);\n    fail(\"Unexpected first event was delivered: \" + event.toString());\n  }\n  event=this.getEvent(10);\n  if (event == null) {\n    throw new AssertionFailedError(\"Second event was not delivered promptly\");\n  }\n  if (!((event.getType() == EventType.NodeChildrenChanged && event.getPath().equalsIgnoreCase(parentName)) || (event.getType() == EventType.NodeDeleted && event.getPath().equalsIgnoreCase(nodeName)))) {\n    System.out.print(parentName + \" \" + EventType.NodeChildrenChanged+ \" \"+ nodeName+ \" \"+ EventType.NodeDeleted);\n    fail(\"Unexpected second event was delivered: \" + event.toString());\n  }\n  firstGen=zk_1.getChildren(parentName,false);\n  stat=zk_1.exists(nodeName,false);\n  if (stat != null) {\n    fail(\"node \" + nodeName + \" should have been deleted\");\n  }\n  if (firstGen.contains(nodeName)) {\n    fail(\"node \" + nodeName + \" should not be a children\");\n  }\n  deleteZKDir(zk_1,nodeName);\n  zk_1.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 736,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 271,
        "startColumnNumber" : 23,
        "endLineNumber" : 272,
        "endColumnNumber" : 88
      },
      "nodeContext" : "parentName + \" \" + EventType.NodeChildrenChanged+ \" \"+ nodeName+ \" \"+ EventType.NodeDeleted",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "org.apache.zookeeper.Watcher.Event.EventType"
  }, {
    "nodeContext" : "EventType.NodeDeleted",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 283,
      "startColumnNumber" : 26,
      "endLineNumber" : 283,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 283,
        "startColumnNumber" : 7,
        "endLineNumber" : 283,
        "endColumnNumber" : 47
      },
      "nodeContext" : "event.getType() == EventType.NodeDeleted",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 283,
        "startColumnNumber" : 7,
        "endLineNumber" : 284,
        "endColumnNumber" : 50
      },
      "nodeContext" : "event.getType() == EventType.NodeDeleted && event.getPath().equalsIgnoreCase(nodeName)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 283,
        "startColumnNumber" : 6,
        "endLineNumber" : 284,
        "endColumnNumber" : 51
      },
      "nodeContext" : "(event.getType() == EventType.NodeDeleted && event.getPath().equalsIgnoreCase(nodeName))",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 212,
        "startLineNumber" : 281,
        "startColumnNumber" : 10,
        "endLineNumber" : 284,
        "endColumnNumber" : 51
      },
      "nodeContext" : "(event.getType() == EventType.NodeChildrenChanged && event.getPath().equalsIgnoreCase(parentName)) || (event.getType() == EventType.NodeDeleted && event.getPath().equalsIgnoreCase(nodeName))",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 31,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 214,
        "startLineNumber" : 281,
        "startColumnNumber" : 9,
        "endLineNumber" : 284,
        "endColumnNumber" : 52
      },
      "nodeContext" : "((event.getType() == EventType.NodeChildrenChanged && event.getPath().equalsIgnoreCase(parentName)) || (event.getType() == EventType.NodeDeleted && event.getPath().equalsIgnoreCase(nodeName)))",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 32,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 215,
        "startLineNumber" : 281,
        "startColumnNumber" : 8,
        "endLineNumber" : 284,
        "endColumnNumber" : 52
      },
      "nodeContext" : "!((event.getType() == EventType.NodeChildrenChanged && event.getPath().equalsIgnoreCase(parentName)) || (event.getType() == EventType.NodeDeleted && event.getPath().equalsIgnoreCase(nodeName)))",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 33,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 433,
        "startLineNumber" : 281,
        "startColumnNumber" : 4,
        "endLineNumber" : 288,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!((event.getType() == EventType.NodeChildrenChanged && event.getPath().equalsIgnoreCase(parentName)) || (event.getType() == EventType.NodeDeleted && event.getPath().equalsIgnoreCase(nodeName)))) {\n  System.out.print(parentName + \" \" + EventType.NodeChildrenChanged+ \" \"+ nodeName+ \" \"+ EventType.NodeDeleted);\n  fail(\"Unexpected second event was delivered: \" + event.toString());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 61,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4858,
        "startLineNumber" : 160,
        "startColumnNumber" : 48,
        "endLineNumber" : 300,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  checkRoot();\n  String parentName=testDirOnZK;\n  String nodeName=parentName + \"/enode_abc\";\n  ZooKeeper zk=new ZooKeeper(hostPort,10000,this);\n  ZooKeeper zk_1=new ZooKeeper(hostPort,10000,this);\n  Stat stat=zk_1.exists(parentName,false);\n  if (stat == null) {\n    try {\n      zk.create(parentName,null,Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    }\n catch (    KeeperException ke) {\n      fail(\"Creating node \" + parentName + ke.getMessage());\n    }\n  }\n  stat=zk_1.exists(nodeName,false);\n  if (stat != null) {\n    try {\n      zk.delete(nodeName,-1);\n    }\n catch (    KeeperException ke) {\n      Code code=ke.code();\n      boolean valid=code == KeeperException.Code.NONODE || code == KeeperException.Code.NOTEMPTY;\n      if (!valid) {\n        fail(\"Unexpected exception code for delete: \" + ke.getMessage());\n      }\n    }\n  }\n  List<String> firstGen=zk_1.getChildren(parentName,true);\n  try {\n    zk.create(nodeName,null,Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  }\n catch (  KeeperException ke) {\n    Code code=ke.code();\n    boolean valid=code == KeeperException.Code.NODEEXISTS;\n    if (!valid) {\n      fail(\"Unexpected exception code for createin: \" + ke.getMessage());\n    }\n  }\n  Thread.sleep(5000);\n  WatchedEvent event=events.poll(10,TimeUnit.SECONDS);\n  if (event == null) {\n    throw new IOException(\"No event was delivered promptly\");\n  }\n  if (event.getType() != EventType.NodeChildrenChanged || !event.getPath().equalsIgnoreCase(parentName)) {\n    fail(\"Unexpected event was delivered: \" + event.toString());\n  }\n  stat=zk_1.exists(nodeName,false);\n  if (stat == null) {\n    fail(\"node \" + nodeName + \" should exist\");\n  }\n  try {\n    zk.delete(parentName,-1);\n    fail(\"Should be impossible to delete a non-empty node \" + parentName);\n  }\n catch (  KeeperException ke) {\n    Code code=ke.code();\n    boolean valid=code == KeeperException.Code.NOTEMPTY;\n    if (!valid) {\n      fail(\"Unexpected exception code for delete: \" + code);\n    }\n  }\n  try {\n    zk.create(nodeName + \"/def\",null,Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n    fail(\"Should be impossible to create child off Ephemeral node \" + nodeName);\n  }\n catch (  KeeperException ke) {\n    Code code=ke.code();\n    boolean valid=code == KeeperException.Code.NOCHILDRENFOREPHEMERALS;\n    if (!valid) {\n      fail(\"Unexpected exception code for createin: \" + code);\n    }\n  }\n  try {\n    List<String> children=zk.getChildren(nodeName,false);\n    if (children.size() > 0) {\n      fail(\"ephemeral node \" + nodeName + \" should not have children\");\n    }\n  }\n catch (  KeeperException ke) {\n    Code code=ke.code();\n    boolean valid=code == KeeperException.Code.NONODE;\n    if (!valid) {\n      fail(\"Unexpected exception code for createin: \" + code);\n    }\n  }\n  firstGen=zk_1.getChildren(parentName,true);\n  stat=zk_1.exists(nodeName,true);\n  if (stat == null) {\n    fail(\"node \" + nodeName + \" should exist\");\n  }\n  System.out.println(\"session id of zk: \" + zk.getSessionId());\n  System.out.println(\"session id of zk_1: \" + zk_1.getSessionId());\n  zk.close();\n  stat=zk_1.exists(\"nosuchnode\",false);\n  event=this.getEvent(10);\n  if (event == null) {\n    throw new AssertionFailedError(\"First event was not delivered promptly\");\n  }\n  if (!((event.getType() == EventType.NodeChildrenChanged && event.getPath().equalsIgnoreCase(parentName)) || (event.getType() == EventType.NodeDeleted && event.getPath().equalsIgnoreCase(nodeName)))) {\n    System.out.print(parentName + \" \" + EventType.NodeChildrenChanged+ \" \"+ nodeName+ \" \"+ EventType.NodeDeleted);\n    fail(\"Unexpected first event was delivered: \" + event.toString());\n  }\n  event=this.getEvent(10);\n  if (event == null) {\n    throw new AssertionFailedError(\"Second event was not delivered promptly\");\n  }\n  if (!((event.getType() == EventType.NodeChildrenChanged && event.getPath().equalsIgnoreCase(parentName)) || (event.getType() == EventType.NodeDeleted && event.getPath().equalsIgnoreCase(nodeName)))) {\n    System.out.print(parentName + \" \" + EventType.NodeChildrenChanged+ \" \"+ nodeName+ \" \"+ EventType.NodeDeleted);\n    fail(\"Unexpected second event was delivered: \" + event.toString());\n  }\n  firstGen=zk_1.getChildren(parentName,false);\n  stat=zk_1.exists(nodeName,false);\n  if (stat != null) {\n    fail(\"node \" + nodeName + \" should have been deleted\");\n  }\n  if (firstGen.contains(nodeName)) {\n    fail(\"node \" + nodeName + \" should not be a children\");\n  }\n  deleteZKDir(zk_1,nodeName);\n  zk_1.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 726,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4954,
        "startLineNumber" : 159,
        "startColumnNumber" : 2,
        "endLineNumber" : 300,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void enode_test_2() throws IOException, InterruptedException, KeeperException {\n  checkRoot();\n  String parentName=testDirOnZK;\n  String nodeName=parentName + \"/enode_abc\";\n  ZooKeeper zk=new ZooKeeper(hostPort,10000,this);\n  ZooKeeper zk_1=new ZooKeeper(hostPort,10000,this);\n  Stat stat=zk_1.exists(parentName,false);\n  if (stat == null) {\n    try {\n      zk.create(parentName,null,Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    }\n catch (    KeeperException ke) {\n      fail(\"Creating node \" + parentName + ke.getMessage());\n    }\n  }\n  stat=zk_1.exists(nodeName,false);\n  if (stat != null) {\n    try {\n      zk.delete(nodeName,-1);\n    }\n catch (    KeeperException ke) {\n      Code code=ke.code();\n      boolean valid=code == KeeperException.Code.NONODE || code == KeeperException.Code.NOTEMPTY;\n      if (!valid) {\n        fail(\"Unexpected exception code for delete: \" + ke.getMessage());\n      }\n    }\n  }\n  List<String> firstGen=zk_1.getChildren(parentName,true);\n  try {\n    zk.create(nodeName,null,Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  }\n catch (  KeeperException ke) {\n    Code code=ke.code();\n    boolean valid=code == KeeperException.Code.NODEEXISTS;\n    if (!valid) {\n      fail(\"Unexpected exception code for createin: \" + ke.getMessage());\n    }\n  }\n  Thread.sleep(5000);\n  WatchedEvent event=events.poll(10,TimeUnit.SECONDS);\n  if (event == null) {\n    throw new IOException(\"No event was delivered promptly\");\n  }\n  if (event.getType() != EventType.NodeChildrenChanged || !event.getPath().equalsIgnoreCase(parentName)) {\n    fail(\"Unexpected event was delivered: \" + event.toString());\n  }\n  stat=zk_1.exists(nodeName,false);\n  if (stat == null) {\n    fail(\"node \" + nodeName + \" should exist\");\n  }\n  try {\n    zk.delete(parentName,-1);\n    fail(\"Should be impossible to delete a non-empty node \" + parentName);\n  }\n catch (  KeeperException ke) {\n    Code code=ke.code();\n    boolean valid=code == KeeperException.Code.NOTEMPTY;\n    if (!valid) {\n      fail(\"Unexpected exception code for delete: \" + code);\n    }\n  }\n  try {\n    zk.create(nodeName + \"/def\",null,Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n    fail(\"Should be impossible to create child off Ephemeral node \" + nodeName);\n  }\n catch (  KeeperException ke) {\n    Code code=ke.code();\n    boolean valid=code == KeeperException.Code.NOCHILDRENFOREPHEMERALS;\n    if (!valid) {\n      fail(\"Unexpected exception code for createin: \" + code);\n    }\n  }\n  try {\n    List<String> children=zk.getChildren(nodeName,false);\n    if (children.size() > 0) {\n      fail(\"ephemeral node \" + nodeName + \" should not have children\");\n    }\n  }\n catch (  KeeperException ke) {\n    Code code=ke.code();\n    boolean valid=code == KeeperException.Code.NONODE;\n    if (!valid) {\n      fail(\"Unexpected exception code for createin: \" + code);\n    }\n  }\n  firstGen=zk_1.getChildren(parentName,true);\n  stat=zk_1.exists(nodeName,true);\n  if (stat == null) {\n    fail(\"node \" + nodeName + \" should exist\");\n  }\n  System.out.println(\"session id of zk: \" + zk.getSessionId());\n  System.out.println(\"session id of zk_1: \" + zk_1.getSessionId());\n  zk.close();\n  stat=zk_1.exists(\"nosuchnode\",false);\n  event=this.getEvent(10);\n  if (event == null) {\n    throw new AssertionFailedError(\"First event was not delivered promptly\");\n  }\n  if (!((event.getType() == EventType.NodeChildrenChanged && event.getPath().equalsIgnoreCase(parentName)) || (event.getType() == EventType.NodeDeleted && event.getPath().equalsIgnoreCase(nodeName)))) {\n    System.out.print(parentName + \" \" + EventType.NodeChildrenChanged+ \" \"+ nodeName+ \" \"+ EventType.NodeDeleted);\n    fail(\"Unexpected first event was delivered: \" + event.toString());\n  }\n  event=this.getEvent(10);\n  if (event == null) {\n    throw new AssertionFailedError(\"Second event was not delivered promptly\");\n  }\n  if (!((event.getType() == EventType.NodeChildrenChanged && event.getPath().equalsIgnoreCase(parentName)) || (event.getType() == EventType.NodeDeleted && event.getPath().equalsIgnoreCase(nodeName)))) {\n    System.out.print(parentName + \" \" + EventType.NodeChildrenChanged+ \" \"+ nodeName+ \" \"+ EventType.NodeDeleted);\n    fail(\"Unexpected second event was delivered: \" + event.toString());\n  }\n  firstGen=zk_1.getChildren(parentName,false);\n  stat=zk_1.exists(nodeName,false);\n  if (stat != null) {\n    fail(\"node \" + nodeName + \" should have been deleted\");\n  }\n  if (firstGen.contains(nodeName)) {\n    fail(\"node \" + nodeName + \" should not be a children\");\n  }\n  deleteZKDir(zk_1,nodeName);\n  zk_1.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 736,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 283,
        "startColumnNumber" : 7,
        "endLineNumber" : 283,
        "endColumnNumber" : 47
      },
      "nodeContext" : "event.getType() == EventType.NodeDeleted",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "org.apache.zookeeper.Watcher.Event.EventType"
  }, {
    "nodeContext" : "EventType.NodeDeleted",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 286,
      "startColumnNumber" : 67,
      "endLineNumber" : 286,
      "endColumnNumber" : 88
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 285,
        "startColumnNumber" : 23,
        "endLineNumber" : 286,
        "endColumnNumber" : 88
      },
      "nodeContext" : "parentName + \" \" + EventType.NodeChildrenChanged+ \" \"+ nodeName+ \" \"+ EventType.NodeDeleted",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 123,
        "startLineNumber" : 285,
        "startColumnNumber" : 6,
        "endLineNumber" : 286,
        "endColumnNumber" : 89
      },
      "nodeContext" : "System.out.print(parentName + \" \" + EventType.NodeChildrenChanged+ \" \"+ nodeName+ \" \"+ EventType.NodeDeleted)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 285,
        "startColumnNumber" : 6,
        "endLineNumber" : 286,
        "endColumnNumber" : 90
      },
      "nodeContext" : "System.out.print(parentName + \" \" + EventType.NodeChildrenChanged+ \" \"+ nodeName+ \" \"+ EventType.NodeDeleted);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 212,
        "startLineNumber" : 284,
        "startColumnNumber" : 54,
        "endLineNumber" : 288,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  System.out.print(parentName + \" \" + EventType.NodeChildrenChanged+ \" \"+ nodeName+ \" \"+ EventType.NodeDeleted);\n  fail(\"Unexpected second event was delivered: \" + event.toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 27,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 433,
        "startLineNumber" : 281,
        "startColumnNumber" : 4,
        "endLineNumber" : 288,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!((event.getType() == EventType.NodeChildrenChanged && event.getPath().equalsIgnoreCase(parentName)) || (event.getType() == EventType.NodeDeleted && event.getPath().equalsIgnoreCase(nodeName)))) {\n  System.out.print(parentName + \" \" + EventType.NodeChildrenChanged+ \" \"+ nodeName+ \" \"+ EventType.NodeDeleted);\n  fail(\"Unexpected second event was delivered: \" + event.toString());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 61,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4858,
        "startLineNumber" : 160,
        "startColumnNumber" : 48,
        "endLineNumber" : 300,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  checkRoot();\n  String parentName=testDirOnZK;\n  String nodeName=parentName + \"/enode_abc\";\n  ZooKeeper zk=new ZooKeeper(hostPort,10000,this);\n  ZooKeeper zk_1=new ZooKeeper(hostPort,10000,this);\n  Stat stat=zk_1.exists(parentName,false);\n  if (stat == null) {\n    try {\n      zk.create(parentName,null,Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    }\n catch (    KeeperException ke) {\n      fail(\"Creating node \" + parentName + ke.getMessage());\n    }\n  }\n  stat=zk_1.exists(nodeName,false);\n  if (stat != null) {\n    try {\n      zk.delete(nodeName,-1);\n    }\n catch (    KeeperException ke) {\n      Code code=ke.code();\n      boolean valid=code == KeeperException.Code.NONODE || code == KeeperException.Code.NOTEMPTY;\n      if (!valid) {\n        fail(\"Unexpected exception code for delete: \" + ke.getMessage());\n      }\n    }\n  }\n  List<String> firstGen=zk_1.getChildren(parentName,true);\n  try {\n    zk.create(nodeName,null,Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  }\n catch (  KeeperException ke) {\n    Code code=ke.code();\n    boolean valid=code == KeeperException.Code.NODEEXISTS;\n    if (!valid) {\n      fail(\"Unexpected exception code for createin: \" + ke.getMessage());\n    }\n  }\n  Thread.sleep(5000);\n  WatchedEvent event=events.poll(10,TimeUnit.SECONDS);\n  if (event == null) {\n    throw new IOException(\"No event was delivered promptly\");\n  }\n  if (event.getType() != EventType.NodeChildrenChanged || !event.getPath().equalsIgnoreCase(parentName)) {\n    fail(\"Unexpected event was delivered: \" + event.toString());\n  }\n  stat=zk_1.exists(nodeName,false);\n  if (stat == null) {\n    fail(\"node \" + nodeName + \" should exist\");\n  }\n  try {\n    zk.delete(parentName,-1);\n    fail(\"Should be impossible to delete a non-empty node \" + parentName);\n  }\n catch (  KeeperException ke) {\n    Code code=ke.code();\n    boolean valid=code == KeeperException.Code.NOTEMPTY;\n    if (!valid) {\n      fail(\"Unexpected exception code for delete: \" + code);\n    }\n  }\n  try {\n    zk.create(nodeName + \"/def\",null,Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n    fail(\"Should be impossible to create child off Ephemeral node \" + nodeName);\n  }\n catch (  KeeperException ke) {\n    Code code=ke.code();\n    boolean valid=code == KeeperException.Code.NOCHILDRENFOREPHEMERALS;\n    if (!valid) {\n      fail(\"Unexpected exception code for createin: \" + code);\n    }\n  }\n  try {\n    List<String> children=zk.getChildren(nodeName,false);\n    if (children.size() > 0) {\n      fail(\"ephemeral node \" + nodeName + \" should not have children\");\n    }\n  }\n catch (  KeeperException ke) {\n    Code code=ke.code();\n    boolean valid=code == KeeperException.Code.NONODE;\n    if (!valid) {\n      fail(\"Unexpected exception code for createin: \" + code);\n    }\n  }\n  firstGen=zk_1.getChildren(parentName,true);\n  stat=zk_1.exists(nodeName,true);\n  if (stat == null) {\n    fail(\"node \" + nodeName + \" should exist\");\n  }\n  System.out.println(\"session id of zk: \" + zk.getSessionId());\n  System.out.println(\"session id of zk_1: \" + zk_1.getSessionId());\n  zk.close();\n  stat=zk_1.exists(\"nosuchnode\",false);\n  event=this.getEvent(10);\n  if (event == null) {\n    throw new AssertionFailedError(\"First event was not delivered promptly\");\n  }\n  if (!((event.getType() == EventType.NodeChildrenChanged && event.getPath().equalsIgnoreCase(parentName)) || (event.getType() == EventType.NodeDeleted && event.getPath().equalsIgnoreCase(nodeName)))) {\n    System.out.print(parentName + \" \" + EventType.NodeChildrenChanged+ \" \"+ nodeName+ \" \"+ EventType.NodeDeleted);\n    fail(\"Unexpected first event was delivered: \" + event.toString());\n  }\n  event=this.getEvent(10);\n  if (event == null) {\n    throw new AssertionFailedError(\"Second event was not delivered promptly\");\n  }\n  if (!((event.getType() == EventType.NodeChildrenChanged && event.getPath().equalsIgnoreCase(parentName)) || (event.getType() == EventType.NodeDeleted && event.getPath().equalsIgnoreCase(nodeName)))) {\n    System.out.print(parentName + \" \" + EventType.NodeChildrenChanged+ \" \"+ nodeName+ \" \"+ EventType.NodeDeleted);\n    fail(\"Unexpected second event was delivered: \" + event.toString());\n  }\n  firstGen=zk_1.getChildren(parentName,false);\n  stat=zk_1.exists(nodeName,false);\n  if (stat != null) {\n    fail(\"node \" + nodeName + \" should have been deleted\");\n  }\n  if (firstGen.contains(nodeName)) {\n    fail(\"node \" + nodeName + \" should not be a children\");\n  }\n  deleteZKDir(zk_1,nodeName);\n  zk_1.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 726,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4954,
        "startLineNumber" : 159,
        "startColumnNumber" : 2,
        "endLineNumber" : 300,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void enode_test_2() throws IOException, InterruptedException, KeeperException {\n  checkRoot();\n  String parentName=testDirOnZK;\n  String nodeName=parentName + \"/enode_abc\";\n  ZooKeeper zk=new ZooKeeper(hostPort,10000,this);\n  ZooKeeper zk_1=new ZooKeeper(hostPort,10000,this);\n  Stat stat=zk_1.exists(parentName,false);\n  if (stat == null) {\n    try {\n      zk.create(parentName,null,Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n    }\n catch (    KeeperException ke) {\n      fail(\"Creating node \" + parentName + ke.getMessage());\n    }\n  }\n  stat=zk_1.exists(nodeName,false);\n  if (stat != null) {\n    try {\n      zk.delete(nodeName,-1);\n    }\n catch (    KeeperException ke) {\n      Code code=ke.code();\n      boolean valid=code == KeeperException.Code.NONODE || code == KeeperException.Code.NOTEMPTY;\n      if (!valid) {\n        fail(\"Unexpected exception code for delete: \" + ke.getMessage());\n      }\n    }\n  }\n  List<String> firstGen=zk_1.getChildren(parentName,true);\n  try {\n    zk.create(nodeName,null,Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n  }\n catch (  KeeperException ke) {\n    Code code=ke.code();\n    boolean valid=code == KeeperException.Code.NODEEXISTS;\n    if (!valid) {\n      fail(\"Unexpected exception code for createin: \" + ke.getMessage());\n    }\n  }\n  Thread.sleep(5000);\n  WatchedEvent event=events.poll(10,TimeUnit.SECONDS);\n  if (event == null) {\n    throw new IOException(\"No event was delivered promptly\");\n  }\n  if (event.getType() != EventType.NodeChildrenChanged || !event.getPath().equalsIgnoreCase(parentName)) {\n    fail(\"Unexpected event was delivered: \" + event.toString());\n  }\n  stat=zk_1.exists(nodeName,false);\n  if (stat == null) {\n    fail(\"node \" + nodeName + \" should exist\");\n  }\n  try {\n    zk.delete(parentName,-1);\n    fail(\"Should be impossible to delete a non-empty node \" + parentName);\n  }\n catch (  KeeperException ke) {\n    Code code=ke.code();\n    boolean valid=code == KeeperException.Code.NOTEMPTY;\n    if (!valid) {\n      fail(\"Unexpected exception code for delete: \" + code);\n    }\n  }\n  try {\n    zk.create(nodeName + \"/def\",null,Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);\n    fail(\"Should be impossible to create child off Ephemeral node \" + nodeName);\n  }\n catch (  KeeperException ke) {\n    Code code=ke.code();\n    boolean valid=code == KeeperException.Code.NOCHILDRENFOREPHEMERALS;\n    if (!valid) {\n      fail(\"Unexpected exception code for createin: \" + code);\n    }\n  }\n  try {\n    List<String> children=zk.getChildren(nodeName,false);\n    if (children.size() > 0) {\n      fail(\"ephemeral node \" + nodeName + \" should not have children\");\n    }\n  }\n catch (  KeeperException ke) {\n    Code code=ke.code();\n    boolean valid=code == KeeperException.Code.NONODE;\n    if (!valid) {\n      fail(\"Unexpected exception code for createin: \" + code);\n    }\n  }\n  firstGen=zk_1.getChildren(parentName,true);\n  stat=zk_1.exists(nodeName,true);\n  if (stat == null) {\n    fail(\"node \" + nodeName + \" should exist\");\n  }\n  System.out.println(\"session id of zk: \" + zk.getSessionId());\n  System.out.println(\"session id of zk_1: \" + zk_1.getSessionId());\n  zk.close();\n  stat=zk_1.exists(\"nosuchnode\",false);\n  event=this.getEvent(10);\n  if (event == null) {\n    throw new AssertionFailedError(\"First event was not delivered promptly\");\n  }\n  if (!((event.getType() == EventType.NodeChildrenChanged && event.getPath().equalsIgnoreCase(parentName)) || (event.getType() == EventType.NodeDeleted && event.getPath().equalsIgnoreCase(nodeName)))) {\n    System.out.print(parentName + \" \" + EventType.NodeChildrenChanged+ \" \"+ nodeName+ \" \"+ EventType.NodeDeleted);\n    fail(\"Unexpected first event was delivered: \" + event.toString());\n  }\n  event=this.getEvent(10);\n  if (event == null) {\n    throw new AssertionFailedError(\"Second event was not delivered promptly\");\n  }\n  if (!((event.getType() == EventType.NodeChildrenChanged && event.getPath().equalsIgnoreCase(parentName)) || (event.getType() == EventType.NodeDeleted && event.getPath().equalsIgnoreCase(nodeName)))) {\n    System.out.print(parentName + \" \" + EventType.NodeChildrenChanged+ \" \"+ nodeName+ \" \"+ EventType.NodeDeleted);\n    fail(\"Unexpected second event was delivered: \" + event.toString());\n  }\n  firstGen=zk_1.getChildren(parentName,false);\n  stat=zk_1.exists(nodeName,false);\n  if (stat != null) {\n    fail(\"node \" + nodeName + \" should have been deleted\");\n  }\n  if (firstGen.contains(nodeName)) {\n    fail(\"node \" + nodeName + \" should not be a children\");\n  }\n  deleteZKDir(zk_1,nodeName);\n  zk_1.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 736,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 285,
        "startColumnNumber" : 23,
        "endLineNumber" : 286,
        "endColumnNumber" : 88
      },
      "nodeContext" : "parentName + \" \" + EventType.NodeChildrenChanged+ \" \"+ nodeName+ \" \"+ EventType.NodeDeleted",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "org.apache.zookeeper.Watcher.Event.EventType"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 269,
    "startColumnNumber" : 29,
    "endLineNumber" : 269,
    "endColumnNumber" : 50
  }, {
    "charLength" : 21,
    "startLineNumber" : 272,
    "startColumnNumber" : 67,
    "endLineNumber" : 272,
    "endColumnNumber" : 88
  }, {
    "charLength" : 21,
    "startLineNumber" : 283,
    "startColumnNumber" : 26,
    "endLineNumber" : 283,
    "endColumnNumber" : 47
  }, {
    "charLength" : 21,
    "startLineNumber" : 286,
    "startColumnNumber" : 67,
    "endLineNumber" : 286,
    "endColumnNumber" : 88
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  } ]
}