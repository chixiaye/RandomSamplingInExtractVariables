{
  "id" : 463,
  "expression" : "Floats.indexOf(ARRAY234,ARRAY1)",
  "projectName" : "google@guava",
  "commitID" : "68500b2c09fa6985eab2e41577e2992685b57f2b",
  "filePath" : "/android/guava-tests/test/com/google/common/primitives/FloatsTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Floats.indexOf(ARRAY234,ARRAY1)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 32,
      "startLineNumber" : 130,
      "startColumnNumber" : 21,
      "endLineNumber" : 130,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 5,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 130,
        "startColumnNumber" : 4,
        "endLineNumber" : 130,
        "endColumnNumber" : 54
      },
      "nodeContext" : "assertEquals(-1,Floats.indexOf(ARRAY234,ARRAY1))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 130,
        "startColumnNumber" : 4,
        "endLineNumber" : 130,
        "endColumnNumber" : 55
      },
      "nodeContext" : "assertEquals(-1,Floats.indexOf(ARRAY234,ARRAY1));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1859,
        "startLineNumber" : 126,
        "startColumnNumber" : 40,
        "endLineNumber" : 170,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  assertEquals(0,Floats.indexOf(EMPTY,EMPTY));\n  assertEquals(0,Floats.indexOf(ARRAY234,EMPTY));\n  assertEquals(-1,Floats.indexOf(EMPTY,ARRAY234));\n  assertEquals(-1,Floats.indexOf(ARRAY234,ARRAY1));\n  assertEquals(-1,Floats.indexOf(ARRAY1,ARRAY234));\n  assertEquals(0,Floats.indexOf(ARRAY1,ARRAY1));\n  assertEquals(0,Floats.indexOf(ARRAY234,ARRAY234));\n  assertEquals(0,Floats.indexOf(ARRAY234,new float[]{(float)2,(float)3}));\n  assertEquals(1,Floats.indexOf(ARRAY234,new float[]{(float)3,(float)4}));\n  assertEquals(1,Floats.indexOf(ARRAY234,new float[]{(float)3}));\n  assertEquals(2,Floats.indexOf(ARRAY234,new float[]{(float)4}));\n  assertEquals(1,Floats.indexOf(new float[]{(float)2,(float)3,(float)3,(float)3,(float)3},new float[]{(float)3}));\n  assertEquals(2,Floats.indexOf(new float[]{(float)2,(float)3,(float)2,(float)3,(float)4,(float)2,(float)3},new float[]{(float)2,(float)3,(float)4}));\n  assertEquals(1,Floats.indexOf(new float[]{(float)2,(float)2,(float)3,(float)4,(float)2,(float)3,(float)4},new float[]{(float)2,(float)3,(float)4}));\n  assertEquals(-1,Floats.indexOf(new float[]{(float)4,(float)3,(float)2},new float[]{(float)2,(float)3,(float)4}));\n  for (  float value : NUMBERS) {\n    assertEquals(\"\" + value,1,Floats.indexOf(new float[]{5f,value,value,5f},new float[]{value,value}));\n  }\n  assertEquals(-1,Floats.indexOf(new float[]{5f,NaN,NaN,5f},new float[]{NaN,NaN}));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 358,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1897,
        "startLineNumber" : 126,
        "startColumnNumber" : 2,
        "endLineNumber" : 170,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public void testIndexOf_arrayTarget(){\n  assertEquals(0,Floats.indexOf(EMPTY,EMPTY));\n  assertEquals(0,Floats.indexOf(ARRAY234,EMPTY));\n  assertEquals(-1,Floats.indexOf(EMPTY,ARRAY234));\n  assertEquals(-1,Floats.indexOf(ARRAY234,ARRAY1));\n  assertEquals(-1,Floats.indexOf(ARRAY1,ARRAY234));\n  assertEquals(0,Floats.indexOf(ARRAY1,ARRAY1));\n  assertEquals(0,Floats.indexOf(ARRAY234,ARRAY234));\n  assertEquals(0,Floats.indexOf(ARRAY234,new float[]{(float)2,(float)3}));\n  assertEquals(1,Floats.indexOf(ARRAY234,new float[]{(float)3,(float)4}));\n  assertEquals(1,Floats.indexOf(ARRAY234,new float[]{(float)3}));\n  assertEquals(2,Floats.indexOf(ARRAY234,new float[]{(float)4}));\n  assertEquals(1,Floats.indexOf(new float[]{(float)2,(float)3,(float)3,(float)3,(float)3},new float[]{(float)3}));\n  assertEquals(2,Floats.indexOf(new float[]{(float)2,(float)3,(float)2,(float)3,(float)4,(float)2,(float)3},new float[]{(float)2,(float)3,(float)4}));\n  assertEquals(1,Floats.indexOf(new float[]{(float)2,(float)2,(float)3,(float)4,(float)2,(float)3,(float)4},new float[]{(float)2,(float)3,(float)4}));\n  assertEquals(-1,Floats.indexOf(new float[]{(float)4,(float)3,(float)2},new float[]{(float)2,(float)3,(float)4}));\n  for (  float value : NUMBERS) {\n    assertEquals(\"\" + value,1,Floats.indexOf(new float[]{5f,value,value,5f},new float[]{value,value}));\n  }\n  assertEquals(-1,Floats.indexOf(new float[]{5f,NaN,NaN,5f},new float[]{NaN,NaN}));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 362,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 130,
        "startColumnNumber" : 4,
        "endLineNumber" : 130,
        "endColumnNumber" : 55
      },
      "nodeContext" : "assertEquals(-1,Floats.indexOf(ARRAY234,ARRAY1));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 4,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 32,
    "startLineNumber" : 130,
    "startColumnNumber" : 21,
    "endLineNumber" : 130,
    "endColumnNumber" : 53
  } ],
  "layoutRelationDataList" : [ ]
}