{
  "id" : 397,
  "expression" : "setter",
  "projectName" : "jenkinsci@jenkins",
  "commitID" : "c44fa7f4cf769257844d562353a579a198ea517a",
  "filePath" : "/core/src/main/java/hudson/cli/declarative/MethodBinder.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "setter",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 97,
      "startColumnNumber" : 33,
      "endLineNumber" : 97,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 97,
        "startColumnNumber" : 16,
        "endLineNumber" : 97,
        "endColumnNumber" : 47
      },
      "nodeContext" : "parser.addOption(setter,option)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 97,
        "startColumnNumber" : 16,
        "endLineNumber" : 97,
        "endColumnNumber" : 48
      },
      "nodeContext" : "parser.addOption(setter,option);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 96,
        "startColumnNumber" : 30,
        "endLineNumber" : 98,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  parser.addOption(setter,option);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 96,
        "startColumnNumber" : 12,
        "endLineNumber" : 98,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (option != null) {\n  parser.addOption(setter,option);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1395,
        "startLineNumber" : 68,
        "startColumnNumber" : 41,
        "endLineNumber" : 109,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final int index=p.index();\n  Setter setter=new Setter(){\n    public void addValue(    Object value) throws CmdLineException {\n      arguments[index]=value;\n    }\n    public Class getType(){\n      return p.type();\n    }\n    public boolean isMultiValued(){\n      return false;\n    }\n    @Override public FieldSetter asFieldSetter(){\n      return null;\n    }\n    @Override public AnnotatedElement asAnnotatedElement(){\n      return p;\n    }\n  }\n;\n  Option option=p.annotation(Option.class);\n  if (option != null) {\n    parser.addOption(setter,option);\n  }\n  Argument arg=p.annotation(Argument.class);\n  if (arg != null) {\n    if (bias > 0)     arg=new ArgumentImpl(arg,bias);\n    parser.addArgument(setter,arg);\n  }\n  if (p.type() == CLICommand.class)   arguments[index]=command;\n  if (p.type().isPrimitive())   arguments[index]=ReflectionUtils.getVmDefaultValueForPrimitiveType(p.type());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 159,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1428,
        "startLineNumber" : 68,
        "startColumnNumber" : 8,
        "endLineNumber" : 109,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (final Parameter p : params) {\n  final int index=p.index();\n  Setter setter=new Setter(){\n    public void addValue(    Object value) throws CmdLineException {\n      arguments[index]=value;\n    }\n    public Class getType(){\n      return p.type();\n    }\n    public boolean isMultiValued(){\n      return false;\n    }\n    @Override public FieldSetter asFieldSetter(){\n      return null;\n    }\n    @Override public AnnotatedElement asAnnotatedElement(){\n      return p;\n    }\n  }\n;\n  Option option=p.annotation(Option.class);\n  if (option != null) {\n    parser.addOption(setter,option);\n  }\n  Argument arg=p.annotation(Argument.class);\n  if (arg != null) {\n    if (bias > 0)     arg=new ArgumentImpl(arg,bias);\n    parser.addArgument(setter,arg);\n  }\n  if (p.type() == CLICommand.class)   arguments[index]=command;\n  if (p.type().isPrimitive())   arguments[index]=ReflectionUtils.getVmDefaultValueForPrimitiveType(p.type());\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 166,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1800,
        "startLineNumber" : 58,
        "startColumnNumber" : 74,
        "endLineNumber" : 110,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.method=method;\n  this.command=command;\n  List<Parameter> params=ReflectionUtils.getParameters(method);\n  arguments=new Object[params.size()];\n  final int bias=parser.getArguments().size();\n  for (  final Parameter p : params) {\n    final int index=p.index();\n    Setter setter=new Setter(){\n      public void addValue(      Object value) throws CmdLineException {\n        arguments[index]=value;\n      }\n      public Class getType(){\n        return p.type();\n      }\n      public boolean isMultiValued(){\n        return false;\n      }\n      @Override public FieldSetter asFieldSetter(){\n        return null;\n      }\n      @Override public AnnotatedElement asAnnotatedElement(){\n        return p;\n      }\n    }\n;\n    Option option=p.annotation(Option.class);\n    if (option != null) {\n      parser.addOption(setter,option);\n    }\n    Argument arg=p.annotation(Argument.class);\n    if (arg != null) {\n      if (bias > 0)       arg=new ArgumentImpl(arg,bias);\n      parser.addArgument(setter,arg);\n    }\n    if (p.type() == CLICommand.class)     arguments[index]=command;\n    if (p.type().isPrimitive())     arguments[index]=ReflectionUtils.getVmDefaultValueForPrimitiveType(p.type());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 212,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1910,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 110,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * @param method\n */\nMethodBinder(Method method,CLICommand command,CmdLineParser parser){\n  this.method=method;\n  this.command=command;\n  List<Parameter> params=ReflectionUtils.getParameters(method);\n  arguments=new Object[params.size()];\n  final int bias=parser.getArguments().size();\n  for (  final Parameter p : params) {\n    final int index=p.index();\n    Setter setter=new Setter(){\n      public void addValue(      Object value) throws CmdLineException {\n        arguments[index]=value;\n      }\n      public Class getType(){\n        return p.type();\n      }\n      public boolean isMultiValued(){\n        return false;\n      }\n      @Override public FieldSetter asFieldSetter(){\n        return null;\n      }\n      @Override public AnnotatedElement asAnnotatedElement(){\n        return p;\n      }\n    }\n;\n    Option option=p.annotation(Option.class);\n    if (option != null) {\n      parser.addOption(setter,option);\n    }\n    Argument arg=p.annotation(Argument.class);\n    if (arg != null) {\n      if (bias > 0)       arg=new ArgumentImpl(arg,bias);\n      parser.addArgument(setter,arg);\n    }\n    if (p.type() == CLICommand.class)     arguments[index]=command;\n    if (p.type().isPrimitive())     arguments[index]=ReflectionUtils.getVmDefaultValueForPrimitiveType(p.type());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 227,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 97,
        "startColumnNumber" : 16,
        "endLineNumber" : 97,
        "endColumnNumber" : 48
      },
      "nodeContext" : "parser.addOption(setter,option);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "hudson.cli.declarative.Setter"
  }, {
    "nodeContext" : "setter",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 102,
      "startColumnNumber" : 35,
      "endLineNumber" : 102,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 102,
        "startColumnNumber" : 16,
        "endLineNumber" : 102,
        "endColumnNumber" : 46
      },
      "nodeContext" : "parser.addArgument(setter,arg)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 102,
        "startColumnNumber" : 16,
        "endLineNumber" : 102,
        "endColumnNumber" : 47
      },
      "nodeContext" : "parser.addArgument(setter,arg);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 128,
        "startLineNumber" : 100,
        "startColumnNumber" : 27,
        "endLineNumber" : 103,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (bias > 0)   arg=new ArgumentImpl(arg,bias);\n  parser.addArgument(setter,arg);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 143,
        "startLineNumber" : 100,
        "startColumnNumber" : 12,
        "endLineNumber" : 103,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (arg != null) {\n  if (bias > 0)   arg=new ArgumentImpl(arg,bias);\n  parser.addArgument(setter,arg);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1395,
        "startLineNumber" : 68,
        "startColumnNumber" : 41,
        "endLineNumber" : 109,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final int index=p.index();\n  Setter setter=new Setter(){\n    public void addValue(    Object value) throws CmdLineException {\n      arguments[index]=value;\n    }\n    public Class getType(){\n      return p.type();\n    }\n    public boolean isMultiValued(){\n      return false;\n    }\n    @Override public FieldSetter asFieldSetter(){\n      return null;\n    }\n    @Override public AnnotatedElement asAnnotatedElement(){\n      return p;\n    }\n  }\n;\n  Option option=p.annotation(Option.class);\n  if (option != null) {\n    parser.addOption(setter,option);\n  }\n  Argument arg=p.annotation(Argument.class);\n  if (arg != null) {\n    if (bias > 0)     arg=new ArgumentImpl(arg,bias);\n    parser.addArgument(setter,arg);\n  }\n  if (p.type() == CLICommand.class)   arguments[index]=command;\n  if (p.type().isPrimitive())   arguments[index]=ReflectionUtils.getVmDefaultValueForPrimitiveType(p.type());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 159,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1428,
        "startLineNumber" : 68,
        "startColumnNumber" : 8,
        "endLineNumber" : 109,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (final Parameter p : params) {\n  final int index=p.index();\n  Setter setter=new Setter(){\n    public void addValue(    Object value) throws CmdLineException {\n      arguments[index]=value;\n    }\n    public Class getType(){\n      return p.type();\n    }\n    public boolean isMultiValued(){\n      return false;\n    }\n    @Override public FieldSetter asFieldSetter(){\n      return null;\n    }\n    @Override public AnnotatedElement asAnnotatedElement(){\n      return p;\n    }\n  }\n;\n  Option option=p.annotation(Option.class);\n  if (option != null) {\n    parser.addOption(setter,option);\n  }\n  Argument arg=p.annotation(Argument.class);\n  if (arg != null) {\n    if (bias > 0)     arg=new ArgumentImpl(arg,bias);\n    parser.addArgument(setter,arg);\n  }\n  if (p.type() == CLICommand.class)   arguments[index]=command;\n  if (p.type().isPrimitive())   arguments[index]=ReflectionUtils.getVmDefaultValueForPrimitiveType(p.type());\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 166,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1800,
        "startLineNumber" : 58,
        "startColumnNumber" : 74,
        "endLineNumber" : 110,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.method=method;\n  this.command=command;\n  List<Parameter> params=ReflectionUtils.getParameters(method);\n  arguments=new Object[params.size()];\n  final int bias=parser.getArguments().size();\n  for (  final Parameter p : params) {\n    final int index=p.index();\n    Setter setter=new Setter(){\n      public void addValue(      Object value) throws CmdLineException {\n        arguments[index]=value;\n      }\n      public Class getType(){\n        return p.type();\n      }\n      public boolean isMultiValued(){\n        return false;\n      }\n      @Override public FieldSetter asFieldSetter(){\n        return null;\n      }\n      @Override public AnnotatedElement asAnnotatedElement(){\n        return p;\n      }\n    }\n;\n    Option option=p.annotation(Option.class);\n    if (option != null) {\n      parser.addOption(setter,option);\n    }\n    Argument arg=p.annotation(Argument.class);\n    if (arg != null) {\n      if (bias > 0)       arg=new ArgumentImpl(arg,bias);\n      parser.addArgument(setter,arg);\n    }\n    if (p.type() == CLICommand.class)     arguments[index]=command;\n    if (p.type().isPrimitive())     arguments[index]=ReflectionUtils.getVmDefaultValueForPrimitiveType(p.type());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 212,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1910,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 110,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * @param method\n */\nMethodBinder(Method method,CLICommand command,CmdLineParser parser){\n  this.method=method;\n  this.command=command;\n  List<Parameter> params=ReflectionUtils.getParameters(method);\n  arguments=new Object[params.size()];\n  final int bias=parser.getArguments().size();\n  for (  final Parameter p : params) {\n    final int index=p.index();\n    Setter setter=new Setter(){\n      public void addValue(      Object value) throws CmdLineException {\n        arguments[index]=value;\n      }\n      public Class getType(){\n        return p.type();\n      }\n      public boolean isMultiValued(){\n        return false;\n      }\n      @Override public FieldSetter asFieldSetter(){\n        return null;\n      }\n      @Override public AnnotatedElement asAnnotatedElement(){\n        return p;\n      }\n    }\n;\n    Option option=p.annotation(Option.class);\n    if (option != null) {\n      parser.addOption(setter,option);\n    }\n    Argument arg=p.annotation(Argument.class);\n    if (arg != null) {\n      if (bias > 0)       arg=new ArgumentImpl(arg,bias);\n      parser.addArgument(setter,arg);\n    }\n    if (p.type() == CLICommand.class)     arguments[index]=command;\n    if (p.type().isPrimitive())     arguments[index]=ReflectionUtils.getVmDefaultValueForPrimitiveType(p.type());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 227,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 102,
        "startColumnNumber" : 16,
        "endLineNumber" : 102,
        "endColumnNumber" : 47
      },
      "nodeContext" : "parser.addArgument(setter,arg);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "hudson.cli.declarative.Setter"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 97,
    "startColumnNumber" : 33,
    "endLineNumber" : 97,
    "endColumnNumber" : 39
  }, {
    "charLength" : 6,
    "startLineNumber" : 102,
    "startColumnNumber" : 35,
    "endLineNumber" : 102,
    "endColumnNumber" : 41
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}