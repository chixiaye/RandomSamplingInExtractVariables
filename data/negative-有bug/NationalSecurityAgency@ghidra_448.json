{
  "id" : 448,
  "expression" : "\"While solving: \" + exp + \" (\"+ description+ \")\"",
  "projectName" : "NationalSecurityAgency@ghidra",
  "commitID" : "a54d0e28d652c48502551a88278808549aed5f98",
  "filePath" : "/Ghidra/Framework/SoftwareModeling/src/main/java/ghidra/app/plugin/assembler/sleigh/expr/AbstractBinaryExpressionSolver.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"While solving: \" + exp + \" (\"+ description+ \")\"",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 50,
      "startLineNumber" : 83,
      "startColumnNumber" : 15,
      "endLineNumber" : 83,
      "endColumnNumber" : 65
    },
    "astNodeNumber" : 6,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 83,
        "startColumnNumber" : 3,
        "endLineNumber" : 83,
        "endColumnNumber" : 66
      },
      "nodeContext" : "dbg.println(\"While solving: \" + exp + \" (\"+ description+ \")\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 83,
        "startColumnNumber" : 3,
        "endLineNumber" : 83,
        "endColumnNumber" : 67
      },
      "nodeContext" : "dbg.println(\"While solving: \" + exp + \" (\"+ description+ \")\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 82,
        "startColumnNumber" : 27,
        "endLineNumber" : 85,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  dbg.println(\"While solving: \" + exp + \" (\"+ description+ \")\");\n  throw e;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 82,
        "startColumnNumber" : 2,
        "endLineNumber" : 85,
        "endColumnNumber" : 3
      },
      "nodeContext" : "catch (AssertionError e) {\n  dbg.println(\"While solving: \" + exp + \" (\"+ description+ \")\");\n  throw e;\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 954,
        "startLineNumber" : 58,
        "startColumnNumber" : 2,
        "endLineNumber" : 85,
        "endColumnNumber" : 3
      },
      "nodeContext" : "try {\n  if (lval != null && rval != null) {\n    MaskedLong cval=compute(lval,rval);\n    return ConstantValueSolver.checkConstAgrees(cval,goal,description);\n  }\n else   if (lval != null) {\n    return solveRightSide(exp.getRight(),lval,goal,vals,res,cur,hints,description);\n  }\n else   if (rval != null) {\n    return solveLeftSide(exp.getLeft(),rval,goal,vals,res,cur,hints,description);\n  }\n else {\n    return solveTwoSided(exp,goal,vals,res,cur,hints,description);\n  }\n}\n catch (NeedsBackfillException e) {\n  throw e;\n}\ncatch (SolverException e) {\n  return AssemblyResolution.error(e.getMessage(),description,null);\n}\ncatch (AssertionError e) {\n  dbg.println(\"While solving: \" + exp + \" (\"+ description+ \")\");\n  throw e;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 115,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1487,
        "startLineNumber" : 41,
        "startColumnNumber" : 53,
        "endLineNumber" : 86,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  MaskedLong lval=solver.getValue(exp.getLeft(),vals,res,cur);\n  MaskedLong rval=solver.getValue(exp.getRight(),vals,res,cur);\n  if (lval != null && !lval.isFullyDefined()) {\n    if (!lval.isFullyUndefined()) {\n      dbg.println(\"Partially-defined left value for binary solver: \" + lval);\n    }\n    lval=null;\n  }\n  if (rval != null && !rval.isFullyDefined()) {\n    if (!rval.isFullyUndefined()) {\n      dbg.println(\"Partially-defined right value for binary solver: \" + rval);\n    }\n    rval=null;\n  }\n  try {\n    if (lval != null && rval != null) {\n      MaskedLong cval=compute(lval,rval);\n      return ConstantValueSolver.checkConstAgrees(cval,goal,description);\n    }\n else     if (lval != null) {\n      return solveRightSide(exp.getRight(),lval,goal,vals,res,cur,hints,description);\n    }\n else     if (rval != null) {\n      return solveLeftSide(exp.getLeft(),rval,goal,vals,res,cur,hints,description);\n    }\n else {\n      return solveTwoSided(exp,goal,vals,res,cur,hints,description);\n    }\n  }\n catch (  NeedsBackfillException e) {\n    throw e;\n  }\ncatch (  SolverException e) {\n    return AssemblyResolution.error(e.getMessage(),description,null);\n  }\ncatch (  AssertionError e) {\n    dbg.println(\"While solving: \" + exp + \" (\"+ description+ \")\");\n    throw e;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 198,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1719,
        "startLineNumber" : 38,
        "startColumnNumber" : 1,
        "endLineNumber" : 86,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public AssemblyResolution solve(T exp,MaskedLong goal,Map<String,Long> vals,Map<Integer,Object> res,AssemblyResolvedConstructor cur,Set<SolverHint> hints,String description) throws NeedsBackfillException {\n  MaskedLong lval=solver.getValue(exp.getLeft(),vals,res,cur);\n  MaskedLong rval=solver.getValue(exp.getRight(),vals,res,cur);\n  if (lval != null && !lval.isFullyDefined()) {\n    if (!lval.isFullyUndefined()) {\n      dbg.println(\"Partially-defined left value for binary solver: \" + lval);\n    }\n    lval=null;\n  }\n  if (rval != null && !rval.isFullyDefined()) {\n    if (!rval.isFullyUndefined()) {\n      dbg.println(\"Partially-defined right value for binary solver: \" + rval);\n    }\n    rval=null;\n  }\n  try {\n    if (lval != null && rval != null) {\n      MaskedLong cval=compute(lval,rval);\n      return ConstantValueSolver.checkConstAgrees(cval,goal,description);\n    }\n else     if (lval != null) {\n      return solveRightSide(exp.getRight(),lval,goal,vals,res,cur,hints,description);\n    }\n else     if (rval != null) {\n      return solveLeftSide(exp.getLeft(),rval,goal,vals,res,cur,hints,description);\n    }\n else {\n      return solveTwoSided(exp,goal,vals,res,cur,hints,description);\n    }\n  }\n catch (  NeedsBackfillException e) {\n    throw e;\n  }\ncatch (  SolverException e) {\n    return AssemblyResolution.error(e.getMessage(),description,null);\n  }\ncatch (  AssertionError e) {\n    dbg.println(\"While solving: \" + exp + \" (\"+ description+ \")\");\n    throw e;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 248,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 83,
        "startColumnNumber" : 3,
        "endLineNumber" : 83,
        "endColumnNumber" : 67
      },
      "nodeContext" : "dbg.println(\"While solving: \" + exp + \" (\"+ description+ \")\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 7,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 50,
    "startLineNumber" : 83,
    "startColumnNumber" : 15,
    "endLineNumber" : 83,
    "endColumnNumber" : 65
  } ],
  "layoutRelationDataList" : [ ]
}