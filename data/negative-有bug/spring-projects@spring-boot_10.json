{
  "id" : 10,
  "expression" : "repository.find(\"dave\",after)",
  "projectName" : "spring-projects@spring-boot",
  "commitID" : "44299bb9808d0dc21a9bfc1c0c47e1539e00856d",
  "filePath" : "/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/audit/InMemoryAuditEventRepositoryTests.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "repository.find(\"dave\",after)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 30,
      "startLineNumber" : 120,
      "startColumnNumber" : 11,
      "endLineNumber" : 120,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 5,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 120,
        "startColumnNumber" : 2,
        "endLineNumber" : 120,
        "endColumnNumber" : 41
      },
      "nodeContext" : "events=repository.find(\"dave\",after)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 120,
        "startColumnNumber" : 2,
        "endLineNumber" : 120,
        "endColumnNumber" : 42
      },
      "nodeContext" : "events=repository.find(\"dave\",after);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1086,
        "startLineNumber" : 101,
        "startColumnNumber" : 43,
        "endLineNumber" : 123,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Calendar calendar=Calendar.getInstance();\n  calendar.set(2000,1,1,0,0,0);\n  calendar.set(Calendar.MILLISECOND,0);\n  Map<String,Object> data=new HashMap<>();\n  InMemoryAuditEventRepository repository=new InMemoryAuditEventRepository();\n  repository.add(new AuditEvent(calendar.getTime(),\"dave\",\"a\",data));\n  calendar.add(Calendar.DAY_OF_YEAR,1);\n  repository.add(new AuditEvent(calendar.getTime(),\"phil\",\"b\",data));\n  calendar.add(Calendar.DAY_OF_YEAR,1);\n  Date after=calendar.getTime();\n  repository.add(new AuditEvent(calendar.getTime(),\"dave\",\"c\",data));\n  calendar.add(Calendar.DAY_OF_YEAR,1);\n  repository.add(new AuditEvent(calendar.getTime(),\"phil\",\"d\",data));\n  calendar.add(Calendar.DAY_OF_YEAR,1);\n  List<AuditEvent> events=repository.find(after);\n  assertThat(events.size()).isEqualTo(2);\n  assertThat(events.get(0).getType()).isEqualTo(\"c\");\n  assertThat(events.get(1).getType()).isEqualTo(\"d\");\n  events=repository.find(\"dave\",after);\n  assertThat(events.size()).isEqualTo(1);\n  assertThat(events.get(0).getType()).isEqualTo(\"c\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 215,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1135,
        "startLineNumber" : 100,
        "startColumnNumber" : 1,
        "endLineNumber" : 123,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void findByDate() throws Exception {\n  Calendar calendar=Calendar.getInstance();\n  calendar.set(2000,1,1,0,0,0);\n  calendar.set(Calendar.MILLISECOND,0);\n  Map<String,Object> data=new HashMap<>();\n  InMemoryAuditEventRepository repository=new InMemoryAuditEventRepository();\n  repository.add(new AuditEvent(calendar.getTime(),\"dave\",\"a\",data));\n  calendar.add(Calendar.DAY_OF_YEAR,1);\n  repository.add(new AuditEvent(calendar.getTime(),\"phil\",\"b\",data));\n  calendar.add(Calendar.DAY_OF_YEAR,1);\n  Date after=calendar.getTime();\n  repository.add(new AuditEvent(calendar.getTime(),\"dave\",\"c\",data));\n  calendar.add(Calendar.DAY_OF_YEAR,1);\n  repository.add(new AuditEvent(calendar.getTime(),\"phil\",\"d\",data));\n  calendar.add(Calendar.DAY_OF_YEAR,1);\n  List<AuditEvent> events=repository.find(after);\n  assertThat(events.size()).isEqualTo(2);\n  assertThat(events.get(0).getType()).isEqualTo(\"c\");\n  assertThat(events.get(1).getType()).isEqualTo(\"d\");\n  events=repository.find(\"dave\",after);\n  assertThat(events.size()).isEqualTo(1);\n  assertThat(events.get(0).getType()).isEqualTo(\"c\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 223,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 120,
        "startColumnNumber" : 2,
        "endLineNumber" : 120,
        "endColumnNumber" : 42
      },
      "nodeContext" : "events=repository.find(\"dave\",after);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 4,
    "type" : "java.util.List<org.springframework.boot.actuate.audit.AuditEvent>"
  } ],
  "positionList" : [ {
    "charLength" : 30,
    "startLineNumber" : 120,
    "startColumnNumber" : 11,
    "endLineNumber" : 120,
    "endColumnNumber" : 41
  } ],
  "layoutRelationDataList" : [ ]
}