{
  "id" : 418,
  "expression" : "!q.isEmpty()",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/graphtheory/networkflow/examples/DinicsExample.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "!q.isEmpty()",
    "nodeType" : "PrefixExpression",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 184,
      "startColumnNumber" : 13,
      "endLineNumber" : 184,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 293,
        "startLineNumber" : 184,
        "startColumnNumber" : 6,
        "endLineNumber" : 193,
        "endColumnNumber" : 7
      },
      "nodeContext" : "while (!q.isEmpty()) {\n  int node=q.poll();\n  for (  Edge edge : graph[node]) {\n    long cap=edge.remainingCapacity();\n    if (cap > 0 && level[edge.to] == -1) {\n      level[edge.to]=level[node] + 1;\n      q.offer(edge.to);\n    }\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 62,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 511,
        "startLineNumber" : 179,
        "startColumnNumber" : 26,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Arrays.fill(level,-1);\n  Deque<Integer> q=new ArrayDeque<>(n);\n  q.offer(s);\n  level[s]=0;\n  while (!q.isEmpty()) {\n    int node=q.poll();\n    for (    Edge edge : graph[node]) {\n      long cap=edge.remainingCapacity();\n      if (cap > 0 && level[edge.to] == -1) {\n        level[edge.to]=level[node] + 1;\n        q.offer(edge.to);\n      }\n    }\n  }\n  return level[t] != -1;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 101,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 533,
        "startLineNumber" : 179,
        "startColumnNumber" : 4,
        "endLineNumber" : 196,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private boolean bfs(){\n  Arrays.fill(level,-1);\n  Deque<Integer> q=new ArrayDeque<>(n);\n  q.offer(s);\n  level[s]=0;\n  while (!q.isEmpty()) {\n    int node=q.poll();\n    for (    Edge edge : graph[node]) {\n      long cap=edge.remainingCapacity();\n      if (cap > 0 && level[edge.to] == -1) {\n        level[edge.to]=level[node] + 1;\n        q.offer(edge.to);\n      }\n    }\n  }\n  return level[t] != -1;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 105,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 293,
        "startLineNumber" : 184,
        "startColumnNumber" : 6,
        "endLineNumber" : 193,
        "endColumnNumber" : 7
      },
      "nodeContext" : "while (!q.isEmpty()) {\n  int node=q.poll();\n  for (  Edge edge : graph[node]) {\n    long cap=edge.remainingCapacity();\n    if (cap > 0 && level[edge.to] == -1) {\n      level[edge.to]=level[node] + 1;\n      q.offer(edge.to);\n    }\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 62,
      "astHeight" : 11
    },
    "tokenLength" : 2,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 184,
    "startColumnNumber" : 13,
    "endLineNumber" : 184,
    "endColumnNumber" : 25
  } ],
  "layoutRelationDataList" : [ ]
}