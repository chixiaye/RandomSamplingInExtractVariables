{
  "id" : 389,
  "expression" : "i",
  "projectName" : "square@retrofit",
  "commitID" : "757278c7ab7f6c8e5a40d16a5707c35e0f61c5ab",
  "filePath" : "/retrofit/src/main/java/retrofit/Types.java",
  "occurrences" : 6,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "i",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 126,
      "startColumnNumber" : 50,
      "endLineNumber" : 126,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 126,
        "startColumnNumber" : 50,
        "endLineNumber" : 126,
        "endColumnNumber" : 60
      },
      "nodeContext" : "i < length",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 337,
        "startLineNumber" : 126,
        "startColumnNumber" : 6,
        "endLineNumber" : 132,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0, length=interfaces.length; i < length; i++) {\n  if (interfaces[i] == toResolve) {\n    return rawType.getGenericInterfaces()[i];\n  }\n else   if (toResolve.isAssignableFrom(interfaces[i])) {\n    return getGenericSupertype(rawType.getGenericInterfaces()[i],interfaces[i],toResolve);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 50,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 406,
        "startLineNumber" : 124,
        "startColumnNumber" : 33,
        "endLineNumber" : 133,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Class<?>[] interfaces=rawType.getInterfaces();\n  for (int i=0, length=interfaces.length; i < length; i++) {\n    if (interfaces[i] == toResolve) {\n      return rawType.getGenericInterfaces()[i];\n    }\n else     if (toResolve.isAssignableFrom(interfaces[i])) {\n      return getGenericSupertype(rawType.getGenericInterfaces()[i],interfaces[i],toResolve);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 63,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 435,
        "startLineNumber" : 124,
        "startColumnNumber" : 4,
        "endLineNumber" : 133,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (toResolve.isInterface()) {\n  Class<?>[] interfaces=rawType.getInterfaces();\n  for (int i=0, length=interfaces.length; i < length; i++) {\n    if (interfaces[i] == toResolve) {\n      return rawType.getGenericInterfaces()[i];\n    }\n else     if (toResolve.isAssignableFrom(interfaces[i])) {\n      return getGenericSupertype(rawType.getGenericInterfaces()[i],interfaces[i],toResolve);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 67,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1090,
        "startLineNumber" : 120,
        "startColumnNumber" : 86,
        "endLineNumber" : 150,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (toResolve == rawType)   return context;\n  if (toResolve.isInterface()) {\n    Class<?>[] interfaces=rawType.getInterfaces();\n    for (int i=0, length=interfaces.length; i < length; i++) {\n      if (interfaces[i] == toResolve) {\n        return rawType.getGenericInterfaces()[i];\n      }\n else       if (toResolve.isAssignableFrom(interfaces[i])) {\n        return getGenericSupertype(rawType.getGenericInterfaces()[i],interfaces[i],toResolve);\n      }\n    }\n  }\n  if (!rawType.isInterface()) {\n    while (rawType != Object.class) {\n      Class<?> rawSupertype=rawType.getSuperclass();\n      if (rawSupertype == toResolve) {\n        return rawType.getGenericSuperclass();\n      }\n else       if (toResolve.isAssignableFrom(rawSupertype)) {\n        return getGenericSupertype(rawType.getGenericSuperclass(),rawSupertype,toResolve);\n      }\n      rawType=rawSupertype;\n    }\n  }\n  return toResolve;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 126,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1470,
        "startLineNumber" : 115,
        "startColumnNumber" : 2,
        "endLineNumber" : 150,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Returns the generic supertype for  {@code supertype}. For example, given a class  {@code IntegerSet}, the result for when supertype is  {@code Set.class} is {@code Set<Integer>} and theresult when the supertype is  {@code Collection.class} is {@code Collection<Integer>}.\n */\nstatic Type getGenericSupertype(Type context,Class<?> rawType,Class<?> toResolve){\n  if (toResolve == rawType)   return context;\n  if (toResolve.isInterface()) {\n    Class<?>[] interfaces=rawType.getInterfaces();\n    for (int i=0, length=interfaces.length; i < length; i++) {\n      if (interfaces[i] == toResolve) {\n        return rawType.getGenericInterfaces()[i];\n      }\n else       if (toResolve.isAssignableFrom(interfaces[i])) {\n        return getGenericSupertype(rawType.getGenericInterfaces()[i],interfaces[i],toResolve);\n      }\n    }\n  }\n  if (!rawType.isInterface()) {\n    while (rawType != Object.class) {\n      Class<?> rawSupertype=rawType.getSuperclass();\n      if (rawSupertype == toResolve) {\n        return rawType.getGenericSuperclass();\n      }\n else       if (toResolve.isAssignableFrom(rawSupertype)) {\n        return getGenericSupertype(rawType.getGenericSuperclass(),rawSupertype,toResolve);\n      }\n      rawType=rawSupertype;\n    }\n  }\n  return toResolve;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 148,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 126,
        "startColumnNumber" : 50,
        "endLineNumber" : 126,
        "endColumnNumber" : 60
      },
      "nodeContext" : "i < length",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "i",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 127,
      "startColumnNumber" : 23,
      "endLineNumber" : 127,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 127,
        "startColumnNumber" : 12,
        "endLineNumber" : 127,
        "endColumnNumber" : 25
      },
      "nodeContext" : "interfaces[i]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 127,
        "startColumnNumber" : 12,
        "endLineNumber" : 127,
        "endColumnNumber" : 38
      },
      "nodeContext" : "interfaces[i] == toResolve",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 258,
        "startLineNumber" : 127,
        "startColumnNumber" : 8,
        "endLineNumber" : 131,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (interfaces[i] == toResolve) {\n  return rawType.getGenericInterfaces()[i];\n}\n else if (toResolve.isAssignableFrom(interfaces[i])) {\n  return getGenericSupertype(rawType.getGenericInterfaces()[i],interfaces[i],toResolve);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 33,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 276,
        "startLineNumber" : 126,
        "startColumnNumber" : 67,
        "endLineNumber" : 132,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (interfaces[i] == toResolve) {\n    return rawType.getGenericInterfaces()[i];\n  }\n else   if (toResolve.isAssignableFrom(interfaces[i])) {\n    return getGenericSupertype(rawType.getGenericInterfaces()[i],interfaces[i],toResolve);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 34,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 337,
        "startLineNumber" : 126,
        "startColumnNumber" : 6,
        "endLineNumber" : 132,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0, length=interfaces.length; i < length; i++) {\n  if (interfaces[i] == toResolve) {\n    return rawType.getGenericInterfaces()[i];\n  }\n else   if (toResolve.isAssignableFrom(interfaces[i])) {\n    return getGenericSupertype(rawType.getGenericInterfaces()[i],interfaces[i],toResolve);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 50,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 406,
        "startLineNumber" : 124,
        "startColumnNumber" : 33,
        "endLineNumber" : 133,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Class<?>[] interfaces=rawType.getInterfaces();\n  for (int i=0, length=interfaces.length; i < length; i++) {\n    if (interfaces[i] == toResolve) {\n      return rawType.getGenericInterfaces()[i];\n    }\n else     if (toResolve.isAssignableFrom(interfaces[i])) {\n      return getGenericSupertype(rawType.getGenericInterfaces()[i],interfaces[i],toResolve);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 63,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 435,
        "startLineNumber" : 124,
        "startColumnNumber" : 4,
        "endLineNumber" : 133,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (toResolve.isInterface()) {\n  Class<?>[] interfaces=rawType.getInterfaces();\n  for (int i=0, length=interfaces.length; i < length; i++) {\n    if (interfaces[i] == toResolve) {\n      return rawType.getGenericInterfaces()[i];\n    }\n else     if (toResolve.isAssignableFrom(interfaces[i])) {\n      return getGenericSupertype(rawType.getGenericInterfaces()[i],interfaces[i],toResolve);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 67,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1090,
        "startLineNumber" : 120,
        "startColumnNumber" : 86,
        "endLineNumber" : 150,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (toResolve == rawType)   return context;\n  if (toResolve.isInterface()) {\n    Class<?>[] interfaces=rawType.getInterfaces();\n    for (int i=0, length=interfaces.length; i < length; i++) {\n      if (interfaces[i] == toResolve) {\n        return rawType.getGenericInterfaces()[i];\n      }\n else       if (toResolve.isAssignableFrom(interfaces[i])) {\n        return getGenericSupertype(rawType.getGenericInterfaces()[i],interfaces[i],toResolve);\n      }\n    }\n  }\n  if (!rawType.isInterface()) {\n    while (rawType != Object.class) {\n      Class<?> rawSupertype=rawType.getSuperclass();\n      if (rawSupertype == toResolve) {\n        return rawType.getGenericSuperclass();\n      }\n else       if (toResolve.isAssignableFrom(rawSupertype)) {\n        return getGenericSupertype(rawType.getGenericSuperclass(),rawSupertype,toResolve);\n      }\n      rawType=rawSupertype;\n    }\n  }\n  return toResolve;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 126,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1470,
        "startLineNumber" : 115,
        "startColumnNumber" : 2,
        "endLineNumber" : 150,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Returns the generic supertype for  {@code supertype}. For example, given a class  {@code IntegerSet}, the result for when supertype is  {@code Set.class} is {@code Set<Integer>} and theresult when the supertype is  {@code Collection.class} is {@code Collection<Integer>}.\n */\nstatic Type getGenericSupertype(Type context,Class<?> rawType,Class<?> toResolve){\n  if (toResolve == rawType)   return context;\n  if (toResolve.isInterface()) {\n    Class<?>[] interfaces=rawType.getInterfaces();\n    for (int i=0, length=interfaces.length; i < length; i++) {\n      if (interfaces[i] == toResolve) {\n        return rawType.getGenericInterfaces()[i];\n      }\n else       if (toResolve.isAssignableFrom(interfaces[i])) {\n        return getGenericSupertype(rawType.getGenericInterfaces()[i],interfaces[i],toResolve);\n      }\n    }\n  }\n  if (!rawType.isInterface()) {\n    while (rawType != Object.class) {\n      Class<?> rawSupertype=rawType.getSuperclass();\n      if (rawSupertype == toResolve) {\n        return rawType.getGenericSuperclass();\n      }\n else       if (toResolve.isAssignableFrom(rawSupertype)) {\n        return getGenericSupertype(rawType.getGenericSuperclass(),rawSupertype,toResolve);\n      }\n      rawType=rawSupertype;\n    }\n  }\n  return toResolve;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 148,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 127,
        "startColumnNumber" : 12,
        "endLineNumber" : 127,
        "endColumnNumber" : 38
      },
      "nodeContext" : "interfaces[i] == toResolve",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "i",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 128,
      "startColumnNumber" : 48,
      "endLineNumber" : 128,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 128,
        "startColumnNumber" : 17,
        "endLineNumber" : 128,
        "endColumnNumber" : 50
      },
      "nodeContext" : "rawType.getGenericInterfaces()[i]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 128,
        "startColumnNumber" : 10,
        "endLineNumber" : 128,
        "endColumnNumber" : 51
      },
      "nodeContext" : "return rawType.getGenericInterfaces()[i];\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 127,
        "startColumnNumber" : 40,
        "endLineNumber" : 129,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  return rawType.getGenericInterfaces()[i];\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 258,
        "startLineNumber" : 127,
        "startColumnNumber" : 8,
        "endLineNumber" : 131,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (interfaces[i] == toResolve) {\n  return rawType.getGenericInterfaces()[i];\n}\n else if (toResolve.isAssignableFrom(interfaces[i])) {\n  return getGenericSupertype(rawType.getGenericInterfaces()[i],interfaces[i],toResolve);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 33,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 276,
        "startLineNumber" : 126,
        "startColumnNumber" : 67,
        "endLineNumber" : 132,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (interfaces[i] == toResolve) {\n    return rawType.getGenericInterfaces()[i];\n  }\n else   if (toResolve.isAssignableFrom(interfaces[i])) {\n    return getGenericSupertype(rawType.getGenericInterfaces()[i],interfaces[i],toResolve);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 34,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 337,
        "startLineNumber" : 126,
        "startColumnNumber" : 6,
        "endLineNumber" : 132,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0, length=interfaces.length; i < length; i++) {\n  if (interfaces[i] == toResolve) {\n    return rawType.getGenericInterfaces()[i];\n  }\n else   if (toResolve.isAssignableFrom(interfaces[i])) {\n    return getGenericSupertype(rawType.getGenericInterfaces()[i],interfaces[i],toResolve);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 50,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 406,
        "startLineNumber" : 124,
        "startColumnNumber" : 33,
        "endLineNumber" : 133,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Class<?>[] interfaces=rawType.getInterfaces();\n  for (int i=0, length=interfaces.length; i < length; i++) {\n    if (interfaces[i] == toResolve) {\n      return rawType.getGenericInterfaces()[i];\n    }\n else     if (toResolve.isAssignableFrom(interfaces[i])) {\n      return getGenericSupertype(rawType.getGenericInterfaces()[i],interfaces[i],toResolve);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 63,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 435,
        "startLineNumber" : 124,
        "startColumnNumber" : 4,
        "endLineNumber" : 133,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (toResolve.isInterface()) {\n  Class<?>[] interfaces=rawType.getInterfaces();\n  for (int i=0, length=interfaces.length; i < length; i++) {\n    if (interfaces[i] == toResolve) {\n      return rawType.getGenericInterfaces()[i];\n    }\n else     if (toResolve.isAssignableFrom(interfaces[i])) {\n      return getGenericSupertype(rawType.getGenericInterfaces()[i],interfaces[i],toResolve);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 67,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1090,
        "startLineNumber" : 120,
        "startColumnNumber" : 86,
        "endLineNumber" : 150,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (toResolve == rawType)   return context;\n  if (toResolve.isInterface()) {\n    Class<?>[] interfaces=rawType.getInterfaces();\n    for (int i=0, length=interfaces.length; i < length; i++) {\n      if (interfaces[i] == toResolve) {\n        return rawType.getGenericInterfaces()[i];\n      }\n else       if (toResolve.isAssignableFrom(interfaces[i])) {\n        return getGenericSupertype(rawType.getGenericInterfaces()[i],interfaces[i],toResolve);\n      }\n    }\n  }\n  if (!rawType.isInterface()) {\n    while (rawType != Object.class) {\n      Class<?> rawSupertype=rawType.getSuperclass();\n      if (rawSupertype == toResolve) {\n        return rawType.getGenericSuperclass();\n      }\n else       if (toResolve.isAssignableFrom(rawSupertype)) {\n        return getGenericSupertype(rawType.getGenericSuperclass(),rawSupertype,toResolve);\n      }\n      rawType=rawSupertype;\n    }\n  }\n  return toResolve;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 126,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1470,
        "startLineNumber" : 115,
        "startColumnNumber" : 2,
        "endLineNumber" : 150,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Returns the generic supertype for  {@code supertype}. For example, given a class  {@code IntegerSet}, the result for when supertype is  {@code Set.class} is {@code Set<Integer>} and theresult when the supertype is  {@code Collection.class} is {@code Collection<Integer>}.\n */\nstatic Type getGenericSupertype(Type context,Class<?> rawType,Class<?> toResolve){\n  if (toResolve == rawType)   return context;\n  if (toResolve.isInterface()) {\n    Class<?>[] interfaces=rawType.getInterfaces();\n    for (int i=0, length=interfaces.length; i < length; i++) {\n      if (interfaces[i] == toResolve) {\n        return rawType.getGenericInterfaces()[i];\n      }\n else       if (toResolve.isAssignableFrom(interfaces[i])) {\n        return getGenericSupertype(rawType.getGenericInterfaces()[i],interfaces[i],toResolve);\n      }\n    }\n  }\n  if (!rawType.isInterface()) {\n    while (rawType != Object.class) {\n      Class<?> rawSupertype=rawType.getSuperclass();\n      if (rawSupertype == toResolve) {\n        return rawType.getGenericSuperclass();\n      }\n else       if (toResolve.isAssignableFrom(rawSupertype)) {\n        return getGenericSupertype(rawType.getGenericSuperclass(),rawSupertype,toResolve);\n      }\n      rawType=rawSupertype;\n    }\n  }\n  return toResolve;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 148,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 128,
        "startColumnNumber" : 10,
        "endLineNumber" : 128,
        "endColumnNumber" : 51
      },
      "nodeContext" : "return rawType.getGenericInterfaces()[i];\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "i",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 129,
      "startColumnNumber" : 57,
      "endLineNumber" : 129,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 129,
        "startColumnNumber" : 46,
        "endLineNumber" : 129,
        "endColumnNumber" : 59
      },
      "nodeContext" : "interfaces[i]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 129,
        "startColumnNumber" : 19,
        "endLineNumber" : 129,
        "endColumnNumber" : 60
      },
      "nodeContext" : "toResolve.isAssignableFrom(interfaces[i])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 157,
        "startLineNumber" : 129,
        "startColumnNumber" : 15,
        "endLineNumber" : 131,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (toResolve.isAssignableFrom(interfaces[i])) {\n  return getGenericSupertype(rawType.getGenericInterfaces()[i],interfaces[i],toResolve);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 258,
        "startLineNumber" : 127,
        "startColumnNumber" : 8,
        "endLineNumber" : 131,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (interfaces[i] == toResolve) {\n  return rawType.getGenericInterfaces()[i];\n}\n else if (toResolve.isAssignableFrom(interfaces[i])) {\n  return getGenericSupertype(rawType.getGenericInterfaces()[i],interfaces[i],toResolve);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 33,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 276,
        "startLineNumber" : 126,
        "startColumnNumber" : 67,
        "endLineNumber" : 132,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (interfaces[i] == toResolve) {\n    return rawType.getGenericInterfaces()[i];\n  }\n else   if (toResolve.isAssignableFrom(interfaces[i])) {\n    return getGenericSupertype(rawType.getGenericInterfaces()[i],interfaces[i],toResolve);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 34,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 337,
        "startLineNumber" : 126,
        "startColumnNumber" : 6,
        "endLineNumber" : 132,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0, length=interfaces.length; i < length; i++) {\n  if (interfaces[i] == toResolve) {\n    return rawType.getGenericInterfaces()[i];\n  }\n else   if (toResolve.isAssignableFrom(interfaces[i])) {\n    return getGenericSupertype(rawType.getGenericInterfaces()[i],interfaces[i],toResolve);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 50,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 406,
        "startLineNumber" : 124,
        "startColumnNumber" : 33,
        "endLineNumber" : 133,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Class<?>[] interfaces=rawType.getInterfaces();\n  for (int i=0, length=interfaces.length; i < length; i++) {\n    if (interfaces[i] == toResolve) {\n      return rawType.getGenericInterfaces()[i];\n    }\n else     if (toResolve.isAssignableFrom(interfaces[i])) {\n      return getGenericSupertype(rawType.getGenericInterfaces()[i],interfaces[i],toResolve);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 63,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 435,
        "startLineNumber" : 124,
        "startColumnNumber" : 4,
        "endLineNumber" : 133,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (toResolve.isInterface()) {\n  Class<?>[] interfaces=rawType.getInterfaces();\n  for (int i=0, length=interfaces.length; i < length; i++) {\n    if (interfaces[i] == toResolve) {\n      return rawType.getGenericInterfaces()[i];\n    }\n else     if (toResolve.isAssignableFrom(interfaces[i])) {\n      return getGenericSupertype(rawType.getGenericInterfaces()[i],interfaces[i],toResolve);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 67,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1090,
        "startLineNumber" : 120,
        "startColumnNumber" : 86,
        "endLineNumber" : 150,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (toResolve == rawType)   return context;\n  if (toResolve.isInterface()) {\n    Class<?>[] interfaces=rawType.getInterfaces();\n    for (int i=0, length=interfaces.length; i < length; i++) {\n      if (interfaces[i] == toResolve) {\n        return rawType.getGenericInterfaces()[i];\n      }\n else       if (toResolve.isAssignableFrom(interfaces[i])) {\n        return getGenericSupertype(rawType.getGenericInterfaces()[i],interfaces[i],toResolve);\n      }\n    }\n  }\n  if (!rawType.isInterface()) {\n    while (rawType != Object.class) {\n      Class<?> rawSupertype=rawType.getSuperclass();\n      if (rawSupertype == toResolve) {\n        return rawType.getGenericSuperclass();\n      }\n else       if (toResolve.isAssignableFrom(rawSupertype)) {\n        return getGenericSupertype(rawType.getGenericSuperclass(),rawSupertype,toResolve);\n      }\n      rawType=rawSupertype;\n    }\n  }\n  return toResolve;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 126,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1470,
        "startLineNumber" : 115,
        "startColumnNumber" : 2,
        "endLineNumber" : 150,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Returns the generic supertype for  {@code supertype}. For example, given a class  {@code IntegerSet}, the result for when supertype is  {@code Set.class} is {@code Set<Integer>} and theresult when the supertype is  {@code Collection.class} is {@code Collection<Integer>}.\n */\nstatic Type getGenericSupertype(Type context,Class<?> rawType,Class<?> toResolve){\n  if (toResolve == rawType)   return context;\n  if (toResolve.isInterface()) {\n    Class<?>[] interfaces=rawType.getInterfaces();\n    for (int i=0, length=interfaces.length; i < length; i++) {\n      if (interfaces[i] == toResolve) {\n        return rawType.getGenericInterfaces()[i];\n      }\n else       if (toResolve.isAssignableFrom(interfaces[i])) {\n        return getGenericSupertype(rawType.getGenericInterfaces()[i],interfaces[i],toResolve);\n      }\n    }\n  }\n  if (!rawType.isInterface()) {\n    while (rawType != Object.class) {\n      Class<?> rawSupertype=rawType.getSuperclass();\n      if (rawSupertype == toResolve) {\n        return rawType.getGenericSuperclass();\n      }\n else       if (toResolve.isAssignableFrom(rawSupertype)) {\n        return getGenericSupertype(rawType.getGenericSuperclass(),rawSupertype,toResolve);\n      }\n      rawType=rawSupertype;\n    }\n  }\n  return toResolve;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 148,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 129,
        "startColumnNumber" : 19,
        "endLineNumber" : 129,
        "endColumnNumber" : 60
      },
      "nodeContext" : "toResolve.isAssignableFrom(interfaces[i])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "i",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 130,
      "startColumnNumber" : 68,
      "endLineNumber" : 130,
      "endColumnNumber" : 69
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 130,
        "startColumnNumber" : 37,
        "endLineNumber" : 130,
        "endColumnNumber" : 70
      },
      "nodeContext" : "rawType.getGenericInterfaces()[i]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 130,
        "startColumnNumber" : 17,
        "endLineNumber" : 130,
        "endColumnNumber" : 97
      },
      "nodeContext" : "getGenericSupertype(rawType.getGenericInterfaces()[i],interfaces[i],toResolve)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 130,
        "startColumnNumber" : 10,
        "endLineNumber" : 130,
        "endColumnNumber" : 98
      },
      "nodeContext" : "return getGenericSupertype(rawType.getGenericInterfaces()[i],interfaces[i],toResolve);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 129,
        "startColumnNumber" : 62,
        "endLineNumber" : 131,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  return getGenericSupertype(rawType.getGenericInterfaces()[i],interfaces[i],toResolve);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 157,
        "startLineNumber" : 129,
        "startColumnNumber" : 15,
        "endLineNumber" : 131,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (toResolve.isAssignableFrom(interfaces[i])) {\n  return getGenericSupertype(rawType.getGenericInterfaces()[i],interfaces[i],toResolve);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 258,
        "startLineNumber" : 127,
        "startColumnNumber" : 8,
        "endLineNumber" : 131,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (interfaces[i] == toResolve) {\n  return rawType.getGenericInterfaces()[i];\n}\n else if (toResolve.isAssignableFrom(interfaces[i])) {\n  return getGenericSupertype(rawType.getGenericInterfaces()[i],interfaces[i],toResolve);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 33,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 276,
        "startLineNumber" : 126,
        "startColumnNumber" : 67,
        "endLineNumber" : 132,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (interfaces[i] == toResolve) {\n    return rawType.getGenericInterfaces()[i];\n  }\n else   if (toResolve.isAssignableFrom(interfaces[i])) {\n    return getGenericSupertype(rawType.getGenericInterfaces()[i],interfaces[i],toResolve);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 34,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 337,
        "startLineNumber" : 126,
        "startColumnNumber" : 6,
        "endLineNumber" : 132,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0, length=interfaces.length; i < length; i++) {\n  if (interfaces[i] == toResolve) {\n    return rawType.getGenericInterfaces()[i];\n  }\n else   if (toResolve.isAssignableFrom(interfaces[i])) {\n    return getGenericSupertype(rawType.getGenericInterfaces()[i],interfaces[i],toResolve);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 50,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 406,
        "startLineNumber" : 124,
        "startColumnNumber" : 33,
        "endLineNumber" : 133,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Class<?>[] interfaces=rawType.getInterfaces();\n  for (int i=0, length=interfaces.length; i < length; i++) {\n    if (interfaces[i] == toResolve) {\n      return rawType.getGenericInterfaces()[i];\n    }\n else     if (toResolve.isAssignableFrom(interfaces[i])) {\n      return getGenericSupertype(rawType.getGenericInterfaces()[i],interfaces[i],toResolve);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 63,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 435,
        "startLineNumber" : 124,
        "startColumnNumber" : 4,
        "endLineNumber" : 133,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (toResolve.isInterface()) {\n  Class<?>[] interfaces=rawType.getInterfaces();\n  for (int i=0, length=interfaces.length; i < length; i++) {\n    if (interfaces[i] == toResolve) {\n      return rawType.getGenericInterfaces()[i];\n    }\n else     if (toResolve.isAssignableFrom(interfaces[i])) {\n      return getGenericSupertype(rawType.getGenericInterfaces()[i],interfaces[i],toResolve);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 67,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1090,
        "startLineNumber" : 120,
        "startColumnNumber" : 86,
        "endLineNumber" : 150,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (toResolve == rawType)   return context;\n  if (toResolve.isInterface()) {\n    Class<?>[] interfaces=rawType.getInterfaces();\n    for (int i=0, length=interfaces.length; i < length; i++) {\n      if (interfaces[i] == toResolve) {\n        return rawType.getGenericInterfaces()[i];\n      }\n else       if (toResolve.isAssignableFrom(interfaces[i])) {\n        return getGenericSupertype(rawType.getGenericInterfaces()[i],interfaces[i],toResolve);\n      }\n    }\n  }\n  if (!rawType.isInterface()) {\n    while (rawType != Object.class) {\n      Class<?> rawSupertype=rawType.getSuperclass();\n      if (rawSupertype == toResolve) {\n        return rawType.getGenericSuperclass();\n      }\n else       if (toResolve.isAssignableFrom(rawSupertype)) {\n        return getGenericSupertype(rawType.getGenericSuperclass(),rawSupertype,toResolve);\n      }\n      rawType=rawSupertype;\n    }\n  }\n  return toResolve;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 126,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1470,
        "startLineNumber" : 115,
        "startColumnNumber" : 2,
        "endLineNumber" : 150,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Returns the generic supertype for  {@code supertype}. For example, given a class  {@code IntegerSet}, the result for when supertype is  {@code Set.class} is {@code Set<Integer>} and theresult when the supertype is  {@code Collection.class} is {@code Collection<Integer>}.\n */\nstatic Type getGenericSupertype(Type context,Class<?> rawType,Class<?> toResolve){\n  if (toResolve == rawType)   return context;\n  if (toResolve.isInterface()) {\n    Class<?>[] interfaces=rawType.getInterfaces();\n    for (int i=0, length=interfaces.length; i < length; i++) {\n      if (interfaces[i] == toResolve) {\n        return rawType.getGenericInterfaces()[i];\n      }\n else       if (toResolve.isAssignableFrom(interfaces[i])) {\n        return getGenericSupertype(rawType.getGenericInterfaces()[i],interfaces[i],toResolve);\n      }\n    }\n  }\n  if (!rawType.isInterface()) {\n    while (rawType != Object.class) {\n      Class<?> rawSupertype=rawType.getSuperclass();\n      if (rawSupertype == toResolve) {\n        return rawType.getGenericSuperclass();\n      }\n else       if (toResolve.isAssignableFrom(rawSupertype)) {\n        return getGenericSupertype(rawType.getGenericSuperclass(),rawSupertype,toResolve);\n      }\n      rawType=rawSupertype;\n    }\n  }\n  return toResolve;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 148,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 130,
        "startColumnNumber" : 10,
        "endLineNumber" : 130,
        "endColumnNumber" : 98
      },
      "nodeContext" : "return getGenericSupertype(rawType.getGenericInterfaces()[i],interfaces[i],toResolve);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "i",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 130,
      "startColumnNumber" : 83,
      "endLineNumber" : 130,
      "endColumnNumber" : 84
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 130,
        "startColumnNumber" : 72,
        "endLineNumber" : 130,
        "endColumnNumber" : 85
      },
      "nodeContext" : "interfaces[i]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 130,
        "startColumnNumber" : 17,
        "endLineNumber" : 130,
        "endColumnNumber" : 97
      },
      "nodeContext" : "getGenericSupertype(rawType.getGenericInterfaces()[i],interfaces[i],toResolve)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 130,
        "startColumnNumber" : 10,
        "endLineNumber" : 130,
        "endColumnNumber" : 98
      },
      "nodeContext" : "return getGenericSupertype(rawType.getGenericInterfaces()[i],interfaces[i],toResolve);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 129,
        "startColumnNumber" : 62,
        "endLineNumber" : 131,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  return getGenericSupertype(rawType.getGenericInterfaces()[i],interfaces[i],toResolve);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 157,
        "startLineNumber" : 129,
        "startColumnNumber" : 15,
        "endLineNumber" : 131,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (toResolve.isAssignableFrom(interfaces[i])) {\n  return getGenericSupertype(rawType.getGenericInterfaces()[i],interfaces[i],toResolve);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 258,
        "startLineNumber" : 127,
        "startColumnNumber" : 8,
        "endLineNumber" : 131,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (interfaces[i] == toResolve) {\n  return rawType.getGenericInterfaces()[i];\n}\n else if (toResolve.isAssignableFrom(interfaces[i])) {\n  return getGenericSupertype(rawType.getGenericInterfaces()[i],interfaces[i],toResolve);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 33,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 276,
        "startLineNumber" : 126,
        "startColumnNumber" : 67,
        "endLineNumber" : 132,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (interfaces[i] == toResolve) {\n    return rawType.getGenericInterfaces()[i];\n  }\n else   if (toResolve.isAssignableFrom(interfaces[i])) {\n    return getGenericSupertype(rawType.getGenericInterfaces()[i],interfaces[i],toResolve);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 34,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 337,
        "startLineNumber" : 126,
        "startColumnNumber" : 6,
        "endLineNumber" : 132,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0, length=interfaces.length; i < length; i++) {\n  if (interfaces[i] == toResolve) {\n    return rawType.getGenericInterfaces()[i];\n  }\n else   if (toResolve.isAssignableFrom(interfaces[i])) {\n    return getGenericSupertype(rawType.getGenericInterfaces()[i],interfaces[i],toResolve);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 50,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 406,
        "startLineNumber" : 124,
        "startColumnNumber" : 33,
        "endLineNumber" : 133,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Class<?>[] interfaces=rawType.getInterfaces();\n  for (int i=0, length=interfaces.length; i < length; i++) {\n    if (interfaces[i] == toResolve) {\n      return rawType.getGenericInterfaces()[i];\n    }\n else     if (toResolve.isAssignableFrom(interfaces[i])) {\n      return getGenericSupertype(rawType.getGenericInterfaces()[i],interfaces[i],toResolve);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 63,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 435,
        "startLineNumber" : 124,
        "startColumnNumber" : 4,
        "endLineNumber" : 133,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (toResolve.isInterface()) {\n  Class<?>[] interfaces=rawType.getInterfaces();\n  for (int i=0, length=interfaces.length; i < length; i++) {\n    if (interfaces[i] == toResolve) {\n      return rawType.getGenericInterfaces()[i];\n    }\n else     if (toResolve.isAssignableFrom(interfaces[i])) {\n      return getGenericSupertype(rawType.getGenericInterfaces()[i],interfaces[i],toResolve);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 67,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1090,
        "startLineNumber" : 120,
        "startColumnNumber" : 86,
        "endLineNumber" : 150,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (toResolve == rawType)   return context;\n  if (toResolve.isInterface()) {\n    Class<?>[] interfaces=rawType.getInterfaces();\n    for (int i=0, length=interfaces.length; i < length; i++) {\n      if (interfaces[i] == toResolve) {\n        return rawType.getGenericInterfaces()[i];\n      }\n else       if (toResolve.isAssignableFrom(interfaces[i])) {\n        return getGenericSupertype(rawType.getGenericInterfaces()[i],interfaces[i],toResolve);\n      }\n    }\n  }\n  if (!rawType.isInterface()) {\n    while (rawType != Object.class) {\n      Class<?> rawSupertype=rawType.getSuperclass();\n      if (rawSupertype == toResolve) {\n        return rawType.getGenericSuperclass();\n      }\n else       if (toResolve.isAssignableFrom(rawSupertype)) {\n        return getGenericSupertype(rawType.getGenericSuperclass(),rawSupertype,toResolve);\n      }\n      rawType=rawSupertype;\n    }\n  }\n  return toResolve;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 126,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1470,
        "startLineNumber" : 115,
        "startColumnNumber" : 2,
        "endLineNumber" : 150,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Returns the generic supertype for  {@code supertype}. For example, given a class  {@code IntegerSet}, the result for when supertype is  {@code Set.class} is {@code Set<Integer>} and theresult when the supertype is  {@code Collection.class} is {@code Collection<Integer>}.\n */\nstatic Type getGenericSupertype(Type context,Class<?> rawType,Class<?> toResolve){\n  if (toResolve == rawType)   return context;\n  if (toResolve.isInterface()) {\n    Class<?>[] interfaces=rawType.getInterfaces();\n    for (int i=0, length=interfaces.length; i < length; i++) {\n      if (interfaces[i] == toResolve) {\n        return rawType.getGenericInterfaces()[i];\n      }\n else       if (toResolve.isAssignableFrom(interfaces[i])) {\n        return getGenericSupertype(rawType.getGenericInterfaces()[i],interfaces[i],toResolve);\n      }\n    }\n  }\n  if (!rawType.isInterface()) {\n    while (rawType != Object.class) {\n      Class<?> rawSupertype=rawType.getSuperclass();\n      if (rawSupertype == toResolve) {\n        return rawType.getGenericSuperclass();\n      }\n else       if (toResolve.isAssignableFrom(rawSupertype)) {\n        return getGenericSupertype(rawType.getGenericSuperclass(),rawSupertype,toResolve);\n      }\n      rawType=rawSupertype;\n    }\n  }\n  return toResolve;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 148,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 130,
        "startColumnNumber" : 10,
        "endLineNumber" : 130,
        "endColumnNumber" : 98
      },
      "nodeContext" : "return getGenericSupertype(rawType.getGenericInterfaces()[i],interfaces[i],toResolve);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 126,
    "startColumnNumber" : 50,
    "endLineNumber" : 126,
    "endColumnNumber" : 51
  }, {
    "charLength" : 1,
    "startLineNumber" : 127,
    "startColumnNumber" : 23,
    "endLineNumber" : 127,
    "endColumnNumber" : 24
  }, {
    "charLength" : 1,
    "startLineNumber" : 128,
    "startColumnNumber" : 48,
    "endLineNumber" : 128,
    "endColumnNumber" : 49
  }, {
    "charLength" : 1,
    "startLineNumber" : 129,
    "startColumnNumber" : 57,
    "endLineNumber" : 129,
    "endColumnNumber" : 58
  }, {
    "charLength" : 1,
    "startLineNumber" : 130,
    "startColumnNumber" : 68,
    "endLineNumber" : 130,
    "endColumnNumber" : 69
  }, {
    "charLength" : 1,
    "startLineNumber" : 130,
    "startColumnNumber" : 83,
    "endLineNumber" : 130,
    "endColumnNumber" : 84
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 1
  } ]
}