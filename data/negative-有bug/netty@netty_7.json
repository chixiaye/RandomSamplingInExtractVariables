{
  "id" : 7,
  "expression" : "null",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/transport-native-unix-common-tests/src/main/java/io/netty/channel/unix/tests/DetectPeerCloseWithoutReadTest.java",
  "occurrences" : 6,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 59,
      "startColumnNumber" : 37,
      "endLineNumber" : 59,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 59,
        "startColumnNumber" : 23,
        "endLineNumber" : 59,
        "endColumnNumber" : 41
      },
      "nodeContext" : "serverGroup=null",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 59,
        "endColumnNumber" : 42
      },
      "nodeContext" : "EventLoopGroup serverGroup=null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2233,
        "startLineNumber" : 58,
        "startColumnNumber" : 108,
        "endLineNumber" : 107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  EventLoopGroup serverGroup=null;\n  EventLoopGroup clientGroup=null;\n  Channel serverChannel=null;\n  try {\n    final CountDownLatch latch=new CountDownLatch(1);\n    final AtomicInteger bytesRead=new AtomicInteger();\n    final int expectedBytes=100;\n    serverGroup=newGroup();\n    clientGroup=newGroup();\n    ServerBootstrap sb=new ServerBootstrap();\n    sb.group(serverGroup);\n    sb.channel(serverChannel());\n    sb.childOption(ChannelOption.AUTO_READ,false);\n    sb.childOption(ChannelOption.MAX_MESSAGES_PER_READ,1);\n    sb.childOption(ChannelOption.RCVBUF_ALLOCATOR,new FixedRecvByteBufAllocator(expectedBytes / 10));\n    sb.childHandler(new ChannelInitializer<Channel>(){\n      @Override protected void initChannel(      Channel ch){\n        ch.pipeline().addLast(new TestHandler(bytesRead,extraReadRequested,latch));\n      }\n    }\n);\n    serverChannel=sb.bind(new InetSocketAddress(0)).get();\n    Bootstrap cb=new Bootstrap();\n    cb.group(serverGroup);\n    cb.channel(clientChannel());\n    cb.handler(new ChannelHandler(){\n    }\n);\n    Channel clientChannel=cb.connect(serverChannel.localAddress()).get();\n    ByteBuf buf=clientChannel.alloc().buffer(expectedBytes);\n    buf.writerIndex(buf.writerIndex() + expectedBytes);\n    clientChannel.writeAndFlush(buf).addListener(clientChannel,ChannelFutureListeners.CLOSE);\n    latch.await();\n    assertEquals(expectedBytes,bytesRead.get());\n  }\n  finally {\n    if (serverChannel != null) {\n      serverChannel.close().syncUninterruptibly();\n    }\n    if (serverGroup != null) {\n      serverGroup.shutdownGracefully();\n    }\n    if (clientGroup != null) {\n      clientGroup.shutdownGracefully();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 262,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2337,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void clientCloseWithoutServerReadIsDetected0(final boolean extraReadRequested) throws Exception {\n  EventLoopGroup serverGroup=null;\n  EventLoopGroup clientGroup=null;\n  Channel serverChannel=null;\n  try {\n    final CountDownLatch latch=new CountDownLatch(1);\n    final AtomicInteger bytesRead=new AtomicInteger();\n    final int expectedBytes=100;\n    serverGroup=newGroup();\n    clientGroup=newGroup();\n    ServerBootstrap sb=new ServerBootstrap();\n    sb.group(serverGroup);\n    sb.channel(serverChannel());\n    sb.childOption(ChannelOption.AUTO_READ,false);\n    sb.childOption(ChannelOption.MAX_MESSAGES_PER_READ,1);\n    sb.childOption(ChannelOption.RCVBUF_ALLOCATOR,new FixedRecvByteBufAllocator(expectedBytes / 10));\n    sb.childHandler(new ChannelInitializer<Channel>(){\n      @Override protected void initChannel(      Channel ch){\n        ch.pipeline().addLast(new TestHandler(bytesRead,extraReadRequested,latch));\n      }\n    }\n);\n    serverChannel=sb.bind(new InetSocketAddress(0)).get();\n    Bootstrap cb=new Bootstrap();\n    cb.group(serverGroup);\n    cb.channel(clientChannel());\n    cb.handler(new ChannelHandler(){\n    }\n);\n    Channel clientChannel=cb.connect(serverChannel.localAddress()).get();\n    ByteBuf buf=clientChannel.alloc().buffer(expectedBytes);\n    buf.writerIndex(buf.writerIndex() + expectedBytes);\n    clientChannel.writeAndFlush(buf).addListener(clientChannel,ChannelFutureListeners.CLOSE);\n    latch.await();\n    assertEquals(expectedBytes,bytesRead.get());\n  }\n  finally {\n    if (serverChannel != null) {\n      serverChannel.close().syncUninterruptibly();\n    }\n    if (serverGroup != null) {\n      serverGroup.shutdownGracefully();\n    }\n    if (clientGroup != null) {\n      clientGroup.shutdownGracefully();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 272,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 59,
        "endColumnNumber" : 42
      },
      "nodeContext" : "EventLoopGroup serverGroup=null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 60,
      "startColumnNumber" : 37,
      "endLineNumber" : 60,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 60,
        "startColumnNumber" : 23,
        "endLineNumber" : 60,
        "endColumnNumber" : 41
      },
      "nodeContext" : "clientGroup=null",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 60,
        "startColumnNumber" : 8,
        "endLineNumber" : 60,
        "endColumnNumber" : 42
      },
      "nodeContext" : "EventLoopGroup clientGroup=null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2233,
        "startLineNumber" : 58,
        "startColumnNumber" : 108,
        "endLineNumber" : 107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  EventLoopGroup serverGroup=null;\n  EventLoopGroup clientGroup=null;\n  Channel serverChannel=null;\n  try {\n    final CountDownLatch latch=new CountDownLatch(1);\n    final AtomicInteger bytesRead=new AtomicInteger();\n    final int expectedBytes=100;\n    serverGroup=newGroup();\n    clientGroup=newGroup();\n    ServerBootstrap sb=new ServerBootstrap();\n    sb.group(serverGroup);\n    sb.channel(serverChannel());\n    sb.childOption(ChannelOption.AUTO_READ,false);\n    sb.childOption(ChannelOption.MAX_MESSAGES_PER_READ,1);\n    sb.childOption(ChannelOption.RCVBUF_ALLOCATOR,new FixedRecvByteBufAllocator(expectedBytes / 10));\n    sb.childHandler(new ChannelInitializer<Channel>(){\n      @Override protected void initChannel(      Channel ch){\n        ch.pipeline().addLast(new TestHandler(bytesRead,extraReadRequested,latch));\n      }\n    }\n);\n    serverChannel=sb.bind(new InetSocketAddress(0)).get();\n    Bootstrap cb=new Bootstrap();\n    cb.group(serverGroup);\n    cb.channel(clientChannel());\n    cb.handler(new ChannelHandler(){\n    }\n);\n    Channel clientChannel=cb.connect(serverChannel.localAddress()).get();\n    ByteBuf buf=clientChannel.alloc().buffer(expectedBytes);\n    buf.writerIndex(buf.writerIndex() + expectedBytes);\n    clientChannel.writeAndFlush(buf).addListener(clientChannel,ChannelFutureListeners.CLOSE);\n    latch.await();\n    assertEquals(expectedBytes,bytesRead.get());\n  }\n  finally {\n    if (serverChannel != null) {\n      serverChannel.close().syncUninterruptibly();\n    }\n    if (serverGroup != null) {\n      serverGroup.shutdownGracefully();\n    }\n    if (clientGroup != null) {\n      clientGroup.shutdownGracefully();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 262,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2337,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void clientCloseWithoutServerReadIsDetected0(final boolean extraReadRequested) throws Exception {\n  EventLoopGroup serverGroup=null;\n  EventLoopGroup clientGroup=null;\n  Channel serverChannel=null;\n  try {\n    final CountDownLatch latch=new CountDownLatch(1);\n    final AtomicInteger bytesRead=new AtomicInteger();\n    final int expectedBytes=100;\n    serverGroup=newGroup();\n    clientGroup=newGroup();\n    ServerBootstrap sb=new ServerBootstrap();\n    sb.group(serverGroup);\n    sb.channel(serverChannel());\n    sb.childOption(ChannelOption.AUTO_READ,false);\n    sb.childOption(ChannelOption.MAX_MESSAGES_PER_READ,1);\n    sb.childOption(ChannelOption.RCVBUF_ALLOCATOR,new FixedRecvByteBufAllocator(expectedBytes / 10));\n    sb.childHandler(new ChannelInitializer<Channel>(){\n      @Override protected void initChannel(      Channel ch){\n        ch.pipeline().addLast(new TestHandler(bytesRead,extraReadRequested,latch));\n      }\n    }\n);\n    serverChannel=sb.bind(new InetSocketAddress(0)).get();\n    Bootstrap cb=new Bootstrap();\n    cb.group(serverGroup);\n    cb.channel(clientChannel());\n    cb.handler(new ChannelHandler(){\n    }\n);\n    Channel clientChannel=cb.connect(serverChannel.localAddress()).get();\n    ByteBuf buf=clientChannel.alloc().buffer(expectedBytes);\n    buf.writerIndex(buf.writerIndex() + expectedBytes);\n    clientChannel.writeAndFlush(buf).addListener(clientChannel,ChannelFutureListeners.CLOSE);\n    latch.await();\n    assertEquals(expectedBytes,bytesRead.get());\n  }\n  finally {\n    if (serverChannel != null) {\n      serverChannel.close().syncUninterruptibly();\n    }\n    if (serverGroup != null) {\n      serverGroup.shutdownGracefully();\n    }\n    if (clientGroup != null) {\n      clientGroup.shutdownGracefully();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 272,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 60,
        "startColumnNumber" : 8,
        "endLineNumber" : 60,
        "endColumnNumber" : 42
      },
      "nodeContext" : "EventLoopGroup clientGroup=null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 61,
      "startColumnNumber" : 32,
      "endLineNumber" : 61,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 61,
        "startColumnNumber" : 16,
        "endLineNumber" : 61,
        "endColumnNumber" : 36
      },
      "nodeContext" : "serverChannel=null",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 61,
        "startColumnNumber" : 8,
        "endLineNumber" : 61,
        "endColumnNumber" : 37
      },
      "nodeContext" : "Channel serverChannel=null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2233,
        "startLineNumber" : 58,
        "startColumnNumber" : 108,
        "endLineNumber" : 107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  EventLoopGroup serverGroup=null;\n  EventLoopGroup clientGroup=null;\n  Channel serverChannel=null;\n  try {\n    final CountDownLatch latch=new CountDownLatch(1);\n    final AtomicInteger bytesRead=new AtomicInteger();\n    final int expectedBytes=100;\n    serverGroup=newGroup();\n    clientGroup=newGroup();\n    ServerBootstrap sb=new ServerBootstrap();\n    sb.group(serverGroup);\n    sb.channel(serverChannel());\n    sb.childOption(ChannelOption.AUTO_READ,false);\n    sb.childOption(ChannelOption.MAX_MESSAGES_PER_READ,1);\n    sb.childOption(ChannelOption.RCVBUF_ALLOCATOR,new FixedRecvByteBufAllocator(expectedBytes / 10));\n    sb.childHandler(new ChannelInitializer<Channel>(){\n      @Override protected void initChannel(      Channel ch){\n        ch.pipeline().addLast(new TestHandler(bytesRead,extraReadRequested,latch));\n      }\n    }\n);\n    serverChannel=sb.bind(new InetSocketAddress(0)).get();\n    Bootstrap cb=new Bootstrap();\n    cb.group(serverGroup);\n    cb.channel(clientChannel());\n    cb.handler(new ChannelHandler(){\n    }\n);\n    Channel clientChannel=cb.connect(serverChannel.localAddress()).get();\n    ByteBuf buf=clientChannel.alloc().buffer(expectedBytes);\n    buf.writerIndex(buf.writerIndex() + expectedBytes);\n    clientChannel.writeAndFlush(buf).addListener(clientChannel,ChannelFutureListeners.CLOSE);\n    latch.await();\n    assertEquals(expectedBytes,bytesRead.get());\n  }\n  finally {\n    if (serverChannel != null) {\n      serverChannel.close().syncUninterruptibly();\n    }\n    if (serverGroup != null) {\n      serverGroup.shutdownGracefully();\n    }\n    if (clientGroup != null) {\n      clientGroup.shutdownGracefully();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 262,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2337,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void clientCloseWithoutServerReadIsDetected0(final boolean extraReadRequested) throws Exception {\n  EventLoopGroup serverGroup=null;\n  EventLoopGroup clientGroup=null;\n  Channel serverChannel=null;\n  try {\n    final CountDownLatch latch=new CountDownLatch(1);\n    final AtomicInteger bytesRead=new AtomicInteger();\n    final int expectedBytes=100;\n    serverGroup=newGroup();\n    clientGroup=newGroup();\n    ServerBootstrap sb=new ServerBootstrap();\n    sb.group(serverGroup);\n    sb.channel(serverChannel());\n    sb.childOption(ChannelOption.AUTO_READ,false);\n    sb.childOption(ChannelOption.MAX_MESSAGES_PER_READ,1);\n    sb.childOption(ChannelOption.RCVBUF_ALLOCATOR,new FixedRecvByteBufAllocator(expectedBytes / 10));\n    sb.childHandler(new ChannelInitializer<Channel>(){\n      @Override protected void initChannel(      Channel ch){\n        ch.pipeline().addLast(new TestHandler(bytesRead,extraReadRequested,latch));\n      }\n    }\n);\n    serverChannel=sb.bind(new InetSocketAddress(0)).get();\n    Bootstrap cb=new Bootstrap();\n    cb.group(serverGroup);\n    cb.channel(clientChannel());\n    cb.handler(new ChannelHandler(){\n    }\n);\n    Channel clientChannel=cb.connect(serverChannel.localAddress()).get();\n    ByteBuf buf=clientChannel.alloc().buffer(expectedBytes);\n    buf.writerIndex(buf.writerIndex() + expectedBytes);\n    clientChannel.writeAndFlush(buf).addListener(clientChannel,ChannelFutureListeners.CLOSE);\n    latch.await();\n    assertEquals(expectedBytes,bytesRead.get());\n  }\n  finally {\n    if (serverChannel != null) {\n      serverChannel.close().syncUninterruptibly();\n    }\n    if (serverGroup != null) {\n      serverGroup.shutdownGracefully();\n    }\n    if (clientGroup != null) {\n      clientGroup.shutdownGracefully();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 272,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 61,
        "startColumnNumber" : 8,
        "endLineNumber" : 61,
        "endColumnNumber" : 37
      },
      "nodeContext" : "Channel serverChannel=null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 97,
      "startColumnNumber" : 33,
      "endLineNumber" : 97,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 97,
        "startColumnNumber" : 16,
        "endLineNumber" : 97,
        "endColumnNumber" : 37
      },
      "nodeContext" : "serverChannel != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 97,
        "startColumnNumber" : 12,
        "endLineNumber" : 99,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (serverChannel != null) {\n  serverChannel.close().syncUninterruptibly();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,finally]",
      "nodePosition" : {
        "charLength" : 343,
        "startLineNumber" : 96,
        "startColumnNumber" : 18,
        "endLineNumber" : 106,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (serverChannel != null) {\n    serverChannel.close().syncUninterruptibly();\n  }\n  if (serverGroup != null) {\n    serverGroup.shutdownGracefully();\n  }\n  if (clientGroup != null) {\n    clientGroup.shutdownGracefully();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 30,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2088,
        "startLineNumber" : 62,
        "startColumnNumber" : 8,
        "endLineNumber" : 106,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  final CountDownLatch latch=new CountDownLatch(1);\n  final AtomicInteger bytesRead=new AtomicInteger();\n  final int expectedBytes=100;\n  serverGroup=newGroup();\n  clientGroup=newGroup();\n  ServerBootstrap sb=new ServerBootstrap();\n  sb.group(serverGroup);\n  sb.channel(serverChannel());\n  sb.childOption(ChannelOption.AUTO_READ,false);\n  sb.childOption(ChannelOption.MAX_MESSAGES_PER_READ,1);\n  sb.childOption(ChannelOption.RCVBUF_ALLOCATOR,new FixedRecvByteBufAllocator(expectedBytes / 10));\n  sb.childHandler(new ChannelInitializer<Channel>(){\n    @Override protected void initChannel(    Channel ch){\n      ch.pipeline().addLast(new TestHandler(bytesRead,extraReadRequested,latch));\n    }\n  }\n);\n  serverChannel=sb.bind(new InetSocketAddress(0)).get();\n  Bootstrap cb=new Bootstrap();\n  cb.group(serverGroup);\n  cb.channel(clientChannel());\n  cb.handler(new ChannelHandler(){\n  }\n);\n  Channel clientChannel=cb.connect(serverChannel.localAddress()).get();\n  ByteBuf buf=clientChannel.alloc().buffer(expectedBytes);\n  buf.writerIndex(buf.writerIndex() + expectedBytes);\n  clientChannel.writeAndFlush(buf).addListener(clientChannel,ChannelFutureListeners.CLOSE);\n  latch.await();\n  assertEquals(expectedBytes,bytesRead.get());\n}\n  finally {\n  if (serverChannel != null) {\n    serverChannel.close().syncUninterruptibly();\n  }\n  if (serverGroup != null) {\n    serverGroup.shutdownGracefully();\n  }\n  if (clientGroup != null) {\n    clientGroup.shutdownGracefully();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 243,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2233,
        "startLineNumber" : 58,
        "startColumnNumber" : 108,
        "endLineNumber" : 107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  EventLoopGroup serverGroup=null;\n  EventLoopGroup clientGroup=null;\n  Channel serverChannel=null;\n  try {\n    final CountDownLatch latch=new CountDownLatch(1);\n    final AtomicInteger bytesRead=new AtomicInteger();\n    final int expectedBytes=100;\n    serverGroup=newGroup();\n    clientGroup=newGroup();\n    ServerBootstrap sb=new ServerBootstrap();\n    sb.group(serverGroup);\n    sb.channel(serverChannel());\n    sb.childOption(ChannelOption.AUTO_READ,false);\n    sb.childOption(ChannelOption.MAX_MESSAGES_PER_READ,1);\n    sb.childOption(ChannelOption.RCVBUF_ALLOCATOR,new FixedRecvByteBufAllocator(expectedBytes / 10));\n    sb.childHandler(new ChannelInitializer<Channel>(){\n      @Override protected void initChannel(      Channel ch){\n        ch.pipeline().addLast(new TestHandler(bytesRead,extraReadRequested,latch));\n      }\n    }\n);\n    serverChannel=sb.bind(new InetSocketAddress(0)).get();\n    Bootstrap cb=new Bootstrap();\n    cb.group(serverGroup);\n    cb.channel(clientChannel());\n    cb.handler(new ChannelHandler(){\n    }\n);\n    Channel clientChannel=cb.connect(serverChannel.localAddress()).get();\n    ByteBuf buf=clientChannel.alloc().buffer(expectedBytes);\n    buf.writerIndex(buf.writerIndex() + expectedBytes);\n    clientChannel.writeAndFlush(buf).addListener(clientChannel,ChannelFutureListeners.CLOSE);\n    latch.await();\n    assertEquals(expectedBytes,bytesRead.get());\n  }\n  finally {\n    if (serverChannel != null) {\n      serverChannel.close().syncUninterruptibly();\n    }\n    if (serverGroup != null) {\n      serverGroup.shutdownGracefully();\n    }\n    if (clientGroup != null) {\n      clientGroup.shutdownGracefully();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 262,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2337,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void clientCloseWithoutServerReadIsDetected0(final boolean extraReadRequested) throws Exception {\n  EventLoopGroup serverGroup=null;\n  EventLoopGroup clientGroup=null;\n  Channel serverChannel=null;\n  try {\n    final CountDownLatch latch=new CountDownLatch(1);\n    final AtomicInteger bytesRead=new AtomicInteger();\n    final int expectedBytes=100;\n    serverGroup=newGroup();\n    clientGroup=newGroup();\n    ServerBootstrap sb=new ServerBootstrap();\n    sb.group(serverGroup);\n    sb.channel(serverChannel());\n    sb.childOption(ChannelOption.AUTO_READ,false);\n    sb.childOption(ChannelOption.MAX_MESSAGES_PER_READ,1);\n    sb.childOption(ChannelOption.RCVBUF_ALLOCATOR,new FixedRecvByteBufAllocator(expectedBytes / 10));\n    sb.childHandler(new ChannelInitializer<Channel>(){\n      @Override protected void initChannel(      Channel ch){\n        ch.pipeline().addLast(new TestHandler(bytesRead,extraReadRequested,latch));\n      }\n    }\n);\n    serverChannel=sb.bind(new InetSocketAddress(0)).get();\n    Bootstrap cb=new Bootstrap();\n    cb.group(serverGroup);\n    cb.channel(clientChannel());\n    cb.handler(new ChannelHandler(){\n    }\n);\n    Channel clientChannel=cb.connect(serverChannel.localAddress()).get();\n    ByteBuf buf=clientChannel.alloc().buffer(expectedBytes);\n    buf.writerIndex(buf.writerIndex() + expectedBytes);\n    clientChannel.writeAndFlush(buf).addListener(clientChannel,ChannelFutureListeners.CLOSE);\n    latch.await();\n    assertEquals(expectedBytes,bytesRead.get());\n  }\n  finally {\n    if (serverChannel != null) {\n      serverChannel.close().syncUninterruptibly();\n    }\n    if (serverGroup != null) {\n      serverGroup.shutdownGracefully();\n    }\n    if (clientGroup != null) {\n      clientGroup.shutdownGracefully();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 272,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 97,
        "startColumnNumber" : 16,
        "endLineNumber" : 97,
        "endColumnNumber" : 37
      },
      "nodeContext" : "serverChannel != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 100,
      "startColumnNumber" : 31,
      "endLineNumber" : 100,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 100,
        "startColumnNumber" : 16,
        "endLineNumber" : 100,
        "endColumnNumber" : 35
      },
      "nodeContext" : "serverGroup != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 100,
        "startColumnNumber" : 12,
        "endLineNumber" : 102,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (serverGroup != null) {\n  serverGroup.shutdownGracefully();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,finally]",
      "nodePosition" : {
        "charLength" : 343,
        "startLineNumber" : 96,
        "startColumnNumber" : 18,
        "endLineNumber" : 106,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (serverChannel != null) {\n    serverChannel.close().syncUninterruptibly();\n  }\n  if (serverGroup != null) {\n    serverGroup.shutdownGracefully();\n  }\n  if (clientGroup != null) {\n    clientGroup.shutdownGracefully();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 30,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2088,
        "startLineNumber" : 62,
        "startColumnNumber" : 8,
        "endLineNumber" : 106,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  final CountDownLatch latch=new CountDownLatch(1);\n  final AtomicInteger bytesRead=new AtomicInteger();\n  final int expectedBytes=100;\n  serverGroup=newGroup();\n  clientGroup=newGroup();\n  ServerBootstrap sb=new ServerBootstrap();\n  sb.group(serverGroup);\n  sb.channel(serverChannel());\n  sb.childOption(ChannelOption.AUTO_READ,false);\n  sb.childOption(ChannelOption.MAX_MESSAGES_PER_READ,1);\n  sb.childOption(ChannelOption.RCVBUF_ALLOCATOR,new FixedRecvByteBufAllocator(expectedBytes / 10));\n  sb.childHandler(new ChannelInitializer<Channel>(){\n    @Override protected void initChannel(    Channel ch){\n      ch.pipeline().addLast(new TestHandler(bytesRead,extraReadRequested,latch));\n    }\n  }\n);\n  serverChannel=sb.bind(new InetSocketAddress(0)).get();\n  Bootstrap cb=new Bootstrap();\n  cb.group(serverGroup);\n  cb.channel(clientChannel());\n  cb.handler(new ChannelHandler(){\n  }\n);\n  Channel clientChannel=cb.connect(serverChannel.localAddress()).get();\n  ByteBuf buf=clientChannel.alloc().buffer(expectedBytes);\n  buf.writerIndex(buf.writerIndex() + expectedBytes);\n  clientChannel.writeAndFlush(buf).addListener(clientChannel,ChannelFutureListeners.CLOSE);\n  latch.await();\n  assertEquals(expectedBytes,bytesRead.get());\n}\n  finally {\n  if (serverChannel != null) {\n    serverChannel.close().syncUninterruptibly();\n  }\n  if (serverGroup != null) {\n    serverGroup.shutdownGracefully();\n  }\n  if (clientGroup != null) {\n    clientGroup.shutdownGracefully();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 243,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2233,
        "startLineNumber" : 58,
        "startColumnNumber" : 108,
        "endLineNumber" : 107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  EventLoopGroup serverGroup=null;\n  EventLoopGroup clientGroup=null;\n  Channel serverChannel=null;\n  try {\n    final CountDownLatch latch=new CountDownLatch(1);\n    final AtomicInteger bytesRead=new AtomicInteger();\n    final int expectedBytes=100;\n    serverGroup=newGroup();\n    clientGroup=newGroup();\n    ServerBootstrap sb=new ServerBootstrap();\n    sb.group(serverGroup);\n    sb.channel(serverChannel());\n    sb.childOption(ChannelOption.AUTO_READ,false);\n    sb.childOption(ChannelOption.MAX_MESSAGES_PER_READ,1);\n    sb.childOption(ChannelOption.RCVBUF_ALLOCATOR,new FixedRecvByteBufAllocator(expectedBytes / 10));\n    sb.childHandler(new ChannelInitializer<Channel>(){\n      @Override protected void initChannel(      Channel ch){\n        ch.pipeline().addLast(new TestHandler(bytesRead,extraReadRequested,latch));\n      }\n    }\n);\n    serverChannel=sb.bind(new InetSocketAddress(0)).get();\n    Bootstrap cb=new Bootstrap();\n    cb.group(serverGroup);\n    cb.channel(clientChannel());\n    cb.handler(new ChannelHandler(){\n    }\n);\n    Channel clientChannel=cb.connect(serverChannel.localAddress()).get();\n    ByteBuf buf=clientChannel.alloc().buffer(expectedBytes);\n    buf.writerIndex(buf.writerIndex() + expectedBytes);\n    clientChannel.writeAndFlush(buf).addListener(clientChannel,ChannelFutureListeners.CLOSE);\n    latch.await();\n    assertEquals(expectedBytes,bytesRead.get());\n  }\n  finally {\n    if (serverChannel != null) {\n      serverChannel.close().syncUninterruptibly();\n    }\n    if (serverGroup != null) {\n      serverGroup.shutdownGracefully();\n    }\n    if (clientGroup != null) {\n      clientGroup.shutdownGracefully();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 262,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2337,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void clientCloseWithoutServerReadIsDetected0(final boolean extraReadRequested) throws Exception {\n  EventLoopGroup serverGroup=null;\n  EventLoopGroup clientGroup=null;\n  Channel serverChannel=null;\n  try {\n    final CountDownLatch latch=new CountDownLatch(1);\n    final AtomicInteger bytesRead=new AtomicInteger();\n    final int expectedBytes=100;\n    serverGroup=newGroup();\n    clientGroup=newGroup();\n    ServerBootstrap sb=new ServerBootstrap();\n    sb.group(serverGroup);\n    sb.channel(serverChannel());\n    sb.childOption(ChannelOption.AUTO_READ,false);\n    sb.childOption(ChannelOption.MAX_MESSAGES_PER_READ,1);\n    sb.childOption(ChannelOption.RCVBUF_ALLOCATOR,new FixedRecvByteBufAllocator(expectedBytes / 10));\n    sb.childHandler(new ChannelInitializer<Channel>(){\n      @Override protected void initChannel(      Channel ch){\n        ch.pipeline().addLast(new TestHandler(bytesRead,extraReadRequested,latch));\n      }\n    }\n);\n    serverChannel=sb.bind(new InetSocketAddress(0)).get();\n    Bootstrap cb=new Bootstrap();\n    cb.group(serverGroup);\n    cb.channel(clientChannel());\n    cb.handler(new ChannelHandler(){\n    }\n);\n    Channel clientChannel=cb.connect(serverChannel.localAddress()).get();\n    ByteBuf buf=clientChannel.alloc().buffer(expectedBytes);\n    buf.writerIndex(buf.writerIndex() + expectedBytes);\n    clientChannel.writeAndFlush(buf).addListener(clientChannel,ChannelFutureListeners.CLOSE);\n    latch.await();\n    assertEquals(expectedBytes,bytesRead.get());\n  }\n  finally {\n    if (serverChannel != null) {\n      serverChannel.close().syncUninterruptibly();\n    }\n    if (serverGroup != null) {\n      serverGroup.shutdownGracefully();\n    }\n    if (clientGroup != null) {\n      clientGroup.shutdownGracefully();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 272,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 100,
        "startColumnNumber" : 16,
        "endLineNumber" : 100,
        "endColumnNumber" : 35
      },
      "nodeContext" : "serverGroup != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 103,
      "startColumnNumber" : 31,
      "endLineNumber" : 103,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 103,
        "startColumnNumber" : 16,
        "endLineNumber" : 103,
        "endColumnNumber" : 35
      },
      "nodeContext" : "clientGroup != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 103,
        "startColumnNumber" : 12,
        "endLineNumber" : 105,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (clientGroup != null) {\n  clientGroup.shutdownGracefully();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,finally]",
      "nodePosition" : {
        "charLength" : 343,
        "startLineNumber" : 96,
        "startColumnNumber" : 18,
        "endLineNumber" : 106,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (serverChannel != null) {\n    serverChannel.close().syncUninterruptibly();\n  }\n  if (serverGroup != null) {\n    serverGroup.shutdownGracefully();\n  }\n  if (clientGroup != null) {\n    clientGroup.shutdownGracefully();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 30,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2088,
        "startLineNumber" : 62,
        "startColumnNumber" : 8,
        "endLineNumber" : 106,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  final CountDownLatch latch=new CountDownLatch(1);\n  final AtomicInteger bytesRead=new AtomicInteger();\n  final int expectedBytes=100;\n  serverGroup=newGroup();\n  clientGroup=newGroup();\n  ServerBootstrap sb=new ServerBootstrap();\n  sb.group(serverGroup);\n  sb.channel(serverChannel());\n  sb.childOption(ChannelOption.AUTO_READ,false);\n  sb.childOption(ChannelOption.MAX_MESSAGES_PER_READ,1);\n  sb.childOption(ChannelOption.RCVBUF_ALLOCATOR,new FixedRecvByteBufAllocator(expectedBytes / 10));\n  sb.childHandler(new ChannelInitializer<Channel>(){\n    @Override protected void initChannel(    Channel ch){\n      ch.pipeline().addLast(new TestHandler(bytesRead,extraReadRequested,latch));\n    }\n  }\n);\n  serverChannel=sb.bind(new InetSocketAddress(0)).get();\n  Bootstrap cb=new Bootstrap();\n  cb.group(serverGroup);\n  cb.channel(clientChannel());\n  cb.handler(new ChannelHandler(){\n  }\n);\n  Channel clientChannel=cb.connect(serverChannel.localAddress()).get();\n  ByteBuf buf=clientChannel.alloc().buffer(expectedBytes);\n  buf.writerIndex(buf.writerIndex() + expectedBytes);\n  clientChannel.writeAndFlush(buf).addListener(clientChannel,ChannelFutureListeners.CLOSE);\n  latch.await();\n  assertEquals(expectedBytes,bytesRead.get());\n}\n  finally {\n  if (serverChannel != null) {\n    serverChannel.close().syncUninterruptibly();\n  }\n  if (serverGroup != null) {\n    serverGroup.shutdownGracefully();\n  }\n  if (clientGroup != null) {\n    clientGroup.shutdownGracefully();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 243,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2233,
        "startLineNumber" : 58,
        "startColumnNumber" : 108,
        "endLineNumber" : 107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  EventLoopGroup serverGroup=null;\n  EventLoopGroup clientGroup=null;\n  Channel serverChannel=null;\n  try {\n    final CountDownLatch latch=new CountDownLatch(1);\n    final AtomicInteger bytesRead=new AtomicInteger();\n    final int expectedBytes=100;\n    serverGroup=newGroup();\n    clientGroup=newGroup();\n    ServerBootstrap sb=new ServerBootstrap();\n    sb.group(serverGroup);\n    sb.channel(serverChannel());\n    sb.childOption(ChannelOption.AUTO_READ,false);\n    sb.childOption(ChannelOption.MAX_MESSAGES_PER_READ,1);\n    sb.childOption(ChannelOption.RCVBUF_ALLOCATOR,new FixedRecvByteBufAllocator(expectedBytes / 10));\n    sb.childHandler(new ChannelInitializer<Channel>(){\n      @Override protected void initChannel(      Channel ch){\n        ch.pipeline().addLast(new TestHandler(bytesRead,extraReadRequested,latch));\n      }\n    }\n);\n    serverChannel=sb.bind(new InetSocketAddress(0)).get();\n    Bootstrap cb=new Bootstrap();\n    cb.group(serverGroup);\n    cb.channel(clientChannel());\n    cb.handler(new ChannelHandler(){\n    }\n);\n    Channel clientChannel=cb.connect(serverChannel.localAddress()).get();\n    ByteBuf buf=clientChannel.alloc().buffer(expectedBytes);\n    buf.writerIndex(buf.writerIndex() + expectedBytes);\n    clientChannel.writeAndFlush(buf).addListener(clientChannel,ChannelFutureListeners.CLOSE);\n    latch.await();\n    assertEquals(expectedBytes,bytesRead.get());\n  }\n  finally {\n    if (serverChannel != null) {\n      serverChannel.close().syncUninterruptibly();\n    }\n    if (serverGroup != null) {\n      serverGroup.shutdownGracefully();\n    }\n    if (clientGroup != null) {\n      clientGroup.shutdownGracefully();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 262,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2337,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void clientCloseWithoutServerReadIsDetected0(final boolean extraReadRequested) throws Exception {\n  EventLoopGroup serverGroup=null;\n  EventLoopGroup clientGroup=null;\n  Channel serverChannel=null;\n  try {\n    final CountDownLatch latch=new CountDownLatch(1);\n    final AtomicInteger bytesRead=new AtomicInteger();\n    final int expectedBytes=100;\n    serverGroup=newGroup();\n    clientGroup=newGroup();\n    ServerBootstrap sb=new ServerBootstrap();\n    sb.group(serverGroup);\n    sb.channel(serverChannel());\n    sb.childOption(ChannelOption.AUTO_READ,false);\n    sb.childOption(ChannelOption.MAX_MESSAGES_PER_READ,1);\n    sb.childOption(ChannelOption.RCVBUF_ALLOCATOR,new FixedRecvByteBufAllocator(expectedBytes / 10));\n    sb.childHandler(new ChannelInitializer<Channel>(){\n      @Override protected void initChannel(      Channel ch){\n        ch.pipeline().addLast(new TestHandler(bytesRead,extraReadRequested,latch));\n      }\n    }\n);\n    serverChannel=sb.bind(new InetSocketAddress(0)).get();\n    Bootstrap cb=new Bootstrap();\n    cb.group(serverGroup);\n    cb.channel(clientChannel());\n    cb.handler(new ChannelHandler(){\n    }\n);\n    Channel clientChannel=cb.connect(serverChannel.localAddress()).get();\n    ByteBuf buf=clientChannel.alloc().buffer(expectedBytes);\n    buf.writerIndex(buf.writerIndex() + expectedBytes);\n    clientChannel.writeAndFlush(buf).addListener(clientChannel,ChannelFutureListeners.CLOSE);\n    latch.await();\n    assertEquals(expectedBytes,bytesRead.get());\n  }\n  finally {\n    if (serverChannel != null) {\n      serverChannel.close().syncUninterruptibly();\n    }\n    if (serverGroup != null) {\n      serverGroup.shutdownGracefully();\n    }\n    if (clientGroup != null) {\n      clientGroup.shutdownGracefully();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 272,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 103,
        "startColumnNumber" : 16,
        "endLineNumber" : 103,
        "endColumnNumber" : 35
      },
      "nodeContext" : "clientGroup != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 59,
    "startColumnNumber" : 37,
    "endLineNumber" : 59,
    "endColumnNumber" : 41
  }, {
    "charLength" : 4,
    "startLineNumber" : 60,
    "startColumnNumber" : 37,
    "endLineNumber" : 60,
    "endColumnNumber" : 41
  }, {
    "charLength" : 4,
    "startLineNumber" : 61,
    "startColumnNumber" : 32,
    "endLineNumber" : 61,
    "endColumnNumber" : 36
  }, {
    "charLength" : 4,
    "startLineNumber" : 97,
    "startColumnNumber" : 33,
    "endLineNumber" : 97,
    "endColumnNumber" : 37
  }, {
    "charLength" : 4,
    "startLineNumber" : 100,
    "startColumnNumber" : 31,
    "endLineNumber" : 100,
    "endColumnNumber" : 35
  }, {
    "charLength" : 4,
    "startLineNumber" : 103,
    "startColumnNumber" : 31,
    "endLineNumber" : 103,
    "endColumnNumber" : 35
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 2
  } ]
}