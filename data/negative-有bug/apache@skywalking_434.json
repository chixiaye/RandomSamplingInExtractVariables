{
  "id" : 434,
  "expression" : "Minutes",
  "projectName" : "apache@skywalking",
  "commitID" : "16b51d55baec4f779f312e07081d1397addbcfe9",
  "filePath" : "/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/AlarmCore.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Minutes",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 59,
      "startColumnNumber" : 30,
      "endLineNumber" : 59,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 59,
        "startColumnNumber" : 30,
        "endLineNumber" : 59,
        "endColumnNumber" : 80
      },
      "nodeContext" : "Minutes.minutesBetween(lastExecuteTime,checkTime)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 59,
        "startColumnNumber" : 30,
        "endLineNumber" : 59,
        "endColumnNumber" : 93
      },
      "nodeContext" : "Minutes.minutesBetween(lastExecuteTime,checkTime).getMinutes()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 59,
        "startColumnNumber" : 20,
        "endLineNumber" : 59,
        "endColumnNumber" : 93
      },
      "nodeContext" : "minutes=Minutes.minutesBetween(lastExecuteTime,checkTime).getMinutes()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 59,
        "startColumnNumber" : 16,
        "endLineNumber" : 59,
        "endColumnNumber" : 94
      },
      "nodeContext" : "int minutes=Minutes.minutesBetween(lastExecuteTime,checkTime).getMinutes();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1821,
        "startLineNumber" : 56,
        "startColumnNumber" : 16,
        "endLineNumber" : 86,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  final List<AlarmMessage> alarmMessageList=new ArrayList<>(30);\n  LocalDateTime checkTime=LocalDateTime.now();\n  int minutes=Minutes.minutesBetween(lastExecuteTime,checkTime).getMinutes();\n  boolean[] hasExecute=new boolean[]{false};\n  alarmRulesWatcher.getRunningContext().values().forEach(ruleList -> ruleList.forEach(runningRule -> {\n    if (minutes > 0) {\n      runningRule.moveTo(checkTime);\n      if (checkTime.getSecondOfMinute() > 15) {\n        hasExecute[0]=true;\n        alarmMessageList.addAll(runningRule.check());\n      }\n    }\n  }\n));\n  if (hasExecute[0]) {\n    lastExecuteTime=checkTime.minusSeconds(checkTime.getSecondOfMinute());\n  }\n  if (alarmMessageList.size() > 0) {\n    if (alarmRulesWatcher.getCompositeRules().size() > 0) {\n      List<AlarmMessage> messages=alarmRulesWatcher.getCompositeRuleEvaluator().evaluate(alarmRulesWatcher.getCompositeRules(),alarmMessageList);\n      alarmMessageList.addAll(messages);\n    }\n    List<AlarmMessage> filteredMessages=alarmMessageList.stream().filter(msg -> !msg.isOnlyAsCondition()).collect(Collectors.toList());\n    allCallbacks.forEach(callback -> callback.doAlarm(filteredMessages));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 182,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1910,
        "startLineNumber" : 56,
        "startColumnNumber" : 12,
        "endLineNumber" : 88,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  final List<AlarmMessage> alarmMessageList=new ArrayList<>(30);\n  LocalDateTime checkTime=LocalDateTime.now();\n  int minutes=Minutes.minutesBetween(lastExecuteTime,checkTime).getMinutes();\n  boolean[] hasExecute=new boolean[]{false};\n  alarmRulesWatcher.getRunningContext().values().forEach(ruleList -> ruleList.forEach(runningRule -> {\n    if (minutes > 0) {\n      runningRule.moveTo(checkTime);\n      if (checkTime.getSecondOfMinute() > 15) {\n        hasExecute[0]=true;\n        alarmMessageList.addAll(runningRule.check());\n      }\n    }\n  }\n));\n  if (hasExecute[0]) {\n    lastExecuteTime=checkTime.minusSeconds(checkTime.getSecondOfMinute());\n  }\n  if (alarmMessageList.size() > 0) {\n    if (alarmRulesWatcher.getCompositeRules().size() > 0) {\n      List<AlarmMessage> messages=alarmRulesWatcher.getCompositeRuleEvaluator().evaluate(alarmRulesWatcher.getCompositeRules(),alarmMessageList);\n      alarmMessageList.addAll(messages);\n    }\n    List<AlarmMessage> filteredMessages=alarmMessageList.stream().filter(msg -> !msg.isOnlyAsCondition()).collect(Collectors.toList());\n    allCallbacks.forEach(callback -> callback.doAlarm(filteredMessages));\n  }\n}\n catch (Exception e) {\n  LOGGER.error(e.getMessage(),e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 197,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 1934,
        "startLineNumber" : 55,
        "startColumnNumber" : 79,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    final List<AlarmMessage> alarmMessageList=new ArrayList<>(30);\n    LocalDateTime checkTime=LocalDateTime.now();\n    int minutes=Minutes.minutesBetween(lastExecuteTime,checkTime).getMinutes();\n    boolean[] hasExecute=new boolean[]{false};\n    alarmRulesWatcher.getRunningContext().values().forEach(ruleList -> ruleList.forEach(runningRule -> {\n      if (minutes > 0) {\n        runningRule.moveTo(checkTime);\n        if (checkTime.getSecondOfMinute() > 15) {\n          hasExecute[0]=true;\n          alarmMessageList.addAll(runningRule.check());\n        }\n      }\n    }\n));\n    if (hasExecute[0]) {\n      lastExecuteTime=checkTime.minusSeconds(checkTime.getSecondOfMinute());\n    }\n    if (alarmMessageList.size() > 0) {\n      if (alarmRulesWatcher.getCompositeRules().size() > 0) {\n        List<AlarmMessage> messages=alarmRulesWatcher.getCompositeRuleEvaluator().evaluate(alarmRulesWatcher.getCompositeRules(),alarmMessageList);\n        alarmMessageList.addAll(messages);\n      }\n      List<AlarmMessage> filteredMessages=alarmMessageList.stream().filter(msg -> !msg.isOnlyAsCondition()).collect(Collectors.toList());\n      allCallbacks.forEach(callback -> callback.doAlarm(filteredMessages));\n    }\n  }\n catch (  Exception e) {\n    LOGGER.error(e.getMessage(),e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 198,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 1940,
        "startLineNumber" : 55,
        "startColumnNumber" : 73,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "() -> {\n  try {\n    final List<AlarmMessage> alarmMessageList=new ArrayList<>(30);\n    LocalDateTime checkTime=LocalDateTime.now();\n    int minutes=Minutes.minutesBetween(lastExecuteTime,checkTime).getMinutes();\n    boolean[] hasExecute=new boolean[]{false};\n    alarmRulesWatcher.getRunningContext().values().forEach(ruleList -> ruleList.forEach(runningRule -> {\n      if (minutes > 0) {\n        runningRule.moveTo(checkTime);\n        if (checkTime.getSecondOfMinute() > 15) {\n          hasExecute[0]=true;\n          alarmMessageList.addAll(runningRule.check());\n        }\n      }\n    }\n));\n    if (hasExecute[0]) {\n      lastExecuteTime=checkTime.minusSeconds(checkTime.getSecondOfMinute());\n    }\n    if (alarmMessageList.size() > 0) {\n      if (alarmRulesWatcher.getCompositeRules().size() > 0) {\n        List<AlarmMessage> messages=alarmRulesWatcher.getCompositeRuleEvaluator().evaluate(alarmRulesWatcher.getCompositeRules(),alarmMessageList);\n        alarmMessageList.addAll(messages);\n      }\n      List<AlarmMessage> filteredMessages=alarmMessageList.stream().filter(msg -> !msg.isOnlyAsCondition()).collect(Collectors.toList());\n      allCallbacks.forEach(callback -> callback.doAlarm(filteredMessages));\n    }\n  }\n catch (  Exception e) {\n    LOGGER.error(e.getMessage(),e);\n  }\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 199,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 59,
        "startColumnNumber" : 16,
        "endLineNumber" : 59,
        "endColumnNumber" : 94
      },
      "nodeContext" : "int minutes=Minutes.minutesBetween(lastExecuteTime,checkTime).getMinutes();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 59,
    "startColumnNumber" : 30,
    "endLineNumber" : 59,
    "endColumnNumber" : 37
  } ],
  "layoutRelationDataList" : [ ]
}