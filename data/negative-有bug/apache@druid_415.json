{
  "id" : 415,
  "expression" : "i % 2",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/processing/src/test/java/org/apache/druid/segment/data/VSizeLongSerdeTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "i % 2",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 315,
      "startColumnNumber" : 10,
      "endLineNumber" : 315,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 315,
        "startColumnNumber" : 10,
        "endLineNumber" : 315,
        "endColumnNumber" : 20
      },
      "nodeContext" : "i % 2 == 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 150,
        "startLineNumber" : 315,
        "startColumnNumber" : 6,
        "endLineNumber" : 319,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (i % 2 == 0) {\n  indexes[outPosition + i / 2]=i + indexOffset;\n  expectedOut[outPosition + i / 2]=values[i];\n  cnt++;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 34,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 164,
        "startLineNumber" : 314,
        "startColumnNumber" : 44,
        "endLineNumber" : 320,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (i % 2 == 0) {\n    indexes[outPosition + i / 2]=i + indexOffset;\n    expectedOut[outPosition + i / 2]=values[i];\n    cnt++;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 35,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 204,
        "startLineNumber" : 314,
        "startColumnNumber" : 4,
        "endLineNumber" : 320,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < values.length; i++) {\n  if (i % 2 == 0) {\n    indexes[outPosition + i / 2]=i + indexOffset;\n    expectedOut[outPosition + i / 2]=values[i];\n    cnt++;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 48,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 848,
        "startLineNumber" : 302,
        "startColumnNumber" : 2,
        "endLineNumber" : 329,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final int indexOffset=1;\n  final int outPosition=1;\n  final long[] out=new long[values.length + outPosition];\n  final long[] expectedOut=new long[values.length + outPosition];\n  final int[] indexes=new int[values.length + outPosition];\n  Arrays.fill(out,-1);\n  Arrays.fill(expectedOut,-1);\n  Arrays.fill(indexes,-1);\n  int cnt=0;\n  for (int i=0; i < values.length; i++) {\n    if (i % 2 == 0) {\n      indexes[outPosition + i / 2]=i + indexOffset;\n      expectedOut[outPosition + i / 2]=values[i];\n      cnt++;\n    }\n  }\n  deserializer.getDelta(out,outPosition,indexes,cnt,indexOffset,values.length,0);\n  Assert.assertArrayEquals(StringUtils.format(\"Deserializer (testNoncontiguousGetEveryOtherValue, numBits = %d)\",numBits),expectedOut,out);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 159,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1020,
        "startLineNumber" : 297,
        "startColumnNumber" : 2,
        "endLineNumber" : 329,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static void testNoncontiguousGetEveryOtherValue(final VSizeLongSerde.LongDeserializer deserializer,final int numBits,final long[] values){\n  final int indexOffset=1;\n  final int outPosition=1;\n  final long[] out=new long[values.length + outPosition];\n  final long[] expectedOut=new long[values.length + outPosition];\n  final int[] indexes=new int[values.length + outPosition];\n  Arrays.fill(out,-1);\n  Arrays.fill(expectedOut,-1);\n  Arrays.fill(indexes,-1);\n  int cnt=0;\n  for (int i=0; i < values.length; i++) {\n    if (i % 2 == 0) {\n      indexes[outPosition + i / 2]=i + indexOffset;\n      expectedOut[outPosition + i / 2]=values[i];\n      cnt++;\n    }\n  }\n  deserializer.getDelta(out,outPosition,indexes,cnt,indexOffset,values.length,0);\n  Assert.assertArrayEquals(StringUtils.format(\"Deserializer (testNoncontiguousGetEveryOtherValue, numBits = %d)\",numBits),expectedOut,out);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 181,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 315,
        "startColumnNumber" : 10,
        "endLineNumber" : 315,
        "endColumnNumber" : 20
      },
      "nodeContext" : "i % 2 == 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 3,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 315,
    "startColumnNumber" : 10,
    "endLineNumber" : 315,
    "endColumnNumber" : 15
  } ],
  "layoutRelationDataList" : [ ]
}