{
  "id" : 225,
  "expression" : "Throwable.class",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/test/java/io/reactivex/subscribers/SafeSubscriberTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Throwable.class",
    "nodeType" : "TypeLiteral",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 43,
      "startColumnNumber" : 40,
      "endLineNumber" : 43,
      "endColumnNumber" : 55
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 43,
        "startColumnNumber" : 36,
        "endLineNumber" : 43,
        "endColumnNumber" : 56
      },
      "nodeContext" : "any(Throwable.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 43,
        "startColumnNumber" : 8,
        "endLineNumber" : 43,
        "endColumnNumber" : 57
      },
      "nodeContext" : "verify(w,times(1)).onError(any(Throwable.class))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 43,
        "startColumnNumber" : 8,
        "endLineNumber" : 43,
        "endColumnNumber" : 58
      },
      "nodeContext" : "verify(w,times(1)).onError(any(Throwable.class));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 526,
        "startLineNumber" : 31,
        "startColumnNumber" : 41,
        "endLineNumber" : 45,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TestObservable t=new TestObservable();\n  Flowable<String> st=Flowable.create(t);\n  Subscriber<String> w=TestHelper.mockSubscriber();\n  st.subscribe(new SafeSubscriber<String>(new TestSubscriber<String>(w)));\n  t.sendOnNext(\"one\");\n  t.sendOnError(new RuntimeException(\"bad\"));\n  t.sendOnNext(\"two\");\n  verify(w,times(1)).onNext(\"one\");\n  verify(w,times(1)).onError(any(Throwable.class));\n  verify(w,Mockito.never()).onNext(\"two\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 101,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 646,
        "startLineNumber" : 27,
        "startColumnNumber" : 4,
        "endLineNumber" : 45,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Ensure onNext can not be called after onError\n */\n@Test public void testOnNextAfterOnError(){\n  TestObservable t=new TestObservable();\n  Flowable<String> st=Flowable.create(t);\n  Subscriber<String> w=TestHelper.mockSubscriber();\n  st.subscribe(new SafeSubscriber<String>(new TestSubscriber<String>(w)));\n  t.sendOnNext(\"one\");\n  t.sendOnError(new RuntimeException(\"bad\"));\n  t.sendOnNext(\"two\");\n  verify(w,times(1)).onNext(\"one\");\n  verify(w,times(1)).onError(any(Throwable.class));\n  verify(w,Mockito.never()).onNext(\"two\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 108,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 43,
        "startColumnNumber" : 8,
        "endLineNumber" : 43,
        "endColumnNumber" : 58
      },
      "nodeContext" : "verify(w,times(1)).onError(any(Throwable.class));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.Class<java.lang.Throwable>"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 43,
    "startColumnNumber" : 40,
    "endLineNumber" : 43,
    "endColumnNumber" : 55
  } ],
  "layoutRelationDataList" : [ ]
}