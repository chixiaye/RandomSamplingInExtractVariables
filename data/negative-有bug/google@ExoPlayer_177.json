{
  "id" : 177,
  "expression" : "start",
  "projectName" : "google@ExoPlayer",
  "commitID" : "4803ab3bd12b71fc32150e96475c0e16aaf6ddc5",
  "filePath" : "/library/common/src/main/java/com/google/android/exoplayer2/text/span/SpanUtil.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "start",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 43,
      "startColumnNumber" : 48,
      "endLineNumber" : 43,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 43,
        "startColumnNumber" : 29,
        "endLineNumber" : 43,
        "endColumnNumber" : 76
      },
      "nodeContext" : "spannable.getSpans(start,end,span.getClass())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 43,
        "startColumnNumber" : 13,
        "endLineNumber" : 43,
        "endColumnNumber" : 76
      },
      "nodeContext" : "existingSpans=spannable.getSpans(start,end,span.getClass())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 43,
        "startColumnNumber" : 4,
        "endLineNumber" : 43,
        "endColumnNumber" : 77
      },
      "nodeContext" : "Object[] existingSpans=spannable.getSpans(start,end,span.getClass());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 418,
        "startLineNumber" : 42,
        "startColumnNumber" : 75,
        "endLineNumber" : 52,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Object[] existingSpans=spannable.getSpans(start,end,span.getClass());\n  for (  Object existingSpan : existingSpans) {\n    if (spannable.getSpanStart(existingSpan) == start && spannable.getSpanEnd(existingSpan) == end && spannable.getSpanFlags(existingSpan) == spanFlags) {\n      spannable.removeSpan(existingSpan);\n    }\n  }\n  spannable.setSpan(span,start,end,spanFlags);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 58,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1244,
        "startLineNumber" : 27,
        "startColumnNumber" : 2,
        "endLineNumber" : 52,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Adds  {@code span} to {@code spannable} between {@code start} and {@code end}, removing any existing spans of the same type and with the same indices and flags. <p>This is useful for types of spans that don't make sense to duplicate and where the evaluation order might have an unexpected impact on the final text, e.g.  {@link ForegroundColorSpan}.\n * @param spannable The {@link Spannable} to add {@code span} to.\n * @param span The span object to be added.\n * @param start The start index to add the new span at.\n * @param end The end index to add the new span at.\n * @param spanFlags The flags to pass to {@link Spannable#setSpan(Object,int,int,int)}.\n */\npublic static void addOrReplaceSpan(Spannable spannable,Object span,int start,int end,int spanFlags){\n  Object[] existingSpans=spannable.getSpans(start,end,span.getClass());\n  for (  Object existingSpan : existingSpans) {\n    if (spannable.getSpanStart(existingSpan) == start && spannable.getSpanEnd(existingSpan) == end && spannable.getSpanFlags(existingSpan) == spanFlags) {\n      spannable.removeSpan(existingSpan);\n    }\n  }\n  spannable.setSpan(span,start,end,spanFlags);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 81,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 43,
        "startColumnNumber" : 4,
        "endLineNumber" : 43,
        "endColumnNumber" : 77
      },
      "nodeContext" : "Object[] existingSpans=spannable.getSpans(start,end,span.getClass());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "start",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 45,
      "startColumnNumber" : 50,
      "endLineNumber" : 45,
      "endColumnNumber" : 55
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 45,
        "startColumnNumber" : 10,
        "endLineNumber" : 45,
        "endColumnNumber" : 55
      },
      "nodeContext" : "spannable.getSpanStart(existingSpan) == start",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 45,
        "startColumnNumber" : 10,
        "endLineNumber" : 46,
        "endColumnNumber" : 54
      },
      "nodeContext" : "spannable.getSpanStart(existingSpan) == start && spannable.getSpanEnd(existingSpan) == end",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 163,
        "startLineNumber" : 45,
        "startColumnNumber" : 10,
        "endLineNumber" : 47,
        "endColumnNumber" : 62
      },
      "nodeContext" : "spannable.getSpanStart(existingSpan) == start && spannable.getSpanEnd(existingSpan) == end && spannable.getSpanFlags(existingSpan) == spanFlags",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 20,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 222,
        "startLineNumber" : 45,
        "startColumnNumber" : 6,
        "endLineNumber" : 49,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (spannable.getSpanStart(existingSpan) == start && spannable.getSpanEnd(existingSpan) == end && spannable.getSpanFlags(existingSpan) == spanFlags) {\n  spannable.removeSpan(existingSpan);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 27,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 236,
        "startLineNumber" : 44,
        "startColumnNumber" : 46,
        "endLineNumber" : 50,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (spannable.getSpanStart(existingSpan) == start && spannable.getSpanEnd(existingSpan) == end && spannable.getSpanFlags(existingSpan) == spanFlags) {\n    spannable.removeSpan(existingSpan);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 28,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 278,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 50,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Object existingSpan : existingSpans) {\n  if (spannable.getSpanStart(existingSpan) == start && spannable.getSpanEnd(existingSpan) == end && spannable.getSpanFlags(existingSpan) == spanFlags) {\n    spannable.removeSpan(existingSpan);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 34,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 418,
        "startLineNumber" : 42,
        "startColumnNumber" : 75,
        "endLineNumber" : 52,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Object[] existingSpans=spannable.getSpans(start,end,span.getClass());\n  for (  Object existingSpan : existingSpans) {\n    if (spannable.getSpanStart(existingSpan) == start && spannable.getSpanEnd(existingSpan) == end && spannable.getSpanFlags(existingSpan) == spanFlags) {\n      spannable.removeSpan(existingSpan);\n    }\n  }\n  spannable.setSpan(span,start,end,spanFlags);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 58,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1244,
        "startLineNumber" : 27,
        "startColumnNumber" : 2,
        "endLineNumber" : 52,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Adds  {@code span} to {@code spannable} between {@code start} and {@code end}, removing any existing spans of the same type and with the same indices and flags. <p>This is useful for types of spans that don't make sense to duplicate and where the evaluation order might have an unexpected impact on the final text, e.g.  {@link ForegroundColorSpan}.\n * @param spannable The {@link Spannable} to add {@code span} to.\n * @param span The span object to be added.\n * @param start The start index to add the new span at.\n * @param end The end index to add the new span at.\n * @param spanFlags The flags to pass to {@link Spannable#setSpan(Object,int,int,int)}.\n */\npublic static void addOrReplaceSpan(Spannable spannable,Object span,int start,int end,int spanFlags){\n  Object[] existingSpans=spannable.getSpans(start,end,span.getClass());\n  for (  Object existingSpan : existingSpans) {\n    if (spannable.getSpanStart(existingSpan) == start && spannable.getSpanEnd(existingSpan) == end && spannable.getSpanFlags(existingSpan) == spanFlags) {\n      spannable.removeSpan(existingSpan);\n    }\n  }\n  spannable.setSpan(span,start,end,spanFlags);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 81,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 45,
        "startColumnNumber" : 10,
        "endLineNumber" : 45,
        "endColumnNumber" : 55
      },
      "nodeContext" : "spannable.getSpanStart(existingSpan) == start",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "start",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 51,
      "startColumnNumber" : 28,
      "endLineNumber" : 51,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 51,
        "startColumnNumber" : 4,
        "endLineNumber" : 51,
        "endColumnNumber" : 50
      },
      "nodeContext" : "spannable.setSpan(span,start,end,spanFlags)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 51,
        "startColumnNumber" : 4,
        "endLineNumber" : 51,
        "endColumnNumber" : 51
      },
      "nodeContext" : "spannable.setSpan(span,start,end,spanFlags);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 418,
        "startLineNumber" : 42,
        "startColumnNumber" : 75,
        "endLineNumber" : 52,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Object[] existingSpans=spannable.getSpans(start,end,span.getClass());\n  for (  Object existingSpan : existingSpans) {\n    if (spannable.getSpanStart(existingSpan) == start && spannable.getSpanEnd(existingSpan) == end && spannable.getSpanFlags(existingSpan) == spanFlags) {\n      spannable.removeSpan(existingSpan);\n    }\n  }\n  spannable.setSpan(span,start,end,spanFlags);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 58,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1244,
        "startLineNumber" : 27,
        "startColumnNumber" : 2,
        "endLineNumber" : 52,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Adds  {@code span} to {@code spannable} between {@code start} and {@code end}, removing any existing spans of the same type and with the same indices and flags. <p>This is useful for types of spans that don't make sense to duplicate and where the evaluation order might have an unexpected impact on the final text, e.g.  {@link ForegroundColorSpan}.\n * @param spannable The {@link Spannable} to add {@code span} to.\n * @param span The span object to be added.\n * @param start The start index to add the new span at.\n * @param end The end index to add the new span at.\n * @param spanFlags The flags to pass to {@link Spannable#setSpan(Object,int,int,int)}.\n */\npublic static void addOrReplaceSpan(Spannable spannable,Object span,int start,int end,int spanFlags){\n  Object[] existingSpans=spannable.getSpans(start,end,span.getClass());\n  for (  Object existingSpan : existingSpans) {\n    if (spannable.getSpanStart(existingSpan) == start && spannable.getSpanEnd(existingSpan) == end && spannable.getSpanFlags(existingSpan) == spanFlags) {\n      spannable.removeSpan(existingSpan);\n    }\n  }\n  spannable.setSpan(span,start,end,spanFlags);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 81,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 51,
        "startColumnNumber" : 4,
        "endLineNumber" : 51,
        "endColumnNumber" : 51
      },
      "nodeContext" : "spannable.setSpan(span,start,end,spanFlags);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 43,
    "startColumnNumber" : 48,
    "endLineNumber" : 43,
    "endColumnNumber" : 53
  }, {
    "charLength" : 5,
    "startLineNumber" : 45,
    "startColumnNumber" : 50,
    "endLineNumber" : 45,
    "endColumnNumber" : 55
  }, {
    "charLength" : 5,
    "startLineNumber" : 51,
    "startColumnNumber" : 28,
    "endLineNumber" : 51,
    "endColumnNumber" : 33
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  } ]
}