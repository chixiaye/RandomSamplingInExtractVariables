{
  "id" : 330,
  "expression" : "DockerCredentialsTemplate.class",
  "projectName" : "GoogleContainerTools@jib",
  "commitID" : "a0742fd277b5490a0965dba4443f5864f1250199",
  "filePath" : "/jib-core/src/main/java/com/google/cloud/tools/jib/registry/credentials/DockerCredentialHelper.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "DockerCredentialsTemplate.class",
    "nodeType" : "TypeLiteral",
    "nodePosition" : {
      "charLength" : 31,
      "startLineNumber" : 107,
      "startColumnNumber" : 50,
      "endLineNumber" : 107,
      "endColumnNumber" : 81
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 107,
        "startColumnNumber" : 14,
        "endLineNumber" : 107,
        "endColumnNumber" : 82
      },
      "nodeContext" : "JsonTemplateMapper.readJson(output,DockerCredentialsTemplate.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 106,
        "startColumnNumber" : 36,
        "endLineNumber" : 107,
        "endColumnNumber" : 82
      },
      "nodeContext" : "dockerCredentials=JsonTemplateMapper.readJson(output,DockerCredentialsTemplate.class)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 129,
        "startLineNumber" : 106,
        "startColumnNumber" : 10,
        "endLineNumber" : 107,
        "endColumnNumber" : 83
      },
      "nodeContext" : "DockerCredentialsTemplate dockerCredentials=JsonTemplateMapper.readJson(output,DockerCredentialsTemplate.class);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 549,
        "startLineNumber" : 105,
        "startColumnNumber" : 12,
        "endLineNumber" : 117,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  DockerCredentialsTemplate dockerCredentials=JsonTemplateMapper.readJson(output,DockerCredentialsTemplate.class);\n  if (Strings.isNullOrEmpty(dockerCredentials.Username) || Strings.isNullOrEmpty(dockerCredentials.Secret)) {\n    throw new NonexistentServerUrlDockerCredentialHelperException(credentialHelper,serverUrl,output);\n  }\n  return Authorizations.withBasicCredentials(dockerCredentials.Username,dockerCredentials.Secret);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 45,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 725,
        "startLineNumber" : 105,
        "startColumnNumber" : 8,
        "endLineNumber" : 120,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  DockerCredentialsTemplate dockerCredentials=JsonTemplateMapper.readJson(output,DockerCredentialsTemplate.class);\n  if (Strings.isNullOrEmpty(dockerCredentials.Username) || Strings.isNullOrEmpty(dockerCredentials.Secret)) {\n    throw new NonexistentServerUrlDockerCredentialHelperException(credentialHelper,serverUrl,output);\n  }\n  return Authorizations.withBasicCredentials(dockerCredentials.Username,dockerCredentials.Secret);\n}\n catch (JsonProcessingException ex) {\n  throw new NonexistentServerUrlDockerCredentialHelperException(credentialHelper,serverUrl,output);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 59,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1526,
        "startLineNumber" : 88,
        "startColumnNumber" : 83,
        "endLineNumber" : 121,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  String output=CharStreams.toString(processStdoutReader);\n  if (output.contains(\"credentials not found in native keychain\")) {\n    throw new NonexistentServerUrlDockerCredentialHelperException(credentialHelper,serverUrl,output);\n  }\n  if (output.isEmpty()) {\n    try (InputStreamReader processStderrReader=new InputStreamReader(process.getErrorStream(),StandardCharsets.UTF_8)){\n      String errorOutput=CharStreams.toString(processStderrReader);\n      throw new NonexistentServerUrlDockerCredentialHelperException(credentialHelper,serverUrl,errorOutput);\n    }\n   }\n  try {\n    DockerCredentialsTemplate dockerCredentials=JsonTemplateMapper.readJson(output,DockerCredentialsTemplate.class);\n    if (Strings.isNullOrEmpty(dockerCredentials.Username) || Strings.isNullOrEmpty(dockerCredentials.Secret)) {\n      throw new NonexistentServerUrlDockerCredentialHelperException(credentialHelper,serverUrl,output);\n    }\n    return Authorizations.withBasicCredentials(dockerCredentials.Username,dockerCredentials.Secret);\n  }\n catch (  JsonProcessingException ex) {\n    throw new NonexistentServerUrlDockerCredentialHelperException(credentialHelper,serverUrl,output);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 119,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1654,
        "startLineNumber" : 87,
        "startColumnNumber" : 6,
        "endLineNumber" : 121,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try (InputStreamReader processStdoutReader=new InputStreamReader(process.getInputStream(),StandardCharsets.UTF_8)){\n  String output=CharStreams.toString(processStdoutReader);\n  if (output.contains(\"credentials not found in native keychain\")) {\n    throw new NonexistentServerUrlDockerCredentialHelperException(credentialHelper,serverUrl,output);\n  }\n  if (output.isEmpty()) {\n    try (InputStreamReader processStderrReader=new InputStreamReader(process.getErrorStream(),StandardCharsets.UTF_8)){\n      String errorOutput=CharStreams.toString(processStderrReader);\n      throw new NonexistentServerUrlDockerCredentialHelperException(credentialHelper,serverUrl,errorOutput);\n    }\n   }\n  try {\n    DockerCredentialsTemplate dockerCredentials=JsonTemplateMapper.readJson(output,DockerCredentialsTemplate.class);\n    if (Strings.isNullOrEmpty(dockerCredentials.Username) || Strings.isNullOrEmpty(dockerCredentials.Secret)) {\n      throw new NonexistentServerUrlDockerCredentialHelperException(credentialHelper,serverUrl,output);\n    }\n    return Authorizations.withBasicCredentials(dockerCredentials.Username,dockerCredentials.Secret);\n  }\n catch (  JsonProcessingException ex) {\n    throw new NonexistentServerUrlDockerCredentialHelperException(credentialHelper,serverUrl,output);\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 134,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2043,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 123,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String credentialHelper=\"docker-credential-\" + credentialHelperSuffix;\n  String[] credentialHelperCommand={credentialHelper,\"get\"};\n  Process process=new ProcessBuilder(credentialHelperCommand).start();\n  try (OutputStream processStdin=process.getOutputStream()){\n    processStdin.write(serverUrl.getBytes(StandardCharsets.UTF_8));\n  }\n   try (InputStreamReader processStdoutReader=new InputStreamReader(process.getInputStream(),StandardCharsets.UTF_8)){\n    String output=CharStreams.toString(processStdoutReader);\n    if (output.contains(\"credentials not found in native keychain\")) {\n      throw new NonexistentServerUrlDockerCredentialHelperException(credentialHelper,serverUrl,output);\n    }\n    if (output.isEmpty()) {\n      try (InputStreamReader processStderrReader=new InputStreamReader(process.getErrorStream(),StandardCharsets.UTF_8)){\n        String errorOutput=CharStreams.toString(processStderrReader);\n        throw new NonexistentServerUrlDockerCredentialHelperException(credentialHelper,serverUrl,errorOutput);\n      }\n     }\n    try {\n      DockerCredentialsTemplate dockerCredentials=JsonTemplateMapper.readJson(output,DockerCredentialsTemplate.class);\n      if (Strings.isNullOrEmpty(dockerCredentials.Username) || Strings.isNullOrEmpty(dockerCredentials.Secret)) {\n        throw new NonexistentServerUrlDockerCredentialHelperException(credentialHelper,serverUrl,output);\n      }\n      return Authorizations.withBasicCredentials(dockerCredentials.Username,dockerCredentials.Secret);\n    }\n catch (    JsonProcessingException ex) {\n      throw new NonexistentServerUrlDockerCredentialHelperException(credentialHelper,serverUrl,output);\n    }\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 184,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2464,
        "startLineNumber" : 78,
        "startColumnNumber" : 4,
        "endLineNumber" : 135,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  String credentialHelper=\"docker-credential-\" + credentialHelperSuffix;\n  String[] credentialHelperCommand={credentialHelper,\"get\"};\n  Process process=new ProcessBuilder(credentialHelperCommand).start();\n  try (OutputStream processStdin=process.getOutputStream()){\n    processStdin.write(serverUrl.getBytes(StandardCharsets.UTF_8));\n  }\n   try (InputStreamReader processStdoutReader=new InputStreamReader(process.getInputStream(),StandardCharsets.UTF_8)){\n    String output=CharStreams.toString(processStdoutReader);\n    if (output.contains(\"credentials not found in native keychain\")) {\n      throw new NonexistentServerUrlDockerCredentialHelperException(credentialHelper,serverUrl,output);\n    }\n    if (output.isEmpty()) {\n      try (InputStreamReader processStderrReader=new InputStreamReader(process.getErrorStream(),StandardCharsets.UTF_8)){\n        String errorOutput=CharStreams.toString(processStderrReader);\n        throw new NonexistentServerUrlDockerCredentialHelperException(credentialHelper,serverUrl,errorOutput);\n      }\n     }\n    try {\n      DockerCredentialsTemplate dockerCredentials=JsonTemplateMapper.readJson(output,DockerCredentialsTemplate.class);\n      if (Strings.isNullOrEmpty(dockerCredentials.Username) || Strings.isNullOrEmpty(dockerCredentials.Secret)) {\n        throw new NonexistentServerUrlDockerCredentialHelperException(credentialHelper,serverUrl,output);\n      }\n      return Authorizations.withBasicCredentials(dockerCredentials.Username,dockerCredentials.Secret);\n    }\n catch (    JsonProcessingException ex) {\n      throw new NonexistentServerUrlDockerCredentialHelperException(credentialHelper,serverUrl,output);\n    }\n  }\n }\n catch (IOException ex) {\n  if (ex.getMessage() == null) {\n    throw ex;\n  }\n  if (ex.getMessage().contains(\"No such file or directory\") || ex.getMessage().contains(\"cannot find the file\")) {\n    throw new NonexistentDockerCredentialHelperException(credentialHelperSuffix,ex);\n  }\n  throw ex;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 223,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2474,
        "startLineNumber" : 77,
        "startColumnNumber" : 53,
        "endLineNumber" : 136,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  try {\n    String credentialHelper=\"docker-credential-\" + credentialHelperSuffix;\n    String[] credentialHelperCommand={credentialHelper,\"get\"};\n    Process process=new ProcessBuilder(credentialHelperCommand).start();\n    try (OutputStream processStdin=process.getOutputStream()){\n      processStdin.write(serverUrl.getBytes(StandardCharsets.UTF_8));\n    }\n     try (InputStreamReader processStdoutReader=new InputStreamReader(process.getInputStream(),StandardCharsets.UTF_8)){\n      String output=CharStreams.toString(processStdoutReader);\n      if (output.contains(\"credentials not found in native keychain\")) {\n        throw new NonexistentServerUrlDockerCredentialHelperException(credentialHelper,serverUrl,output);\n      }\n      if (output.isEmpty()) {\n        try (InputStreamReader processStderrReader=new InputStreamReader(process.getErrorStream(),StandardCharsets.UTF_8)){\n          String errorOutput=CharStreams.toString(processStderrReader);\n          throw new NonexistentServerUrlDockerCredentialHelperException(credentialHelper,serverUrl,errorOutput);\n        }\n       }\n      try {\n        DockerCredentialsTemplate dockerCredentials=JsonTemplateMapper.readJson(output,DockerCredentialsTemplate.class);\n        if (Strings.isNullOrEmpty(dockerCredentials.Username) || Strings.isNullOrEmpty(dockerCredentials.Secret)) {\n          throw new NonexistentServerUrlDockerCredentialHelperException(credentialHelper,serverUrl,output);\n        }\n        return Authorizations.withBasicCredentials(dockerCredentials.Username,dockerCredentials.Secret);\n      }\n catch (      JsonProcessingException ex) {\n        throw new NonexistentServerUrlDockerCredentialHelperException(credentialHelper,serverUrl,output);\n      }\n    }\n   }\n catch (  IOException ex) {\n    if (ex.getMessage() == null) {\n      throw ex;\n    }\n    if (ex.getMessage().contains(\"No such file or directory\") || ex.getMessage().contains(\"cannot find the file\")) {\n      throw new NonexistentDockerCredentialHelperException(credentialHelperSuffix,ex);\n    }\n    throw ex;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 224,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3164,
        "startLineNumber" : 64,
        "startColumnNumber" : 2,
        "endLineNumber" : 136,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * @return the Docker credentials by calling the corresponding CLI.<p>The credential helper CLI is called in the form: <pre> {@code echo -n <server URL> | docker-credential-<credential helper suffix> get}</pre>\n * @throws IOException if writing/reading process input/output fails.\n * @throws NonexistentServerUrlDockerCredentialHelperException if credentials are not found.\n * @throws NonexistentDockerCredentialHelperException if the credential helper CLI doesn't exist.\n */\npublic Authorization retrieve() throws IOException, NonexistentServerUrlDockerCredentialHelperException, NonexistentDockerCredentialHelperException {\n  try {\n    String credentialHelper=\"docker-credential-\" + credentialHelperSuffix;\n    String[] credentialHelperCommand={credentialHelper,\"get\"};\n    Process process=new ProcessBuilder(credentialHelperCommand).start();\n    try (OutputStream processStdin=process.getOutputStream()){\n      processStdin.write(serverUrl.getBytes(StandardCharsets.UTF_8));\n    }\n     try (InputStreamReader processStdoutReader=new InputStreamReader(process.getInputStream(),StandardCharsets.UTF_8)){\n      String output=CharStreams.toString(processStdoutReader);\n      if (output.contains(\"credentials not found in native keychain\")) {\n        throw new NonexistentServerUrlDockerCredentialHelperException(credentialHelper,serverUrl,output);\n      }\n      if (output.isEmpty()) {\n        try (InputStreamReader processStderrReader=new InputStreamReader(process.getErrorStream(),StandardCharsets.UTF_8)){\n          String errorOutput=CharStreams.toString(processStderrReader);\n          throw new NonexistentServerUrlDockerCredentialHelperException(credentialHelper,serverUrl,errorOutput);\n        }\n       }\n      try {\n        DockerCredentialsTemplate dockerCredentials=JsonTemplateMapper.readJson(output,DockerCredentialsTemplate.class);\n        if (Strings.isNullOrEmpty(dockerCredentials.Username) || Strings.isNullOrEmpty(dockerCredentials.Secret)) {\n          throw new NonexistentServerUrlDockerCredentialHelperException(credentialHelper,serverUrl,output);\n        }\n        return Authorizations.withBasicCredentials(dockerCredentials.Username,dockerCredentials.Secret);\n      }\n catch (      JsonProcessingException ex) {\n        throw new NonexistentServerUrlDockerCredentialHelperException(credentialHelper,serverUrl,output);\n      }\n    }\n   }\n catch (  IOException ex) {\n    if (ex.getMessage() == null) {\n      throw ex;\n    }\n    if (ex.getMessage().contains(\"No such file or directory\") || ex.getMessage().contains(\"cannot find the file\")) {\n      throw new NonexistentDockerCredentialHelperException(credentialHelperSuffix,ex);\n    }\n    throw ex;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 236,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 107,
        "startColumnNumber" : 14,
        "endLineNumber" : 107,
        "endColumnNumber" : 82
      },
      "nodeContext" : "JsonTemplateMapper.readJson(output,DockerCredentialsTemplate.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.Class<com.google.cloud.tools.jib.registry.credentials.DockerCredentialHelper.DockerCredentialsTemplate>"
  } ],
  "positionList" : [ {
    "charLength" : 31,
    "startLineNumber" : 107,
    "startColumnNumber" : 50,
    "endLineNumber" : 107,
    "endColumnNumber" : 81
  } ],
  "layoutRelationDataList" : [ ]
}