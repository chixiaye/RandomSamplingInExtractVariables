{
  "id" : 339,
  "expression" : "new HtmlAndCss(escapeHtml(text),ImmutableMap.of())",
  "projectName" : "google@ExoPlayer",
  "commitID" : "4803ab3bd12b71fc32150e96475c0e16aaf6ddc5",
  "filePath" : "/library/ui/src/main/java/com/google/android/exoplayer2/ui/SpannedToHtmlConverter.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new HtmlAndCss(escapeHtml(text),ImmutableMap.of())",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 70,
      "startLineNumber" : 87,
      "startColumnNumber" : 13,
      "endLineNumber" : 87,
      "endColumnNumber" : 83
    },
    "astNodeNumber" : 9,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 87,
        "startColumnNumber" : 6,
        "endLineNumber" : 87,
        "endColumnNumber" : 84
      },
      "nodeContext" : "return new HtmlAndCss(escapeHtml(text),ImmutableMap.of());\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 86,
        "startColumnNumber" : 36,
        "endLineNumber" : 88,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  return new HtmlAndCss(escapeHtml(text),ImmutableMap.of());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 86,
        "startColumnNumber" : 4,
        "endLineNumber" : 88,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!(text instanceof Spanned)) {\n  return new HtmlAndCss(escapeHtml(text),ImmutableMap.of());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1900,
        "startLineNumber" : 82,
        "startColumnNumber" : 86,
        "endLineNumber" : 126,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (text == null) {\n    return new HtmlAndCss(\"\",ImmutableMap.of());\n  }\n  if (!(text instanceof Spanned)) {\n    return new HtmlAndCss(escapeHtml(text),ImmutableMap.of());\n  }\n  Spanned spanned=(Spanned)text;\n  Set<Integer> backgroundColors=new HashSet<>();\n  for (  BackgroundColorSpan backgroundColorSpan : spanned.getSpans(0,spanned.length(),BackgroundColorSpan.class)) {\n    backgroundColors.add(backgroundColorSpan.getBackgroundColor());\n  }\n  HashMap<String,String> cssRuleSets=new HashMap<>();\n  for (  int backgroundColor : backgroundColors) {\n    cssRuleSets.put(HtmlUtils.cssAllClassDescendantsSelector(\"bg_\" + backgroundColor),Util.formatInvariant(\"background-color:%s;\",HtmlUtils.toCssRgba(backgroundColor)));\n  }\n  SparseArray<Transition> spanTransitions=findSpanTransitions(spanned,displayDensity);\n  StringBuilder html=new StringBuilder(spanned.length());\n  int previousTransition=0;\n  for (int i=0; i < spanTransitions.size(); i++) {\n    int index=spanTransitions.keyAt(i);\n    html.append(escapeHtml(spanned.subSequence(previousTransition,index)));\n    Transition transition=spanTransitions.get(index);\n    Collections.sort(transition.spansRemoved,SpanInfo.FOR_CLOSING_TAGS);\n    for (    SpanInfo spanInfo : transition.spansRemoved) {\n      html.append(spanInfo.closingTag);\n    }\n    Collections.sort(transition.spansAdded,SpanInfo.FOR_OPENING_TAGS);\n    for (    SpanInfo spanInfo : transition.spansAdded) {\n      html.append(spanInfo.openingTag);\n    }\n    previousTransition=index;\n  }\n  html.append(escapeHtml(spanned.subSequence(previousTransition,spanned.length())));\n  return new HtmlAndCss(html.toString(),cssRuleSets);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 261,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3076,
        "startLineNumber" : 62,
        "startColumnNumber" : 2,
        "endLineNumber" : 126,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Convert  {@code text} into HTML, adding tags and styling to match any styling spans present.<p>All textual content is HTML-escaped during the conversion. <p>NOTE: The current implementation does not handle overlapping spans correctly, it will generate overlapping HTML tags that are invalid. In most cases this won't be a problem because: <ul> <li>Most subtitle formats use a tagged structure to carry formatting information (e.g. WebVTT and TTML), so the  {@link Spanned} objects created by these decoders likely won't haveoverlapping spans. <li>WebView/Chromium (the intended destination of this HTML) gracefully handles overlapping tags and usually renders the same result as spanned text in a TextView. </ul>\n * @param text The (possibly span-styled) text to convert to HTML.\n * @param displayDensity The screen density of the device. WebView treats 1 CSS px as one Androiddp, so to convert size values from Android px to CSS px we need to know the screen density.\n */\npublic static HtmlAndCss convert(@Nullable CharSequence text,float displayDensity){\n  if (text == null) {\n    return new HtmlAndCss(\"\",ImmutableMap.of());\n  }\n  if (!(text instanceof Spanned)) {\n    return new HtmlAndCss(escapeHtml(text),ImmutableMap.of());\n  }\n  Spanned spanned=(Spanned)text;\n  Set<Integer> backgroundColors=new HashSet<>();\n  for (  BackgroundColorSpan backgroundColorSpan : spanned.getSpans(0,spanned.length(),BackgroundColorSpan.class)) {\n    backgroundColors.add(backgroundColorSpan.getBackgroundColor());\n  }\n  HashMap<String,String> cssRuleSets=new HashMap<>();\n  for (  int backgroundColor : backgroundColors) {\n    cssRuleSets.put(HtmlUtils.cssAllClassDescendantsSelector(\"bg_\" + backgroundColor),Util.formatInvariant(\"background-color:%s;\",HtmlUtils.toCssRgba(backgroundColor)));\n  }\n  SparseArray<Transition> spanTransitions=findSpanTransitions(spanned,displayDensity);\n  StringBuilder html=new StringBuilder(spanned.length());\n  int previousTransition=0;\n  for (int i=0; i < spanTransitions.size(); i++) {\n    int index=spanTransitions.keyAt(i);\n    html.append(escapeHtml(spanned.subSequence(previousTransition,index)));\n    Transition transition=spanTransitions.get(index);\n    Collections.sort(transition.spansRemoved,SpanInfo.FOR_CLOSING_TAGS);\n    for (    SpanInfo spanInfo : transition.spansRemoved) {\n      html.append(spanInfo.closingTag);\n    }\n    Collections.sort(transition.spansAdded,SpanInfo.FOR_OPENING_TAGS);\n    for (    SpanInfo spanInfo : transition.spansAdded) {\n      html.append(spanInfo.openingTag);\n    }\n    previousTransition=index;\n  }\n  html.append(escapeHtml(spanned.subSequence(previousTransition,spanned.length())));\n  return new HtmlAndCss(html.toString(),cssRuleSets);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 277,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 87,
        "startColumnNumber" : 6,
        "endLineNumber" : 87,
        "endColumnNumber" : 84
      },
      "nodeContext" : "return new HtmlAndCss(escapeHtml(text),ImmutableMap.of());\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 5,
    "type" : "com.google.android.exoplayer2.ui.SpannedToHtmlConverter.HtmlAndCss"
  } ],
  "positionList" : [ {
    "charLength" : 70,
    "startLineNumber" : 87,
    "startColumnNumber" : 13,
    "endLineNumber" : 87,
    "endColumnNumber" : 83
  } ],
  "layoutRelationDataList" : [ ]
}