{
  "id" : 446,
  "expression" : "onSuccess(res5 -> {\n  Set<ServerID> set2=new HashSet<>();\n  for (  ServerID sid : res5) {\n    set2.add(sid);\n  }\n  assertEquals(1,set2.size());\n  assertTrue(set2.contains(serverID3));\n  map.remove(\"some-sub2\",serverID1,onSuccess(res6 -> {\n    assertFalse(res6);\n    map.remove(\"some-sub2\",serverID3,onSuccess(res7 -> {\n      map.get(\"some-sub2\",onSuccess(res8 -> {\n        Set<ServerID> set3=new HashSet<>();\n        for (        ServerID sid : res8) {\n          set3.add(sid);\n        }\n        assertEquals(0,set3.size());\n        testComplete();\n      }\n));\n    }\n));\n  }\n));\n}\n)",
  "projectName" : "eclipse-vertx@vert.x",
  "commitID" : "665e20a715caff0cbaa72adfd1bb374c543281f0",
  "filePath" : "/src/test/java/io/vertx/test/core/AsyncMultiMapTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "onSuccess(res5 -> {\n  Set<ServerID> set2=new HashSet<>();\n  for (  ServerID sid : res5) {\n    set2.add(sid);\n  }\n  assertEquals(1,set2.size());\n  assertTrue(set2.contains(serverID3));\n  map.remove(\"some-sub2\",serverID1,onSuccess(res6 -> {\n    assertFalse(res6);\n    map.remove(\"some-sub2\",serverID3,onSuccess(res7 -> {\n      map.get(\"some-sub2\",onSuccess(res8 -> {\n        Set<ServerID> set3=new HashSet<>();\n        for (        ServerID sid : res8) {\n          set3.add(sid);\n        }\n        assertEquals(0,set3.size());\n        testComplete();\n      }\n));\n    }\n));\n  }\n));\n}\n)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 821,
      "startLineNumber" : 105,
      "startColumnNumber" : 33,
      "endLineNumber" : 127,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 117,
    "astHeight" : 24,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 843,
        "startLineNumber" : 105,
        "startColumnNumber" : 12,
        "endLineNumber" : 127,
        "endColumnNumber" : 15
      },
      "nodeContext" : "map.get(\"some-sub2\",onSuccess(res5 -> {\n  Set<ServerID> set2=new HashSet<>();\n  for (  ServerID sid : res5) {\n    set2.add(sid);\n  }\n  assertEquals(1,set2.size());\n  assertTrue(set2.contains(serverID3));\n  map.remove(\"some-sub2\",serverID1,onSuccess(res6 -> {\n    assertFalse(res6);\n    map.remove(\"some-sub2\",serverID3,onSuccess(res7 -> {\n      map.get(\"some-sub2\",onSuccess(res8 -> {\n        Set<ServerID> set3=new HashSet<>();\n        for (        ServerID sid : res8) {\n          set3.add(sid);\n        }\n        assertEquals(0,set3.size());\n        testComplete();\n      }\n));\n    }\n));\n  }\n));\n}\n))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 121,
      "astHeight" : 25
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 844,
        "startLineNumber" : 105,
        "startColumnNumber" : 12,
        "endLineNumber" : 127,
        "endColumnNumber" : 16
      },
      "nodeContext" : "map.get(\"some-sub2\",onSuccess(res5 -> {\n  Set<ServerID> set2=new HashSet<>();\n  for (  ServerID sid : res5) {\n    set2.add(sid);\n  }\n  assertEquals(1,set2.size());\n  assertTrue(set2.contains(serverID3));\n  map.remove(\"some-sub2\",serverID1,onSuccess(res6 -> {\n    assertFalse(res6);\n    map.remove(\"some-sub2\",serverID3,onSuccess(res7 -> {\n      map.get(\"some-sub2\",onSuccess(res8 -> {\n        Set<ServerID> set3=new HashSet<>();\n        for (        ServerID sid : res8) {\n          set3.add(sid);\n        }\n        assertEquals(0,set3.size());\n        testComplete();\n      }\n));\n    }\n));\n  }\n));\n}\n));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 122,
      "astHeight" : 26
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 1140,
        "startLineNumber" : 97,
        "startColumnNumber" : 48,
        "endLineNumber" : 128,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  Set<ServerID> set=new HashSet<>();\n  for (  ServerID sid : res4) {\n    set.add(sid);\n  }\n  assertEquals(2,set.size());\n  assertTrue(set.contains(serverID1));\n  assertTrue(set.contains(serverID2));\n  map.get(\"some-sub2\",onSuccess(res5 -> {\n    Set<ServerID> set2=new HashSet<>();\n    for (    ServerID sid : res5) {\n      set2.add(sid);\n    }\n    assertEquals(1,set2.size());\n    assertTrue(set2.contains(serverID3));\n    map.remove(\"some-sub2\",serverID1,onSuccess(res6 -> {\n      assertFalse(res6);\n      map.remove(\"some-sub2\",serverID3,onSuccess(res7 -> {\n        map.get(\"some-sub2\",onSuccess(res8 -> {\n          Set<ServerID> set3=new HashSet<>();\n          for (          ServerID sid : res8) {\n            set3.add(sid);\n          }\n          assertEquals(0,set3.size());\n          testComplete();\n        }\n));\n      }\n));\n    }\n));\n  }\n));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 168,
      "astHeight" : 27
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 1148,
        "startLineNumber" : 97,
        "startColumnNumber" : 40,
        "endLineNumber" : 128,
        "endColumnNumber" : 11
      },
      "nodeContext" : "res4 -> {\n  Set<ServerID> set=new HashSet<>();\n  for (  ServerID sid : res4) {\n    set.add(sid);\n  }\n  assertEquals(2,set.size());\n  assertTrue(set.contains(serverID1));\n  assertTrue(set.contains(serverID2));\n  map.get(\"some-sub2\",onSuccess(res5 -> {\n    Set<ServerID> set2=new HashSet<>();\n    for (    ServerID sid : res5) {\n      set2.add(sid);\n    }\n    assertEquals(1,set2.size());\n    assertTrue(set2.contains(serverID3));\n    map.remove(\"some-sub2\",serverID1,onSuccess(res6 -> {\n      assertFalse(res6);\n      map.remove(\"some-sub2\",serverID3,onSuccess(res7 -> {\n        map.get(\"some-sub2\",onSuccess(res8 -> {\n          Set<ServerID> set3=new HashSet<>();\n          for (          ServerID sid : res8) {\n            set3.add(sid);\n          }\n          assertEquals(0,set3.size());\n          testComplete();\n        }\n));\n      }\n));\n    }\n));\n  }\n));\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 171,
      "astHeight" : 28
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 844,
        "startLineNumber" : 105,
        "startColumnNumber" : 12,
        "endLineNumber" : 127,
        "endColumnNumber" : 16
      },
      "nodeContext" : "map.get(\"some-sub2\",onSuccess(res5 -> {\n  Set<ServerID> set2=new HashSet<>();\n  for (  ServerID sid : res5) {\n    set2.add(sid);\n  }\n  assertEquals(1,set2.size());\n  assertTrue(set2.contains(serverID3));\n  map.remove(\"some-sub2\",serverID1,onSuccess(res6 -> {\n    assertFalse(res6);\n    map.remove(\"some-sub2\",serverID3,onSuccess(res7 -> {\n      map.get(\"some-sub2\",onSuccess(res8 -> {\n        Set<ServerID> set3=new HashSet<>();\n        for (        ServerID sid : res8) {\n          set3.add(sid);\n        }\n        assertEquals(0,set3.size());\n        testComplete();\n      }\n));\n    }\n));\n  }\n));\n}\n));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 122,
      "astHeight" : 26
    },
    "tokenLength" : 56,
    "type" : "io.vertx.core.Handler<io.vertx.core.AsyncResult<io.vertx.core.spi.cluster.ChoosableIterable<io.vertx.core.net.impl.ServerID>>>"
  } ],
  "positionList" : [ {
    "charLength" : 821,
    "startLineNumber" : 105,
    "startColumnNumber" : 33,
    "endLineNumber" : 127,
    "endColumnNumber" : 14
  } ],
  "layoutRelationDataList" : [ ]
}