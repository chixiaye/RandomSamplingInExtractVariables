{
  "id" : 105,
  "expression" : "name",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/main/java/com/google/devtools/build/lib/vfs/DigestHashFunction.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "name",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 121,
      "startColumnNumber" : 45,
      "endLineNumber" : 121,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 121,
        "startColumnNumber" : 12,
        "endLineNumber" : 121,
        "endColumnNumber" : 50
      },
      "nodeContext" : "hashFunctionRegistry.containsKey(name)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 154,
        "startLineNumber" : 121,
        "startColumnNumber" : 8,
        "endLineNumber" : 123,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (hashFunctionRegistry.containsKey(name)) {\n  throw new IllegalArgumentException(\"Hash function \" + name + \" is already registered.\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 226,
        "startLineNumber" : 120,
        "startColumnNumber" : 32,
        "endLineNumber" : 125,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (hashFunctionRegistry.containsKey(name)) {\n    throw new IllegalArgumentException(\"Hash function \" + name + \" is already registered.\");\n  }\n  hashFunctionRegistry.put(name,hashFunction);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 21,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 252,
        "startLineNumber" : 120,
        "startColumnNumber" : 6,
        "endLineNumber" : 125,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (String name : names) {\n  if (hashFunctionRegistry.containsKey(name)) {\n    throw new IllegalArgumentException(\"Hash function \" + name + \" is already registered.\");\n  }\n  hashFunctionRegistry.put(name,hashFunction);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 27,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 266,
        "startLineNumber" : 119,
        "startColumnNumber" : 40,
        "endLineNumber" : 126,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  for (  String name : names) {\n    if (hashFunctionRegistry.containsKey(name)) {\n      throw new IllegalArgumentException(\"Hash function \" + name + \" is already registered.\");\n    }\n    hashFunctionRegistry.put(name,hashFunction);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 28,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 302,
        "startLineNumber" : 119,
        "startColumnNumber" : 4,
        "endLineNumber" : 126,
        "endColumnNumber" : 5
      },
      "nodeContext" : "synchronized (hashFunctionRegistry) {\n  for (  String name : names) {\n    if (hashFunctionRegistry.containsKey(name)) {\n      throw new IllegalArgumentException(\"Hash function \" + name + \" is already registered.\");\n    }\n    hashFunctionRegistry.put(name,hashFunction);\n  }\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 30,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 813,
        "startLineNumber" : 106,
        "startColumnNumber" : 89,
        "endLineNumber" : 128,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  try {\n    MessageDigest.getInstance(hashName);\n  }\n catch (  NoSuchAlgorithmException e) {\n    throw new IllegalArgumentException(\"The hash function name provided does not correspond to a valid MessageDigest: \" + hashName,e);\n  }\n  ImmutableList<String> names=ImmutableList.<String>builder().add(hashName).add(altNames).build();\n  DigestHashFunction hashFunction=new DigestHashFunction(hash,digestLength,names);\nsynchronized (hashFunctionRegistry) {\n    for (    String name : names) {\n      if (hashFunctionRegistry.containsKey(name)) {\n        throw new IllegalArgumentException(\"Hash function \" + name + \" is already registered.\");\n      }\n      hashFunctionRegistry.put(name,hashFunction);\n    }\n  }\n  return hashFunction;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 86,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1522,
        "startLineNumber" : 94,
        "startColumnNumber" : 2,
        "endLineNumber" : 128,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Creates a new DigestHashFunction that is registered to be recognized by its name in  {@link DigestFunctionConverter}.\n * @param hashName the canonical name for this hash function - and the name that can be used touncover the MessageDigest.\n * @param altNames alternative names that will be mapped to this function by the converter butwill not serve as the canonical name for the DigestHashFunction.\n * @param hash The {@link HashFunction} to register.\n * @throws IllegalArgumentException if the name is already registered.\n */\npublic static DigestHashFunction register(HashFunction hash,DigestLength digestLength,String hashName,String... altNames){\n  try {\n    MessageDigest.getInstance(hashName);\n  }\n catch (  NoSuchAlgorithmException e) {\n    throw new IllegalArgumentException(\"The hash function name provided does not correspond to a valid MessageDigest: \" + hashName,e);\n  }\n  ImmutableList<String> names=ImmutableList.<String>builder().add(hashName).add(altNames).build();\n  DigestHashFunction hashFunction=new DigestHashFunction(hash,digestLength,names);\nsynchronized (hashFunctionRegistry) {\n    for (    String name : names) {\n      if (hashFunctionRegistry.containsKey(name)) {\n        throw new IllegalArgumentException(\"Hash function \" + name + \" is already registered.\");\n      }\n      hashFunctionRegistry.put(name,hashFunction);\n    }\n  }\n  return hashFunction;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 109,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 121,
        "startColumnNumber" : 12,
        "endLineNumber" : 121,
        "endColumnNumber" : 50
      },
      "nodeContext" : "hashFunctionRegistry.containsKey(name)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "name",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 122,
      "startColumnNumber" : 64,
      "endLineNumber" : 122,
      "endColumnNumber" : 68
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 122,
        "startColumnNumber" : 45,
        "endLineNumber" : 122,
        "endColumnNumber" : 96
      },
      "nodeContext" : "\"Hash function \" + name + \" is already registered.\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 122,
        "startColumnNumber" : 16,
        "endLineNumber" : 122,
        "endColumnNumber" : 97
      },
      "nodeContext" : "new IllegalArgumentException(\"Hash function \" + name + \" is already registered.\")",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 122,
        "startColumnNumber" : 10,
        "endLineNumber" : 122,
        "endColumnNumber" : 98
      },
      "nodeContext" : "throw new IllegalArgumentException(\"Hash function \" + name + \" is already registered.\");\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 121,
        "startColumnNumber" : 52,
        "endLineNumber" : 123,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  throw new IllegalArgumentException(\"Hash function \" + name + \" is already registered.\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 154,
        "startLineNumber" : 121,
        "startColumnNumber" : 8,
        "endLineNumber" : 123,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (hashFunctionRegistry.containsKey(name)) {\n  throw new IllegalArgumentException(\"Hash function \" + name + \" is already registered.\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 226,
        "startLineNumber" : 120,
        "startColumnNumber" : 32,
        "endLineNumber" : 125,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (hashFunctionRegistry.containsKey(name)) {\n    throw new IllegalArgumentException(\"Hash function \" + name + \" is already registered.\");\n  }\n  hashFunctionRegistry.put(name,hashFunction);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 21,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 252,
        "startLineNumber" : 120,
        "startColumnNumber" : 6,
        "endLineNumber" : 125,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (String name : names) {\n  if (hashFunctionRegistry.containsKey(name)) {\n    throw new IllegalArgumentException(\"Hash function \" + name + \" is already registered.\");\n  }\n  hashFunctionRegistry.put(name,hashFunction);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 27,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 266,
        "startLineNumber" : 119,
        "startColumnNumber" : 40,
        "endLineNumber" : 126,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  for (  String name : names) {\n    if (hashFunctionRegistry.containsKey(name)) {\n      throw new IllegalArgumentException(\"Hash function \" + name + \" is already registered.\");\n    }\n    hashFunctionRegistry.put(name,hashFunction);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 28,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 302,
        "startLineNumber" : 119,
        "startColumnNumber" : 4,
        "endLineNumber" : 126,
        "endColumnNumber" : 5
      },
      "nodeContext" : "synchronized (hashFunctionRegistry) {\n  for (  String name : names) {\n    if (hashFunctionRegistry.containsKey(name)) {\n      throw new IllegalArgumentException(\"Hash function \" + name + \" is already registered.\");\n    }\n    hashFunctionRegistry.put(name,hashFunction);\n  }\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 30,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 813,
        "startLineNumber" : 106,
        "startColumnNumber" : 89,
        "endLineNumber" : 128,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  try {\n    MessageDigest.getInstance(hashName);\n  }\n catch (  NoSuchAlgorithmException e) {\n    throw new IllegalArgumentException(\"The hash function name provided does not correspond to a valid MessageDigest: \" + hashName,e);\n  }\n  ImmutableList<String> names=ImmutableList.<String>builder().add(hashName).add(altNames).build();\n  DigestHashFunction hashFunction=new DigestHashFunction(hash,digestLength,names);\nsynchronized (hashFunctionRegistry) {\n    for (    String name : names) {\n      if (hashFunctionRegistry.containsKey(name)) {\n        throw new IllegalArgumentException(\"Hash function \" + name + \" is already registered.\");\n      }\n      hashFunctionRegistry.put(name,hashFunction);\n    }\n  }\n  return hashFunction;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 86,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1522,
        "startLineNumber" : 94,
        "startColumnNumber" : 2,
        "endLineNumber" : 128,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Creates a new DigestHashFunction that is registered to be recognized by its name in  {@link DigestFunctionConverter}.\n * @param hashName the canonical name for this hash function - and the name that can be used touncover the MessageDigest.\n * @param altNames alternative names that will be mapped to this function by the converter butwill not serve as the canonical name for the DigestHashFunction.\n * @param hash The {@link HashFunction} to register.\n * @throws IllegalArgumentException if the name is already registered.\n */\npublic static DigestHashFunction register(HashFunction hash,DigestLength digestLength,String hashName,String... altNames){\n  try {\n    MessageDigest.getInstance(hashName);\n  }\n catch (  NoSuchAlgorithmException e) {\n    throw new IllegalArgumentException(\"The hash function name provided does not correspond to a valid MessageDigest: \" + hashName,e);\n  }\n  ImmutableList<String> names=ImmutableList.<String>builder().add(hashName).add(altNames).build();\n  DigestHashFunction hashFunction=new DigestHashFunction(hash,digestLength,names);\nsynchronized (hashFunctionRegistry) {\n    for (    String name : names) {\n      if (hashFunctionRegistry.containsKey(name)) {\n        throw new IllegalArgumentException(\"Hash function \" + name + \" is already registered.\");\n      }\n      hashFunctionRegistry.put(name,hashFunction);\n    }\n  }\n  return hashFunction;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 109,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 122,
        "startColumnNumber" : 10,
        "endLineNumber" : 122,
        "endColumnNumber" : 98
      },
      "nodeContext" : "throw new IllegalArgumentException(\"Hash function \" + name + \" is already registered.\");\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "name",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 124,
      "startColumnNumber" : 33,
      "endLineNumber" : 124,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 124,
        "startColumnNumber" : 8,
        "endLineNumber" : 124,
        "endColumnNumber" : 52
      },
      "nodeContext" : "hashFunctionRegistry.put(name,hashFunction)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 124,
        "startColumnNumber" : 8,
        "endLineNumber" : 124,
        "endColumnNumber" : 53
      },
      "nodeContext" : "hashFunctionRegistry.put(name,hashFunction);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 226,
        "startLineNumber" : 120,
        "startColumnNumber" : 32,
        "endLineNumber" : 125,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (hashFunctionRegistry.containsKey(name)) {\n    throw new IllegalArgumentException(\"Hash function \" + name + \" is already registered.\");\n  }\n  hashFunctionRegistry.put(name,hashFunction);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 21,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 252,
        "startLineNumber" : 120,
        "startColumnNumber" : 6,
        "endLineNumber" : 125,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (String name : names) {\n  if (hashFunctionRegistry.containsKey(name)) {\n    throw new IllegalArgumentException(\"Hash function \" + name + \" is already registered.\");\n  }\n  hashFunctionRegistry.put(name,hashFunction);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 27,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SynchronizedStatement,body]",
      "nodePosition" : {
        "charLength" : 266,
        "startLineNumber" : 119,
        "startColumnNumber" : 40,
        "endLineNumber" : 126,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  for (  String name : names) {\n    if (hashFunctionRegistry.containsKey(name)) {\n      throw new IllegalArgumentException(\"Hash function \" + name + \" is already registered.\");\n    }\n    hashFunctionRegistry.put(name,hashFunction);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 28,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 302,
        "startLineNumber" : 119,
        "startColumnNumber" : 4,
        "endLineNumber" : 126,
        "endColumnNumber" : 5
      },
      "nodeContext" : "synchronized (hashFunctionRegistry) {\n  for (  String name : names) {\n    if (hashFunctionRegistry.containsKey(name)) {\n      throw new IllegalArgumentException(\"Hash function \" + name + \" is already registered.\");\n    }\n    hashFunctionRegistry.put(name,hashFunction);\n  }\n}\n",
      "nodeType" : "SynchronizedStatement",
      "astNodeNumber" : 30,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 813,
        "startLineNumber" : 106,
        "startColumnNumber" : 89,
        "endLineNumber" : 128,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  try {\n    MessageDigest.getInstance(hashName);\n  }\n catch (  NoSuchAlgorithmException e) {\n    throw new IllegalArgumentException(\"The hash function name provided does not correspond to a valid MessageDigest: \" + hashName,e);\n  }\n  ImmutableList<String> names=ImmutableList.<String>builder().add(hashName).add(altNames).build();\n  DigestHashFunction hashFunction=new DigestHashFunction(hash,digestLength,names);\nsynchronized (hashFunctionRegistry) {\n    for (    String name : names) {\n      if (hashFunctionRegistry.containsKey(name)) {\n        throw new IllegalArgumentException(\"Hash function \" + name + \" is already registered.\");\n      }\n      hashFunctionRegistry.put(name,hashFunction);\n    }\n  }\n  return hashFunction;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 86,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1522,
        "startLineNumber" : 94,
        "startColumnNumber" : 2,
        "endLineNumber" : 128,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Creates a new DigestHashFunction that is registered to be recognized by its name in  {@link DigestFunctionConverter}.\n * @param hashName the canonical name for this hash function - and the name that can be used touncover the MessageDigest.\n * @param altNames alternative names that will be mapped to this function by the converter butwill not serve as the canonical name for the DigestHashFunction.\n * @param hash The {@link HashFunction} to register.\n * @throws IllegalArgumentException if the name is already registered.\n */\npublic static DigestHashFunction register(HashFunction hash,DigestLength digestLength,String hashName,String... altNames){\n  try {\n    MessageDigest.getInstance(hashName);\n  }\n catch (  NoSuchAlgorithmException e) {\n    throw new IllegalArgumentException(\"The hash function name provided does not correspond to a valid MessageDigest: \" + hashName,e);\n  }\n  ImmutableList<String> names=ImmutableList.<String>builder().add(hashName).add(altNames).build();\n  DigestHashFunction hashFunction=new DigestHashFunction(hash,digestLength,names);\nsynchronized (hashFunctionRegistry) {\n    for (    String name : names) {\n      if (hashFunctionRegistry.containsKey(name)) {\n        throw new IllegalArgumentException(\"Hash function \" + name + \" is already registered.\");\n      }\n      hashFunctionRegistry.put(name,hashFunction);\n    }\n  }\n  return hashFunction;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 109,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 124,
        "startColumnNumber" : 8,
        "endLineNumber" : 124,
        "endColumnNumber" : 53
      },
      "nodeContext" : "hashFunctionRegistry.put(name,hashFunction);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 121,
    "startColumnNumber" : 45,
    "endLineNumber" : 121,
    "endColumnNumber" : 49
  }, {
    "charLength" : 4,
    "startLineNumber" : 122,
    "startColumnNumber" : 64,
    "endLineNumber" : 122,
    "endColumnNumber" : 68
  }, {
    "charLength" : 4,
    "startLineNumber" : 124,
    "startColumnNumber" : 33,
    "endLineNumber" : 124,
    "endColumnNumber" : 37
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  } ]
}