{
  "id" : 331,
  "expression" : "null",
  "projectName" : "libgdx@libgdx",
  "commitID" : "3485b16e8979c0141421bc80cb8831b7a0403f67",
  "filePath" : "/backends/gdx-backend-robovm-metalangle/generator/JavaCodeGenerator.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 132,
      "startColumnNumber" : 21,
      "endLineNumber" : 132,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 132,
        "startColumnNumber" : 2,
        "endLineNumber" : 132,
        "endColumnNumber" : 26
      },
      "nodeContext" : "cu.accept(visitor,null)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 132,
        "startColumnNumber" : 2,
        "endLineNumber" : 132,
        "endColumnNumber" : 27
      },
      "nodeContext" : "cu.accept(visitor,null);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2014,
        "startLineNumber" : 77,
        "startColumnNumber" : 53,
        "endLineNumber" : 141,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  CompilationUnit cu=StaticJavaParser.parse(f);\n  if (LEXICAL_PRESERVING_PRINTER)   cu=LexicalPreservingPrinter.setup(cu);\n  cu.setBlockComment(\"DO NOT EDIT THIS FILE - it is machine generated\");\n  final JavaParser javaParser=new JavaParser();\n  ModifierVisitor<Object> visitor=new ModifierVisitor(){\n    @Override public Name visit(    Name n,    final Object arg){\n      n=(Name)super.visit(n,arg);\n      if (IMPORT_REPLACEMENTS.containsKey(n.asString())) {\n        n=new Name(IMPORT_REPLACEMENTS.get(n.asString()));\n      }\n      return n;\n    }\n    @Override public Visitable visit(    SimpleName n,    Object arg){\n      n=(SimpleName)super.visit(n,arg);\n      if (CLASS_REPLACEMENTS.containsKey(n.asString())) {\n        n=new SimpleName(CLASS_REPLACEMENTS.get(n.asString()));\n      }\n      return n;\n    }\n    @Override public Visitable visit(    ClassOrInterfaceType n,    final Object arg){\n      n=(ClassOrInterfaceType)super.visit(n,arg);\n      if (CLASS_REPLACEMENTS.containsKey(n.asString())) {\n        n=javaParser.parseClassOrInterfaceType(CLASS_REPLACEMENTS.get(n.asString())).getResult().get();\n      }\n      return n;\n    }\n    @Override public Visitable visit(    ClassOrInterfaceDeclaration n,    Object arg){\n      n=(ClassOrInterfaceDeclaration)super.visit(n,arg);\n      String base=n.getJavadocComment().isPresent() ? n.getJavadocComment().get().getContent() : \"\";\n      n.setJavadocComment(\"DO NOT EDIT THIS FILE - it is machine generated\\n\" + base);\n      if (n.getNameAsString().equals(\"IOSViewDelegate\")) {\n        for (        MethodDeclaration m : n.getMethodsByName(\"willPause\"))         m.remove();\n      }\n      return n;\n    }\n  }\n;\n  cu.accept(visitor,null);\n  File out=new File(\"src\",f.getCanonicalPath().substring(BASE_PROJECT_SRC.getCanonicalPath().length()));\n  try (FileWriter writer=new FileWriter(out)){\n    if (LEXICAL_PRESERVING_PRINTER)     LexicalPreservingPrinter.print(cu,writer);\n else     writer.append(cu.toString());\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 321,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2066,
        "startLineNumber" : 77,
        "startColumnNumber" : 1,
        "endLineNumber" : 141,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private static void parse(File f) throws Exception {\n  CompilationUnit cu=StaticJavaParser.parse(f);\n  if (LEXICAL_PRESERVING_PRINTER)   cu=LexicalPreservingPrinter.setup(cu);\n  cu.setBlockComment(\"DO NOT EDIT THIS FILE - it is machine generated\");\n  final JavaParser javaParser=new JavaParser();\n  ModifierVisitor<Object> visitor=new ModifierVisitor(){\n    @Override public Name visit(    Name n,    final Object arg){\n      n=(Name)super.visit(n,arg);\n      if (IMPORT_REPLACEMENTS.containsKey(n.asString())) {\n        n=new Name(IMPORT_REPLACEMENTS.get(n.asString()));\n      }\n      return n;\n    }\n    @Override public Visitable visit(    SimpleName n,    Object arg){\n      n=(SimpleName)super.visit(n,arg);\n      if (CLASS_REPLACEMENTS.containsKey(n.asString())) {\n        n=new SimpleName(CLASS_REPLACEMENTS.get(n.asString()));\n      }\n      return n;\n    }\n    @Override public Visitable visit(    ClassOrInterfaceType n,    final Object arg){\n      n=(ClassOrInterfaceType)super.visit(n,arg);\n      if (CLASS_REPLACEMENTS.containsKey(n.asString())) {\n        n=javaParser.parseClassOrInterfaceType(CLASS_REPLACEMENTS.get(n.asString())).getResult().get();\n      }\n      return n;\n    }\n    @Override public Visitable visit(    ClassOrInterfaceDeclaration n,    Object arg){\n      n=(ClassOrInterfaceDeclaration)super.visit(n,arg);\n      String base=n.getJavadocComment().isPresent() ? n.getJavadocComment().get().getContent() : \"\";\n      n.setJavadocComment(\"DO NOT EDIT THIS FILE - it is machine generated\\n\" + base);\n      if (n.getNameAsString().equals(\"IOSViewDelegate\")) {\n        for (        MethodDeclaration m : n.getMethodsByName(\"willPause\"))         m.remove();\n      }\n      return n;\n    }\n  }\n;\n  cu.accept(visitor,null);\n  File out=new File(\"src\",f.getCanonicalPath().substring(BASE_PROJECT_SRC.getCanonicalPath().length()));\n  try (FileWriter writer=new FileWriter(out)){\n    if (LEXICAL_PRESERVING_PRINTER)     LexicalPreservingPrinter.print(cu,writer);\n else     writer.append(cu.toString());\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 332,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 132,
        "startColumnNumber" : 2,
        "endLineNumber" : 132,
        "endColumnNumber" : 27
      },
      "nodeContext" : "cu.accept(visitor,null);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "null"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 132,
    "startColumnNumber" : 21,
    "endLineNumber" : 132,
    "endColumnNumber" : 25
  } ],
  "layoutRelationDataList" : [ ]
}