{
  "id" : 331,
  "expression" : "e.getMessage()",
  "projectName" : "apache@dubbo",
  "commitID" : "4ea0a09846fa74b7b1a6a1a548f31859a2cddcc8",
  "filePath" : "/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceAnnotationBeanPostProcessor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "e.getMessage()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 243,
      "startColumnNumber" : 48,
      "endLineNumber" : 243,
      "endColumnNumber" : 62
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 243,
        "startColumnNumber" : 22,
        "endLineNumber" : 243,
        "endColumnNumber" : 66
      },
      "nodeContext" : "new IllegalStateException(e.getMessage(),e)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 243,
        "startColumnNumber" : 16,
        "endLineNumber" : 243,
        "endColumnNumber" : 67
      },
      "nodeContext" : "throw new IllegalStateException(e.getMessage(),e);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 242,
        "startColumnNumber" : 47,
        "endLineNumber" : 244,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  throw new IllegalStateException(e.getMessage(),e);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 242,
        "startColumnNumber" : 14,
        "endLineNumber" : 244,
        "endColumnNumber" : 13
      },
      "nodeContext" : "catch (ClassNotFoundException e) {\n  throw new IllegalStateException(e.getMessage(),e);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 205,
        "startLineNumber" : 240,
        "startColumnNumber" : 12,
        "endLineNumber" : 244,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  actualInterface=ClassUtils.forName(interfaceName);\n}\n catch (ClassNotFoundException e) {\n  throw new IllegalStateException(e.getMessage(),e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 23,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2153,
        "startLineNumber" : 217,
        "startColumnNumber" : 42,
        "endLineNumber" : 250,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  LinkedHashMap<String,Object> attributes=new LinkedHashMap<>(annotationAttributes);\n  attributes.put(ReferenceAttributes.ID,beanName);\n  ReferenceBeanSupport.convertReferenceProps(attributes,beanClass);\n  String interfaceName=(String)attributes.get(ReferenceAttributes.INTERFACE);\n  if (!StringUtils.isEquals(interfaceName,beanClass.getName()) && beanClass != GenericService.class) {\n    MethodMetadata factoryMethodMetadata=beanDefinition.getFactoryMethodMetadata();\n    String beanMethodSignature=factoryMethodMetadata.getDeclaringClassName() + \"#\" + factoryMethodMetadata.getMethodName()+ \"()\";\n    throw new BeanCreationException(\"The 'interfaceClass' or 'interfaceName' attribute value of @DubboReference annotation \" + \"is inconsistent with the generic type of the ReferenceBean returned by the bean method. \" + \"The interface class of @DubboReference is: \" + interfaceName + \", but return ReferenceBean<\"+ beanClass.getName()+ \">. \"+ \"Please remove the 'interfaceClass' and 'interfaceName' attributes from @DubboReference annotation. \"+ \"Please check bean method: \"+ beanMethodSignature);\n  }\n  Class interfaceClass=beanClass;\n  Class actualInterface=null;\n  try {\n    actualInterface=ClassUtils.forName(interfaceName);\n  }\n catch (  ClassNotFoundException e) {\n    throw new IllegalStateException(e.getMessage(),e);\n  }\n  beanDefinition.setAttribute(Constants.REFERENCE_PROPS,attributes);\n  beanDefinition.setAttribute(ReferenceAttributes.INTERFACE_CLASS,interfaceClass);\n  beanDefinition.setAttribute(ReferenceAttributes.ACTUAL_INTERFACE,actualInterface);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 159,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2544,
        "startLineNumber" : 217,
        "startColumnNumber" : 8,
        "endLineNumber" : 257,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (annotationAttributes != null) {\n  LinkedHashMap<String,Object> attributes=new LinkedHashMap<>(annotationAttributes);\n  attributes.put(ReferenceAttributes.ID,beanName);\n  ReferenceBeanSupport.convertReferenceProps(attributes,beanClass);\n  String interfaceName=(String)attributes.get(ReferenceAttributes.INTERFACE);\n  if (!StringUtils.isEquals(interfaceName,beanClass.getName()) && beanClass != GenericService.class) {\n    MethodMetadata factoryMethodMetadata=beanDefinition.getFactoryMethodMetadata();\n    String beanMethodSignature=factoryMethodMetadata.getDeclaringClassName() + \"#\" + factoryMethodMetadata.getMethodName()+ \"()\";\n    throw new BeanCreationException(\"The 'interfaceClass' or 'interfaceName' attribute value of @DubboReference annotation \" + \"is inconsistent with the generic type of the ReferenceBean returned by the bean method. \" + \"The interface class of @DubboReference is: \" + interfaceName + \", but return ReferenceBean<\"+ beanClass.getName()+ \">. \"+ \"Please remove the 'interfaceClass' and 'interfaceName' attributes from @DubboReference annotation. \"+ \"Please check bean method: \"+ beanMethodSignature);\n  }\n  Class interfaceClass=beanClass;\n  Class actualInterface=null;\n  try {\n    actualInterface=ClassUtils.forName(interfaceName);\n  }\n catch (  ClassNotFoundException e) {\n    throw new IllegalStateException(e.getMessage(),e);\n  }\n  beanDefinition.setAttribute(Constants.REFERENCE_PROPS,attributes);\n  beanDefinition.setAttribute(ReferenceAttributes.INTERFACE_CLASS,interfaceClass);\n  beanDefinition.setAttribute(ReferenceAttributes.ACTUAL_INTERFACE,actualInterface);\n}\n else {\n  beanDefinition.setAttribute(ReferenceAttributes.INTERFACE_CLASS,beanClass);\n  if (beanClass != GenericService.class) {\n    beanDefinition.setAttribute(ReferenceAttributes.ACTUAL_INTERFACE,beanClass);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 187,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4293,
        "startLineNumber" : 191,
        "startColumnNumber" : 114,
        "endLineNumber" : 261,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Class beanClass=getBeanFactory().getType(beanName);\n  if (beanClass == null) {\n    MethodMetadata factoryMethodMetadata=beanDefinition.getFactoryMethodMetadata();\n    String beanMethodSignature=factoryMethodMetadata.getDeclaringClassName() + \"#\" + factoryMethodMetadata.getMethodName()+ \"()\";\n    throw new BeanCreationException(\"The ReferenceBean is missing necessary generic type, which returned by the @Bean method of Java-config class. \" + \"The generic type of the returned ReferenceBean must be specified as the referenced interface type, \" + \"such as ReferenceBean<DemoService>. Please check bean method: \"+ beanMethodSignature);\n  }\n  Map<String,Object> annotationAttributes=null;\n  MergedAnnotations mergedAnnotations=beanDefinition.getFactoryMethodMetadata().getAnnotations();\n  Class referenceAnnotationType=null;\n  for (  Class<? extends Annotation> annotationType : getAnnotationTypes()) {\n    if (mergedAnnotations.isPresent(annotationType)) {\n      referenceAnnotationType=annotationType;\n      annotationAttributes=mergedAnnotations.get(annotationType).filterDefaultValues().asMap();\n      break;\n    }\n  }\n  if (annotationAttributes != null) {\n    LinkedHashMap<String,Object> attributes=new LinkedHashMap<>(annotationAttributes);\n    attributes.put(ReferenceAttributes.ID,beanName);\n    ReferenceBeanSupport.convertReferenceProps(attributes,beanClass);\n    String interfaceName=(String)attributes.get(ReferenceAttributes.INTERFACE);\n    if (!StringUtils.isEquals(interfaceName,beanClass.getName()) && beanClass != GenericService.class) {\n      MethodMetadata factoryMethodMetadata=beanDefinition.getFactoryMethodMetadata();\n      String beanMethodSignature=factoryMethodMetadata.getDeclaringClassName() + \"#\" + factoryMethodMetadata.getMethodName()+ \"()\";\n      throw new BeanCreationException(\"The 'interfaceClass' or 'interfaceName' attribute value of @DubboReference annotation \" + \"is inconsistent with the generic type of the ReferenceBean returned by the bean method. \" + \"The interface class of @DubboReference is: \" + interfaceName + \", but return ReferenceBean<\"+ beanClass.getName()+ \">. \"+ \"Please remove the 'interfaceClass' and 'interfaceName' attributes from @DubboReference annotation. \"+ \"Please check bean method: \"+ beanMethodSignature);\n    }\n    Class interfaceClass=beanClass;\n    Class actualInterface=null;\n    try {\n      actualInterface=ClassUtils.forName(interfaceName);\n    }\n catch (    ClassNotFoundException e) {\n      throw new IllegalStateException(e.getMessage(),e);\n    }\n    beanDefinition.setAttribute(Constants.REFERENCE_PROPS,attributes);\n    beanDefinition.setAttribute(ReferenceAttributes.INTERFACE_CLASS,interfaceClass);\n    beanDefinition.setAttribute(ReferenceAttributes.ACTUAL_INTERFACE,actualInterface);\n  }\n else {\n    beanDefinition.setAttribute(ReferenceAttributes.INTERFACE_CLASS,beanClass);\n    if (beanClass != GenericService.class) {\n      beanDefinition.setAttribute(ReferenceAttributes.ACTUAL_INTERFACE,beanClass);\n    }\n  }\n  beanDefinition.getPropertyValues().add(ReferenceAttributes.ID,beanName);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 305,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4870,
        "startLineNumber" : 174,
        "startColumnNumber" : 4,
        "endLineNumber" : 261,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * process @DubboReference at java-config @bean method <pre class=\"code\"> &#064;Configuration public class ConsumerConfig { &#064;Bean &#064;DubboReference(group=\"demo\", version=\"1.2.3\") public ReferenceBean&lt;DemoService&gt; demoService() { return new ReferenceBean(); } } </pre>\n * @param beanName\n * @param beanDefinition\n */\nprivate void processReferenceAnnotatedBeanDefinition(String beanName,AnnotatedBeanDefinition beanDefinition){\n  Class beanClass=getBeanFactory().getType(beanName);\n  if (beanClass == null) {\n    MethodMetadata factoryMethodMetadata=beanDefinition.getFactoryMethodMetadata();\n    String beanMethodSignature=factoryMethodMetadata.getDeclaringClassName() + \"#\" + factoryMethodMetadata.getMethodName()+ \"()\";\n    throw new BeanCreationException(\"The ReferenceBean is missing necessary generic type, which returned by the @Bean method of Java-config class. \" + \"The generic type of the returned ReferenceBean must be specified as the referenced interface type, \" + \"such as ReferenceBean<DemoService>. Please check bean method: \"+ beanMethodSignature);\n  }\n  Map<String,Object> annotationAttributes=null;\n  MergedAnnotations mergedAnnotations=beanDefinition.getFactoryMethodMetadata().getAnnotations();\n  Class referenceAnnotationType=null;\n  for (  Class<? extends Annotation> annotationType : getAnnotationTypes()) {\n    if (mergedAnnotations.isPresent(annotationType)) {\n      referenceAnnotationType=annotationType;\n      annotationAttributes=mergedAnnotations.get(annotationType).filterDefaultValues().asMap();\n      break;\n    }\n  }\n  if (annotationAttributes != null) {\n    LinkedHashMap<String,Object> attributes=new LinkedHashMap<>(annotationAttributes);\n    attributes.put(ReferenceAttributes.ID,beanName);\n    ReferenceBeanSupport.convertReferenceProps(attributes,beanClass);\n    String interfaceName=(String)attributes.get(ReferenceAttributes.INTERFACE);\n    if (!StringUtils.isEquals(interfaceName,beanClass.getName()) && beanClass != GenericService.class) {\n      MethodMetadata factoryMethodMetadata=beanDefinition.getFactoryMethodMetadata();\n      String beanMethodSignature=factoryMethodMetadata.getDeclaringClassName() + \"#\" + factoryMethodMetadata.getMethodName()+ \"()\";\n      throw new BeanCreationException(\"The 'interfaceClass' or 'interfaceName' attribute value of @DubboReference annotation \" + \"is inconsistent with the generic type of the ReferenceBean returned by the bean method. \" + \"The interface class of @DubboReference is: \" + interfaceName + \", but return ReferenceBean<\"+ beanClass.getName()+ \">. \"+ \"Please remove the 'interfaceClass' and 'interfaceName' attributes from @DubboReference annotation. \"+ \"Please check bean method: \"+ beanMethodSignature);\n    }\n    Class interfaceClass=beanClass;\n    Class actualInterface=null;\n    try {\n      actualInterface=ClassUtils.forName(interfaceName);\n    }\n catch (    ClassNotFoundException e) {\n      throw new IllegalStateException(e.getMessage(),e);\n    }\n    beanDefinition.setAttribute(Constants.REFERENCE_PROPS,attributes);\n    beanDefinition.setAttribute(ReferenceAttributes.INTERFACE_CLASS,interfaceClass);\n    beanDefinition.setAttribute(ReferenceAttributes.ACTUAL_INTERFACE,actualInterface);\n  }\n else {\n    beanDefinition.setAttribute(ReferenceAttributes.INTERFACE_CLASS,beanClass);\n    if (beanClass != GenericService.class) {\n      beanDefinition.setAttribute(ReferenceAttributes.ACTUAL_INTERFACE,beanClass);\n    }\n  }\n  beanDefinition.getPropertyValues().add(ReferenceAttributes.ID,beanName);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 318,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 243,
        "startColumnNumber" : 16,
        "endLineNumber" : 243,
        "endColumnNumber" : 67
      },
      "nodeContext" : "throw new IllegalStateException(e.getMessage(),e);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 243,
    "startColumnNumber" : 48,
    "endLineNumber" : 243,
    "endColumnNumber" : 62
  } ],
  "layoutRelationDataList" : [ ]
}