{
  "id" : 203,
  "expression" : "\"PullMessageTask_popMessage:\"",
  "projectName" : "alibaba@spring-cloud-alibaba",
  "commitID" : "89ad537f66927a647f6233cfc79d58b18f2f6928",
  "filePath" : "/spring-cloud-alicloud-sms/src/main/java/com/alibaba/alicloud/sms/base/DefaultAlicomMessagePuller.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"PullMessageTask_popMessage:\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 29,
      "startLineNumber" : 163,
      "startColumnNumber" : 16,
      "endLineNumber" : 163,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 203,
        "startLineNumber" : 163,
        "startColumnNumber" : 16,
        "endLineNumber" : 166,
        "endColumnNumber" : 55
      },
      "nodeContext" : "\"PullMessageTask_popMessage:\" + Thread.currentThread().getName() + \"-popDone at \"+ \",\"+ format.format(new Date())+ \" msgSize=\"+ (popMsg == null ? 0 : popMsg.getMessageId())",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 25,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 213,
        "startLineNumber" : 163,
        "startColumnNumber" : 7,
        "endLineNumber" : 166,
        "endColumnNumber" : 56
      },
      "nodeContext" : "log.info(\"PullMessageTask_popMessage:\" + Thread.currentThread().getName() + \"-popDone at \"+ \",\"+ format.format(new Date())+ \" msgSize=\"+ (popMsg == null ? 0 : popMsg.getMessageId()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 28,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 214,
        "startLineNumber" : 163,
        "startColumnNumber" : 7,
        "endLineNumber" : 166,
        "endColumnNumber" : 57
      },
      "nodeContext" : "log.info(\"PullMessageTask_popMessage:\" + Thread.currentThread().getName() + \"-popDone at \"+ \",\"+ format.format(new Date())+ \" msgSize=\"+ (popMsg == null ? 0 : popMsg.getMessageId()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 29,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 319,
        "startLineNumber" : 160,
        "startColumnNumber" : 24,
        "endLineNumber" : 167,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  SimpleDateFormat format=new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n  log.info(\"PullMessageTask_popMessage:\" + Thread.currentThread().getName() + \"-popDone at \"+ \",\"+ format.format(new Date())+ \" msgSize=\"+ (popMsg == null ? 0 : popMsg.getMessageId()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 39,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 337,
        "startLineNumber" : 160,
        "startColumnNumber" : 6,
        "endLineNumber" : 167,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (debugLogOpen) {\n  SimpleDateFormat format=new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n  log.info(\"PullMessageTask_popMessage:\" + Thread.currentThread().getName() + \"-popDone at \"+ \",\"+ format.format(new Date())+ \" msgSize=\"+ (popMsg == null ? 0 : popMsg.getMessageId()));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 41,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 463,
        "startLineNumber" : 158,
        "startColumnNumber" : 19,
        "endLineNumber" : 172,
        "endColumnNumber" : 6
      },
      "nodeContext" : "{\n  popMsg=queue.popMessage();\n  if (debugLogOpen) {\n    SimpleDateFormat format=new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n    log.info(\"PullMessageTask_popMessage:\" + Thread.currentThread().getName() + \"-popDone at \"+ \",\"+ format.format(new Date())+ \" msgSize=\"+ (popMsg == null ? 0 : popMsg.getMessageId()));\n  }\n  if (popMsg == null) {\n    polling=true;\n    continue;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 58,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1951,
        "startLineNumber" : 158,
        "startColumnNumber" : 5,
        "endLineNumber" : 224,
        "endColumnNumber" : 6
      },
      "nodeContext" : "if (!polling) {\n  popMsg=queue.popMessage();\n  if (debugLogOpen) {\n    SimpleDateFormat format=new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n    log.info(\"PullMessageTask_popMessage:\" + Thread.currentThread().getName() + \"-popDone at \"+ \",\"+ format.format(new Date())+ \" msgSize=\"+ (popMsg == null ? 0 : popMsg.getMessageId()));\n  }\n  if (popMsg == null) {\n    polling=true;\n    continue;\n  }\n}\n else {\n  if (setPolling(queueName)) {\n    if (debugLogOpen) {\n      log.info(\"PullMessageTask_setPolling:\" + Thread.currentThread().getName() + \" Polling!\");\n    }\n  }\n else {\n    continue;\n  }\n  do {\n    if (debugLogOpen) {\n      log.info(\"PullMessageTask_Keep_Polling\" + Thread.currentThread().getName() + \"KEEP Polling!\");\n    }\n    try {\n      popMsg=queue.popMessage(sleepSecondWhenNoData);\n    }\n catch (    ClientException e) {\n      if (debugLogOpen) {\n        log.info(\"PullMessageTask_Pop_Message:ClientException Refresh accessKey\" + e);\n      }\n      tokenObject=tokenGetter.getTokenByMessageType(messageType,queueName,mnsAccountEndpoint);\n      queue=tokenObject.getQueue();\n    }\ncatch (    ServiceException e) {\n      if (debugLogOpen) {\n        log.info(\"PullMessageTask_Pop_Message:ServiceException Refresh accessKey\" + e);\n      }\n      tokenObject=tokenGetter.getTokenByMessageType(messageType,queueName,mnsAccountEndpoint);\n      queue=tokenObject.getQueue();\n    }\ncatch (    Exception e) {\n      if (debugLogOpen) {\n        log.info(\"PullMessageTask_Pop_Message:Exception Happened when polling popMessage: \" + e);\n      }\n    }\n  }\n while (popMsg == null && isRunning);\n  clearPolling(queueName);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 197,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3158,
        "startLineNumber" : 130,
        "startColumnNumber" : 8,
        "endLineNumber" : 235,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\nsynchronized (lockObj) {\n    Boolean p=sPollingMap.get(queueName);\n    if (p != null && p) {\n      try {\n        if (debugLogOpen) {\n          log.info(\"PullMessageTask_sleep:\" + Thread.currentThread().getName() + \" Have a nice sleep!\");\n        }\n        polling=false;\n        lockObj.wait();\n      }\n catch (      InterruptedException e) {\n        if (debugLogOpen) {\n          log.info(\"PullMessageTask_Interrupted!\" + Thread.currentThread().getName() + \" QueueName is \"+ queueName);\n        }\n        continue;\n      }\n    }\n  }\n  TokenForAlicom tokenObject=tokenGetter.getTokenByMessageType(messageType,queueName,mnsAccountEndpoint);\n  CloudQueue queue=tokenObject.getQueue();\n  Message popMsg=null;\n  if (!polling) {\n    popMsg=queue.popMessage();\n    if (debugLogOpen) {\n      SimpleDateFormat format=new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n      log.info(\"PullMessageTask_popMessage:\" + Thread.currentThread().getName() + \"-popDone at \"+ \",\"+ format.format(new Date())+ \" msgSize=\"+ (popMsg == null ? 0 : popMsg.getMessageId()));\n    }\n    if (popMsg == null) {\n      polling=true;\n      continue;\n    }\n  }\n else {\n    if (setPolling(queueName)) {\n      if (debugLogOpen) {\n        log.info(\"PullMessageTask_setPolling:\" + Thread.currentThread().getName() + \" Polling!\");\n      }\n    }\n else {\n      continue;\n    }\n    do {\n      if (debugLogOpen) {\n        log.info(\"PullMessageTask_Keep_Polling\" + Thread.currentThread().getName() + \"KEEP Polling!\");\n      }\n      try {\n        popMsg=queue.popMessage(sleepSecondWhenNoData);\n      }\n catch (      ClientException e) {\n        if (debugLogOpen) {\n          log.info(\"PullMessageTask_Pop_Message:ClientException Refresh accessKey\" + e);\n        }\n        tokenObject=tokenGetter.getTokenByMessageType(messageType,queueName,mnsAccountEndpoint);\n        queue=tokenObject.getQueue();\n      }\ncatch (      ServiceException e) {\n        if (debugLogOpen) {\n          log.info(\"PullMessageTask_Pop_Message:ServiceException Refresh accessKey\" + e);\n        }\n        tokenObject=tokenGetter.getTokenByMessageType(messageType,queueName,mnsAccountEndpoint);\n        queue=tokenObject.getQueue();\n      }\ncatch (      Exception e) {\n        if (debugLogOpen) {\n          log.info(\"PullMessageTask_Pop_Message:Exception Happened when polling popMessage: \" + e);\n        }\n      }\n    }\n while (popMsg == null && isRunning);\n    clearPolling(queueName);\n  }\n  boolean dealResult=messageListener.dealMessage(popMsg);\n  if (dealResult) {\n    if (debugLogOpen) {\n      log.info(\"PullMessageTask_Deal_Message:\" + Thread.currentThread().getName() + \"deleteMessage \"+ popMsg.getMessageId());\n    }\n    queue.deleteMessage(popMsg.getReceiptHandle());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 326,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4770,
        "startLineNumber" : 130,
        "startColumnNumber" : 4,
        "endLineNumber" : 283,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\nsynchronized (lockObj) {\n    Boolean p=sPollingMap.get(queueName);\n    if (p != null && p) {\n      try {\n        if (debugLogOpen) {\n          log.info(\"PullMessageTask_sleep:\" + Thread.currentThread().getName() + \" Have a nice sleep!\");\n        }\n        polling=false;\n        lockObj.wait();\n      }\n catch (      InterruptedException e) {\n        if (debugLogOpen) {\n          log.info(\"PullMessageTask_Interrupted!\" + Thread.currentThread().getName() + \" QueueName is \"+ queueName);\n        }\n        continue;\n      }\n    }\n  }\n  TokenForAlicom tokenObject=tokenGetter.getTokenByMessageType(messageType,queueName,mnsAccountEndpoint);\n  CloudQueue queue=tokenObject.getQueue();\n  Message popMsg=null;\n  if (!polling) {\n    popMsg=queue.popMessage();\n    if (debugLogOpen) {\n      SimpleDateFormat format=new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n      log.info(\"PullMessageTask_popMessage:\" + Thread.currentThread().getName() + \"-popDone at \"+ \",\"+ format.format(new Date())+ \" msgSize=\"+ (popMsg == null ? 0 : popMsg.getMessageId()));\n    }\n    if (popMsg == null) {\n      polling=true;\n      continue;\n    }\n  }\n else {\n    if (setPolling(queueName)) {\n      if (debugLogOpen) {\n        log.info(\"PullMessageTask_setPolling:\" + Thread.currentThread().getName() + \" Polling!\");\n      }\n    }\n else {\n      continue;\n    }\n    do {\n      if (debugLogOpen) {\n        log.info(\"PullMessageTask_Keep_Polling\" + Thread.currentThread().getName() + \"KEEP Polling!\");\n      }\n      try {\n        popMsg=queue.popMessage(sleepSecondWhenNoData);\n      }\n catch (      ClientException e) {\n        if (debugLogOpen) {\n          log.info(\"PullMessageTask_Pop_Message:ClientException Refresh accessKey\" + e);\n        }\n        tokenObject=tokenGetter.getTokenByMessageType(messageType,queueName,mnsAccountEndpoint);\n        queue=tokenObject.getQueue();\n      }\ncatch (      ServiceException e) {\n        if (debugLogOpen) {\n          log.info(\"PullMessageTask_Pop_Message:ServiceException Refresh accessKey\" + e);\n        }\n        tokenObject=tokenGetter.getTokenByMessageType(messageType,queueName,mnsAccountEndpoint);\n        queue=tokenObject.getQueue();\n      }\ncatch (      Exception e) {\n        if (debugLogOpen) {\n          log.info(\"PullMessageTask_Pop_Message:Exception Happened when polling popMessage: \" + e);\n        }\n      }\n    }\n while (popMsg == null && isRunning);\n    clearPolling(queueName);\n  }\n  boolean dealResult=messageListener.dealMessage(popMsg);\n  if (dealResult) {\n    if (debugLogOpen) {\n      log.info(\"PullMessageTask_Deal_Message:\" + Thread.currentThread().getName() + \"deleteMessage \"+ popMsg.getMessageId());\n    }\n    queue.deleteMessage(popMsg.getReceiptHandle());\n  }\n}\n catch (ClientException e) {\n  log.error(\"PullMessageTask_execute_error,messageType:\" + messageType + \",queueName:\"+ queueName,e);\n  break;\n}\ncatch (ServiceException e) {\n  if (e.getErrorCode().equals(\"AccessDenied\")) {\n    log.error(\"PullMessageTask_execute_error,messageType:\" + messageType + \",queueName:\"+ queueName+ \",please check messageType and queueName\",e);\n  }\n else {\n    log.error(\"PullMessageTask_execute_error,messageType:\" + messageType + \",queueName:\"+ queueName,e);\n  }\n  break;\n}\ncatch (com.aliyuncs.exceptions.ClientException e) {\n  if (e.getErrCode().equals(\"InvalidAccessKeyId.NotFound\")) {\n    log.error(\"PullMessageTask_execute_error,messageType:\" + messageType + \",queueName:\"+ queueName+ \",please check AccessKeyId\",e);\n  }\n  if (e.getErrCode().equals(\"SignatureDoesNotMatch\")) {\n    log.error(\"PullMessageTask_execute_error,messageType:\" + messageType + \",queueName:\"+ queueName+ \",please check AccessKeySecret\",e);\n  }\n else {\n    log.error(\"PullMessageTask_execute_error,messageType:\" + messageType + \",queueName:\"+ queueName,e);\n  }\n  break;\n}\ncatch (Exception e) {\n  log.error(\"PullMessageTask_execute_error,messageType:\" + messageType + \",queueName:\"+ queueName,e);\n  try {\n    Thread.sleep(sleepSecondWhenNoData);\n  }\n catch (  InterruptedException e1) {\n    log.error(\"PullMessageTask_execute_error,messageType:\" + messageType + \",queueName:\"+ queueName,e);\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 482,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 4781,
        "startLineNumber" : 129,
        "startColumnNumber" : 21,
        "endLineNumber" : 284,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  try {\nsynchronized (lockObj) {\n      Boolean p=sPollingMap.get(queueName);\n      if (p != null && p) {\n        try {\n          if (debugLogOpen) {\n            log.info(\"PullMessageTask_sleep:\" + Thread.currentThread().getName() + \" Have a nice sleep!\");\n          }\n          polling=false;\n          lockObj.wait();\n        }\n catch (        InterruptedException e) {\n          if (debugLogOpen) {\n            log.info(\"PullMessageTask_Interrupted!\" + Thread.currentThread().getName() + \" QueueName is \"+ queueName);\n          }\n          continue;\n        }\n      }\n    }\n    TokenForAlicom tokenObject=tokenGetter.getTokenByMessageType(messageType,queueName,mnsAccountEndpoint);\n    CloudQueue queue=tokenObject.getQueue();\n    Message popMsg=null;\n    if (!polling) {\n      popMsg=queue.popMessage();\n      if (debugLogOpen) {\n        SimpleDateFormat format=new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n        log.info(\"PullMessageTask_popMessage:\" + Thread.currentThread().getName() + \"-popDone at \"+ \",\"+ format.format(new Date())+ \" msgSize=\"+ (popMsg == null ? 0 : popMsg.getMessageId()));\n      }\n      if (popMsg == null) {\n        polling=true;\n        continue;\n      }\n    }\n else {\n      if (setPolling(queueName)) {\n        if (debugLogOpen) {\n          log.info(\"PullMessageTask_setPolling:\" + Thread.currentThread().getName() + \" Polling!\");\n        }\n      }\n else {\n        continue;\n      }\n      do {\n        if (debugLogOpen) {\n          log.info(\"PullMessageTask_Keep_Polling\" + Thread.currentThread().getName() + \"KEEP Polling!\");\n        }\n        try {\n          popMsg=queue.popMessage(sleepSecondWhenNoData);\n        }\n catch (        ClientException e) {\n          if (debugLogOpen) {\n            log.info(\"PullMessageTask_Pop_Message:ClientException Refresh accessKey\" + e);\n          }\n          tokenObject=tokenGetter.getTokenByMessageType(messageType,queueName,mnsAccountEndpoint);\n          queue=tokenObject.getQueue();\n        }\ncatch (        ServiceException e) {\n          if (debugLogOpen) {\n            log.info(\"PullMessageTask_Pop_Message:ServiceException Refresh accessKey\" + e);\n          }\n          tokenObject=tokenGetter.getTokenByMessageType(messageType,queueName,mnsAccountEndpoint);\n          queue=tokenObject.getQueue();\n        }\ncatch (        Exception e) {\n          if (debugLogOpen) {\n            log.info(\"PullMessageTask_Pop_Message:Exception Happened when polling popMessage: \" + e);\n          }\n        }\n      }\n while (popMsg == null && isRunning);\n      clearPolling(queueName);\n    }\n    boolean dealResult=messageListener.dealMessage(popMsg);\n    if (dealResult) {\n      if (debugLogOpen) {\n        log.info(\"PullMessageTask_Deal_Message:\" + Thread.currentThread().getName() + \"deleteMessage \"+ popMsg.getMessageId());\n      }\n      queue.deleteMessage(popMsg.getReceiptHandle());\n    }\n  }\n catch (  ClientException e) {\n    log.error(\"PullMessageTask_execute_error,messageType:\" + messageType + \",queueName:\"+ queueName,e);\n    break;\n  }\ncatch (  ServiceException e) {\n    if (e.getErrorCode().equals(\"AccessDenied\")) {\n      log.error(\"PullMessageTask_execute_error,messageType:\" + messageType + \",queueName:\"+ queueName+ \",please check messageType and queueName\",e);\n    }\n else {\n      log.error(\"PullMessageTask_execute_error,messageType:\" + messageType + \",queueName:\"+ queueName,e);\n    }\n    break;\n  }\ncatch (  com.aliyuncs.exceptions.ClientException e) {\n    if (e.getErrCode().equals(\"InvalidAccessKeyId.NotFound\")) {\n      log.error(\"PullMessageTask_execute_error,messageType:\" + messageType + \",queueName:\"+ queueName+ \",please check AccessKeyId\",e);\n    }\n    if (e.getErrCode().equals(\"SignatureDoesNotMatch\")) {\n      log.error(\"PullMessageTask_execute_error,messageType:\" + messageType + \",queueName:\"+ queueName+ \",please check AccessKeySecret\",e);\n    }\n else {\n      log.error(\"PullMessageTask_execute_error,messageType:\" + messageType + \",queueName:\"+ queueName,e);\n    }\n    break;\n  }\ncatch (  Exception e) {\n    log.error(\"PullMessageTask_execute_error,messageType:\" + messageType + \",queueName:\"+ queueName,e);\n    try {\n      Thread.sleep(sleepSecondWhenNoData);\n    }\n catch (    InterruptedException e1) {\n      log.error(\"PullMessageTask_execute_error,messageType:\" + messageType + \",queueName:\"+ queueName,e);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 483,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4799,
        "startLineNumber" : 129,
        "startColumnNumber" : 3,
        "endLineNumber" : 284,
        "endColumnNumber" : 4
      },
      "nodeContext" : "while (isRunning) {\n  try {\nsynchronized (lockObj) {\n      Boolean p=sPollingMap.get(queueName);\n      if (p != null && p) {\n        try {\n          if (debugLogOpen) {\n            log.info(\"PullMessageTask_sleep:\" + Thread.currentThread().getName() + \" Have a nice sleep!\");\n          }\n          polling=false;\n          lockObj.wait();\n        }\n catch (        InterruptedException e) {\n          if (debugLogOpen) {\n            log.info(\"PullMessageTask_Interrupted!\" + Thread.currentThread().getName() + \" QueueName is \"+ queueName);\n          }\n          continue;\n        }\n      }\n    }\n    TokenForAlicom tokenObject=tokenGetter.getTokenByMessageType(messageType,queueName,mnsAccountEndpoint);\n    CloudQueue queue=tokenObject.getQueue();\n    Message popMsg=null;\n    if (!polling) {\n      popMsg=queue.popMessage();\n      if (debugLogOpen) {\n        SimpleDateFormat format=new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n        log.info(\"PullMessageTask_popMessage:\" + Thread.currentThread().getName() + \"-popDone at \"+ \",\"+ format.format(new Date())+ \" msgSize=\"+ (popMsg == null ? 0 : popMsg.getMessageId()));\n      }\n      if (popMsg == null) {\n        polling=true;\n        continue;\n      }\n    }\n else {\n      if (setPolling(queueName)) {\n        if (debugLogOpen) {\n          log.info(\"PullMessageTask_setPolling:\" + Thread.currentThread().getName() + \" Polling!\");\n        }\n      }\n else {\n        continue;\n      }\n      do {\n        if (debugLogOpen) {\n          log.info(\"PullMessageTask_Keep_Polling\" + Thread.currentThread().getName() + \"KEEP Polling!\");\n        }\n        try {\n          popMsg=queue.popMessage(sleepSecondWhenNoData);\n        }\n catch (        ClientException e) {\n          if (debugLogOpen) {\n            log.info(\"PullMessageTask_Pop_Message:ClientException Refresh accessKey\" + e);\n          }\n          tokenObject=tokenGetter.getTokenByMessageType(messageType,queueName,mnsAccountEndpoint);\n          queue=tokenObject.getQueue();\n        }\ncatch (        ServiceException e) {\n          if (debugLogOpen) {\n            log.info(\"PullMessageTask_Pop_Message:ServiceException Refresh accessKey\" + e);\n          }\n          tokenObject=tokenGetter.getTokenByMessageType(messageType,queueName,mnsAccountEndpoint);\n          queue=tokenObject.getQueue();\n        }\ncatch (        Exception e) {\n          if (debugLogOpen) {\n            log.info(\"PullMessageTask_Pop_Message:Exception Happened when polling popMessage: \" + e);\n          }\n        }\n      }\n while (popMsg == null && isRunning);\n      clearPolling(queueName);\n    }\n    boolean dealResult=messageListener.dealMessage(popMsg);\n    if (dealResult) {\n      if (debugLogOpen) {\n        log.info(\"PullMessageTask_Deal_Message:\" + Thread.currentThread().getName() + \"deleteMessage \"+ popMsg.getMessageId());\n      }\n      queue.deleteMessage(popMsg.getReceiptHandle());\n    }\n  }\n catch (  ClientException e) {\n    log.error(\"PullMessageTask_execute_error,messageType:\" + messageType + \",queueName:\"+ queueName,e);\n    break;\n  }\ncatch (  ServiceException e) {\n    if (e.getErrorCode().equals(\"AccessDenied\")) {\n      log.error(\"PullMessageTask_execute_error,messageType:\" + messageType + \",queueName:\"+ queueName+ \",please check messageType and queueName\",e);\n    }\n else {\n      log.error(\"PullMessageTask_execute_error,messageType:\" + messageType + \",queueName:\"+ queueName,e);\n    }\n    break;\n  }\ncatch (  com.aliyuncs.exceptions.ClientException e) {\n    if (e.getErrCode().equals(\"InvalidAccessKeyId.NotFound\")) {\n      log.error(\"PullMessageTask_execute_error,messageType:\" + messageType + \",queueName:\"+ queueName+ \",please check AccessKeyId\",e);\n    }\n    if (e.getErrCode().equals(\"SignatureDoesNotMatch\")) {\n      log.error(\"PullMessageTask_execute_error,messageType:\" + messageType + \",queueName:\"+ queueName+ \",please check AccessKeySecret\",e);\n    }\n else {\n      log.error(\"PullMessageTask_execute_error,messageType:\" + messageType + \",queueName:\"+ queueName,e);\n    }\n    break;\n  }\ncatch (  Exception e) {\n    log.error(\"PullMessageTask_execute_error,messageType:\" + messageType + \",queueName:\"+ queueName,e);\n    try {\n      Thread.sleep(sleepSecondWhenNoData);\n    }\n catch (    InterruptedException e1) {\n      log.error(\"PullMessageTask_execute_error,messageType:\" + messageType + \",queueName:\"+ queueName,e);\n    }\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 485,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4838,
        "startLineNumber" : 126,
        "startColumnNumber" : 20,
        "endLineNumber" : 286,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  boolean polling=false;\n  while (isRunning) {\n    try {\nsynchronized (lockObj) {\n        Boolean p=sPollingMap.get(queueName);\n        if (p != null && p) {\n          try {\n            if (debugLogOpen) {\n              log.info(\"PullMessageTask_sleep:\" + Thread.currentThread().getName() + \" Have a nice sleep!\");\n            }\n            polling=false;\n            lockObj.wait();\n          }\n catch (          InterruptedException e) {\n            if (debugLogOpen) {\n              log.info(\"PullMessageTask_Interrupted!\" + Thread.currentThread().getName() + \" QueueName is \"+ queueName);\n            }\n            continue;\n          }\n        }\n      }\n      TokenForAlicom tokenObject=tokenGetter.getTokenByMessageType(messageType,queueName,mnsAccountEndpoint);\n      CloudQueue queue=tokenObject.getQueue();\n      Message popMsg=null;\n      if (!polling) {\n        popMsg=queue.popMessage();\n        if (debugLogOpen) {\n          SimpleDateFormat format=new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n          log.info(\"PullMessageTask_popMessage:\" + Thread.currentThread().getName() + \"-popDone at \"+ \",\"+ format.format(new Date())+ \" msgSize=\"+ (popMsg == null ? 0 : popMsg.getMessageId()));\n        }\n        if (popMsg == null) {\n          polling=true;\n          continue;\n        }\n      }\n else {\n        if (setPolling(queueName)) {\n          if (debugLogOpen) {\n            log.info(\"PullMessageTask_setPolling:\" + Thread.currentThread().getName() + \" Polling!\");\n          }\n        }\n else {\n          continue;\n        }\n        do {\n          if (debugLogOpen) {\n            log.info(\"PullMessageTask_Keep_Polling\" + Thread.currentThread().getName() + \"KEEP Polling!\");\n          }\n          try {\n            popMsg=queue.popMessage(sleepSecondWhenNoData);\n          }\n catch (          ClientException e) {\n            if (debugLogOpen) {\n              log.info(\"PullMessageTask_Pop_Message:ClientException Refresh accessKey\" + e);\n            }\n            tokenObject=tokenGetter.getTokenByMessageType(messageType,queueName,mnsAccountEndpoint);\n            queue=tokenObject.getQueue();\n          }\ncatch (          ServiceException e) {\n            if (debugLogOpen) {\n              log.info(\"PullMessageTask_Pop_Message:ServiceException Refresh accessKey\" + e);\n            }\n            tokenObject=tokenGetter.getTokenByMessageType(messageType,queueName,mnsAccountEndpoint);\n            queue=tokenObject.getQueue();\n          }\ncatch (          Exception e) {\n            if (debugLogOpen) {\n              log.info(\"PullMessageTask_Pop_Message:Exception Happened when polling popMessage: \" + e);\n            }\n          }\n        }\n while (popMsg == null && isRunning);\n        clearPolling(queueName);\n      }\n      boolean dealResult=messageListener.dealMessage(popMsg);\n      if (dealResult) {\n        if (debugLogOpen) {\n          log.info(\"PullMessageTask_Deal_Message:\" + Thread.currentThread().getName() + \"deleteMessage \"+ popMsg.getMessageId());\n        }\n        queue.deleteMessage(popMsg.getReceiptHandle());\n      }\n    }\n catch (    ClientException e) {\n      log.error(\"PullMessageTask_execute_error,messageType:\" + messageType + \",queueName:\"+ queueName,e);\n      break;\n    }\ncatch (    ServiceException e) {\n      if (e.getErrorCode().equals(\"AccessDenied\")) {\n        log.error(\"PullMessageTask_execute_error,messageType:\" + messageType + \",queueName:\"+ queueName+ \",please check messageType and queueName\",e);\n      }\n else {\n        log.error(\"PullMessageTask_execute_error,messageType:\" + messageType + \",queueName:\"+ queueName,e);\n      }\n      break;\n    }\ncatch (    com.aliyuncs.exceptions.ClientException e) {\n      if (e.getErrCode().equals(\"InvalidAccessKeyId.NotFound\")) {\n        log.error(\"PullMessageTask_execute_error,messageType:\" + messageType + \",queueName:\"+ queueName+ \",please check AccessKeyId\",e);\n      }\n      if (e.getErrCode().equals(\"SignatureDoesNotMatch\")) {\n        log.error(\"PullMessageTask_execute_error,messageType:\" + messageType + \",queueName:\"+ queueName+ \",please check AccessKeySecret\",e);\n      }\n else {\n        log.error(\"PullMessageTask_execute_error,messageType:\" + messageType + \",queueName:\"+ queueName,e);\n      }\n      break;\n    }\ncatch (    Exception e) {\n      log.error(\"PullMessageTask_execute_error,messageType:\" + messageType + \",queueName:\"+ queueName,e);\n      try {\n        Thread.sleep(sleepSecondWhenNoData);\n      }\n catch (      InterruptedException e1) {\n        log.error(\"PullMessageTask_execute_error,messageType:\" + messageType + \",queueName:\"+ queueName,e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 491,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4868,
        "startLineNumber" : 125,
        "startColumnNumber" : 2,
        "endLineNumber" : 286,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public void run(){\n  boolean polling=false;\n  while (isRunning) {\n    try {\nsynchronized (lockObj) {\n        Boolean p=sPollingMap.get(queueName);\n        if (p != null && p) {\n          try {\n            if (debugLogOpen) {\n              log.info(\"PullMessageTask_sleep:\" + Thread.currentThread().getName() + \" Have a nice sleep!\");\n            }\n            polling=false;\n            lockObj.wait();\n          }\n catch (          InterruptedException e) {\n            if (debugLogOpen) {\n              log.info(\"PullMessageTask_Interrupted!\" + Thread.currentThread().getName() + \" QueueName is \"+ queueName);\n            }\n            continue;\n          }\n        }\n      }\n      TokenForAlicom tokenObject=tokenGetter.getTokenByMessageType(messageType,queueName,mnsAccountEndpoint);\n      CloudQueue queue=tokenObject.getQueue();\n      Message popMsg=null;\n      if (!polling) {\n        popMsg=queue.popMessage();\n        if (debugLogOpen) {\n          SimpleDateFormat format=new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n          log.info(\"PullMessageTask_popMessage:\" + Thread.currentThread().getName() + \"-popDone at \"+ \",\"+ format.format(new Date())+ \" msgSize=\"+ (popMsg == null ? 0 : popMsg.getMessageId()));\n        }\n        if (popMsg == null) {\n          polling=true;\n          continue;\n        }\n      }\n else {\n        if (setPolling(queueName)) {\n          if (debugLogOpen) {\n            log.info(\"PullMessageTask_setPolling:\" + Thread.currentThread().getName() + \" Polling!\");\n          }\n        }\n else {\n          continue;\n        }\n        do {\n          if (debugLogOpen) {\n            log.info(\"PullMessageTask_Keep_Polling\" + Thread.currentThread().getName() + \"KEEP Polling!\");\n          }\n          try {\n            popMsg=queue.popMessage(sleepSecondWhenNoData);\n          }\n catch (          ClientException e) {\n            if (debugLogOpen) {\n              log.info(\"PullMessageTask_Pop_Message:ClientException Refresh accessKey\" + e);\n            }\n            tokenObject=tokenGetter.getTokenByMessageType(messageType,queueName,mnsAccountEndpoint);\n            queue=tokenObject.getQueue();\n          }\ncatch (          ServiceException e) {\n            if (debugLogOpen) {\n              log.info(\"PullMessageTask_Pop_Message:ServiceException Refresh accessKey\" + e);\n            }\n            tokenObject=tokenGetter.getTokenByMessageType(messageType,queueName,mnsAccountEndpoint);\n            queue=tokenObject.getQueue();\n          }\ncatch (          Exception e) {\n            if (debugLogOpen) {\n              log.info(\"PullMessageTask_Pop_Message:Exception Happened when polling popMessage: \" + e);\n            }\n          }\n        }\n while (popMsg == null && isRunning);\n        clearPolling(queueName);\n      }\n      boolean dealResult=messageListener.dealMessage(popMsg);\n      if (dealResult) {\n        if (debugLogOpen) {\n          log.info(\"PullMessageTask_Deal_Message:\" + Thread.currentThread().getName() + \"deleteMessage \"+ popMsg.getMessageId());\n        }\n        queue.deleteMessage(popMsg.getReceiptHandle());\n      }\n    }\n catch (    ClientException e) {\n      log.error(\"PullMessageTask_execute_error,messageType:\" + messageType + \",queueName:\"+ queueName,e);\n      break;\n    }\ncatch (    ServiceException e) {\n      if (e.getErrorCode().equals(\"AccessDenied\")) {\n        log.error(\"PullMessageTask_execute_error,messageType:\" + messageType + \",queueName:\"+ queueName+ \",please check messageType and queueName\",e);\n      }\n else {\n        log.error(\"PullMessageTask_execute_error,messageType:\" + messageType + \",queueName:\"+ queueName,e);\n      }\n      break;\n    }\ncatch (    com.aliyuncs.exceptions.ClientException e) {\n      if (e.getErrCode().equals(\"InvalidAccessKeyId.NotFound\")) {\n        log.error(\"PullMessageTask_execute_error,messageType:\" + messageType + \",queueName:\"+ queueName+ \",please check AccessKeyId\",e);\n      }\n      if (e.getErrCode().equals(\"SignatureDoesNotMatch\")) {\n        log.error(\"PullMessageTask_execute_error,messageType:\" + messageType + \",queueName:\"+ queueName+ \",please check AccessKeySecret\",e);\n      }\n else {\n        log.error(\"PullMessageTask_execute_error,messageType:\" + messageType + \",queueName:\"+ queueName,e);\n      }\n      break;\n    }\ncatch (    Exception e) {\n      log.error(\"PullMessageTask_execute_error,messageType:\" + messageType + \",queueName:\"+ queueName,e);\n      try {\n        Thread.sleep(sleepSecondWhenNoData);\n      }\n catch (      InterruptedException e1) {\n        log.error(\"PullMessageTask_execute_error,messageType:\" + messageType + \",queueName:\"+ queueName,e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 497,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 203,
        "startLineNumber" : 163,
        "startColumnNumber" : 16,
        "endLineNumber" : 166,
        "endColumnNumber" : 55
      },
      "nodeContext" : "\"PullMessageTask_popMessage:\" + Thread.currentThread().getName() + \"-popDone at \"+ \",\"+ format.format(new Date())+ \" msgSize=\"+ (popMsg == null ? 0 : popMsg.getMessageId())",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 25,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 29,
    "startLineNumber" : 163,
    "startColumnNumber" : 16,
    "endLineNumber" : 163,
    "endColumnNumber" : 45
  } ],
  "layoutRelationDataList" : [ ]
}