{
  "id" : 290,
  "expression" : "value",
  "projectName" : "facebook@stetho",
  "commitID" : "fee68519d93899dc5cfe6b992f56916a03b279f2",
  "filePath" : "/stetho/src/main/java/com/facebook/stetho/inspector/elements/Descriptor.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "value",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 94,
      "startColumnNumber" : 31,
      "endLineNumber" : 94,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 94,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 37
      },
      "nodeContext" : "keyValuePairs.put(key,value)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 94,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 38
      },
      "nodeContext" : "keyValuePairs.put(key,value);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 93,
        "startColumnNumber" : 46,
        "endLineNumber" : 95,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  keyValuePairs.put(key,value);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 122,
        "startLineNumber" : 93,
        "startColumnNumber" : 13,
        "endLineNumber" : 97,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (c == ' ' && !isInsideQuotes) {\n  keyValuePairs.put(key,value);\n}\n else {\n  buffer.append(c);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 302,
        "startLineNumber" : 87,
        "startColumnNumber" : 13,
        "endLineNumber" : 97,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (c == '\\\"') {\n  if (isInsideQuotes) {\n    value=buffer.toString();\n    buffer.setLength(0);\n  }\n  isInsideQuotes=!isInsideQuotes;\n}\n else if (c == ' ' && !isInsideQuotes) {\n  keyValuePairs.put(key,value);\n}\n else {\n  buffer.append(c);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 44,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 393,
        "startLineNumber" : 84,
        "startColumnNumber" : 6,
        "endLineNumber" : 97,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (c == '=') {\n  key=buffer.toString();\n  buffer.setLength(0);\n}\n else if (c == '\\\"') {\n  if (isInsideQuotes) {\n    value=buffer.toString();\n    buffer.setLength(0);\n  }\n  isInsideQuotes=!isInsideQuotes;\n}\n else if (c == ' ' && !isInsideQuotes) {\n  keyValuePairs.put(key,value);\n}\n else {\n  buffer.append(c);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 60,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 444,
        "startLineNumber" : 82,
        "startColumnNumber" : 51,
        "endLineNumber" : 98,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final char c=text.charAt(i);\n  if (c == '=') {\n    key=buffer.toString();\n    buffer.setLength(0);\n  }\n else   if (c == '\\\"') {\n    if (isInsideQuotes) {\n      value=buffer.toString();\n      buffer.setLength(0);\n    }\n    isInsideQuotes=!isInsideQuotes;\n  }\n else   if (c == ' ' && !isInsideQuotes) {\n    keyValuePairs.put(key,value);\n  }\n else {\n    buffer.append(c);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 70,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 491,
        "startLineNumber" : 82,
        "startColumnNumber" : 4,
        "endLineNumber" : 98,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0, N=text.length(); i < N; ++i) {\n  final char c=text.charAt(i);\n  if (c == '=') {\n    key=buffer.toString();\n    buffer.setLength(0);\n  }\n else   if (c == '\\\"') {\n    if (isInsideQuotes) {\n      value=buffer.toString();\n      buffer.setLength(0);\n    }\n    isInsideQuotes=!isInsideQuotes;\n  }\n else   if (c == ' ' && !isInsideQuotes) {\n    keyValuePairs.put(key,value);\n  }\n else {\n    buffer.append(c);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 86,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 801,
        "startLineNumber" : 76,
        "startColumnNumber" : 80,
        "endLineNumber" : 103,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String value=\"\";\n  String key=\"\";\n  StringBuilder buffer=new StringBuilder();\n  Map<String,String> keyValuePairs=new HashMap<>();\n  boolean isInsideQuotes=false;\n  for (int i=0, N=text.length(); i < N; ++i) {\n    final char c=text.charAt(i);\n    if (c == '=') {\n      key=buffer.toString();\n      buffer.setLength(0);\n    }\n else     if (c == '\\\"') {\n      if (isInsideQuotes) {\n        value=buffer.toString();\n        buffer.setLength(0);\n      }\n      isInsideQuotes=!isInsideQuotes;\n    }\n else     if (c == ' ' && !isInsideQuotes) {\n      keyValuePairs.put(key,value);\n    }\n else {\n      buffer.append(c);\n    }\n  }\n  if (!key.isEmpty() && !value.isEmpty()) {\n    keyValuePairs.put(key,value);\n  }\n  return keyValuePairs;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 145,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1154,
        "startLineNumber" : 70,
        "startColumnNumber" : 2,
        "endLineNumber" : 103,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Parses the text argument text from DOM.setAttributeAsText() Text will be in the format \"attribute1=\\\"Value 1\\\" attribute2=\\\"Value2\\\"\"\n * @param text the text argument to be parsed\n * @return a map of attributes to their respective values to be set.\n */\nprotected static Map<String,String> parseSetAttributesAsTextArg(String text){\n  String value=\"\";\n  String key=\"\";\n  StringBuilder buffer=new StringBuilder();\n  Map<String,String> keyValuePairs=new HashMap<>();\n  boolean isInsideQuotes=false;\n  for (int i=0, N=text.length(); i < N; ++i) {\n    final char c=text.charAt(i);\n    if (c == '=') {\n      key=buffer.toString();\n      buffer.setLength(0);\n    }\n else     if (c == '\\\"') {\n      if (isInsideQuotes) {\n        value=buffer.toString();\n        buffer.setLength(0);\n      }\n      isInsideQuotes=!isInsideQuotes;\n    }\n else     if (c == ' ' && !isInsideQuotes) {\n      keyValuePairs.put(key,value);\n    }\n else {\n      buffer.append(c);\n    }\n  }\n  if (!key.isEmpty() && !value.isEmpty()) {\n    keyValuePairs.put(key,value);\n  }\n  return keyValuePairs;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 161,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 94,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 38
      },
      "nodeContext" : "keyValuePairs.put(key,value);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "value",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 99,
      "startColumnNumber" : 27,
      "endLineNumber" : 99,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 99,
        "startColumnNumber" : 27,
        "endLineNumber" : 99,
        "endColumnNumber" : 42
      },
      "nodeContext" : "value.isEmpty()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 99,
        "startColumnNumber" : 26,
        "endLineNumber" : 99,
        "endColumnNumber" : 42
      },
      "nodeContext" : "!value.isEmpty()",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 99,
        "startColumnNumber" : 8,
        "endLineNumber" : 99,
        "endColumnNumber" : 42
      },
      "nodeContext" : "!key.isEmpty() && !value.isEmpty()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 99,
        "startColumnNumber" : 4,
        "endLineNumber" : 101,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!key.isEmpty() && !value.isEmpty()) {\n  keyValuePairs.put(key,value);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 801,
        "startLineNumber" : 76,
        "startColumnNumber" : 80,
        "endLineNumber" : 103,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String value=\"\";\n  String key=\"\";\n  StringBuilder buffer=new StringBuilder();\n  Map<String,String> keyValuePairs=new HashMap<>();\n  boolean isInsideQuotes=false;\n  for (int i=0, N=text.length(); i < N; ++i) {\n    final char c=text.charAt(i);\n    if (c == '=') {\n      key=buffer.toString();\n      buffer.setLength(0);\n    }\n else     if (c == '\\\"') {\n      if (isInsideQuotes) {\n        value=buffer.toString();\n        buffer.setLength(0);\n      }\n      isInsideQuotes=!isInsideQuotes;\n    }\n else     if (c == ' ' && !isInsideQuotes) {\n      keyValuePairs.put(key,value);\n    }\n else {\n      buffer.append(c);\n    }\n  }\n  if (!key.isEmpty() && !value.isEmpty()) {\n    keyValuePairs.put(key,value);\n  }\n  return keyValuePairs;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 145,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1154,
        "startLineNumber" : 70,
        "startColumnNumber" : 2,
        "endLineNumber" : 103,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Parses the text argument text from DOM.setAttributeAsText() Text will be in the format \"attribute1=\\\"Value 1\\\" attribute2=\\\"Value2\\\"\"\n * @param text the text argument to be parsed\n * @return a map of attributes to their respective values to be set.\n */\nprotected static Map<String,String> parseSetAttributesAsTextArg(String text){\n  String value=\"\";\n  String key=\"\";\n  StringBuilder buffer=new StringBuilder();\n  Map<String,String> keyValuePairs=new HashMap<>();\n  boolean isInsideQuotes=false;\n  for (int i=0, N=text.length(); i < N; ++i) {\n    final char c=text.charAt(i);\n    if (c == '=') {\n      key=buffer.toString();\n      buffer.setLength(0);\n    }\n else     if (c == '\\\"') {\n      if (isInsideQuotes) {\n        value=buffer.toString();\n        buffer.setLength(0);\n      }\n      isInsideQuotes=!isInsideQuotes;\n    }\n else     if (c == ' ' && !isInsideQuotes) {\n      keyValuePairs.put(key,value);\n    }\n else {\n      buffer.append(c);\n    }\n  }\n  if (!key.isEmpty() && !value.isEmpty()) {\n    keyValuePairs.put(key,value);\n  }\n  return keyValuePairs;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 161,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 99,
        "startColumnNumber" : 8,
        "endLineNumber" : 99,
        "endColumnNumber" : 42
      },
      "nodeContext" : "!key.isEmpty() && !value.isEmpty()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "value",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 100,
      "startColumnNumber" : 29,
      "endLineNumber" : 100,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 100,
        "startColumnNumber" : 6,
        "endLineNumber" : 100,
        "endColumnNumber" : 35
      },
      "nodeContext" : "keyValuePairs.put(key,value)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 100,
        "startColumnNumber" : 6,
        "endLineNumber" : 100,
        "endColumnNumber" : 36
      },
      "nodeContext" : "keyValuePairs.put(key,value);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 99,
        "startColumnNumber" : 44,
        "endLineNumber" : 101,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  keyValuePairs.put(key,value);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 99,
        "startColumnNumber" : 4,
        "endLineNumber" : 101,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!key.isEmpty() && !value.isEmpty()) {\n  keyValuePairs.put(key,value);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 801,
        "startLineNumber" : 76,
        "startColumnNumber" : 80,
        "endLineNumber" : 103,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String value=\"\";\n  String key=\"\";\n  StringBuilder buffer=new StringBuilder();\n  Map<String,String> keyValuePairs=new HashMap<>();\n  boolean isInsideQuotes=false;\n  for (int i=0, N=text.length(); i < N; ++i) {\n    final char c=text.charAt(i);\n    if (c == '=') {\n      key=buffer.toString();\n      buffer.setLength(0);\n    }\n else     if (c == '\\\"') {\n      if (isInsideQuotes) {\n        value=buffer.toString();\n        buffer.setLength(0);\n      }\n      isInsideQuotes=!isInsideQuotes;\n    }\n else     if (c == ' ' && !isInsideQuotes) {\n      keyValuePairs.put(key,value);\n    }\n else {\n      buffer.append(c);\n    }\n  }\n  if (!key.isEmpty() && !value.isEmpty()) {\n    keyValuePairs.put(key,value);\n  }\n  return keyValuePairs;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 145,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1154,
        "startLineNumber" : 70,
        "startColumnNumber" : 2,
        "endLineNumber" : 103,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Parses the text argument text from DOM.setAttributeAsText() Text will be in the format \"attribute1=\\\"Value 1\\\" attribute2=\\\"Value2\\\"\"\n * @param text the text argument to be parsed\n * @return a map of attributes to their respective values to be set.\n */\nprotected static Map<String,String> parseSetAttributesAsTextArg(String text){\n  String value=\"\";\n  String key=\"\";\n  StringBuilder buffer=new StringBuilder();\n  Map<String,String> keyValuePairs=new HashMap<>();\n  boolean isInsideQuotes=false;\n  for (int i=0, N=text.length(); i < N; ++i) {\n    final char c=text.charAt(i);\n    if (c == '=') {\n      key=buffer.toString();\n      buffer.setLength(0);\n    }\n else     if (c == '\\\"') {\n      if (isInsideQuotes) {\n        value=buffer.toString();\n        buffer.setLength(0);\n      }\n      isInsideQuotes=!isInsideQuotes;\n    }\n else     if (c == ' ' && !isInsideQuotes) {\n      keyValuePairs.put(key,value);\n    }\n else {\n      buffer.append(c);\n    }\n  }\n  if (!key.isEmpty() && !value.isEmpty()) {\n    keyValuePairs.put(key,value);\n  }\n  return keyValuePairs;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 161,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 100,
        "startColumnNumber" : 6,
        "endLineNumber" : 100,
        "endColumnNumber" : 36
      },
      "nodeContext" : "keyValuePairs.put(key,value);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 94,
    "startColumnNumber" : 31,
    "endLineNumber" : 94,
    "endColumnNumber" : 36
  }, {
    "charLength" : 5,
    "startLineNumber" : 99,
    "startColumnNumber" : 27,
    "endLineNumber" : 99,
    "endColumnNumber" : 32
  }, {
    "charLength" : 5,
    "startLineNumber" : 100,
    "startColumnNumber" : 29,
    "endLineNumber" : 100,
    "endColumnNumber" : 34
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  } ]
}