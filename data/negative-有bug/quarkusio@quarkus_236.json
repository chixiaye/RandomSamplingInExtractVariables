{
  "id" : 236,
  "expression" : "result",
  "projectName" : "quarkusio@quarkus",
  "commitID" : "2862b200ee266332150317795b9fe315be51d68b",
  "filePath" : "/independent-projects/resteasy-reactive/server/processor/src/main/java/org/jboss/resteasy/reactive/server/processor/generation/filters/FilterFeature.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "result",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 36,
      "startColumnNumber" : 21,
      "endLineNumber" : 36,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1959,
        "startLineNumber" : 36,
        "startColumnNumber" : 8,
        "endLineNumber" : 69,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (var i : result) {\n  generatedClasses.addAll(i.getGeneratedClasses());\n  if (i.isRequestFilter()) {\n    ResourceInterceptor<ContainerRequestFilter> request=scannedApplication.getResourceInterceptors().getContainerRequestFilters().create();\n    request.setClassName(i.generatedClassName);\n    request.setPriority(i.priority);\n    request.setNonBlockingRequired(i.nonBlocking);\n    request.setNameBindingNames(i.nameBindingNames);\n    if (i.isPreMatching()) {\n      scannedApplication.getResourceInterceptors().getContainerRequestFilters().addPreMatchInterceptor(request);\n    }\n else     if (!i.getNameBindingNames().isEmpty()) {\n      scannedApplication.getResourceInterceptors().getContainerRequestFilters().addNameRequestInterceptor(request);\n    }\n else {\n      scannedApplication.getResourceInterceptors().getContainerRequestFilters().addGlobalRequestInterceptor(request);\n    }\n  }\n else {\n    ResourceInterceptor<ContainerResponseFilter> request=scannedApplication.getResourceInterceptors().getContainerResponseFilters().create();\n    request.setClassName(i.generatedClassName);\n    request.setPriority(i.priority);\n    request.setNameBindingNames(i.nameBindingNames);\n    if (!i.getNameBindingNames().isEmpty()) {\n      scannedApplication.getResourceInterceptors().getContainerResponseFilters().addNameRequestInterceptor(request);\n    }\n else {\n      scannedApplication.getResourceInterceptors().getContainerResponseFilters().addGlobalRequestInterceptor(request);\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 167,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2255,
        "startLineNumber" : 32,
        "startColumnNumber" : 101,
        "endLineNumber" : 71,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<GeneratedClass> generatedClasses=new ArrayList<>();\n  List<FilterGeneration.GeneratedFilter> result=FilterGeneration.generate(application,unwrappableTypes,additionalBeanAnnotations);\n  for (  var i : result) {\n    generatedClasses.addAll(i.getGeneratedClasses());\n    if (i.isRequestFilter()) {\n      ResourceInterceptor<ContainerRequestFilter> request=scannedApplication.getResourceInterceptors().getContainerRequestFilters().create();\n      request.setClassName(i.generatedClassName);\n      request.setPriority(i.priority);\n      request.setNonBlockingRequired(i.nonBlocking);\n      request.setNameBindingNames(i.nameBindingNames);\n      if (i.isPreMatching()) {\n        scannedApplication.getResourceInterceptors().getContainerRequestFilters().addPreMatchInterceptor(request);\n      }\n else       if (!i.getNameBindingNames().isEmpty()) {\n        scannedApplication.getResourceInterceptors().getContainerRequestFilters().addNameRequestInterceptor(request);\n      }\n else {\n        scannedApplication.getResourceInterceptors().getContainerRequestFilters().addGlobalRequestInterceptor(request);\n      }\n    }\n else {\n      ResourceInterceptor<ContainerResponseFilter> request=scannedApplication.getResourceInterceptors().getContainerResponseFilters().create();\n      request.setClassName(i.generatedClassName);\n      request.setPriority(i.priority);\n      request.setNameBindingNames(i.nameBindingNames);\n      if (!i.getNameBindingNames().isEmpty()) {\n        scannedApplication.getResourceInterceptors().getContainerResponseFilters().addNameRequestInterceptor(request);\n      }\n else {\n        scannedApplication.getResourceInterceptors().getContainerResponseFilters().addGlobalRequestInterceptor(request);\n      }\n    }\n  }\n  return new FeatureScanResult(generatedClasses);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 201,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2366,
        "startLineNumber" : 31,
        "startColumnNumber" : 4,
        "endLineNumber" : 71,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public FeatureScanResult integrate(IndexView application,ScannedApplication scannedApplication){\n  List<GeneratedClass> generatedClasses=new ArrayList<>();\n  List<FilterGeneration.GeneratedFilter> result=FilterGeneration.generate(application,unwrappableTypes,additionalBeanAnnotations);\n  for (  var i : result) {\n    generatedClasses.addAll(i.getGeneratedClasses());\n    if (i.isRequestFilter()) {\n      ResourceInterceptor<ContainerRequestFilter> request=scannedApplication.getResourceInterceptors().getContainerRequestFilters().create();\n      request.setClassName(i.generatedClassName);\n      request.setPriority(i.priority);\n      request.setNonBlockingRequired(i.nonBlocking);\n      request.setNameBindingNames(i.nameBindingNames);\n      if (i.isPreMatching()) {\n        scannedApplication.getResourceInterceptors().getContainerRequestFilters().addPreMatchInterceptor(request);\n      }\n else       if (!i.getNameBindingNames().isEmpty()) {\n        scannedApplication.getResourceInterceptors().getContainerRequestFilters().addNameRequestInterceptor(request);\n      }\n else {\n        scannedApplication.getResourceInterceptors().getContainerRequestFilters().addGlobalRequestInterceptor(request);\n      }\n    }\n else {\n      ResourceInterceptor<ContainerResponseFilter> request=scannedApplication.getResourceInterceptors().getContainerResponseFilters().create();\n      request.setClassName(i.generatedClassName);\n      request.setPriority(i.priority);\n      request.setNameBindingNames(i.nameBindingNames);\n      if (!i.getNameBindingNames().isEmpty()) {\n        scannedApplication.getResourceInterceptors().getContainerResponseFilters().addNameRequestInterceptor(request);\n      }\n else {\n        scannedApplication.getResourceInterceptors().getContainerResponseFilters().addGlobalRequestInterceptor(request);\n      }\n    }\n  }\n  return new FeatureScanResult(generatedClasses);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 216,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1959,
        "startLineNumber" : 36,
        "startColumnNumber" : 8,
        "endLineNumber" : 69,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (var i : result) {\n  generatedClasses.addAll(i.getGeneratedClasses());\n  if (i.isRequestFilter()) {\n    ResourceInterceptor<ContainerRequestFilter> request=scannedApplication.getResourceInterceptors().getContainerRequestFilters().create();\n    request.setClassName(i.generatedClassName);\n    request.setPriority(i.priority);\n    request.setNonBlockingRequired(i.nonBlocking);\n    request.setNameBindingNames(i.nameBindingNames);\n    if (i.isPreMatching()) {\n      scannedApplication.getResourceInterceptors().getContainerRequestFilters().addPreMatchInterceptor(request);\n    }\n else     if (!i.getNameBindingNames().isEmpty()) {\n      scannedApplication.getResourceInterceptors().getContainerRequestFilters().addNameRequestInterceptor(request);\n    }\n else {\n      scannedApplication.getResourceInterceptors().getContainerRequestFilters().addGlobalRequestInterceptor(request);\n    }\n  }\n else {\n    ResourceInterceptor<ContainerResponseFilter> request=scannedApplication.getResourceInterceptors().getContainerResponseFilters().create();\n    request.setClassName(i.generatedClassName);\n    request.setPriority(i.priority);\n    request.setNameBindingNames(i.nameBindingNames);\n    if (!i.getNameBindingNames().isEmpty()) {\n      scannedApplication.getResourceInterceptors().getContainerResponseFilters().addNameRequestInterceptor(request);\n    }\n else {\n      scannedApplication.getResourceInterceptors().getContainerResponseFilters().addGlobalRequestInterceptor(request);\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 167,
      "astHeight" : 12
    },
    "tokenLength" : 1,
    "type" : "java.util.List<org.jboss.resteasy.reactive.server.processor.generation.filters.FilterGeneration.GeneratedFilter>"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 36,
    "startColumnNumber" : 21,
    "endLineNumber" : 36,
    "endColumnNumber" : 27
  } ],
  "layoutRelationDataList" : [ ]
}