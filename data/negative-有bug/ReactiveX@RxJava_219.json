{
  "id" : 219,
  "expression" : "iters < NITERS",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/test/java/io/reactivex/internal/operators/flowable/BufferUntilSubscriberTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "iters < NITERS",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 38,
      "startColumnNumber" : 28,
      "endLineNumber" : 38,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2153,
        "startLineNumber" : 38,
        "startColumnNumber" : 8,
        "endLineNumber" : 75,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int iters=0; iters < NITERS; iters++) {\n  final CountDownLatch innerLatch=new CountDownLatch(1);\n  final PublishProcessor<Void> s=PublishProcessor.create();\n  final AtomicBoolean completed=new AtomicBoolean();\n  Flowable.fromArray(numbers).takeUntil(s).window(50).flatMap(new Function<Flowable<Integer>,Publisher<Object>>(){\n    @Override public Publisher<Object> apply(    Flowable<Integer> integerObservable){\n      return integerObservable.subscribeOn(Schedulers.computation()).map(new Function<Integer,Object>(){\n        @Override public Object apply(        Integer integer){\n          if (integer >= 5 && completed.compareAndSet(false,true)) {\n            s.onComplete();\n          }\n          Math.pow(Math.random(),Math.random());\n          return integer * 2;\n        }\n      }\n);\n    }\n  }\n).toList().doOnNext(new Consumer<List<Object>>(){\n    @Override public void accept(    List<Object> integers){\n      counter.incrementAndGet();\n      latch.countDown();\n      innerLatch.countDown();\n    }\n  }\n).subscribe();\n  if (!innerLatch.await(30,TimeUnit.SECONDS))   Assert.fail(\"Failed inner latch wait, iteration \" + iters);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 206,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2671,
        "startLineNumber" : 31,
        "startColumnNumber" : 60,
        "endLineNumber" : 80,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final AtomicLong counter=new AtomicLong();\n  final Integer[] numbers=new Integer[5000];\n  for (int i=0; i < numbers.length; i++)   numbers[i]=i + 1;\n  final int NITERS=250;\n  final CountDownLatch latch=new CountDownLatch(NITERS);\n  for (int iters=0; iters < NITERS; iters++) {\n    final CountDownLatch innerLatch=new CountDownLatch(1);\n    final PublishProcessor<Void> s=PublishProcessor.create();\n    final AtomicBoolean completed=new AtomicBoolean();\n    Flowable.fromArray(numbers).takeUntil(s).window(50).flatMap(new Function<Flowable<Integer>,Publisher<Object>>(){\n      @Override public Publisher<Object> apply(      Flowable<Integer> integerObservable){\n        return integerObservable.subscribeOn(Schedulers.computation()).map(new Function<Integer,Object>(){\n          @Override public Object apply(          Integer integer){\n            if (integer >= 5 && completed.compareAndSet(false,true)) {\n              s.onComplete();\n            }\n            Math.pow(Math.random(),Math.random());\n            return integer * 2;\n          }\n        }\n);\n      }\n    }\n).toList().doOnNext(new Consumer<List<Object>>(){\n      @Override public void accept(      List<Object> integers){\n        counter.incrementAndGet();\n        latch.countDown();\n        innerLatch.countDown();\n      }\n    }\n).subscribe();\n    if (!innerLatch.await(30,TimeUnit.SECONDS))     Assert.fail(\"Failed inner latch wait, iteration \" + iters);\n  }\n  if (!latch.await(30,TimeUnit.SECONDS))   Assert.fail(\"Incomplete! Went through \" + latch.getCount() + \" iterations\");\n else   Assert.assertEquals(NITERS,counter.get());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 294,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2738,
        "startLineNumber" : 30,
        "startColumnNumber" : 4,
        "endLineNumber" : 80,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testIssue1677() throws InterruptedException {\n  final AtomicLong counter=new AtomicLong();\n  final Integer[] numbers=new Integer[5000];\n  for (int i=0; i < numbers.length; i++)   numbers[i]=i + 1;\n  final int NITERS=250;\n  final CountDownLatch latch=new CountDownLatch(NITERS);\n  for (int iters=0; iters < NITERS; iters++) {\n    final CountDownLatch innerLatch=new CountDownLatch(1);\n    final PublishProcessor<Void> s=PublishProcessor.create();\n    final AtomicBoolean completed=new AtomicBoolean();\n    Flowable.fromArray(numbers).takeUntil(s).window(50).flatMap(new Function<Flowable<Integer>,Publisher<Object>>(){\n      @Override public Publisher<Object> apply(      Flowable<Integer> integerObservable){\n        return integerObservable.subscribeOn(Schedulers.computation()).map(new Function<Integer,Object>(){\n          @Override public Object apply(          Integer integer){\n            if (integer >= 5 && completed.compareAndSet(false,true)) {\n              s.onComplete();\n            }\n            Math.pow(Math.random(),Math.random());\n            return integer * 2;\n          }\n        }\n);\n      }\n    }\n).toList().doOnNext(new Consumer<List<Object>>(){\n      @Override public void accept(      List<Object> integers){\n        counter.incrementAndGet();\n        latch.countDown();\n        innerLatch.countDown();\n      }\n    }\n).subscribe();\n    if (!innerLatch.await(30,TimeUnit.SECONDS))     Assert.fail(\"Failed inner latch wait, iteration \" + iters);\n  }\n  if (!latch.await(30,TimeUnit.SECONDS))   Assert.fail(\"Incomplete! Went through \" + latch.getCount() + \" iterations\");\n else   Assert.assertEquals(NITERS,counter.get());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 302,
      "astHeight" : 24
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2153,
        "startLineNumber" : 38,
        "startColumnNumber" : 8,
        "endLineNumber" : 75,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int iters=0; iters < NITERS; iters++) {\n  final CountDownLatch innerLatch=new CountDownLatch(1);\n  final PublishProcessor<Void> s=PublishProcessor.create();\n  final AtomicBoolean completed=new AtomicBoolean();\n  Flowable.fromArray(numbers).takeUntil(s).window(50).flatMap(new Function<Flowable<Integer>,Publisher<Object>>(){\n    @Override public Publisher<Object> apply(    Flowable<Integer> integerObservable){\n      return integerObservable.subscribeOn(Schedulers.computation()).map(new Function<Integer,Object>(){\n        @Override public Object apply(        Integer integer){\n          if (integer >= 5 && completed.compareAndSet(false,true)) {\n            s.onComplete();\n          }\n          Math.pow(Math.random(),Math.random());\n          return integer * 2;\n        }\n      }\n);\n    }\n  }\n).toList().doOnNext(new Consumer<List<Object>>(){\n    @Override public void accept(    List<Object> integers){\n      counter.incrementAndGet();\n      latch.countDown();\n      innerLatch.countDown();\n    }\n  }\n).subscribe();\n  if (!innerLatch.await(30,TimeUnit.SECONDS))   Assert.fail(\"Failed inner latch wait, iteration \" + iters);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 206,
      "astHeight" : 22
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 38,
    "startColumnNumber" : 28,
    "endLineNumber" : 38,
    "endColumnNumber" : 42
  } ],
  "layoutRelationDataList" : [ ]
}