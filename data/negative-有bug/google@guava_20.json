{
  "id" : 20,
  "expression" : "ListTestSuiteBuilder.using(new TestStringListGenerator(){\n  @Override protected List<String> create(  String[] elements){\n    Set<String> set=Sets.newHashSet();\n    ImmutableSortedMultiset.Builder<String> builder=ImmutableSortedMultiset.naturalOrder();\n    for (    String s : elements) {\n      checkArgument(set.add(s));\n      builder.addCopies(s,2);\n    }\n    return builder.build().elementSet().asList();\n  }\n  @Override public List<String> order(  List<String> insertionOrder){\n    return Ordering.natural().sortedCopy(insertionOrder);\n  }\n}\n).named(\"ImmutableSortedMultiset.elementSet.asList\").withFeatures(CollectionSize.ANY,CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,CollectionFeature.SERIALIZABLE,CollectionFeature.ALLOWS_NULL_QUERIES)",
  "projectName" : "google@guava",
  "commitID" : "68500b2c09fa6985eab2e41577e2992685b57f2b",
  "filePath" : "/guava-tests/test/com/google/common/collect/ImmutableSortedMultisetTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ListTestSuiteBuilder.using(new TestStringListGenerator(){\n  @Override protected List<String> create(  String[] elements){\n    Set<String> set=Sets.newHashSet();\n    ImmutableSortedMultiset.Builder<String> builder=ImmutableSortedMultiset.naturalOrder();\n    for (    String s : elements) {\n      checkArgument(set.add(s));\n      builder.addCopies(s,2);\n    }\n    return builder.build().elementSet().asList();\n  }\n  @Override public List<String> order(  List<String> insertionOrder){\n    return Ordering.natural().sortedCopy(insertionOrder);\n  }\n}\n).named(\"ImmutableSortedMultiset.elementSet.asList\").withFeatures(CollectionSize.ANY,CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,CollectionFeature.SERIALIZABLE,CollectionFeature.ALLOWS_NULL_QUERIES)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 1152,
      "startLineNumber" : 100,
      "startColumnNumber" : 8,
      "endLineNumber" : 124,
      "endColumnNumber" : 54
    },
    "astNodeNumber" : 118,
    "astHeight" : 13,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 1184,
        "startLineNumber" : 100,
        "startColumnNumber" : 8,
        "endLineNumber" : 125,
        "endColumnNumber" : 30
      },
      "nodeContext" : "ListTestSuiteBuilder.using(new TestStringListGenerator(){\n  @Override protected List<String> create(  String[] elements){\n    Set<String> set=Sets.newHashSet();\n    ImmutableSortedMultiset.Builder<String> builder=ImmutableSortedMultiset.naturalOrder();\n    for (    String s : elements) {\n      checkArgument(set.add(s));\n      builder.addCopies(s,2);\n    }\n    return builder.build().elementSet().asList();\n  }\n  @Override public List<String> order(  List<String> insertionOrder){\n    return Ordering.natural().sortedCopy(insertionOrder);\n  }\n}\n).named(\"ImmutableSortedMultiset.elementSet.asList\").withFeatures(CollectionSize.ANY,CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,CollectionFeature.SERIALIZABLE,CollectionFeature.ALLOWS_NULL_QUERIES).createTestSuite()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 120,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 1209,
        "startLineNumber" : 99,
        "startColumnNumber" : 4,
        "endLineNumber" : 125,
        "endColumnNumber" : 31
      },
      "nodeContext" : "suite.addTest(ListTestSuiteBuilder.using(new TestStringListGenerator(){\n  @Override protected List<String> create(  String[] elements){\n    Set<String> set=Sets.newHashSet();\n    ImmutableSortedMultiset.Builder<String> builder=ImmutableSortedMultiset.naturalOrder();\n    for (    String s : elements) {\n      checkArgument(set.add(s));\n      builder.addCopies(s,2);\n    }\n    return builder.build().elementSet().asList();\n  }\n  @Override public List<String> order(  List<String> insertionOrder){\n    return Ordering.natural().sortedCopy(insertionOrder);\n  }\n}\n).named(\"ImmutableSortedMultiset.elementSet.asList\").withFeatures(CollectionSize.ANY,CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,CollectionFeature.SERIALIZABLE,CollectionFeature.ALLOWS_NULL_QUERIES).createTestSuite())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 123,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1210,
        "startLineNumber" : 99,
        "startColumnNumber" : 4,
        "endLineNumber" : 125,
        "endColumnNumber" : 32
      },
      "nodeContext" : "suite.addTest(ListTestSuiteBuilder.using(new TestStringListGenerator(){\n  @Override protected List<String> create(  String[] elements){\n    Set<String> set=Sets.newHashSet();\n    ImmutableSortedMultiset.Builder<String> builder=ImmutableSortedMultiset.naturalOrder();\n    for (    String s : elements) {\n      checkArgument(set.add(s));\n      builder.addCopies(s,2);\n    }\n    return builder.build().elementSet().asList();\n  }\n  @Override public List<String> order(  List<String> insertionOrder){\n    return Ordering.natural().sortedCopy(insertionOrder);\n  }\n}\n).named(\"ImmutableSortedMultiset.elementSet.asList\").withFeatures(CollectionSize.ANY,CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,CollectionFeature.SERIALIZABLE,CollectionFeature.ALLOWS_NULL_QUERIES).createTestSuite());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 124,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2939,
        "startLineNumber" : 55,
        "startColumnNumber" : 29,
        "endLineNumber" : 128,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  TestSuite suite=new TestSuite();\n  suite.addTestSuite(ImmutableSortedMultisetTest.class);\n  suite.addTest(SortedMultisetTestSuiteBuilder.using(new TestStringMultisetGenerator(){\n    @Override protected Multiset<String> create(    String[] elements){\n      return ImmutableSortedMultiset.copyOf(elements);\n    }\n    @Override public List<String> order(    List<String> insertionOrder){\n      return Ordering.natural().sortedCopy(insertionOrder);\n    }\n  }\n).named(\"ImmutableSortedMultiset\").withFeatures(CollectionSize.ANY,CollectionFeature.SERIALIZABLE_INCLUDING_VIEWS,CollectionFeature.ALLOWS_NULL_QUERIES).createTestSuite());\n  suite.addTest(ListTestSuiteBuilder.using(new TestStringListGenerator(){\n    @Override protected List<String> create(    String[] elements){\n      return ImmutableSortedMultiset.copyOf(elements).asList();\n    }\n    @Override public List<String> order(    List<String> insertionOrder){\n      return Ordering.natural().sortedCopy(insertionOrder);\n    }\n  }\n).named(\"ImmutableSortedMultiset.asList\").withFeatures(CollectionSize.ANY,CollectionFeature.SERIALIZABLE,CollectionFeature.ALLOWS_NULL_QUERIES).createTestSuite());\n  suite.addTest(ListTestSuiteBuilder.using(new TestStringListGenerator(){\n    @Override protected List<String> create(    String[] elements){\n      Set<String> set=Sets.newHashSet();\n      ImmutableSortedMultiset.Builder<String> builder=ImmutableSortedMultiset.naturalOrder();\n      for (      String s : elements) {\n        checkArgument(set.add(s));\n        builder.addCopies(s,2);\n      }\n      return builder.build().elementSet().asList();\n    }\n    @Override public List<String> order(    List<String> insertionOrder){\n      return Ordering.natural().sortedCopy(insertionOrder);\n    }\n  }\n).named(\"ImmutableSortedMultiset.elementSet.asList\").withFeatures(CollectionSize.ANY,CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,CollectionFeature.SERIALIZABLE,CollectionFeature.ALLOWS_NULL_QUERIES).createTestSuite());\n  return suite;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 292,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2966,
        "startLineNumber" : 55,
        "startColumnNumber" : 2,
        "endLineNumber" : 128,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static Test suite(){\n  TestSuite suite=new TestSuite();\n  suite.addTestSuite(ImmutableSortedMultisetTest.class);\n  suite.addTest(SortedMultisetTestSuiteBuilder.using(new TestStringMultisetGenerator(){\n    @Override protected Multiset<String> create(    String[] elements){\n      return ImmutableSortedMultiset.copyOf(elements);\n    }\n    @Override public List<String> order(    List<String> insertionOrder){\n      return Ordering.natural().sortedCopy(insertionOrder);\n    }\n  }\n).named(\"ImmutableSortedMultiset\").withFeatures(CollectionSize.ANY,CollectionFeature.SERIALIZABLE_INCLUDING_VIEWS,CollectionFeature.ALLOWS_NULL_QUERIES).createTestSuite());\n  suite.addTest(ListTestSuiteBuilder.using(new TestStringListGenerator(){\n    @Override protected List<String> create(    String[] elements){\n      return ImmutableSortedMultiset.copyOf(elements).asList();\n    }\n    @Override public List<String> order(    List<String> insertionOrder){\n      return Ordering.natural().sortedCopy(insertionOrder);\n    }\n  }\n).named(\"ImmutableSortedMultiset.asList\").withFeatures(CollectionSize.ANY,CollectionFeature.SERIALIZABLE,CollectionFeature.ALLOWS_NULL_QUERIES).createTestSuite());\n  suite.addTest(ListTestSuiteBuilder.using(new TestStringListGenerator(){\n    @Override protected List<String> create(    String[] elements){\n      Set<String> set=Sets.newHashSet();\n      ImmutableSortedMultiset.Builder<String> builder=ImmutableSortedMultiset.naturalOrder();\n      for (      String s : elements) {\n        checkArgument(set.add(s));\n        builder.addCopies(s,2);\n      }\n      return builder.build().elementSet().asList();\n    }\n    @Override public List<String> order(    List<String> insertionOrder){\n      return Ordering.natural().sortedCopy(insertionOrder);\n    }\n  }\n).named(\"ImmutableSortedMultiset.elementSet.asList\").withFeatures(CollectionSize.ANY,CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,CollectionFeature.SERIALIZABLE,CollectionFeature.ALLOWS_NULL_QUERIES).createTestSuite());\n  return suite;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 298,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 1184,
        "startLineNumber" : 100,
        "startColumnNumber" : 8,
        "endLineNumber" : 125,
        "endColumnNumber" : 30
      },
      "nodeContext" : "ListTestSuiteBuilder.using(new TestStringListGenerator(){\n  @Override protected List<String> create(  String[] elements){\n    Set<String> set=Sets.newHashSet();\n    ImmutableSortedMultiset.Builder<String> builder=ImmutableSortedMultiset.naturalOrder();\n    for (    String s : elements) {\n      checkArgument(set.add(s));\n      builder.addCopies(s,2);\n    }\n    return builder.build().elementSet().asList();\n  }\n  @Override public List<String> order(  List<String> insertionOrder){\n    return Ordering.natural().sortedCopy(insertionOrder);\n  }\n}\n).named(\"ImmutableSortedMultiset.elementSet.asList\").withFeatures(CollectionSize.ANY,CollectionFeature.REJECTS_DUPLICATES_AT_CREATION,CollectionFeature.SERIALIZABLE,CollectionFeature.ALLOWS_NULL_QUERIES).createTestSuite()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 120,
      "astHeight" : 14
    },
    "tokenLength" : 57,
    "type" : "com.google.common.collect.testing.ListTestSuiteBuilder<java.lang.String>"
  } ],
  "positionList" : [ {
    "charLength" : 1152,
    "startLineNumber" : 100,
    "startColumnNumber" : 8,
    "endLineNumber" : 124,
    "endColumnNumber" : 54
  } ],
  "layoutRelationDataList" : [ ]
}