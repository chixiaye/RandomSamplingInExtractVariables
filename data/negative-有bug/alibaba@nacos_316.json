{
  "id" : 316,
  "expression" : "TimeUtils",
  "projectName" : "alibaba@nacos",
  "commitID" : "4e7346db1d6657ffe07c96bebd2d348229c2812f",
  "filePath" : "/config/src/main/java/com/alibaba/nacos/config/server/controller/ConfigServletInner.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "TimeUtils",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 257,
      "startColumnNumber" : 85,
      "endLineNumber" : 257,
      "endColumnNumber" : 94
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 257,
        "startColumnNumber" : 85,
        "endLineNumber" : 257,
        "endColumnNumber" : 114
      },
      "nodeContext" : "TimeUtils.getCurrentTimeStr()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 257,
        "startColumnNumber" : 16,
        "endLineNumber" : 257,
        "endColumnNumber" : 115
      },
      "nodeContext" : "LogUtil.PULL_CHECK_LOG.warn(\"{}|{}|{}|{}\",groupKey,requestIp,md5,TimeUtils.getCurrentTimeStr())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 257,
        "startColumnNumber" : 16,
        "endLineNumber" : 257,
        "endColumnNumber" : 116
      },
      "nodeContext" : "LogUtil.PULL_CHECK_LOG.warn(\"{}|{}|{}|{}\",groupKey,requestIp,md5,TimeUtils.getCurrentTimeStr());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 7547,
        "startLineNumber" : 135,
        "startColumnNumber" : 16,
        "endLineNumber" : 269,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  String md5=Constants.NULL;\n  long lastModified=0L;\n  CacheItem cacheItem=ConfigCacheService.getContentCache(groupKey);\n  if (cacheItem.isBeta() && cacheItem.getIps4Beta().contains(clientIp)) {\n    isBeta=true;\n  }\n  final String configType=(null != cacheItem.getType()) ? cacheItem.getType() : FileTypeEnum.TEXT.getFileType();\n  response.setHeader(\"Config-Type\",configType);\n  FileTypeEnum fileTypeEnum=FileTypeEnum.getFileTypeEnumByFileExtensionOrFileType(configType);\n  String contentTypeHeader=fileTypeEnum.getContentType();\n  response.setHeader(HttpHeaderConsts.CONTENT_TYPE,contentTypeHeader);\n  File file=null;\n  ConfigInfoBase configInfoBase=null;\n  PrintWriter out=null;\n  if (isBeta) {\n    md5=cacheItem.getMd54Beta();\n    lastModified=cacheItem.getLastModifiedTs4Beta();\n    if (PropertyUtil.isDirectRead()) {\n      configInfoBase=persistService.findConfigInfo4Beta(dataId,group,tenant);\n    }\n else {\n      file=DiskUtil.targetBetaFile(dataId,group,tenant);\n    }\n    response.setHeader(\"isBeta\",\"true\");\n  }\n else {\n    if (StringUtils.isBlank(tag)) {\n      if (isUseTag(cacheItem,autoTag)) {\n        if (cacheItem.tagMd5 != null) {\n          md5=cacheItem.tagMd5.get(autoTag);\n        }\n        if (cacheItem.tagLastModifiedTs != null) {\n          lastModified=cacheItem.tagLastModifiedTs.get(autoTag);\n        }\n        if (PropertyUtil.isDirectRead()) {\n          configInfoBase=persistService.findConfigInfo4Tag(dataId,group,tenant,autoTag);\n        }\n else {\n          file=DiskUtil.targetTagFile(dataId,group,tenant,autoTag);\n        }\n        response.setHeader(\"Vipserver-Tag\",URLEncoder.encode(autoTag,StandardCharsets.UTF_8.displayName()));\n      }\n else {\n        md5=cacheItem.getMd5();\n        lastModified=cacheItem.getLastModifiedTs();\n        if (PropertyUtil.isDirectRead()) {\n          configInfoBase=persistService.findConfigInfo(dataId,group,tenant);\n        }\n else {\n          file=DiskUtil.targetFile(dataId,group,tenant);\n        }\n        if (configInfoBase == null && fileNotExist(file)) {\n          ConfigTraceService.logPullEvent(dataId,group,tenant,requestIpApp,-1,ConfigTraceService.PULL_EVENT_NOTFOUND,-1,requestIp,notify);\n          response.setStatus(HttpServletResponse.SC_NOT_FOUND);\n          response.getWriter().println(\"config data not exist\");\n          return HttpServletResponse.SC_NOT_FOUND + \"\";\n        }\n      }\n    }\n else {\n      if (cacheItem.tagMd5 != null) {\n        md5=cacheItem.tagMd5.get(tag);\n      }\n      if (cacheItem.tagLastModifiedTs != null) {\n        Long lm=cacheItem.tagLastModifiedTs.get(tag);\n        if (lm != null) {\n          lastModified=lm;\n        }\n      }\n      if (PropertyUtil.isDirectRead()) {\n        configInfoBase=persistService.findConfigInfo4Tag(dataId,group,tenant,tag);\n      }\n else {\n        file=DiskUtil.targetTagFile(dataId,group,tenant,tag);\n      }\n      if (configInfoBase == null && fileNotExist(file)) {\n        ConfigTraceService.logPullEvent(dataId,group,tenant,requestIpApp,-1,ConfigTraceService.PULL_EVENT_NOTFOUND,-1,requestIp,notify);\n        response.setStatus(HttpServletResponse.SC_NOT_FOUND);\n        response.getWriter().println(\"config data not exist\");\n        return HttpServletResponse.SC_NOT_FOUND + \"\";\n      }\n    }\n  }\n  response.setHeader(Constants.CONTENT_MD5,md5);\n  response.setHeader(\"Pragma\",\"no-cache\");\n  response.setDateHeader(\"Expires\",0);\n  response.setHeader(\"Cache-Control\",\"no-cache,no-store\");\n  if (PropertyUtil.isDirectRead()) {\n    response.setDateHeader(\"Last-Modified\",lastModified);\n  }\n else {\n    fis=new FileInputStream(file);\n    response.setDateHeader(\"Last-Modified\",file.lastModified());\n  }\n  if (PropertyUtil.isDirectRead()) {\n    out=response.getWriter();\n    out.print(configInfoBase.getContent());\n    out.flush();\n    out.close();\n  }\n else {\n    fis.getChannel().transferTo(0L,fis.getChannel().size(),Channels.newChannel(response.getOutputStream()));\n  }\n  LogUtil.PULL_CHECK_LOG.warn(\"{}|{}|{}|{}\",groupKey,requestIp,md5,TimeUtils.getCurrentTimeStr());\n  final long delayed=System.currentTimeMillis() - lastModified;\n  ConfigTraceService.logPullEvent(dataId,group,tenant,requestIpApp,lastModified,ConfigTraceService.PULL_EVENT_OK,delayed,requestIp,notify);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 574,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 7667,
        "startLineNumber" : 135,
        "startColumnNumber" : 12,
        "endLineNumber" : 272,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  String md5=Constants.NULL;\n  long lastModified=0L;\n  CacheItem cacheItem=ConfigCacheService.getContentCache(groupKey);\n  if (cacheItem.isBeta() && cacheItem.getIps4Beta().contains(clientIp)) {\n    isBeta=true;\n  }\n  final String configType=(null != cacheItem.getType()) ? cacheItem.getType() : FileTypeEnum.TEXT.getFileType();\n  response.setHeader(\"Config-Type\",configType);\n  FileTypeEnum fileTypeEnum=FileTypeEnum.getFileTypeEnumByFileExtensionOrFileType(configType);\n  String contentTypeHeader=fileTypeEnum.getContentType();\n  response.setHeader(HttpHeaderConsts.CONTENT_TYPE,contentTypeHeader);\n  File file=null;\n  ConfigInfoBase configInfoBase=null;\n  PrintWriter out=null;\n  if (isBeta) {\n    md5=cacheItem.getMd54Beta();\n    lastModified=cacheItem.getLastModifiedTs4Beta();\n    if (PropertyUtil.isDirectRead()) {\n      configInfoBase=persistService.findConfigInfo4Beta(dataId,group,tenant);\n    }\n else {\n      file=DiskUtil.targetBetaFile(dataId,group,tenant);\n    }\n    response.setHeader(\"isBeta\",\"true\");\n  }\n else {\n    if (StringUtils.isBlank(tag)) {\n      if (isUseTag(cacheItem,autoTag)) {\n        if (cacheItem.tagMd5 != null) {\n          md5=cacheItem.tagMd5.get(autoTag);\n        }\n        if (cacheItem.tagLastModifiedTs != null) {\n          lastModified=cacheItem.tagLastModifiedTs.get(autoTag);\n        }\n        if (PropertyUtil.isDirectRead()) {\n          configInfoBase=persistService.findConfigInfo4Tag(dataId,group,tenant,autoTag);\n        }\n else {\n          file=DiskUtil.targetTagFile(dataId,group,tenant,autoTag);\n        }\n        response.setHeader(\"Vipserver-Tag\",URLEncoder.encode(autoTag,StandardCharsets.UTF_8.displayName()));\n      }\n else {\n        md5=cacheItem.getMd5();\n        lastModified=cacheItem.getLastModifiedTs();\n        if (PropertyUtil.isDirectRead()) {\n          configInfoBase=persistService.findConfigInfo(dataId,group,tenant);\n        }\n else {\n          file=DiskUtil.targetFile(dataId,group,tenant);\n        }\n        if (configInfoBase == null && fileNotExist(file)) {\n          ConfigTraceService.logPullEvent(dataId,group,tenant,requestIpApp,-1,ConfigTraceService.PULL_EVENT_NOTFOUND,-1,requestIp,notify);\n          response.setStatus(HttpServletResponse.SC_NOT_FOUND);\n          response.getWriter().println(\"config data not exist\");\n          return HttpServletResponse.SC_NOT_FOUND + \"\";\n        }\n      }\n    }\n else {\n      if (cacheItem.tagMd5 != null) {\n        md5=cacheItem.tagMd5.get(tag);\n      }\n      if (cacheItem.tagLastModifiedTs != null) {\n        Long lm=cacheItem.tagLastModifiedTs.get(tag);\n        if (lm != null) {\n          lastModified=lm;\n        }\n      }\n      if (PropertyUtil.isDirectRead()) {\n        configInfoBase=persistService.findConfigInfo4Tag(dataId,group,tenant,tag);\n      }\n else {\n        file=DiskUtil.targetTagFile(dataId,group,tenant,tag);\n      }\n      if (configInfoBase == null && fileNotExist(file)) {\n        ConfigTraceService.logPullEvent(dataId,group,tenant,requestIpApp,-1,ConfigTraceService.PULL_EVENT_NOTFOUND,-1,requestIp,notify);\n        response.setStatus(HttpServletResponse.SC_NOT_FOUND);\n        response.getWriter().println(\"config data not exist\");\n        return HttpServletResponse.SC_NOT_FOUND + \"\";\n      }\n    }\n  }\n  response.setHeader(Constants.CONTENT_MD5,md5);\n  response.setHeader(\"Pragma\",\"no-cache\");\n  response.setDateHeader(\"Expires\",0);\n  response.setHeader(\"Cache-Control\",\"no-cache,no-store\");\n  if (PropertyUtil.isDirectRead()) {\n    response.setDateHeader(\"Last-Modified\",lastModified);\n  }\n else {\n    fis=new FileInputStream(file);\n    response.setDateHeader(\"Last-Modified\",file.lastModified());\n  }\n  if (PropertyUtil.isDirectRead()) {\n    out=response.getWriter();\n    out.print(configInfoBase.getContent());\n    out.flush();\n    out.close();\n  }\n else {\n    fis.getChannel().transferTo(0L,fis.getChannel().size(),Channels.newChannel(response.getOutputStream()));\n  }\n  LogUtil.PULL_CHECK_LOG.warn(\"{}|{}|{}|{}\",groupKey,requestIp,md5,TimeUtils.getCurrentTimeStr());\n  final long delayed=System.currentTimeMillis() - lastModified;\n  ConfigTraceService.logPullEvent(dataId,group,tenant,requestIpApp,lastModified,ConfigTraceService.PULL_EVENT_OK,delayed,requestIp,notify);\n}\n  finally {\n  releaseConfigReadLock(groupKey);\n  IoUtils.closeQuietly(fis);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 585,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 7834,
        "startLineNumber" : 132,
        "startColumnNumber" : 28,
        "endLineNumber" : 273,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  FileInputStream fis=null;\n  try {\n    String md5=Constants.NULL;\n    long lastModified=0L;\n    CacheItem cacheItem=ConfigCacheService.getContentCache(groupKey);\n    if (cacheItem.isBeta() && cacheItem.getIps4Beta().contains(clientIp)) {\n      isBeta=true;\n    }\n    final String configType=(null != cacheItem.getType()) ? cacheItem.getType() : FileTypeEnum.TEXT.getFileType();\n    response.setHeader(\"Config-Type\",configType);\n    FileTypeEnum fileTypeEnum=FileTypeEnum.getFileTypeEnumByFileExtensionOrFileType(configType);\n    String contentTypeHeader=fileTypeEnum.getContentType();\n    response.setHeader(HttpHeaderConsts.CONTENT_TYPE,contentTypeHeader);\n    File file=null;\n    ConfigInfoBase configInfoBase=null;\n    PrintWriter out=null;\n    if (isBeta) {\n      md5=cacheItem.getMd54Beta();\n      lastModified=cacheItem.getLastModifiedTs4Beta();\n      if (PropertyUtil.isDirectRead()) {\n        configInfoBase=persistService.findConfigInfo4Beta(dataId,group,tenant);\n      }\n else {\n        file=DiskUtil.targetBetaFile(dataId,group,tenant);\n      }\n      response.setHeader(\"isBeta\",\"true\");\n    }\n else {\n      if (StringUtils.isBlank(tag)) {\n        if (isUseTag(cacheItem,autoTag)) {\n          if (cacheItem.tagMd5 != null) {\n            md5=cacheItem.tagMd5.get(autoTag);\n          }\n          if (cacheItem.tagLastModifiedTs != null) {\n            lastModified=cacheItem.tagLastModifiedTs.get(autoTag);\n          }\n          if (PropertyUtil.isDirectRead()) {\n            configInfoBase=persistService.findConfigInfo4Tag(dataId,group,tenant,autoTag);\n          }\n else {\n            file=DiskUtil.targetTagFile(dataId,group,tenant,autoTag);\n          }\n          response.setHeader(\"Vipserver-Tag\",URLEncoder.encode(autoTag,StandardCharsets.UTF_8.displayName()));\n        }\n else {\n          md5=cacheItem.getMd5();\n          lastModified=cacheItem.getLastModifiedTs();\n          if (PropertyUtil.isDirectRead()) {\n            configInfoBase=persistService.findConfigInfo(dataId,group,tenant);\n          }\n else {\n            file=DiskUtil.targetFile(dataId,group,tenant);\n          }\n          if (configInfoBase == null && fileNotExist(file)) {\n            ConfigTraceService.logPullEvent(dataId,group,tenant,requestIpApp,-1,ConfigTraceService.PULL_EVENT_NOTFOUND,-1,requestIp,notify);\n            response.setStatus(HttpServletResponse.SC_NOT_FOUND);\n            response.getWriter().println(\"config data not exist\");\n            return HttpServletResponse.SC_NOT_FOUND + \"\";\n          }\n        }\n      }\n else {\n        if (cacheItem.tagMd5 != null) {\n          md5=cacheItem.tagMd5.get(tag);\n        }\n        if (cacheItem.tagLastModifiedTs != null) {\n          Long lm=cacheItem.tagLastModifiedTs.get(tag);\n          if (lm != null) {\n            lastModified=lm;\n          }\n        }\n        if (PropertyUtil.isDirectRead()) {\n          configInfoBase=persistService.findConfigInfo4Tag(dataId,group,tenant,tag);\n        }\n else {\n          file=DiskUtil.targetTagFile(dataId,group,tenant,tag);\n        }\n        if (configInfoBase == null && fileNotExist(file)) {\n          ConfigTraceService.logPullEvent(dataId,group,tenant,requestIpApp,-1,ConfigTraceService.PULL_EVENT_NOTFOUND,-1,requestIp,notify);\n          response.setStatus(HttpServletResponse.SC_NOT_FOUND);\n          response.getWriter().println(\"config data not exist\");\n          return HttpServletResponse.SC_NOT_FOUND + \"\";\n        }\n      }\n    }\n    response.setHeader(Constants.CONTENT_MD5,md5);\n    response.setHeader(\"Pragma\",\"no-cache\");\n    response.setDateHeader(\"Expires\",0);\n    response.setHeader(\"Cache-Control\",\"no-cache,no-store\");\n    if (PropertyUtil.isDirectRead()) {\n      response.setDateHeader(\"Last-Modified\",lastModified);\n    }\n else {\n      fis=new FileInputStream(file);\n      response.setDateHeader(\"Last-Modified\",file.lastModified());\n    }\n    if (PropertyUtil.isDirectRead()) {\n      out=response.getWriter();\n      out.print(configInfoBase.getContent());\n      out.flush();\n      out.close();\n    }\n else {\n      fis.getChannel().transferTo(0L,fis.getChannel().size(),Channels.newChannel(response.getOutputStream()));\n    }\n    LogUtil.PULL_CHECK_LOG.warn(\"{}|{}|{}|{}\",groupKey,requestIp,md5,TimeUtils.getCurrentTimeStr());\n    final long delayed=System.currentTimeMillis() - lastModified;\n    ConfigTraceService.logPullEvent(dataId,group,tenant,requestIpApp,lastModified,ConfigTraceService.PULL_EVENT_OK,delayed,requestIp,notify);\n  }\n  finally {\n    releaseConfigReadLock(groupKey);\n    IoUtils.closeQuietly(fis);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 592,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8831,
        "startLineNumber" : 132,
        "startColumnNumber" : 8,
        "endLineNumber" : 292,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (lockResult > 0) {\n  FileInputStream fis=null;\n  try {\n    String md5=Constants.NULL;\n    long lastModified=0L;\n    CacheItem cacheItem=ConfigCacheService.getContentCache(groupKey);\n    if (cacheItem.isBeta() && cacheItem.getIps4Beta().contains(clientIp)) {\n      isBeta=true;\n    }\n    final String configType=(null != cacheItem.getType()) ? cacheItem.getType() : FileTypeEnum.TEXT.getFileType();\n    response.setHeader(\"Config-Type\",configType);\n    FileTypeEnum fileTypeEnum=FileTypeEnum.getFileTypeEnumByFileExtensionOrFileType(configType);\n    String contentTypeHeader=fileTypeEnum.getContentType();\n    response.setHeader(HttpHeaderConsts.CONTENT_TYPE,contentTypeHeader);\n    File file=null;\n    ConfigInfoBase configInfoBase=null;\n    PrintWriter out=null;\n    if (isBeta) {\n      md5=cacheItem.getMd54Beta();\n      lastModified=cacheItem.getLastModifiedTs4Beta();\n      if (PropertyUtil.isDirectRead()) {\n        configInfoBase=persistService.findConfigInfo4Beta(dataId,group,tenant);\n      }\n else {\n        file=DiskUtil.targetBetaFile(dataId,group,tenant);\n      }\n      response.setHeader(\"isBeta\",\"true\");\n    }\n else {\n      if (StringUtils.isBlank(tag)) {\n        if (isUseTag(cacheItem,autoTag)) {\n          if (cacheItem.tagMd5 != null) {\n            md5=cacheItem.tagMd5.get(autoTag);\n          }\n          if (cacheItem.tagLastModifiedTs != null) {\n            lastModified=cacheItem.tagLastModifiedTs.get(autoTag);\n          }\n          if (PropertyUtil.isDirectRead()) {\n            configInfoBase=persistService.findConfigInfo4Tag(dataId,group,tenant,autoTag);\n          }\n else {\n            file=DiskUtil.targetTagFile(dataId,group,tenant,autoTag);\n          }\n          response.setHeader(\"Vipserver-Tag\",URLEncoder.encode(autoTag,StandardCharsets.UTF_8.displayName()));\n        }\n else {\n          md5=cacheItem.getMd5();\n          lastModified=cacheItem.getLastModifiedTs();\n          if (PropertyUtil.isDirectRead()) {\n            configInfoBase=persistService.findConfigInfo(dataId,group,tenant);\n          }\n else {\n            file=DiskUtil.targetFile(dataId,group,tenant);\n          }\n          if (configInfoBase == null && fileNotExist(file)) {\n            ConfigTraceService.logPullEvent(dataId,group,tenant,requestIpApp,-1,ConfigTraceService.PULL_EVENT_NOTFOUND,-1,requestIp,notify);\n            response.setStatus(HttpServletResponse.SC_NOT_FOUND);\n            response.getWriter().println(\"config data not exist\");\n            return HttpServletResponse.SC_NOT_FOUND + \"\";\n          }\n        }\n      }\n else {\n        if (cacheItem.tagMd5 != null) {\n          md5=cacheItem.tagMd5.get(tag);\n        }\n        if (cacheItem.tagLastModifiedTs != null) {\n          Long lm=cacheItem.tagLastModifiedTs.get(tag);\n          if (lm != null) {\n            lastModified=lm;\n          }\n        }\n        if (PropertyUtil.isDirectRead()) {\n          configInfoBase=persistService.findConfigInfo4Tag(dataId,group,tenant,tag);\n        }\n else {\n          file=DiskUtil.targetTagFile(dataId,group,tenant,tag);\n        }\n        if (configInfoBase == null && fileNotExist(file)) {\n          ConfigTraceService.logPullEvent(dataId,group,tenant,requestIpApp,-1,ConfigTraceService.PULL_EVENT_NOTFOUND,-1,requestIp,notify);\n          response.setStatus(HttpServletResponse.SC_NOT_FOUND);\n          response.getWriter().println(\"config data not exist\");\n          return HttpServletResponse.SC_NOT_FOUND + \"\";\n        }\n      }\n    }\n    response.setHeader(Constants.CONTENT_MD5,md5);\n    response.setHeader(\"Pragma\",\"no-cache\");\n    response.setDateHeader(\"Expires\",0);\n    response.setHeader(\"Cache-Control\",\"no-cache,no-store\");\n    if (PropertyUtil.isDirectRead()) {\n      response.setDateHeader(\"Last-Modified\",lastModified);\n    }\n else {\n      fis=new FileInputStream(file);\n      response.setDateHeader(\"Last-Modified\",file.lastModified());\n    }\n    if (PropertyUtil.isDirectRead()) {\n      out=response.getWriter();\n      out.print(configInfoBase.getContent());\n      out.flush();\n      out.close();\n    }\n else {\n      fis.getChannel().transferTo(0L,fis.getChannel().size(),Channels.newChannel(response.getOutputStream()));\n    }\n    LogUtil.PULL_CHECK_LOG.warn(\"{}|{}|{}|{}\",groupKey,requestIp,md5,TimeUtils.getCurrentTimeStr());\n    final long delayed=System.currentTimeMillis() - lastModified;\n    ConfigTraceService.logPullEvent(dataId,group,tenant,requestIpApp,lastModified,ConfigTraceService.PULL_EVENT_OK,delayed,requestIp,notify);\n  }\n  finally {\n    releaseConfigReadLock(groupKey);\n    IoUtils.closeQuietly(fis);\n  }\n}\n else if (lockResult == 0) {\n  ConfigTraceService.logPullEvent(dataId,group,tenant,requestIpApp,-1,ConfigTraceService.PULL_EVENT_NOTFOUND,-1,requestIp,notify);\n  response.setStatus(HttpServletResponse.SC_NOT_FOUND);\n  response.getWriter().println(\"config data not exist\");\n  return HttpServletResponse.SC_NOT_FOUND + \"\";\n}\n else {\n  PULL_LOG.info(\"[client-get] clientIp={}, {}, get data during dump\",clientIp,groupKey);\n  response.setStatus(HttpServletResponse.SC_CONFLICT);\n  response.getWriter().println(\"requested file is being modified, please try later.\");\n  return HttpServletResponse.SC_CONFLICT + \"\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 666,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 9342,
        "startLineNumber" : 122,
        "startColumnNumber" : 93,
        "endLineNumber" : 295,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String groupKey=GroupKey2.getKey(dataId,group,tenant);\n  String autoTag=request.getHeader(\"Vipserver-Tag\");\n  boolean notify=Boolean.valueOf(request.getHeader(\"notify\"));\n  String requestIpApp=RequestUtil.getAppName(request);\n  int lockResult=tryConfigReadLock(groupKey);\n  final String requestIp=RequestUtil.getRemoteIp(request);\n  boolean isBeta=false;\n  if (lockResult > 0) {\n    FileInputStream fis=null;\n    try {\n      String md5=Constants.NULL;\n      long lastModified=0L;\n      CacheItem cacheItem=ConfigCacheService.getContentCache(groupKey);\n      if (cacheItem.isBeta() && cacheItem.getIps4Beta().contains(clientIp)) {\n        isBeta=true;\n      }\n      final String configType=(null != cacheItem.getType()) ? cacheItem.getType() : FileTypeEnum.TEXT.getFileType();\n      response.setHeader(\"Config-Type\",configType);\n      FileTypeEnum fileTypeEnum=FileTypeEnum.getFileTypeEnumByFileExtensionOrFileType(configType);\n      String contentTypeHeader=fileTypeEnum.getContentType();\n      response.setHeader(HttpHeaderConsts.CONTENT_TYPE,contentTypeHeader);\n      File file=null;\n      ConfigInfoBase configInfoBase=null;\n      PrintWriter out=null;\n      if (isBeta) {\n        md5=cacheItem.getMd54Beta();\n        lastModified=cacheItem.getLastModifiedTs4Beta();\n        if (PropertyUtil.isDirectRead()) {\n          configInfoBase=persistService.findConfigInfo4Beta(dataId,group,tenant);\n        }\n else {\n          file=DiskUtil.targetBetaFile(dataId,group,tenant);\n        }\n        response.setHeader(\"isBeta\",\"true\");\n      }\n else {\n        if (StringUtils.isBlank(tag)) {\n          if (isUseTag(cacheItem,autoTag)) {\n            if (cacheItem.tagMd5 != null) {\n              md5=cacheItem.tagMd5.get(autoTag);\n            }\n            if (cacheItem.tagLastModifiedTs != null) {\n              lastModified=cacheItem.tagLastModifiedTs.get(autoTag);\n            }\n            if (PropertyUtil.isDirectRead()) {\n              configInfoBase=persistService.findConfigInfo4Tag(dataId,group,tenant,autoTag);\n            }\n else {\n              file=DiskUtil.targetTagFile(dataId,group,tenant,autoTag);\n            }\n            response.setHeader(\"Vipserver-Tag\",URLEncoder.encode(autoTag,StandardCharsets.UTF_8.displayName()));\n          }\n else {\n            md5=cacheItem.getMd5();\n            lastModified=cacheItem.getLastModifiedTs();\n            if (PropertyUtil.isDirectRead()) {\n              configInfoBase=persistService.findConfigInfo(dataId,group,tenant);\n            }\n else {\n              file=DiskUtil.targetFile(dataId,group,tenant);\n            }\n            if (configInfoBase == null && fileNotExist(file)) {\n              ConfigTraceService.logPullEvent(dataId,group,tenant,requestIpApp,-1,ConfigTraceService.PULL_EVENT_NOTFOUND,-1,requestIp,notify);\n              response.setStatus(HttpServletResponse.SC_NOT_FOUND);\n              response.getWriter().println(\"config data not exist\");\n              return HttpServletResponse.SC_NOT_FOUND + \"\";\n            }\n          }\n        }\n else {\n          if (cacheItem.tagMd5 != null) {\n            md5=cacheItem.tagMd5.get(tag);\n          }\n          if (cacheItem.tagLastModifiedTs != null) {\n            Long lm=cacheItem.tagLastModifiedTs.get(tag);\n            if (lm != null) {\n              lastModified=lm;\n            }\n          }\n          if (PropertyUtil.isDirectRead()) {\n            configInfoBase=persistService.findConfigInfo4Tag(dataId,group,tenant,tag);\n          }\n else {\n            file=DiskUtil.targetTagFile(dataId,group,tenant,tag);\n          }\n          if (configInfoBase == null && fileNotExist(file)) {\n            ConfigTraceService.logPullEvent(dataId,group,tenant,requestIpApp,-1,ConfigTraceService.PULL_EVENT_NOTFOUND,-1,requestIp,notify);\n            response.setStatus(HttpServletResponse.SC_NOT_FOUND);\n            response.getWriter().println(\"config data not exist\");\n            return HttpServletResponse.SC_NOT_FOUND + \"\";\n          }\n        }\n      }\n      response.setHeader(Constants.CONTENT_MD5,md5);\n      response.setHeader(\"Pragma\",\"no-cache\");\n      response.setDateHeader(\"Expires\",0);\n      response.setHeader(\"Cache-Control\",\"no-cache,no-store\");\n      if (PropertyUtil.isDirectRead()) {\n        response.setDateHeader(\"Last-Modified\",lastModified);\n      }\n else {\n        fis=new FileInputStream(file);\n        response.setDateHeader(\"Last-Modified\",file.lastModified());\n      }\n      if (PropertyUtil.isDirectRead()) {\n        out=response.getWriter();\n        out.print(configInfoBase.getContent());\n        out.flush();\n        out.close();\n      }\n else {\n        fis.getChannel().transferTo(0L,fis.getChannel().size(),Channels.newChannel(response.getOutputStream()));\n      }\n      LogUtil.PULL_CHECK_LOG.warn(\"{}|{}|{}|{}\",groupKey,requestIp,md5,TimeUtils.getCurrentTimeStr());\n      final long delayed=System.currentTimeMillis() - lastModified;\n      ConfigTraceService.logPullEvent(dataId,group,tenant,requestIpApp,lastModified,ConfigTraceService.PULL_EVENT_OK,delayed,requestIp,notify);\n    }\n  finally {\n      releaseConfigReadLock(groupKey);\n      IoUtils.closeQuietly(fis);\n    }\n  }\n else   if (lockResult == 0) {\n    ConfigTraceService.logPullEvent(dataId,group,tenant,requestIpApp,-1,ConfigTraceService.PULL_EVENT_NOTFOUND,-1,requestIp,notify);\n    response.setStatus(HttpServletResponse.SC_NOT_FOUND);\n    response.getWriter().println(\"config data not exist\");\n    return HttpServletResponse.SC_NOT_FOUND + \"\";\n  }\n else {\n    PULL_LOG.info(\"[client-get] clientIp={}, {}, get data during dump\",clientIp,groupKey);\n    response.setStatus(HttpServletResponse.SC_CONFLICT);\n    response.getWriter().println(\"requested file is being modified, please try later.\");\n    return HttpServletResponse.SC_CONFLICT + \"\";\n  }\n  return HttpServletResponse.SC_OK + \"\";\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 736,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 9598,
        "startLineNumber" : 118,
        "startColumnNumber" : 4,
        "endLineNumber" : 295,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Execute to get config API.\n */\npublic String doGetConfig(HttpServletRequest request,HttpServletResponse response,String dataId,String group,String tenant,String tag,String clientIp) throws IOException, ServletException {\n  final String groupKey=GroupKey2.getKey(dataId,group,tenant);\n  String autoTag=request.getHeader(\"Vipserver-Tag\");\n  boolean notify=Boolean.valueOf(request.getHeader(\"notify\"));\n  String requestIpApp=RequestUtil.getAppName(request);\n  int lockResult=tryConfigReadLock(groupKey);\n  final String requestIp=RequestUtil.getRemoteIp(request);\n  boolean isBeta=false;\n  if (lockResult > 0) {\n    FileInputStream fis=null;\n    try {\n      String md5=Constants.NULL;\n      long lastModified=0L;\n      CacheItem cacheItem=ConfigCacheService.getContentCache(groupKey);\n      if (cacheItem.isBeta() && cacheItem.getIps4Beta().contains(clientIp)) {\n        isBeta=true;\n      }\n      final String configType=(null != cacheItem.getType()) ? cacheItem.getType() : FileTypeEnum.TEXT.getFileType();\n      response.setHeader(\"Config-Type\",configType);\n      FileTypeEnum fileTypeEnum=FileTypeEnum.getFileTypeEnumByFileExtensionOrFileType(configType);\n      String contentTypeHeader=fileTypeEnum.getContentType();\n      response.setHeader(HttpHeaderConsts.CONTENT_TYPE,contentTypeHeader);\n      File file=null;\n      ConfigInfoBase configInfoBase=null;\n      PrintWriter out=null;\n      if (isBeta) {\n        md5=cacheItem.getMd54Beta();\n        lastModified=cacheItem.getLastModifiedTs4Beta();\n        if (PropertyUtil.isDirectRead()) {\n          configInfoBase=persistService.findConfigInfo4Beta(dataId,group,tenant);\n        }\n else {\n          file=DiskUtil.targetBetaFile(dataId,group,tenant);\n        }\n        response.setHeader(\"isBeta\",\"true\");\n      }\n else {\n        if (StringUtils.isBlank(tag)) {\n          if (isUseTag(cacheItem,autoTag)) {\n            if (cacheItem.tagMd5 != null) {\n              md5=cacheItem.tagMd5.get(autoTag);\n            }\n            if (cacheItem.tagLastModifiedTs != null) {\n              lastModified=cacheItem.tagLastModifiedTs.get(autoTag);\n            }\n            if (PropertyUtil.isDirectRead()) {\n              configInfoBase=persistService.findConfigInfo4Tag(dataId,group,tenant,autoTag);\n            }\n else {\n              file=DiskUtil.targetTagFile(dataId,group,tenant,autoTag);\n            }\n            response.setHeader(\"Vipserver-Tag\",URLEncoder.encode(autoTag,StandardCharsets.UTF_8.displayName()));\n          }\n else {\n            md5=cacheItem.getMd5();\n            lastModified=cacheItem.getLastModifiedTs();\n            if (PropertyUtil.isDirectRead()) {\n              configInfoBase=persistService.findConfigInfo(dataId,group,tenant);\n            }\n else {\n              file=DiskUtil.targetFile(dataId,group,tenant);\n            }\n            if (configInfoBase == null && fileNotExist(file)) {\n              ConfigTraceService.logPullEvent(dataId,group,tenant,requestIpApp,-1,ConfigTraceService.PULL_EVENT_NOTFOUND,-1,requestIp,notify);\n              response.setStatus(HttpServletResponse.SC_NOT_FOUND);\n              response.getWriter().println(\"config data not exist\");\n              return HttpServletResponse.SC_NOT_FOUND + \"\";\n            }\n          }\n        }\n else {\n          if (cacheItem.tagMd5 != null) {\n            md5=cacheItem.tagMd5.get(tag);\n          }\n          if (cacheItem.tagLastModifiedTs != null) {\n            Long lm=cacheItem.tagLastModifiedTs.get(tag);\n            if (lm != null) {\n              lastModified=lm;\n            }\n          }\n          if (PropertyUtil.isDirectRead()) {\n            configInfoBase=persistService.findConfigInfo4Tag(dataId,group,tenant,tag);\n          }\n else {\n            file=DiskUtil.targetTagFile(dataId,group,tenant,tag);\n          }\n          if (configInfoBase == null && fileNotExist(file)) {\n            ConfigTraceService.logPullEvent(dataId,group,tenant,requestIpApp,-1,ConfigTraceService.PULL_EVENT_NOTFOUND,-1,requestIp,notify);\n            response.setStatus(HttpServletResponse.SC_NOT_FOUND);\n            response.getWriter().println(\"config data not exist\");\n            return HttpServletResponse.SC_NOT_FOUND + \"\";\n          }\n        }\n      }\n      response.setHeader(Constants.CONTENT_MD5,md5);\n      response.setHeader(\"Pragma\",\"no-cache\");\n      response.setDateHeader(\"Expires\",0);\n      response.setHeader(\"Cache-Control\",\"no-cache,no-store\");\n      if (PropertyUtil.isDirectRead()) {\n        response.setDateHeader(\"Last-Modified\",lastModified);\n      }\n else {\n        fis=new FileInputStream(file);\n        response.setDateHeader(\"Last-Modified\",file.lastModified());\n      }\n      if (PropertyUtil.isDirectRead()) {\n        out=response.getWriter();\n        out.print(configInfoBase.getContent());\n        out.flush();\n        out.close();\n      }\n else {\n        fis.getChannel().transferTo(0L,fis.getChannel().size(),Channels.newChannel(response.getOutputStream()));\n      }\n      LogUtil.PULL_CHECK_LOG.warn(\"{}|{}|{}|{}\",groupKey,requestIp,md5,TimeUtils.getCurrentTimeStr());\n      final long delayed=System.currentTimeMillis() - lastModified;\n      ConfigTraceService.logPullEvent(dataId,group,tenant,requestIpApp,lastModified,ConfigTraceService.PULL_EVENT_OK,delayed,requestIp,notify);\n    }\n  finally {\n      releaseConfigReadLock(groupKey);\n      IoUtils.closeQuietly(fis);\n    }\n  }\n else   if (lockResult == 0) {\n    ConfigTraceService.logPullEvent(dataId,group,tenant,requestIpApp,-1,ConfigTraceService.PULL_EVENT_NOTFOUND,-1,requestIp,notify);\n    response.setStatus(HttpServletResponse.SC_NOT_FOUND);\n    response.getWriter().println(\"config data not exist\");\n    return HttpServletResponse.SC_NOT_FOUND + \"\";\n  }\n else {\n    PULL_LOG.info(\"[client-get] clientIp={}, {}, get data during dump\",clientIp,groupKey);\n    response.setStatus(HttpServletResponse.SC_CONFLICT);\n    response.getWriter().println(\"requested file is being modified, please try later.\");\n    return HttpServletResponse.SC_CONFLICT + \"\";\n  }\n  return HttpServletResponse.SC_OK + \"\";\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 774,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 257,
        "startColumnNumber" : 16,
        "endLineNumber" : 257,
        "endColumnNumber" : 116
      },
      "nodeContext" : "LogUtil.PULL_CHECK_LOG.warn(\"{}|{}|{}|{}\",groupKey,requestIp,md5,TimeUtils.getCurrentTimeStr());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.alibaba.nacos.config.server.utils.TimeUtils"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 257,
    "startColumnNumber" : 85,
    "endLineNumber" : 257,
    "endColumnNumber" : 94
  } ],
  "layoutRelationDataList" : [ ]
}