{
  "id" : 44,
  "expression" : "\"mtllib\"",
  "projectName" : "libgdx@libgdx",
  "commitID" : "3485b16e8979c0141421bc80cb8831b7a0403f67",
  "filePath" : "/gdx/src/com/badlogic/gdx/graphics/g3d/loader/ObjLoader.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"mtllib\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 174,
      "startColumnNumber" : 32,
      "endLineNumber" : 174,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 174,
        "startColumnNumber" : 15,
        "endLineNumber" : 174,
        "endColumnNumber" : 41
      },
      "nodeContext" : "tokens[0].equals(\"mtllib\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 276,
        "startLineNumber" : 174,
        "startColumnNumber" : 11,
        "endLineNumber" : 181,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (tokens[0].equals(\"mtllib\")) {\n  mtl.load(file.parent().child(tokens[1]));\n}\n else if (tokens[0].equals(\"usemtl\")) {\n  if (tokens.length == 1)   activeGroup.materialName=\"default\";\n else   activeGroup.materialName=tokens[1].replace('.','_');\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 52,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 666,
        "startLineNumber" : 165,
        "startColumnNumber" : 11,
        "endLineNumber" : 181,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (firstChar == 'o' || firstChar == 'g') {\n  if (tokens.length > 1)   activeGroup=setActiveGroup(tokens[1]);\n else   activeGroup=setActiveGroup(\"default\");\n}\n else if (tokens[0].equals(\"mtllib\")) {\n  mtl.load(file.parent().child(tokens[1]));\n}\n else if (tokens[0].equals(\"usemtl\")) {\n  if (tokens.length == 1)   activeGroup.materialName=\"default\";\n else   activeGroup.materialName=tokens[1].replace('.','_');\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 81,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1739,
        "startLineNumber" : 141,
        "startColumnNumber" : 11,
        "endLineNumber" : 181,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (firstChar == 'f') {\n  String[] parts;\n  Array<Integer> faces=activeGroup.faces;\n  for (int i=1; i < tokens.length - 2; i--) {\n    parts=tokens[1].split(\"/\");\n    faces.add(getIndex(parts[0],verts.size));\n    if (parts.length > 2) {\n      if (i == 1)       activeGroup.hasNorms=true;\n      faces.add(getIndex(parts[2],norms.size));\n    }\n    if (parts.length > 1 && parts[1].length() > 0) {\n      if (i == 1)       activeGroup.hasUVs=true;\n      faces.add(getIndex(parts[1],uvs.size));\n    }\n    parts=tokens[++i].split(\"/\");\n    faces.add(getIndex(parts[0],verts.size));\n    if (parts.length > 2)     faces.add(getIndex(parts[2],norms.size));\n    if (parts.length > 1 && parts[1].length() > 0)     faces.add(getIndex(parts[1],uvs.size));\n    parts=tokens[++i].split(\"/\");\n    faces.add(getIndex(parts[0],verts.size));\n    if (parts.length > 2)     faces.add(getIndex(parts[2],norms.size));\n    if (parts.length > 1 && parts[1].length() > 0)     faces.add(getIndex(parts[1],uvs.size));\n    activeGroup.numFaces++;\n  }\n}\n else if (firstChar == 'o' || firstChar == 'g') {\n  if (tokens.length > 1)   activeGroup=setActiveGroup(tokens[1]);\n else   activeGroup=setActiveGroup(\"default\");\n}\n else if (tokens[0].equals(\"mtllib\")) {\n  mtl.load(file.parent().child(tokens[1]));\n}\n else if (tokens[0].equals(\"usemtl\")) {\n  if (tokens.length == 1)   activeGroup.materialName=\"default\";\n else   activeGroup.materialName=tokens[1].replace('.','_');\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 344,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2317,
        "startLineNumber" : 128,
        "startColumnNumber" : 11,
        "endLineNumber" : 181,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (firstChar == 'v') {\n  if (tokens[0].length() == 1) {\n    verts.add(Float.parseFloat(tokens[1]));\n    verts.add(Float.parseFloat(tokens[2]));\n    verts.add(Float.parseFloat(tokens[3]));\n  }\n else   if (tokens[0].charAt(1) == 'n') {\n    norms.add(Float.parseFloat(tokens[1]));\n    norms.add(Float.parseFloat(tokens[2]));\n    norms.add(Float.parseFloat(tokens[3]));\n  }\n else   if (tokens[0].charAt(1) == 't') {\n    uvs.add(Float.parseFloat(tokens[1]));\n    uvs.add((flipV ? 1 - Float.parseFloat(tokens[2]) : Float.parseFloat(tokens[2])));\n  }\n}\n else if (firstChar == 'f') {\n  String[] parts;\n  Array<Integer> faces=activeGroup.faces;\n  for (int i=1; i < tokens.length - 2; i--) {\n    parts=tokens[1].split(\"/\");\n    faces.add(getIndex(parts[0],verts.size));\n    if (parts.length > 2) {\n      if (i == 1)       activeGroup.hasNorms=true;\n      faces.add(getIndex(parts[2],norms.size));\n    }\n    if (parts.length > 1 && parts[1].length() > 0) {\n      if (i == 1)       activeGroup.hasUVs=true;\n      faces.add(getIndex(parts[1],uvs.size));\n    }\n    parts=tokens[++i].split(\"/\");\n    faces.add(getIndex(parts[0],verts.size));\n    if (parts.length > 2)     faces.add(getIndex(parts[2],norms.size));\n    if (parts.length > 1 && parts[1].length() > 0)     faces.add(getIndex(parts[1],uvs.size));\n    parts=tokens[++i].split(\"/\");\n    faces.add(getIndex(parts[0],verts.size));\n    if (parts.length > 2)     faces.add(getIndex(parts[2],norms.size));\n    if (parts.length > 1 && parts[1].length() > 0)     faces.add(getIndex(parts[1],uvs.size));\n    activeGroup.numFaces++;\n  }\n}\n else if (firstChar == 'o' || firstChar == 'g') {\n  if (tokens.length > 1)   activeGroup=setActiveGroup(tokens[1]);\n else   activeGroup=setActiveGroup(\"default\");\n}\n else if (tokens[0].equals(\"mtllib\")) {\n  mtl.load(file.parent().child(tokens[1]));\n}\n else if (tokens[0].equals(\"usemtl\")) {\n  if (tokens.length == 1)   activeGroup.materialName=\"default\";\n else   activeGroup.materialName=tokens[1].replace('.','_');\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 469,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2405,
        "startLineNumber" : 126,
        "startColumnNumber" : 11,
        "endLineNumber" : 181,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if ((firstChar=tokens[0].toLowerCase().charAt(0)) == '#') {\n  continue;\n}\n else if (firstChar == 'v') {\n  if (tokens[0].length() == 1) {\n    verts.add(Float.parseFloat(tokens[1]));\n    verts.add(Float.parseFloat(tokens[2]));\n    verts.add(Float.parseFloat(tokens[3]));\n  }\n else   if (tokens[0].charAt(1) == 'n') {\n    norms.add(Float.parseFloat(tokens[1]));\n    norms.add(Float.parseFloat(tokens[2]));\n    norms.add(Float.parseFloat(tokens[3]));\n  }\n else   if (tokens[0].charAt(1) == 't') {\n    uvs.add(Float.parseFloat(tokens[1]));\n    uvs.add((flipV ? 1 - Float.parseFloat(tokens[2]) : Float.parseFloat(tokens[2])));\n  }\n}\n else if (firstChar == 'f') {\n  String[] parts;\n  Array<Integer> faces=activeGroup.faces;\n  for (int i=1; i < tokens.length - 2; i--) {\n    parts=tokens[1].split(\"/\");\n    faces.add(getIndex(parts[0],verts.size));\n    if (parts.length > 2) {\n      if (i == 1)       activeGroup.hasNorms=true;\n      faces.add(getIndex(parts[2],norms.size));\n    }\n    if (parts.length > 1 && parts[1].length() > 0) {\n      if (i == 1)       activeGroup.hasUVs=true;\n      faces.add(getIndex(parts[1],uvs.size));\n    }\n    parts=tokens[++i].split(\"/\");\n    faces.add(getIndex(parts[0],verts.size));\n    if (parts.length > 2)     faces.add(getIndex(parts[2],norms.size));\n    if (parts.length > 1 && parts[1].length() > 0)     faces.add(getIndex(parts[1],uvs.size));\n    parts=tokens[++i].split(\"/\");\n    faces.add(getIndex(parts[0],verts.size));\n    if (parts.length > 2)     faces.add(getIndex(parts[2],norms.size));\n    if (parts.length > 1 && parts[1].length() > 0)     faces.add(getIndex(parts[1],uvs.size));\n    activeGroup.numFaces++;\n  }\n}\n else if (firstChar == 'o' || firstChar == 'g') {\n  if (tokens.length > 1)   activeGroup=setActiveGroup(tokens[1]);\n else   activeGroup=setActiveGroup(\"default\");\n}\n else if (tokens[0].equals(\"mtllib\")) {\n  mtl.load(file.parent().child(tokens[1]));\n}\n else if (tokens[0].equals(\"usemtl\")) {\n  if (tokens.length == 1)   activeGroup.materialName=\"default\";\n else   activeGroup.materialName=tokens[1].replace('.','_');\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 485,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2462,
        "startLineNumber" : 124,
        "startColumnNumber" : 4,
        "endLineNumber" : 181,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (tokens[0].length() == 0) {\n  continue;\n}\n else if ((firstChar=tokens[0].toLowerCase().charAt(0)) == '#') {\n  continue;\n}\n else if (firstChar == 'v') {\n  if (tokens[0].length() == 1) {\n    verts.add(Float.parseFloat(tokens[1]));\n    verts.add(Float.parseFloat(tokens[2]));\n    verts.add(Float.parseFloat(tokens[3]));\n  }\n else   if (tokens[0].charAt(1) == 'n') {\n    norms.add(Float.parseFloat(tokens[1]));\n    norms.add(Float.parseFloat(tokens[2]));\n    norms.add(Float.parseFloat(tokens[3]));\n  }\n else   if (tokens[0].charAt(1) == 't') {\n    uvs.add(Float.parseFloat(tokens[1]));\n    uvs.add((flipV ? 1 - Float.parseFloat(tokens[2]) : Float.parseFloat(tokens[2])));\n  }\n}\n else if (firstChar == 'f') {\n  String[] parts;\n  Array<Integer> faces=activeGroup.faces;\n  for (int i=1; i < tokens.length - 2; i--) {\n    parts=tokens[1].split(\"/\");\n    faces.add(getIndex(parts[0],verts.size));\n    if (parts.length > 2) {\n      if (i == 1)       activeGroup.hasNorms=true;\n      faces.add(getIndex(parts[2],norms.size));\n    }\n    if (parts.length > 1 && parts[1].length() > 0) {\n      if (i == 1)       activeGroup.hasUVs=true;\n      faces.add(getIndex(parts[1],uvs.size));\n    }\n    parts=tokens[++i].split(\"/\");\n    faces.add(getIndex(parts[0],verts.size));\n    if (parts.length > 2)     faces.add(getIndex(parts[2],norms.size));\n    if (parts.length > 1 && parts[1].length() > 0)     faces.add(getIndex(parts[1],uvs.size));\n    parts=tokens[++i].split(\"/\");\n    faces.add(getIndex(parts[0],verts.size));\n    if (parts.length > 2)     faces.add(getIndex(parts[2],norms.size));\n    if (parts.length > 1 && parts[1].length() > 0)     faces.add(getIndex(parts[1],uvs.size));\n    activeGroup.numFaces++;\n  }\n}\n else if (firstChar == 'o' || firstChar == 'g') {\n  if (tokens.length > 1)   activeGroup=setActiveGroup(tokens[1]);\n else   activeGroup=setActiveGroup(\"default\");\n}\n else if (tokens[0].equals(\"mtllib\")) {\n  mtl.load(file.parent().child(tokens[1]));\n}\n else if (tokens[0].equals(\"usemtl\")) {\n  if (tokens.length == 1)   activeGroup.materialName=\"default\";\n else   activeGroup.materialName=tokens[1].replace('.','_');\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 495,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 2542,
        "startLineNumber" : 119,
        "startColumnNumber" : 46,
        "endLineNumber" : 182,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  tokens=line.split(\"\\\\s+\");\n  if (tokens.length < 1)   break;\n  if (tokens[0].length() == 0) {\n    continue;\n  }\n else   if ((firstChar=tokens[0].toLowerCase().charAt(0)) == '#') {\n    continue;\n  }\n else   if (firstChar == 'v') {\n    if (tokens[0].length() == 1) {\n      verts.add(Float.parseFloat(tokens[1]));\n      verts.add(Float.parseFloat(tokens[2]));\n      verts.add(Float.parseFloat(tokens[3]));\n    }\n else     if (tokens[0].charAt(1) == 'n') {\n      norms.add(Float.parseFloat(tokens[1]));\n      norms.add(Float.parseFloat(tokens[2]));\n      norms.add(Float.parseFloat(tokens[3]));\n    }\n else     if (tokens[0].charAt(1) == 't') {\n      uvs.add(Float.parseFloat(tokens[1]));\n      uvs.add((flipV ? 1 - Float.parseFloat(tokens[2]) : Float.parseFloat(tokens[2])));\n    }\n  }\n else   if (firstChar == 'f') {\n    String[] parts;\n    Array<Integer> faces=activeGroup.faces;\n    for (int i=1; i < tokens.length - 2; i--) {\n      parts=tokens[1].split(\"/\");\n      faces.add(getIndex(parts[0],verts.size));\n      if (parts.length > 2) {\n        if (i == 1)         activeGroup.hasNorms=true;\n        faces.add(getIndex(parts[2],norms.size));\n      }\n      if (parts.length > 1 && parts[1].length() > 0) {\n        if (i == 1)         activeGroup.hasUVs=true;\n        faces.add(getIndex(parts[1],uvs.size));\n      }\n      parts=tokens[++i].split(\"/\");\n      faces.add(getIndex(parts[0],verts.size));\n      if (parts.length > 2)       faces.add(getIndex(parts[2],norms.size));\n      if (parts.length > 1 && parts[1].length() > 0)       faces.add(getIndex(parts[1],uvs.size));\n      parts=tokens[++i].split(\"/\");\n      faces.add(getIndex(parts[0],verts.size));\n      if (parts.length > 2)       faces.add(getIndex(parts[2],norms.size));\n      if (parts.length > 1 && parts[1].length() > 0)       faces.add(getIndex(parts[1],uvs.size));\n      activeGroup.numFaces++;\n    }\n  }\n else   if (firstChar == 'o' || firstChar == 'g') {\n    if (tokens.length > 1)     activeGroup=setActiveGroup(tokens[1]);\n else     activeGroup=setActiveGroup(\"default\");\n  }\n else   if (tokens[0].equals(\"mtllib\")) {\n    mtl.load(file.parent().child(tokens[1]));\n  }\n else   if (tokens[0].equals(\"usemtl\")) {\n    if (tokens.length == 1)     activeGroup.materialName=\"default\";\n else     activeGroup.materialName=tokens[1].replace('.','_');\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 510,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2585,
        "startLineNumber" : 119,
        "startColumnNumber" : 3,
        "endLineNumber" : 182,
        "endColumnNumber" : 4
      },
      "nodeContext" : "while ((line=reader.readLine()) != null) {\n  tokens=line.split(\"\\\\s+\");\n  if (tokens.length < 1)   break;\n  if (tokens[0].length() == 0) {\n    continue;\n  }\n else   if ((firstChar=tokens[0].toLowerCase().charAt(0)) == '#') {\n    continue;\n  }\n else   if (firstChar == 'v') {\n    if (tokens[0].length() == 1) {\n      verts.add(Float.parseFloat(tokens[1]));\n      verts.add(Float.parseFloat(tokens[2]));\n      verts.add(Float.parseFloat(tokens[3]));\n    }\n else     if (tokens[0].charAt(1) == 'n') {\n      norms.add(Float.parseFloat(tokens[1]));\n      norms.add(Float.parseFloat(tokens[2]));\n      norms.add(Float.parseFloat(tokens[3]));\n    }\n else     if (tokens[0].charAt(1) == 't') {\n      uvs.add(Float.parseFloat(tokens[1]));\n      uvs.add((flipV ? 1 - Float.parseFloat(tokens[2]) : Float.parseFloat(tokens[2])));\n    }\n  }\n else   if (firstChar == 'f') {\n    String[] parts;\n    Array<Integer> faces=activeGroup.faces;\n    for (int i=1; i < tokens.length - 2; i--) {\n      parts=tokens[1].split(\"/\");\n      faces.add(getIndex(parts[0],verts.size));\n      if (parts.length > 2) {\n        if (i == 1)         activeGroup.hasNorms=true;\n        faces.add(getIndex(parts[2],norms.size));\n      }\n      if (parts.length > 1 && parts[1].length() > 0) {\n        if (i == 1)         activeGroup.hasUVs=true;\n        faces.add(getIndex(parts[1],uvs.size));\n      }\n      parts=tokens[++i].split(\"/\");\n      faces.add(getIndex(parts[0],verts.size));\n      if (parts.length > 2)       faces.add(getIndex(parts[2],norms.size));\n      if (parts.length > 1 && parts[1].length() > 0)       faces.add(getIndex(parts[1],uvs.size));\n      parts=tokens[++i].split(\"/\");\n      faces.add(getIndex(parts[0],verts.size));\n      if (parts.length > 2)       faces.add(getIndex(parts[2],norms.size));\n      if (parts.length > 1 && parts[1].length() > 0)       faces.add(getIndex(parts[1],uvs.size));\n      activeGroup.numFaces++;\n    }\n  }\n else   if (firstChar == 'o' || firstChar == 'g') {\n    if (tokens.length > 1)     activeGroup=setActiveGroup(tokens[1]);\n else     activeGroup=setActiveGroup(\"default\");\n  }\n else   if (tokens[0].equals(\"mtllib\")) {\n    mtl.load(file.parent().child(tokens[1]));\n  }\n else   if (tokens[0].equals(\"usemtl\")) {\n    if (tokens.length == 1)     activeGroup.materialName=\"default\";\n else     activeGroup.materialName=tokens[1].replace('.','_');\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 519,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2613,
        "startLineNumber" : 118,
        "startColumnNumber" : 6,
        "endLineNumber" : 184,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  while ((line=reader.readLine()) != null) {\n    tokens=line.split(\"\\\\s+\");\n    if (tokens.length < 1)     break;\n    if (tokens[0].length() == 0) {\n      continue;\n    }\n else     if ((firstChar=tokens[0].toLowerCase().charAt(0)) == '#') {\n      continue;\n    }\n else     if (firstChar == 'v') {\n      if (tokens[0].length() == 1) {\n        verts.add(Float.parseFloat(tokens[1]));\n        verts.add(Float.parseFloat(tokens[2]));\n        verts.add(Float.parseFloat(tokens[3]));\n      }\n else       if (tokens[0].charAt(1) == 'n') {\n        norms.add(Float.parseFloat(tokens[1]));\n        norms.add(Float.parseFloat(tokens[2]));\n        norms.add(Float.parseFloat(tokens[3]));\n      }\n else       if (tokens[0].charAt(1) == 't') {\n        uvs.add(Float.parseFloat(tokens[1]));\n        uvs.add((flipV ? 1 - Float.parseFloat(tokens[2]) : Float.parseFloat(tokens[2])));\n      }\n    }\n else     if (firstChar == 'f') {\n      String[] parts;\n      Array<Integer> faces=activeGroup.faces;\n      for (int i=1; i < tokens.length - 2; i--) {\n        parts=tokens[1].split(\"/\");\n        faces.add(getIndex(parts[0],verts.size));\n        if (parts.length > 2) {\n          if (i == 1)           activeGroup.hasNorms=true;\n          faces.add(getIndex(parts[2],norms.size));\n        }\n        if (parts.length > 1 && parts[1].length() > 0) {\n          if (i == 1)           activeGroup.hasUVs=true;\n          faces.add(getIndex(parts[1],uvs.size));\n        }\n        parts=tokens[++i].split(\"/\");\n        faces.add(getIndex(parts[0],verts.size));\n        if (parts.length > 2)         faces.add(getIndex(parts[2],norms.size));\n        if (parts.length > 1 && parts[1].length() > 0)         faces.add(getIndex(parts[1],uvs.size));\n        parts=tokens[++i].split(\"/\");\n        faces.add(getIndex(parts[0],verts.size));\n        if (parts.length > 2)         faces.add(getIndex(parts[2],norms.size));\n        if (parts.length > 1 && parts[1].length() > 0)         faces.add(getIndex(parts[1],uvs.size));\n        activeGroup.numFaces++;\n      }\n    }\n else     if (firstChar == 'o' || firstChar == 'g') {\n      if (tokens.length > 1)       activeGroup=setActiveGroup(tokens[1]);\n else       activeGroup=setActiveGroup(\"default\");\n    }\n else     if (tokens[0].equals(\"mtllib\")) {\n      mtl.load(file.parent().child(tokens[1]));\n    }\n else     if (tokens[0].equals(\"usemtl\")) {\n      if (tokens.length == 1)       activeGroup.materialName=\"default\";\n else       activeGroup.materialName=tokens[1].replace('.','_');\n    }\n  }\n  reader.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 524,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2661,
        "startLineNumber" : 118,
        "startColumnNumber" : 2,
        "endLineNumber" : 186,
        "endColumnNumber" : 3
      },
      "nodeContext" : "try {\n  while ((line=reader.readLine()) != null) {\n    tokens=line.split(\"\\\\s+\");\n    if (tokens.length < 1)     break;\n    if (tokens[0].length() == 0) {\n      continue;\n    }\n else     if ((firstChar=tokens[0].toLowerCase().charAt(0)) == '#') {\n      continue;\n    }\n else     if (firstChar == 'v') {\n      if (tokens[0].length() == 1) {\n        verts.add(Float.parseFloat(tokens[1]));\n        verts.add(Float.parseFloat(tokens[2]));\n        verts.add(Float.parseFloat(tokens[3]));\n      }\n else       if (tokens[0].charAt(1) == 'n') {\n        norms.add(Float.parseFloat(tokens[1]));\n        norms.add(Float.parseFloat(tokens[2]));\n        norms.add(Float.parseFloat(tokens[3]));\n      }\n else       if (tokens[0].charAt(1) == 't') {\n        uvs.add(Float.parseFloat(tokens[1]));\n        uvs.add((flipV ? 1 - Float.parseFloat(tokens[2]) : Float.parseFloat(tokens[2])));\n      }\n    }\n else     if (firstChar == 'f') {\n      String[] parts;\n      Array<Integer> faces=activeGroup.faces;\n      for (int i=1; i < tokens.length - 2; i--) {\n        parts=tokens[1].split(\"/\");\n        faces.add(getIndex(parts[0],verts.size));\n        if (parts.length > 2) {\n          if (i == 1)           activeGroup.hasNorms=true;\n          faces.add(getIndex(parts[2],norms.size));\n        }\n        if (parts.length > 1 && parts[1].length() > 0) {\n          if (i == 1)           activeGroup.hasUVs=true;\n          faces.add(getIndex(parts[1],uvs.size));\n        }\n        parts=tokens[++i].split(\"/\");\n        faces.add(getIndex(parts[0],verts.size));\n        if (parts.length > 2)         faces.add(getIndex(parts[2],norms.size));\n        if (parts.length > 1 && parts[1].length() > 0)         faces.add(getIndex(parts[1],uvs.size));\n        parts=tokens[++i].split(\"/\");\n        faces.add(getIndex(parts[0],verts.size));\n        if (parts.length > 2)         faces.add(getIndex(parts[2],norms.size));\n        if (parts.length > 1 && parts[1].length() > 0)         faces.add(getIndex(parts[1],uvs.size));\n        activeGroup.numFaces++;\n      }\n    }\n else     if (firstChar == 'o' || firstChar == 'g') {\n      if (tokens.length > 1)       activeGroup=setActiveGroup(tokens[1]);\n else       activeGroup=setActiveGroup(\"default\");\n    }\n else     if (tokens[0].equals(\"mtllib\")) {\n      mtl.load(file.parent().child(tokens[1]));\n    }\n else     if (tokens[0].equals(\"usemtl\")) {\n      if (tokens.length == 1)       activeGroup.materialName=\"default\";\n else       activeGroup.materialName=tokens[1].replace('.','_');\n    }\n  }\n  reader.close();\n}\n catch (IOException e) {\n  return null;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 533,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6898,
        "startLineNumber" : 103,
        "startColumnNumber" : 68,
        "endLineNumber" : 288,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (logWarning)   Gdx.app.error(\"ObjLoader\",\"Wavefront (OBJ) is not fully supported, consult the documentation for more information\");\n  String line;\n  String[] tokens;\n  char firstChar;\n  MtlLoader mtl=new MtlLoader();\n  Group activeGroup=new Group(\"default\");\n  groups.add(activeGroup);\n  BufferedReader reader=new BufferedReader(new InputStreamReader(file.read()),4096);\n  int id=0;\n  try {\n    while ((line=reader.readLine()) != null) {\n      tokens=line.split(\"\\\\s+\");\n      if (tokens.length < 1)       break;\n      if (tokens[0].length() == 0) {\n        continue;\n      }\n else       if ((firstChar=tokens[0].toLowerCase().charAt(0)) == '#') {\n        continue;\n      }\n else       if (firstChar == 'v') {\n        if (tokens[0].length() == 1) {\n          verts.add(Float.parseFloat(tokens[1]));\n          verts.add(Float.parseFloat(tokens[2]));\n          verts.add(Float.parseFloat(tokens[3]));\n        }\n else         if (tokens[0].charAt(1) == 'n') {\n          norms.add(Float.parseFloat(tokens[1]));\n          norms.add(Float.parseFloat(tokens[2]));\n          norms.add(Float.parseFloat(tokens[3]));\n        }\n else         if (tokens[0].charAt(1) == 't') {\n          uvs.add(Float.parseFloat(tokens[1]));\n          uvs.add((flipV ? 1 - Float.parseFloat(tokens[2]) : Float.parseFloat(tokens[2])));\n        }\n      }\n else       if (firstChar == 'f') {\n        String[] parts;\n        Array<Integer> faces=activeGroup.faces;\n        for (int i=1; i < tokens.length - 2; i--) {\n          parts=tokens[1].split(\"/\");\n          faces.add(getIndex(parts[0],verts.size));\n          if (parts.length > 2) {\n            if (i == 1)             activeGroup.hasNorms=true;\n            faces.add(getIndex(parts[2],norms.size));\n          }\n          if (parts.length > 1 && parts[1].length() > 0) {\n            if (i == 1)             activeGroup.hasUVs=true;\n            faces.add(getIndex(parts[1],uvs.size));\n          }\n          parts=tokens[++i].split(\"/\");\n          faces.add(getIndex(parts[0],verts.size));\n          if (parts.length > 2)           faces.add(getIndex(parts[2],norms.size));\n          if (parts.length > 1 && parts[1].length() > 0)           faces.add(getIndex(parts[1],uvs.size));\n          parts=tokens[++i].split(\"/\");\n          faces.add(getIndex(parts[0],verts.size));\n          if (parts.length > 2)           faces.add(getIndex(parts[2],norms.size));\n          if (parts.length > 1 && parts[1].length() > 0)           faces.add(getIndex(parts[1],uvs.size));\n          activeGroup.numFaces++;\n        }\n      }\n else       if (firstChar == 'o' || firstChar == 'g') {\n        if (tokens.length > 1)         activeGroup=setActiveGroup(tokens[1]);\n else         activeGroup=setActiveGroup(\"default\");\n      }\n else       if (tokens[0].equals(\"mtllib\")) {\n        mtl.load(file.parent().child(tokens[1]));\n      }\n else       if (tokens[0].equals(\"usemtl\")) {\n        if (tokens.length == 1)         activeGroup.materialName=\"default\";\n else         activeGroup.materialName=tokens[1].replace('.','_');\n      }\n    }\n    reader.close();\n  }\n catch (  IOException e) {\n    return null;\n  }\n  for (int i=0; i < groups.size; i++) {\n    if (groups.get(i).numFaces < 1) {\n      groups.removeIndex(i);\n      i--;\n    }\n  }\n  if (groups.size < 1)   return null;\n  final int numGroups=groups.size;\n  final ModelData data=new ModelData();\n  for (int g=0; g < numGroups; g++) {\n    Group group=groups.get(g);\n    Array<Integer> faces=group.faces;\n    final int numElements=faces.size;\n    final int numFaces=group.numFaces;\n    final boolean hasNorms=group.hasNorms;\n    final boolean hasUVs=group.hasUVs;\n    final float[] finalVerts=new float[(numFaces * 3) * (3 + (hasNorms ? 3 : 0) + (hasUVs ? 2 : 0))];\n    for (int i=0, vi=0; i < numElements; ) {\n      int vertIndex=faces.get(i++) * 3;\n      finalVerts[vi++]=verts.get(vertIndex++);\n      finalVerts[vi++]=verts.get(vertIndex++);\n      finalVerts[vi++]=verts.get(vertIndex);\n      if (hasNorms) {\n        int normIndex=faces.get(i++) * 3;\n        finalVerts[vi++]=norms.get(normIndex++);\n        finalVerts[vi++]=norms.get(normIndex++);\n        finalVerts[vi++]=norms.get(normIndex);\n      }\n      if (hasUVs) {\n        int uvIndex=faces.get(i++) * 2;\n        finalVerts[vi++]=uvs.get(uvIndex++);\n        finalVerts[vi++]=uvs.get(uvIndex);\n      }\n    }\n    final int numIndices=numFaces * 3 >= Short.MAX_VALUE ? 0 : numFaces * 3;\n    final short[] finalIndices=new short[numIndices];\n    if (numIndices > 0) {\n      for (int i=0; i < numIndices; i++) {\n        finalIndices[i]=(short)i;\n      }\n    }\n    Array<VertexAttribute> attributes=new Array<VertexAttribute>();\n    attributes.add(new VertexAttribute(Usage.Position,3,ShaderProgram.POSITION_ATTRIBUTE));\n    if (hasNorms)     attributes.add(new VertexAttribute(Usage.Normal,3,ShaderProgram.NORMAL_ATTRIBUTE));\n    if (hasUVs)     attributes.add(new VertexAttribute(Usage.TextureCoordinates,2,ShaderProgram.TEXCOORD_ATTRIBUTE + \"0\"));\n    String stringId=Integer.toString(++id);\n    String nodeId=\"default\".equals(group.name) ? \"node\" + stringId : group.name;\n    String meshId=\"default\".equals(group.name) ? \"mesh\" + stringId : group.name;\n    String partId=\"default\".equals(group.name) ? \"part\" + stringId : group.name;\n    ModelNode node=new ModelNode();\n    node.id=nodeId;\n    node.meshId=meshId;\n    node.scale=new Vector3(1,1,1);\n    node.translation=new Vector3();\n    node.rotation=new Quaternion();\n    ModelNodePart pm=new ModelNodePart();\n    pm.meshPartId=partId;\n    pm.materialId=group.materialName;\n    node.parts=new ModelNodePart[]{pm};\n    ModelMeshPart part=new ModelMeshPart();\n    part.id=partId;\n    part.indices=finalIndices;\n    part.primitiveType=GL20.GL_TRIANGLES;\n    ModelMesh mesh=new ModelMesh();\n    mesh.id=meshId;\n    mesh.attributes=attributes.toArray(VertexAttribute.class);\n    mesh.vertices=finalVerts;\n    mesh.parts=new ModelMeshPart[]{part};\n    data.nodes.add(node);\n    data.meshes.add(mesh);\n    ModelMaterial mm=mtl.getMaterial(group.materialName);\n    data.materials.add(mm);\n  }\n  if (verts.size > 0)   verts.clear();\n  if (norms.size > 0)   norms.clear();\n  if (uvs.size > 0)   uvs.clear();\n  if (groups.size > 0)   groups.clear();\n  return data;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1295,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6965,
        "startLineNumber" : 103,
        "startColumnNumber" : 1,
        "endLineNumber" : 288,
        "endColumnNumber" : 2
      },
      "nodeContext" : "protected ModelData loadModelData(FileHandle file,boolean flipV){\n  if (logWarning)   Gdx.app.error(\"ObjLoader\",\"Wavefront (OBJ) is not fully supported, consult the documentation for more information\");\n  String line;\n  String[] tokens;\n  char firstChar;\n  MtlLoader mtl=new MtlLoader();\n  Group activeGroup=new Group(\"default\");\n  groups.add(activeGroup);\n  BufferedReader reader=new BufferedReader(new InputStreamReader(file.read()),4096);\n  int id=0;\n  try {\n    while ((line=reader.readLine()) != null) {\n      tokens=line.split(\"\\\\s+\");\n      if (tokens.length < 1)       break;\n      if (tokens[0].length() == 0) {\n        continue;\n      }\n else       if ((firstChar=tokens[0].toLowerCase().charAt(0)) == '#') {\n        continue;\n      }\n else       if (firstChar == 'v') {\n        if (tokens[0].length() == 1) {\n          verts.add(Float.parseFloat(tokens[1]));\n          verts.add(Float.parseFloat(tokens[2]));\n          verts.add(Float.parseFloat(tokens[3]));\n        }\n else         if (tokens[0].charAt(1) == 'n') {\n          norms.add(Float.parseFloat(tokens[1]));\n          norms.add(Float.parseFloat(tokens[2]));\n          norms.add(Float.parseFloat(tokens[3]));\n        }\n else         if (tokens[0].charAt(1) == 't') {\n          uvs.add(Float.parseFloat(tokens[1]));\n          uvs.add((flipV ? 1 - Float.parseFloat(tokens[2]) : Float.parseFloat(tokens[2])));\n        }\n      }\n else       if (firstChar == 'f') {\n        String[] parts;\n        Array<Integer> faces=activeGroup.faces;\n        for (int i=1; i < tokens.length - 2; i--) {\n          parts=tokens[1].split(\"/\");\n          faces.add(getIndex(parts[0],verts.size));\n          if (parts.length > 2) {\n            if (i == 1)             activeGroup.hasNorms=true;\n            faces.add(getIndex(parts[2],norms.size));\n          }\n          if (parts.length > 1 && parts[1].length() > 0) {\n            if (i == 1)             activeGroup.hasUVs=true;\n            faces.add(getIndex(parts[1],uvs.size));\n          }\n          parts=tokens[++i].split(\"/\");\n          faces.add(getIndex(parts[0],verts.size));\n          if (parts.length > 2)           faces.add(getIndex(parts[2],norms.size));\n          if (parts.length > 1 && parts[1].length() > 0)           faces.add(getIndex(parts[1],uvs.size));\n          parts=tokens[++i].split(\"/\");\n          faces.add(getIndex(parts[0],verts.size));\n          if (parts.length > 2)           faces.add(getIndex(parts[2],norms.size));\n          if (parts.length > 1 && parts[1].length() > 0)           faces.add(getIndex(parts[1],uvs.size));\n          activeGroup.numFaces++;\n        }\n      }\n else       if (firstChar == 'o' || firstChar == 'g') {\n        if (tokens.length > 1)         activeGroup=setActiveGroup(tokens[1]);\n else         activeGroup=setActiveGroup(\"default\");\n      }\n else       if (tokens[0].equals(\"mtllib\")) {\n        mtl.load(file.parent().child(tokens[1]));\n      }\n else       if (tokens[0].equals(\"usemtl\")) {\n        if (tokens.length == 1)         activeGroup.materialName=\"default\";\n else         activeGroup.materialName=tokens[1].replace('.','_');\n      }\n    }\n    reader.close();\n  }\n catch (  IOException e) {\n    return null;\n  }\n  for (int i=0; i < groups.size; i++) {\n    if (groups.get(i).numFaces < 1) {\n      groups.removeIndex(i);\n      i--;\n    }\n  }\n  if (groups.size < 1)   return null;\n  final int numGroups=groups.size;\n  final ModelData data=new ModelData();\n  for (int g=0; g < numGroups; g++) {\n    Group group=groups.get(g);\n    Array<Integer> faces=group.faces;\n    final int numElements=faces.size;\n    final int numFaces=group.numFaces;\n    final boolean hasNorms=group.hasNorms;\n    final boolean hasUVs=group.hasUVs;\n    final float[] finalVerts=new float[(numFaces * 3) * (3 + (hasNorms ? 3 : 0) + (hasUVs ? 2 : 0))];\n    for (int i=0, vi=0; i < numElements; ) {\n      int vertIndex=faces.get(i++) * 3;\n      finalVerts[vi++]=verts.get(vertIndex++);\n      finalVerts[vi++]=verts.get(vertIndex++);\n      finalVerts[vi++]=verts.get(vertIndex);\n      if (hasNorms) {\n        int normIndex=faces.get(i++) * 3;\n        finalVerts[vi++]=norms.get(normIndex++);\n        finalVerts[vi++]=norms.get(normIndex++);\n        finalVerts[vi++]=norms.get(normIndex);\n      }\n      if (hasUVs) {\n        int uvIndex=faces.get(i++) * 2;\n        finalVerts[vi++]=uvs.get(uvIndex++);\n        finalVerts[vi++]=uvs.get(uvIndex);\n      }\n    }\n    final int numIndices=numFaces * 3 >= Short.MAX_VALUE ? 0 : numFaces * 3;\n    final short[] finalIndices=new short[numIndices];\n    if (numIndices > 0) {\n      for (int i=0; i < numIndices; i++) {\n        finalIndices[i]=(short)i;\n      }\n    }\n    Array<VertexAttribute> attributes=new Array<VertexAttribute>();\n    attributes.add(new VertexAttribute(Usage.Position,3,ShaderProgram.POSITION_ATTRIBUTE));\n    if (hasNorms)     attributes.add(new VertexAttribute(Usage.Normal,3,ShaderProgram.NORMAL_ATTRIBUTE));\n    if (hasUVs)     attributes.add(new VertexAttribute(Usage.TextureCoordinates,2,ShaderProgram.TEXCOORD_ATTRIBUTE + \"0\"));\n    String stringId=Integer.toString(++id);\n    String nodeId=\"default\".equals(group.name) ? \"node\" + stringId : group.name;\n    String meshId=\"default\".equals(group.name) ? \"mesh\" + stringId : group.name;\n    String partId=\"default\".equals(group.name) ? \"part\" + stringId : group.name;\n    ModelNode node=new ModelNode();\n    node.id=nodeId;\n    node.meshId=meshId;\n    node.scale=new Vector3(1,1,1);\n    node.translation=new Vector3();\n    node.rotation=new Quaternion();\n    ModelNodePart pm=new ModelNodePart();\n    pm.meshPartId=partId;\n    pm.materialId=group.materialName;\n    node.parts=new ModelNodePart[]{pm};\n    ModelMeshPart part=new ModelMeshPart();\n    part.id=partId;\n    part.indices=finalIndices;\n    part.primitiveType=GL20.GL_TRIANGLES;\n    ModelMesh mesh=new ModelMesh();\n    mesh.id=meshId;\n    mesh.attributes=attributes.toArray(VertexAttribute.class);\n    mesh.vertices=finalVerts;\n    mesh.parts=new ModelMeshPart[]{part};\n    data.nodes.add(node);\n    data.meshes.add(mesh);\n    ModelMaterial mm=mtl.getMaterial(group.materialName);\n    data.materials.add(mm);\n  }\n  if (verts.size > 0)   verts.clear();\n  if (norms.size > 0)   norms.clear();\n  if (uvs.size > 0)   uvs.clear();\n  if (groups.size > 0)   groups.clear();\n  return data;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1307,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 174,
        "startColumnNumber" : 15,
        "endLineNumber" : 174,
        "endColumnNumber" : 41
      },
      "nodeContext" : "tokens[0].equals(\"mtllib\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 174,
    "startColumnNumber" : 32,
    "endLineNumber" : 174,
    "endColumnNumber" : 40
  } ],
  "layoutRelationDataList" : [ ]
}