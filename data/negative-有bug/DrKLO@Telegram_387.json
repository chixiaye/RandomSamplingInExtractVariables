{
  "id" : 387,
  "expression" : "numSameBitCells - 5",
  "projectName" : "DrKLO@Telegram",
  "commitID" : "11fbfb1329df700b203e1852a71c4c11b5ab12f4",
  "filePath" : "/TMessagesProj/src/main/java/com/google/zxing/qrcode/encoder/MaskUtil.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "numSameBitCells - 5",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 209,
      "startColumnNumber" : 29,
      "endLineNumber" : 209,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 209,
        "startColumnNumber" : 28,
        "endLineNumber" : 209,
        "endColumnNumber" : 49
      },
      "nodeContext" : "(numSameBitCells - 5)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 209,
        "startColumnNumber" : 23,
        "endLineNumber" : 209,
        "endColumnNumber" : 49
      },
      "nodeContext" : "N1 + (numSameBitCells - 5)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 209,
        "startColumnNumber" : 12,
        "endLineNumber" : 209,
        "endColumnNumber" : 49
      },
      "nodeContext" : "penalty+=N1 + (numSameBitCells - 5)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 209,
        "startColumnNumber" : 12,
        "endLineNumber" : 209,
        "endColumnNumber" : 50
      },
      "nodeContext" : "penalty+=N1 + (numSameBitCells - 5);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 208,
        "startColumnNumber" : 36,
        "endLineNumber" : 210,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  penalty+=N1 + (numSameBitCells - 5);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 208,
        "startColumnNumber" : 10,
        "endLineNumber" : 210,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (numSameBitCells >= 5) {\n  penalty+=N1 + (numSameBitCells - 5);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 197,
        "startLineNumber" : 207,
        "startColumnNumber" : 15,
        "endLineNumber" : 213,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (numSameBitCells >= 5) {\n    penalty+=N1 + (numSameBitCells - 5);\n  }\n  numSameBitCells=1;\n  prevBit=bit;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 23,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 263,
        "startLineNumber" : 205,
        "startColumnNumber" : 8,
        "endLineNumber" : 213,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (bit == prevBit) {\n  numSameBitCells++;\n}\n else {\n  if (numSameBitCells >= 5) {\n    penalty+=N1 + (numSameBitCells - 5);\n  }\n  numSameBitCells=1;\n  prevBit=bit;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 31,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 341,
        "startLineNumber" : 203,
        "startColumnNumber" : 39,
        "endLineNumber" : 214,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  int bit=isHorizontal ? array[i][j] : array[j][i];\n  if (bit == prevBit) {\n    numSameBitCells++;\n  }\n else {\n    if (numSameBitCells >= 5) {\n      penalty+=N1 + (numSameBitCells - 5);\n    }\n    numSameBitCells=1;\n    prevBit=bit;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 48,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 374,
        "startLineNumber" : 203,
        "startColumnNumber" : 6,
        "endLineNumber" : 214,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int j=0; j < jLimit; j++) {\n  int bit=isHorizontal ? array[i][j] : array[j][i];\n  if (bit == prevBit) {\n    numSameBitCells++;\n  }\n else {\n    if (numSameBitCells >= 5) {\n      penalty+=N1 + (numSameBitCells - 5);\n    }\n    numSameBitCells=1;\n    prevBit=bit;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 59,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 532,
        "startLineNumber" : 200,
        "startColumnNumber" : 37,
        "endLineNumber" : 218,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int numSameBitCells=0;\n  int prevBit=-1;\n  for (int j=0; j < jLimit; j++) {\n    int bit=isHorizontal ? array[i][j] : array[j][i];\n    if (bit == prevBit) {\n      numSameBitCells++;\n    }\n else {\n      if (numSameBitCells >= 5) {\n        penalty+=N1 + (numSameBitCells - 5);\n      }\n      numSameBitCells=1;\n      prevBit=bit;\n    }\n  }\n  if (numSameBitCells >= 5) {\n    penalty+=N1 + (numSameBitCells - 5);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 85,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 565,
        "startLineNumber" : 200,
        "startColumnNumber" : 4,
        "endLineNumber" : 218,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < iLimit; i++) {\n  int numSameBitCells=0;\n  int prevBit=-1;\n  for (int j=0; j < jLimit; j++) {\n    int bit=isHorizontal ? array[i][j] : array[j][i];\n    if (bit == prevBit) {\n      numSameBitCells++;\n    }\n else {\n      if (numSameBitCells >= 5) {\n        penalty+=N1 + (numSameBitCells - 5);\n      }\n      numSameBitCells=1;\n      prevBit=bit;\n    }\n  }\n  if (numSameBitCells >= 5) {\n    penalty+=N1 + (numSameBitCells - 5);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 96,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 800,
        "startLineNumber" : 195,
        "startColumnNumber" : 92,
        "endLineNumber" : 220,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int penalty=0;\n  int iLimit=isHorizontal ? matrix.getHeight() : matrix.getWidth();\n  int jLimit=isHorizontal ? matrix.getWidth() : matrix.getHeight();\n  byte[][] array=matrix.getArray();\n  for (int i=0; i < iLimit; i++) {\n    int numSameBitCells=0;\n    int prevBit=-1;\n    for (int j=0; j < jLimit; j++) {\n      int bit=isHorizontal ? array[i][j] : array[j][i];\n      if (bit == prevBit) {\n        numSameBitCells++;\n      }\n else {\n        if (numSameBitCells >= 5) {\n          penalty+=N1 + (numSameBitCells - 5);\n        }\n        numSameBitCells=1;\n        prevBit=bit;\n      }\n    }\n    if (numSameBitCells >= 5) {\n      penalty+=N1 + (numSameBitCells - 5);\n    }\n  }\n  return penalty;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 138,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1048,
        "startLineNumber" : 191,
        "startColumnNumber" : 2,
        "endLineNumber" : 220,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Helper function for applyMaskPenaltyRule1. We need this for doing this calculation in both vertical and horizontal orders respectively.\n */\nprivate static int applyMaskPenaltyRule1Internal(ByteMatrix matrix,boolean isHorizontal){\n  int penalty=0;\n  int iLimit=isHorizontal ? matrix.getHeight() : matrix.getWidth();\n  int jLimit=isHorizontal ? matrix.getWidth() : matrix.getHeight();\n  byte[][] array=matrix.getArray();\n  for (int i=0; i < iLimit; i++) {\n    int numSameBitCells=0;\n    int prevBit=-1;\n    for (int j=0; j < jLimit; j++) {\n      int bit=isHorizontal ? array[i][j] : array[j][i];\n      if (bit == prevBit) {\n        numSameBitCells++;\n      }\n else {\n        if (numSameBitCells >= 5) {\n          penalty+=N1 + (numSameBitCells - 5);\n        }\n        numSameBitCells=1;\n        prevBit=bit;\n      }\n    }\n    if (numSameBitCells >= 5) {\n      penalty+=N1 + (numSameBitCells - 5);\n    }\n  }\n  return penalty;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 151,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 209,
        "startColumnNumber" : 12,
        "endLineNumber" : 209,
        "endColumnNumber" : 50
      },
      "nodeContext" : "penalty+=N1 + (numSameBitCells - 5);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "int"
  }, {
    "nodeContext" : "numSameBitCells - 5",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 216,
      "startColumnNumber" : 25,
      "endLineNumber" : 216,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 216,
        "startColumnNumber" : 24,
        "endLineNumber" : 216,
        "endColumnNumber" : 45
      },
      "nodeContext" : "(numSameBitCells - 5)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 216,
        "startColumnNumber" : 19,
        "endLineNumber" : 216,
        "endColumnNumber" : 45
      },
      "nodeContext" : "N1 + (numSameBitCells - 5)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 216,
        "startColumnNumber" : 8,
        "endLineNumber" : 216,
        "endColumnNumber" : 45
      },
      "nodeContext" : "penalty+=N1 + (numSameBitCells - 5)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 216,
        "startColumnNumber" : 8,
        "endLineNumber" : 216,
        "endColumnNumber" : 46
      },
      "nodeContext" : "penalty+=N1 + (numSameBitCells - 5);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 215,
        "startColumnNumber" : 32,
        "endLineNumber" : 217,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  penalty+=N1 + (numSameBitCells - 5);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 215,
        "startColumnNumber" : 6,
        "endLineNumber" : 217,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (numSameBitCells >= 5) {\n  penalty+=N1 + (numSameBitCells - 5);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 532,
        "startLineNumber" : 200,
        "startColumnNumber" : 37,
        "endLineNumber" : 218,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int numSameBitCells=0;\n  int prevBit=-1;\n  for (int j=0; j < jLimit; j++) {\n    int bit=isHorizontal ? array[i][j] : array[j][i];\n    if (bit == prevBit) {\n      numSameBitCells++;\n    }\n else {\n      if (numSameBitCells >= 5) {\n        penalty+=N1 + (numSameBitCells - 5);\n      }\n      numSameBitCells=1;\n      prevBit=bit;\n    }\n  }\n  if (numSameBitCells >= 5) {\n    penalty+=N1 + (numSameBitCells - 5);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 85,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 565,
        "startLineNumber" : 200,
        "startColumnNumber" : 4,
        "endLineNumber" : 218,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < iLimit; i++) {\n  int numSameBitCells=0;\n  int prevBit=-1;\n  for (int j=0; j < jLimit; j++) {\n    int bit=isHorizontal ? array[i][j] : array[j][i];\n    if (bit == prevBit) {\n      numSameBitCells++;\n    }\n else {\n      if (numSameBitCells >= 5) {\n        penalty+=N1 + (numSameBitCells - 5);\n      }\n      numSameBitCells=1;\n      prevBit=bit;\n    }\n  }\n  if (numSameBitCells >= 5) {\n    penalty+=N1 + (numSameBitCells - 5);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 96,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 800,
        "startLineNumber" : 195,
        "startColumnNumber" : 92,
        "endLineNumber" : 220,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int penalty=0;\n  int iLimit=isHorizontal ? matrix.getHeight() : matrix.getWidth();\n  int jLimit=isHorizontal ? matrix.getWidth() : matrix.getHeight();\n  byte[][] array=matrix.getArray();\n  for (int i=0; i < iLimit; i++) {\n    int numSameBitCells=0;\n    int prevBit=-1;\n    for (int j=0; j < jLimit; j++) {\n      int bit=isHorizontal ? array[i][j] : array[j][i];\n      if (bit == prevBit) {\n        numSameBitCells++;\n      }\n else {\n        if (numSameBitCells >= 5) {\n          penalty+=N1 + (numSameBitCells - 5);\n        }\n        numSameBitCells=1;\n        prevBit=bit;\n      }\n    }\n    if (numSameBitCells >= 5) {\n      penalty+=N1 + (numSameBitCells - 5);\n    }\n  }\n  return penalty;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 138,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1048,
        "startLineNumber" : 191,
        "startColumnNumber" : 2,
        "endLineNumber" : 220,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Helper function for applyMaskPenaltyRule1. We need this for doing this calculation in both vertical and horizontal orders respectively.\n */\nprivate static int applyMaskPenaltyRule1Internal(ByteMatrix matrix,boolean isHorizontal){\n  int penalty=0;\n  int iLimit=isHorizontal ? matrix.getHeight() : matrix.getWidth();\n  int jLimit=isHorizontal ? matrix.getWidth() : matrix.getHeight();\n  byte[][] array=matrix.getArray();\n  for (int i=0; i < iLimit; i++) {\n    int numSameBitCells=0;\n    int prevBit=-1;\n    for (int j=0; j < jLimit; j++) {\n      int bit=isHorizontal ? array[i][j] : array[j][i];\n      if (bit == prevBit) {\n        numSameBitCells++;\n      }\n else {\n        if (numSameBitCells >= 5) {\n          penalty+=N1 + (numSameBitCells - 5);\n        }\n        numSameBitCells=1;\n        prevBit=bit;\n      }\n    }\n    if (numSameBitCells >= 5) {\n      penalty+=N1 + (numSameBitCells - 5);\n    }\n  }\n  return penalty;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 151,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 216,
        "startColumnNumber" : 8,
        "endLineNumber" : 216,
        "endColumnNumber" : 46
      },
      "nodeContext" : "penalty+=N1 + (numSameBitCells - 5);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 209,
    "startColumnNumber" : 29,
    "endLineNumber" : 209,
    "endColumnNumber" : 48
  }, {
    "charLength" : 19,
    "startLineNumber" : 216,
    "startColumnNumber" : 25,
    "endLineNumber" : 216,
    "endColumnNumber" : 44
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 10
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 6
  } ]
}