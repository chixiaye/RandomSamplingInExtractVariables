{
  "id" : 278,
  "expression" : "offset + 4 > s.length()",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/tool/src/org/antlr/v4/misc/EscapeSequenceParsing.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "offset + 4 > s.length()",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 109,
      "startColumnNumber" : 8,
      "endLineNumber" : 109,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 7,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 109,
        "startColumnNumber" : 4,
        "endLineNumber" : 111,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (offset + 4 > s.length()) {\n  return invalid(startOff,s.length() - 1);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 186,
        "startLineNumber" : 108,
        "startColumnNumber" : 8,
        "endLineNumber" : 115,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  if (offset + 4 > s.length()) {\n    return invalid(startOff,s.length() - 1);\n  }\n  hexStartOffset=offset;\n  hexEndOffset=offset + 4;\n  offset=hexEndOffset;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 33,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 439,
        "startLineNumber" : 100,
        "startColumnNumber" : 3,
        "endLineNumber" : 115,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (s.codePointAt(offset) == '{') {\n  hexStartOffset=offset + 1;\n  hexEndOffset=s.indexOf('}',hexStartOffset);\n  if (hexEndOffset == -1) {\n    return invalid(startOff,s.length() - 1);\n  }\n  offset=hexEndOffset + 1;\n}\n else {\n  if (offset + 4 > s.length()) {\n    return invalid(startOff,s.length() - 1);\n  }\n  hexStartOffset=offset;\n  hexEndOffset=offset + 4;\n  offset=hexEndOffset;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 76,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1004,
        "startLineNumber" : 93,
        "startColumnNumber" : 22,
        "endLineNumber" : 126,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (offset + 3 > s.length()) {\n    return invalid(startOff,s.length() - 1);\n  }\n  int hexStartOffset;\n  int hexEndOffset;\n  if (s.codePointAt(offset) == '{') {\n    hexStartOffset=offset + 1;\n    hexEndOffset=s.indexOf('}',hexStartOffset);\n    if (hexEndOffset == -1) {\n      return invalid(startOff,s.length() - 1);\n    }\n    offset=hexEndOffset + 1;\n  }\n else {\n    if (offset + 4 > s.length()) {\n      return invalid(startOff,s.length() - 1);\n    }\n    hexStartOffset=offset;\n    hexEndOffset=offset + 4;\n    offset=hexEndOffset;\n  }\n  int codePointValue=CharSupport.parseHexValue(s,hexStartOffset,hexEndOffset);\n  if (codePointValue == -1 || codePointValue > Character.MAX_CODE_POINT) {\n    return invalid(startOff,startOff + 6 - 1);\n  }\n  return new Result(Result.Type.CODE_POINT,codePointValue,IntervalSet.EMPTY_SET,startOff,offset - startOff);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 151,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2597,
        "startLineNumber" : 93,
        "startColumnNumber" : 2,
        "endLineNumber" : 175,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (escaped == 'u') {\n  if (offset + 3 > s.length()) {\n    return invalid(startOff,s.length() - 1);\n  }\n  int hexStartOffset;\n  int hexEndOffset;\n  if (s.codePointAt(offset) == '{') {\n    hexStartOffset=offset + 1;\n    hexEndOffset=s.indexOf('}',hexStartOffset);\n    if (hexEndOffset == -1) {\n      return invalid(startOff,s.length() - 1);\n    }\n    offset=hexEndOffset + 1;\n  }\n else {\n    if (offset + 4 > s.length()) {\n      return invalid(startOff,s.length() - 1);\n    }\n    hexStartOffset=offset;\n    hexEndOffset=offset + 4;\n    offset=hexEndOffset;\n  }\n  int codePointValue=CharSupport.parseHexValue(s,hexStartOffset,hexEndOffset);\n  if (codePointValue == -1 || codePointValue > Character.MAX_CODE_POINT) {\n    return invalid(startOff,startOff + 6 - 1);\n  }\n  return new Result(Result.Type.CODE_POINT,codePointValue,IntervalSet.EMPTY_SET,startOff,offset - startOff);\n}\n else if (escaped == 'p' || escaped == 'P') {\n  if (offset + 3 > s.length()) {\n    return invalid(startOff,s.length() - 1);\n  }\n  if (s.codePointAt(offset) != '{') {\n    return invalid(startOff,offset);\n  }\n  int openBraceOffset=offset;\n  int closeBraceOffset=s.indexOf('}',openBraceOffset);\n  if (closeBraceOffset == -1) {\n    return invalid(startOff,s.length() - 1);\n  }\n  String propertyName=s.substring(openBraceOffset + 1,closeBraceOffset);\n  IntervalSet propertyIntervalSet=UnicodeData.getPropertyCodePoints(propertyName);\n  if (propertyIntervalSet == null || propertyIntervalSet.isNil()) {\n    return invalid(startOff,closeBraceOffset);\n  }\n  offset=closeBraceOffset + 1;\n  if (escaped == 'P') {\n    propertyIntervalSet=propertyIntervalSet.complement(IntervalSet.COMPLETE_CHAR_SET);\n  }\n  return new Result(Result.Type.PROPERTY,-1,propertyIntervalSet,startOff,offset - startOff);\n}\n else if (escaped < CharSupport.ANTLRLiteralEscapedCharValue.length) {\n  int codePoint=CharSupport.ANTLRLiteralEscapedCharValue[escaped];\n  if (codePoint == 0) {\n    if (escaped != ']' && escaped != '-') {\n      return invalid(startOff,startOff + 1);\n    }\n else {\n      codePoint=escaped;\n    }\n  }\n  return new Result(Result.Type.CODE_POINT,codePoint,IntervalSet.EMPTY_SET,startOff,offset - startOff);\n}\n else {\n  return invalid(startOff,s.length() - 1);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 366,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2905,
        "startLineNumber" : 83,
        "startColumnNumber" : 58,
        "endLineNumber" : 176,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  int offset=startOff;\n  if (offset + 2 > s.length() || s.codePointAt(offset) != '\\\\') {\n    return invalid(startOff,s.length() - 1);\n  }\n  offset++;\n  int escaped=s.codePointAt(offset);\n  offset+=Character.charCount(escaped);\n  if (escaped == 'u') {\n    if (offset + 3 > s.length()) {\n      return invalid(startOff,s.length() - 1);\n    }\n    int hexStartOffset;\n    int hexEndOffset;\n    if (s.codePointAt(offset) == '{') {\n      hexStartOffset=offset + 1;\n      hexEndOffset=s.indexOf('}',hexStartOffset);\n      if (hexEndOffset == -1) {\n        return invalid(startOff,s.length() - 1);\n      }\n      offset=hexEndOffset + 1;\n    }\n else {\n      if (offset + 4 > s.length()) {\n        return invalid(startOff,s.length() - 1);\n      }\n      hexStartOffset=offset;\n      hexEndOffset=offset + 4;\n      offset=hexEndOffset;\n    }\n    int codePointValue=CharSupport.parseHexValue(s,hexStartOffset,hexEndOffset);\n    if (codePointValue == -1 || codePointValue > Character.MAX_CODE_POINT) {\n      return invalid(startOff,startOff + 6 - 1);\n    }\n    return new Result(Result.Type.CODE_POINT,codePointValue,IntervalSet.EMPTY_SET,startOff,offset - startOff);\n  }\n else   if (escaped == 'p' || escaped == 'P') {\n    if (offset + 3 > s.length()) {\n      return invalid(startOff,s.length() - 1);\n    }\n    if (s.codePointAt(offset) != '{') {\n      return invalid(startOff,offset);\n    }\n    int openBraceOffset=offset;\n    int closeBraceOffset=s.indexOf('}',openBraceOffset);\n    if (closeBraceOffset == -1) {\n      return invalid(startOff,s.length() - 1);\n    }\n    String propertyName=s.substring(openBraceOffset + 1,closeBraceOffset);\n    IntervalSet propertyIntervalSet=UnicodeData.getPropertyCodePoints(propertyName);\n    if (propertyIntervalSet == null || propertyIntervalSet.isNil()) {\n      return invalid(startOff,closeBraceOffset);\n    }\n    offset=closeBraceOffset + 1;\n    if (escaped == 'P') {\n      propertyIntervalSet=propertyIntervalSet.complement(IntervalSet.COMPLETE_CHAR_SET);\n    }\n    return new Result(Result.Type.PROPERTY,-1,propertyIntervalSet,startOff,offset - startOff);\n  }\n else   if (escaped < CharSupport.ANTLRLiteralEscapedCharValue.length) {\n    int codePoint=CharSupport.ANTLRLiteralEscapedCharValue[escaped];\n    if (codePoint == 0) {\n      if (escaped != ']' && escaped != '-') {\n        return invalid(startOff,startOff + 1);\n      }\n else {\n        codePoint=escaped;\n      }\n    }\n    return new Result(Result.Type.CODE_POINT,codePoint,IntervalSet.EMPTY_SET,startOff,offset - startOff);\n  }\n else {\n    return invalid(startOff,s.length() - 1);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 415,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3136,
        "startLineNumber" : 78,
        "startColumnNumber" : 1,
        "endLineNumber" : 176,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Parses a single escape sequence starting at  {@code startOff}. Returns a type of INVALID if no valid escape sequence was found, a Result otherwise.\n */\npublic static Result parseEscape(String s,int startOff){\n  int offset=startOff;\n  if (offset + 2 > s.length() || s.codePointAt(offset) != '\\\\') {\n    return invalid(startOff,s.length() - 1);\n  }\n  offset++;\n  int escaped=s.codePointAt(offset);\n  offset+=Character.charCount(escaped);\n  if (escaped == 'u') {\n    if (offset + 3 > s.length()) {\n      return invalid(startOff,s.length() - 1);\n    }\n    int hexStartOffset;\n    int hexEndOffset;\n    if (s.codePointAt(offset) == '{') {\n      hexStartOffset=offset + 1;\n      hexEndOffset=s.indexOf('}',hexStartOffset);\n      if (hexEndOffset == -1) {\n        return invalid(startOff,s.length() - 1);\n      }\n      offset=hexEndOffset + 1;\n    }\n else {\n      if (offset + 4 > s.length()) {\n        return invalid(startOff,s.length() - 1);\n      }\n      hexStartOffset=offset;\n      hexEndOffset=offset + 4;\n      offset=hexEndOffset;\n    }\n    int codePointValue=CharSupport.parseHexValue(s,hexStartOffset,hexEndOffset);\n    if (codePointValue == -1 || codePointValue > Character.MAX_CODE_POINT) {\n      return invalid(startOff,startOff + 6 - 1);\n    }\n    return new Result(Result.Type.CODE_POINT,codePointValue,IntervalSet.EMPTY_SET,startOff,offset - startOff);\n  }\n else   if (escaped == 'p' || escaped == 'P') {\n    if (offset + 3 > s.length()) {\n      return invalid(startOff,s.length() - 1);\n    }\n    if (s.codePointAt(offset) != '{') {\n      return invalid(startOff,offset);\n    }\n    int openBraceOffset=offset;\n    int closeBraceOffset=s.indexOf('}',openBraceOffset);\n    if (closeBraceOffset == -1) {\n      return invalid(startOff,s.length() - 1);\n    }\n    String propertyName=s.substring(openBraceOffset + 1,closeBraceOffset);\n    IntervalSet propertyIntervalSet=UnicodeData.getPropertyCodePoints(propertyName);\n    if (propertyIntervalSet == null || propertyIntervalSet.isNil()) {\n      return invalid(startOff,closeBraceOffset);\n    }\n    offset=closeBraceOffset + 1;\n    if (escaped == 'P') {\n      propertyIntervalSet=propertyIntervalSet.complement(IntervalSet.COMPLETE_CHAR_SET);\n    }\n    return new Result(Result.Type.PROPERTY,-1,propertyIntervalSet,startOff,offset - startOff);\n  }\n else   if (escaped < CharSupport.ANTLRLiteralEscapedCharValue.length) {\n    int codePoint=CharSupport.ANTLRLiteralEscapedCharValue[escaped];\n    if (codePoint == 0) {\n      if (escaped != ']' && escaped != '-') {\n        return invalid(startOff,startOff + 1);\n      }\n else {\n        codePoint=escaped;\n      }\n    }\n    return new Result(Result.Type.CODE_POINT,codePoint,IntervalSet.EMPTY_SET,startOff,offset - startOff);\n  }\n else {\n    return invalid(startOff,s.length() - 1);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 429,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 109,
        "startColumnNumber" : 4,
        "endLineNumber" : 111,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (offset + 4 > s.length()) {\n  return invalid(startOff,s.length() - 1);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 7
    },
    "tokenLength" : 6,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 23,
    "startLineNumber" : 109,
    "startColumnNumber" : 8,
    "endLineNumber" : 109,
    "endColumnNumber" : 31
  } ],
  "layoutRelationDataList" : [ ]
}