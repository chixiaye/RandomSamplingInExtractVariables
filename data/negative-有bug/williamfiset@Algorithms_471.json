{
  "id" : 471,
  "expression" : "val",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/search/InterpolationSearch.java",
  "occurrences" : 6,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "val",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 19,
      "startColumnNumber" : 23,
      "endLineNumber" : 19,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 19,
        "startColumnNumber" : 11,
        "endLineNumber" : 19,
        "endColumnNumber" : 26
      },
      "nodeContext" : "nums[lo] <= val",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 19,
        "startColumnNumber" : 11,
        "endLineNumber" : 19,
        "endColumnNumber" : 45
      },
      "nodeContext" : "nums[lo] <= val && nums[hi] >= val",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 257,
        "startLineNumber" : 19,
        "startColumnNumber" : 4,
        "endLineNumber" : 26,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (nums[lo] <= val && nums[hi] >= val) {\n  mid=lo + ((val - nums[lo]) * (hi - lo)) / (nums[hi] - nums[lo]);\n  if (nums[mid] < val) {\n    lo=mid + 1;\n  }\n else   if (nums[mid] > val) {\n    hi=mid - 1;\n  }\n else   return mid;\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 67,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 365,
        "startLineNumber" : 17,
        "startColumnNumber" : 61,
        "endLineNumber" : 29,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int lo=0, mid=0, hi=nums.length - 1;\n  while (nums[lo] <= val && nums[hi] >= val) {\n    mid=lo + ((val - nums[lo]) * (hi - lo)) / (nums[hi] - nums[lo]);\n    if (nums[mid] < val) {\n      lo=mid + 1;\n    }\n else     if (nums[mid] > val) {\n      hi=mid - 1;\n    }\n else     return mid;\n  }\n  if (nums[lo] == val)   return lo;\n  return -1;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 94,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 727,
        "startLineNumber" : 10,
        "startColumnNumber" : 2,
        "endLineNumber" : 29,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * A fast alternative to a binary search when the elements are uniformly distributed. This algorithm runs in a time complexity of ~O(log(log(n))).\n * @param nums - an ordered list containing uniformly distributed values.\n * @param val - the value we're looking for in 'nums'\n */\npublic static int interpolationSearch(int[] nums,int val){\n  int lo=0, mid=0, hi=nums.length - 1;\n  while (nums[lo] <= val && nums[hi] >= val) {\n    mid=lo + ((val - nums[lo]) * (hi - lo)) / (nums[hi] - nums[lo]);\n    if (nums[mid] < val) {\n      lo=mid + 1;\n    }\n else     if (nums[mid] > val) {\n      hi=mid - 1;\n    }\n else     return mid;\n  }\n  if (nums[lo] == val)   return lo;\n  return -1;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 108,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 19,
        "startColumnNumber" : 11,
        "endLineNumber" : 19,
        "endColumnNumber" : 45
      },
      "nodeContext" : "nums[lo] <= val && nums[hi] >= val",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "val",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 19,
      "startColumnNumber" : 42,
      "endLineNumber" : 19,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 19,
        "startColumnNumber" : 30,
        "endLineNumber" : 19,
        "endColumnNumber" : 45
      },
      "nodeContext" : "nums[hi] >= val",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 19,
        "startColumnNumber" : 11,
        "endLineNumber" : 19,
        "endColumnNumber" : 45
      },
      "nodeContext" : "nums[lo] <= val && nums[hi] >= val",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 257,
        "startLineNumber" : 19,
        "startColumnNumber" : 4,
        "endLineNumber" : 26,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (nums[lo] <= val && nums[hi] >= val) {\n  mid=lo + ((val - nums[lo]) * (hi - lo)) / (nums[hi] - nums[lo]);\n  if (nums[mid] < val) {\n    lo=mid + 1;\n  }\n else   if (nums[mid] > val) {\n    hi=mid - 1;\n  }\n else   return mid;\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 67,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 365,
        "startLineNumber" : 17,
        "startColumnNumber" : 61,
        "endLineNumber" : 29,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int lo=0, mid=0, hi=nums.length - 1;\n  while (nums[lo] <= val && nums[hi] >= val) {\n    mid=lo + ((val - nums[lo]) * (hi - lo)) / (nums[hi] - nums[lo]);\n    if (nums[mid] < val) {\n      lo=mid + 1;\n    }\n else     if (nums[mid] > val) {\n      hi=mid - 1;\n    }\n else     return mid;\n  }\n  if (nums[lo] == val)   return lo;\n  return -1;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 94,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 727,
        "startLineNumber" : 10,
        "startColumnNumber" : 2,
        "endLineNumber" : 29,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * A fast alternative to a binary search when the elements are uniformly distributed. This algorithm runs in a time complexity of ~O(log(log(n))).\n * @param nums - an ordered list containing uniformly distributed values.\n * @param val - the value we're looking for in 'nums'\n */\npublic static int interpolationSearch(int[] nums,int val){\n  int lo=0, mid=0, hi=nums.length - 1;\n  while (nums[lo] <= val && nums[hi] >= val) {\n    mid=lo + ((val - nums[lo]) * (hi - lo)) / (nums[hi] - nums[lo]);\n    if (nums[mid] < val) {\n      lo=mid + 1;\n    }\n else     if (nums[mid] > val) {\n      hi=mid - 1;\n    }\n else     return mid;\n  }\n  if (nums[lo] == val)   return lo;\n  return -1;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 108,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 19,
        "startColumnNumber" : 11,
        "endLineNumber" : 19,
        "endColumnNumber" : 45
      },
      "nodeContext" : "nums[lo] <= val && nums[hi] >= val",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "val",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 20,
      "startColumnNumber" : 19,
      "endLineNumber" : 20,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 20,
        "startColumnNumber" : 19,
        "endLineNumber" : 20,
        "endColumnNumber" : 33
      },
      "nodeContext" : "val - nums[lo]",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 20,
        "startColumnNumber" : 18,
        "endLineNumber" : 20,
        "endColumnNumber" : 34
      },
      "nodeContext" : "(val - nums[lo])",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 20,
        "startColumnNumber" : 18,
        "endLineNumber" : 20,
        "endColumnNumber" : 46
      },
      "nodeContext" : "(val - nums[lo]) * (hi - lo)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 20,
        "startColumnNumber" : 17,
        "endLineNumber" : 20,
        "endColumnNumber" : 47
      },
      "nodeContext" : "((val - nums[lo]) * (hi - lo))",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 20,
        "startColumnNumber" : 17,
        "endLineNumber" : 20,
        "endColumnNumber" : 71
      },
      "nodeContext" : "((val - nums[lo]) * (hi - lo)) / (nums[hi] - nums[lo])",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 21,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 20,
        "startColumnNumber" : 12,
        "endLineNumber" : 20,
        "endColumnNumber" : 71
      },
      "nodeContext" : "lo + ((val - nums[lo]) * (hi - lo)) / (nums[hi] - nums[lo])",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 23,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 20,
        "startColumnNumber" : 6,
        "endLineNumber" : 20,
        "endColumnNumber" : 71
      },
      "nodeContext" : "mid=lo + ((val - nums[lo]) * (hi - lo)) / (nums[hi] - nums[lo])",
      "nodeType" : "Assignment",
      "astNodeNumber" : 25,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 20,
        "startColumnNumber" : 6,
        "endLineNumber" : 20,
        "endColumnNumber" : 72
      },
      "nodeContext" : "mid=lo + ((val - nums[lo]) * (hi - lo)) / (nums[hi] - nums[lo]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 26,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 214,
        "startLineNumber" : 19,
        "startColumnNumber" : 47,
        "endLineNumber" : 26,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  mid=lo + ((val - nums[lo]) * (hi - lo)) / (nums[hi] - nums[lo]);\n  if (nums[mid] < val) {\n    lo=mid + 1;\n  }\n else   if (nums[mid] > val) {\n    hi=mid - 1;\n  }\n else   return mid;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 55,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 257,
        "startLineNumber" : 19,
        "startColumnNumber" : 4,
        "endLineNumber" : 26,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (nums[lo] <= val && nums[hi] >= val) {\n  mid=lo + ((val - nums[lo]) * (hi - lo)) / (nums[hi] - nums[lo]);\n  if (nums[mid] < val) {\n    lo=mid + 1;\n  }\n else   if (nums[mid] > val) {\n    hi=mid - 1;\n  }\n else   return mid;\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 67,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 365,
        "startLineNumber" : 17,
        "startColumnNumber" : 61,
        "endLineNumber" : 29,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int lo=0, mid=0, hi=nums.length - 1;\n  while (nums[lo] <= val && nums[hi] >= val) {\n    mid=lo + ((val - nums[lo]) * (hi - lo)) / (nums[hi] - nums[lo]);\n    if (nums[mid] < val) {\n      lo=mid + 1;\n    }\n else     if (nums[mid] > val) {\n      hi=mid - 1;\n    }\n else     return mid;\n  }\n  if (nums[lo] == val)   return lo;\n  return -1;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 94,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 727,
        "startLineNumber" : 10,
        "startColumnNumber" : 2,
        "endLineNumber" : 29,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * A fast alternative to a binary search when the elements are uniformly distributed. This algorithm runs in a time complexity of ~O(log(log(n))).\n * @param nums - an ordered list containing uniformly distributed values.\n * @param val - the value we're looking for in 'nums'\n */\npublic static int interpolationSearch(int[] nums,int val){\n  int lo=0, mid=0, hi=nums.length - 1;\n  while (nums[lo] <= val && nums[hi] >= val) {\n    mid=lo + ((val - nums[lo]) * (hi - lo)) / (nums[hi] - nums[lo]);\n    if (nums[mid] < val) {\n      lo=mid + 1;\n    }\n else     if (nums[mid] > val) {\n      hi=mid - 1;\n    }\n else     return mid;\n  }\n  if (nums[lo] == val)   return lo;\n  return -1;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 108,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 20,
        "startColumnNumber" : 6,
        "endLineNumber" : 20,
        "endColumnNumber" : 72
      },
      "nodeContext" : "mid=lo + ((val - nums[lo]) * (hi - lo)) / (nums[hi] - nums[lo]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 26,
      "astHeight" : 10
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "val",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 21,
      "startColumnNumber" : 22,
      "endLineNumber" : 21,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 21,
        "startColumnNumber" : 10,
        "endLineNumber" : 21,
        "endColumnNumber" : 25
      },
      "nodeContext" : "nums[mid] < val",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 127,
        "startLineNumber" : 21,
        "startColumnNumber" : 6,
        "endLineNumber" : 25,
        "endColumnNumber" : 24
      },
      "nodeContext" : "if (nums[mid] < val) {\n  lo=mid + 1;\n}\n else if (nums[mid] > val) {\n  hi=mid - 1;\n}\n else return mid;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 28,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 214,
        "startLineNumber" : 19,
        "startColumnNumber" : 47,
        "endLineNumber" : 26,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  mid=lo + ((val - nums[lo]) * (hi - lo)) / (nums[hi] - nums[lo]);\n  if (nums[mid] < val) {\n    lo=mid + 1;\n  }\n else   if (nums[mid] > val) {\n    hi=mid - 1;\n  }\n else   return mid;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 55,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 257,
        "startLineNumber" : 19,
        "startColumnNumber" : 4,
        "endLineNumber" : 26,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (nums[lo] <= val && nums[hi] >= val) {\n  mid=lo + ((val - nums[lo]) * (hi - lo)) / (nums[hi] - nums[lo]);\n  if (nums[mid] < val) {\n    lo=mid + 1;\n  }\n else   if (nums[mid] > val) {\n    hi=mid - 1;\n  }\n else   return mid;\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 67,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 365,
        "startLineNumber" : 17,
        "startColumnNumber" : 61,
        "endLineNumber" : 29,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int lo=0, mid=0, hi=nums.length - 1;\n  while (nums[lo] <= val && nums[hi] >= val) {\n    mid=lo + ((val - nums[lo]) * (hi - lo)) / (nums[hi] - nums[lo]);\n    if (nums[mid] < val) {\n      lo=mid + 1;\n    }\n else     if (nums[mid] > val) {\n      hi=mid - 1;\n    }\n else     return mid;\n  }\n  if (nums[lo] == val)   return lo;\n  return -1;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 94,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 727,
        "startLineNumber" : 10,
        "startColumnNumber" : 2,
        "endLineNumber" : 29,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * A fast alternative to a binary search when the elements are uniformly distributed. This algorithm runs in a time complexity of ~O(log(log(n))).\n * @param nums - an ordered list containing uniformly distributed values.\n * @param val - the value we're looking for in 'nums'\n */\npublic static int interpolationSearch(int[] nums,int val){\n  int lo=0, mid=0, hi=nums.length - 1;\n  while (nums[lo] <= val && nums[hi] >= val) {\n    mid=lo + ((val - nums[lo]) * (hi - lo)) / (nums[hi] - nums[lo]);\n    if (nums[mid] < val) {\n      lo=mid + 1;\n    }\n else     if (nums[mid] > val) {\n      hi=mid - 1;\n    }\n else     return mid;\n  }\n  if (nums[lo] == val)   return lo;\n  return -1;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 108,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 21,
        "startColumnNumber" : 10,
        "endLineNumber" : 21,
        "endColumnNumber" : 25
      },
      "nodeContext" : "nums[mid] < val",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "val",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 23,
      "startColumnNumber" : 29,
      "endLineNumber" : 23,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 23,
        "startColumnNumber" : 17,
        "endLineNumber" : 23,
        "endColumnNumber" : 32
      },
      "nodeContext" : "nums[mid] > val",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 23,
        "startColumnNumber" : 13,
        "endLineNumber" : 25,
        "endColumnNumber" : 24
      },
      "nodeContext" : "if (nums[mid] > val) {\n  hi=mid - 1;\n}\n else return mid;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 127,
        "startLineNumber" : 21,
        "startColumnNumber" : 6,
        "endLineNumber" : 25,
        "endColumnNumber" : 24
      },
      "nodeContext" : "if (nums[mid] < val) {\n  lo=mid + 1;\n}\n else if (nums[mid] > val) {\n  hi=mid - 1;\n}\n else return mid;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 28,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 214,
        "startLineNumber" : 19,
        "startColumnNumber" : 47,
        "endLineNumber" : 26,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  mid=lo + ((val - nums[lo]) * (hi - lo)) / (nums[hi] - nums[lo]);\n  if (nums[mid] < val) {\n    lo=mid + 1;\n  }\n else   if (nums[mid] > val) {\n    hi=mid - 1;\n  }\n else   return mid;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 55,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 257,
        "startLineNumber" : 19,
        "startColumnNumber" : 4,
        "endLineNumber" : 26,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (nums[lo] <= val && nums[hi] >= val) {\n  mid=lo + ((val - nums[lo]) * (hi - lo)) / (nums[hi] - nums[lo]);\n  if (nums[mid] < val) {\n    lo=mid + 1;\n  }\n else   if (nums[mid] > val) {\n    hi=mid - 1;\n  }\n else   return mid;\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 67,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 365,
        "startLineNumber" : 17,
        "startColumnNumber" : 61,
        "endLineNumber" : 29,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int lo=0, mid=0, hi=nums.length - 1;\n  while (nums[lo] <= val && nums[hi] >= val) {\n    mid=lo + ((val - nums[lo]) * (hi - lo)) / (nums[hi] - nums[lo]);\n    if (nums[mid] < val) {\n      lo=mid + 1;\n    }\n else     if (nums[mid] > val) {\n      hi=mid - 1;\n    }\n else     return mid;\n  }\n  if (nums[lo] == val)   return lo;\n  return -1;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 94,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 727,
        "startLineNumber" : 10,
        "startColumnNumber" : 2,
        "endLineNumber" : 29,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * A fast alternative to a binary search when the elements are uniformly distributed. This algorithm runs in a time complexity of ~O(log(log(n))).\n * @param nums - an ordered list containing uniformly distributed values.\n * @param val - the value we're looking for in 'nums'\n */\npublic static int interpolationSearch(int[] nums,int val){\n  int lo=0, mid=0, hi=nums.length - 1;\n  while (nums[lo] <= val && nums[hi] >= val) {\n    mid=lo + ((val - nums[lo]) * (hi - lo)) / (nums[hi] - nums[lo]);\n    if (nums[mid] < val) {\n      lo=mid + 1;\n    }\n else     if (nums[mid] > val) {\n      hi=mid - 1;\n    }\n else     return mid;\n  }\n  if (nums[lo] == val)   return lo;\n  return -1;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 108,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 23,
        "startColumnNumber" : 17,
        "endLineNumber" : 23,
        "endColumnNumber" : 32
      },
      "nodeContext" : "nums[mid] > val",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "val",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 27,
      "startColumnNumber" : 20,
      "endLineNumber" : 27,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 27,
        "startColumnNumber" : 8,
        "endLineNumber" : 27,
        "endColumnNumber" : 23
      },
      "nodeContext" : "nums[lo] == val",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 27,
        "startColumnNumber" : 4,
        "endLineNumber" : 27,
        "endColumnNumber" : 35
      },
      "nodeContext" : "if (nums[lo] == val) return lo;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 365,
        "startLineNumber" : 17,
        "startColumnNumber" : 61,
        "endLineNumber" : 29,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int lo=0, mid=0, hi=nums.length - 1;\n  while (nums[lo] <= val && nums[hi] >= val) {\n    mid=lo + ((val - nums[lo]) * (hi - lo)) / (nums[hi] - nums[lo]);\n    if (nums[mid] < val) {\n      lo=mid + 1;\n    }\n else     if (nums[mid] > val) {\n      hi=mid - 1;\n    }\n else     return mid;\n  }\n  if (nums[lo] == val)   return lo;\n  return -1;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 94,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 727,
        "startLineNumber" : 10,
        "startColumnNumber" : 2,
        "endLineNumber" : 29,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * A fast alternative to a binary search when the elements are uniformly distributed. This algorithm runs in a time complexity of ~O(log(log(n))).\n * @param nums - an ordered list containing uniformly distributed values.\n * @param val - the value we're looking for in 'nums'\n */\npublic static int interpolationSearch(int[] nums,int val){\n  int lo=0, mid=0, hi=nums.length - 1;\n  while (nums[lo] <= val && nums[hi] >= val) {\n    mid=lo + ((val - nums[lo]) * (hi - lo)) / (nums[hi] - nums[lo]);\n    if (nums[mid] < val) {\n      lo=mid + 1;\n    }\n else     if (nums[mid] > val) {\n      hi=mid - 1;\n    }\n else     return mid;\n  }\n  if (nums[lo] == val)   return lo;\n  return -1;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 108,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 27,
        "startColumnNumber" : 4,
        "endLineNumber" : 27,
        "endColumnNumber" : 35
      },
      "nodeContext" : "if (nums[lo] == val) return lo;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 19,
    "startColumnNumber" : 23,
    "endLineNumber" : 19,
    "endColumnNumber" : 26
  }, {
    "charLength" : 3,
    "startLineNumber" : 19,
    "startColumnNumber" : 42,
    "endLineNumber" : 19,
    "endColumnNumber" : 45
  }, {
    "charLength" : 3,
    "startLineNumber" : 20,
    "startColumnNumber" : 19,
    "endLineNumber" : 20,
    "endColumnNumber" : 22
  }, {
    "charLength" : 3,
    "startLineNumber" : 21,
    "startColumnNumber" : 22,
    "endLineNumber" : 21,
    "endColumnNumber" : 25
  }, {
    "charLength" : 3,
    "startLineNumber" : 23,
    "startColumnNumber" : 29,
    "endLineNumber" : 23,
    "endColumnNumber" : 32
  }, {
    "charLength" : 3,
    "startLineNumber" : 27,
    "startColumnNumber" : 20,
    "endLineNumber" : 27,
    "endColumnNumber" : 23
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 10
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 2
  } ]
}