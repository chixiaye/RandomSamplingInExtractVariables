{
  "id" : 42,
  "expression" : "\"'${var1}'.toUpperCase()\"",
  "projectName" : "SeleniumHQ@selenium",
  "commitID" : "c146621f39dbec94114835aa1f6af6a0e1fa4cd0",
  "filePath" : "/java/client/test/com/thoughtworks/selenium/corebased/TestJavascriptParameters.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"'${var1}'.toUpperCase()\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 25,
      "startLineNumber" : 43,
      "startColumnNumber" : 46,
      "endLineNumber" : 43,
      "endColumnNumber" : 71
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 43,
        "startColumnNumber" : 29,
        "endLineNumber" : 43,
        "endColumnNumber" : 72
      },
      "nodeContext" : "selenium.getEval(\"'${var1}'.toUpperCase()\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 43,
        "startColumnNumber" : 4,
        "endLineNumber" : 43,
        "endColumnNumber" : 73
      },
      "nodeContext" : "selenium.type(\"theText\",selenium.getEval(\"'${var1}'.toUpperCase()\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 43,
        "startColumnNumber" : 4,
        "endLineNumber" : 43,
        "endColumnNumber" : 74
      },
      "nodeContext" : "selenium.type(\"theText\",selenium.getEval(\"'${var1}'.toUpperCase()\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1305,
        "startLineNumber" : 30,
        "startColumnNumber" : 41,
        "endLineNumber" : 51,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  selenium.open(\"test_store_value.html\");\n  selenium.type(\"theText\",selenium.getEval(\"[1,2,3,4,5].join(':')\"));\n  verifyEquals(selenium.getValue(\"theText\"),\"1:2:3:4:5\");\n  selenium.type(selenium.getEval(\"'the' + 'Text'\"),selenium.getEval(\"10 * 5\"));\n  verifyEquals(selenium.getValue(\"theText\"),\"50\");\n  verifyEquals(selenium.getValue(\"theText\"),selenium.getEval(\"10 + 10 + 10 + 10 + 10\"));\n  selenium.type(\"theText\",selenium.getEval(\"\\n function square(n) {\\n return n * n;\\n };\\n '25 * 25 = ' + square(25);\\n \"));\n  verifyTrue(selenium.getValue(\"theText\").matches(\"^25 [\\\\s\\\\S]* 25 = 625$\"));\n  String var1=\"the value\";\n  selenium.type(\"theText\",selenium.getEval(\"'${var1}'.toUpperCase()\"));\n  verifyEquals(selenium.getValue(\"theText\"),\"${VAR1}\");\n  selenium.type(\"theText\",selenium.getEval(\"'\" + var1 + \"'.toUpperCase()\"));\n  verifyEquals(selenium.getValue(\"theText\"),\"THE VALUE\");\n  verifyEquals(selenium.getExpression(selenium.getEval(\"'\" + var1 + \"'.toUpperCase()\")),\"THE VALUE\");\n  verifyTrue(Pattern.compile(\"TH[Ee] VALUE\").matcher(selenium.getExpression(selenium.getEval(\"selenium.getValue('theText')\"))).find());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 148,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1352,
        "startLineNumber" : 29,
        "startColumnNumber" : 2,
        "endLineNumber" : 51,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testJavascriptParameters(){\n  selenium.open(\"test_store_value.html\");\n  selenium.type(\"theText\",selenium.getEval(\"[1,2,3,4,5].join(':')\"));\n  verifyEquals(selenium.getValue(\"theText\"),\"1:2:3:4:5\");\n  selenium.type(selenium.getEval(\"'the' + 'Text'\"),selenium.getEval(\"10 * 5\"));\n  verifyEquals(selenium.getValue(\"theText\"),\"50\");\n  verifyEquals(selenium.getValue(\"theText\"),selenium.getEval(\"10 + 10 + 10 + 10 + 10\"));\n  selenium.type(\"theText\",selenium.getEval(\"\\n function square(n) {\\n return n * n;\\n };\\n '25 * 25 = ' + square(25);\\n \"));\n  verifyTrue(selenium.getValue(\"theText\").matches(\"^25 [\\\\s\\\\S]* 25 = 625$\"));\n  String var1=\"the value\";\n  selenium.type(\"theText\",selenium.getEval(\"'${var1}'.toUpperCase()\"));\n  verifyEquals(selenium.getValue(\"theText\"),\"${VAR1}\");\n  selenium.type(\"theText\",selenium.getEval(\"'\" + var1 + \"'.toUpperCase()\"));\n  verifyEquals(selenium.getValue(\"theText\"),\"THE VALUE\");\n  verifyEquals(selenium.getExpression(selenium.getEval(\"'\" + var1 + \"'.toUpperCase()\")),\"THE VALUE\");\n  verifyTrue(Pattern.compile(\"TH[Ee] VALUE\").matcher(selenium.getExpression(selenium.getEval(\"selenium.getValue('theText')\"))).find());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 154,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 43,
        "startColumnNumber" : 4,
        "endLineNumber" : 43,
        "endColumnNumber" : 74
      },
      "nodeContext" : "selenium.type(\"theText\",selenium.getEval(\"'${var1}'.toUpperCase()\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 25,
    "startLineNumber" : 43,
    "startColumnNumber" : 46,
    "endLineNumber" : 43,
    "endColumnNumber" : 71
  } ],
  "layoutRelationDataList" : [ ]
}