{
  "id" : 332,
  "expression" : "bag",
  "projectName" : "google@gson",
  "commitID" : "c3d0f200b352f411b9ebe45c3bf49d4328b2c51f",
  "filePath" : "/metrics/src/main/java/com/google/gson/metrics/CollectionsDeserializationBenchmark.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "bag",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 121,
      "startColumnNumber" : 30,
      "endLineNumber" : 121,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 121,
        "startColumnNumber" : 16,
        "endLineNumber" : 121,
        "endColumnNumber" : 49
      },
      "nodeContext" : "field.setLong(bag,jr.nextLong())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 121,
        "startColumnNumber" : 16,
        "endLineNumber" : 121,
        "endColumnNumber" : 50
      },
      "nodeContext" : "field.setLong(bag,jr.nextLong());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 120,
        "startColumnNumber" : 48,
        "endLineNumber" : 122,
        "endColumnNumber" : 15
      },
      "nodeContext" : "{\n  field.setLong(bag,jr.nextLong());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 553,
        "startLineNumber" : 120,
        "startColumnNumber" : 14,
        "endLineNumber" : 130,
        "endColumnNumber" : 15
      },
      "nodeContext" : "if (fieldType.equals(long.class)) {\n  field.setLong(bag,jr.nextLong());\n}\n else if (fieldType.equals(int.class)) {\n  field.setInt(bag,jr.nextInt());\n}\n else if (fieldType.equals(boolean.class)) {\n  field.setBoolean(bag,jr.nextBoolean());\n}\n else if (fieldType.equals(String.class)) {\n  field.set(bag,jr.nextString());\n}\n else {\n  throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 71,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 635,
        "startLineNumber" : 118,
        "startColumnNumber" : 46,
        "endLineNumber" : 131,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Class<?> fieldType=field.getType();\n  if (fieldType.equals(long.class)) {\n    field.setLong(bag,jr.nextLong());\n  }\n else   if (fieldType.equals(int.class)) {\n    field.setInt(bag,jr.nextInt());\n  }\n else   if (fieldType.equals(boolean.class)) {\n    field.setBoolean(bag,jr.nextBoolean());\n  }\n else   if (fieldType.equals(String.class)) {\n    field.set(bag,jr.nextString());\n  }\n else {\n    throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 82,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 669,
        "startLineNumber" : 118,
        "startColumnNumber" : 12,
        "endLineNumber" : 131,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (field.getName().equals(name)) {\n  Class<?> fieldType=field.getType();\n  if (fieldType.equals(long.class)) {\n    field.setLong(bag,jr.nextLong());\n  }\n else   if (fieldType.equals(int.class)) {\n    field.setInt(bag,jr.nextInt());\n  }\n else   if (fieldType.equals(boolean.class)) {\n    field.setBoolean(bag,jr.nextBoolean());\n  }\n else   if (fieldType.equals(String.class)) {\n    field.set(bag,jr.nextString());\n  }\n else {\n    throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 89,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 695,
        "startLineNumber" : 117,
        "startColumnNumber" : 72,
        "endLineNumber" : 132,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  if (field.getName().equals(name)) {\n    Class<?> fieldType=field.getType();\n    if (fieldType.equals(long.class)) {\n      field.setLong(bag,jr.nextLong());\n    }\n else     if (fieldType.equals(int.class)) {\n      field.setInt(bag,jr.nextInt());\n    }\n else     if (fieldType.equals(boolean.class)) {\n      field.setBoolean(bag,jr.nextBoolean());\n    }\n else     if (fieldType.equals(String.class)) {\n      field.set(bag,jr.nextString());\n    }\n else {\n      throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 90,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 757,
        "startLineNumber" : 117,
        "startColumnNumber" : 10,
        "endLineNumber" : 132,
        "endColumnNumber" : 11
      },
      "nodeContext" : "for (Field field : BagOfPrimitives.class.getDeclaredFields()) {\n  if (field.getName().equals(name)) {\n    Class<?> fieldType=field.getType();\n    if (fieldType.equals(long.class)) {\n      field.setLong(bag,jr.nextLong());\n    }\n else     if (fieldType.equals(int.class)) {\n      field.setInt(bag,jr.nextInt());\n    }\n else     if (fieldType.equals(boolean.class)) {\n      field.setBoolean(bag,jr.nextBoolean());\n    }\n else     if (fieldType.equals(String.class)) {\n      field.set(bag,jr.nextString());\n    }\n else {\n      throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 100,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 818,
        "startLineNumber" : 115,
        "startColumnNumber" : 28,
        "endLineNumber" : 133,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String name=jr.nextName();\n  for (  Field field : BagOfPrimitives.class.getDeclaredFields()) {\n    if (field.getName().equals(name)) {\n      Class<?> fieldType=field.getType();\n      if (fieldType.equals(long.class)) {\n        field.setLong(bag,jr.nextLong());\n      }\n else       if (fieldType.equals(int.class)) {\n        field.setInt(bag,jr.nextInt());\n      }\n else       if (fieldType.equals(boolean.class)) {\n        field.setBoolean(bag,jr.nextBoolean());\n      }\n else       if (fieldType.equals(String.class)) {\n        field.set(bag,jr.nextString());\n      }\n else {\n        throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 109,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 838,
        "startLineNumber" : 115,
        "startColumnNumber" : 8,
        "endLineNumber" : 133,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (jr.hasNext()) {\n  String name=jr.nextName();\n  for (  Field field : BagOfPrimitives.class.getDeclaredFields()) {\n    if (field.getName().equals(name)) {\n      Class<?> fieldType=field.getType();\n      if (fieldType.equals(long.class)) {\n        field.setLong(bag,jr.nextLong());\n      }\n else       if (fieldType.equals(int.class)) {\n        field.setInt(bag,jr.nextInt());\n      }\n else       if (fieldType.equals(boolean.class)) {\n        field.setBoolean(bag,jr.nextBoolean());\n      }\n else       if (fieldType.equals(String.class)) {\n        field.set(bag,jr.nextString());\n      }\n else {\n        throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n      }\n    }\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 113,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 982,
        "startLineNumber" : 112,
        "startColumnNumber" : 26,
        "endLineNumber" : 136,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  jr.beginObject();\n  BagOfPrimitives bag=new BagOfPrimitives();\n  while (jr.hasNext()) {\n    String name=jr.nextName();\n    for (    Field field : BagOfPrimitives.class.getDeclaredFields()) {\n      if (field.getName().equals(name)) {\n        Class<?> fieldType=field.getType();\n        if (fieldType.equals(long.class)) {\n          field.setLong(bag,jr.nextLong());\n        }\n else         if (fieldType.equals(int.class)) {\n          field.setInt(bag,jr.nextInt());\n        }\n else         if (fieldType.equals(boolean.class)) {\n          field.setBoolean(bag,jr.nextBoolean());\n        }\n else         if (fieldType.equals(String.class)) {\n          field.set(bag,jr.nextString());\n        }\n else {\n          throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n        }\n      }\n    }\n  }\n  jr.endObject();\n  bags.add(bag);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 135,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1002,
        "startLineNumber" : 112,
        "startColumnNumber" : 6,
        "endLineNumber" : 136,
        "endColumnNumber" : 7
      },
      "nodeContext" : "while (jr.hasNext()) {\n  jr.beginObject();\n  BagOfPrimitives bag=new BagOfPrimitives();\n  while (jr.hasNext()) {\n    String name=jr.nextName();\n    for (    Field field : BagOfPrimitives.class.getDeclaredFields()) {\n      if (field.getName().equals(name)) {\n        Class<?> fieldType=field.getType();\n        if (fieldType.equals(long.class)) {\n          field.setLong(bag,jr.nextLong());\n        }\n else         if (fieldType.equals(int.class)) {\n          field.setInt(bag,jr.nextInt());\n        }\n else         if (fieldType.equals(boolean.class)) {\n          field.setBoolean(bag,jr.nextBoolean());\n        }\n else         if (fieldType.equals(String.class)) {\n          field.set(bag,jr.nextString());\n        }\n else {\n          throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n        }\n      }\n    }\n  }\n  jr.endObject();\n  bags.add(bag);\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 139,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1227,
        "startLineNumber" : 107,
        "startColumnNumber" : 31,
        "endLineNumber" : 138,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  StringReader reader=new StringReader(json);\n  JsonReader jr=new JsonReader(reader);\n  jr.beginArray();\n  List<BagOfPrimitives> bags=new ArrayList<BagOfPrimitives>();\n  while (jr.hasNext()) {\n    jr.beginObject();\n    BagOfPrimitives bag=new BagOfPrimitives();\n    while (jr.hasNext()) {\n      String name=jr.nextName();\n      for (      Field field : BagOfPrimitives.class.getDeclaredFields()) {\n        if (field.getName().equals(name)) {\n          Class<?> fieldType=field.getType();\n          if (fieldType.equals(long.class)) {\n            field.setLong(bag,jr.nextLong());\n          }\n else           if (fieldType.equals(int.class)) {\n            field.setInt(bag,jr.nextInt());\n          }\n else           if (fieldType.equals(boolean.class)) {\n            field.setBoolean(bag,jr.nextBoolean());\n          }\n else           if (fieldType.equals(String.class)) {\n            field.set(bag,jr.nextString());\n          }\n else {\n            throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n          }\n        }\n      }\n    }\n    jr.endObject();\n    bags.add(bag);\n  }\n  jr.endArray();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 180,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1254,
        "startLineNumber" : 107,
        "startColumnNumber" : 4,
        "endLineNumber" : 138,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < reps; ++i) {\n  StringReader reader=new StringReader(json);\n  JsonReader jr=new JsonReader(reader);\n  jr.beginArray();\n  List<BagOfPrimitives> bags=new ArrayList<BagOfPrimitives>();\n  while (jr.hasNext()) {\n    jr.beginObject();\n    BagOfPrimitives bag=new BagOfPrimitives();\n    while (jr.hasNext()) {\n      String name=jr.nextName();\n      for (      Field field : BagOfPrimitives.class.getDeclaredFields()) {\n        if (field.getName().equals(name)) {\n          Class<?> fieldType=field.getType();\n          if (fieldType.equals(long.class)) {\n            field.setLong(bag,jr.nextLong());\n          }\n else           if (fieldType.equals(int.class)) {\n            field.setInt(bag,jr.nextInt());\n          }\n else           if (fieldType.equals(boolean.class)) {\n            field.setBoolean(bag,jr.nextBoolean());\n          }\n else           if (fieldType.equals(String.class)) {\n            field.set(bag,jr.nextString());\n          }\n else {\n            throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n          }\n        }\n      }\n    }\n    jr.endObject();\n    bags.add(bag);\n  }\n  jr.endArray();\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 191,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1264,
        "startLineNumber" : 106,
        "startColumnNumber" : 76,
        "endLineNumber" : 139,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (int i=0; i < reps; ++i) {\n    StringReader reader=new StringReader(json);\n    JsonReader jr=new JsonReader(reader);\n    jr.beginArray();\n    List<BagOfPrimitives> bags=new ArrayList<BagOfPrimitives>();\n    while (jr.hasNext()) {\n      jr.beginObject();\n      BagOfPrimitives bag=new BagOfPrimitives();\n      while (jr.hasNext()) {\n        String name=jr.nextName();\n        for (        Field field : BagOfPrimitives.class.getDeclaredFields()) {\n          if (field.getName().equals(name)) {\n            Class<?> fieldType=field.getType();\n            if (fieldType.equals(long.class)) {\n              field.setLong(bag,jr.nextLong());\n            }\n else             if (fieldType.equals(int.class)) {\n              field.setInt(bag,jr.nextInt());\n            }\n else             if (fieldType.equals(boolean.class)) {\n              field.setBoolean(bag,jr.nextBoolean());\n            }\n else             if (fieldType.equals(String.class)) {\n              field.set(bag,jr.nextString());\n            }\n else {\n              throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n            }\n          }\n        }\n      }\n      jr.endObject();\n      bags.add(bag);\n    }\n    jr.endArray();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 192,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1591,
        "startLineNumber" : 101,
        "startColumnNumber" : 2,
        "endLineNumber" : 139,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * This benchmark measures the ideal Gson performance: the cost of parsing a JSON stream and setting object values by reflection. We should strive to reduce the discrepancy between this and  {@link #timeCollectionsDefault(int)} .\n */\npublic void timeCollectionsReflectionStreaming(int reps) throws Exception {\n  for (int i=0; i < reps; ++i) {\n    StringReader reader=new StringReader(json);\n    JsonReader jr=new JsonReader(reader);\n    jr.beginArray();\n    List<BagOfPrimitives> bags=new ArrayList<BagOfPrimitives>();\n    while (jr.hasNext()) {\n      jr.beginObject();\n      BagOfPrimitives bag=new BagOfPrimitives();\n      while (jr.hasNext()) {\n        String name=jr.nextName();\n        for (        Field field : BagOfPrimitives.class.getDeclaredFields()) {\n          if (field.getName().equals(name)) {\n            Class<?> fieldType=field.getType();\n            if (fieldType.equals(long.class)) {\n              field.setLong(bag,jr.nextLong());\n            }\n else             if (fieldType.equals(int.class)) {\n              field.setInt(bag,jr.nextInt());\n            }\n else             if (fieldType.equals(boolean.class)) {\n              field.setBoolean(bag,jr.nextBoolean());\n            }\n else             if (fieldType.equals(String.class)) {\n              field.set(bag,jr.nextString());\n            }\n else {\n              throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n            }\n          }\n        }\n      }\n      jr.endObject();\n      bags.add(bag);\n    }\n    jr.endArray();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 202,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 121,
        "startColumnNumber" : 16,
        "endLineNumber" : 121,
        "endColumnNumber" : 50
      },
      "nodeContext" : "field.setLong(bag,jr.nextLong());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.gson.metrics.BagOfPrimitives"
  }, {
    "nodeContext" : "bag",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 123,
      "startColumnNumber" : 29,
      "endLineNumber" : 123,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 123,
        "startColumnNumber" : 16,
        "endLineNumber" : 123,
        "endColumnNumber" : 47
      },
      "nodeContext" : "field.setInt(bag,jr.nextInt())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 123,
        "startColumnNumber" : 16,
        "endLineNumber" : 123,
        "endColumnNumber" : 48
      },
      "nodeContext" : "field.setInt(bag,jr.nextInt());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 122,
        "startColumnNumber" : 54,
        "endLineNumber" : 124,
        "endColumnNumber" : 15
      },
      "nodeContext" : "{\n  field.setInt(bag,jr.nextInt());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 445,
        "startLineNumber" : 122,
        "startColumnNumber" : 21,
        "endLineNumber" : 130,
        "endColumnNumber" : 15
      },
      "nodeContext" : "if (fieldType.equals(int.class)) {\n  field.setInt(bag,jr.nextInt());\n}\n else if (fieldType.equals(boolean.class)) {\n  field.setBoolean(bag,jr.nextBoolean());\n}\n else if (fieldType.equals(String.class)) {\n  field.set(bag,jr.nextString());\n}\n else {\n  throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 56,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 553,
        "startLineNumber" : 120,
        "startColumnNumber" : 14,
        "endLineNumber" : 130,
        "endColumnNumber" : 15
      },
      "nodeContext" : "if (fieldType.equals(long.class)) {\n  field.setLong(bag,jr.nextLong());\n}\n else if (fieldType.equals(int.class)) {\n  field.setInt(bag,jr.nextInt());\n}\n else if (fieldType.equals(boolean.class)) {\n  field.setBoolean(bag,jr.nextBoolean());\n}\n else if (fieldType.equals(String.class)) {\n  field.set(bag,jr.nextString());\n}\n else {\n  throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 71,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 635,
        "startLineNumber" : 118,
        "startColumnNumber" : 46,
        "endLineNumber" : 131,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Class<?> fieldType=field.getType();\n  if (fieldType.equals(long.class)) {\n    field.setLong(bag,jr.nextLong());\n  }\n else   if (fieldType.equals(int.class)) {\n    field.setInt(bag,jr.nextInt());\n  }\n else   if (fieldType.equals(boolean.class)) {\n    field.setBoolean(bag,jr.nextBoolean());\n  }\n else   if (fieldType.equals(String.class)) {\n    field.set(bag,jr.nextString());\n  }\n else {\n    throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 82,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 669,
        "startLineNumber" : 118,
        "startColumnNumber" : 12,
        "endLineNumber" : 131,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (field.getName().equals(name)) {\n  Class<?> fieldType=field.getType();\n  if (fieldType.equals(long.class)) {\n    field.setLong(bag,jr.nextLong());\n  }\n else   if (fieldType.equals(int.class)) {\n    field.setInt(bag,jr.nextInt());\n  }\n else   if (fieldType.equals(boolean.class)) {\n    field.setBoolean(bag,jr.nextBoolean());\n  }\n else   if (fieldType.equals(String.class)) {\n    field.set(bag,jr.nextString());\n  }\n else {\n    throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 89,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 695,
        "startLineNumber" : 117,
        "startColumnNumber" : 72,
        "endLineNumber" : 132,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  if (field.getName().equals(name)) {\n    Class<?> fieldType=field.getType();\n    if (fieldType.equals(long.class)) {\n      field.setLong(bag,jr.nextLong());\n    }\n else     if (fieldType.equals(int.class)) {\n      field.setInt(bag,jr.nextInt());\n    }\n else     if (fieldType.equals(boolean.class)) {\n      field.setBoolean(bag,jr.nextBoolean());\n    }\n else     if (fieldType.equals(String.class)) {\n      field.set(bag,jr.nextString());\n    }\n else {\n      throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 90,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 757,
        "startLineNumber" : 117,
        "startColumnNumber" : 10,
        "endLineNumber" : 132,
        "endColumnNumber" : 11
      },
      "nodeContext" : "for (Field field : BagOfPrimitives.class.getDeclaredFields()) {\n  if (field.getName().equals(name)) {\n    Class<?> fieldType=field.getType();\n    if (fieldType.equals(long.class)) {\n      field.setLong(bag,jr.nextLong());\n    }\n else     if (fieldType.equals(int.class)) {\n      field.setInt(bag,jr.nextInt());\n    }\n else     if (fieldType.equals(boolean.class)) {\n      field.setBoolean(bag,jr.nextBoolean());\n    }\n else     if (fieldType.equals(String.class)) {\n      field.set(bag,jr.nextString());\n    }\n else {\n      throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 100,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 818,
        "startLineNumber" : 115,
        "startColumnNumber" : 28,
        "endLineNumber" : 133,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String name=jr.nextName();\n  for (  Field field : BagOfPrimitives.class.getDeclaredFields()) {\n    if (field.getName().equals(name)) {\n      Class<?> fieldType=field.getType();\n      if (fieldType.equals(long.class)) {\n        field.setLong(bag,jr.nextLong());\n      }\n else       if (fieldType.equals(int.class)) {\n        field.setInt(bag,jr.nextInt());\n      }\n else       if (fieldType.equals(boolean.class)) {\n        field.setBoolean(bag,jr.nextBoolean());\n      }\n else       if (fieldType.equals(String.class)) {\n        field.set(bag,jr.nextString());\n      }\n else {\n        throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 109,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 838,
        "startLineNumber" : 115,
        "startColumnNumber" : 8,
        "endLineNumber" : 133,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (jr.hasNext()) {\n  String name=jr.nextName();\n  for (  Field field : BagOfPrimitives.class.getDeclaredFields()) {\n    if (field.getName().equals(name)) {\n      Class<?> fieldType=field.getType();\n      if (fieldType.equals(long.class)) {\n        field.setLong(bag,jr.nextLong());\n      }\n else       if (fieldType.equals(int.class)) {\n        field.setInt(bag,jr.nextInt());\n      }\n else       if (fieldType.equals(boolean.class)) {\n        field.setBoolean(bag,jr.nextBoolean());\n      }\n else       if (fieldType.equals(String.class)) {\n        field.set(bag,jr.nextString());\n      }\n else {\n        throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n      }\n    }\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 113,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 982,
        "startLineNumber" : 112,
        "startColumnNumber" : 26,
        "endLineNumber" : 136,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  jr.beginObject();\n  BagOfPrimitives bag=new BagOfPrimitives();\n  while (jr.hasNext()) {\n    String name=jr.nextName();\n    for (    Field field : BagOfPrimitives.class.getDeclaredFields()) {\n      if (field.getName().equals(name)) {\n        Class<?> fieldType=field.getType();\n        if (fieldType.equals(long.class)) {\n          field.setLong(bag,jr.nextLong());\n        }\n else         if (fieldType.equals(int.class)) {\n          field.setInt(bag,jr.nextInt());\n        }\n else         if (fieldType.equals(boolean.class)) {\n          field.setBoolean(bag,jr.nextBoolean());\n        }\n else         if (fieldType.equals(String.class)) {\n          field.set(bag,jr.nextString());\n        }\n else {\n          throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n        }\n      }\n    }\n  }\n  jr.endObject();\n  bags.add(bag);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 135,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1002,
        "startLineNumber" : 112,
        "startColumnNumber" : 6,
        "endLineNumber" : 136,
        "endColumnNumber" : 7
      },
      "nodeContext" : "while (jr.hasNext()) {\n  jr.beginObject();\n  BagOfPrimitives bag=new BagOfPrimitives();\n  while (jr.hasNext()) {\n    String name=jr.nextName();\n    for (    Field field : BagOfPrimitives.class.getDeclaredFields()) {\n      if (field.getName().equals(name)) {\n        Class<?> fieldType=field.getType();\n        if (fieldType.equals(long.class)) {\n          field.setLong(bag,jr.nextLong());\n        }\n else         if (fieldType.equals(int.class)) {\n          field.setInt(bag,jr.nextInt());\n        }\n else         if (fieldType.equals(boolean.class)) {\n          field.setBoolean(bag,jr.nextBoolean());\n        }\n else         if (fieldType.equals(String.class)) {\n          field.set(bag,jr.nextString());\n        }\n else {\n          throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n        }\n      }\n    }\n  }\n  jr.endObject();\n  bags.add(bag);\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 139,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1227,
        "startLineNumber" : 107,
        "startColumnNumber" : 31,
        "endLineNumber" : 138,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  StringReader reader=new StringReader(json);\n  JsonReader jr=new JsonReader(reader);\n  jr.beginArray();\n  List<BagOfPrimitives> bags=new ArrayList<BagOfPrimitives>();\n  while (jr.hasNext()) {\n    jr.beginObject();\n    BagOfPrimitives bag=new BagOfPrimitives();\n    while (jr.hasNext()) {\n      String name=jr.nextName();\n      for (      Field field : BagOfPrimitives.class.getDeclaredFields()) {\n        if (field.getName().equals(name)) {\n          Class<?> fieldType=field.getType();\n          if (fieldType.equals(long.class)) {\n            field.setLong(bag,jr.nextLong());\n          }\n else           if (fieldType.equals(int.class)) {\n            field.setInt(bag,jr.nextInt());\n          }\n else           if (fieldType.equals(boolean.class)) {\n            field.setBoolean(bag,jr.nextBoolean());\n          }\n else           if (fieldType.equals(String.class)) {\n            field.set(bag,jr.nextString());\n          }\n else {\n            throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n          }\n        }\n      }\n    }\n    jr.endObject();\n    bags.add(bag);\n  }\n  jr.endArray();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 180,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1254,
        "startLineNumber" : 107,
        "startColumnNumber" : 4,
        "endLineNumber" : 138,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < reps; ++i) {\n  StringReader reader=new StringReader(json);\n  JsonReader jr=new JsonReader(reader);\n  jr.beginArray();\n  List<BagOfPrimitives> bags=new ArrayList<BagOfPrimitives>();\n  while (jr.hasNext()) {\n    jr.beginObject();\n    BagOfPrimitives bag=new BagOfPrimitives();\n    while (jr.hasNext()) {\n      String name=jr.nextName();\n      for (      Field field : BagOfPrimitives.class.getDeclaredFields()) {\n        if (field.getName().equals(name)) {\n          Class<?> fieldType=field.getType();\n          if (fieldType.equals(long.class)) {\n            field.setLong(bag,jr.nextLong());\n          }\n else           if (fieldType.equals(int.class)) {\n            field.setInt(bag,jr.nextInt());\n          }\n else           if (fieldType.equals(boolean.class)) {\n            field.setBoolean(bag,jr.nextBoolean());\n          }\n else           if (fieldType.equals(String.class)) {\n            field.set(bag,jr.nextString());\n          }\n else {\n            throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n          }\n        }\n      }\n    }\n    jr.endObject();\n    bags.add(bag);\n  }\n  jr.endArray();\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 191,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1264,
        "startLineNumber" : 106,
        "startColumnNumber" : 76,
        "endLineNumber" : 139,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (int i=0; i < reps; ++i) {\n    StringReader reader=new StringReader(json);\n    JsonReader jr=new JsonReader(reader);\n    jr.beginArray();\n    List<BagOfPrimitives> bags=new ArrayList<BagOfPrimitives>();\n    while (jr.hasNext()) {\n      jr.beginObject();\n      BagOfPrimitives bag=new BagOfPrimitives();\n      while (jr.hasNext()) {\n        String name=jr.nextName();\n        for (        Field field : BagOfPrimitives.class.getDeclaredFields()) {\n          if (field.getName().equals(name)) {\n            Class<?> fieldType=field.getType();\n            if (fieldType.equals(long.class)) {\n              field.setLong(bag,jr.nextLong());\n            }\n else             if (fieldType.equals(int.class)) {\n              field.setInt(bag,jr.nextInt());\n            }\n else             if (fieldType.equals(boolean.class)) {\n              field.setBoolean(bag,jr.nextBoolean());\n            }\n else             if (fieldType.equals(String.class)) {\n              field.set(bag,jr.nextString());\n            }\n else {\n              throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n            }\n          }\n        }\n      }\n      jr.endObject();\n      bags.add(bag);\n    }\n    jr.endArray();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 192,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1591,
        "startLineNumber" : 101,
        "startColumnNumber" : 2,
        "endLineNumber" : 139,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * This benchmark measures the ideal Gson performance: the cost of parsing a JSON stream and setting object values by reflection. We should strive to reduce the discrepancy between this and  {@link #timeCollectionsDefault(int)} .\n */\npublic void timeCollectionsReflectionStreaming(int reps) throws Exception {\n  for (int i=0; i < reps; ++i) {\n    StringReader reader=new StringReader(json);\n    JsonReader jr=new JsonReader(reader);\n    jr.beginArray();\n    List<BagOfPrimitives> bags=new ArrayList<BagOfPrimitives>();\n    while (jr.hasNext()) {\n      jr.beginObject();\n      BagOfPrimitives bag=new BagOfPrimitives();\n      while (jr.hasNext()) {\n        String name=jr.nextName();\n        for (        Field field : BagOfPrimitives.class.getDeclaredFields()) {\n          if (field.getName().equals(name)) {\n            Class<?> fieldType=field.getType();\n            if (fieldType.equals(long.class)) {\n              field.setLong(bag,jr.nextLong());\n            }\n else             if (fieldType.equals(int.class)) {\n              field.setInt(bag,jr.nextInt());\n            }\n else             if (fieldType.equals(boolean.class)) {\n              field.setBoolean(bag,jr.nextBoolean());\n            }\n else             if (fieldType.equals(String.class)) {\n              field.set(bag,jr.nextString());\n            }\n else {\n              throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n            }\n          }\n        }\n      }\n      jr.endObject();\n      bags.add(bag);\n    }\n    jr.endArray();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 202,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 123,
        "startColumnNumber" : 16,
        "endLineNumber" : 123,
        "endColumnNumber" : 48
      },
      "nodeContext" : "field.setInt(bag,jr.nextInt());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.gson.metrics.BagOfPrimitives"
  }, {
    "nodeContext" : "bag",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 125,
      "startColumnNumber" : 33,
      "endLineNumber" : 125,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 125,
        "startColumnNumber" : 16,
        "endLineNumber" : 125,
        "endColumnNumber" : 55
      },
      "nodeContext" : "field.setBoolean(bag,jr.nextBoolean())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 125,
        "startColumnNumber" : 16,
        "endLineNumber" : 125,
        "endColumnNumber" : 56
      },
      "nodeContext" : "field.setBoolean(bag,jr.nextBoolean());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 124,
        "startColumnNumber" : 58,
        "endLineNumber" : 126,
        "endColumnNumber" : 15
      },
      "nodeContext" : "{\n  field.setBoolean(bag,jr.nextBoolean());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 340,
        "startLineNumber" : 124,
        "startColumnNumber" : 21,
        "endLineNumber" : 130,
        "endColumnNumber" : 15
      },
      "nodeContext" : "if (fieldType.equals(boolean.class)) {\n  field.setBoolean(bag,jr.nextBoolean());\n}\n else if (fieldType.equals(String.class)) {\n  field.set(bag,jr.nextString());\n}\n else {\n  throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 41,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 445,
        "startLineNumber" : 122,
        "startColumnNumber" : 21,
        "endLineNumber" : 130,
        "endColumnNumber" : 15
      },
      "nodeContext" : "if (fieldType.equals(int.class)) {\n  field.setInt(bag,jr.nextInt());\n}\n else if (fieldType.equals(boolean.class)) {\n  field.setBoolean(bag,jr.nextBoolean());\n}\n else if (fieldType.equals(String.class)) {\n  field.set(bag,jr.nextString());\n}\n else {\n  throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 56,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 553,
        "startLineNumber" : 120,
        "startColumnNumber" : 14,
        "endLineNumber" : 130,
        "endColumnNumber" : 15
      },
      "nodeContext" : "if (fieldType.equals(long.class)) {\n  field.setLong(bag,jr.nextLong());\n}\n else if (fieldType.equals(int.class)) {\n  field.setInt(bag,jr.nextInt());\n}\n else if (fieldType.equals(boolean.class)) {\n  field.setBoolean(bag,jr.nextBoolean());\n}\n else if (fieldType.equals(String.class)) {\n  field.set(bag,jr.nextString());\n}\n else {\n  throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 71,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 635,
        "startLineNumber" : 118,
        "startColumnNumber" : 46,
        "endLineNumber" : 131,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Class<?> fieldType=field.getType();\n  if (fieldType.equals(long.class)) {\n    field.setLong(bag,jr.nextLong());\n  }\n else   if (fieldType.equals(int.class)) {\n    field.setInt(bag,jr.nextInt());\n  }\n else   if (fieldType.equals(boolean.class)) {\n    field.setBoolean(bag,jr.nextBoolean());\n  }\n else   if (fieldType.equals(String.class)) {\n    field.set(bag,jr.nextString());\n  }\n else {\n    throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 82,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 669,
        "startLineNumber" : 118,
        "startColumnNumber" : 12,
        "endLineNumber" : 131,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (field.getName().equals(name)) {\n  Class<?> fieldType=field.getType();\n  if (fieldType.equals(long.class)) {\n    field.setLong(bag,jr.nextLong());\n  }\n else   if (fieldType.equals(int.class)) {\n    field.setInt(bag,jr.nextInt());\n  }\n else   if (fieldType.equals(boolean.class)) {\n    field.setBoolean(bag,jr.nextBoolean());\n  }\n else   if (fieldType.equals(String.class)) {\n    field.set(bag,jr.nextString());\n  }\n else {\n    throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 89,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 695,
        "startLineNumber" : 117,
        "startColumnNumber" : 72,
        "endLineNumber" : 132,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  if (field.getName().equals(name)) {\n    Class<?> fieldType=field.getType();\n    if (fieldType.equals(long.class)) {\n      field.setLong(bag,jr.nextLong());\n    }\n else     if (fieldType.equals(int.class)) {\n      field.setInt(bag,jr.nextInt());\n    }\n else     if (fieldType.equals(boolean.class)) {\n      field.setBoolean(bag,jr.nextBoolean());\n    }\n else     if (fieldType.equals(String.class)) {\n      field.set(bag,jr.nextString());\n    }\n else {\n      throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 90,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 757,
        "startLineNumber" : 117,
        "startColumnNumber" : 10,
        "endLineNumber" : 132,
        "endColumnNumber" : 11
      },
      "nodeContext" : "for (Field field : BagOfPrimitives.class.getDeclaredFields()) {\n  if (field.getName().equals(name)) {\n    Class<?> fieldType=field.getType();\n    if (fieldType.equals(long.class)) {\n      field.setLong(bag,jr.nextLong());\n    }\n else     if (fieldType.equals(int.class)) {\n      field.setInt(bag,jr.nextInt());\n    }\n else     if (fieldType.equals(boolean.class)) {\n      field.setBoolean(bag,jr.nextBoolean());\n    }\n else     if (fieldType.equals(String.class)) {\n      field.set(bag,jr.nextString());\n    }\n else {\n      throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 100,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 818,
        "startLineNumber" : 115,
        "startColumnNumber" : 28,
        "endLineNumber" : 133,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String name=jr.nextName();\n  for (  Field field : BagOfPrimitives.class.getDeclaredFields()) {\n    if (field.getName().equals(name)) {\n      Class<?> fieldType=field.getType();\n      if (fieldType.equals(long.class)) {\n        field.setLong(bag,jr.nextLong());\n      }\n else       if (fieldType.equals(int.class)) {\n        field.setInt(bag,jr.nextInt());\n      }\n else       if (fieldType.equals(boolean.class)) {\n        field.setBoolean(bag,jr.nextBoolean());\n      }\n else       if (fieldType.equals(String.class)) {\n        field.set(bag,jr.nextString());\n      }\n else {\n        throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 109,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 838,
        "startLineNumber" : 115,
        "startColumnNumber" : 8,
        "endLineNumber" : 133,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (jr.hasNext()) {\n  String name=jr.nextName();\n  for (  Field field : BagOfPrimitives.class.getDeclaredFields()) {\n    if (field.getName().equals(name)) {\n      Class<?> fieldType=field.getType();\n      if (fieldType.equals(long.class)) {\n        field.setLong(bag,jr.nextLong());\n      }\n else       if (fieldType.equals(int.class)) {\n        field.setInt(bag,jr.nextInt());\n      }\n else       if (fieldType.equals(boolean.class)) {\n        field.setBoolean(bag,jr.nextBoolean());\n      }\n else       if (fieldType.equals(String.class)) {\n        field.set(bag,jr.nextString());\n      }\n else {\n        throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n      }\n    }\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 113,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 982,
        "startLineNumber" : 112,
        "startColumnNumber" : 26,
        "endLineNumber" : 136,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  jr.beginObject();\n  BagOfPrimitives bag=new BagOfPrimitives();\n  while (jr.hasNext()) {\n    String name=jr.nextName();\n    for (    Field field : BagOfPrimitives.class.getDeclaredFields()) {\n      if (field.getName().equals(name)) {\n        Class<?> fieldType=field.getType();\n        if (fieldType.equals(long.class)) {\n          field.setLong(bag,jr.nextLong());\n        }\n else         if (fieldType.equals(int.class)) {\n          field.setInt(bag,jr.nextInt());\n        }\n else         if (fieldType.equals(boolean.class)) {\n          field.setBoolean(bag,jr.nextBoolean());\n        }\n else         if (fieldType.equals(String.class)) {\n          field.set(bag,jr.nextString());\n        }\n else {\n          throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n        }\n      }\n    }\n  }\n  jr.endObject();\n  bags.add(bag);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 135,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1002,
        "startLineNumber" : 112,
        "startColumnNumber" : 6,
        "endLineNumber" : 136,
        "endColumnNumber" : 7
      },
      "nodeContext" : "while (jr.hasNext()) {\n  jr.beginObject();\n  BagOfPrimitives bag=new BagOfPrimitives();\n  while (jr.hasNext()) {\n    String name=jr.nextName();\n    for (    Field field : BagOfPrimitives.class.getDeclaredFields()) {\n      if (field.getName().equals(name)) {\n        Class<?> fieldType=field.getType();\n        if (fieldType.equals(long.class)) {\n          field.setLong(bag,jr.nextLong());\n        }\n else         if (fieldType.equals(int.class)) {\n          field.setInt(bag,jr.nextInt());\n        }\n else         if (fieldType.equals(boolean.class)) {\n          field.setBoolean(bag,jr.nextBoolean());\n        }\n else         if (fieldType.equals(String.class)) {\n          field.set(bag,jr.nextString());\n        }\n else {\n          throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n        }\n      }\n    }\n  }\n  jr.endObject();\n  bags.add(bag);\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 139,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1227,
        "startLineNumber" : 107,
        "startColumnNumber" : 31,
        "endLineNumber" : 138,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  StringReader reader=new StringReader(json);\n  JsonReader jr=new JsonReader(reader);\n  jr.beginArray();\n  List<BagOfPrimitives> bags=new ArrayList<BagOfPrimitives>();\n  while (jr.hasNext()) {\n    jr.beginObject();\n    BagOfPrimitives bag=new BagOfPrimitives();\n    while (jr.hasNext()) {\n      String name=jr.nextName();\n      for (      Field field : BagOfPrimitives.class.getDeclaredFields()) {\n        if (field.getName().equals(name)) {\n          Class<?> fieldType=field.getType();\n          if (fieldType.equals(long.class)) {\n            field.setLong(bag,jr.nextLong());\n          }\n else           if (fieldType.equals(int.class)) {\n            field.setInt(bag,jr.nextInt());\n          }\n else           if (fieldType.equals(boolean.class)) {\n            field.setBoolean(bag,jr.nextBoolean());\n          }\n else           if (fieldType.equals(String.class)) {\n            field.set(bag,jr.nextString());\n          }\n else {\n            throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n          }\n        }\n      }\n    }\n    jr.endObject();\n    bags.add(bag);\n  }\n  jr.endArray();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 180,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1254,
        "startLineNumber" : 107,
        "startColumnNumber" : 4,
        "endLineNumber" : 138,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < reps; ++i) {\n  StringReader reader=new StringReader(json);\n  JsonReader jr=new JsonReader(reader);\n  jr.beginArray();\n  List<BagOfPrimitives> bags=new ArrayList<BagOfPrimitives>();\n  while (jr.hasNext()) {\n    jr.beginObject();\n    BagOfPrimitives bag=new BagOfPrimitives();\n    while (jr.hasNext()) {\n      String name=jr.nextName();\n      for (      Field field : BagOfPrimitives.class.getDeclaredFields()) {\n        if (field.getName().equals(name)) {\n          Class<?> fieldType=field.getType();\n          if (fieldType.equals(long.class)) {\n            field.setLong(bag,jr.nextLong());\n          }\n else           if (fieldType.equals(int.class)) {\n            field.setInt(bag,jr.nextInt());\n          }\n else           if (fieldType.equals(boolean.class)) {\n            field.setBoolean(bag,jr.nextBoolean());\n          }\n else           if (fieldType.equals(String.class)) {\n            field.set(bag,jr.nextString());\n          }\n else {\n            throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n          }\n        }\n      }\n    }\n    jr.endObject();\n    bags.add(bag);\n  }\n  jr.endArray();\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 191,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1264,
        "startLineNumber" : 106,
        "startColumnNumber" : 76,
        "endLineNumber" : 139,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (int i=0; i < reps; ++i) {\n    StringReader reader=new StringReader(json);\n    JsonReader jr=new JsonReader(reader);\n    jr.beginArray();\n    List<BagOfPrimitives> bags=new ArrayList<BagOfPrimitives>();\n    while (jr.hasNext()) {\n      jr.beginObject();\n      BagOfPrimitives bag=new BagOfPrimitives();\n      while (jr.hasNext()) {\n        String name=jr.nextName();\n        for (        Field field : BagOfPrimitives.class.getDeclaredFields()) {\n          if (field.getName().equals(name)) {\n            Class<?> fieldType=field.getType();\n            if (fieldType.equals(long.class)) {\n              field.setLong(bag,jr.nextLong());\n            }\n else             if (fieldType.equals(int.class)) {\n              field.setInt(bag,jr.nextInt());\n            }\n else             if (fieldType.equals(boolean.class)) {\n              field.setBoolean(bag,jr.nextBoolean());\n            }\n else             if (fieldType.equals(String.class)) {\n              field.set(bag,jr.nextString());\n            }\n else {\n              throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n            }\n          }\n        }\n      }\n      jr.endObject();\n      bags.add(bag);\n    }\n    jr.endArray();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 192,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1591,
        "startLineNumber" : 101,
        "startColumnNumber" : 2,
        "endLineNumber" : 139,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * This benchmark measures the ideal Gson performance: the cost of parsing a JSON stream and setting object values by reflection. We should strive to reduce the discrepancy between this and  {@link #timeCollectionsDefault(int)} .\n */\npublic void timeCollectionsReflectionStreaming(int reps) throws Exception {\n  for (int i=0; i < reps; ++i) {\n    StringReader reader=new StringReader(json);\n    JsonReader jr=new JsonReader(reader);\n    jr.beginArray();\n    List<BagOfPrimitives> bags=new ArrayList<BagOfPrimitives>();\n    while (jr.hasNext()) {\n      jr.beginObject();\n      BagOfPrimitives bag=new BagOfPrimitives();\n      while (jr.hasNext()) {\n        String name=jr.nextName();\n        for (        Field field : BagOfPrimitives.class.getDeclaredFields()) {\n          if (field.getName().equals(name)) {\n            Class<?> fieldType=field.getType();\n            if (fieldType.equals(long.class)) {\n              field.setLong(bag,jr.nextLong());\n            }\n else             if (fieldType.equals(int.class)) {\n              field.setInt(bag,jr.nextInt());\n            }\n else             if (fieldType.equals(boolean.class)) {\n              field.setBoolean(bag,jr.nextBoolean());\n            }\n else             if (fieldType.equals(String.class)) {\n              field.set(bag,jr.nextString());\n            }\n else {\n              throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n            }\n          }\n        }\n      }\n      jr.endObject();\n      bags.add(bag);\n    }\n    jr.endArray();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 202,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 125,
        "startColumnNumber" : 16,
        "endLineNumber" : 125,
        "endColumnNumber" : 56
      },
      "nodeContext" : "field.setBoolean(bag,jr.nextBoolean());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.gson.metrics.BagOfPrimitives"
  }, {
    "nodeContext" : "bag",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 127,
      "startColumnNumber" : 26,
      "endLineNumber" : 127,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 127,
        "startColumnNumber" : 16,
        "endLineNumber" : 127,
        "endColumnNumber" : 47
      },
      "nodeContext" : "field.set(bag,jr.nextString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 127,
        "startColumnNumber" : 16,
        "endLineNumber" : 127,
        "endColumnNumber" : 48
      },
      "nodeContext" : "field.set(bag,jr.nextString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 126,
        "startColumnNumber" : 57,
        "endLineNumber" : 128,
        "endColumnNumber" : 15
      },
      "nodeContext" : "{\n  field.set(bag,jr.nextString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 223,
        "startLineNumber" : 126,
        "startColumnNumber" : 21,
        "endLineNumber" : 130,
        "endColumnNumber" : 15
      },
      "nodeContext" : "if (fieldType.equals(String.class)) {\n  field.set(bag,jr.nextString());\n}\n else {\n  throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 26,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 340,
        "startLineNumber" : 124,
        "startColumnNumber" : 21,
        "endLineNumber" : 130,
        "endColumnNumber" : 15
      },
      "nodeContext" : "if (fieldType.equals(boolean.class)) {\n  field.setBoolean(bag,jr.nextBoolean());\n}\n else if (fieldType.equals(String.class)) {\n  field.set(bag,jr.nextString());\n}\n else {\n  throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 41,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 445,
        "startLineNumber" : 122,
        "startColumnNumber" : 21,
        "endLineNumber" : 130,
        "endColumnNumber" : 15
      },
      "nodeContext" : "if (fieldType.equals(int.class)) {\n  field.setInt(bag,jr.nextInt());\n}\n else if (fieldType.equals(boolean.class)) {\n  field.setBoolean(bag,jr.nextBoolean());\n}\n else if (fieldType.equals(String.class)) {\n  field.set(bag,jr.nextString());\n}\n else {\n  throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 56,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 553,
        "startLineNumber" : 120,
        "startColumnNumber" : 14,
        "endLineNumber" : 130,
        "endColumnNumber" : 15
      },
      "nodeContext" : "if (fieldType.equals(long.class)) {\n  field.setLong(bag,jr.nextLong());\n}\n else if (fieldType.equals(int.class)) {\n  field.setInt(bag,jr.nextInt());\n}\n else if (fieldType.equals(boolean.class)) {\n  field.setBoolean(bag,jr.nextBoolean());\n}\n else if (fieldType.equals(String.class)) {\n  field.set(bag,jr.nextString());\n}\n else {\n  throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 71,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 635,
        "startLineNumber" : 118,
        "startColumnNumber" : 46,
        "endLineNumber" : 131,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Class<?> fieldType=field.getType();\n  if (fieldType.equals(long.class)) {\n    field.setLong(bag,jr.nextLong());\n  }\n else   if (fieldType.equals(int.class)) {\n    field.setInt(bag,jr.nextInt());\n  }\n else   if (fieldType.equals(boolean.class)) {\n    field.setBoolean(bag,jr.nextBoolean());\n  }\n else   if (fieldType.equals(String.class)) {\n    field.set(bag,jr.nextString());\n  }\n else {\n    throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 82,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 669,
        "startLineNumber" : 118,
        "startColumnNumber" : 12,
        "endLineNumber" : 131,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (field.getName().equals(name)) {\n  Class<?> fieldType=field.getType();\n  if (fieldType.equals(long.class)) {\n    field.setLong(bag,jr.nextLong());\n  }\n else   if (fieldType.equals(int.class)) {\n    field.setInt(bag,jr.nextInt());\n  }\n else   if (fieldType.equals(boolean.class)) {\n    field.setBoolean(bag,jr.nextBoolean());\n  }\n else   if (fieldType.equals(String.class)) {\n    field.set(bag,jr.nextString());\n  }\n else {\n    throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 89,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 695,
        "startLineNumber" : 117,
        "startColumnNumber" : 72,
        "endLineNumber" : 132,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  if (field.getName().equals(name)) {\n    Class<?> fieldType=field.getType();\n    if (fieldType.equals(long.class)) {\n      field.setLong(bag,jr.nextLong());\n    }\n else     if (fieldType.equals(int.class)) {\n      field.setInt(bag,jr.nextInt());\n    }\n else     if (fieldType.equals(boolean.class)) {\n      field.setBoolean(bag,jr.nextBoolean());\n    }\n else     if (fieldType.equals(String.class)) {\n      field.set(bag,jr.nextString());\n    }\n else {\n      throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 90,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 757,
        "startLineNumber" : 117,
        "startColumnNumber" : 10,
        "endLineNumber" : 132,
        "endColumnNumber" : 11
      },
      "nodeContext" : "for (Field field : BagOfPrimitives.class.getDeclaredFields()) {\n  if (field.getName().equals(name)) {\n    Class<?> fieldType=field.getType();\n    if (fieldType.equals(long.class)) {\n      field.setLong(bag,jr.nextLong());\n    }\n else     if (fieldType.equals(int.class)) {\n      field.setInt(bag,jr.nextInt());\n    }\n else     if (fieldType.equals(boolean.class)) {\n      field.setBoolean(bag,jr.nextBoolean());\n    }\n else     if (fieldType.equals(String.class)) {\n      field.set(bag,jr.nextString());\n    }\n else {\n      throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 100,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 818,
        "startLineNumber" : 115,
        "startColumnNumber" : 28,
        "endLineNumber" : 133,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String name=jr.nextName();\n  for (  Field field : BagOfPrimitives.class.getDeclaredFields()) {\n    if (field.getName().equals(name)) {\n      Class<?> fieldType=field.getType();\n      if (fieldType.equals(long.class)) {\n        field.setLong(bag,jr.nextLong());\n      }\n else       if (fieldType.equals(int.class)) {\n        field.setInt(bag,jr.nextInt());\n      }\n else       if (fieldType.equals(boolean.class)) {\n        field.setBoolean(bag,jr.nextBoolean());\n      }\n else       if (fieldType.equals(String.class)) {\n        field.set(bag,jr.nextString());\n      }\n else {\n        throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 109,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 838,
        "startLineNumber" : 115,
        "startColumnNumber" : 8,
        "endLineNumber" : 133,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (jr.hasNext()) {\n  String name=jr.nextName();\n  for (  Field field : BagOfPrimitives.class.getDeclaredFields()) {\n    if (field.getName().equals(name)) {\n      Class<?> fieldType=field.getType();\n      if (fieldType.equals(long.class)) {\n        field.setLong(bag,jr.nextLong());\n      }\n else       if (fieldType.equals(int.class)) {\n        field.setInt(bag,jr.nextInt());\n      }\n else       if (fieldType.equals(boolean.class)) {\n        field.setBoolean(bag,jr.nextBoolean());\n      }\n else       if (fieldType.equals(String.class)) {\n        field.set(bag,jr.nextString());\n      }\n else {\n        throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n      }\n    }\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 113,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 982,
        "startLineNumber" : 112,
        "startColumnNumber" : 26,
        "endLineNumber" : 136,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  jr.beginObject();\n  BagOfPrimitives bag=new BagOfPrimitives();\n  while (jr.hasNext()) {\n    String name=jr.nextName();\n    for (    Field field : BagOfPrimitives.class.getDeclaredFields()) {\n      if (field.getName().equals(name)) {\n        Class<?> fieldType=field.getType();\n        if (fieldType.equals(long.class)) {\n          field.setLong(bag,jr.nextLong());\n        }\n else         if (fieldType.equals(int.class)) {\n          field.setInt(bag,jr.nextInt());\n        }\n else         if (fieldType.equals(boolean.class)) {\n          field.setBoolean(bag,jr.nextBoolean());\n        }\n else         if (fieldType.equals(String.class)) {\n          field.set(bag,jr.nextString());\n        }\n else {\n          throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n        }\n      }\n    }\n  }\n  jr.endObject();\n  bags.add(bag);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 135,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1002,
        "startLineNumber" : 112,
        "startColumnNumber" : 6,
        "endLineNumber" : 136,
        "endColumnNumber" : 7
      },
      "nodeContext" : "while (jr.hasNext()) {\n  jr.beginObject();\n  BagOfPrimitives bag=new BagOfPrimitives();\n  while (jr.hasNext()) {\n    String name=jr.nextName();\n    for (    Field field : BagOfPrimitives.class.getDeclaredFields()) {\n      if (field.getName().equals(name)) {\n        Class<?> fieldType=field.getType();\n        if (fieldType.equals(long.class)) {\n          field.setLong(bag,jr.nextLong());\n        }\n else         if (fieldType.equals(int.class)) {\n          field.setInt(bag,jr.nextInt());\n        }\n else         if (fieldType.equals(boolean.class)) {\n          field.setBoolean(bag,jr.nextBoolean());\n        }\n else         if (fieldType.equals(String.class)) {\n          field.set(bag,jr.nextString());\n        }\n else {\n          throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n        }\n      }\n    }\n  }\n  jr.endObject();\n  bags.add(bag);\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 139,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1227,
        "startLineNumber" : 107,
        "startColumnNumber" : 31,
        "endLineNumber" : 138,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  StringReader reader=new StringReader(json);\n  JsonReader jr=new JsonReader(reader);\n  jr.beginArray();\n  List<BagOfPrimitives> bags=new ArrayList<BagOfPrimitives>();\n  while (jr.hasNext()) {\n    jr.beginObject();\n    BagOfPrimitives bag=new BagOfPrimitives();\n    while (jr.hasNext()) {\n      String name=jr.nextName();\n      for (      Field field : BagOfPrimitives.class.getDeclaredFields()) {\n        if (field.getName().equals(name)) {\n          Class<?> fieldType=field.getType();\n          if (fieldType.equals(long.class)) {\n            field.setLong(bag,jr.nextLong());\n          }\n else           if (fieldType.equals(int.class)) {\n            field.setInt(bag,jr.nextInt());\n          }\n else           if (fieldType.equals(boolean.class)) {\n            field.setBoolean(bag,jr.nextBoolean());\n          }\n else           if (fieldType.equals(String.class)) {\n            field.set(bag,jr.nextString());\n          }\n else {\n            throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n          }\n        }\n      }\n    }\n    jr.endObject();\n    bags.add(bag);\n  }\n  jr.endArray();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 180,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1254,
        "startLineNumber" : 107,
        "startColumnNumber" : 4,
        "endLineNumber" : 138,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < reps; ++i) {\n  StringReader reader=new StringReader(json);\n  JsonReader jr=new JsonReader(reader);\n  jr.beginArray();\n  List<BagOfPrimitives> bags=new ArrayList<BagOfPrimitives>();\n  while (jr.hasNext()) {\n    jr.beginObject();\n    BagOfPrimitives bag=new BagOfPrimitives();\n    while (jr.hasNext()) {\n      String name=jr.nextName();\n      for (      Field field : BagOfPrimitives.class.getDeclaredFields()) {\n        if (field.getName().equals(name)) {\n          Class<?> fieldType=field.getType();\n          if (fieldType.equals(long.class)) {\n            field.setLong(bag,jr.nextLong());\n          }\n else           if (fieldType.equals(int.class)) {\n            field.setInt(bag,jr.nextInt());\n          }\n else           if (fieldType.equals(boolean.class)) {\n            field.setBoolean(bag,jr.nextBoolean());\n          }\n else           if (fieldType.equals(String.class)) {\n            field.set(bag,jr.nextString());\n          }\n else {\n            throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n          }\n        }\n      }\n    }\n    jr.endObject();\n    bags.add(bag);\n  }\n  jr.endArray();\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 191,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1264,
        "startLineNumber" : 106,
        "startColumnNumber" : 76,
        "endLineNumber" : 139,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (int i=0; i < reps; ++i) {\n    StringReader reader=new StringReader(json);\n    JsonReader jr=new JsonReader(reader);\n    jr.beginArray();\n    List<BagOfPrimitives> bags=new ArrayList<BagOfPrimitives>();\n    while (jr.hasNext()) {\n      jr.beginObject();\n      BagOfPrimitives bag=new BagOfPrimitives();\n      while (jr.hasNext()) {\n        String name=jr.nextName();\n        for (        Field field : BagOfPrimitives.class.getDeclaredFields()) {\n          if (field.getName().equals(name)) {\n            Class<?> fieldType=field.getType();\n            if (fieldType.equals(long.class)) {\n              field.setLong(bag,jr.nextLong());\n            }\n else             if (fieldType.equals(int.class)) {\n              field.setInt(bag,jr.nextInt());\n            }\n else             if (fieldType.equals(boolean.class)) {\n              field.setBoolean(bag,jr.nextBoolean());\n            }\n else             if (fieldType.equals(String.class)) {\n              field.set(bag,jr.nextString());\n            }\n else {\n              throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n            }\n          }\n        }\n      }\n      jr.endObject();\n      bags.add(bag);\n    }\n    jr.endArray();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 192,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1591,
        "startLineNumber" : 101,
        "startColumnNumber" : 2,
        "endLineNumber" : 139,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * This benchmark measures the ideal Gson performance: the cost of parsing a JSON stream and setting object values by reflection. We should strive to reduce the discrepancy between this and  {@link #timeCollectionsDefault(int)} .\n */\npublic void timeCollectionsReflectionStreaming(int reps) throws Exception {\n  for (int i=0; i < reps; ++i) {\n    StringReader reader=new StringReader(json);\n    JsonReader jr=new JsonReader(reader);\n    jr.beginArray();\n    List<BagOfPrimitives> bags=new ArrayList<BagOfPrimitives>();\n    while (jr.hasNext()) {\n      jr.beginObject();\n      BagOfPrimitives bag=new BagOfPrimitives();\n      while (jr.hasNext()) {\n        String name=jr.nextName();\n        for (        Field field : BagOfPrimitives.class.getDeclaredFields()) {\n          if (field.getName().equals(name)) {\n            Class<?> fieldType=field.getType();\n            if (fieldType.equals(long.class)) {\n              field.setLong(bag,jr.nextLong());\n            }\n else             if (fieldType.equals(int.class)) {\n              field.setInt(bag,jr.nextInt());\n            }\n else             if (fieldType.equals(boolean.class)) {\n              field.setBoolean(bag,jr.nextBoolean());\n            }\n else             if (fieldType.equals(String.class)) {\n              field.set(bag,jr.nextString());\n            }\n else {\n              throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n            }\n          }\n        }\n      }\n      jr.endObject();\n      bags.add(bag);\n    }\n    jr.endArray();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 202,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 127,
        "startColumnNumber" : 16,
        "endLineNumber" : 127,
        "endColumnNumber" : 48
      },
      "nodeContext" : "field.set(bag,jr.nextString());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.gson.metrics.BagOfPrimitives"
  }, {
    "nodeContext" : "bag",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 135,
      "startColumnNumber" : 17,
      "endLineNumber" : 135,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 135,
        "startColumnNumber" : 8,
        "endLineNumber" : 135,
        "endColumnNumber" : 21
      },
      "nodeContext" : "bags.add(bag)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 135,
        "startColumnNumber" : 8,
        "endLineNumber" : 135,
        "endColumnNumber" : 22
      },
      "nodeContext" : "bags.add(bag);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 982,
        "startLineNumber" : 112,
        "startColumnNumber" : 26,
        "endLineNumber" : 136,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  jr.beginObject();\n  BagOfPrimitives bag=new BagOfPrimitives();\n  while (jr.hasNext()) {\n    String name=jr.nextName();\n    for (    Field field : BagOfPrimitives.class.getDeclaredFields()) {\n      if (field.getName().equals(name)) {\n        Class<?> fieldType=field.getType();\n        if (fieldType.equals(long.class)) {\n          field.setLong(bag,jr.nextLong());\n        }\n else         if (fieldType.equals(int.class)) {\n          field.setInt(bag,jr.nextInt());\n        }\n else         if (fieldType.equals(boolean.class)) {\n          field.setBoolean(bag,jr.nextBoolean());\n        }\n else         if (fieldType.equals(String.class)) {\n          field.set(bag,jr.nextString());\n        }\n else {\n          throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n        }\n      }\n    }\n  }\n  jr.endObject();\n  bags.add(bag);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 135,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1002,
        "startLineNumber" : 112,
        "startColumnNumber" : 6,
        "endLineNumber" : 136,
        "endColumnNumber" : 7
      },
      "nodeContext" : "while (jr.hasNext()) {\n  jr.beginObject();\n  BagOfPrimitives bag=new BagOfPrimitives();\n  while (jr.hasNext()) {\n    String name=jr.nextName();\n    for (    Field field : BagOfPrimitives.class.getDeclaredFields()) {\n      if (field.getName().equals(name)) {\n        Class<?> fieldType=field.getType();\n        if (fieldType.equals(long.class)) {\n          field.setLong(bag,jr.nextLong());\n        }\n else         if (fieldType.equals(int.class)) {\n          field.setInt(bag,jr.nextInt());\n        }\n else         if (fieldType.equals(boolean.class)) {\n          field.setBoolean(bag,jr.nextBoolean());\n        }\n else         if (fieldType.equals(String.class)) {\n          field.set(bag,jr.nextString());\n        }\n else {\n          throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n        }\n      }\n    }\n  }\n  jr.endObject();\n  bags.add(bag);\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 139,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1227,
        "startLineNumber" : 107,
        "startColumnNumber" : 31,
        "endLineNumber" : 138,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  StringReader reader=new StringReader(json);\n  JsonReader jr=new JsonReader(reader);\n  jr.beginArray();\n  List<BagOfPrimitives> bags=new ArrayList<BagOfPrimitives>();\n  while (jr.hasNext()) {\n    jr.beginObject();\n    BagOfPrimitives bag=new BagOfPrimitives();\n    while (jr.hasNext()) {\n      String name=jr.nextName();\n      for (      Field field : BagOfPrimitives.class.getDeclaredFields()) {\n        if (field.getName().equals(name)) {\n          Class<?> fieldType=field.getType();\n          if (fieldType.equals(long.class)) {\n            field.setLong(bag,jr.nextLong());\n          }\n else           if (fieldType.equals(int.class)) {\n            field.setInt(bag,jr.nextInt());\n          }\n else           if (fieldType.equals(boolean.class)) {\n            field.setBoolean(bag,jr.nextBoolean());\n          }\n else           if (fieldType.equals(String.class)) {\n            field.set(bag,jr.nextString());\n          }\n else {\n            throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n          }\n        }\n      }\n    }\n    jr.endObject();\n    bags.add(bag);\n  }\n  jr.endArray();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 180,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1254,
        "startLineNumber" : 107,
        "startColumnNumber" : 4,
        "endLineNumber" : 138,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < reps; ++i) {\n  StringReader reader=new StringReader(json);\n  JsonReader jr=new JsonReader(reader);\n  jr.beginArray();\n  List<BagOfPrimitives> bags=new ArrayList<BagOfPrimitives>();\n  while (jr.hasNext()) {\n    jr.beginObject();\n    BagOfPrimitives bag=new BagOfPrimitives();\n    while (jr.hasNext()) {\n      String name=jr.nextName();\n      for (      Field field : BagOfPrimitives.class.getDeclaredFields()) {\n        if (field.getName().equals(name)) {\n          Class<?> fieldType=field.getType();\n          if (fieldType.equals(long.class)) {\n            field.setLong(bag,jr.nextLong());\n          }\n else           if (fieldType.equals(int.class)) {\n            field.setInt(bag,jr.nextInt());\n          }\n else           if (fieldType.equals(boolean.class)) {\n            field.setBoolean(bag,jr.nextBoolean());\n          }\n else           if (fieldType.equals(String.class)) {\n            field.set(bag,jr.nextString());\n          }\n else {\n            throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n          }\n        }\n      }\n    }\n    jr.endObject();\n    bags.add(bag);\n  }\n  jr.endArray();\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 191,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1264,
        "startLineNumber" : 106,
        "startColumnNumber" : 76,
        "endLineNumber" : 139,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (int i=0; i < reps; ++i) {\n    StringReader reader=new StringReader(json);\n    JsonReader jr=new JsonReader(reader);\n    jr.beginArray();\n    List<BagOfPrimitives> bags=new ArrayList<BagOfPrimitives>();\n    while (jr.hasNext()) {\n      jr.beginObject();\n      BagOfPrimitives bag=new BagOfPrimitives();\n      while (jr.hasNext()) {\n        String name=jr.nextName();\n        for (        Field field : BagOfPrimitives.class.getDeclaredFields()) {\n          if (field.getName().equals(name)) {\n            Class<?> fieldType=field.getType();\n            if (fieldType.equals(long.class)) {\n              field.setLong(bag,jr.nextLong());\n            }\n else             if (fieldType.equals(int.class)) {\n              field.setInt(bag,jr.nextInt());\n            }\n else             if (fieldType.equals(boolean.class)) {\n              field.setBoolean(bag,jr.nextBoolean());\n            }\n else             if (fieldType.equals(String.class)) {\n              field.set(bag,jr.nextString());\n            }\n else {\n              throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n            }\n          }\n        }\n      }\n      jr.endObject();\n      bags.add(bag);\n    }\n    jr.endArray();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 192,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1591,
        "startLineNumber" : 101,
        "startColumnNumber" : 2,
        "endLineNumber" : 139,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * This benchmark measures the ideal Gson performance: the cost of parsing a JSON stream and setting object values by reflection. We should strive to reduce the discrepancy between this and  {@link #timeCollectionsDefault(int)} .\n */\npublic void timeCollectionsReflectionStreaming(int reps) throws Exception {\n  for (int i=0; i < reps; ++i) {\n    StringReader reader=new StringReader(json);\n    JsonReader jr=new JsonReader(reader);\n    jr.beginArray();\n    List<BagOfPrimitives> bags=new ArrayList<BagOfPrimitives>();\n    while (jr.hasNext()) {\n      jr.beginObject();\n      BagOfPrimitives bag=new BagOfPrimitives();\n      while (jr.hasNext()) {\n        String name=jr.nextName();\n        for (        Field field : BagOfPrimitives.class.getDeclaredFields()) {\n          if (field.getName().equals(name)) {\n            Class<?> fieldType=field.getType();\n            if (fieldType.equals(long.class)) {\n              field.setLong(bag,jr.nextLong());\n            }\n else             if (fieldType.equals(int.class)) {\n              field.setInt(bag,jr.nextInt());\n            }\n else             if (fieldType.equals(boolean.class)) {\n              field.setBoolean(bag,jr.nextBoolean());\n            }\n else             if (fieldType.equals(String.class)) {\n              field.set(bag,jr.nextString());\n            }\n else {\n              throw new RuntimeException(\"Unexpected: type: \" + fieldType + \", name: \"+ name);\n            }\n          }\n        }\n      }\n      jr.endObject();\n      bags.add(bag);\n    }\n    jr.endArray();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 202,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 135,
        "startColumnNumber" : 8,
        "endLineNumber" : 135,
        "endColumnNumber" : 22
      },
      "nodeContext" : "bags.add(bag);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.google.gson.metrics.BagOfPrimitives"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 121,
    "startColumnNumber" : 30,
    "endLineNumber" : 121,
    "endColumnNumber" : 33
  }, {
    "charLength" : 3,
    "startLineNumber" : 123,
    "startColumnNumber" : 29,
    "endLineNumber" : 123,
    "endColumnNumber" : 32
  }, {
    "charLength" : 3,
    "startLineNumber" : 125,
    "startColumnNumber" : 33,
    "endLineNumber" : 125,
    "endColumnNumber" : 36
  }, {
    "charLength" : 3,
    "startLineNumber" : 127,
    "startColumnNumber" : 26,
    "endLineNumber" : 127,
    "endColumnNumber" : 29
  }, {
    "charLength" : 3,
    "startLineNumber" : 135,
    "startColumnNumber" : 17,
    "endLineNumber" : 135,
    "endColumnNumber" : 20
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 10
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 11
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 12
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 13
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  } ]
}