{
  "id" : 148,
  "expression" : "\"a=b\"",
  "projectName" : "spring-projects@spring-boot",
  "commitID" : "44299bb9808d0dc21a9bfc1c0c47e1539e00856d",
  "filePath" : "/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/trace/WebRequestTraceFilterTests.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"a=b\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 93,
      "startColumnNumber" : 35,
      "endLineNumber" : 93,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 93,
        "startColumnNumber" : 2,
        "endLineNumber" : 93,
        "endColumnNumber" : 41
      },
      "nodeContext" : "response.addHeader(\"Set-Cookie\",\"a=b\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 93,
        "startColumnNumber" : 2,
        "endLineNumber" : 93,
        "endColumnNumber" : 42
      },
      "nodeContext" : "response.addHeader(\"Set-Cookie\",\"a=b\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2313,
        "startLineNumber" : 73,
        "startColumnNumber" : 86,
        "endLineNumber" : 119,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  WebRequestTraceFilter filter=new WebRequestTraceFilter(this.repository,EnumSet.allOf(Include.class));\n  MockHttpServletRequest request=new MockHttpServletRequest(\"GET\",\"/foo\");\n  request.addHeader(\"Accept\",\"application/json\");\n  request.addHeader(\"Cookie\",\"testCookie=testValue;\");\n  request.setContextPath(\"some.context.path\");\n  request.setContent(\"Hello, World!\".getBytes());\n  request.setRemoteAddr(\"some.remote.addr\");\n  request.setQueryString(\"some.query.string\");\n  request.setParameter(\"param\",\"paramvalue\");\n  File tmp=File.createTempFile(\"spring-boot\",\"tmp\");\n  String url=tmp.toURI().toURL().toString();\n  request.setPathInfo(url);\n  tmp.deleteOnExit();\n  request.setAuthType(\"authType\");\n  Principal principal=() -> \"principalTest\";\n  request.setUserPrincipal(principal);\n  MockHttpServletResponse response=new MockHttpServletResponse();\n  response.addHeader(\"Content-Type\",\"application/json\");\n  response.addHeader(\"Set-Cookie\",\"a=b\");\n  filter.doFilterInternal(request,response,(req,resp) -> {\n    BufferedReader bufferedReader=req.getReader();\n    while (bufferedReader.readLine() != null) {\n    }\n    resp.getWriter().println(\"Goodbye, World!\");\n  }\n);\n  assertThat(this.repository.findAll()).hasSize(1);\n  Map<String,Object> trace=this.repository.findAll().iterator().next().getInfo();\n  Map<String,Object> map=(Map<String,Object>)trace.get(\"headers\");\n  assertThat(map.get(\"response\").toString()).isEqualTo(\"{Content-Type=application/json, Set-Cookie=a=b, status=200}\");\n  assertThat(trace.get(\"method\")).isEqualTo(\"GET\");\n  assertThat(trace.get(\"path\")).isEqualTo(\"/foo\");\n  assertThat(((String[])((Map)trace.get(\"parameters\")).get(\"param\"))[0]).isEqualTo(\"paramvalue\");\n  assertThat(trace.get(\"remoteAddress\")).isEqualTo(\"some.remote.addr\");\n  assertThat(trace.get(\"query\")).isEqualTo(\"some.query.string\");\n  assertThat(trace.get(\"userPrincipal\")).isEqualTo(principal.getName());\n  assertThat(trace.get(\"contextPath\")).isEqualTo(\"some.context.path\");\n  assertThat(trace.get(\"pathInfo\")).isEqualTo(url);\n  assertThat(trace.get(\"authType\")).isEqualTo(\"authType\");\n  assertThat(map.get(\"request\").toString()).isEqualTo(\"{Accept=application/json, Cookie=testCookie=testValue;}\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 355,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2453,
        "startLineNumber" : 71,
        "startColumnNumber" : 1,
        "endLineNumber" : 119,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test @SuppressWarnings({\"rawtypes\",\"unchecked\"}) public void filterAddsTraceWithCustomIncludes() throws IOException, ServletException {\n  WebRequestTraceFilter filter=new WebRequestTraceFilter(this.repository,EnumSet.allOf(Include.class));\n  MockHttpServletRequest request=new MockHttpServletRequest(\"GET\",\"/foo\");\n  request.addHeader(\"Accept\",\"application/json\");\n  request.addHeader(\"Cookie\",\"testCookie=testValue;\");\n  request.setContextPath(\"some.context.path\");\n  request.setContent(\"Hello, World!\".getBytes());\n  request.setRemoteAddr(\"some.remote.addr\");\n  request.setQueryString(\"some.query.string\");\n  request.setParameter(\"param\",\"paramvalue\");\n  File tmp=File.createTempFile(\"spring-boot\",\"tmp\");\n  String url=tmp.toURI().toURL().toString();\n  request.setPathInfo(url);\n  tmp.deleteOnExit();\n  request.setAuthType(\"authType\");\n  Principal principal=() -> \"principalTest\";\n  request.setUserPrincipal(principal);\n  MockHttpServletResponse response=new MockHttpServletResponse();\n  response.addHeader(\"Content-Type\",\"application/json\");\n  response.addHeader(\"Set-Cookie\",\"a=b\");\n  filter.doFilterInternal(request,response,(req,resp) -> {\n    BufferedReader bufferedReader=req.getReader();\n    while (bufferedReader.readLine() != null) {\n    }\n    resp.getWriter().println(\"Goodbye, World!\");\n  }\n);\n  assertThat(this.repository.findAll()).hasSize(1);\n  Map<String,Object> trace=this.repository.findAll().iterator().next().getInfo();\n  Map<String,Object> map=(Map<String,Object>)trace.get(\"headers\");\n  assertThat(map.get(\"response\").toString()).isEqualTo(\"{Content-Type=application/json, Set-Cookie=a=b, status=200}\");\n  assertThat(trace.get(\"method\")).isEqualTo(\"GET\");\n  assertThat(trace.get(\"path\")).isEqualTo(\"/foo\");\n  assertThat(((String[])((Map)trace.get(\"parameters\")).get(\"param\"))[0]).isEqualTo(\"paramvalue\");\n  assertThat(trace.get(\"remoteAddress\")).isEqualTo(\"some.remote.addr\");\n  assertThat(trace.get(\"query\")).isEqualTo(\"some.query.string\");\n  assertThat(trace.get(\"userPrincipal\")).isEqualTo(principal.getName());\n  assertThat(trace.get(\"contextPath\")).isEqualTo(\"some.context.path\");\n  assertThat(trace.get(\"pathInfo\")).isEqualTo(url);\n  assertThat(trace.get(\"authType\")).isEqualTo(\"authType\");\n  assertThat(map.get(\"request\").toString()).isEqualTo(\"{Accept=application/json, Cookie=testCookie=testValue;}\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 370,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 93,
        "startColumnNumber" : 2,
        "endLineNumber" : 93,
        "endColumnNumber" : 42
      },
      "nodeContext" : "response.addHeader(\"Set-Cookie\",\"a=b\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 93,
    "startColumnNumber" : 35,
    "endLineNumber" : 93,
    "endColumnNumber" : 40
  } ],
  "layoutRelationDataList" : [ ]
}