{
  "id" : 410,
  "expression" : "UNRESOLVED",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-table/flink-table-common/src/main/java/org/apache/flink/table/types/logical/utils/LogicalTypeUtils.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "UNRESOLVED",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 110,
      "startColumnNumber" : 17,
      "endLineNumber" : 110,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 110,
        "startColumnNumber" : 12,
        "endLineNumber" : 110,
        "endColumnNumber" : 28
      },
      "nodeContext" : "case UNRESOLVED:",
      "nodeType" : "SwitchCase",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1770,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 113,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (type.getTypeRoot()) {\ncase CHAR:case VARCHAR:  return StringData.class;\ncase BOOLEAN:return Boolean.class;\ncase BINARY:case VARBINARY:return byte[].class;\ncase DECIMAL:return DecimalData.class;\ncase TINYINT:return Byte.class;\ncase SMALLINT:return Short.class;\ncase INTEGER:case DATE:case TIME_WITHOUT_TIME_ZONE:case INTERVAL_YEAR_MONTH:return Integer.class;\ncase BIGINT:case INTERVAL_DAY_TIME:return Long.class;\ncase FLOAT:return Float.class;\ncase DOUBLE:return Double.class;\ncase TIMESTAMP_WITHOUT_TIME_ZONE:case TIMESTAMP_WITH_LOCAL_TIME_ZONE:return TimestampData.class;\ncase TIMESTAMP_WITH_TIME_ZONE:throw new UnsupportedOperationException(\"Unsupported type: \" + type);\ncase ARRAY:return ArrayData.class;\ncase MULTISET:case MAP:return MapData.class;\ncase ROW:case STRUCTURED_TYPE:return RowData.class;\ncase DISTINCT_TYPE:return toInternalConversionClass(((DistinctType)type).getSourceType());\ncase RAW:return RawValueData.class;\ncase NULL:return Object.class;\ncase SYMBOL:case UNRESOLVED:default:throw new IllegalArgumentException(\"Illegal type: \" + type);\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 152,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1829,
        "startLineNumber" : 61,
        "startColumnNumber" : 71,
        "endLineNumber" : 114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\nswitch (type.getTypeRoot()) {\ncase CHAR:case VARCHAR:    return StringData.class;\ncase BOOLEAN:  return Boolean.class;\ncase BINARY:case VARBINARY:return byte[].class;\ncase DECIMAL:return DecimalData.class;\ncase TINYINT:return Byte.class;\ncase SMALLINT:return Short.class;\ncase INTEGER:case DATE:case TIME_WITHOUT_TIME_ZONE:case INTERVAL_YEAR_MONTH:return Integer.class;\ncase BIGINT:case INTERVAL_DAY_TIME:return Long.class;\ncase FLOAT:return Float.class;\ncase DOUBLE:return Double.class;\ncase TIMESTAMP_WITHOUT_TIME_ZONE:case TIMESTAMP_WITH_LOCAL_TIME_ZONE:return TimestampData.class;\ncase TIMESTAMP_WITH_TIME_ZONE:throw new UnsupportedOperationException(\"Unsupported type: \" + type);\ncase ARRAY:return ArrayData.class;\ncase MULTISET:case MAP:return MapData.class;\ncase ROW:case STRUCTURED_TYPE:return RowData.class;\ncase DISTINCT_TYPE:return toInternalConversionClass(((DistinctType)type).getSourceType());\ncase RAW:return RawValueData.class;\ncase NULL:return Object.class;\ncase SYMBOL:case UNRESOLVED:default:throw new IllegalArgumentException(\"Illegal type: \" + type);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 153,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2078,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 114,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Returns the conversion class for the given  {@link LogicalType} that is used by the tableruntime as internal data structure.\n * @see RowData\n */\npublic static Class<?> toInternalConversionClass(LogicalType type){\nswitch (type.getTypeRoot()) {\ncase CHAR:case VARCHAR:    return StringData.class;\ncase BOOLEAN:  return Boolean.class;\ncase BINARY:case VARBINARY:return byte[].class;\ncase DECIMAL:return DecimalData.class;\ncase TINYINT:return Byte.class;\ncase SMALLINT:return Short.class;\ncase INTEGER:case DATE:case TIME_WITHOUT_TIME_ZONE:case INTERVAL_YEAR_MONTH:return Integer.class;\ncase BIGINT:case INTERVAL_DAY_TIME:return Long.class;\ncase FLOAT:return Float.class;\ncase DOUBLE:return Double.class;\ncase TIMESTAMP_WITHOUT_TIME_ZONE:case TIMESTAMP_WITH_LOCAL_TIME_ZONE:return TimestampData.class;\ncase TIMESTAMP_WITH_TIME_ZONE:throw new UnsupportedOperationException(\"Unsupported type: \" + type);\ncase ARRAY:return ArrayData.class;\ncase MULTISET:case MAP:return MapData.class;\ncase ROW:case STRUCTURED_TYPE:return RowData.class;\ncase DISTINCT_TYPE:return toInternalConversionClass(((DistinctType)type).getSourceType());\ncase RAW:return RawValueData.class;\ncase NULL:return Object.class;\ncase SYMBOL:case UNRESOLVED:default:throw new IllegalArgumentException(\"Illegal type: \" + type);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 166,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 110,
        "startColumnNumber" : 12,
        "endLineNumber" : 110,
        "endColumnNumber" : 28
      },
      "nodeContext" : "case UNRESOLVED:",
      "nodeType" : "SwitchCase",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.flink.table.types.logical.LogicalTypeRoot"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 110,
    "startColumnNumber" : 17,
    "endLineNumber" : 110,
    "endColumnNumber" : 27
  } ],
  "layoutRelationDataList" : [ ]
}