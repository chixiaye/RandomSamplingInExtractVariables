{
  "id" : 383,
  "expression" : "stack.getStack().size() == 1",
  "projectName" : "skylot@jadx",
  "commitID" : "eb2a1734d3e02c19814f628e10bf80de5fb19772",
  "filePath" : "/jadx-core/src/main/java/jadx/core/codegen/ConditionGen.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "stack.getStack().size() == 1",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 28,
      "startLineNumber" : 113,
      "startColumnNumber" : 8,
      "endLineNumber" : 113,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 7,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 117,
        "startLineNumber" : 113,
        "startColumnNumber" : 4,
        "endLineNumber" : 117,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (stack.getStack().size() == 1) {\n  addArg(code,firstArg,false);\n}\n else {\n  wrap(code,firstArg);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 155,
        "startLineNumber" : 111,
        "startColumnNumber" : 22,
        "endLineNumber" : 119,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  if (stack.getStack().size() == 1) {\n    addArg(code,firstArg,false);\n  }\n else {\n    wrap(code,firstArg);\n  }\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 277,
        "startLineNumber" : 111,
        "startColumnNumber" : 3,
        "endLineNumber" : 124,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (op == IfOp.EQ) {\n  if (stack.getStack().size() == 1) {\n    addArg(code,firstArg,false);\n  }\n else {\n    wrap(code,firstArg);\n  }\n  return;\n}\n else if (op == IfOp.NE) {\n  code.add('!');\n  wrap(code,firstArg);\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 47,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 474,
        "startLineNumber" : 106,
        "startColumnNumber" : 52,
        "endLineNumber" : 126,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  LiteralArg lit=(LiteralArg)secondArg;\n  if (lit.getLiteral() == 0) {\n    op=op.invert();\n  }\n  if (op == IfOp.EQ) {\n    if (stack.getStack().size() == 1) {\n      addArg(code,firstArg,false);\n    }\n else {\n      wrap(code,firstArg);\n    }\n    return;\n  }\n else   if (op == IfOp.NE) {\n    code.add('!');\n    wrap(code,firstArg);\n    return;\n  }\n  ErrorsCounter.methodWarn(mth,\"Unsupported boolean condition \" + op.getSymbol());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 80,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 602,
        "startLineNumber" : 104,
        "startColumnNumber" : 2,
        "endLineNumber" : 126,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (firstArg.getType().equals(ArgType.BOOLEAN) && secondArg.isLiteral() && secondArg.getType().equals(ArgType.BOOLEAN)) {\n  LiteralArg lit=(LiteralArg)secondArg;\n  if (lit.getLiteral() == 0) {\n    op=op.invert();\n  }\n  if (op == IfOp.EQ) {\n    if (stack.getStack().size() == 1) {\n      addArg(code,firstArg,false);\n    }\n else {\n      wrap(code,firstArg);\n    }\n    return;\n  }\n else   if (op == IfOp.NE) {\n    code.add('!');\n    wrap(code,firstArg);\n    return;\n  }\n  ErrorsCounter.methodWarn(mth,\"Unsupported boolean condition \" + op.getSymbol());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 101,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 868,
        "startLineNumber" : 100,
        "startColumnNumber" : 100,
        "endLineNumber" : 131,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  IfOp op=compare.getOp();\n  InsnArg firstArg=compare.getA();\n  InsnArg secondArg=compare.getB();\n  if (firstArg.getType().equals(ArgType.BOOLEAN) && secondArg.isLiteral() && secondArg.getType().equals(ArgType.BOOLEAN)) {\n    LiteralArg lit=(LiteralArg)secondArg;\n    if (lit.getLiteral() == 0) {\n      op=op.invert();\n    }\n    if (op == IfOp.EQ) {\n      if (stack.getStack().size() == 1) {\n        addArg(code,firstArg,false);\n      }\n else {\n        wrap(code,firstArg);\n      }\n      return;\n    }\n else     if (op == IfOp.NE) {\n      code.add('!');\n      wrap(code,firstArg);\n      return;\n    }\n    ErrorsCounter.methodWarn(mth,\"Unsupported boolean condition \" + op.getSymbol());\n  }\n  addArg(code,firstArg,isArgWrapNeeded(firstArg));\n  code.add(' ').add(op.getSymbol()).add(' ');\n  addArg(code,secondArg,isArgWrapNeeded(secondArg));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 155,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 967,
        "startLineNumber" : 100,
        "startColumnNumber" : 1,
        "endLineNumber" : 131,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private void addCompare(CodeWriter code,CondStack stack,Compare compare) throws CodegenException {\n  IfOp op=compare.getOp();\n  InsnArg firstArg=compare.getA();\n  InsnArg secondArg=compare.getB();\n  if (firstArg.getType().equals(ArgType.BOOLEAN) && secondArg.isLiteral() && secondArg.getType().equals(ArgType.BOOLEAN)) {\n    LiteralArg lit=(LiteralArg)secondArg;\n    if (lit.getLiteral() == 0) {\n      op=op.invert();\n    }\n    if (op == IfOp.EQ) {\n      if (stack.getStack().size() == 1) {\n        addArg(code,firstArg,false);\n      }\n else {\n        wrap(code,firstArg);\n      }\n      return;\n    }\n else     if (op == IfOp.NE) {\n      code.add('!');\n      wrap(code,firstArg);\n      return;\n    }\n    ErrorsCounter.methodWarn(mth,\"Unsupported boolean condition \" + op.getSymbol());\n  }\n  addArg(code,firstArg,isArgWrapNeeded(firstArg));\n  code.add(' ').add(op.getSymbol()).add(' ');\n  addArg(code,secondArg,isArgWrapNeeded(secondArg));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 173,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 117,
        "startLineNumber" : 113,
        "startColumnNumber" : 4,
        "endLineNumber" : 117,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (stack.getStack().size() == 1) {\n  addArg(code,firstArg,false);\n}\n else {\n  wrap(code,firstArg);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 21,
      "astHeight" : 5
    },
    "tokenLength" : 5,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 28,
    "startLineNumber" : 113,
    "startColumnNumber" : 8,
    "endLineNumber" : 113,
    "endColumnNumber" : 36
  } ],
  "layoutRelationDataList" : [ ]
}