{
  "id" : 26,
  "expression" : "number",
  "projectName" : "TheAlgorithms@Java",
  "commitID" : "8b243667d736be7d0413cc77159378aa02459db0",
  "filePath" : "/src/main/java/com/thealgorithms/maths/AliquotSum.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "number",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 26,
      "startColumnNumber" : 23,
      "endLineNumber" : 26,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 26,
        "startColumnNumber" : 23,
        "endLineNumber" : 26,
        "endColumnNumber" : 33
      },
      "nodeContext" : "number / 2",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 25,
        "startColumnNumber" : 8,
        "endLineNumber" : 26,
        "endColumnNumber" : 34
      },
      "nodeContext" : "IntStream.iterate(1,i -> ++i).limit(number / 2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 25,
        "startColumnNumber" : 8,
        "endLineNumber" : 27,
        "endColumnNumber" : 45
      },
      "nodeContext" : "IntStream.iterate(1,i -> ++i).limit(number / 2).filter(i -> number % i == 0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 24,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 167,
        "startLineNumber" : 25,
        "startColumnNumber" : 8,
        "endLineNumber" : 28,
        "endColumnNumber" : 52
      },
      "nodeContext" : "IntStream.iterate(1,i -> ++i).limit(number / 2).filter(i -> number % i == 0).forEach(i -> sumWrapper.value+=i)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 34,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 168,
        "startLineNumber" : 25,
        "startColumnNumber" : 8,
        "endLineNumber" : 28,
        "endColumnNumber" : 53
      },
      "nodeContext" : "IntStream.iterate(1,i -> ++i).limit(number / 2).filter(i -> number % i == 0).forEach(i -> sumWrapper.value+=i);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 35,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 305,
        "startLineNumber" : 20,
        "startColumnNumber" : 50,
        "endLineNumber" : 31,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  var sumWrapper=new Object(){\n    int value=0;\n  }\n;\n  IntStream.iterate(1,i -> ++i).limit(number / 2).filter(i -> number % i == 0).forEach(i -> sumWrapper.value+=i);\n  return sumWrapper.value;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 54,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 522,
        "startLineNumber" : 14,
        "startColumnNumber" : 4,
        "endLineNumber" : 31,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Finds the aliquot sum of an integer number.\n * @param number a positive integer\n * @return aliquot sum of given {@code number}\n */\npublic static int getAliquotValue(int number){\n  var sumWrapper=new Object(){\n    int value=0;\n  }\n;\n  IntStream.iterate(1,i -> ++i).limit(number / 2).filter(i -> number % i == 0).forEach(i -> sumWrapper.value+=i);\n  return sumWrapper.value;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 63,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 26,
        "startColumnNumber" : 23,
        "endLineNumber" : 26,
        "endColumnNumber" : 33
      },
      "nodeContext" : "number / 2",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 26,
    "startColumnNumber" : 23,
    "endLineNumber" : 26,
    "endColumnNumber" : 29
  } ],
  "layoutRelationDataList" : [ ]
}