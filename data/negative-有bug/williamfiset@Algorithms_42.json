{
  "id" : 42,
  "expression" : "newDist",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/graphtheory/networkflow/MinCostMaxFlowJohnsons.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "newDist",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 123,
      "startColumnNumber" : 44,
      "endLineNumber" : 123,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 123,
        "startColumnNumber" : 44,
        "endLineNumber" : 123,
        "endColumnNumber" : 67
      },
      "nodeContext" : "newDist < dist[edge.to]",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 123,
        "startColumnNumber" : 12,
        "endLineNumber" : 123,
        "endColumnNumber" : 67
      },
      "nodeContext" : "edge.remainingCapacity() > 0 && newDist < dist[edge.to]",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 193,
        "startLineNumber" : 123,
        "startColumnNumber" : 8,
        "endLineNumber" : 127,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (edge.remainingCapacity() > 0 && newDist < dist[edge.to]) {\n  prev[edge.to]=edge;\n  dist[edge.to]=newDist;\n  pq.offer(new Node(edge.to,dist[edge.to]));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 46,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 337,
        "startLineNumber" : 119,
        "startColumnNumber" : 45,
        "endLineNumber" : 128,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  Edge edge=edges.get(i);\n  if (visited(edge.to))   continue;\n  long newDist=dist[edge.from] + edge.cost;\n  if (edge.remainingCapacity() > 0 && newDist < dist[edge.to]) {\n    prev[edge.to]=edge;\n    dist[edge.to]=newDist;\n    pq.offer(new Node(edge.to,dist[edge.to]));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 76,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 376,
        "startLineNumber" : 119,
        "startColumnNumber" : 6,
        "endLineNumber" : 128,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < edges.size(); i++) {\n  Edge edge=edges.get(i);\n  if (visited(edge.to))   continue;\n  long newDist=dist[edge.from] + edge.cost;\n  if (edge.remainingCapacity() > 0 && newDist < dist[edge.to]) {\n    prev[edge.to]=edge;\n    dist[edge.to]=newDist;\n    pq.offer(new Node(edge.to,dist[edge.to]));\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 89,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 530,
        "startLineNumber" : 114,
        "startColumnNumber" : 26,
        "endLineNumber" : 129,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Node node=pq.poll();\n  visit(node.id);\n  if (dist[node.id] < node.value)   continue;\n  List<Edge> edges=graph[node.id];\n  for (int i=0; i < edges.size(); i++) {\n    Edge edge=edges.get(i);\n    if (visited(edge.to))     continue;\n    long newDist=dist[edge.from] + edge.cost;\n    if (edge.remainingCapacity() > 0 && newDist < dist[edge.to]) {\n      prev[edge.to]=edge;\n      dist[edge.to]=newDist;\n      pq.offer(new Node(edge.to,dist[edge.to]));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 128,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 552,
        "startLineNumber" : 114,
        "startColumnNumber" : 4,
        "endLineNumber" : 129,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (!pq.isEmpty()) {\n  Node node=pq.poll();\n  visit(node.id);\n  if (dist[node.id] < node.value)   continue;\n  List<Edge> edges=graph[node.id];\n  for (int i=0; i < edges.size(); i++) {\n    Edge edge=edges.get(i);\n    if (visited(edge.to))     continue;\n    long newDist=dist[edge.from] + edge.cost;\n    if (edge.remainingCapacity() > 0 && newDist < dist[edge.to]) {\n      prev[edge.to]=edge;\n      dist[edge.to]=newDist;\n      pq.offer(new Node(edge.to,dist[edge.to]));\n    }\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 133,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1347,
        "startLineNumber" : 86,
        "startColumnNumber" : 41,
        "endLineNumber" : 138,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\nclass Node implements Comparable<Node> {\n    int id;\n    long value;\n    public Node(    int id,    long value){\n      this.id=id;\n      this.value=value;\n    }\n    @Override public int compareTo(    Node other){\n      return (int)(value - other.value);\n    }\n  }\n  long[] dist=new long[n];\n  Arrays.fill(dist,INF);\n  dist[s]=0;\n  markAllNodesAsUnvisited();\n  Edge[] prev=new Edge[n];\n  PriorityQueue<Node> pq=new PriorityQueue<>();\n  pq.offer(new Node(s,0));\n  while (!pq.isEmpty()) {\n    Node node=pq.poll();\n    visit(node.id);\n    if (dist[node.id] < node.value)     continue;\n    List<Edge> edges=graph[node.id];\n    for (int i=0; i < edges.size(); i++) {\n      Edge edge=edges.get(i);\n      if (visited(edge.to))       continue;\n      long newDist=dist[edge.from] + edge.cost;\n      if (edge.remainingCapacity() > 0 && newDist < dist[edge.to]) {\n        prev[edge.to]=edge;\n        dist[edge.to]=newDist;\n        pq.offer(new Node(edge.to,dist[edge.to]));\n      }\n    }\n  }\n  LinkedList<Edge> path=new LinkedList<>();\n  if (dist[t] == INF)   return path;\n  adjustEdgeCosts(dist);\n  for (Edge edge=prev[t]; edge != null; edge=prev[edge.from])   path.addFirst(edge);\n  return path;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 302,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1386,
        "startLineNumber" : 86,
        "startColumnNumber" : 2,
        "endLineNumber" : 138,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private List<Edge> getAugmentingPath(){\nclass Node implements Comparable<Node> {\n    int id;\n    long value;\n    public Node(    int id,    long value){\n      this.id=id;\n      this.value=value;\n    }\n    @Override public int compareTo(    Node other){\n      return (int)(value - other.value);\n    }\n  }\n  long[] dist=new long[n];\n  Arrays.fill(dist,INF);\n  dist[s]=0;\n  markAllNodesAsUnvisited();\n  Edge[] prev=new Edge[n];\n  PriorityQueue<Node> pq=new PriorityQueue<>();\n  pq.offer(new Node(s,0));\n  while (!pq.isEmpty()) {\n    Node node=pq.poll();\n    visit(node.id);\n    if (dist[node.id] < node.value)     continue;\n    List<Edge> edges=graph[node.id];\n    for (int i=0; i < edges.size(); i++) {\n      Edge edge=edges.get(i);\n      if (visited(edge.to))       continue;\n      long newDist=dist[edge.from] + edge.cost;\n      if (edge.remainingCapacity() > 0 && newDist < dist[edge.to]) {\n        prev[edge.to]=edge;\n        dist[edge.to]=newDist;\n        pq.offer(new Node(edge.to,dist[edge.to]));\n      }\n    }\n  }\n  LinkedList<Edge> path=new LinkedList<>();\n  if (dist[t] == INF)   return path;\n  adjustEdgeCosts(dist);\n  for (Edge edge=prev[t]; edge != null; edge=prev[edge.from])   path.addFirst(edge);\n  return path;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 310,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 123,
        "startColumnNumber" : 12,
        "endLineNumber" : 123,
        "endColumnNumber" : 67
      },
      "nodeContext" : "edge.remainingCapacity() > 0 && newDist < dist[edge.to]",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "long"
  }, {
    "nodeContext" : "newDist",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 125,
      "startColumnNumber" : 26,
      "endLineNumber" : 125,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 125,
        "startColumnNumber" : 10,
        "endLineNumber" : 125,
        "endColumnNumber" : 33
      },
      "nodeContext" : "dist[edge.to]=newDist",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 125,
        "startColumnNumber" : 10,
        "endLineNumber" : 125,
        "endColumnNumber" : 34
      },
      "nodeContext" : "dist[edge.to]=newDist;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 132,
        "startLineNumber" : 123,
        "startColumnNumber" : 69,
        "endLineNumber" : 127,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  prev[edge.to]=edge;\n  dist[edge.to]=newDist;\n  pq.offer(new Node(edge.to,dist[edge.to]));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 32,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 193,
        "startLineNumber" : 123,
        "startColumnNumber" : 8,
        "endLineNumber" : 127,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (edge.remainingCapacity() > 0 && newDist < dist[edge.to]) {\n  prev[edge.to]=edge;\n  dist[edge.to]=newDist;\n  pq.offer(new Node(edge.to,dist[edge.to]));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 46,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 337,
        "startLineNumber" : 119,
        "startColumnNumber" : 45,
        "endLineNumber" : 128,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  Edge edge=edges.get(i);\n  if (visited(edge.to))   continue;\n  long newDist=dist[edge.from] + edge.cost;\n  if (edge.remainingCapacity() > 0 && newDist < dist[edge.to]) {\n    prev[edge.to]=edge;\n    dist[edge.to]=newDist;\n    pq.offer(new Node(edge.to,dist[edge.to]));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 76,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 376,
        "startLineNumber" : 119,
        "startColumnNumber" : 6,
        "endLineNumber" : 128,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < edges.size(); i++) {\n  Edge edge=edges.get(i);\n  if (visited(edge.to))   continue;\n  long newDist=dist[edge.from] + edge.cost;\n  if (edge.remainingCapacity() > 0 && newDist < dist[edge.to]) {\n    prev[edge.to]=edge;\n    dist[edge.to]=newDist;\n    pq.offer(new Node(edge.to,dist[edge.to]));\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 89,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 530,
        "startLineNumber" : 114,
        "startColumnNumber" : 26,
        "endLineNumber" : 129,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Node node=pq.poll();\n  visit(node.id);\n  if (dist[node.id] < node.value)   continue;\n  List<Edge> edges=graph[node.id];\n  for (int i=0; i < edges.size(); i++) {\n    Edge edge=edges.get(i);\n    if (visited(edge.to))     continue;\n    long newDist=dist[edge.from] + edge.cost;\n    if (edge.remainingCapacity() > 0 && newDist < dist[edge.to]) {\n      prev[edge.to]=edge;\n      dist[edge.to]=newDist;\n      pq.offer(new Node(edge.to,dist[edge.to]));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 128,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 552,
        "startLineNumber" : 114,
        "startColumnNumber" : 4,
        "endLineNumber" : 129,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (!pq.isEmpty()) {\n  Node node=pq.poll();\n  visit(node.id);\n  if (dist[node.id] < node.value)   continue;\n  List<Edge> edges=graph[node.id];\n  for (int i=0; i < edges.size(); i++) {\n    Edge edge=edges.get(i);\n    if (visited(edge.to))     continue;\n    long newDist=dist[edge.from] + edge.cost;\n    if (edge.remainingCapacity() > 0 && newDist < dist[edge.to]) {\n      prev[edge.to]=edge;\n      dist[edge.to]=newDist;\n      pq.offer(new Node(edge.to,dist[edge.to]));\n    }\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 133,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1347,
        "startLineNumber" : 86,
        "startColumnNumber" : 41,
        "endLineNumber" : 138,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\nclass Node implements Comparable<Node> {\n    int id;\n    long value;\n    public Node(    int id,    long value){\n      this.id=id;\n      this.value=value;\n    }\n    @Override public int compareTo(    Node other){\n      return (int)(value - other.value);\n    }\n  }\n  long[] dist=new long[n];\n  Arrays.fill(dist,INF);\n  dist[s]=0;\n  markAllNodesAsUnvisited();\n  Edge[] prev=new Edge[n];\n  PriorityQueue<Node> pq=new PriorityQueue<>();\n  pq.offer(new Node(s,0));\n  while (!pq.isEmpty()) {\n    Node node=pq.poll();\n    visit(node.id);\n    if (dist[node.id] < node.value)     continue;\n    List<Edge> edges=graph[node.id];\n    for (int i=0; i < edges.size(); i++) {\n      Edge edge=edges.get(i);\n      if (visited(edge.to))       continue;\n      long newDist=dist[edge.from] + edge.cost;\n      if (edge.remainingCapacity() > 0 && newDist < dist[edge.to]) {\n        prev[edge.to]=edge;\n        dist[edge.to]=newDist;\n        pq.offer(new Node(edge.to,dist[edge.to]));\n      }\n    }\n  }\n  LinkedList<Edge> path=new LinkedList<>();\n  if (dist[t] == INF)   return path;\n  adjustEdgeCosts(dist);\n  for (Edge edge=prev[t]; edge != null; edge=prev[edge.from])   path.addFirst(edge);\n  return path;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 302,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1386,
        "startLineNumber" : 86,
        "startColumnNumber" : 2,
        "endLineNumber" : 138,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private List<Edge> getAugmentingPath(){\nclass Node implements Comparable<Node> {\n    int id;\n    long value;\n    public Node(    int id,    long value){\n      this.id=id;\n      this.value=value;\n    }\n    @Override public int compareTo(    Node other){\n      return (int)(value - other.value);\n    }\n  }\n  long[] dist=new long[n];\n  Arrays.fill(dist,INF);\n  dist[s]=0;\n  markAllNodesAsUnvisited();\n  Edge[] prev=new Edge[n];\n  PriorityQueue<Node> pq=new PriorityQueue<>();\n  pq.offer(new Node(s,0));\n  while (!pq.isEmpty()) {\n    Node node=pq.poll();\n    visit(node.id);\n    if (dist[node.id] < node.value)     continue;\n    List<Edge> edges=graph[node.id];\n    for (int i=0; i < edges.size(); i++) {\n      Edge edge=edges.get(i);\n      if (visited(edge.to))       continue;\n      long newDist=dist[edge.from] + edge.cost;\n      if (edge.remainingCapacity() > 0 && newDist < dist[edge.to]) {\n        prev[edge.to]=edge;\n        dist[edge.to]=newDist;\n        pq.offer(new Node(edge.to,dist[edge.to]));\n      }\n    }\n  }\n  LinkedList<Edge> path=new LinkedList<>();\n  if (dist[t] == INF)   return path;\n  adjustEdgeCosts(dist);\n  for (Edge edge=prev[t]; edge != null; edge=prev[edge.from])   path.addFirst(edge);\n  return path;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 310,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 125,
        "startColumnNumber" : 10,
        "endLineNumber" : 125,
        "endColumnNumber" : 34
      },
      "nodeContext" : "dist[edge.to]=newDist;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "long"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 123,
    "startColumnNumber" : 44,
    "endLineNumber" : 123,
    "endColumnNumber" : 51
  }, {
    "charLength" : 7,
    "startLineNumber" : 125,
    "startColumnNumber" : 26,
    "endLineNumber" : 125,
    "endColumnNumber" : 33
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}