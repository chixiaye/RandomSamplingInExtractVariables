{
  "id" : 406,
  "expression" : "new LookupExtractionFn(mapExtractor6,true,null,false,true)",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/processing/src/test/java/org/apache/druid/segment/filter/SelectorFilterTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new LookupExtractionFn(mapExtractor6,true,null,false,true)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 62,
      "startLineNumber" : 287,
      "startColumnNumber" : 35,
      "endLineNumber" : 287,
      "endColumnNumber" : 97
    },
    "astNodeNumber" : 8,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 287,
        "startColumnNumber" : 23,
        "endLineNumber" : 287,
        "endColumnNumber" : 97
      },
      "nodeContext" : "lookupFn6=new LookupExtractionFn(mapExtractor6,true,null,false,true)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 287,
        "startColumnNumber" : 4,
        "endLineNumber" : 287,
        "endColumnNumber" : 98
      },
      "nodeContext" : "LookupExtractionFn lookupFn6=new LookupExtractionFn(mapExtractor6,true,null,false,true);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6231,
        "startLineNumber" : 210,
        "startColumnNumber" : 2,
        "endLineNumber" : 342,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final Map<String,String> stringMap=ImmutableMap.of(\"1\",\"HELLO\",\"a\",\"HELLO\",\"abdef\",\"HELLO\",\"abc\",\"UNKNOWN\");\n  LookupExtractor mapExtractor=new MapLookupExtractor(stringMap,false);\n  LookupExtractionFn lookupFn=new LookupExtractionFn(mapExtractor,false,\"UNKNOWN\",false,true);\n  assertFilterMatches(new SelectorDimFilter(\"dim0\",\"HELLO\",lookupFn),ImmutableList.of(\"1\"));\n  assertFilterMatches(new SelectorDimFilter(\"dim0\",\"UNKNOWN\",lookupFn),ImmutableList.of(\"0\",\"2\",\"3\",\"4\",\"5\"));\n  assertFilterMatches(new SelectorDimFilter(\"dim1\",\"HELLO\",lookupFn),ImmutableList.of(\"3\",\"4\"));\n  assertFilterMatches(new SelectorDimFilter(\"dim1\",\"UNKNOWN\",lookupFn),ImmutableList.of(\"0\",\"1\",\"2\",\"5\"));\n  assertFilterMatches(new SelectorDimFilter(\"dim2\",\"HELLO\",lookupFn),ImmutableList.of(\"0\",\"3\"));\n  assertFilterMatches(new SelectorDimFilter(\"dim2\",\"UNKNOWN\",lookupFn),ImmutableList.of(\"0\",\"1\",\"2\",\"4\",\"5\"));\n  assertFilterMatches(new SelectorDimFilter(\"dim3\",\"HELLO\",lookupFn),ImmutableList.of());\n  assertFilterMatches(new SelectorDimFilter(\"dim3\",\"UNKNOWN\",lookupFn),ImmutableList.of(\"0\",\"1\",\"2\",\"3\",\"4\",\"5\"));\n  assertFilterMatches(new SelectorDimFilter(\"dim4\",\"HELLO\",lookupFn),ImmutableList.of());\n  assertFilterMatches(new SelectorDimFilter(\"dim4\",\"UNKNOWN\",lookupFn),ImmutableList.of(\"0\",\"1\",\"2\",\"3\",\"4\",\"5\"));\n  final Map<String,String> stringMap2=ImmutableMap.of(\"2\",\"5\");\n  LookupExtractor mapExtractor2=new MapLookupExtractor(stringMap2,false);\n  LookupExtractionFn lookupFn2=new LookupExtractionFn(mapExtractor2,true,null,false,true);\n  assertFilterMatches(new SelectorDimFilter(\"dim0\",\"5\",lookupFn2),ImmutableList.of(\"2\",\"5\"));\n  final Map<String,String> stringMap3=ImmutableMap.of(\"1\",\"\");\n  LookupExtractor mapExtractor3=new MapLookupExtractor(stringMap3,false);\n  LookupExtractionFn lookupFn3=new LookupExtractionFn(mapExtractor3,false,null,false,true);\n  if (NullHandling.replaceWithDefault()) {\n    assertFilterMatches(new SelectorDimFilter(\"dim0\",null,lookupFn3),ImmutableList.of(\"0\",\"1\",\"2\",\"3\",\"4\",\"5\"));\n  }\n else {\n    assertFilterMatches(new SelectorDimFilter(\"dim0\",null,lookupFn3),ImmutableList.of(\"0\",\"2\",\"3\",\"4\",\"5\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim0\",\"\",lookupFn3),ImmutableList.of(\"1\"));\n  }\n  final Map<String,String> stringMap4=ImmutableMap.of(\"9\",\"4\");\n  LookupExtractor mapExtractor4=new MapLookupExtractor(stringMap4,false);\n  LookupExtractionFn lookupFn4=new LookupExtractionFn(mapExtractor4,true,null,false,true);\n  final Map<String,String> stringMap5=ImmutableMap.of(\"5\",\"44\");\n  LookupExtractor mapExtractor5=new MapLookupExtractor(stringMap5,false);\n  LookupExtractionFn lookupFn5=new LookupExtractionFn(mapExtractor5,true,null,false,true);\n  final Map<String,String> stringMap6=ImmutableMap.of(\"5\",\"5\");\n  LookupExtractor mapExtractor6=new MapLookupExtractor(stringMap6,false);\n  LookupExtractionFn lookupFn6=new LookupExtractionFn(mapExtractor6,true,null,false,true);\n  SelectorDimFilter optFilter1=new SelectorDimFilter(\"dim1\",\"UNKNOWN\",lookupFn);\n  SelectorDimFilter optFilter2=new SelectorDimFilter(\"dim0\",\"5\",lookupFn2);\n  SelectorDimFilter optFilter3=new SelectorDimFilter(\"dim0\",null,lookupFn3);\n  SelectorDimFilter optFilter4=new SelectorDimFilter(\"dim0\",\"5\",lookupFn4);\n  SelectorDimFilter optFilter5=new SelectorDimFilter(\"dim0\",\"5\",lookupFn5);\n  SelectorDimFilter optFilter6=new SelectorDimFilter(\"dim0\",\"5\",lookupFn6);\n  InDimFilter optFilter2Optimized=new InDimFilter(\"dim0\",Arrays.asList(\"2\",\"5\"),null);\n  SelectorDimFilter optFilter4Optimized=new SelectorDimFilter(\"dim0\",\"5\",null);\n  SelectorDimFilter optFilter6Optimized=new SelectorDimFilter(\"dim0\",\"5\",null);\n  Assert.assertTrue(optFilter1.equals(optFilter1.optimize()));\n  Assert.assertTrue(optFilter2Optimized.equals(optFilter2.optimize()));\n  Assert.assertTrue(optFilter3.equals(optFilter3.optimize()));\n  Assert.assertTrue(optFilter4Optimized.equals(optFilter4.optimize()));\n  Assert.assertTrue(optFilter5.equals(optFilter5.optimize()));\n  Assert.assertTrue(optFilter6Optimized.equals(optFilter6.optimize()));\n  assertFilterMatches(optFilter1,ImmutableList.of(\"0\",\"1\",\"2\",\"5\"));\n  assertFilterMatches(optFilter2,ImmutableList.of(\"2\",\"5\"));\n  if (NullHandling.replaceWithDefault()) {\n    assertFilterMatches(optFilter3,ImmutableList.of(\"0\",\"1\",\"2\",\"3\",\"4\",\"5\"));\n  }\n else {\n    assertFilterMatches(optFilter3,ImmutableList.of(\"0\",\"2\",\"3\",\"4\",\"5\"));\n  }\n  assertFilterMatches(optFilter4,ImmutableList.of(\"5\"));\n  assertFilterMatches(optFilter5,ImmutableList.of());\n  assertFilterMatches(optFilter6,ImmutableList.of(\"5\"));\n  assertFilterMatches(new ExtractionDimFilter(\"dim1\",\"UNKNOWN\",lookupFn,null),ImmutableList.of(\"0\",\"1\",\"2\",\"5\"));\n  assertFilterMatches(new ExtractionDimFilter(\"dim0\",\"5\",lookupFn2,null),ImmutableList.of(\"2\",\"5\"));\n  if (NullHandling.replaceWithDefault()) {\n    assertFilterMatches(new ExtractionDimFilter(\"dim0\",null,lookupFn3,null),ImmutableList.of(\"0\",\"1\",\"2\",\"3\",\"4\",\"5\"));\n  }\n else {\n    assertFilterMatches(new ExtractionDimFilter(\"dim0\",null,lookupFn3,null),ImmutableList.of(\"0\",\"2\",\"3\",\"4\",\"5\"));\n    assertFilterMatches(new ExtractionDimFilter(\"dim0\",\"\",lookupFn3,null),ImmutableList.of(\"1\"));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 786,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6290,
        "startLineNumber" : 208,
        "startColumnNumber" : 2,
        "endLineNumber" : 342,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testSelectorWithLookupExtractionFn(){\n  final Map<String,String> stringMap=ImmutableMap.of(\"1\",\"HELLO\",\"a\",\"HELLO\",\"abdef\",\"HELLO\",\"abc\",\"UNKNOWN\");\n  LookupExtractor mapExtractor=new MapLookupExtractor(stringMap,false);\n  LookupExtractionFn lookupFn=new LookupExtractionFn(mapExtractor,false,\"UNKNOWN\",false,true);\n  assertFilterMatches(new SelectorDimFilter(\"dim0\",\"HELLO\",lookupFn),ImmutableList.of(\"1\"));\n  assertFilterMatches(new SelectorDimFilter(\"dim0\",\"UNKNOWN\",lookupFn),ImmutableList.of(\"0\",\"2\",\"3\",\"4\",\"5\"));\n  assertFilterMatches(new SelectorDimFilter(\"dim1\",\"HELLO\",lookupFn),ImmutableList.of(\"3\",\"4\"));\n  assertFilterMatches(new SelectorDimFilter(\"dim1\",\"UNKNOWN\",lookupFn),ImmutableList.of(\"0\",\"1\",\"2\",\"5\"));\n  assertFilterMatches(new SelectorDimFilter(\"dim2\",\"HELLO\",lookupFn),ImmutableList.of(\"0\",\"3\"));\n  assertFilterMatches(new SelectorDimFilter(\"dim2\",\"UNKNOWN\",lookupFn),ImmutableList.of(\"0\",\"1\",\"2\",\"4\",\"5\"));\n  assertFilterMatches(new SelectorDimFilter(\"dim3\",\"HELLO\",lookupFn),ImmutableList.of());\n  assertFilterMatches(new SelectorDimFilter(\"dim3\",\"UNKNOWN\",lookupFn),ImmutableList.of(\"0\",\"1\",\"2\",\"3\",\"4\",\"5\"));\n  assertFilterMatches(new SelectorDimFilter(\"dim4\",\"HELLO\",lookupFn),ImmutableList.of());\n  assertFilterMatches(new SelectorDimFilter(\"dim4\",\"UNKNOWN\",lookupFn),ImmutableList.of(\"0\",\"1\",\"2\",\"3\",\"4\",\"5\"));\n  final Map<String,String> stringMap2=ImmutableMap.of(\"2\",\"5\");\n  LookupExtractor mapExtractor2=new MapLookupExtractor(stringMap2,false);\n  LookupExtractionFn lookupFn2=new LookupExtractionFn(mapExtractor2,true,null,false,true);\n  assertFilterMatches(new SelectorDimFilter(\"dim0\",\"5\",lookupFn2),ImmutableList.of(\"2\",\"5\"));\n  final Map<String,String> stringMap3=ImmutableMap.of(\"1\",\"\");\n  LookupExtractor mapExtractor3=new MapLookupExtractor(stringMap3,false);\n  LookupExtractionFn lookupFn3=new LookupExtractionFn(mapExtractor3,false,null,false,true);\n  if (NullHandling.replaceWithDefault()) {\n    assertFilterMatches(new SelectorDimFilter(\"dim0\",null,lookupFn3),ImmutableList.of(\"0\",\"1\",\"2\",\"3\",\"4\",\"5\"));\n  }\n else {\n    assertFilterMatches(new SelectorDimFilter(\"dim0\",null,lookupFn3),ImmutableList.of(\"0\",\"2\",\"3\",\"4\",\"5\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim0\",\"\",lookupFn3),ImmutableList.of(\"1\"));\n  }\n  final Map<String,String> stringMap4=ImmutableMap.of(\"9\",\"4\");\n  LookupExtractor mapExtractor4=new MapLookupExtractor(stringMap4,false);\n  LookupExtractionFn lookupFn4=new LookupExtractionFn(mapExtractor4,true,null,false,true);\n  final Map<String,String> stringMap5=ImmutableMap.of(\"5\",\"44\");\n  LookupExtractor mapExtractor5=new MapLookupExtractor(stringMap5,false);\n  LookupExtractionFn lookupFn5=new LookupExtractionFn(mapExtractor5,true,null,false,true);\n  final Map<String,String> stringMap6=ImmutableMap.of(\"5\",\"5\");\n  LookupExtractor mapExtractor6=new MapLookupExtractor(stringMap6,false);\n  LookupExtractionFn lookupFn6=new LookupExtractionFn(mapExtractor6,true,null,false,true);\n  SelectorDimFilter optFilter1=new SelectorDimFilter(\"dim1\",\"UNKNOWN\",lookupFn);\n  SelectorDimFilter optFilter2=new SelectorDimFilter(\"dim0\",\"5\",lookupFn2);\n  SelectorDimFilter optFilter3=new SelectorDimFilter(\"dim0\",null,lookupFn3);\n  SelectorDimFilter optFilter4=new SelectorDimFilter(\"dim0\",\"5\",lookupFn4);\n  SelectorDimFilter optFilter5=new SelectorDimFilter(\"dim0\",\"5\",lookupFn5);\n  SelectorDimFilter optFilter6=new SelectorDimFilter(\"dim0\",\"5\",lookupFn6);\n  InDimFilter optFilter2Optimized=new InDimFilter(\"dim0\",Arrays.asList(\"2\",\"5\"),null);\n  SelectorDimFilter optFilter4Optimized=new SelectorDimFilter(\"dim0\",\"5\",null);\n  SelectorDimFilter optFilter6Optimized=new SelectorDimFilter(\"dim0\",\"5\",null);\n  Assert.assertTrue(optFilter1.equals(optFilter1.optimize()));\n  Assert.assertTrue(optFilter2Optimized.equals(optFilter2.optimize()));\n  Assert.assertTrue(optFilter3.equals(optFilter3.optimize()));\n  Assert.assertTrue(optFilter4Optimized.equals(optFilter4.optimize()));\n  Assert.assertTrue(optFilter5.equals(optFilter5.optimize()));\n  Assert.assertTrue(optFilter6Optimized.equals(optFilter6.optimize()));\n  assertFilterMatches(optFilter1,ImmutableList.of(\"0\",\"1\",\"2\",\"5\"));\n  assertFilterMatches(optFilter2,ImmutableList.of(\"2\",\"5\"));\n  if (NullHandling.replaceWithDefault()) {\n    assertFilterMatches(optFilter3,ImmutableList.of(\"0\",\"1\",\"2\",\"3\",\"4\",\"5\"));\n  }\n else {\n    assertFilterMatches(optFilter3,ImmutableList.of(\"0\",\"2\",\"3\",\"4\",\"5\"));\n  }\n  assertFilterMatches(optFilter4,ImmutableList.of(\"5\"));\n  assertFilterMatches(optFilter5,ImmutableList.of());\n  assertFilterMatches(optFilter6,ImmutableList.of(\"5\"));\n  assertFilterMatches(new ExtractionDimFilter(\"dim1\",\"UNKNOWN\",lookupFn,null),ImmutableList.of(\"0\",\"1\",\"2\",\"5\"));\n  assertFilterMatches(new ExtractionDimFilter(\"dim0\",\"5\",lookupFn2,null),ImmutableList.of(\"2\",\"5\"));\n  if (NullHandling.replaceWithDefault()) {\n    assertFilterMatches(new ExtractionDimFilter(\"dim0\",null,lookupFn3,null),ImmutableList.of(\"0\",\"1\",\"2\",\"3\",\"4\",\"5\"));\n  }\n else {\n    assertFilterMatches(new ExtractionDimFilter(\"dim0\",null,lookupFn3,null),ImmutableList.of(\"0\",\"2\",\"3\",\"4\",\"5\"));\n    assertFilterMatches(new ExtractionDimFilter(\"dim0\",\"\",lookupFn3,null),ImmutableList.of(\"1\"));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 792,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 287,
        "startColumnNumber" : 4,
        "endLineNumber" : 287,
        "endColumnNumber" : 98
      },
      "nodeContext" : "LookupExtractionFn lookupFn6=new LookupExtractionFn(mapExtractor6,true,null,false,true);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 6,
    "type" : "org.apache.druid.query.lookup.LookupExtractionFn"
  } ],
  "positionList" : [ {
    "charLength" : 62,
    "startLineNumber" : 287,
    "startColumnNumber" : 35,
    "endLineNumber" : 287,
    "endColumnNumber" : 97
  } ],
  "layoutRelationDataList" : [ ]
}