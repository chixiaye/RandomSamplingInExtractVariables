{
  "id" : 437,
  "expression" : "Kind",
  "projectName" : "projectlombok@lombok",
  "commitID" : "25def866b50860715ee7c315c678b8c3d1ba9b56",
  "filePath" : "/src/core/lombok/core/LombokNode.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Kind",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 177,
      "startColumnNumber" : 19,
      "endLineNumber" : 177,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 177,
        "startColumnNumber" : 19,
        "endLineNumber" : 177,
        "endColumnNumber" : 34
      },
      "nodeContext" : "Kind.ANNOTATION",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 177,
        "startColumnNumber" : 6,
        "endLineNumber" : 177,
        "endColumnNumber" : 34
      },
      "nodeContext" : "getKind() != Kind.ANNOTATION",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 177,
        "startColumnNumber" : 2,
        "endLineNumber" : 177,
        "endColumnNumber" : 67
      },
      "nodeContext" : "if (getKind() != Kind.ANNOTATION) return Collections.emptyList();\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 535,
        "startLineNumber" : 176,
        "startColumnNumber" : 49,
        "endLineNumber" : 190,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (getKind() != Kind.ANNOTATION)   return Collections.emptyList();\n  L field=up();\n  if (field == null || field.getKind() != Kind.FIELD)   return Collections.emptyList();\n  L type=field.up();\n  if (type == null || type.getKind() != Kind.TYPE)   return Collections.emptyList();\n  List<L> fields=new ArrayList<L>();\n  for (  L potentialField : type.down()) {\n    if (potentialField.getKind() != Kind.FIELD)     continue;\n    if (fieldContainsAnnotation(potentialField.get(),get()))     fields.add(potentialField);\n  }\n  return fields;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 106,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 807,
        "startLineNumber" : 172,
        "startColumnNumber" : 1,
        "endLineNumber" : 190,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * {@code @Foo int x, y;} is stored in both javac and ecj as 2 FieldDeclarations, both with the same annotation as child.The normal  {@code up()} method can't handle having multiple parents, but this one can.\n */\npublic Collection<L> upFromAnnotationToFields(){\n  if (getKind() != Kind.ANNOTATION)   return Collections.emptyList();\n  L field=up();\n  if (field == null || field.getKind() != Kind.FIELD)   return Collections.emptyList();\n  L type=field.up();\n  if (type == null || type.getKind() != Kind.TYPE)   return Collections.emptyList();\n  List<L> fields=new ArrayList<L>();\n  for (  L potentialField : type.down()) {\n    if (potentialField.getKind() != Kind.FIELD)     continue;\n    if (fieldContainsAnnotation(potentialField.get(),get()))     fields.add(potentialField);\n  }\n  return fields;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 115,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 177,
        "startColumnNumber" : 2,
        "endLineNumber" : 177,
        "endColumnNumber" : 67
      },
      "nodeContext" : "if (getKind() != Kind.ANNOTATION) return Collections.emptyList();\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "lombok.core.AST.Kind"
  }, {
    "nodeContext" : "Kind",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 179,
      "startColumnNumber" : 42,
      "endLineNumber" : 179,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 179,
        "startColumnNumber" : 42,
        "endLineNumber" : 179,
        "endColumnNumber" : 52
      },
      "nodeContext" : "Kind.FIELD",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 179,
        "startColumnNumber" : 23,
        "endLineNumber" : 179,
        "endColumnNumber" : 52
      },
      "nodeContext" : "field.getKind() != Kind.FIELD",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 179,
        "startColumnNumber" : 6,
        "endLineNumber" : 179,
        "endColumnNumber" : 52
      },
      "nodeContext" : "field == null || field.getKind() != Kind.FIELD",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 179,
        "startColumnNumber" : 2,
        "endLineNumber" : 179,
        "endColumnNumber" : 85
      },
      "nodeContext" : "if (field == null || field.getKind() != Kind.FIELD) return Collections.emptyList();\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 535,
        "startLineNumber" : 176,
        "startColumnNumber" : 49,
        "endLineNumber" : 190,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (getKind() != Kind.ANNOTATION)   return Collections.emptyList();\n  L field=up();\n  if (field == null || field.getKind() != Kind.FIELD)   return Collections.emptyList();\n  L type=field.up();\n  if (type == null || type.getKind() != Kind.TYPE)   return Collections.emptyList();\n  List<L> fields=new ArrayList<L>();\n  for (  L potentialField : type.down()) {\n    if (potentialField.getKind() != Kind.FIELD)     continue;\n    if (fieldContainsAnnotation(potentialField.get(),get()))     fields.add(potentialField);\n  }\n  return fields;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 106,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 807,
        "startLineNumber" : 172,
        "startColumnNumber" : 1,
        "endLineNumber" : 190,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * {@code @Foo int x, y;} is stored in both javac and ecj as 2 FieldDeclarations, both with the same annotation as child.The normal  {@code up()} method can't handle having multiple parents, but this one can.\n */\npublic Collection<L> upFromAnnotationToFields(){\n  if (getKind() != Kind.ANNOTATION)   return Collections.emptyList();\n  L field=up();\n  if (field == null || field.getKind() != Kind.FIELD)   return Collections.emptyList();\n  L type=field.up();\n  if (type == null || type.getKind() != Kind.TYPE)   return Collections.emptyList();\n  List<L> fields=new ArrayList<L>();\n  for (  L potentialField : type.down()) {\n    if (potentialField.getKind() != Kind.FIELD)     continue;\n    if (fieldContainsAnnotation(potentialField.get(),get()))     fields.add(potentialField);\n  }\n  return fields;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 115,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 179,
        "startColumnNumber" : 2,
        "endLineNumber" : 179,
        "endColumnNumber" : 85
      },
      "nodeContext" : "if (field == null || field.getKind() != Kind.FIELD) return Collections.emptyList();\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "lombok.core.AST.Kind"
  }, {
    "nodeContext" : "Kind",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 181,
      "startColumnNumber" : 40,
      "endLineNumber" : 181,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 181,
        "startColumnNumber" : 40,
        "endLineNumber" : 181,
        "endColumnNumber" : 49
      },
      "nodeContext" : "Kind.TYPE",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 181,
        "startColumnNumber" : 22,
        "endLineNumber" : 181,
        "endColumnNumber" : 49
      },
      "nodeContext" : "type.getKind() != Kind.TYPE",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 181,
        "startColumnNumber" : 6,
        "endLineNumber" : 181,
        "endColumnNumber" : 49
      },
      "nodeContext" : "type == null || type.getKind() != Kind.TYPE",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 181,
        "startColumnNumber" : 2,
        "endLineNumber" : 181,
        "endColumnNumber" : 82
      },
      "nodeContext" : "if (type == null || type.getKind() != Kind.TYPE) return Collections.emptyList();\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 535,
        "startLineNumber" : 176,
        "startColumnNumber" : 49,
        "endLineNumber" : 190,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (getKind() != Kind.ANNOTATION)   return Collections.emptyList();\n  L field=up();\n  if (field == null || field.getKind() != Kind.FIELD)   return Collections.emptyList();\n  L type=field.up();\n  if (type == null || type.getKind() != Kind.TYPE)   return Collections.emptyList();\n  List<L> fields=new ArrayList<L>();\n  for (  L potentialField : type.down()) {\n    if (potentialField.getKind() != Kind.FIELD)     continue;\n    if (fieldContainsAnnotation(potentialField.get(),get()))     fields.add(potentialField);\n  }\n  return fields;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 106,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 807,
        "startLineNumber" : 172,
        "startColumnNumber" : 1,
        "endLineNumber" : 190,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * {@code @Foo int x, y;} is stored in both javac and ecj as 2 FieldDeclarations, both with the same annotation as child.The normal  {@code up()} method can't handle having multiple parents, but this one can.\n */\npublic Collection<L> upFromAnnotationToFields(){\n  if (getKind() != Kind.ANNOTATION)   return Collections.emptyList();\n  L field=up();\n  if (field == null || field.getKind() != Kind.FIELD)   return Collections.emptyList();\n  L type=field.up();\n  if (type == null || type.getKind() != Kind.TYPE)   return Collections.emptyList();\n  List<L> fields=new ArrayList<L>();\n  for (  L potentialField : type.down()) {\n    if (potentialField.getKind() != Kind.FIELD)     continue;\n    if (fieldContainsAnnotation(potentialField.get(),get()))     fields.add(potentialField);\n  }\n  return fields;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 115,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 181,
        "startColumnNumber" : 2,
        "endLineNumber" : 181,
        "endColumnNumber" : 82
      },
      "nodeContext" : "if (type == null || type.getKind() != Kind.TYPE) return Collections.emptyList();\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "lombok.core.AST.Kind"
  }, {
    "nodeContext" : "Kind",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 185,
      "startColumnNumber" : 35,
      "endLineNumber" : 185,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 185,
        "startColumnNumber" : 35,
        "endLineNumber" : 185,
        "endColumnNumber" : 45
      },
      "nodeContext" : "Kind.FIELD",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 185,
        "startColumnNumber" : 7,
        "endLineNumber" : 185,
        "endColumnNumber" : 45
      },
      "nodeContext" : "potentialField.getKind() != Kind.FIELD",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 185,
        "startColumnNumber" : 3,
        "endLineNumber" : 185,
        "endColumnNumber" : 56
      },
      "nodeContext" : "if (potentialField.getKind() != Kind.FIELD) continue;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 151,
        "startLineNumber" : 184,
        "startColumnNumber" : 39,
        "endLineNumber" : 187,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (potentialField.getKind() != Kind.FIELD)   continue;\n  if (fieldContainsAnnotation(potentialField.get(),get()))   fields.add(potentialField);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 23,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 188,
        "startLineNumber" : 184,
        "startColumnNumber" : 2,
        "endLineNumber" : 187,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (L potentialField : type.down()) {\n  if (potentialField.getKind() != Kind.FIELD)   continue;\n  if (fieldContainsAnnotation(potentialField.get(),get()))   fields.add(potentialField);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 31,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 535,
        "startLineNumber" : 176,
        "startColumnNumber" : 49,
        "endLineNumber" : 190,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (getKind() != Kind.ANNOTATION)   return Collections.emptyList();\n  L field=up();\n  if (field == null || field.getKind() != Kind.FIELD)   return Collections.emptyList();\n  L type=field.up();\n  if (type == null || type.getKind() != Kind.TYPE)   return Collections.emptyList();\n  List<L> fields=new ArrayList<L>();\n  for (  L potentialField : type.down()) {\n    if (potentialField.getKind() != Kind.FIELD)     continue;\n    if (fieldContainsAnnotation(potentialField.get(),get()))     fields.add(potentialField);\n  }\n  return fields;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 106,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 807,
        "startLineNumber" : 172,
        "startColumnNumber" : 1,
        "endLineNumber" : 190,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * {@code @Foo int x, y;} is stored in both javac and ecj as 2 FieldDeclarations, both with the same annotation as child.The normal  {@code up()} method can't handle having multiple parents, but this one can.\n */\npublic Collection<L> upFromAnnotationToFields(){\n  if (getKind() != Kind.ANNOTATION)   return Collections.emptyList();\n  L field=up();\n  if (field == null || field.getKind() != Kind.FIELD)   return Collections.emptyList();\n  L type=field.up();\n  if (type == null || type.getKind() != Kind.TYPE)   return Collections.emptyList();\n  List<L> fields=new ArrayList<L>();\n  for (  L potentialField : type.down()) {\n    if (potentialField.getKind() != Kind.FIELD)     continue;\n    if (fieldContainsAnnotation(potentialField.get(),get()))     fields.add(potentialField);\n  }\n  return fields;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 115,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 185,
        "startColumnNumber" : 3,
        "endLineNumber" : 185,
        "endColumnNumber" : 56
      },
      "nodeContext" : "if (potentialField.getKind() != Kind.FIELD) continue;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "lombok.core.AST.Kind"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 177,
    "startColumnNumber" : 19,
    "endLineNumber" : 177,
    "endColumnNumber" : 23
  }, {
    "charLength" : 4,
    "startLineNumber" : 179,
    "startColumnNumber" : 42,
    "endLineNumber" : 179,
    "endColumnNumber" : 46
  }, {
    "charLength" : 4,
    "startLineNumber" : 181,
    "startColumnNumber" : 40,
    "endLineNumber" : 181,
    "endColumnNumber" : 44
  }, {
    "charLength" : 4,
    "startLineNumber" : 185,
    "startColumnNumber" : 35,
    "endLineNumber" : 185,
    "endColumnNumber" : 39
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 5
  } ]
}