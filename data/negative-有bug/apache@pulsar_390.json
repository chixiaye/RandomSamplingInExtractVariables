{
  "id" : 390,
  "expression" : "decodeSchema.decode(insertBytes)",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-io/jdbc/sqlite/src/test/java/org/apache/pulsar/io/jdbc/SqliteJdbcSinkTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "decodeSchema.decode(insertBytes)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 32,
      "startLineNumber" : 176,
      "startColumnNumber" : 50,
      "endLineNumber" : 176,
      "endColumnNumber" : 82
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 176,
        "startColumnNumber" : 8,
        "endLineNumber" : 176,
        "endColumnNumber" : 83
      },
      "nodeContext" : "when(insertMessage.getValue()).thenReturn(decodeSchema.decode(insertBytes))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 176,
        "startColumnNumber" : 8,
        "endLineNumber" : 176,
        "endColumnNumber" : 84
      },
      "nodeContext" : "when(insertMessage.getValue()).thenReturn(decodeSchema.decode(insertBytes));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1988,
        "startLineNumber" : 157,
        "startColumnNumber" : 97,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Message<GenericRecord> insertMessage=mock(MessageImpl.class);\n  GenericSchema<GenericRecord> genericAvroSchema;\n  Foo insertObj=new Foo();\n  insertObj.setField1(\"ValueOfField1\");\n  insertObj.setField2(\"ValueOfField2\");\n  insertObj.setField3(3);\n  JSONSchema<Foo> schema=JSONSchema.of(SchemaDefinition.<Foo>builder().withPojo(Foo.class).withAlwaysAllowNull(true).build());\n  byte[] insertBytes=schema.encode(insertObj);\n  CompletableFuture<Void> future=new CompletableFuture<>();\n  Record<GenericRecord> insertRecord=PulsarRecord.<GenericRecord>builder().message(insertMessage).topicName(\"fake_topic_name\").ackFunction(() -> future.complete(null)).build();\n  GenericSchema<GenericRecord> decodeSchema=GenericSchemaImpl.of(schema.getSchemaInfo());\n  when(insertMessage.getValue()).thenReturn(decodeSchema.decode(insertBytes));\n  when(insertMessage.getProperties()).thenReturn(actionProperties);\n  log.info(\"foo:{}, Message.getValue: {}, record.getValue: {}\",insertObj.toString(),insertMessage.getValue().toString(),insertRecord.getValue().toString());\n  jdbcSink.write(insertRecord);\n  log.info(\"executed write\");\n  future.get(1,TimeUnit.SECONDS);\n  String querySql=\"SELECT * FROM \" + tableName + \" WHERE field3=3\";\n  int count=sqliteUtils.select(querySql,(resultSet) -> {\n    Assert.assertEquals(insertObj.getField1(),resultSet.getString(1));\n    Assert.assertEquals(insertObj.getField2(),resultSet.getString(2));\n    Assert.assertEquals(insertObj.getField3(),resultSet.getInt(3));\n  }\n);\n  Assert.assertEquals(count,1);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 252,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2081,
        "startLineNumber" : 157,
        "startColumnNumber" : 4,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void testOpenAndWriteSinkJson(Map<String,String> actionProperties) throws Exception {\n  Message<GenericRecord> insertMessage=mock(MessageImpl.class);\n  GenericSchema<GenericRecord> genericAvroSchema;\n  Foo insertObj=new Foo();\n  insertObj.setField1(\"ValueOfField1\");\n  insertObj.setField2(\"ValueOfField2\");\n  insertObj.setField3(3);\n  JSONSchema<Foo> schema=JSONSchema.of(SchemaDefinition.<Foo>builder().withPojo(Foo.class).withAlwaysAllowNull(true).build());\n  byte[] insertBytes=schema.encode(insertObj);\n  CompletableFuture<Void> future=new CompletableFuture<>();\n  Record<GenericRecord> insertRecord=PulsarRecord.<GenericRecord>builder().message(insertMessage).topicName(\"fake_topic_name\").ackFunction(() -> future.complete(null)).build();\n  GenericSchema<GenericRecord> decodeSchema=GenericSchemaImpl.of(schema.getSchemaInfo());\n  when(insertMessage.getValue()).thenReturn(decodeSchema.decode(insertBytes));\n  when(insertMessage.getProperties()).thenReturn(actionProperties);\n  log.info(\"foo:{}, Message.getValue: {}, record.getValue: {}\",insertObj.toString(),insertMessage.getValue().toString(),insertRecord.getValue().toString());\n  jdbcSink.write(insertRecord);\n  log.info(\"executed write\");\n  future.get(1,TimeUnit.SECONDS);\n  String querySql=\"SELECT * FROM \" + tableName + \" WHERE field3=3\";\n  int count=sqliteUtils.select(querySql,(resultSet) -> {\n    Assert.assertEquals(insertObj.getField1(),resultSet.getString(1));\n    Assert.assertEquals(insertObj.getField2(),resultSet.getString(2));\n    Assert.assertEquals(insertObj.getField3(),resultSet.getInt(3));\n  }\n);\n  Assert.assertEquals(count,1);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 267,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 176,
        "startColumnNumber" : 8,
        "endLineNumber" : 176,
        "endColumnNumber" : 84
      },
      "nodeContext" : "when(insertMessage.getValue()).thenReturn(decodeSchema.decode(insertBytes));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "org.apache.pulsar.client.api.schema.GenericRecord"
  } ],
  "positionList" : [ {
    "charLength" : 32,
    "startLineNumber" : 176,
    "startColumnNumber" : 50,
    "endLineNumber" : 176,
    "endColumnNumber" : 82
  } ],
  "layoutRelationDataList" : [ ]
}