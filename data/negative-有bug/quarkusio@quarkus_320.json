{
  "id" : 320,
  "expression" : "Type.class",
  "projectName" : "quarkusio@quarkus",
  "commitID" : "2862b200ee266332150317795b9fe315be51d68b",
  "filePath" : "/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/DecoratorGenerator.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Type.class",
    "nodeType" : "TypeLiteral",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 91,
      "startColumnNumber" : 95,
      "endLineNumber" : 91,
      "endColumnNumber" : 105
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 91,
        "startColumnNumber" : 36,
        "endLineNumber" : 91,
        "endColumnNumber" : 106
      },
      "nodeContext" : "decoratorCreator.getFieldCreator(FIELD_NAME_DELEGATE_TYPE,Type.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 125,
        "startLineNumber" : 91,
        "startColumnNumber" : 36,
        "endLineNumber" : 92,
        "endColumnNumber" : 54
      },
      "nodeContext" : "decoratorCreator.getFieldCreator(FIELD_NAME_DELEGATE_TYPE,Type.class).setModifiers(ACC_PRIVATE | ACC_FINAL)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 140,
        "startLineNumber" : 91,
        "startColumnNumber" : 21,
        "endLineNumber" : 92,
        "endColumnNumber" : 54
      },
      "nodeContext" : "delegateType=decoratorCreator.getFieldCreator(FIELD_NAME_DELEGATE_TYPE,Type.class).setModifiers(ACC_PRIVATE | ACC_FINAL)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 154,
        "startLineNumber" : 91,
        "startColumnNumber" : 8,
        "endLineNumber" : 92,
        "endColumnNumber" : 55
      },
      "nodeContext" : "FieldCreator delegateType=decoratorCreator.getFieldCreator(FIELD_NAME_DELEGATE_TYPE,Type.class).setModifiers(ACC_PRIVATE | ACC_FINAL);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4016,
        "startLineNumber" : 57,
        "startColumnNumber" : 59,
        "endLineNumber" : 126,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ProviderType providerType=new ProviderType(decorator.getProviderType());\n  ClassInfo decoratorClass=decorator.getTarget().get().asClass();\n  String baseName=createBaseName(decoratorClass);\n  String targetPackage=DotNames.packageName(providerType.name());\n  String generatedName=generatedNameFromTarget(targetPackage,baseName,BEAN_SUFFIX);\n  beanToGeneratedName.put(decorator,generatedName);\n  if (existingClasses.contains(generatedName)) {\n    return Collections.emptyList();\n  }\n  boolean isApplicationClass=applicationClassPredicate.test(decorator.getBeanClass());\n  ResourceClassOutput classOutput=new ResourceClassOutput(isApplicationClass,name -> name.equals(generatedName) ? SpecialType.DECORATOR_BEAN : null,generateSources);\n  ClassCreator decoratorCreator=ClassCreator.builder().classOutput(classOutput).className(generatedName).interfaces(InjectableDecorator.class,Supplier.class).build();\n  if (decorator.isAbstract()) {\n    String generatedImplName=generateDecoratorImplementation(baseName,targetPackage,decorator,decoratorClass,classOutput);\n    providerType=new ProviderType(org.jboss.jandex.Type.create(DotName.createSimple(generatedImplName),Kind.CLASS));\n  }\n  FieldCreator beanTypes=decoratorCreator.getFieldCreator(FIELD_NAME_BEAN_TYPES,Set.class).setModifiers(ACC_PRIVATE | ACC_FINAL);\n  FieldCreator decoratedTypes=decoratorCreator.getFieldCreator(FIELD_NAME_DECORATED_TYPES,Set.class).setModifiers(ACC_PRIVATE | ACC_FINAL);\n  InjectionPointInfo delegateInjectionPoint=decorator.getDelegateInjectionPoint();\n  FieldCreator delegateType=decoratorCreator.getFieldCreator(FIELD_NAME_DELEGATE_TYPE,Type.class).setModifiers(ACC_PRIVATE | ACC_FINAL);\n  FieldCreator delegateQualifiers=null;\n  if (!delegateInjectionPoint.hasDefaultedQualifier()) {\n    delegateQualifiers=decoratorCreator.getFieldCreator(FIELD_NAME_QUALIFIERS,Set.class).setModifiers(ACC_PRIVATE | ACC_FINAL);\n  }\n  Map<InjectionPointInfo,String> injectionPointToProviderField=new HashMap<>();\n  initMaps(decorator,injectionPointToProviderField,Collections.emptyMap(),Collections.emptyMap());\n  createProviderFields(decoratorCreator,decorator,injectionPointToProviderField,Collections.emptyMap(),Collections.emptyMap());\n  createConstructor(classOutput,decoratorCreator,decorator,injectionPointToProviderField,delegateType,delegateQualifiers,decoratedTypes,reflectionRegistration);\n  implementGetIdentifier(decorator,decoratorCreator);\n  implementSupplierGet(decoratorCreator);\n  implementCreate(classOutput,decoratorCreator,decorator,providerType,baseName,injectionPointToProviderField,Collections.emptyMap(),Collections.emptyMap(),targetPackage,isApplicationClass);\n  implementGet(decorator,decoratorCreator,providerType,baseName);\n  implementGetTypes(decoratorCreator,beanTypes.getFieldDescriptor());\n  implementGetBeanClass(decorator,decoratorCreator);\n  implementGetDecoratedTypes(decoratorCreator,decoratedTypes.getFieldDescriptor());\n  implementGetDelegateType(decoratorCreator,delegateType.getFieldDescriptor());\n  implementGetDelegateQualifiers(decoratorCreator,delegateQualifiers);\n  implementGetPriority(decoratorCreator,decorator);\n  decoratorCreator.close();\n  return classOutput.getResources();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 375,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4164,
        "startLineNumber" : 52,
        "startColumnNumber" : 4,
        "endLineNumber" : 126,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * @param decorator bean\n * @return a collection of resources\n */\nCollection<Resource> generate(DecoratorInfo decorator){\n  ProviderType providerType=new ProviderType(decorator.getProviderType());\n  ClassInfo decoratorClass=decorator.getTarget().get().asClass();\n  String baseName=createBaseName(decoratorClass);\n  String targetPackage=DotNames.packageName(providerType.name());\n  String generatedName=generatedNameFromTarget(targetPackage,baseName,BEAN_SUFFIX);\n  beanToGeneratedName.put(decorator,generatedName);\n  if (existingClasses.contains(generatedName)) {\n    return Collections.emptyList();\n  }\n  boolean isApplicationClass=applicationClassPredicate.test(decorator.getBeanClass());\n  ResourceClassOutput classOutput=new ResourceClassOutput(isApplicationClass,name -> name.equals(generatedName) ? SpecialType.DECORATOR_BEAN : null,generateSources);\n  ClassCreator decoratorCreator=ClassCreator.builder().classOutput(classOutput).className(generatedName).interfaces(InjectableDecorator.class,Supplier.class).build();\n  if (decorator.isAbstract()) {\n    String generatedImplName=generateDecoratorImplementation(baseName,targetPackage,decorator,decoratorClass,classOutput);\n    providerType=new ProviderType(org.jboss.jandex.Type.create(DotName.createSimple(generatedImplName),Kind.CLASS));\n  }\n  FieldCreator beanTypes=decoratorCreator.getFieldCreator(FIELD_NAME_BEAN_TYPES,Set.class).setModifiers(ACC_PRIVATE | ACC_FINAL);\n  FieldCreator decoratedTypes=decoratorCreator.getFieldCreator(FIELD_NAME_DECORATED_TYPES,Set.class).setModifiers(ACC_PRIVATE | ACC_FINAL);\n  InjectionPointInfo delegateInjectionPoint=decorator.getDelegateInjectionPoint();\n  FieldCreator delegateType=decoratorCreator.getFieldCreator(FIELD_NAME_DELEGATE_TYPE,Type.class).setModifiers(ACC_PRIVATE | ACC_FINAL);\n  FieldCreator delegateQualifiers=null;\n  if (!delegateInjectionPoint.hasDefaultedQualifier()) {\n    delegateQualifiers=decoratorCreator.getFieldCreator(FIELD_NAME_QUALIFIERS,Set.class).setModifiers(ACC_PRIVATE | ACC_FINAL);\n  }\n  Map<InjectionPointInfo,String> injectionPointToProviderField=new HashMap<>();\n  initMaps(decorator,injectionPointToProviderField,Collections.emptyMap(),Collections.emptyMap());\n  createProviderFields(decoratorCreator,decorator,injectionPointToProviderField,Collections.emptyMap(),Collections.emptyMap());\n  createConstructor(classOutput,decoratorCreator,decorator,injectionPointToProviderField,delegateType,delegateQualifiers,decoratedTypes,reflectionRegistration);\n  implementGetIdentifier(decorator,decoratorCreator);\n  implementSupplierGet(decoratorCreator);\n  implementCreate(classOutput,decoratorCreator,decorator,providerType,baseName,injectionPointToProviderField,Collections.emptyMap(),Collections.emptyMap(),targetPackage,isApplicationClass);\n  implementGet(decorator,decoratorCreator,providerType,baseName);\n  implementGetTypes(decoratorCreator,beanTypes.getFieldDescriptor());\n  implementGetBeanClass(decorator,decoratorCreator);\n  implementGetDecoratedTypes(decoratorCreator,decoratedTypes.getFieldDescriptor());\n  implementGetDelegateType(decoratorCreator,delegateType.getFieldDescriptor());\n  implementGetDelegateQualifiers(decoratorCreator,delegateQualifiers);\n  implementGetPriority(decoratorCreator,decorator);\n  decoratorCreator.close();\n  return classOutput.getResources();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 387,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 91,
        "startColumnNumber" : 36,
        "endLineNumber" : 91,
        "endColumnNumber" : 106
      },
      "nodeContext" : "decoratorCreator.getFieldCreator(FIELD_NAME_DELEGATE_TYPE,Type.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.Class<java.lang.reflect.Type>"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 91,
    "startColumnNumber" : 95,
    "endLineNumber" : 91,
    "endColumnNumber" : 105
  } ],
  "layoutRelationDataList" : [ ]
}