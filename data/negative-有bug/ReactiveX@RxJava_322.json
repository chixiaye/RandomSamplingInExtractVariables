{
  "id" : 322,
  "expression" : "1",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/test/java/io/reactivex/internal/operators/observable/ObservableMergeMaxConcurrentTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 50,
      "startColumnNumber" : 57,
      "endLineNumber" : 50,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 50,
        "startColumnNumber" : 36,
        "endLineNumber" : 50,
        "endColumnNumber" : 59
      },
      "nodeContext" : "Observable.merge(os,1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 50,
        "startColumnNumber" : 36,
        "endLineNumber" : 50,
        "endColumnNumber" : 72
      },
      "nodeContext" : "Observable.merge(os,1).toBlocking()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 50,
        "startColumnNumber" : 36,
        "endLineNumber" : 50,
        "endColumnNumber" : 83
      },
      "nodeContext" : "Observable.merge(os,1).toBlocking().iterator()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 50,
        "startColumnNumber" : 29,
        "endLineNumber" : 50,
        "endColumnNumber" : 83
      },
      "nodeContext" : "iter=Observable.merge(os,1).toBlocking().iterator()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 50,
        "endColumnNumber" : 84
      },
      "nodeContext" : "Iterator<String> iter=Observable.merge(os,1).toBlocking().iterator();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 888,
        "startLineNumber" : 43,
        "startColumnNumber" : 38,
        "endLineNumber" : 56,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  List<Observable<String>> os=new ArrayList<Observable<String>>();\n  os.add(Observable.just(\"one\",\"two\",\"three\",\"four\",\"five\").subscribeOn(Schedulers.newThread()));\n  os.add(Observable.just(\"one\",\"two\",\"three\",\"four\",\"five\").subscribeOn(Schedulers.newThread()));\n  os.add(Observable.just(\"one\",\"two\",\"three\",\"four\",\"five\").subscribeOn(Schedulers.newThread()));\n  List<String> expected=Arrays.asList(\"one\",\"two\",\"three\",\"four\",\"five\",\"one\",\"two\",\"three\",\"four\",\"five\",\"one\",\"two\",\"three\",\"four\",\"five\");\n  Iterator<String> iter=Observable.merge(os,1).toBlocking().iterator();\n  List<String> actual=new ArrayList<String>();\n  while (iter.hasNext()) {\n    actual.add(iter.next());\n  }\n  assertEquals(expected,actual);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 146,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 918,
        "startLineNumber" : 43,
        "startColumnNumber" : 8,
        "endLineNumber" : 56,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < 100; i++) {\n  List<Observable<String>> os=new ArrayList<Observable<String>>();\n  os.add(Observable.just(\"one\",\"two\",\"three\",\"four\",\"five\").subscribeOn(Schedulers.newThread()));\n  os.add(Observable.just(\"one\",\"two\",\"three\",\"four\",\"five\").subscribeOn(Schedulers.newThread()));\n  os.add(Observable.just(\"one\",\"two\",\"three\",\"four\",\"five\").subscribeOn(Schedulers.newThread()));\n  List<String> expected=Arrays.asList(\"one\",\"two\",\"three\",\"four\",\"five\",\"one\",\"two\",\"three\",\"four\",\"five\",\"one\",\"two\",\"three\",\"four\",\"five\");\n  Iterator<String> iter=Observable.merge(os,1).toBlocking().iterator();\n  List<String> actual=new ArrayList<String>();\n  while (iter.hasNext()) {\n    actual.add(iter.next());\n  }\n  assertEquals(expected,actual);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 157,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 936,
        "startLineNumber" : 42,
        "startColumnNumber" : 45,
        "endLineNumber" : 57,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  for (int i=0; i < 100; i++) {\n    List<Observable<String>> os=new ArrayList<Observable<String>>();\n    os.add(Observable.just(\"one\",\"two\",\"three\",\"four\",\"five\").subscribeOn(Schedulers.newThread()));\n    os.add(Observable.just(\"one\",\"two\",\"three\",\"four\",\"five\").subscribeOn(Schedulers.newThread()));\n    os.add(Observable.just(\"one\",\"two\",\"three\",\"four\",\"five\").subscribeOn(Schedulers.newThread()));\n    List<String> expected=Arrays.asList(\"one\",\"two\",\"three\",\"four\",\"five\",\"one\",\"two\",\"three\",\"four\",\"five\",\"one\",\"two\",\"three\",\"four\",\"five\");\n    Iterator<String> iter=Observable.merge(os,1).toBlocking().iterator();\n    List<String> actual=new ArrayList<String>();\n    while (iter.hasNext()) {\n      actual.add(iter.next());\n    }\n    assertEquals(expected,actual);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 158,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 988,
        "startLineNumber" : 41,
        "startColumnNumber" : 4,
        "endLineNumber" : 57,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testWhenMaxConcurrentIsOne(){\n  for (int i=0; i < 100; i++) {\n    List<Observable<String>> os=new ArrayList<Observable<String>>();\n    os.add(Observable.just(\"one\",\"two\",\"three\",\"four\",\"five\").subscribeOn(Schedulers.newThread()));\n    os.add(Observable.just(\"one\",\"two\",\"three\",\"four\",\"five\").subscribeOn(Schedulers.newThread()));\n    os.add(Observable.just(\"one\",\"two\",\"three\",\"four\",\"five\").subscribeOn(Schedulers.newThread()));\n    List<String> expected=Arrays.asList(\"one\",\"two\",\"three\",\"four\",\"five\",\"one\",\"two\",\"three\",\"four\",\"five\",\"one\",\"two\",\"three\",\"four\",\"five\");\n    Iterator<String> iter=Observable.merge(os,1).toBlocking().iterator();\n    List<String> actual=new ArrayList<String>();\n    while (iter.hasNext()) {\n      actual.add(iter.next());\n    }\n    assertEquals(expected,actual);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 164,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 50,
        "startColumnNumber" : 12,
        "endLineNumber" : 50,
        "endColumnNumber" : 84
      },
      "nodeContext" : "Iterator<String> iter=Observable.merge(os,1).toBlocking().iterator();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 50,
    "startColumnNumber" : 57,
    "endLineNumber" : 50,
    "endColumnNumber" : 58
  } ],
  "layoutRelationDataList" : [ ]
}