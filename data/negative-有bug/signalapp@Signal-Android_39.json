{
  "id" : 39,
  "expression" : "\"Payment contains \" + paymentSubmissionResult.defrags().size() + \" defrags, main payment\"+ uuid",
  "projectName" : "signalapp@Signal-Android",
  "commitID" : "7e91132e7ed62a58b5f347de252ab1eda3f43b90",
  "filePath" : "/app/src/main/java/org/thoughtcrime/securesms/jobs/PaymentSendJob.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Payment contains \" + paymentSubmissionResult.defrags().size() + \" defrags, main payment\"+ uuid",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 96,
      "startLineNumber" : 155,
      "startColumnNumber" : 19,
      "endLineNumber" : 155,
      "endColumnNumber" : 115
    },
    "astNodeNumber" : 9,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 155,
        "startColumnNumber" : 8,
        "endLineNumber" : 155,
        "endColumnNumber" : 116
      },
      "nodeContext" : "Log.i(TAG,\"Payment contains \" + paymentSubmissionResult.defrags().size() + \" defrags, main payment\"+ uuid)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 155,
        "startColumnNumber" : 8,
        "endLineNumber" : 155,
        "endColumnNumber" : 117
      },
      "nodeContext" : "Log.i(TAG,\"Payment contains \" + paymentSubmissionResult.defrags().size() + \" defrags, main payment\"+ uuid);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1358,
        "startLineNumber" : 154,
        "startColumnNumber" : 53,
        "endLineNumber" : 174,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  Log.i(TAG,\"Payment contains \" + paymentSubmissionResult.defrags().size() + \" defrags, main payment\"+ uuid);\n  RecipientId self=Recipient.self().getId();\n  MobileCoinPublicAddress selfAddress=wallet.getMobileCoinPublicAddress();\n  for (  TransactionSubmissionResult defrag : paymentSubmissionResult.defrags()) {\n    UUID defragUuid=UUID.randomUUID();\n    PaymentTransactionId.MobileCoin mobileCoinTransaction=(PaymentTransactionId.MobileCoin)defrag.getTransactionId();\n    paymentDatabase.createDefrag(defragUuid,self,selfAddress,timestamp - 1,mobileCoinTransaction.getFee(),mobileCoinTransaction.getTransaction(),mobileCoinTransaction.getReceipt());\n    Log.i(TAG,\"Defrag entered with id \" + defragUuid);\n    ApplicationDependencies.getJobManager().startChain(new PaymentTransactionCheckJob(defragUuid,QUEUE)).then(new MultiDeviceOutgoingPaymentSyncJob(defragUuid)).enqueue();\n  }\n  stopwatch.split(\"Defrag\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 116,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1405,
        "startLineNumber" : 154,
        "startColumnNumber" : 6,
        "endLineNumber" : 174,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (paymentSubmissionResult.containsDefrags()) {\n  Log.i(TAG,\"Payment contains \" + paymentSubmissionResult.defrags().size() + \" defrags, main payment\"+ uuid);\n  RecipientId self=Recipient.self().getId();\n  MobileCoinPublicAddress selfAddress=wallet.getMobileCoinPublicAddress();\n  for (  TransactionSubmissionResult defrag : paymentSubmissionResult.defrags()) {\n    UUID defragUuid=UUID.randomUUID();\n    PaymentTransactionId.MobileCoin mobileCoinTransaction=(PaymentTransactionId.MobileCoin)defrag.getTransactionId();\n    paymentDatabase.createDefrag(defragUuid,self,selfAddress,timestamp - 1,mobileCoinTransaction.getFee(),mobileCoinTransaction.getTransaction(),mobileCoinTransaction.getReceipt());\n    Log.i(TAG,\"Defrag entered with id \" + defragUuid);\n    ApplicationDependencies.getJobManager().startChain(new PaymentTransactionCheckJob(defragUuid,QUEUE)).then(new MultiDeviceOutgoingPaymentSyncJob(defragUuid)).enqueue();\n  }\n  stopwatch.split(\"Defrag\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 120,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3028,
        "startLineNumber" : 150,
        "startColumnNumber" : 8,
        "endLineNumber" : 199,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  PaymentSubmissionResult paymentSubmissionResult=wallet.sendPayment(publicAddress,amount.requireMobileCoin(),totalFee.requireMobileCoin());\n  stopwatch.split(\"Payment submitted\");\n  if (paymentSubmissionResult.containsDefrags()) {\n    Log.i(TAG,\"Payment contains \" + paymentSubmissionResult.defrags().size() + \" defrags, main payment\"+ uuid);\n    RecipientId self=Recipient.self().getId();\n    MobileCoinPublicAddress selfAddress=wallet.getMobileCoinPublicAddress();\n    for (    TransactionSubmissionResult defrag : paymentSubmissionResult.defrags()) {\n      UUID defragUuid=UUID.randomUUID();\n      PaymentTransactionId.MobileCoin mobileCoinTransaction=(PaymentTransactionId.MobileCoin)defrag.getTransactionId();\n      paymentDatabase.createDefrag(defragUuid,self,selfAddress,timestamp - 1,mobileCoinTransaction.getFee(),mobileCoinTransaction.getTransaction(),mobileCoinTransaction.getReceipt());\n      Log.i(TAG,\"Defrag entered with id \" + defragUuid);\n      ApplicationDependencies.getJobManager().startChain(new PaymentTransactionCheckJob(defragUuid,QUEUE)).then(new MultiDeviceOutgoingPaymentSyncJob(defragUuid)).enqueue();\n    }\n    stopwatch.split(\"Defrag\");\n  }\n  TransactionSubmissionResult.ErrorCode errorCode=paymentSubmissionResult.getErrorCode();\nswitch (errorCode) {\ncase INSUFFICIENT_FUNDS:    paymentDatabase.markPaymentFailed(uuid,FailureReason.INSUFFICIENT_FUNDS);\n  throw new PaymentException(\"Payment failed due to \" + errorCode);\ncase GENERIC_FAILURE:paymentDatabase.markPaymentFailed(uuid,FailureReason.UNKNOWN);\nthrow new PaymentException(\"Payment failed due to \" + errorCode);\ncase NETWORK_FAILURE:paymentDatabase.markPaymentFailed(uuid,FailureReason.NETWORK);\nthrow new PaymentException(\"Payment failed due to \" + errorCode);\ncase NONE:Log.i(TAG,\"Payment submission complete\");\nTransactionSubmissionResult transactionSubmissionResult=Objects.requireNonNull(paymentSubmissionResult.getNonDefrag());\nPaymentTransactionId.MobileCoin mobileCoinTransaction=(PaymentTransactionId.MobileCoin)transactionSubmissionResult.getTransactionId();\npaymentDatabase.markPaymentSubmitted(uuid,mobileCoinTransaction.getTransaction(),mobileCoinTransaction.getReceipt(),mobileCoinTransaction.getFee());\nLog.i(TAG,\"Payment record updated \" + uuid);\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 261,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3193,
        "startLineNumber" : 150,
        "startColumnNumber" : 4,
        "endLineNumber" : 203,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  PaymentSubmissionResult paymentSubmissionResult=wallet.sendPayment(publicAddress,amount.requireMobileCoin(),totalFee.requireMobileCoin());\n  stopwatch.split(\"Payment submitted\");\n  if (paymentSubmissionResult.containsDefrags()) {\n    Log.i(TAG,\"Payment contains \" + paymentSubmissionResult.defrags().size() + \" defrags, main payment\"+ uuid);\n    RecipientId self=Recipient.self().getId();\n    MobileCoinPublicAddress selfAddress=wallet.getMobileCoinPublicAddress();\n    for (    TransactionSubmissionResult defrag : paymentSubmissionResult.defrags()) {\n      UUID defragUuid=UUID.randomUUID();\n      PaymentTransactionId.MobileCoin mobileCoinTransaction=(PaymentTransactionId.MobileCoin)defrag.getTransactionId();\n      paymentDatabase.createDefrag(defragUuid,self,selfAddress,timestamp - 1,mobileCoinTransaction.getFee(),mobileCoinTransaction.getTransaction(),mobileCoinTransaction.getReceipt());\n      Log.i(TAG,\"Defrag entered with id \" + defragUuid);\n      ApplicationDependencies.getJobManager().startChain(new PaymentTransactionCheckJob(defragUuid,QUEUE)).then(new MultiDeviceOutgoingPaymentSyncJob(defragUuid)).enqueue();\n    }\n    stopwatch.split(\"Defrag\");\n  }\n  TransactionSubmissionResult.ErrorCode errorCode=paymentSubmissionResult.getErrorCode();\nswitch (errorCode) {\ncase INSUFFICIENT_FUNDS:    paymentDatabase.markPaymentFailed(uuid,FailureReason.INSUFFICIENT_FUNDS);\n  throw new PaymentException(\"Payment failed due to \" + errorCode);\ncase GENERIC_FAILURE:paymentDatabase.markPaymentFailed(uuid,FailureReason.UNKNOWN);\nthrow new PaymentException(\"Payment failed due to \" + errorCode);\ncase NETWORK_FAILURE:paymentDatabase.markPaymentFailed(uuid,FailureReason.NETWORK);\nthrow new PaymentException(\"Payment failed due to \" + errorCode);\ncase NONE:Log.i(TAG,\"Payment submission complete\");\nTransactionSubmissionResult transactionSubmissionResult=Objects.requireNonNull(paymentSubmissionResult.getNonDefrag());\nPaymentTransactionId.MobileCoin mobileCoinTransaction=(PaymentTransactionId.MobileCoin)transactionSubmissionResult.getTransactionId();\npaymentDatabase.markPaymentSubmitted(uuid,mobileCoinTransaction.getTransaction(),mobileCoinTransaction.getReceipt(),mobileCoinTransaction.getFee());\nLog.i(TAG,\"Payment record updated \" + uuid);\nbreak;\n}\n}\n catch (Exception e) {\nLog.w(TAG,\"Unknown payment failure\",e);\npaymentDatabase.markPaymentFailed(uuid,FailureReason.UNKNOWN);\nthrow e;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 285,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4148,
        "startLineNumber" : 126,
        "startColumnNumber" : 42,
        "endLineNumber" : 207,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!Recipient.self().isRegistered()) {\n    throw new NotPushRegisteredException();\n  }\n  if (!SignalStore.paymentsValues().mobileCoinPaymentsEnabled()) {\n    Log.w(TAG,\"Payments are not enabled\");\n    return;\n  }\n  Stopwatch stopwatch=new Stopwatch(\"Payment submission\");\n  Wallet wallet=ApplicationDependencies.getPayments().getWallet();\n  PaymentDatabase paymentDatabase=DatabaseFactory.getPaymentDatabase(context);\n  paymentDatabase.createOutgoingPayment(uuid,recipientId,publicAddress,timestamp,note,amount);\n  Log.i(TAG,\"Payment record created \" + uuid);\n  stopwatch.split(\"Record created\");\n  try {\n    PaymentSubmissionResult paymentSubmissionResult=wallet.sendPayment(publicAddress,amount.requireMobileCoin(),totalFee.requireMobileCoin());\n    stopwatch.split(\"Payment submitted\");\n    if (paymentSubmissionResult.containsDefrags()) {\n      Log.i(TAG,\"Payment contains \" + paymentSubmissionResult.defrags().size() + \" defrags, main payment\"+ uuid);\n      RecipientId self=Recipient.self().getId();\n      MobileCoinPublicAddress selfAddress=wallet.getMobileCoinPublicAddress();\n      for (      TransactionSubmissionResult defrag : paymentSubmissionResult.defrags()) {\n        UUID defragUuid=UUID.randomUUID();\n        PaymentTransactionId.MobileCoin mobileCoinTransaction=(PaymentTransactionId.MobileCoin)defrag.getTransactionId();\n        paymentDatabase.createDefrag(defragUuid,self,selfAddress,timestamp - 1,mobileCoinTransaction.getFee(),mobileCoinTransaction.getTransaction(),mobileCoinTransaction.getReceipt());\n        Log.i(TAG,\"Defrag entered with id \" + defragUuid);\n        ApplicationDependencies.getJobManager().startChain(new PaymentTransactionCheckJob(defragUuid,QUEUE)).then(new MultiDeviceOutgoingPaymentSyncJob(defragUuid)).enqueue();\n      }\n      stopwatch.split(\"Defrag\");\n    }\n    TransactionSubmissionResult.ErrorCode errorCode=paymentSubmissionResult.getErrorCode();\nswitch (errorCode) {\ncase INSUFFICIENT_FUNDS:      paymentDatabase.markPaymentFailed(uuid,FailureReason.INSUFFICIENT_FUNDS);\n    throw new PaymentException(\"Payment failed due to \" + errorCode);\ncase GENERIC_FAILURE:  paymentDatabase.markPaymentFailed(uuid,FailureReason.UNKNOWN);\nthrow new PaymentException(\"Payment failed due to \" + errorCode);\ncase NETWORK_FAILURE:paymentDatabase.markPaymentFailed(uuid,FailureReason.NETWORK);\nthrow new PaymentException(\"Payment failed due to \" + errorCode);\ncase NONE:Log.i(TAG,\"Payment submission complete\");\nTransactionSubmissionResult transactionSubmissionResult=Objects.requireNonNull(paymentSubmissionResult.getNonDefrag());\nPaymentTransactionId.MobileCoin mobileCoinTransaction=(PaymentTransactionId.MobileCoin)transactionSubmissionResult.getTransactionId();\npaymentDatabase.markPaymentSubmitted(uuid,mobileCoinTransaction.getTransaction(),mobileCoinTransaction.getReceipt(),mobileCoinTransaction.getFee());\nLog.i(TAG,\"Payment record updated \" + uuid);\nbreak;\n}\n}\n catch (Exception e) {\nLog.w(TAG,\"Unknown payment failure\",e);\npaymentDatabase.markPaymentFailed(uuid,FailureReason.UNKNOWN);\nthrow e;\n}\nstopwatch.split(\"Update database record\");\nstopwatch.stop(TAG);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 374,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4200,
        "startLineNumber" : 125,
        "startColumnNumber" : 2,
        "endLineNumber" : 207,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override protected void onRun() throws Exception {\n  if (!Recipient.self().isRegistered()) {\n    throw new NotPushRegisteredException();\n  }\n  if (!SignalStore.paymentsValues().mobileCoinPaymentsEnabled()) {\n    Log.w(TAG,\"Payments are not enabled\");\n    return;\n  }\n  Stopwatch stopwatch=new Stopwatch(\"Payment submission\");\n  Wallet wallet=ApplicationDependencies.getPayments().getWallet();\n  PaymentDatabase paymentDatabase=DatabaseFactory.getPaymentDatabase(context);\n  paymentDatabase.createOutgoingPayment(uuid,recipientId,publicAddress,timestamp,note,amount);\n  Log.i(TAG,\"Payment record created \" + uuid);\n  stopwatch.split(\"Record created\");\n  try {\n    PaymentSubmissionResult paymentSubmissionResult=wallet.sendPayment(publicAddress,amount.requireMobileCoin(),totalFee.requireMobileCoin());\n    stopwatch.split(\"Payment submitted\");\n    if (paymentSubmissionResult.containsDefrags()) {\n      Log.i(TAG,\"Payment contains \" + paymentSubmissionResult.defrags().size() + \" defrags, main payment\"+ uuid);\n      RecipientId self=Recipient.self().getId();\n      MobileCoinPublicAddress selfAddress=wallet.getMobileCoinPublicAddress();\n      for (      TransactionSubmissionResult defrag : paymentSubmissionResult.defrags()) {\n        UUID defragUuid=UUID.randomUUID();\n        PaymentTransactionId.MobileCoin mobileCoinTransaction=(PaymentTransactionId.MobileCoin)defrag.getTransactionId();\n        paymentDatabase.createDefrag(defragUuid,self,selfAddress,timestamp - 1,mobileCoinTransaction.getFee(),mobileCoinTransaction.getTransaction(),mobileCoinTransaction.getReceipt());\n        Log.i(TAG,\"Defrag entered with id \" + defragUuid);\n        ApplicationDependencies.getJobManager().startChain(new PaymentTransactionCheckJob(defragUuid,QUEUE)).then(new MultiDeviceOutgoingPaymentSyncJob(defragUuid)).enqueue();\n      }\n      stopwatch.split(\"Defrag\");\n    }\n    TransactionSubmissionResult.ErrorCode errorCode=paymentSubmissionResult.getErrorCode();\nswitch (errorCode) {\ncase INSUFFICIENT_FUNDS:      paymentDatabase.markPaymentFailed(uuid,FailureReason.INSUFFICIENT_FUNDS);\n    throw new PaymentException(\"Payment failed due to \" + errorCode);\ncase GENERIC_FAILURE:  paymentDatabase.markPaymentFailed(uuid,FailureReason.UNKNOWN);\nthrow new PaymentException(\"Payment failed due to \" + errorCode);\ncase NETWORK_FAILURE:paymentDatabase.markPaymentFailed(uuid,FailureReason.NETWORK);\nthrow new PaymentException(\"Payment failed due to \" + errorCode);\ncase NONE:Log.i(TAG,\"Payment submission complete\");\nTransactionSubmissionResult transactionSubmissionResult=Objects.requireNonNull(paymentSubmissionResult.getNonDefrag());\nPaymentTransactionId.MobileCoin mobileCoinTransaction=(PaymentTransactionId.MobileCoin)transactionSubmissionResult.getTransactionId();\npaymentDatabase.markPaymentSubmitted(uuid,mobileCoinTransaction.getTransaction(),mobileCoinTransaction.getReceipt(),mobileCoinTransaction.getFee());\nLog.i(TAG,\"Payment record updated \" + uuid);\nbreak;\n}\n}\n catch (Exception e) {\nLog.w(TAG,\"Unknown payment failure\",e);\npaymentDatabase.markPaymentFailed(uuid,FailureReason.UNKNOWN);\nthrow e;\n}\nstopwatch.split(\"Update database record\");\nstopwatch.stop(TAG);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 382,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 155,
        "startColumnNumber" : 8,
        "endLineNumber" : 155,
        "endColumnNumber" : 117
      },
      "nodeContext" : "Log.i(TAG,\"Payment contains \" + paymentSubmissionResult.defrags().size() + \" defrags, main payment\"+ uuid);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 12,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 96,
    "startLineNumber" : 155,
    "startColumnNumber" : 19,
    "endLineNumber" : 155,
    "endColumnNumber" : 115
  } ],
  "layoutRelationDataList" : [ ]
}