{
  "id" : 416,
  "expression" : "allArguments",
  "projectName" : "apache@skywalking",
  "commitID" : "16b51d55baec4f779f312e07081d1397addbcfe9",
  "filePath" : "/apm-sniffer/apm-sdk-plugin/asynchttpclient-2.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/asynchttpclient/v2/ExecuteInterceptorTest.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "allArguments",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 95,
      "startColumnNumber" : 64,
      "endLineNumber" : 95,
      "endColumnNumber" : 76
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 95,
        "endColumnNumber" : 100
      },
      "nodeContext" : "executeInterceptor.beforeMethod(enhancedInstance,null,allArguments,argumentTypes,result)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 95,
        "endColumnNumber" : 101
      },
      "nodeContext" : "executeInterceptor.beforeMethod(enhancedInstance,null,allArguments,argumentTypes,result);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 777,
        "startLineNumber" : 92,
        "startColumnNumber" : 47,
        "endLineNumber" : 108,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ContextManager.createEntrySpan(\"mock-test\",new ContextCarrier());\n  executeInterceptor.beforeMethod(enhancedInstance,null,allArguments,argumentTypes,result);\n  executeInterceptor.afterMethod(enhancedInstance,null,allArguments,argumentTypes,null);\n  AsyncHandlerWrapper asyncHandlerWrapper=(AsyncHandlerWrapper)allArguments[1];\n  asyncHandlerWrapper.onCompleted();\n  ContextManager.stopSpan();\n  assertThat(segmentStorage.getTraceSegments().size(),is(1));\n  TraceSegment traceSegment=segmentStorage.getTraceSegments().get(0);\n  List<AbstractTracingSpan> spans=SegmentHelper.getSpans(traceSegment);\n  assertSpan(spans.get(0));\n  SpanAssert.assertOccurException(spans.get(0),false);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 96,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 830,
        "startLineNumber" : 91,
        "startColumnNumber" : 4,
        "endLineNumber" : 108,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSuccess() throws Throwable {\n  ContextManager.createEntrySpan(\"mock-test\",new ContextCarrier());\n  executeInterceptor.beforeMethod(enhancedInstance,null,allArguments,argumentTypes,result);\n  executeInterceptor.afterMethod(enhancedInstance,null,allArguments,argumentTypes,null);\n  AsyncHandlerWrapper asyncHandlerWrapper=(AsyncHandlerWrapper)allArguments[1];\n  asyncHandlerWrapper.onCompleted();\n  ContextManager.stopSpan();\n  assertThat(segmentStorage.getTraceSegments().size(),is(1));\n  TraceSegment traceSegment=segmentStorage.getTraceSegments().get(0);\n  List<AbstractTracingSpan> spans=SegmentHelper.getSpans(traceSegment);\n  assertSpan(spans.get(0));\n  SpanAssert.assertOccurException(spans.get(0),false);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 104,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 95,
        "startColumnNumber" : 8,
        "endLineNumber" : 95,
        "endColumnNumber" : 101
      },
      "nodeContext" : "executeInterceptor.beforeMethod(enhancedInstance,null,allArguments,argumentTypes,result);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object[]"
  }, {
    "nodeContext" : "allArguments",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 96,
      "startColumnNumber" : 63,
      "endLineNumber" : 96,
      "endColumnNumber" : 75
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 96,
        "startColumnNumber" : 8,
        "endLineNumber" : 96,
        "endColumnNumber" : 97
      },
      "nodeContext" : "executeInterceptor.afterMethod(enhancedInstance,null,allArguments,argumentTypes,null)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 96,
        "startColumnNumber" : 8,
        "endLineNumber" : 96,
        "endColumnNumber" : 98
      },
      "nodeContext" : "executeInterceptor.afterMethod(enhancedInstance,null,allArguments,argumentTypes,null);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 777,
        "startLineNumber" : 92,
        "startColumnNumber" : 47,
        "endLineNumber" : 108,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ContextManager.createEntrySpan(\"mock-test\",new ContextCarrier());\n  executeInterceptor.beforeMethod(enhancedInstance,null,allArguments,argumentTypes,result);\n  executeInterceptor.afterMethod(enhancedInstance,null,allArguments,argumentTypes,null);\n  AsyncHandlerWrapper asyncHandlerWrapper=(AsyncHandlerWrapper)allArguments[1];\n  asyncHandlerWrapper.onCompleted();\n  ContextManager.stopSpan();\n  assertThat(segmentStorage.getTraceSegments().size(),is(1));\n  TraceSegment traceSegment=segmentStorage.getTraceSegments().get(0);\n  List<AbstractTracingSpan> spans=SegmentHelper.getSpans(traceSegment);\n  assertSpan(spans.get(0));\n  SpanAssert.assertOccurException(spans.get(0),false);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 96,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 830,
        "startLineNumber" : 91,
        "startColumnNumber" : 4,
        "endLineNumber" : 108,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSuccess() throws Throwable {\n  ContextManager.createEntrySpan(\"mock-test\",new ContextCarrier());\n  executeInterceptor.beforeMethod(enhancedInstance,null,allArguments,argumentTypes,result);\n  executeInterceptor.afterMethod(enhancedInstance,null,allArguments,argumentTypes,null);\n  AsyncHandlerWrapper asyncHandlerWrapper=(AsyncHandlerWrapper)allArguments[1];\n  asyncHandlerWrapper.onCompleted();\n  ContextManager.stopSpan();\n  assertThat(segmentStorage.getTraceSegments().size(),is(1));\n  TraceSegment traceSegment=segmentStorage.getTraceSegments().get(0);\n  List<AbstractTracingSpan> spans=SegmentHelper.getSpans(traceSegment);\n  assertSpan(spans.get(0));\n  SpanAssert.assertOccurException(spans.get(0),false);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 104,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 96,
        "startColumnNumber" : 8,
        "endLineNumber" : 96,
        "endColumnNumber" : 98
      },
      "nodeContext" : "executeInterceptor.afterMethod(enhancedInstance,null,allArguments,argumentTypes,null);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object[]"
  }, {
    "nodeContext" : "allArguments",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 98,
      "startColumnNumber" : 72,
      "endLineNumber" : 98,
      "endColumnNumber" : 84
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 98,
        "startColumnNumber" : 72,
        "endLineNumber" : 98,
        "endColumnNumber" : 87
      },
      "nodeContext" : "allArguments[1]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 98,
        "startColumnNumber" : 50,
        "endLineNumber" : 98,
        "endColumnNumber" : 87
      },
      "nodeContext" : "(AsyncHandlerWrapper)allArguments[1]",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 98,
        "startColumnNumber" : 28,
        "endLineNumber" : 98,
        "endColumnNumber" : 87
      },
      "nodeContext" : "asyncHandlerWrapper=(AsyncHandlerWrapper)allArguments[1]",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 98,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 88
      },
      "nodeContext" : "AsyncHandlerWrapper asyncHandlerWrapper=(AsyncHandlerWrapper)allArguments[1];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 777,
        "startLineNumber" : 92,
        "startColumnNumber" : 47,
        "endLineNumber" : 108,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ContextManager.createEntrySpan(\"mock-test\",new ContextCarrier());\n  executeInterceptor.beforeMethod(enhancedInstance,null,allArguments,argumentTypes,result);\n  executeInterceptor.afterMethod(enhancedInstance,null,allArguments,argumentTypes,null);\n  AsyncHandlerWrapper asyncHandlerWrapper=(AsyncHandlerWrapper)allArguments[1];\n  asyncHandlerWrapper.onCompleted();\n  ContextManager.stopSpan();\n  assertThat(segmentStorage.getTraceSegments().size(),is(1));\n  TraceSegment traceSegment=segmentStorage.getTraceSegments().get(0);\n  List<AbstractTracingSpan> spans=SegmentHelper.getSpans(traceSegment);\n  assertSpan(spans.get(0));\n  SpanAssert.assertOccurException(spans.get(0),false);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 96,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 830,
        "startLineNumber" : 91,
        "startColumnNumber" : 4,
        "endLineNumber" : 108,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSuccess() throws Throwable {\n  ContextManager.createEntrySpan(\"mock-test\",new ContextCarrier());\n  executeInterceptor.beforeMethod(enhancedInstance,null,allArguments,argumentTypes,result);\n  executeInterceptor.afterMethod(enhancedInstance,null,allArguments,argumentTypes,null);\n  AsyncHandlerWrapper asyncHandlerWrapper=(AsyncHandlerWrapper)allArguments[1];\n  asyncHandlerWrapper.onCompleted();\n  ContextManager.stopSpan();\n  assertThat(segmentStorage.getTraceSegments().size(),is(1));\n  TraceSegment traceSegment=segmentStorage.getTraceSegments().get(0);\n  List<AbstractTracingSpan> spans=SegmentHelper.getSpans(traceSegment);\n  assertSpan(spans.get(0));\n  SpanAssert.assertOccurException(spans.get(0),false);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 104,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 98,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 88
      },
      "nodeContext" : "AsyncHandlerWrapper asyncHandlerWrapper=(AsyncHandlerWrapper)allArguments[1];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object[]"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 95,
    "startColumnNumber" : 64,
    "endLineNumber" : 95,
    "endColumnNumber" : 76
  }, {
    "charLength" : 12,
    "startLineNumber" : 96,
    "startColumnNumber" : 63,
    "endLineNumber" : 96,
    "endColumnNumber" : 75
  }, {
    "charLength" : 12,
    "startLineNumber" : 98,
    "startColumnNumber" : 72,
    "endLineNumber" : 98,
    "endColumnNumber" : 84
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  } ]
}