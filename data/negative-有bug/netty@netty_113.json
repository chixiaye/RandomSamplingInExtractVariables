{
  "id" : 113,
  "expression" : "insertRandomCharacters(key2)",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker00.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "insertRandomCharacters(key2)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 28,
      "startLineNumber" : 156,
      "startColumnNumber" : 15,
      "endLineNumber" : 156,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 156,
        "startColumnNumber" : 8,
        "endLineNumber" : 156,
        "endColumnNumber" : 43
      },
      "nodeContext" : "key2=insertRandomCharacters(key2)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 156,
        "startColumnNumber" : 8,
        "endLineNumber" : 156,
        "endColumnNumber" : 44
      },
      "nodeContext" : "key2=insertRandomCharacters(key2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2759,
        "startLineNumber" : 138,
        "startColumnNumber" : 52,
        "endLineNumber" : 206,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int spaces1=ThreadLocalRandom.current().nextInt(1,13);\n  int spaces2=ThreadLocalRandom.current().nextInt(1,13);\n  int max1=Integer.MAX_VALUE / spaces1;\n  int max2=Integer.MAX_VALUE / spaces2;\n  int number1=ThreadLocalRandom.current().nextInt(0,max1);\n  int number2=ThreadLocalRandom.current().nextInt(0,max2);\n  int product1=number1 * spaces1;\n  int product2=number2 * spaces2;\n  String key1=Integer.toString(product1);\n  String key2=Integer.toString(product2);\n  key1=insertRandomCharacters(key1);\n  key2=insertRandomCharacters(key2);\n  key1=insertSpaces(key1,spaces1);\n  key2=insertSpaces(key2,spaces2);\n  byte[] key3=WebSocketUtil.randomBytes(8);\n  ByteBuffer buffer=ByteBuffer.allocate(4);\n  buffer.putInt(number1);\n  byte[] number1Array=buffer.array();\n  buffer=ByteBuffer.allocate(4);\n  buffer.putInt(number2);\n  byte[] number2Array=buffer.array();\n  byte[] challenge=new byte[16];\n  System.arraycopy(number1Array,0,challenge,0,4);\n  System.arraycopy(number2Array,0,challenge,4,4);\n  System.arraycopy(key3,0,challenge,8,8);\n  expectedChallengeResponseBytes=Unpooled.wrappedBuffer(WebSocketUtil.md5(challenge));\n  URI wsURL=uri();\n  FullHttpRequest request=new DefaultFullHttpRequest(HttpVersion.HTTP_1_1,HttpMethod.GET,upgradeUrl(wsURL),Unpooled.wrappedBuffer(key3));\n  HttpHeaders headers=request.headers();\n  if (customHeaders != null) {\n    headers.add(customHeaders);\n  }\n  headers.set(HttpHeaderNames.UPGRADE,HttpHeaderValues.WEBSOCKET).set(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE).set(HttpHeaderNames.HOST,websocketHostValue(wsURL)).set(HttpHeaderNames.SEC_WEBSOCKET_KEY1,key1).set(HttpHeaderNames.SEC_WEBSOCKET_KEY2,key2);\n  if (!headers.contains(HttpHeaderNames.ORIGIN)) {\n    headers.set(HttpHeaderNames.ORIGIN,websocketOriginValue(wsURL));\n  }\n  String expectedSubprotocol=expectedSubprotocol();\n  if (expectedSubprotocol != null && !expectedSubprotocol.isEmpty()) {\n    headers.set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,expectedSubprotocol);\n  }\n  headers.set(HttpHeaderNames.CONTENT_LENGTH,key3.length);\n  return request;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 363,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3223,
        "startLineNumber" : 119,
        "startColumnNumber" : 4,
        "endLineNumber" : 206,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * <p> Sends the opening request to the server: </p> <pre> GET /demo HTTP/1.1 Upgrade: WebSocket Connection: Upgrade Host: example.com Origin: http://example.com Sec-WebSocket-Key1: 4 @1  46546xW%0l 1 5 Sec-WebSocket-Key2: 12998 5 Y3 1  .P00 ^n:ds[4U </pre>\n */\n@Override protected FullHttpRequest newHandshakeRequest(){\n  int spaces1=ThreadLocalRandom.current().nextInt(1,13);\n  int spaces2=ThreadLocalRandom.current().nextInt(1,13);\n  int max1=Integer.MAX_VALUE / spaces1;\n  int max2=Integer.MAX_VALUE / spaces2;\n  int number1=ThreadLocalRandom.current().nextInt(0,max1);\n  int number2=ThreadLocalRandom.current().nextInt(0,max2);\n  int product1=number1 * spaces1;\n  int product2=number2 * spaces2;\n  String key1=Integer.toString(product1);\n  String key2=Integer.toString(product2);\n  key1=insertRandomCharacters(key1);\n  key2=insertRandomCharacters(key2);\n  key1=insertSpaces(key1,spaces1);\n  key2=insertSpaces(key2,spaces2);\n  byte[] key3=WebSocketUtil.randomBytes(8);\n  ByteBuffer buffer=ByteBuffer.allocate(4);\n  buffer.putInt(number1);\n  byte[] number1Array=buffer.array();\n  buffer=ByteBuffer.allocate(4);\n  buffer.putInt(number2);\n  byte[] number2Array=buffer.array();\n  byte[] challenge=new byte[16];\n  System.arraycopy(number1Array,0,challenge,0,4);\n  System.arraycopy(number2Array,0,challenge,4,4);\n  System.arraycopy(key3,0,challenge,8,8);\n  expectedChallengeResponseBytes=Unpooled.wrappedBuffer(WebSocketUtil.md5(challenge));\n  URI wsURL=uri();\n  FullHttpRequest request=new DefaultFullHttpRequest(HttpVersion.HTTP_1_1,HttpMethod.GET,upgradeUrl(wsURL),Unpooled.wrappedBuffer(key3));\n  HttpHeaders headers=request.headers();\n  if (customHeaders != null) {\n    headers.add(customHeaders);\n  }\n  headers.set(HttpHeaderNames.UPGRADE,HttpHeaderValues.WEBSOCKET).set(HttpHeaderNames.CONNECTION,HttpHeaderValues.UPGRADE).set(HttpHeaderNames.HOST,websocketHostValue(wsURL)).set(HttpHeaderNames.SEC_WEBSOCKET_KEY1,key1).set(HttpHeaderNames.SEC_WEBSOCKET_KEY2,key2);\n  if (!headers.contains(HttpHeaderNames.ORIGIN)) {\n    headers.set(HttpHeaderNames.ORIGIN,websocketOriginValue(wsURL));\n  }\n  String expectedSubprotocol=expectedSubprotocol();\n  if (expectedSubprotocol != null && !expectedSubprotocol.isEmpty()) {\n    headers.set(HttpHeaderNames.SEC_WEBSOCKET_PROTOCOL,expectedSubprotocol);\n  }\n  headers.set(HttpHeaderNames.CONTENT_LENGTH,key3.length);\n  return request;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 371,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 156,
        "startColumnNumber" : 8,
        "endLineNumber" : 156,
        "endColumnNumber" : 44
      },
      "nodeContext" : "key2=insertRandomCharacters(key2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 28,
    "startLineNumber" : 156,
    "startColumnNumber" : 15,
    "endLineNumber" : 156,
    "endColumnNumber" : 43
  } ],
  "layoutRelationDataList" : [ ]
}