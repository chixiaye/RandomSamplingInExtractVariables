{
  "id" : 301,
  "expression" : "e",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/java_tools/import_deps_checker/java/com/google/devtools/build/importdeps/ClassCache.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "e",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 195,
      "startColumnNumber" : 84,
      "endLineNumber" : 195,
      "endColumnNumber" : 85
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 195,
        "startColumnNumber" : 14,
        "endLineNumber" : 195,
        "endColumnNumber" : 86
      },
      "nodeContext" : "new RuntimeException(\"Error when resolving class entry \" + entryName,e)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 195,
        "startColumnNumber" : 8,
        "endLineNumber" : 195,
        "endColumnNumber" : 87
      },
      "nodeContext" : "throw new RuntimeException(\"Error when resolving class entry \" + entryName,e);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 194,
        "startColumnNumber" : 30,
        "endLineNumber" : 196,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  throw new RuntimeException(\"Error when resolving class entry \" + entryName,e);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 119,
        "startLineNumber" : 194,
        "startColumnNumber" : 8,
        "endLineNumber" : 196,
        "endColumnNumber" : 7
      },
      "nodeContext" : "catch (IOException e) {\n  throw new RuntimeException(\"Error when resolving class entry \" + entryName,e);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2314,
        "startLineNumber" : 158,
        "startColumnNumber" : 6,
        "endLineNumber" : 202,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try (InputStream inputStream=classEntry.zipFile.getInputStream(zipEntry)){\n  ClassReader classReader=new ClassReader(inputStream);\n  ImmutableList.Builder<ResolutionFailureChain> resolutionFailureChainsBuilder=ImmutableList.builder();\n  for (  String superName : combineWithoutNull(classReader.getSuperName(),classReader.getInterfaces())) {\n    Optional<ResolutionFailureChain> failurePath=resolveSuperClassEntry(superName,lazyClasspath);\n    failurePath.ifPresent(resolutionFailureChainsBuilder::add);\n  }\n  ClassInfoBuilder classInfoBuilder=new ClassInfoBuilder().setJarPath(classEntry.jarPath).setDirect(classEntry.isDirectDep);\n  if (lazyClasspath.populateMembers) {\n    classReader.accept(classInfoBuilder,ClassReader.SKIP_CODE | ClassReader.SKIP_DEBUG | ClassReader.SKIP_FRAMES);\n  }\n else {\n    classInfoBuilder.setNames(classReader.getClassName(),classReader.getSuperName(),classReader.getInterfaces());\n  }\n  ImmutableList<ResolutionFailureChain> resolutionFailureChains=resolutionFailureChainsBuilder.build();\n  if (resolutionFailureChains.isEmpty()) {\n    classEntry.state=ExistingState.create(classInfoBuilder.build(lazyClasspath,false),explicitUse);\n  }\n else {\n    ClassInfo classInfo=classInfoBuilder.build(lazyClasspath,true);\n    classEntry.state=IncompleteState.create(classInfo,ResolutionFailureChain.createWithParent(classInfo,resolutionFailureChains));\n  }\n}\n catch (IOException e) {\n  throw new RuntimeException(\"Error when resolving class entry \" + entryName,e);\n}\ncatch (RuntimeException e) {\n  System.err.println(\"A runtime exception occurred. The following is the content in the class index. \" + e.getMessage());\n  lazyClasspath.printClasspath(System.err);\n  throw e;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 215,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3022,
        "startLineNumber" : 141,
        "startColumnNumber" : 85,
        "endLineNumber" : 203,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (classEntry.state != null) {\n    if (classEntry.state instanceof ExistingState) {\n      ExistingState state=(ExistingState)classEntry.state;\n      if (!state.direct() && explicitUse) {\n        classEntry.state=ExistingState.create(state.classInfo().get(),explicitUse);\n      }\n    }\n    return;\n  }\n  String entryName=classEntry.internalName + \".class\";\n  ZipEntry zipEntry=checkNotNull(classEntry.zipFile.getEntry(entryName),\"The zip entry %s is null.\",entryName);\n  try (InputStream inputStream=classEntry.zipFile.getInputStream(zipEntry)){\n    ClassReader classReader=new ClassReader(inputStream);\n    ImmutableList.Builder<ResolutionFailureChain> resolutionFailureChainsBuilder=ImmutableList.builder();\n    for (    String superName : combineWithoutNull(classReader.getSuperName(),classReader.getInterfaces())) {\n      Optional<ResolutionFailureChain> failurePath=resolveSuperClassEntry(superName,lazyClasspath);\n      failurePath.ifPresent(resolutionFailureChainsBuilder::add);\n    }\n    ClassInfoBuilder classInfoBuilder=new ClassInfoBuilder().setJarPath(classEntry.jarPath).setDirect(classEntry.isDirectDep);\n    if (lazyClasspath.populateMembers) {\n      classReader.accept(classInfoBuilder,ClassReader.SKIP_CODE | ClassReader.SKIP_DEBUG | ClassReader.SKIP_FRAMES);\n    }\n else {\n      classInfoBuilder.setNames(classReader.getClassName(),classReader.getSuperName(),classReader.getInterfaces());\n    }\n    ImmutableList<ResolutionFailureChain> resolutionFailureChains=resolutionFailureChainsBuilder.build();\n    if (resolutionFailureChains.isEmpty()) {\n      classEntry.state=ExistingState.create(classInfoBuilder.build(lazyClasspath,false),explicitUse);\n    }\n else {\n      ClassInfo classInfo=classInfoBuilder.build(lazyClasspath,true);\n      classEntry.state=IncompleteState.create(classInfo,ResolutionFailureChain.createWithParent(classInfo,resolutionFailureChains));\n    }\n  }\n catch (  IOException e) {\n    throw new RuntimeException(\"Error when resolving class entry \" + entryName,e);\n  }\ncatch (  RuntimeException e) {\n    System.err.println(\"A runtime exception occurred. The following is the content in the class index. \" + e.getMessage());\n    lazyClasspath.printClasspath(System.err);\n    throw e;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 290,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3146,
        "startLineNumber" : 140,
        "startColumnNumber" : 4,
        "endLineNumber" : 203,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private static void resolveClassEntry(LazyClassEntry classEntry,LazyClasspath lazyClasspath,boolean explicitUse){\n  if (classEntry.state != null) {\n    if (classEntry.state instanceof ExistingState) {\n      ExistingState state=(ExistingState)classEntry.state;\n      if (!state.direct() && explicitUse) {\n        classEntry.state=ExistingState.create(state.classInfo().get(),explicitUse);\n      }\n    }\n    return;\n  }\n  String entryName=classEntry.internalName + \".class\";\n  ZipEntry zipEntry=checkNotNull(classEntry.zipFile.getEntry(entryName),\"The zip entry %s is null.\",entryName);\n  try (InputStream inputStream=classEntry.zipFile.getInputStream(zipEntry)){\n    ClassReader classReader=new ClassReader(inputStream);\n    ImmutableList.Builder<ResolutionFailureChain> resolutionFailureChainsBuilder=ImmutableList.builder();\n    for (    String superName : combineWithoutNull(classReader.getSuperName(),classReader.getInterfaces())) {\n      Optional<ResolutionFailureChain> failurePath=resolveSuperClassEntry(superName,lazyClasspath);\n      failurePath.ifPresent(resolutionFailureChainsBuilder::add);\n    }\n    ClassInfoBuilder classInfoBuilder=new ClassInfoBuilder().setJarPath(classEntry.jarPath).setDirect(classEntry.isDirectDep);\n    if (lazyClasspath.populateMembers) {\n      classReader.accept(classInfoBuilder,ClassReader.SKIP_CODE | ClassReader.SKIP_DEBUG | ClassReader.SKIP_FRAMES);\n    }\n else {\n      classInfoBuilder.setNames(classReader.getClassName(),classReader.getSuperName(),classReader.getInterfaces());\n    }\n    ImmutableList<ResolutionFailureChain> resolutionFailureChains=resolutionFailureChainsBuilder.build();\n    if (resolutionFailureChains.isEmpty()) {\n      classEntry.state=ExistingState.create(classInfoBuilder.build(lazyClasspath,false),explicitUse);\n    }\n else {\n      ClassInfo classInfo=classInfoBuilder.build(lazyClasspath,true);\n      classEntry.state=IncompleteState.create(classInfo,ResolutionFailureChain.createWithParent(classInfo,resolutionFailureChains));\n    }\n  }\n catch (  IOException e) {\n    throw new RuntimeException(\"Error when resolving class entry \" + entryName,e);\n  }\ncatch (  RuntimeException e) {\n    System.err.println(\"A runtime exception occurred. The following is the content in the class index. \" + e.getMessage());\n    lazyClasspath.printClasspath(System.err);\n    throw e;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 306,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 195,
        "startColumnNumber" : 8,
        "endLineNumber" : 195,
        "endColumnNumber" : 87
      },
      "nodeContext" : "throw new RuntimeException(\"Error when resolving class entry \" + entryName,e);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.io.IOException"
  }, {
    "nodeContext" : "e",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 199,
      "startColumnNumber" : 18,
      "endLineNumber" : 199,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 199,
        "startColumnNumber" : 18,
        "endLineNumber" : 199,
        "endColumnNumber" : 32
      },
      "nodeContext" : "e.getMessage()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 198,
        "startColumnNumber" : 12,
        "endLineNumber" : 199,
        "endColumnNumber" : 32
      },
      "nodeContext" : "\"A runtime exception occurred. The following is the content in the class index. \" + e.getMessage()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 147,
        "startLineNumber" : 197,
        "startColumnNumber" : 8,
        "endLineNumber" : 199,
        "endColumnNumber" : 33
      },
      "nodeContext" : "System.err.println(\"A runtime exception occurred. The following is the content in the class index. \" + e.getMessage())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 148,
        "startLineNumber" : 197,
        "startColumnNumber" : 8,
        "endLineNumber" : 199,
        "endColumnNumber" : 34
      },
      "nodeContext" : "System.err.println(\"A runtime exception occurred. The following is the content in the class index. \" + e.getMessage());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 233,
        "startLineNumber" : 196,
        "startColumnNumber" : 35,
        "endLineNumber" : 202,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  System.err.println(\"A runtime exception occurred. The following is the content in the class index. \" + e.getMessage());\n  lazyClasspath.printClasspath(System.err);\n  throw e;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 260,
        "startLineNumber" : 196,
        "startColumnNumber" : 8,
        "endLineNumber" : 202,
        "endColumnNumber" : 7
      },
      "nodeContext" : "catch (RuntimeException e) {\n  System.err.println(\"A runtime exception occurred. The following is the content in the class index. \" + e.getMessage());\n  lazyClasspath.printClasspath(System.err);\n  throw e;\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 26,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2314,
        "startLineNumber" : 158,
        "startColumnNumber" : 6,
        "endLineNumber" : 202,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try (InputStream inputStream=classEntry.zipFile.getInputStream(zipEntry)){\n  ClassReader classReader=new ClassReader(inputStream);\n  ImmutableList.Builder<ResolutionFailureChain> resolutionFailureChainsBuilder=ImmutableList.builder();\n  for (  String superName : combineWithoutNull(classReader.getSuperName(),classReader.getInterfaces())) {\n    Optional<ResolutionFailureChain> failurePath=resolveSuperClassEntry(superName,lazyClasspath);\n    failurePath.ifPresent(resolutionFailureChainsBuilder::add);\n  }\n  ClassInfoBuilder classInfoBuilder=new ClassInfoBuilder().setJarPath(classEntry.jarPath).setDirect(classEntry.isDirectDep);\n  if (lazyClasspath.populateMembers) {\n    classReader.accept(classInfoBuilder,ClassReader.SKIP_CODE | ClassReader.SKIP_DEBUG | ClassReader.SKIP_FRAMES);\n  }\n else {\n    classInfoBuilder.setNames(classReader.getClassName(),classReader.getSuperName(),classReader.getInterfaces());\n  }\n  ImmutableList<ResolutionFailureChain> resolutionFailureChains=resolutionFailureChainsBuilder.build();\n  if (resolutionFailureChains.isEmpty()) {\n    classEntry.state=ExistingState.create(classInfoBuilder.build(lazyClasspath,false),explicitUse);\n  }\n else {\n    ClassInfo classInfo=classInfoBuilder.build(lazyClasspath,true);\n    classEntry.state=IncompleteState.create(classInfo,ResolutionFailureChain.createWithParent(classInfo,resolutionFailureChains));\n  }\n}\n catch (IOException e) {\n  throw new RuntimeException(\"Error when resolving class entry \" + entryName,e);\n}\ncatch (RuntimeException e) {\n  System.err.println(\"A runtime exception occurred. The following is the content in the class index. \" + e.getMessage());\n  lazyClasspath.printClasspath(System.err);\n  throw e;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 215,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3022,
        "startLineNumber" : 141,
        "startColumnNumber" : 85,
        "endLineNumber" : 203,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (classEntry.state != null) {\n    if (classEntry.state instanceof ExistingState) {\n      ExistingState state=(ExistingState)classEntry.state;\n      if (!state.direct() && explicitUse) {\n        classEntry.state=ExistingState.create(state.classInfo().get(),explicitUse);\n      }\n    }\n    return;\n  }\n  String entryName=classEntry.internalName + \".class\";\n  ZipEntry zipEntry=checkNotNull(classEntry.zipFile.getEntry(entryName),\"The zip entry %s is null.\",entryName);\n  try (InputStream inputStream=classEntry.zipFile.getInputStream(zipEntry)){\n    ClassReader classReader=new ClassReader(inputStream);\n    ImmutableList.Builder<ResolutionFailureChain> resolutionFailureChainsBuilder=ImmutableList.builder();\n    for (    String superName : combineWithoutNull(classReader.getSuperName(),classReader.getInterfaces())) {\n      Optional<ResolutionFailureChain> failurePath=resolveSuperClassEntry(superName,lazyClasspath);\n      failurePath.ifPresent(resolutionFailureChainsBuilder::add);\n    }\n    ClassInfoBuilder classInfoBuilder=new ClassInfoBuilder().setJarPath(classEntry.jarPath).setDirect(classEntry.isDirectDep);\n    if (lazyClasspath.populateMembers) {\n      classReader.accept(classInfoBuilder,ClassReader.SKIP_CODE | ClassReader.SKIP_DEBUG | ClassReader.SKIP_FRAMES);\n    }\n else {\n      classInfoBuilder.setNames(classReader.getClassName(),classReader.getSuperName(),classReader.getInterfaces());\n    }\n    ImmutableList<ResolutionFailureChain> resolutionFailureChains=resolutionFailureChainsBuilder.build();\n    if (resolutionFailureChains.isEmpty()) {\n      classEntry.state=ExistingState.create(classInfoBuilder.build(lazyClasspath,false),explicitUse);\n    }\n else {\n      ClassInfo classInfo=classInfoBuilder.build(lazyClasspath,true);\n      classEntry.state=IncompleteState.create(classInfo,ResolutionFailureChain.createWithParent(classInfo,resolutionFailureChains));\n    }\n  }\n catch (  IOException e) {\n    throw new RuntimeException(\"Error when resolving class entry \" + entryName,e);\n  }\ncatch (  RuntimeException e) {\n    System.err.println(\"A runtime exception occurred. The following is the content in the class index. \" + e.getMessage());\n    lazyClasspath.printClasspath(System.err);\n    throw e;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 290,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3146,
        "startLineNumber" : 140,
        "startColumnNumber" : 4,
        "endLineNumber" : 203,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private static void resolveClassEntry(LazyClassEntry classEntry,LazyClasspath lazyClasspath,boolean explicitUse){\n  if (classEntry.state != null) {\n    if (classEntry.state instanceof ExistingState) {\n      ExistingState state=(ExistingState)classEntry.state;\n      if (!state.direct() && explicitUse) {\n        classEntry.state=ExistingState.create(state.classInfo().get(),explicitUse);\n      }\n    }\n    return;\n  }\n  String entryName=classEntry.internalName + \".class\";\n  ZipEntry zipEntry=checkNotNull(classEntry.zipFile.getEntry(entryName),\"The zip entry %s is null.\",entryName);\n  try (InputStream inputStream=classEntry.zipFile.getInputStream(zipEntry)){\n    ClassReader classReader=new ClassReader(inputStream);\n    ImmutableList.Builder<ResolutionFailureChain> resolutionFailureChainsBuilder=ImmutableList.builder();\n    for (    String superName : combineWithoutNull(classReader.getSuperName(),classReader.getInterfaces())) {\n      Optional<ResolutionFailureChain> failurePath=resolveSuperClassEntry(superName,lazyClasspath);\n      failurePath.ifPresent(resolutionFailureChainsBuilder::add);\n    }\n    ClassInfoBuilder classInfoBuilder=new ClassInfoBuilder().setJarPath(classEntry.jarPath).setDirect(classEntry.isDirectDep);\n    if (lazyClasspath.populateMembers) {\n      classReader.accept(classInfoBuilder,ClassReader.SKIP_CODE | ClassReader.SKIP_DEBUG | ClassReader.SKIP_FRAMES);\n    }\n else {\n      classInfoBuilder.setNames(classReader.getClassName(),classReader.getSuperName(),classReader.getInterfaces());\n    }\n    ImmutableList<ResolutionFailureChain> resolutionFailureChains=resolutionFailureChainsBuilder.build();\n    if (resolutionFailureChains.isEmpty()) {\n      classEntry.state=ExistingState.create(classInfoBuilder.build(lazyClasspath,false),explicitUse);\n    }\n else {\n      ClassInfo classInfo=classInfoBuilder.build(lazyClasspath,true);\n      classEntry.state=IncompleteState.create(classInfo,ResolutionFailureChain.createWithParent(classInfo,resolutionFailureChains));\n    }\n  }\n catch (  IOException e) {\n    throw new RuntimeException(\"Error when resolving class entry \" + entryName,e);\n  }\ncatch (  RuntimeException e) {\n    System.err.println(\"A runtime exception occurred. The following is the content in the class index. \" + e.getMessage());\n    lazyClasspath.printClasspath(System.err);\n    throw e;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 306,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 199,
        "startColumnNumber" : 18,
        "endLineNumber" : 199,
        "endColumnNumber" : 32
      },
      "nodeContext" : "e.getMessage()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.lang.RuntimeException"
  }, {
    "nodeContext" : "e",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 201,
      "startColumnNumber" : 14,
      "endLineNumber" : 201,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 201,
        "startColumnNumber" : 8,
        "endLineNumber" : 201,
        "endColumnNumber" : 16
      },
      "nodeContext" : "throw e;\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 233,
        "startLineNumber" : 196,
        "startColumnNumber" : 35,
        "endLineNumber" : 202,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  System.err.println(\"A runtime exception occurred. The following is the content in the class index. \" + e.getMessage());\n  lazyClasspath.printClasspath(System.err);\n  throw e;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 260,
        "startLineNumber" : 196,
        "startColumnNumber" : 8,
        "endLineNumber" : 202,
        "endColumnNumber" : 7
      },
      "nodeContext" : "catch (RuntimeException e) {\n  System.err.println(\"A runtime exception occurred. The following is the content in the class index. \" + e.getMessage());\n  lazyClasspath.printClasspath(System.err);\n  throw e;\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 26,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2314,
        "startLineNumber" : 158,
        "startColumnNumber" : 6,
        "endLineNumber" : 202,
        "endColumnNumber" : 7
      },
      "nodeContext" : "try (InputStream inputStream=classEntry.zipFile.getInputStream(zipEntry)){\n  ClassReader classReader=new ClassReader(inputStream);\n  ImmutableList.Builder<ResolutionFailureChain> resolutionFailureChainsBuilder=ImmutableList.builder();\n  for (  String superName : combineWithoutNull(classReader.getSuperName(),classReader.getInterfaces())) {\n    Optional<ResolutionFailureChain> failurePath=resolveSuperClassEntry(superName,lazyClasspath);\n    failurePath.ifPresent(resolutionFailureChainsBuilder::add);\n  }\n  ClassInfoBuilder classInfoBuilder=new ClassInfoBuilder().setJarPath(classEntry.jarPath).setDirect(classEntry.isDirectDep);\n  if (lazyClasspath.populateMembers) {\n    classReader.accept(classInfoBuilder,ClassReader.SKIP_CODE | ClassReader.SKIP_DEBUG | ClassReader.SKIP_FRAMES);\n  }\n else {\n    classInfoBuilder.setNames(classReader.getClassName(),classReader.getSuperName(),classReader.getInterfaces());\n  }\n  ImmutableList<ResolutionFailureChain> resolutionFailureChains=resolutionFailureChainsBuilder.build();\n  if (resolutionFailureChains.isEmpty()) {\n    classEntry.state=ExistingState.create(classInfoBuilder.build(lazyClasspath,false),explicitUse);\n  }\n else {\n    ClassInfo classInfo=classInfoBuilder.build(lazyClasspath,true);\n    classEntry.state=IncompleteState.create(classInfo,ResolutionFailureChain.createWithParent(classInfo,resolutionFailureChains));\n  }\n}\n catch (IOException e) {\n  throw new RuntimeException(\"Error when resolving class entry \" + entryName,e);\n}\ncatch (RuntimeException e) {\n  System.err.println(\"A runtime exception occurred. The following is the content in the class index. \" + e.getMessage());\n  lazyClasspath.printClasspath(System.err);\n  throw e;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 215,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3022,
        "startLineNumber" : 141,
        "startColumnNumber" : 85,
        "endLineNumber" : 203,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (classEntry.state != null) {\n    if (classEntry.state instanceof ExistingState) {\n      ExistingState state=(ExistingState)classEntry.state;\n      if (!state.direct() && explicitUse) {\n        classEntry.state=ExistingState.create(state.classInfo().get(),explicitUse);\n      }\n    }\n    return;\n  }\n  String entryName=classEntry.internalName + \".class\";\n  ZipEntry zipEntry=checkNotNull(classEntry.zipFile.getEntry(entryName),\"The zip entry %s is null.\",entryName);\n  try (InputStream inputStream=classEntry.zipFile.getInputStream(zipEntry)){\n    ClassReader classReader=new ClassReader(inputStream);\n    ImmutableList.Builder<ResolutionFailureChain> resolutionFailureChainsBuilder=ImmutableList.builder();\n    for (    String superName : combineWithoutNull(classReader.getSuperName(),classReader.getInterfaces())) {\n      Optional<ResolutionFailureChain> failurePath=resolveSuperClassEntry(superName,lazyClasspath);\n      failurePath.ifPresent(resolutionFailureChainsBuilder::add);\n    }\n    ClassInfoBuilder classInfoBuilder=new ClassInfoBuilder().setJarPath(classEntry.jarPath).setDirect(classEntry.isDirectDep);\n    if (lazyClasspath.populateMembers) {\n      classReader.accept(classInfoBuilder,ClassReader.SKIP_CODE | ClassReader.SKIP_DEBUG | ClassReader.SKIP_FRAMES);\n    }\n else {\n      classInfoBuilder.setNames(classReader.getClassName(),classReader.getSuperName(),classReader.getInterfaces());\n    }\n    ImmutableList<ResolutionFailureChain> resolutionFailureChains=resolutionFailureChainsBuilder.build();\n    if (resolutionFailureChains.isEmpty()) {\n      classEntry.state=ExistingState.create(classInfoBuilder.build(lazyClasspath,false),explicitUse);\n    }\n else {\n      ClassInfo classInfo=classInfoBuilder.build(lazyClasspath,true);\n      classEntry.state=IncompleteState.create(classInfo,ResolutionFailureChain.createWithParent(classInfo,resolutionFailureChains));\n    }\n  }\n catch (  IOException e) {\n    throw new RuntimeException(\"Error when resolving class entry \" + entryName,e);\n  }\ncatch (  RuntimeException e) {\n    System.err.println(\"A runtime exception occurred. The following is the content in the class index. \" + e.getMessage());\n    lazyClasspath.printClasspath(System.err);\n    throw e;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 290,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3146,
        "startLineNumber" : 140,
        "startColumnNumber" : 4,
        "endLineNumber" : 203,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private static void resolveClassEntry(LazyClassEntry classEntry,LazyClasspath lazyClasspath,boolean explicitUse){\n  if (classEntry.state != null) {\n    if (classEntry.state instanceof ExistingState) {\n      ExistingState state=(ExistingState)classEntry.state;\n      if (!state.direct() && explicitUse) {\n        classEntry.state=ExistingState.create(state.classInfo().get(),explicitUse);\n      }\n    }\n    return;\n  }\n  String entryName=classEntry.internalName + \".class\";\n  ZipEntry zipEntry=checkNotNull(classEntry.zipFile.getEntry(entryName),\"The zip entry %s is null.\",entryName);\n  try (InputStream inputStream=classEntry.zipFile.getInputStream(zipEntry)){\n    ClassReader classReader=new ClassReader(inputStream);\n    ImmutableList.Builder<ResolutionFailureChain> resolutionFailureChainsBuilder=ImmutableList.builder();\n    for (    String superName : combineWithoutNull(classReader.getSuperName(),classReader.getInterfaces())) {\n      Optional<ResolutionFailureChain> failurePath=resolveSuperClassEntry(superName,lazyClasspath);\n      failurePath.ifPresent(resolutionFailureChainsBuilder::add);\n    }\n    ClassInfoBuilder classInfoBuilder=new ClassInfoBuilder().setJarPath(classEntry.jarPath).setDirect(classEntry.isDirectDep);\n    if (lazyClasspath.populateMembers) {\n      classReader.accept(classInfoBuilder,ClassReader.SKIP_CODE | ClassReader.SKIP_DEBUG | ClassReader.SKIP_FRAMES);\n    }\n else {\n      classInfoBuilder.setNames(classReader.getClassName(),classReader.getSuperName(),classReader.getInterfaces());\n    }\n    ImmutableList<ResolutionFailureChain> resolutionFailureChains=resolutionFailureChainsBuilder.build();\n    if (resolutionFailureChains.isEmpty()) {\n      classEntry.state=ExistingState.create(classInfoBuilder.build(lazyClasspath,false),explicitUse);\n    }\n else {\n      ClassInfo classInfo=classInfoBuilder.build(lazyClasspath,true);\n      classEntry.state=IncompleteState.create(classInfo,ResolutionFailureChain.createWithParent(classInfo,resolutionFailureChains));\n    }\n  }\n catch (  IOException e) {\n    throw new RuntimeException(\"Error when resolving class entry \" + entryName,e);\n  }\ncatch (  RuntimeException e) {\n    System.err.println(\"A runtime exception occurred. The following is the content in the class index. \" + e.getMessage());\n    lazyClasspath.printClasspath(System.err);\n    throw e;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 306,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 201,
        "startColumnNumber" : 8,
        "endLineNumber" : 201,
        "endColumnNumber" : 16
      },
      "nodeContext" : "throw e;\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.lang.RuntimeException"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 195,
    "startColumnNumber" : 84,
    "endLineNumber" : 195,
    "endColumnNumber" : 85
  }, {
    "charLength" : 1,
    "startLineNumber" : 199,
    "startColumnNumber" : 18,
    "endLineNumber" : 199,
    "endColumnNumber" : 19
  }, {
    "charLength" : 1,
    "startLineNumber" : 201,
    "startColumnNumber" : 14,
    "endLineNumber" : 201,
    "endColumnNumber" : 15
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 1
  } ]
}