{
  "id" : 515,
  "expression" : "index != null",
  "projectName" : "apache@dubbo",
  "commitID" : "4ea0a09846fa74b7b1a6a1a548f31859a2cddcc8",
  "filePath" : "/dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/telnet/codec/TelnetCodec.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "index != null",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 269,
      "startColumnNumber" : 51,
      "endLineNumber" : 269,
      "endColumnNumber" : 64
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 269,
        "startColumnNumber" : 12,
        "endLineNumber" : 269,
        "endColumnNumber" : 64
      },
      "nodeContext" : "CollectionUtils.isNotEmpty(history) && index != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 269,
        "startColumnNumber" : 12,
        "endLineNumber" : 269,
        "endColumnNumber" : 78
      },
      "nodeContext" : "CollectionUtils.isNotEmpty(history) && index != null && index >= 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 269,
        "startColumnNumber" : 12,
        "endLineNumber" : 269,
        "endColumnNumber" : 104
      },
      "nodeContext" : "CollectionUtils.isNotEmpty(history) && index != null && index >= 0 && index < history.size()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 490,
        "startLineNumber" : 269,
        "startColumnNumber" : 8,
        "endLineNumber" : 278,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (CollectionUtils.isNotEmpty(history) && index != null && index >= 0 && index < history.size()) {\n  String value=history.get(index);\n  if (value != null) {\n    byte[] b1=value.getBytes();\n    byte[] b2=new byte[b1.length + message.length];\n    System.arraycopy(b1,0,b2,0,b1.length);\n    System.arraycopy(message,0,b2,b1.length,message.length);\n    message=b2;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 88,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5294,
        "startLineNumber" : 169,
        "startColumnNumber" : 116,
        "endLineNumber" : 296,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (isClientSide(channel)) {\n    return toString(message,getCharset(channel));\n  }\n  checkPayload(channel,readable);\n  if (message == null || message.length == 0) {\n    return DecodeResult.NEED_MORE_INPUT;\n  }\n  if (message[message.length - 1] == '\\b') {\n    try {\n      boolean doublechar=message.length >= 3 && message[message.length - 3] < 0;\n      channel.send(new String(doublechar ? new byte[]{32,32,8,8} : new byte[]{32,8},getCharset(channel).name()));\n    }\n catch (    RemotingException e) {\n      throw new IOException(StringUtils.toString(e));\n    }\n    return DecodeResult.NEED_MORE_INPUT;\n  }\n  for (  Object command : EXIT) {\n    if (isEquals(message,(byte[])command)) {\n      if (logger.isInfoEnabled()) {\n        logger.info(new Exception(\"Close channel \" + channel + \" on exit command: \"+ Arrays.toString((byte[])command)));\n      }\n      channel.close();\n      return null;\n    }\n  }\n  boolean up=endsWith(message,UP);\n  boolean down=endsWith(message,DOWN);\n  if (up || down) {\n    LinkedList<String> history=(LinkedList<String>)channel.getAttribute(HISTORY_LIST_KEY);\n    if (CollectionUtils.isEmpty(history)) {\n      return DecodeResult.NEED_MORE_INPUT;\n    }\n    Integer index=(Integer)channel.getAttribute(HISTORY_INDEX_KEY);\n    Integer old=index;\n    if (index == null) {\n      index=history.size() - 1;\n    }\n else {\n      if (up) {\n        index=index - 1;\n        if (index < 0) {\n          index=history.size() - 1;\n        }\n      }\n else {\n        index=index + 1;\n        if (index > history.size() - 1) {\n          index=0;\n        }\n      }\n    }\n    if (old == null || !old.equals(index)) {\n      channel.setAttribute(HISTORY_INDEX_KEY,index);\n      String value=history.get(index);\n      if (old != null && old >= 0 && old < history.size()) {\n        String ov=history.get(old);\n        StringBuilder buf=new StringBuilder();\n        for (int i=0; i < ov.length(); i++) {\n          buf.append(\"\\b\");\n        }\n        for (int i=0; i < ov.length(); i++) {\n          buf.append(\" \");\n        }\n        for (int i=0; i < ov.length(); i++) {\n          buf.append(\"\\b\");\n        }\n        value=buf.toString() + value;\n      }\n      try {\n        channel.send(value);\n      }\n catch (      RemotingException e) {\n        throw new IOException(StringUtils.toString(e));\n      }\n    }\n    return DecodeResult.NEED_MORE_INPUT;\n  }\n  for (  Object command : EXIT) {\n    if (isEquals(message,(byte[])command)) {\n      if (logger.isInfoEnabled()) {\n        logger.info(new Exception(\"Close channel \" + channel + \" on exit command \"+ command));\n      }\n      channel.close();\n      return null;\n    }\n  }\n  byte[] enter=null;\n  for (  Object command : ENTER) {\n    if (endsWith(message,(byte[])command)) {\n      enter=(byte[])command;\n      break;\n    }\n  }\n  if (enter == null) {\n    return DecodeResult.NEED_MORE_INPUT;\n  }\n  LinkedList<String> history=(LinkedList<String>)channel.getAttribute(HISTORY_LIST_KEY);\n  Integer index=(Integer)channel.getAttribute(HISTORY_INDEX_KEY);\n  channel.removeAttribute(HISTORY_INDEX_KEY);\n  if (CollectionUtils.isNotEmpty(history) && index != null && index >= 0 && index < history.size()) {\n    String value=history.get(index);\n    if (value != null) {\n      byte[] b1=value.getBytes();\n      byte[] b2=new byte[b1.length + message.length];\n      System.arraycopy(b1,0,b2,0,b1.length);\n      System.arraycopy(message,0,b2,b1.length,message.length);\n      message=b2;\n    }\n  }\n  String result=toString(message,getCharset(channel));\n  if (result.trim().length() > 0) {\n    if (history == null) {\n      history=new LinkedList<String>();\n      channel.setAttribute(HISTORY_LIST_KEY,history);\n    }\n    if (history.isEmpty()) {\n      history.addLast(result);\n    }\n else     if (!result.equals(history.getLast())) {\n      history.remove(result);\n      history.addLast(result);\n      if (history.size() > 10) {\n        history.removeFirst();\n      }\n    }\n  }\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 718,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5442,
        "startLineNumber" : 168,
        "startColumnNumber" : 4,
        "endLineNumber" : 296,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") protected Object decode(Channel channel,ChannelBuffer buffer,int readable,byte[] message) throws IOException {\n  if (isClientSide(channel)) {\n    return toString(message,getCharset(channel));\n  }\n  checkPayload(channel,readable);\n  if (message == null || message.length == 0) {\n    return DecodeResult.NEED_MORE_INPUT;\n  }\n  if (message[message.length - 1] == '\\b') {\n    try {\n      boolean doublechar=message.length >= 3 && message[message.length - 3] < 0;\n      channel.send(new String(doublechar ? new byte[]{32,32,8,8} : new byte[]{32,8},getCharset(channel).name()));\n    }\n catch (    RemotingException e) {\n      throw new IOException(StringUtils.toString(e));\n    }\n    return DecodeResult.NEED_MORE_INPUT;\n  }\n  for (  Object command : EXIT) {\n    if (isEquals(message,(byte[])command)) {\n      if (logger.isInfoEnabled()) {\n        logger.info(new Exception(\"Close channel \" + channel + \" on exit command: \"+ Arrays.toString((byte[])command)));\n      }\n      channel.close();\n      return null;\n    }\n  }\n  boolean up=endsWith(message,UP);\n  boolean down=endsWith(message,DOWN);\n  if (up || down) {\n    LinkedList<String> history=(LinkedList<String>)channel.getAttribute(HISTORY_LIST_KEY);\n    if (CollectionUtils.isEmpty(history)) {\n      return DecodeResult.NEED_MORE_INPUT;\n    }\n    Integer index=(Integer)channel.getAttribute(HISTORY_INDEX_KEY);\n    Integer old=index;\n    if (index == null) {\n      index=history.size() - 1;\n    }\n else {\n      if (up) {\n        index=index - 1;\n        if (index < 0) {\n          index=history.size() - 1;\n        }\n      }\n else {\n        index=index + 1;\n        if (index > history.size() - 1) {\n          index=0;\n        }\n      }\n    }\n    if (old == null || !old.equals(index)) {\n      channel.setAttribute(HISTORY_INDEX_KEY,index);\n      String value=history.get(index);\n      if (old != null && old >= 0 && old < history.size()) {\n        String ov=history.get(old);\n        StringBuilder buf=new StringBuilder();\n        for (int i=0; i < ov.length(); i++) {\n          buf.append(\"\\b\");\n        }\n        for (int i=0; i < ov.length(); i++) {\n          buf.append(\" \");\n        }\n        for (int i=0; i < ov.length(); i++) {\n          buf.append(\"\\b\");\n        }\n        value=buf.toString() + value;\n      }\n      try {\n        channel.send(value);\n      }\n catch (      RemotingException e) {\n        throw new IOException(StringUtils.toString(e));\n      }\n    }\n    return DecodeResult.NEED_MORE_INPUT;\n  }\n  for (  Object command : EXIT) {\n    if (isEquals(message,(byte[])command)) {\n      if (logger.isInfoEnabled()) {\n        logger.info(new Exception(\"Close channel \" + channel + \" on exit command \"+ command));\n      }\n      channel.close();\n      return null;\n    }\n  }\n  byte[] enter=null;\n  for (  Object command : ENTER) {\n    if (endsWith(message,(byte[])command)) {\n      enter=(byte[])command;\n      break;\n    }\n  }\n  if (enter == null) {\n    return DecodeResult.NEED_MORE_INPUT;\n  }\n  LinkedList<String> history=(LinkedList<String>)channel.getAttribute(HISTORY_LIST_KEY);\n  Integer index=(Integer)channel.getAttribute(HISTORY_INDEX_KEY);\n  channel.removeAttribute(HISTORY_INDEX_KEY);\n  if (CollectionUtils.isNotEmpty(history) && index != null && index >= 0 && index < history.size()) {\n    String value=history.get(index);\n    if (value != null) {\n      byte[] b1=value.getBytes();\n      byte[] b2=new byte[b1.length + message.length];\n      System.arraycopy(b1,0,b2,0,b1.length);\n      System.arraycopy(message,0,b2,b1.length,message.length);\n      message=b2;\n    }\n  }\n  String result=toString(message,getCharset(channel));\n  if (result.trim().length() > 0) {\n    if (history == null) {\n      history=new LinkedList<String>();\n      channel.setAttribute(HISTORY_LIST_KEY,history);\n    }\n    if (history.isEmpty()) {\n      history.addLast(result);\n    }\n else     if (!result.equals(history.getLast())) {\n      history.remove(result);\n      history.addLast(result);\n      if (history.size() > 10) {\n        history.removeFirst();\n      }\n    }\n  }\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 744,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 269,
        "startColumnNumber" : 12,
        "endLineNumber" : 269,
        "endColumnNumber" : 104
      },
      "nodeContext" : "CollectionUtils.isNotEmpty(history) && index != null && index >= 0 && index < history.size()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 18,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 269,
    "startColumnNumber" : 51,
    "endLineNumber" : 269,
    "endColumnNumber" : 64
  } ],
  "layoutRelationDataList" : [ ]
}