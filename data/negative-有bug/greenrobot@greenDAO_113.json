{
  "id" : 113,
  "expression" : "Observable",
  "projectName" : "greenrobot@greenDAO",
  "commitID" : "bdaad7806db3e4db0ec5cc73835576e0aa9067a0",
  "filePath" : "/DaoCore/src/main/java/org/greenrobot/greendao/rx/RxQuery.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Observable",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 83,
      "startColumnNumber" : 35,
      "endLineNumber" : 83,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 949,
        "startLineNumber" : 83,
        "startColumnNumber" : 35,
        "endLineNumber" : 106,
        "endColumnNumber" : 10
      },
      "nodeContext" : "Observable.create(new OnSubscribe<T>(){\n  @Override public void call(  Subscriber<? super T> subscriber){\n    try {\n      LazyList<T> lazyList=query.forCurrentThread().listLazyUncached();\n      try {\n        for (        T entity : lazyList) {\n          if (subscriber.isUnsubscribed()) {\n            break;\n          }\n          subscriber.onNext(entity);\n        }\n      }\n  finally {\n        lazyList.close();\n      }\n      if (!subscriber.isUnsubscribed()) {\n        subscriber.onCompleted();\n      }\n    }\n catch (    Throwable e) {\n      Exceptions.throwIfFatal(e);\n      subscriber.onError(e);\n    }\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 91,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 962,
        "startLineNumber" : 83,
        "startColumnNumber" : 22,
        "endLineNumber" : 106,
        "endColumnNumber" : 10
      },
      "nodeContext" : "observable=Observable.create(new OnSubscribe<T>(){\n  @Override public void call(  Subscriber<? super T> subscriber){\n    try {\n      LazyList<T> lazyList=query.forCurrentThread().listLazyUncached();\n      try {\n        for (        T entity : lazyList) {\n          if (subscriber.isUnsubscribed()) {\n            break;\n          }\n          subscriber.onNext(entity);\n        }\n      }\n  finally {\n        lazyList.close();\n      }\n      if (!subscriber.isUnsubscribed()) {\n        subscriber.onCompleted();\n      }\n    }\n catch (    Throwable e) {\n      Exceptions.throwIfFatal(e);\n      subscriber.onError(e);\n    }\n  }\n}\n)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 93,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 977,
        "startLineNumber" : 83,
        "startColumnNumber" : 8,
        "endLineNumber" : 106,
        "endColumnNumber" : 11
      },
      "nodeContext" : "Observable<T> observable=Observable.create(new OnSubscribe<T>(){\n  @Override public void call(  Subscriber<? super T> subscriber){\n    try {\n      LazyList<T> lazyList=query.forCurrentThread().listLazyUncached();\n      try {\n        for (        T entity : lazyList) {\n          if (subscriber.isUnsubscribed()) {\n            break;\n          }\n          subscriber.onNext(entity);\n        }\n      }\n  finally {\n        lazyList.close();\n      }\n      if (!subscriber.isUnsubscribed()) {\n        subscriber.onCompleted();\n      }\n    }\n catch (    Throwable e) {\n      Exceptions.throwIfFatal(e);\n      subscriber.onError(e);\n    }\n  }\n}\n);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 99,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1029,
        "startLineNumber" : 82,
        "startColumnNumber" : 36,
        "endLineNumber" : 108,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Observable<T> observable=Observable.create(new OnSubscribe<T>(){\n    @Override public void call(    Subscriber<? super T> subscriber){\n      try {\n        LazyList<T> lazyList=query.forCurrentThread().listLazyUncached();\n        try {\n          for (          T entity : lazyList) {\n            if (subscriber.isUnsubscribed()) {\n              break;\n            }\n            subscriber.onNext(entity);\n          }\n        }\n  finally {\n          lazyList.close();\n        }\n        if (!subscriber.isUnsubscribed()) {\n          subscriber.onCompleted();\n        }\n      }\n catch (      Throwable e) {\n        Exceptions.throwIfFatal(e);\n        subscriber.onError(e);\n      }\n    }\n  }\n);\n  return wrap(observable);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 104,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1559,
        "startLineNumber" : 75,
        "startColumnNumber" : 4,
        "endLineNumber" : 108,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Emits the resulting entities one by one, producing them on the fly (\"streaming\" entities). Unlike  {@link #list()}, it does not wait for the query to gather all results. Thus, the first entities are immediately available as soon the underlying database cursor has data. This approach may be more memory efficient for large number of entities (or large entities) at the cost of additional overhead caused by a per-entity delivery through Rx.\n */\npublic Observable<T> oneByOne(){\n  Observable<T> observable=Observable.create(new OnSubscribe<T>(){\n    @Override public void call(    Subscriber<? super T> subscriber){\n      try {\n        LazyList<T> lazyList=query.forCurrentThread().listLazyUncached();\n        try {\n          for (          T entity : lazyList) {\n            if (subscriber.isUnsubscribed()) {\n              break;\n            }\n            subscriber.onNext(entity);\n          }\n        }\n  finally {\n          lazyList.close();\n        }\n        if (!subscriber.isUnsubscribed()) {\n          subscriber.onCompleted();\n        }\n      }\n catch (      Throwable e) {\n        Exceptions.throwIfFatal(e);\n        subscriber.onError(e);\n      }\n    }\n  }\n);\n  return wrap(observable);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 113,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 949,
        "startLineNumber" : 83,
        "startColumnNumber" : 35,
        "endLineNumber" : 106,
        "endColumnNumber" : 10
      },
      "nodeContext" : "Observable.create(new OnSubscribe<T>(){\n  @Override public void call(  Subscriber<? super T> subscriber){\n    try {\n      LazyList<T> lazyList=query.forCurrentThread().listLazyUncached();\n      try {\n        for (        T entity : lazyList) {\n          if (subscriber.isUnsubscribed()) {\n            break;\n          }\n          subscriber.onNext(entity);\n        }\n      }\n  finally {\n        lazyList.close();\n      }\n      if (!subscriber.isUnsubscribed()) {\n        subscriber.onCompleted();\n      }\n    }\n catch (    Throwable e) {\n      Exceptions.throwIfFatal(e);\n      subscriber.onError(e);\n    }\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 91,
      "astHeight" : 14
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 83,
    "startColumnNumber" : 35,
    "endLineNumber" : 83,
    "endColumnNumber" : 45
  } ],
  "layoutRelationDataList" : [ ]
}