{
  "id" : 369,
  "expression" : "\"-\"",
  "projectName" : "apache@dubbo",
  "commitID" : "4ea0a09846fa74b7b1a6a1a548f31859a2cddcc8",
  "filePath" : "/dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/schema/DubboBeanDefinitionParser.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"-\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 161,
      "startColumnNumber" : 73,
      "endLineNumber" : 161,
      "endColumnNumber" : 76
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 161,
        "startColumnNumber" : 30,
        "endLineNumber" : 161,
        "endColumnNumber" : 77
      },
      "nodeContext" : "StringUtils.camelToSplitName(beanProperty,\"-\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 161,
        "startColumnNumber" : 19,
        "endLineNumber" : 161,
        "endColumnNumber" : 77
      },
      "nodeContext" : "property=StringUtils.camelToSplitName(beanProperty,\"-\")",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 161,
        "startColumnNumber" : 12,
        "endLineNumber" : 161,
        "endColumnNumber" : 78
      },
      "nodeContext" : "String property=StringUtils.camelToSplitName(beanProperty,\"-\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 4207,
        "startLineNumber" : 158,
        "startColumnNumber" : 71,
        "endLineNumber" : 213,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String beanProperty=entry.getKey();\n  Class type=entry.getValue();\n  String property=StringUtils.camelToSplitName(beanProperty,\"-\");\n  processedProps.add(property);\n  if (\"parameters\".equals(property)) {\n    parameters=parseParameters(element.getChildNodes(),beanDefinition,parserContext);\n  }\n else   if (\"methods\".equals(property)) {\n    parseMethods(id,element.getChildNodes(),beanDefinition,parserContext);\n  }\n else   if (\"arguments\".equals(property)) {\n    parseArguments(id,element.getChildNodes(),beanDefinition,parserContext);\n  }\n else {\n    String value=resolveAttribute(element,property,parserContext);\n    if (value != null) {\n      value=value.trim();\n      if (value.length() > 0) {\n        if (\"registry\".equals(property) && RegistryConfig.NO_AVAILABLE.equalsIgnoreCase(value)) {\n          RegistryConfig registryConfig=new RegistryConfig();\n          registryConfig.setAddress(RegistryConfig.NO_AVAILABLE);\n          beanDefinition.getPropertyValues().addPropertyValue(beanProperty,registryConfig);\n        }\n else         if (\"provider\".equals(property) || \"registry\".equals(property) || (\"protocol\".equals(property) && AbstractServiceConfig.class.isAssignableFrom(beanClass))) {\n          beanDefinition.getPropertyValues().addPropertyValue(beanProperty + \"Ids\",value);\n        }\n else {\n          Object reference;\n          if (isPrimitive(type)) {\n            value=getCompatibleDefaultValue(property,value);\n            reference=value;\n          }\n else           if (ONRETURN.equals(property) || ONTHROW.equals(property) || ONINVOKE.equals(property)) {\n            int index=value.lastIndexOf(\".\");\n            String ref=value.substring(0,index);\n            String method=value.substring(index + 1);\n            reference=new RuntimeBeanReference(ref);\n            beanDefinition.getPropertyValues().addPropertyValue(property + METHOD,method);\n          }\n else {\n            if (\"ref\".equals(property) && parserContext.getRegistry().containsBeanDefinition(value)) {\n              BeanDefinition refBean=parserContext.getRegistry().getBeanDefinition(value);\n              if (!refBean.isSingleton()) {\n                throw new IllegalStateException(\"The exported service ref \" + value + \" must be singleton! Please set the \"+ value+ \" bean scope to singleton, eg: <bean id=\\\"\"+ value+ \"\\\" scope=\\\"singleton\\\" ...>\");\n              }\n            }\n            reference=new RuntimeBeanReference(value);\n          }\n          if (reference != null) {\n            beanDefinition.getPropertyValues().addPropertyValue(beanProperty,reference);\n          }\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 322,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4270,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 213,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Map.Entry<String,Class> entry : beanPropsMap.entrySet()) {\n  String beanProperty=entry.getKey();\n  Class type=entry.getValue();\n  String property=StringUtils.camelToSplitName(beanProperty,\"-\");\n  processedProps.add(property);\n  if (\"parameters\".equals(property)) {\n    parameters=parseParameters(element.getChildNodes(),beanDefinition,parserContext);\n  }\n else   if (\"methods\".equals(property)) {\n    parseMethods(id,element.getChildNodes(),beanDefinition,parserContext);\n  }\n else   if (\"arguments\".equals(property)) {\n    parseArguments(id,element.getChildNodes(),beanDefinition,parserContext);\n  }\n else {\n    String value=resolveAttribute(element,property,parserContext);\n    if (value != null) {\n      value=value.trim();\n      if (value.length() > 0) {\n        if (\"registry\".equals(property) && RegistryConfig.NO_AVAILABLE.equalsIgnoreCase(value)) {\n          RegistryConfig registryConfig=new RegistryConfig();\n          registryConfig.setAddress(RegistryConfig.NO_AVAILABLE);\n          beanDefinition.getPropertyValues().addPropertyValue(beanProperty,registryConfig);\n        }\n else         if (\"provider\".equals(property) || \"registry\".equals(property) || (\"protocol\".equals(property) && AbstractServiceConfig.class.isAssignableFrom(beanClass))) {\n          beanDefinition.getPropertyValues().addPropertyValue(beanProperty + \"Ids\",value);\n        }\n else {\n          Object reference;\n          if (isPrimitive(type)) {\n            value=getCompatibleDefaultValue(property,value);\n            reference=value;\n          }\n else           if (ONRETURN.equals(property) || ONTHROW.equals(property) || ONINVOKE.equals(property)) {\n            int index=value.lastIndexOf(\".\");\n            String ref=value.substring(0,index);\n            String method=value.substring(index + 1);\n            reference=new RuntimeBeanReference(ref);\n            beanDefinition.getPropertyValues().addPropertyValue(property + METHOD,method);\n          }\n else {\n            if (\"ref\".equals(property) && parserContext.getRegistry().containsBeanDefinition(value)) {\n              BeanDefinition refBean=parserContext.getRegistry().getBeanDefinition(value);\n              if (!refBean.isSingleton()) {\n                throw new IllegalStateException(\"The exported service ref \" + value + \" must be singleton! Please set the \"+ value+ \" bean scope to singleton, eg: <bean id=\\\"\"+ value+ \"\\\" scope=\\\"singleton\\\" ...>\");\n              }\n            }\n            reference=new RuntimeBeanReference(value);\n          }\n          if (reference != null) {\n            beanDefinition.getPropertyValues().addPropertyValue(beanProperty,reference);\n          }\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 337,
      "astHeight" : 24
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8952,
        "startLineNumber" : 88,
        "startColumnNumber" : 128,
        "endLineNumber" : 242,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  RootBeanDefinition beanDefinition=new RootBeanDefinition();\n  beanDefinition.setBeanClass(beanClass);\n  beanDefinition.setLazyInit(false);\n  String id=resolveAttribute(element,\"id\",parserContext);\n  if (StringUtils.isEmpty(id) && required) {\n    String generatedBeanName=resolveAttribute(element,\"name\",parserContext);\n    if (StringUtils.isEmpty(generatedBeanName)) {\n      if (ProtocolConfig.class.equals(beanClass)) {\n        generatedBeanName=\"dubbo\";\n      }\n else {\n        generatedBeanName=resolveAttribute(element,\"interface\",parserContext);\n      }\n    }\n    if (StringUtils.isEmpty(generatedBeanName)) {\n      generatedBeanName=beanClass.getName();\n    }\n    id=generatedBeanName;\n    int counter=2;\n    while (parserContext.getRegistry().containsBeanDefinition(id)) {\n      id=generatedBeanName + (counter++);\n    }\n  }\n  Set<String> processedProps=new HashSet<>();\n  if (StringUtils.isNotEmpty(id)) {\n    if (parserContext.getRegistry().containsBeanDefinition(id)) {\n      throw new IllegalStateException(\"Duplicate spring bean id \" + id);\n    }\n    parserContext.getRegistry().registerBeanDefinition(id,beanDefinition);\n    beanDefinition.getPropertyValues().addPropertyValue(\"id\",id);\n  }\n  if (ProtocolConfig.class.equals(beanClass)) {\n    for (    String name : parserContext.getRegistry().getBeanDefinitionNames()) {\n      BeanDefinition definition=parserContext.getRegistry().getBeanDefinition(name);\n      PropertyValue property=definition.getPropertyValues().getPropertyValue(\"protocol\");\n      if (property != null) {\n        Object value=property.getValue();\n        if (value instanceof ProtocolConfig && id.equals(((ProtocolConfig)value).getName())) {\n          definition.getPropertyValues().addPropertyValue(\"protocol\",new RuntimeBeanReference(id));\n        }\n      }\n    }\n  }\n else   if (ServiceBean.class.equals(beanClass)) {\n    String className=resolveAttribute(element,\"class\",parserContext);\n    if (StringUtils.isNotEmpty(className)) {\n      RootBeanDefinition classDefinition=new RootBeanDefinition();\n      classDefinition.setBeanClass(ReflectUtils.forName(className));\n      classDefinition.setLazyInit(false);\n      parseProperties(element.getChildNodes(),classDefinition,parserContext);\n      beanDefinition.getPropertyValues().addPropertyValue(\"ref\",new BeanDefinitionHolder(classDefinition,id + \"Impl\"));\n    }\n  }\n  Map<String,Class> beanPropsMap=beanPropsCache.get(beanClass.getName());\n  if (beanPropsMap == null) {\n    beanPropsMap=new HashMap<>();\n    beanPropsCache.put(beanClass.getName(),beanPropsMap);\n    if (ReferenceBean.class.equals(beanClass)) {\n      getPropertyMap(ReferenceConfig.class,beanPropsMap);\n    }\n else {\n      getPropertyMap(beanClass,beanPropsMap);\n    }\n  }\n  ManagedMap parameters=null;\n  for (  Map.Entry<String,Class> entry : beanPropsMap.entrySet()) {\n    String beanProperty=entry.getKey();\n    Class type=entry.getValue();\n    String property=StringUtils.camelToSplitName(beanProperty,\"-\");\n    processedProps.add(property);\n    if (\"parameters\".equals(property)) {\n      parameters=parseParameters(element.getChildNodes(),beanDefinition,parserContext);\n    }\n else     if (\"methods\".equals(property)) {\n      parseMethods(id,element.getChildNodes(),beanDefinition,parserContext);\n    }\n else     if (\"arguments\".equals(property)) {\n      parseArguments(id,element.getChildNodes(),beanDefinition,parserContext);\n    }\n else {\n      String value=resolveAttribute(element,property,parserContext);\n      if (value != null) {\n        value=value.trim();\n        if (value.length() > 0) {\n          if (\"registry\".equals(property) && RegistryConfig.NO_AVAILABLE.equalsIgnoreCase(value)) {\n            RegistryConfig registryConfig=new RegistryConfig();\n            registryConfig.setAddress(RegistryConfig.NO_AVAILABLE);\n            beanDefinition.getPropertyValues().addPropertyValue(beanProperty,registryConfig);\n          }\n else           if (\"provider\".equals(property) || \"registry\".equals(property) || (\"protocol\".equals(property) && AbstractServiceConfig.class.isAssignableFrom(beanClass))) {\n            beanDefinition.getPropertyValues().addPropertyValue(beanProperty + \"Ids\",value);\n          }\n else {\n            Object reference;\n            if (isPrimitive(type)) {\n              value=getCompatibleDefaultValue(property,value);\n              reference=value;\n            }\n else             if (ONRETURN.equals(property) || ONTHROW.equals(property) || ONINVOKE.equals(property)) {\n              int index=value.lastIndexOf(\".\");\n              String ref=value.substring(0,index);\n              String method=value.substring(index + 1);\n              reference=new RuntimeBeanReference(ref);\n              beanDefinition.getPropertyValues().addPropertyValue(property + METHOD,method);\n            }\n else {\n              if (\"ref\".equals(property) && parserContext.getRegistry().containsBeanDefinition(value)) {\n                BeanDefinition refBean=parserContext.getRegistry().getBeanDefinition(value);\n                if (!refBean.isSingleton()) {\n                  throw new IllegalStateException(\"The exported service ref \" + value + \" must be singleton! Please set the \"+ value+ \" bean scope to singleton, eg: <bean id=\\\"\"+ value+ \"\\\" scope=\\\"singleton\\\" ...>\");\n                }\n              }\n              reference=new RuntimeBeanReference(value);\n            }\n            if (reference != null) {\n              beanDefinition.getPropertyValues().addPropertyValue(beanProperty,reference);\n            }\n          }\n        }\n      }\n    }\n  }\n  NamedNodeMap attributes=element.getAttributes();\n  int len=attributes.getLength();\n  for (int i=0; i < len; i++) {\n    Node node=attributes.item(i);\n    String name=node.getLocalName();\n    if (!processedProps.contains(name)) {\n      if (parameters == null) {\n        parameters=new ManagedMap();\n      }\n      String value=node.getNodeValue();\n      parameters.put(name,new TypedStringValue(value,String.class));\n    }\n  }\n  if (parameters != null) {\n    beanDefinition.getPropertyValues().addPropertyValue(\"parameters\",parameters);\n  }\n  if (ProviderConfig.class.equals(beanClass)) {\n    parseNested(element,parserContext,ServiceBean.class,true,\"service\",\"provider\",id,beanDefinition);\n  }\n else   if (ConsumerConfig.class.equals(beanClass)) {\n    parseNested(element,parserContext,ReferenceBean.class,false,\"reference\",\"consumer\",id,beanDefinition);\n  }\n else   if (ReferenceBean.class.equals(beanClass)) {\n    configReferenceBean(element,parserContext,beanDefinition,null);\n  }\n  return beanDefinition;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 863,
      "astHeight" : 25
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 9111,
        "startLineNumber" : 87,
        "startColumnNumber" : 4,
        "endLineNumber" : 242,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") private static RootBeanDefinition parse(Element element,ParserContext parserContext,Class<?> beanClass,boolean required){\n  RootBeanDefinition beanDefinition=new RootBeanDefinition();\n  beanDefinition.setBeanClass(beanClass);\n  beanDefinition.setLazyInit(false);\n  String id=resolveAttribute(element,\"id\",parserContext);\n  if (StringUtils.isEmpty(id) && required) {\n    String generatedBeanName=resolveAttribute(element,\"name\",parserContext);\n    if (StringUtils.isEmpty(generatedBeanName)) {\n      if (ProtocolConfig.class.equals(beanClass)) {\n        generatedBeanName=\"dubbo\";\n      }\n else {\n        generatedBeanName=resolveAttribute(element,\"interface\",parserContext);\n      }\n    }\n    if (StringUtils.isEmpty(generatedBeanName)) {\n      generatedBeanName=beanClass.getName();\n    }\n    id=generatedBeanName;\n    int counter=2;\n    while (parserContext.getRegistry().containsBeanDefinition(id)) {\n      id=generatedBeanName + (counter++);\n    }\n  }\n  Set<String> processedProps=new HashSet<>();\n  if (StringUtils.isNotEmpty(id)) {\n    if (parserContext.getRegistry().containsBeanDefinition(id)) {\n      throw new IllegalStateException(\"Duplicate spring bean id \" + id);\n    }\n    parserContext.getRegistry().registerBeanDefinition(id,beanDefinition);\n    beanDefinition.getPropertyValues().addPropertyValue(\"id\",id);\n  }\n  if (ProtocolConfig.class.equals(beanClass)) {\n    for (    String name : parserContext.getRegistry().getBeanDefinitionNames()) {\n      BeanDefinition definition=parserContext.getRegistry().getBeanDefinition(name);\n      PropertyValue property=definition.getPropertyValues().getPropertyValue(\"protocol\");\n      if (property != null) {\n        Object value=property.getValue();\n        if (value instanceof ProtocolConfig && id.equals(((ProtocolConfig)value).getName())) {\n          definition.getPropertyValues().addPropertyValue(\"protocol\",new RuntimeBeanReference(id));\n        }\n      }\n    }\n  }\n else   if (ServiceBean.class.equals(beanClass)) {\n    String className=resolveAttribute(element,\"class\",parserContext);\n    if (StringUtils.isNotEmpty(className)) {\n      RootBeanDefinition classDefinition=new RootBeanDefinition();\n      classDefinition.setBeanClass(ReflectUtils.forName(className));\n      classDefinition.setLazyInit(false);\n      parseProperties(element.getChildNodes(),classDefinition,parserContext);\n      beanDefinition.getPropertyValues().addPropertyValue(\"ref\",new BeanDefinitionHolder(classDefinition,id + \"Impl\"));\n    }\n  }\n  Map<String,Class> beanPropsMap=beanPropsCache.get(beanClass.getName());\n  if (beanPropsMap == null) {\n    beanPropsMap=new HashMap<>();\n    beanPropsCache.put(beanClass.getName(),beanPropsMap);\n    if (ReferenceBean.class.equals(beanClass)) {\n      getPropertyMap(ReferenceConfig.class,beanPropsMap);\n    }\n else {\n      getPropertyMap(beanClass,beanPropsMap);\n    }\n  }\n  ManagedMap parameters=null;\n  for (  Map.Entry<String,Class> entry : beanPropsMap.entrySet()) {\n    String beanProperty=entry.getKey();\n    Class type=entry.getValue();\n    String property=StringUtils.camelToSplitName(beanProperty,\"-\");\n    processedProps.add(property);\n    if (\"parameters\".equals(property)) {\n      parameters=parseParameters(element.getChildNodes(),beanDefinition,parserContext);\n    }\n else     if (\"methods\".equals(property)) {\n      parseMethods(id,element.getChildNodes(),beanDefinition,parserContext);\n    }\n else     if (\"arguments\".equals(property)) {\n      parseArguments(id,element.getChildNodes(),beanDefinition,parserContext);\n    }\n else {\n      String value=resolveAttribute(element,property,parserContext);\n      if (value != null) {\n        value=value.trim();\n        if (value.length() > 0) {\n          if (\"registry\".equals(property) && RegistryConfig.NO_AVAILABLE.equalsIgnoreCase(value)) {\n            RegistryConfig registryConfig=new RegistryConfig();\n            registryConfig.setAddress(RegistryConfig.NO_AVAILABLE);\n            beanDefinition.getPropertyValues().addPropertyValue(beanProperty,registryConfig);\n          }\n else           if (\"provider\".equals(property) || \"registry\".equals(property) || (\"protocol\".equals(property) && AbstractServiceConfig.class.isAssignableFrom(beanClass))) {\n            beanDefinition.getPropertyValues().addPropertyValue(beanProperty + \"Ids\",value);\n          }\n else {\n            Object reference;\n            if (isPrimitive(type)) {\n              value=getCompatibleDefaultValue(property,value);\n              reference=value;\n            }\n else             if (ONRETURN.equals(property) || ONTHROW.equals(property) || ONINVOKE.equals(property)) {\n              int index=value.lastIndexOf(\".\");\n              String ref=value.substring(0,index);\n              String method=value.substring(index + 1);\n              reference=new RuntimeBeanReference(ref);\n              beanDefinition.getPropertyValues().addPropertyValue(property + METHOD,method);\n            }\n else {\n              if (\"ref\".equals(property) && parserContext.getRegistry().containsBeanDefinition(value)) {\n                BeanDefinition refBean=parserContext.getRegistry().getBeanDefinition(value);\n                if (!refBean.isSingleton()) {\n                  throw new IllegalStateException(\"The exported service ref \" + value + \" must be singleton! Please set the \"+ value+ \" bean scope to singleton, eg: <bean id=\\\"\"+ value+ \"\\\" scope=\\\"singleton\\\" ...>\");\n                }\n              }\n              reference=new RuntimeBeanReference(value);\n            }\n            if (reference != null) {\n              beanDefinition.getPropertyValues().addPropertyValue(beanProperty,reference);\n            }\n          }\n        }\n      }\n    }\n  }\n  NamedNodeMap attributes=element.getAttributes();\n  int len=attributes.getLength();\n  for (int i=0; i < len; i++) {\n    Node node=attributes.item(i);\n    String name=node.getLocalName();\n    if (!processedProps.contains(name)) {\n      if (parameters == null) {\n        parameters=new ManagedMap();\n      }\n      String value=node.getNodeValue();\n      parameters.put(name,new TypedStringValue(value,String.class));\n    }\n  }\n  if (parameters != null) {\n    beanDefinition.getPropertyValues().addPropertyValue(\"parameters\",parameters);\n  }\n  if (ProviderConfig.class.equals(beanClass)) {\n    parseNested(element,parserContext,ServiceBean.class,true,\"service\",\"provider\",id,beanDefinition);\n  }\n else   if (ConsumerConfig.class.equals(beanClass)) {\n    parseNested(element,parserContext,ReferenceBean.class,false,\"reference\",\"consumer\",id,beanDefinition);\n  }\n else   if (ReferenceBean.class.equals(beanClass)) {\n    configReferenceBean(element,parserContext,beanDefinition,null);\n  }\n  return beanDefinition;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 889,
      "astHeight" : 26
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 161,
        "startColumnNumber" : 12,
        "endLineNumber" : 161,
        "endColumnNumber" : 78
      },
      "nodeContext" : "String property=StringUtils.camelToSplitName(beanProperty,\"-\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 161,
    "startColumnNumber" : 73,
    "endLineNumber" : 161,
    "endColumnNumber" : 76
  } ],
  "layoutRelationDataList" : [ ]
}