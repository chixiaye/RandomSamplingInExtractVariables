{
  "id" : 390,
  "expression" : "method.getReturnType()",
  "projectName" : "quarkusio@quarkus",
  "commitID" : "2862b200ee266332150317795b9fe315be51d68b",
  "filePath" : "/extensions/arc/runtime/src/main/java/io/quarkus/arc/runtime/devconsole/InvocationInterceptor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "method.getReturnType()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 81,
      "startColumnNumber" : 13,
      "endLineNumber" : 81,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 81,
        "startColumnNumber" : 13,
        "endLineNumber" : 81,
        "endColumnNumber" : 53
      },
      "nodeContext" : "method.getReturnType().equals(Void.TYPE)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 81,
        "startColumnNumber" : 12,
        "endLineNumber" : 81,
        "endColumnNumber" : 53
      },
      "nodeContext" : "!method.getReturnType().equals(Void.TYPE)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 81,
        "startColumnNumber" : 12,
        "endLineNumber" : 81,
        "endColumnNumber" : 99
      },
      "nodeContext" : "!method.getReturnType().equals(Void.TYPE) && method.isAnnotationPresent(Produces.class)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 891,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 97,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!method.getReturnType().equals(Void.TYPE) && method.isAnnotationPresent(Produces.class)) {\n  return Kind.PRODUCER;\n}\n else if (method.getParameterCount() > 0) {\n  Annotation[][] parameterAnnotations=method.getParameterAnnotations();\n  if (parameterAnnotations.length > 0) {\n    for (    Annotation[] annotations : parameterAnnotations) {\n      for (      Annotation annotation : annotations) {\n        Class<? extends Annotation> type=annotation.annotationType();\n        if (Observes.class.equals(type) || ObservesAsync.class.equals(type)) {\n          return Kind.OBSERVER;\n        }\n else         if (Disposes.class.equals(type)) {\n          return Kind.DISPOSER;\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 106,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1043,
        "startLineNumber" : 78,
        "startColumnNumber" : 51,
        "endLineNumber" : 99,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Method method=ctx.getMethod();\n  if (!method.getReturnType().equals(Void.TYPE) && method.isAnnotationPresent(Produces.class)) {\n    return Kind.PRODUCER;\n  }\n else   if (method.getParameterCount() > 0) {\n    Annotation[][] parameterAnnotations=method.getParameterAnnotations();\n    if (parameterAnnotations.length > 0) {\n      for (      Annotation[] annotations : parameterAnnotations) {\n        for (        Annotation annotation : annotations) {\n          Class<? extends Annotation> type=annotation.annotationType();\n          if (Observes.class.equals(type) || ObservesAsync.class.equals(type)) {\n            return Kind.OBSERVER;\n          }\n else           if (Disposes.class.equals(type)) {\n            return Kind.DISPOSER;\n          }\n        }\n      }\n    }\n  }\n  return Kind.BUSINESS;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 119,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1090,
        "startLineNumber" : 78,
        "startColumnNumber" : 4,
        "endLineNumber" : 99,
        "endColumnNumber" : 5
      },
      "nodeContext" : "Invocation.Kind getKind(InvocationContext ctx){\n  Method method=ctx.getMethod();\n  if (!method.getReturnType().equals(Void.TYPE) && method.isAnnotationPresent(Produces.class)) {\n    return Kind.PRODUCER;\n  }\n else   if (method.getParameterCount() > 0) {\n    Annotation[][] parameterAnnotations=method.getParameterAnnotations();\n    if (parameterAnnotations.length > 0) {\n      for (      Annotation[] annotations : parameterAnnotations) {\n        for (        Annotation annotation : annotations) {\n          Class<? extends Annotation> type=annotation.annotationType();\n          if (Observes.class.equals(type) || ObservesAsync.class.equals(type)) {\n            return Kind.OBSERVER;\n          }\n else           if (Disposes.class.equals(type)) {\n            return Kind.DISPOSER;\n          }\n        }\n      }\n    }\n  }\n  return Kind.BUSINESS;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 129,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 81,
        "startColumnNumber" : 12,
        "endLineNumber" : 81,
        "endColumnNumber" : 99
      },
      "nodeContext" : "!method.getReturnType().equals(Void.TYPE) && method.isAnnotationPresent(Produces.class)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "java.lang.Class<>"
  } ],
  "positionList" : [ {
    "charLength" : 22,
    "startLineNumber" : 81,
    "startColumnNumber" : 13,
    "endLineNumber" : 81,
    "endColumnNumber" : 35
  } ],
  "layoutRelationDataList" : [ ]
}