{
  "id" : 445,
  "expression" : "context != null && !(fieldName instanceof Integer)",
  "projectName" : "alibaba@fastjson",
  "commitID" : "d3797da65a3d9f804c9e275c25395c59e31f097d",
  "filePath" : "/src/main/java/com/alibaba/fastjson/parser/MapDeserializer.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "context != null && !(fieldName instanceof Integer)",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 50,
      "startLineNumber" : 145,
      "startColumnNumber" : 24,
      "endLineNumber" : 145,
      "endColumnNumber" : 74
    },
    "astNodeNumber" : 10,
    "astHeight" : 6,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 145,
        "startColumnNumber" : 20,
        "endLineNumber" : 147,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (context != null && !(fieldName instanceof Integer)) {\n  parser.popContext();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1018,
        "startLineNumber" : 126,
        "startColumnNumber" : 103,
        "endLineNumber" : 150,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  String typeName=lexer.scanSymbol(parser.symbolTable,'\"');\n  Class<?> clazz=TypeUtils.loadClass(typeName,parser.config.defaultClassLoader);\n  if (clazz == map.getClass()) {\n    lexer.nextToken(JSONToken.COMMA);\n    if (lexer.token == JSONToken.RBRACE) {\n      lexer.nextToken(JSONToken.COMMA);\n      return map;\n    }\n    continue;\n  }\n  ObjectDeserializer deserializer=parser.config.getDeserializer(clazz);\n  lexer.nextToken(JSONToken.COMMA);\n  parser.resolveStatus=DefaultJSONParser.TypeNameRedirect;\n  if (context != null && !(fieldName instanceof Integer)) {\n    parser.popContext();\n  }\n  return (Map)deserializer.deserialze(parser,clazz,fieldName);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 114,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1105,
        "startLineNumber" : 126,
        "startColumnNumber" : 16,
        "endLineNumber" : 150,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (key == JSON.DEFAULT_TYPE_KEY && !lexer.isEnabled(Feature.DisableSpecialKeyDetect)) {\n  String typeName=lexer.scanSymbol(parser.symbolTable,'\"');\n  Class<?> clazz=TypeUtils.loadClass(typeName,parser.config.defaultClassLoader);\n  if (clazz == map.getClass()) {\n    lexer.nextToken(JSONToken.COMMA);\n    if (lexer.token == JSONToken.RBRACE) {\n      lexer.nextToken(JSONToken.COMMA);\n      return map;\n    }\n    continue;\n  }\n  ObjectDeserializer deserializer=parser.config.getDeserializer(clazz);\n  lexer.nextToken(JSONToken.COMMA);\n  parser.resolveStatus=DefaultJSONParser.TypeNameRedirect;\n  if (context != null && !(fieldName instanceof Integer)) {\n    parser.popContext();\n  }\n  return (Map)deserializer.deserialze(parser,clazz,fieldName);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 128,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 4010,
        "startLineNumber" : 72,
        "startColumnNumber" : 21,
        "endLineNumber" : 176,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  lexer.skipWhitespace();\n  char ch=lexer.ch;\n  if ((lexer.features & Feature.AllowArbitraryCommas.mask) != 0) {\n    while (ch == ',') {\n      lexer.next();\n      lexer.skipWhitespace();\n      ch=lexer.ch;\n    }\n  }\n  String key;\n  if (ch == '\"') {\n    key=lexer.scanSymbol(parser.symbolTable,'\"');\n    lexer.skipWhitespace();\n    ch=lexer.ch;\n    if (ch != ':') {\n      throw new JSONException(\"expect ':' at \" + lexer.pos);\n    }\n  }\n else   if (ch == '}') {\n    lexer.next();\n    lexer.sp=0;\n    lexer.nextToken(JSONToken.COMMA);\n    return map;\n  }\n else   if (ch == '\\'') {\n    if ((lexer.features & Feature.AllowSingleQuotes.mask) == 0) {\n      throw new JSONException(\"syntax error\");\n    }\n    key=lexer.scanSymbol(parser.symbolTable,'\\'');\n    lexer.skipWhitespace();\n    ch=lexer.ch;\n    if (ch != ':') {\n      throw new JSONException(\"expect ':' at \" + lexer.pos);\n    }\n  }\n else {\n    if ((lexer.features & Feature.AllowUnQuotedFieldNames.mask) == 0) {\n      throw new JSONException(\"syntax error\");\n    }\n    key=lexer.scanSymbolUnQuoted(parser.symbolTable);\n    lexer.skipWhitespace();\n    ch=lexer.ch;\n    if (ch != ':') {\n      throw new JSONException(\"expect ':' at \" + lexer.pos + \", actual \"+ ch);\n    }\n  }\n  lexer.next();\n  lexer.skipWhitespace();\n  ch=lexer.ch;\n  lexer.sp=0;\n  if (key == JSON.DEFAULT_TYPE_KEY && !lexer.isEnabled(Feature.DisableSpecialKeyDetect)) {\n    String typeName=lexer.scanSymbol(parser.symbolTable,'\"');\n    Class<?> clazz=TypeUtils.loadClass(typeName,parser.config.defaultClassLoader);\n    if (clazz == map.getClass()) {\n      lexer.nextToken(JSONToken.COMMA);\n      if (lexer.token == JSONToken.RBRACE) {\n        lexer.nextToken(JSONToken.COMMA);\n        return map;\n      }\n      continue;\n    }\n    ObjectDeserializer deserializer=parser.config.getDeserializer(clazz);\n    lexer.nextToken(JSONToken.COMMA);\n    parser.resolveStatus=DefaultJSONParser.TypeNameRedirect;\n    if (context != null && !(fieldName instanceof Integer)) {\n      parser.popContext();\n    }\n    return (Map)deserializer.deserialze(parser,clazz,fieldName);\n  }\n  Object value;\n  lexer.nextToken();\n  parser.setContext(context);\n  if (lexer.token == JSONToken.NULL) {\n    value=null;\n    lexer.nextToken();\n  }\n else {\n    value=parser.parseObject(valueType,key);\n  }\n  map.put(key,value);\n  parser.checkMapResolve(map,key);\n  parser.setContext(context,value,key);\n  final int tok=lexer.token;\n  if (tok == JSONToken.EOF || tok == JSONToken.RBRACKET) {\n    return map;\n  }\n  if (tok == JSONToken.RBRACE) {\n    lexer.nextToken();\n    return map;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 469,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4019,
        "startLineNumber" : 72,
        "startColumnNumber" : 12,
        "endLineNumber" : 176,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (; ; ) {\n  lexer.skipWhitespace();\n  char ch=lexer.ch;\n  if ((lexer.features & Feature.AllowArbitraryCommas.mask) != 0) {\n    while (ch == ',') {\n      lexer.next();\n      lexer.skipWhitespace();\n      ch=lexer.ch;\n    }\n  }\n  String key;\n  if (ch == '\"') {\n    key=lexer.scanSymbol(parser.symbolTable,'\"');\n    lexer.skipWhitespace();\n    ch=lexer.ch;\n    if (ch != ':') {\n      throw new JSONException(\"expect ':' at \" + lexer.pos);\n    }\n  }\n else   if (ch == '}') {\n    lexer.next();\n    lexer.sp=0;\n    lexer.nextToken(JSONToken.COMMA);\n    return map;\n  }\n else   if (ch == '\\'') {\n    if ((lexer.features & Feature.AllowSingleQuotes.mask) == 0) {\n      throw new JSONException(\"syntax error\");\n    }\n    key=lexer.scanSymbol(parser.symbolTable,'\\'');\n    lexer.skipWhitespace();\n    ch=lexer.ch;\n    if (ch != ':') {\n      throw new JSONException(\"expect ':' at \" + lexer.pos);\n    }\n  }\n else {\n    if ((lexer.features & Feature.AllowUnQuotedFieldNames.mask) == 0) {\n      throw new JSONException(\"syntax error\");\n    }\n    key=lexer.scanSymbolUnQuoted(parser.symbolTable);\n    lexer.skipWhitespace();\n    ch=lexer.ch;\n    if (ch != ':') {\n      throw new JSONException(\"expect ':' at \" + lexer.pos + \", actual \"+ ch);\n    }\n  }\n  lexer.next();\n  lexer.skipWhitespace();\n  ch=lexer.ch;\n  lexer.sp=0;\n  if (key == JSON.DEFAULT_TYPE_KEY && !lexer.isEnabled(Feature.DisableSpecialKeyDetect)) {\n    String typeName=lexer.scanSymbol(parser.symbolTable,'\"');\n    Class<?> clazz=TypeUtils.loadClass(typeName,parser.config.defaultClassLoader);\n    if (clazz == map.getClass()) {\n      lexer.nextToken(JSONToken.COMMA);\n      if (lexer.token == JSONToken.RBRACE) {\n        lexer.nextToken(JSONToken.COMMA);\n        return map;\n      }\n      continue;\n    }\n    ObjectDeserializer deserializer=parser.config.getDeserializer(clazz);\n    lexer.nextToken(JSONToken.COMMA);\n    parser.resolveStatus=DefaultJSONParser.TypeNameRedirect;\n    if (context != null && !(fieldName instanceof Integer)) {\n      parser.popContext();\n    }\n    return (Map)deserializer.deserialze(parser,clazz,fieldName);\n  }\n  Object value;\n  lexer.nextToken();\n  parser.setContext(context);\n  if (lexer.token == JSONToken.NULL) {\n    value=null;\n    lexer.nextToken();\n  }\n else {\n    value=parser.parseObject(valueType,key);\n  }\n  map.put(key,value);\n  parser.checkMapResolve(map,key);\n  parser.setContext(context,value,key);\n  final int tok=lexer.token;\n  if (tok == JSONToken.EOF || tok == JSONToken.RBRACKET) {\n    return map;\n  }\n  if (tok == JSONToken.RBRACE) {\n    lexer.nextToken();\n    return map;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 470,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4043,
        "startLineNumber" : 71,
        "startColumnNumber" : 12,
        "endLineNumber" : 177,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (; ; ) {\n    lexer.skipWhitespace();\n    char ch=lexer.ch;\n    if ((lexer.features & Feature.AllowArbitraryCommas.mask) != 0) {\n      while (ch == ',') {\n        lexer.next();\n        lexer.skipWhitespace();\n        ch=lexer.ch;\n      }\n    }\n    String key;\n    if (ch == '\"') {\n      key=lexer.scanSymbol(parser.symbolTable,'\"');\n      lexer.skipWhitespace();\n      ch=lexer.ch;\n      if (ch != ':') {\n        throw new JSONException(\"expect ':' at \" + lexer.pos);\n      }\n    }\n else     if (ch == '}') {\n      lexer.next();\n      lexer.sp=0;\n      lexer.nextToken(JSONToken.COMMA);\n      return map;\n    }\n else     if (ch == '\\'') {\n      if ((lexer.features & Feature.AllowSingleQuotes.mask) == 0) {\n        throw new JSONException(\"syntax error\");\n      }\n      key=lexer.scanSymbol(parser.symbolTable,'\\'');\n      lexer.skipWhitespace();\n      ch=lexer.ch;\n      if (ch != ':') {\n        throw new JSONException(\"expect ':' at \" + lexer.pos);\n      }\n    }\n else {\n      if ((lexer.features & Feature.AllowUnQuotedFieldNames.mask) == 0) {\n        throw new JSONException(\"syntax error\");\n      }\n      key=lexer.scanSymbolUnQuoted(parser.symbolTable);\n      lexer.skipWhitespace();\n      ch=lexer.ch;\n      if (ch != ':') {\n        throw new JSONException(\"expect ':' at \" + lexer.pos + \", actual \"+ ch);\n      }\n    }\n    lexer.next();\n    lexer.skipWhitespace();\n    ch=lexer.ch;\n    lexer.sp=0;\n    if (key == JSON.DEFAULT_TYPE_KEY && !lexer.isEnabled(Feature.DisableSpecialKeyDetect)) {\n      String typeName=lexer.scanSymbol(parser.symbolTable,'\"');\n      Class<?> clazz=TypeUtils.loadClass(typeName,parser.config.defaultClassLoader);\n      if (clazz == map.getClass()) {\n        lexer.nextToken(JSONToken.COMMA);\n        if (lexer.token == JSONToken.RBRACE) {\n          lexer.nextToken(JSONToken.COMMA);\n          return map;\n        }\n        continue;\n      }\n      ObjectDeserializer deserializer=parser.config.getDeserializer(clazz);\n      lexer.nextToken(JSONToken.COMMA);\n      parser.resolveStatus=DefaultJSONParser.TypeNameRedirect;\n      if (context != null && !(fieldName instanceof Integer)) {\n        parser.popContext();\n      }\n      return (Map)deserializer.deserialze(parser,clazz,fieldName);\n    }\n    Object value;\n    lexer.nextToken();\n    parser.setContext(context);\n    if (lexer.token == JSONToken.NULL) {\n      value=null;\n      lexer.nextToken();\n    }\n else {\n      value=parser.parseObject(valueType,key);\n    }\n    map.put(key,value);\n    parser.checkMapResolve(map,key);\n    parser.setContext(context,value,key);\n    final int tok=lexer.token;\n    if (tok == JSONToken.EOF || tok == JSONToken.RBRACKET) {\n      return map;\n    }\n    if (tok == JSONToken.RBRACE) {\n      lexer.nextToken();\n      return map;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 471,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4107,
        "startLineNumber" : 71,
        "startColumnNumber" : 8,
        "endLineNumber" : 179,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  for (; ; ) {\n    lexer.skipWhitespace();\n    char ch=lexer.ch;\n    if ((lexer.features & Feature.AllowArbitraryCommas.mask) != 0) {\n      while (ch == ',') {\n        lexer.next();\n        lexer.skipWhitespace();\n        ch=lexer.ch;\n      }\n    }\n    String key;\n    if (ch == '\"') {\n      key=lexer.scanSymbol(parser.symbolTable,'\"');\n      lexer.skipWhitespace();\n      ch=lexer.ch;\n      if (ch != ':') {\n        throw new JSONException(\"expect ':' at \" + lexer.pos);\n      }\n    }\n else     if (ch == '}') {\n      lexer.next();\n      lexer.sp=0;\n      lexer.nextToken(JSONToken.COMMA);\n      return map;\n    }\n else     if (ch == '\\'') {\n      if ((lexer.features & Feature.AllowSingleQuotes.mask) == 0) {\n        throw new JSONException(\"syntax error\");\n      }\n      key=lexer.scanSymbol(parser.symbolTable,'\\'');\n      lexer.skipWhitespace();\n      ch=lexer.ch;\n      if (ch != ':') {\n        throw new JSONException(\"expect ':' at \" + lexer.pos);\n      }\n    }\n else {\n      if ((lexer.features & Feature.AllowUnQuotedFieldNames.mask) == 0) {\n        throw new JSONException(\"syntax error\");\n      }\n      key=lexer.scanSymbolUnQuoted(parser.symbolTable);\n      lexer.skipWhitespace();\n      ch=lexer.ch;\n      if (ch != ':') {\n        throw new JSONException(\"expect ':' at \" + lexer.pos + \", actual \"+ ch);\n      }\n    }\n    lexer.next();\n    lexer.skipWhitespace();\n    ch=lexer.ch;\n    lexer.sp=0;\n    if (key == JSON.DEFAULT_TYPE_KEY && !lexer.isEnabled(Feature.DisableSpecialKeyDetect)) {\n      String typeName=lexer.scanSymbol(parser.symbolTable,'\"');\n      Class<?> clazz=TypeUtils.loadClass(typeName,parser.config.defaultClassLoader);\n      if (clazz == map.getClass()) {\n        lexer.nextToken(JSONToken.COMMA);\n        if (lexer.token == JSONToken.RBRACE) {\n          lexer.nextToken(JSONToken.COMMA);\n          return map;\n        }\n        continue;\n      }\n      ObjectDeserializer deserializer=parser.config.getDeserializer(clazz);\n      lexer.nextToken(JSONToken.COMMA);\n      parser.resolveStatus=DefaultJSONParser.TypeNameRedirect;\n      if (context != null && !(fieldName instanceof Integer)) {\n        parser.popContext();\n      }\n      return (Map)deserializer.deserialze(parser,clazz,fieldName);\n    }\n    Object value;\n    lexer.nextToken();\n    parser.setContext(context);\n    if (lexer.token == JSONToken.NULL) {\n      value=null;\n      lexer.nextToken();\n    }\n else {\n      value=parser.parseObject(valueType,key);\n    }\n    map.put(key,value);\n    parser.checkMapResolve(map,key);\n    parser.setContext(context,value,key);\n    final int tok=lexer.token;\n    if (tok == JSONToken.EOF || tok == JSONToken.RBRACKET) {\n      return map;\n    }\n    if (tok == JSONToken.RBRACE) {\n      lexer.nextToken();\n      return map;\n    }\n  }\n}\n  finally {\n  parser.setContext(context);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 478,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4355,
        "startLineNumber" : 63,
        "startColumnNumber" : 116,
        "endLineNumber" : 181,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  JSONLexer lexer=parser.lexer;\n  if (lexer.token != JSONToken.LBRACE) {\n    throw new JSONException(\"syntax error, expect {, actual \" + lexer.token);\n  }\n  ParseContext context=parser.contex;\n  try {\n    for (; ; ) {\n      lexer.skipWhitespace();\n      char ch=lexer.ch;\n      if ((lexer.features & Feature.AllowArbitraryCommas.mask) != 0) {\n        while (ch == ',') {\n          lexer.next();\n          lexer.skipWhitespace();\n          ch=lexer.ch;\n        }\n      }\n      String key;\n      if (ch == '\"') {\n        key=lexer.scanSymbol(parser.symbolTable,'\"');\n        lexer.skipWhitespace();\n        ch=lexer.ch;\n        if (ch != ':') {\n          throw new JSONException(\"expect ':' at \" + lexer.pos);\n        }\n      }\n else       if (ch == '}') {\n        lexer.next();\n        lexer.sp=0;\n        lexer.nextToken(JSONToken.COMMA);\n        return map;\n      }\n else       if (ch == '\\'') {\n        if ((lexer.features & Feature.AllowSingleQuotes.mask) == 0) {\n          throw new JSONException(\"syntax error\");\n        }\n        key=lexer.scanSymbol(parser.symbolTable,'\\'');\n        lexer.skipWhitespace();\n        ch=lexer.ch;\n        if (ch != ':') {\n          throw new JSONException(\"expect ':' at \" + lexer.pos);\n        }\n      }\n else {\n        if ((lexer.features & Feature.AllowUnQuotedFieldNames.mask) == 0) {\n          throw new JSONException(\"syntax error\");\n        }\n        key=lexer.scanSymbolUnQuoted(parser.symbolTable);\n        lexer.skipWhitespace();\n        ch=lexer.ch;\n        if (ch != ':') {\n          throw new JSONException(\"expect ':' at \" + lexer.pos + \", actual \"+ ch);\n        }\n      }\n      lexer.next();\n      lexer.skipWhitespace();\n      ch=lexer.ch;\n      lexer.sp=0;\n      if (key == JSON.DEFAULT_TYPE_KEY && !lexer.isEnabled(Feature.DisableSpecialKeyDetect)) {\n        String typeName=lexer.scanSymbol(parser.symbolTable,'\"');\n        Class<?> clazz=TypeUtils.loadClass(typeName,parser.config.defaultClassLoader);\n        if (clazz == map.getClass()) {\n          lexer.nextToken(JSONToken.COMMA);\n          if (lexer.token == JSONToken.RBRACE) {\n            lexer.nextToken(JSONToken.COMMA);\n            return map;\n          }\n          continue;\n        }\n        ObjectDeserializer deserializer=parser.config.getDeserializer(clazz);\n        lexer.nextToken(JSONToken.COMMA);\n        parser.resolveStatus=DefaultJSONParser.TypeNameRedirect;\n        if (context != null && !(fieldName instanceof Integer)) {\n          parser.popContext();\n        }\n        return (Map)deserializer.deserialze(parser,clazz,fieldName);\n      }\n      Object value;\n      lexer.nextToken();\n      parser.setContext(context);\n      if (lexer.token == JSONToken.NULL) {\n        value=null;\n        lexer.nextToken();\n      }\n else {\n        value=parser.parseObject(valueType,key);\n      }\n      map.put(key,value);\n      parser.checkMapResolve(map,key);\n      parser.setContext(context,value,key);\n      final int tok=lexer.token;\n      if (tok == JSONToken.EOF || tok == JSONToken.RBRACKET) {\n        return map;\n      }\n      if (tok == JSONToken.RBRACE) {\n        lexer.nextToken();\n        return map;\n      }\n    }\n  }\n  finally {\n    parser.setContext(context);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 513,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4501,
        "startLineNumber" : 62,
        "startColumnNumber" : 4,
        "endLineNumber" : 181,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressWarnings(\"rawtypes\") public static Map parseMap(DefaultJSONParser parser,Map<String,Object> map,Type valueType,Object fieldName){\n  JSONLexer lexer=parser.lexer;\n  if (lexer.token != JSONToken.LBRACE) {\n    throw new JSONException(\"syntax error, expect {, actual \" + lexer.token);\n  }\n  ParseContext context=parser.contex;\n  try {\n    for (; ; ) {\n      lexer.skipWhitespace();\n      char ch=lexer.ch;\n      if ((lexer.features & Feature.AllowArbitraryCommas.mask) != 0) {\n        while (ch == ',') {\n          lexer.next();\n          lexer.skipWhitespace();\n          ch=lexer.ch;\n        }\n      }\n      String key;\n      if (ch == '\"') {\n        key=lexer.scanSymbol(parser.symbolTable,'\"');\n        lexer.skipWhitespace();\n        ch=lexer.ch;\n        if (ch != ':') {\n          throw new JSONException(\"expect ':' at \" + lexer.pos);\n        }\n      }\n else       if (ch == '}') {\n        lexer.next();\n        lexer.sp=0;\n        lexer.nextToken(JSONToken.COMMA);\n        return map;\n      }\n else       if (ch == '\\'') {\n        if ((lexer.features & Feature.AllowSingleQuotes.mask) == 0) {\n          throw new JSONException(\"syntax error\");\n        }\n        key=lexer.scanSymbol(parser.symbolTable,'\\'');\n        lexer.skipWhitespace();\n        ch=lexer.ch;\n        if (ch != ':') {\n          throw new JSONException(\"expect ':' at \" + lexer.pos);\n        }\n      }\n else {\n        if ((lexer.features & Feature.AllowUnQuotedFieldNames.mask) == 0) {\n          throw new JSONException(\"syntax error\");\n        }\n        key=lexer.scanSymbolUnQuoted(parser.symbolTable);\n        lexer.skipWhitespace();\n        ch=lexer.ch;\n        if (ch != ':') {\n          throw new JSONException(\"expect ':' at \" + lexer.pos + \", actual \"+ ch);\n        }\n      }\n      lexer.next();\n      lexer.skipWhitespace();\n      ch=lexer.ch;\n      lexer.sp=0;\n      if (key == JSON.DEFAULT_TYPE_KEY && !lexer.isEnabled(Feature.DisableSpecialKeyDetect)) {\n        String typeName=lexer.scanSymbol(parser.symbolTable,'\"');\n        Class<?> clazz=TypeUtils.loadClass(typeName,parser.config.defaultClassLoader);\n        if (clazz == map.getClass()) {\n          lexer.nextToken(JSONToken.COMMA);\n          if (lexer.token == JSONToken.RBRACE) {\n            lexer.nextToken(JSONToken.COMMA);\n            return map;\n          }\n          continue;\n        }\n        ObjectDeserializer deserializer=parser.config.getDeserializer(clazz);\n        lexer.nextToken(JSONToken.COMMA);\n        parser.resolveStatus=DefaultJSONParser.TypeNameRedirect;\n        if (context != null && !(fieldName instanceof Integer)) {\n          parser.popContext();\n        }\n        return (Map)deserializer.deserialze(parser,clazz,fieldName);\n      }\n      Object value;\n      lexer.nextToken();\n      parser.setContext(context);\n      if (lexer.token == JSONToken.NULL) {\n        value=null;\n        lexer.nextToken();\n      }\n else {\n        value=parser.parseObject(valueType,key);\n      }\n      map.put(key,value);\n      parser.checkMapResolve(map,key);\n      parser.setContext(context,value,key);\n      final int tok=lexer.token;\n      if (tok == JSONToken.EOF || tok == JSONToken.RBRACKET) {\n        return map;\n      }\n      if (tok == JSONToken.RBRACE) {\n        lexer.nextToken();\n        return map;\n      }\n    }\n  }\n  finally {\n    parser.setContext(context);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 543,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 145,
        "startColumnNumber" : 20,
        "endLineNumber" : 147,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (context != null && !(fieldName instanceof Integer)) {\n  parser.popContext();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 7
    },
    "tokenLength" : 7,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 50,
    "startLineNumber" : 145,
    "startColumnNumber" : 24,
    "endLineNumber" : 145,
    "endColumnNumber" : 74
  } ],
  "layoutRelationDataList" : [ ]
}