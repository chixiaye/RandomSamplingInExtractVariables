{
  "id" : 376,
  "expression" : "Mockito",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/test/java/io/reactivex/internal/operators/observable/ObservableOnErrorResumeNextViaFunctionTest.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Mockito",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 66,
      "startColumnNumber" : 28,
      "endLineNumber" : 66,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 66,
        "startColumnNumber" : 28,
        "endLineNumber" : 66,
        "endColumnNumber" : 43
      },
      "nodeContext" : "Mockito.never()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 66,
        "startColumnNumber" : 8,
        "endLineNumber" : 66,
        "endColumnNumber" : 44
      },
      "nodeContext" : "verify(NbpObserver,Mockito.never())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 66,
        "startColumnNumber" : 8,
        "endLineNumber" : 66,
        "endColumnNumber" : 74
      },
      "nodeContext" : "verify(NbpObserver,Mockito.never()).onError(any(Throwable.class))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 66,
        "startColumnNumber" : 8,
        "endLineNumber" : 66,
        "endColumnNumber" : 75
      },
      "nodeContext" : "verify(NbpObserver,Mockito.never()).onError(any(Throwable.class));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1610,
        "startLineNumber" : 37,
        "startColumnNumber" : 57,
        "endLineNumber" : 74,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final AtomicReference<Throwable> receivedException=new AtomicReference<Throwable>();\n  Observable<String> w=Observable.create(new ObservableConsumable<String>(){\n    @Override public void subscribe(    Observer<? super String> NbpObserver){\n      NbpObserver.onSubscribe(EmptyDisposable.INSTANCE);\n      NbpObserver.onNext(\"one\");\n      NbpObserver.onError(new Throwable(\"injected failure\"));\n      NbpObserver.onNext(\"two\");\n      NbpObserver.onNext(\"three\");\n    }\n  }\n);\n  Function<Throwable,Observable<String>> resume=new Function<Throwable,Observable<String>>(){\n    @Override public Observable<String> apply(    Throwable t1){\n      receivedException.set(t1);\n      return Observable.just(\"twoResume\",\"threeResume\");\n    }\n  }\n;\n  Observable<String> NbpObservable=w.onErrorResumeNext(resume);\n  Observer<String> NbpObserver=TestHelper.mockObserver();\n  NbpObservable.subscribe(NbpObserver);\n  verify(NbpObserver,Mockito.never()).onError(any(Throwable.class));\n  verify(NbpObserver,times(1)).onComplete();\n  verify(NbpObserver,times(1)).onNext(\"one\");\n  verify(NbpObserver,Mockito.never()).onNext(\"two\");\n  verify(NbpObserver,Mockito.never()).onNext(\"three\");\n  verify(NbpObserver,times(1)).onNext(\"twoResume\");\n  verify(NbpObserver,times(1)).onNext(\"threeResume\");\n  assertNotNull(receivedException.get());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 237,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1674,
        "startLineNumber" : 36,
        "startColumnNumber" : 4,
        "endLineNumber" : 74,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testResumeNextWithSynchronousExecution(){\n  final AtomicReference<Throwable> receivedException=new AtomicReference<Throwable>();\n  Observable<String> w=Observable.create(new ObservableConsumable<String>(){\n    @Override public void subscribe(    Observer<? super String> NbpObserver){\n      NbpObserver.onSubscribe(EmptyDisposable.INSTANCE);\n      NbpObserver.onNext(\"one\");\n      NbpObserver.onError(new Throwable(\"injected failure\"));\n      NbpObserver.onNext(\"two\");\n      NbpObserver.onNext(\"three\");\n    }\n  }\n);\n  Function<Throwable,Observable<String>> resume=new Function<Throwable,Observable<String>>(){\n    @Override public Observable<String> apply(    Throwable t1){\n      receivedException.set(t1);\n      return Observable.just(\"twoResume\",\"threeResume\");\n    }\n  }\n;\n  Observable<String> NbpObservable=w.onErrorResumeNext(resume);\n  Observer<String> NbpObserver=TestHelper.mockObserver();\n  NbpObservable.subscribe(NbpObserver);\n  verify(NbpObserver,Mockito.never()).onError(any(Throwable.class));\n  verify(NbpObserver,times(1)).onComplete();\n  verify(NbpObserver,times(1)).onNext(\"one\");\n  verify(NbpObserver,Mockito.never()).onNext(\"two\");\n  verify(NbpObserver,Mockito.never()).onNext(\"three\");\n  verify(NbpObserver,times(1)).onNext(\"twoResume\");\n  verify(NbpObserver,times(1)).onNext(\"threeResume\");\n  assertNotNull(receivedException.get());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 243,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 66,
        "startColumnNumber" : 8,
        "endLineNumber" : 66,
        "endColumnNumber" : 75
      },
      "nodeContext" : "verify(NbpObserver,Mockito.never()).onError(any(Throwable.class));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "Mockito",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 69,
      "startColumnNumber" : 28,
      "endLineNumber" : 69,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 69,
        "startColumnNumber" : 28,
        "endLineNumber" : 69,
        "endColumnNumber" : 43
      },
      "nodeContext" : "Mockito.never()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 69,
        "startColumnNumber" : 8,
        "endLineNumber" : 69,
        "endColumnNumber" : 44
      },
      "nodeContext" : "verify(NbpObserver,Mockito.never())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 69,
        "startColumnNumber" : 8,
        "endLineNumber" : 69,
        "endColumnNumber" : 58
      },
      "nodeContext" : "verify(NbpObserver,Mockito.never()).onNext(\"two\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 69,
        "startColumnNumber" : 8,
        "endLineNumber" : 69,
        "endColumnNumber" : 59
      },
      "nodeContext" : "verify(NbpObserver,Mockito.never()).onNext(\"two\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1610,
        "startLineNumber" : 37,
        "startColumnNumber" : 57,
        "endLineNumber" : 74,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final AtomicReference<Throwable> receivedException=new AtomicReference<Throwable>();\n  Observable<String> w=Observable.create(new ObservableConsumable<String>(){\n    @Override public void subscribe(    Observer<? super String> NbpObserver){\n      NbpObserver.onSubscribe(EmptyDisposable.INSTANCE);\n      NbpObserver.onNext(\"one\");\n      NbpObserver.onError(new Throwable(\"injected failure\"));\n      NbpObserver.onNext(\"two\");\n      NbpObserver.onNext(\"three\");\n    }\n  }\n);\n  Function<Throwable,Observable<String>> resume=new Function<Throwable,Observable<String>>(){\n    @Override public Observable<String> apply(    Throwable t1){\n      receivedException.set(t1);\n      return Observable.just(\"twoResume\",\"threeResume\");\n    }\n  }\n;\n  Observable<String> NbpObservable=w.onErrorResumeNext(resume);\n  Observer<String> NbpObserver=TestHelper.mockObserver();\n  NbpObservable.subscribe(NbpObserver);\n  verify(NbpObserver,Mockito.never()).onError(any(Throwable.class));\n  verify(NbpObserver,times(1)).onComplete();\n  verify(NbpObserver,times(1)).onNext(\"one\");\n  verify(NbpObserver,Mockito.never()).onNext(\"two\");\n  verify(NbpObserver,Mockito.never()).onNext(\"three\");\n  verify(NbpObserver,times(1)).onNext(\"twoResume\");\n  verify(NbpObserver,times(1)).onNext(\"threeResume\");\n  assertNotNull(receivedException.get());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 237,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1674,
        "startLineNumber" : 36,
        "startColumnNumber" : 4,
        "endLineNumber" : 74,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testResumeNextWithSynchronousExecution(){\n  final AtomicReference<Throwable> receivedException=new AtomicReference<Throwable>();\n  Observable<String> w=Observable.create(new ObservableConsumable<String>(){\n    @Override public void subscribe(    Observer<? super String> NbpObserver){\n      NbpObserver.onSubscribe(EmptyDisposable.INSTANCE);\n      NbpObserver.onNext(\"one\");\n      NbpObserver.onError(new Throwable(\"injected failure\"));\n      NbpObserver.onNext(\"two\");\n      NbpObserver.onNext(\"three\");\n    }\n  }\n);\n  Function<Throwable,Observable<String>> resume=new Function<Throwable,Observable<String>>(){\n    @Override public Observable<String> apply(    Throwable t1){\n      receivedException.set(t1);\n      return Observable.just(\"twoResume\",\"threeResume\");\n    }\n  }\n;\n  Observable<String> NbpObservable=w.onErrorResumeNext(resume);\n  Observer<String> NbpObserver=TestHelper.mockObserver();\n  NbpObservable.subscribe(NbpObserver);\n  verify(NbpObserver,Mockito.never()).onError(any(Throwable.class));\n  verify(NbpObserver,times(1)).onComplete();\n  verify(NbpObserver,times(1)).onNext(\"one\");\n  verify(NbpObserver,Mockito.never()).onNext(\"two\");\n  verify(NbpObserver,Mockito.never()).onNext(\"three\");\n  verify(NbpObserver,times(1)).onNext(\"twoResume\");\n  verify(NbpObserver,times(1)).onNext(\"threeResume\");\n  assertNotNull(receivedException.get());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 243,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 69,
        "startColumnNumber" : 8,
        "endLineNumber" : 69,
        "endColumnNumber" : 59
      },
      "nodeContext" : "verify(NbpObserver,Mockito.never()).onNext(\"two\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "Mockito",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 70,
      "startColumnNumber" : 28,
      "endLineNumber" : 70,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 70,
        "startColumnNumber" : 28,
        "endLineNumber" : 70,
        "endColumnNumber" : 43
      },
      "nodeContext" : "Mockito.never()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 70,
        "endColumnNumber" : 44
      },
      "nodeContext" : "verify(NbpObserver,Mockito.never())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 70,
        "endColumnNumber" : 60
      },
      "nodeContext" : "verify(NbpObserver,Mockito.never()).onNext(\"three\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 70,
        "endColumnNumber" : 61
      },
      "nodeContext" : "verify(NbpObserver,Mockito.never()).onNext(\"three\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1610,
        "startLineNumber" : 37,
        "startColumnNumber" : 57,
        "endLineNumber" : 74,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final AtomicReference<Throwable> receivedException=new AtomicReference<Throwable>();\n  Observable<String> w=Observable.create(new ObservableConsumable<String>(){\n    @Override public void subscribe(    Observer<? super String> NbpObserver){\n      NbpObserver.onSubscribe(EmptyDisposable.INSTANCE);\n      NbpObserver.onNext(\"one\");\n      NbpObserver.onError(new Throwable(\"injected failure\"));\n      NbpObserver.onNext(\"two\");\n      NbpObserver.onNext(\"three\");\n    }\n  }\n);\n  Function<Throwable,Observable<String>> resume=new Function<Throwable,Observable<String>>(){\n    @Override public Observable<String> apply(    Throwable t1){\n      receivedException.set(t1);\n      return Observable.just(\"twoResume\",\"threeResume\");\n    }\n  }\n;\n  Observable<String> NbpObservable=w.onErrorResumeNext(resume);\n  Observer<String> NbpObserver=TestHelper.mockObserver();\n  NbpObservable.subscribe(NbpObserver);\n  verify(NbpObserver,Mockito.never()).onError(any(Throwable.class));\n  verify(NbpObserver,times(1)).onComplete();\n  verify(NbpObserver,times(1)).onNext(\"one\");\n  verify(NbpObserver,Mockito.never()).onNext(\"two\");\n  verify(NbpObserver,Mockito.never()).onNext(\"three\");\n  verify(NbpObserver,times(1)).onNext(\"twoResume\");\n  verify(NbpObserver,times(1)).onNext(\"threeResume\");\n  assertNotNull(receivedException.get());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 237,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1674,
        "startLineNumber" : 36,
        "startColumnNumber" : 4,
        "endLineNumber" : 74,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testResumeNextWithSynchronousExecution(){\n  final AtomicReference<Throwable> receivedException=new AtomicReference<Throwable>();\n  Observable<String> w=Observable.create(new ObservableConsumable<String>(){\n    @Override public void subscribe(    Observer<? super String> NbpObserver){\n      NbpObserver.onSubscribe(EmptyDisposable.INSTANCE);\n      NbpObserver.onNext(\"one\");\n      NbpObserver.onError(new Throwable(\"injected failure\"));\n      NbpObserver.onNext(\"two\");\n      NbpObserver.onNext(\"three\");\n    }\n  }\n);\n  Function<Throwable,Observable<String>> resume=new Function<Throwable,Observable<String>>(){\n    @Override public Observable<String> apply(    Throwable t1){\n      receivedException.set(t1);\n      return Observable.just(\"twoResume\",\"threeResume\");\n    }\n  }\n;\n  Observable<String> NbpObservable=w.onErrorResumeNext(resume);\n  Observer<String> NbpObserver=TestHelper.mockObserver();\n  NbpObservable.subscribe(NbpObserver);\n  verify(NbpObserver,Mockito.never()).onError(any(Throwable.class));\n  verify(NbpObserver,times(1)).onComplete();\n  verify(NbpObserver,times(1)).onNext(\"one\");\n  verify(NbpObserver,Mockito.never()).onNext(\"two\");\n  verify(NbpObserver,Mockito.never()).onNext(\"three\");\n  verify(NbpObserver,times(1)).onNext(\"twoResume\");\n  verify(NbpObserver,times(1)).onNext(\"threeResume\");\n  assertNotNull(receivedException.get());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 243,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 70,
        "endColumnNumber" : 61
      },
      "nodeContext" : "verify(NbpObserver,Mockito.never()).onNext(\"three\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 66,
    "startColumnNumber" : 28,
    "endLineNumber" : 66,
    "endColumnNumber" : 35
  }, {
    "charLength" : 7,
    "startLineNumber" : 69,
    "startColumnNumber" : 28,
    "endLineNumber" : 69,
    "endColumnNumber" : 35
  }, {
    "charLength" : 7,
    "startLineNumber" : 70,
    "startColumnNumber" : 28,
    "endLineNumber" : 70,
    "endColumnNumber" : 35
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  } ]
}