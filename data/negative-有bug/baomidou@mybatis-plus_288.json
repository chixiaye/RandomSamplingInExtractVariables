{
  "id" : 288,
  "expression" : "logger",
  "projectName" : "baomidou@mybatis-plus",
  "commitID" : "7815611a659da4cc8d5443f5ef4c10ca0d937582",
  "filePath" : "/mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/plugins/pagination/optimize/JsqlParserCountOptimize.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "logger",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 60,
      "startColumnNumber" : 12,
      "endLineNumber" : 60,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 60,
        "startColumnNumber" : 12,
        "endLineNumber" : 60,
        "endColumnNumber" : 35
      },
      "nodeContext" : "logger.isDebugEnabled()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 60,
        "startColumnNumber" : 8,
        "endLineNumber" : 62,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (logger.isDebugEnabled()) {\n  logger.debug(\" JsqlParserCountOptimize sql=\" + sql);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1790,
        "startLineNumber" : 59,
        "startColumnNumber" : 66,
        "endLineNumber" : 97,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (logger.isDebugEnabled()) {\n    logger.debug(\" JsqlParserCountOptimize sql=\" + sql);\n  }\n  SqlInfo sqlInfo=SqlInfo.newInstance();\n  try {\n    Select selectStatement=(Select)CCJSqlParserUtil.parse(sql);\n    PlainSelect plainSelect=(PlainSelect)selectStatement.getSelectBody();\n    Distinct distinct=plainSelect.getDistinct();\n    List<Expression> groupBy=plainSelect.getGroupByColumnReferences();\n    List<OrderByElement> orderBy=plainSelect.getOrderByElements();\n    if (CollectionUtils.isEmpty(groupBy) && CollectionUtils.isNotEmpty(orderBy)) {\n      plainSelect.setOrderByElements(null);\n      sqlInfo.setOrderBy(false);\n    }\n    for (    SelectItem item : plainSelect.getSelectItems()) {\n      if (item.toString().contains(\"?\")) {\n        sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n        return sqlInfo;\n      }\n    }\n    if (distinct != null || CollectionUtils.isNotEmpty(groupBy)) {\n      sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n      return sqlInfo;\n    }\n    plainSelect.setSelectItems(countSelectItem);\n    sqlInfo.setSql(selectStatement.toString());\n    return sqlInfo;\n  }\n catch (  Throwable e) {\n    sqlInfo.setSql(SqlUtils.getOriginalCountSql(sql));\n    return sqlInfo;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 178,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1866,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 97,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public SqlInfo optimizeSql(MetaObject metaObject,String sql){\n  if (logger.isDebugEnabled()) {\n    logger.debug(\" JsqlParserCountOptimize sql=\" + sql);\n  }\n  SqlInfo sqlInfo=SqlInfo.newInstance();\n  try {\n    Select selectStatement=(Select)CCJSqlParserUtil.parse(sql);\n    PlainSelect plainSelect=(PlainSelect)selectStatement.getSelectBody();\n    Distinct distinct=plainSelect.getDistinct();\n    List<Expression> groupBy=plainSelect.getGroupByColumnReferences();\n    List<OrderByElement> orderBy=plainSelect.getOrderByElements();\n    if (CollectionUtils.isEmpty(groupBy) && CollectionUtils.isNotEmpty(orderBy)) {\n      plainSelect.setOrderByElements(null);\n      sqlInfo.setOrderBy(false);\n    }\n    for (    SelectItem item : plainSelect.getSelectItems()) {\n      if (item.toString().contains(\"?\")) {\n        sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n        return sqlInfo;\n      }\n    }\n    if (distinct != null || CollectionUtils.isNotEmpty(groupBy)) {\n      sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n      return sqlInfo;\n    }\n    plainSelect.setSelectItems(countSelectItem);\n    sqlInfo.setSql(selectStatement.toString());\n    return sqlInfo;\n  }\n catch (  Throwable e) {\n    sqlInfo.setSql(SqlUtils.getOriginalCountSql(sql));\n    return sqlInfo;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 193,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 60,
        "startColumnNumber" : 12,
        "endLineNumber" : 60,
        "endColumnNumber" : 35
      },
      "nodeContext" : "logger.isDebugEnabled()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.plugins.pagination.optimize.Log"
  }, {
    "nodeContext" : "logger",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 61,
      "startColumnNumber" : 12,
      "endLineNumber" : 61,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 61,
        "startColumnNumber" : 12,
        "endLineNumber" : 61,
        "endColumnNumber" : 63
      },
      "nodeContext" : "logger.debug(\" JsqlParserCountOptimize sql=\" + sql)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 61,
        "startColumnNumber" : 12,
        "endLineNumber" : 61,
        "endColumnNumber" : 64
      },
      "nodeContext" : "logger.debug(\" JsqlParserCountOptimize sql=\" + sql);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 60,
        "startColumnNumber" : 37,
        "endLineNumber" : 62,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  logger.debug(\" JsqlParserCountOptimize sql=\" + sql);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 60,
        "startColumnNumber" : 8,
        "endLineNumber" : 62,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (logger.isDebugEnabled()) {\n  logger.debug(\" JsqlParserCountOptimize sql=\" + sql);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1790,
        "startLineNumber" : 59,
        "startColumnNumber" : 66,
        "endLineNumber" : 97,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (logger.isDebugEnabled()) {\n    logger.debug(\" JsqlParserCountOptimize sql=\" + sql);\n  }\n  SqlInfo sqlInfo=SqlInfo.newInstance();\n  try {\n    Select selectStatement=(Select)CCJSqlParserUtil.parse(sql);\n    PlainSelect plainSelect=(PlainSelect)selectStatement.getSelectBody();\n    Distinct distinct=plainSelect.getDistinct();\n    List<Expression> groupBy=plainSelect.getGroupByColumnReferences();\n    List<OrderByElement> orderBy=plainSelect.getOrderByElements();\n    if (CollectionUtils.isEmpty(groupBy) && CollectionUtils.isNotEmpty(orderBy)) {\n      plainSelect.setOrderByElements(null);\n      sqlInfo.setOrderBy(false);\n    }\n    for (    SelectItem item : plainSelect.getSelectItems()) {\n      if (item.toString().contains(\"?\")) {\n        sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n        return sqlInfo;\n      }\n    }\n    if (distinct != null || CollectionUtils.isNotEmpty(groupBy)) {\n      sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n      return sqlInfo;\n    }\n    plainSelect.setSelectItems(countSelectItem);\n    sqlInfo.setSql(selectStatement.toString());\n    return sqlInfo;\n  }\n catch (  Throwable e) {\n    sqlInfo.setSql(SqlUtils.getOriginalCountSql(sql));\n    return sqlInfo;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 178,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1866,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 97,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public SqlInfo optimizeSql(MetaObject metaObject,String sql){\n  if (logger.isDebugEnabled()) {\n    logger.debug(\" JsqlParserCountOptimize sql=\" + sql);\n  }\n  SqlInfo sqlInfo=SqlInfo.newInstance();\n  try {\n    Select selectStatement=(Select)CCJSqlParserUtil.parse(sql);\n    PlainSelect plainSelect=(PlainSelect)selectStatement.getSelectBody();\n    Distinct distinct=plainSelect.getDistinct();\n    List<Expression> groupBy=plainSelect.getGroupByColumnReferences();\n    List<OrderByElement> orderBy=plainSelect.getOrderByElements();\n    if (CollectionUtils.isEmpty(groupBy) && CollectionUtils.isNotEmpty(orderBy)) {\n      plainSelect.setOrderByElements(null);\n      sqlInfo.setOrderBy(false);\n    }\n    for (    SelectItem item : plainSelect.getSelectItems()) {\n      if (item.toString().contains(\"?\")) {\n        sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n        return sqlInfo;\n      }\n    }\n    if (distinct != null || CollectionUtils.isNotEmpty(groupBy)) {\n      sqlInfo.setSql(SqlUtils.getOriginalCountSql(selectStatement.toString()));\n      return sqlInfo;\n    }\n    plainSelect.setSelectItems(countSelectItem);\n    sqlInfo.setSql(selectStatement.toString());\n    return sqlInfo;\n  }\n catch (  Throwable e) {\n    sqlInfo.setSql(SqlUtils.getOriginalCountSql(sql));\n    return sqlInfo;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 193,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 61,
        "startColumnNumber" : 12,
        "endLineNumber" : 61,
        "endColumnNumber" : 64
      },
      "nodeContext" : "logger.debug(\" JsqlParserCountOptimize sql=\" + sql);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.baomidou.mybatisplus.plugins.pagination.optimize.Log"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 60,
    "startColumnNumber" : 12,
    "endLineNumber" : 60,
    "endColumnNumber" : 18
  }, {
    "charLength" : 6,
    "startLineNumber" : 61,
    "startColumnNumber" : 12,
    "endLineNumber" : 61,
    "endColumnNumber" : 18
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}