{
  "id" : 98,
  "expression" : "Math",
  "projectName" : "facebook@fresco",
  "commitID" : "22468d5b520df9b51572a6388a34e7f6bd5a22c1",
  "filePath" : "/imagepipeline/src/main/java/com/facebook/imagepipeline/filter/InPlaceRoundFilter.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Math",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 33,
      "startColumnNumber" : 23,
      "endLineNumber" : 33,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 33,
        "startColumnNumber" : 23,
        "endLineNumber" : 33,
        "endColumnNumber" : 37
      },
      "nodeContext" : "Math.min(w,h)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 33,
        "startColumnNumber" : 23,
        "endLineNumber" : 33,
        "endColumnNumber" : 41
      },
      "nodeContext" : "Math.min(w,h) / 2",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 33,
        "startColumnNumber" : 14,
        "endLineNumber" : 33,
        "endColumnNumber" : 41
      },
      "nodeContext" : "radius=Math.min(w,h) / 2",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 33,
        "startColumnNumber" : 4,
        "endLineNumber" : 33,
        "endColumnNumber" : 42
      },
      "nodeContext" : "final int radius=Math.min(w,h) / 2;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2824,
        "startLineNumber" : 29,
        "startColumnNumber" : 55,
        "endLineNumber" : 133,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Preconditions.checkNotNull(bitmap);\n  final int w=bitmap.getWidth();\n  final int h=bitmap.getHeight();\n  final int radius=Math.min(w,h) / 2;\n  final int centerX=w / 2;\n  final int centerY=h / 2;\n  if (radius == 0) {\n    return;\n  }\n  Preconditions.checkArgument(radius >= 1);\n  Preconditions.checkArgument(w > 0 && w <= BitmapUtil.MAX_BITMAP_SIZE);\n  Preconditions.checkArgument(h > 0 && h <= BitmapUtil.MAX_BITMAP_SIZE);\n  Preconditions.checkArgument(centerX > 0 && centerX < w);\n  Preconditions.checkArgument(centerY > 0 && centerY < h);\n  final int[] pixels=new int[w * h];\n  bitmap.getPixels(pixels,0,w,0,0,w,h);\n  int x=radius - 1;\n  int y=0;\n  final int maxX=centerX + x;\n  final int maxY=centerY + x;\n  final int minX=centerX - x;\n  final int minY=centerY - x;\n  Preconditions.checkArgument(minX >= 0 && minY >= 0 && maxX < w && maxY < h);\n  int dx=1;\n  int dy=1;\n  final int rInc=-radius * 2;\n  final int[] transparentColor=new int[w];\n  int err=dx + rInc;\n  int cXpX;\n  int cXmX;\n  int cXpY;\n  int cXmY;\n  int cYpX;\n  int cYmX;\n  int cYpY;\n  int cYmY;\n  int offA;\n  int offB;\n  int offC;\n  int offD;\n  while (x >= y) {\n    cXpX=centerX + x;\n    cXmX=centerX - x;\n    cXpY=centerX + y;\n    cXmY=centerX - y;\n    cYpX=centerY + x;\n    cYmX=centerY - x;\n    cYpY=centerY + y;\n    cYmY=centerY - y;\n    Preconditions.checkArgument(x >= 0 && cXpY < w && cXmY >= 0 && cYpY < h && cYmY >= 0);\n    offA=w * cYpY;\n    offB=w * cYmY;\n    offC=w * cYpX;\n    offD=w * cYmX;\n    System.arraycopy(transparentColor,0,pixels,offA,cXmX);\n    System.arraycopy(transparentColor,0,pixels,offB,cXmX);\n    System.arraycopy(transparentColor,0,pixels,offC,cXmY);\n    System.arraycopy(transparentColor,0,pixels,offD,cXmY);\n    System.arraycopy(transparentColor,0,pixels,offA + cXpX,w - cXpX);\n    System.arraycopy(transparentColor,0,pixels,offB + cXpX,w - cXpX);\n    System.arraycopy(transparentColor,0,pixels,offC + cXpY,w - cXpY);\n    System.arraycopy(transparentColor,0,pixels,offD + cXpY,w - cXpY);\n    if (err <= 0) {\n      y++;\n      dy+=2;\n      err+=dy;\n    }\n    if (err > 0) {\n      x--;\n      dx+=2;\n      err+=dx + rInc;\n    }\n  }\n  for (int i=centerY - radius; i >= 0; i--) {\n    System.arraycopy(transparentColor,0,pixels,i * w,w);\n  }\n  for (int i=centerY + radius; i < h; i++) {\n    System.arraycopy(transparentColor,0,pixels,i * w,w);\n  }\n  bitmap.setPixels(pixels,0,w,0,0,w,h);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 568,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3204,
        "startLineNumber" : 22,
        "startColumnNumber" : 2,
        "endLineNumber" : 133,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * An implementation for rounding a given bitmap to a circular shape. The underlying implementation uses a modified midpoint circle algorithm but instead of drawing a circle, it clears all pixels starting from the circle all the way to the bitmap edges.\n * @param bitmap The input {@link Bitmap}\n */\npublic static void roundBitmapInPlace(Bitmap bitmap){\n  Preconditions.checkNotNull(bitmap);\n  final int w=bitmap.getWidth();\n  final int h=bitmap.getHeight();\n  final int radius=Math.min(w,h) / 2;\n  final int centerX=w / 2;\n  final int centerY=h / 2;\n  if (radius == 0) {\n    return;\n  }\n  Preconditions.checkArgument(radius >= 1);\n  Preconditions.checkArgument(w > 0 && w <= BitmapUtil.MAX_BITMAP_SIZE);\n  Preconditions.checkArgument(h > 0 && h <= BitmapUtil.MAX_BITMAP_SIZE);\n  Preconditions.checkArgument(centerX > 0 && centerX < w);\n  Preconditions.checkArgument(centerY > 0 && centerY < h);\n  final int[] pixels=new int[w * h];\n  bitmap.getPixels(pixels,0,w,0,0,w,h);\n  int x=radius - 1;\n  int y=0;\n  final int maxX=centerX + x;\n  final int maxY=centerY + x;\n  final int minX=centerX - x;\n  final int minY=centerY - x;\n  Preconditions.checkArgument(minX >= 0 && minY >= 0 && maxX < w && maxY < h);\n  int dx=1;\n  int dy=1;\n  final int rInc=-radius * 2;\n  final int[] transparentColor=new int[w];\n  int err=dx + rInc;\n  int cXpX;\n  int cXmX;\n  int cXpY;\n  int cXmY;\n  int cYpX;\n  int cYmX;\n  int cYpY;\n  int cYmY;\n  int offA;\n  int offB;\n  int offC;\n  int offD;\n  while (x >= y) {\n    cXpX=centerX + x;\n    cXmX=centerX - x;\n    cXpY=centerX + y;\n    cXmY=centerX - y;\n    cYpX=centerY + x;\n    cYmX=centerY - x;\n    cYpY=centerY + y;\n    cYmY=centerY - y;\n    Preconditions.checkArgument(x >= 0 && cXpY < w && cXmY >= 0 && cYpY < h && cYmY >= 0);\n    offA=w * cYpY;\n    offB=w * cYmY;\n    offC=w * cYpX;\n    offD=w * cYmX;\n    System.arraycopy(transparentColor,0,pixels,offA,cXmX);\n    System.arraycopy(transparentColor,0,pixels,offB,cXmX);\n    System.arraycopy(transparentColor,0,pixels,offC,cXmY);\n    System.arraycopy(transparentColor,0,pixels,offD,cXmY);\n    System.arraycopy(transparentColor,0,pixels,offA + cXpX,w - cXpX);\n    System.arraycopy(transparentColor,0,pixels,offB + cXpX,w - cXpX);\n    System.arraycopy(transparentColor,0,pixels,offC + cXpY,w - cXpY);\n    System.arraycopy(transparentColor,0,pixels,offD + cXpY,w - cXpY);\n    if (err <= 0) {\n      y++;\n      dy+=2;\n      err+=dy;\n    }\n    if (err > 0) {\n      x--;\n      dx+=2;\n      err+=dx + rInc;\n    }\n  }\n  for (int i=centerY - radius; i >= 0; i--) {\n    System.arraycopy(transparentColor,0,pixels,i * w,w);\n  }\n  for (int i=centerY + radius; i < h; i++) {\n    System.arraycopy(transparentColor,0,pixels,i * w,w);\n  }\n  bitmap.setPixels(pixels,0,w,0,0,w,h);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 578,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 33,
        "startColumnNumber" : 4,
        "endLineNumber" : 33,
        "endColumnNumber" : 42
      },
      "nodeContext" : "final int radius=Math.min(w,h) / 2;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.Math"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 33,
    "startColumnNumber" : 23,
    "endLineNumber" : 33,
    "endColumnNumber" : 27
  } ],
  "layoutRelationDataList" : [ ]
}