{
  "id" : 47,
  "expression" : "to.getActualTypeArguments()",
  "projectName" : "google@gson",
  "commitID" : "c3d0f200b352f411b9ebe45c3bf49d4328b2c51f",
  "filePath" : "/gson/src/main/java/com/google/gson/reflect/TypeToken.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "to.getActualTypeArguments()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 27,
      "startLineNumber" : 242,
      "startColumnNumber" : 22,
      "endLineNumber" : 242,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 242,
        "startColumnNumber" : 13,
        "endLineNumber" : 242,
        "endColumnNumber" : 49
      },
      "nodeContext" : "toArgs=to.getActualTypeArguments()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 242,
        "startColumnNumber" : 6,
        "endLineNumber" : 242,
        "endColumnNumber" : 50
      },
      "nodeContext" : "Type[] toArgs=to.getActualTypeArguments();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 284,
        "startLineNumber" : 240,
        "startColumnNumber" : 51,
        "endLineNumber" : 249,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Type[] fromArgs=from.getActualTypeArguments();\n  Type[] toArgs=to.getActualTypeArguments();\n  for (int i=0; i < fromArgs.length; i++) {\n    if (!matches(fromArgs[i],toArgs[i],typeVarMap)) {\n      return false;\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 51,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 331,
        "startLineNumber" : 240,
        "startColumnNumber" : 4,
        "endLineNumber" : 249,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (from.getRawType().equals(to.getRawType())) {\n  Type[] fromArgs=from.getActualTypeArguments();\n  Type[] toArgs=to.getActualTypeArguments();\n  for (int i=0; i < fromArgs.length; i++) {\n    if (!matches(fromArgs[i],toArgs[i],typeVarMap)) {\n      return false;\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 60,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 359,
        "startLineNumber" : 239,
        "startColumnNumber" : 58,
        "endLineNumber" : 251,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (from.getRawType().equals(to.getRawType())) {\n    Type[] fromArgs=from.getActualTypeArguments();\n    Type[] toArgs=to.getActualTypeArguments();\n    for (int i=0; i < fromArgs.length; i++) {\n      if (!matches(fromArgs[i],toArgs[i],typeVarMap)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 63,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 610,
        "startLineNumber" : 234,
        "startColumnNumber" : 2,
        "endLineNumber" : 251,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Checks if two parameterized types are exactly equal, under the variable replacement described in the typeVarMap.\n */\nprivate static boolean typeEquals(ParameterizedType from,ParameterizedType to,Map<String,Type> typeVarMap){\n  if (from.getRawType().equals(to.getRawType())) {\n    Type[] fromArgs=from.getActualTypeArguments();\n    Type[] toArgs=to.getActualTypeArguments();\n    for (int i=0; i < fromArgs.length; i++) {\n      if (!matches(fromArgs[i],toArgs[i],typeVarMap)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 86,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 242,
        "startColumnNumber" : 6,
        "endLineNumber" : 242,
        "endColumnNumber" : 50
      },
      "nodeContext" : "Type[] toArgs=to.getActualTypeArguments();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.reflect.Type[]"
  } ],
  "positionList" : [ {
    "charLength" : 27,
    "startLineNumber" : 242,
    "startColumnNumber" : 22,
    "endLineNumber" : 242,
    "endColumnNumber" : 49
  } ],
  "layoutRelationDataList" : [ ]
}