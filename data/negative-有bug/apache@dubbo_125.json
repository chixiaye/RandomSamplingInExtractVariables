{
  "id" : 125,
  "expression" : "RpcException.class",
  "projectName" : "apache@dubbo",
  "commitID" : "4ea0a09846fa74b7b1a6a1a548f31859a2cddcc8",
  "filePath" : "/dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/filter/tps/TpsLimitFilterTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "RpcException.class",
    "nodeType" : "TypeLiteral",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 50,
      "startColumnNumber" : 32,
      "endLineNumber" : 50,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 672,
        "startLineNumber" : 50,
        "startColumnNumber" : 8,
        "endLineNumber" : 64,
        "endColumnNumber" : 10
      },
      "nodeContext" : "Assertions.assertThrows(RpcException.class,() -> {\n  URL url=URL.valueOf(\"test://test\");\n  url=url.addParameter(INTERFACE_KEY,\"org.apache.dubbo.rpc.file.TpsService\");\n  url=url.addParameter(TPS_LIMIT_RATE_KEY,5);\n  Invoker<TpsLimitFilterTest> invoker=new MyInvoker<TpsLimitFilterTest>(url);\n  Invocation invocation=new MockInvocation();\n  for (int i=0; i < 10; i++) {\n    try {\n      filter.invoke(invoker,invocation);\n    }\n catch (    Exception e) {\n      assertTrue(i >= 5);\n      throw e;\n    }\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 90,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 673,
        "startLineNumber" : 50,
        "startColumnNumber" : 8,
        "endLineNumber" : 64,
        "endColumnNumber" : 11
      },
      "nodeContext" : "Assertions.assertThrows(RpcException.class,() -> {\n  URL url=URL.valueOf(\"test://test\");\n  url=url.addParameter(INTERFACE_KEY,\"org.apache.dubbo.rpc.file.TpsService\");\n  url=url.addParameter(TPS_LIMIT_RATE_KEY,5);\n  Invoker<TpsLimitFilterTest> invoker=new MyInvoker<TpsLimitFilterTest>(url);\n  Invocation invocation=new MockInvocation();\n  for (int i=0; i < 10; i++) {\n    try {\n      filter.invoke(invoker,invocation);\n    }\n catch (    Exception e) {\n      assertTrue(i >= 5);\n      throw e;\n    }\n  }\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 91,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 690,
        "startLineNumber" : 49,
        "startColumnNumber" : 44,
        "endLineNumber" : 66,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Assertions.assertThrows(RpcException.class,() -> {\n    URL url=URL.valueOf(\"test://test\");\n    url=url.addParameter(INTERFACE_KEY,\"org.apache.dubbo.rpc.file.TpsService\");\n    url=url.addParameter(TPS_LIMIT_RATE_KEY,5);\n    Invoker<TpsLimitFilterTest> invoker=new MyInvoker<TpsLimitFilterTest>(url);\n    Invocation invocation=new MockInvocation();\n    for (int i=0; i < 10; i++) {\n      try {\n        filter.invoke(invoker,invocation);\n      }\n catch (      Exception e) {\n        assertTrue(i >= 5);\n        throw e;\n      }\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 92,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 740,
        "startLineNumber" : 48,
        "startColumnNumber" : 4,
        "endLineNumber" : 66,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testFail() throws Exception {\n  Assertions.assertThrows(RpcException.class,() -> {\n    URL url=URL.valueOf(\"test://test\");\n    url=url.addParameter(INTERFACE_KEY,\"org.apache.dubbo.rpc.file.TpsService\");\n    url=url.addParameter(TPS_LIMIT_RATE_KEY,5);\n    Invoker<TpsLimitFilterTest> invoker=new MyInvoker<TpsLimitFilterTest>(url);\n    Invocation invocation=new MockInvocation();\n    for (int i=0; i < 10; i++) {\n      try {\n        filter.invoke(invoker,invocation);\n      }\n catch (      Exception e) {\n        assertTrue(i >= 5);\n        throw e;\n      }\n    }\n  }\n);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 100,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 672,
        "startLineNumber" : 50,
        "startColumnNumber" : 8,
        "endLineNumber" : 64,
        "endColumnNumber" : 10
      },
      "nodeContext" : "Assertions.assertThrows(RpcException.class,() -> {\n  URL url=URL.valueOf(\"test://test\");\n  url=url.addParameter(INTERFACE_KEY,\"org.apache.dubbo.rpc.file.TpsService\");\n  url=url.addParameter(TPS_LIMIT_RATE_KEY,5);\n  Invoker<TpsLimitFilterTest> invoker=new MyInvoker<TpsLimitFilterTest>(url);\n  Invocation invocation=new MockInvocation();\n  for (int i=0; i < 10; i++) {\n    try {\n      filter.invoke(invoker,invocation);\n    }\n catch (    Exception e) {\n      assertTrue(i >= 5);\n      throw e;\n    }\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 90,
      "astHeight" : 12
    },
    "tokenLength" : 1,
    "type" : "java.lang.Class<org.apache.dubbo.rpc.RpcException>"
  } ],
  "positionList" : [ {
    "charLength" : 18,
    "startLineNumber" : 50,
    "startColumnNumber" : 32,
    "endLineNumber" : 50,
    "endColumnNumber" : 50
  } ],
  "layoutRelationDataList" : [ ]
}