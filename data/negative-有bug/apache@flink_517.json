{
  "id" : 517,
  "expression" : "testHarness.getSideOutput(SideOutputProcessFunction.LONG_OUTPUT_TAG)",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/KeyedProcessOperatorTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "testHarness.getSideOutput(SideOutputProcessFunction.LONG_OUTPUT_TAG)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 68,
      "startLineNumber" : 409,
      "startColumnNumber" : 16,
      "endLineNumber" : 409,
      "endColumnNumber" : 84
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 408,
        "startColumnNumber" : 50,
        "endLineNumber" : 409,
        "endColumnNumber" : 84
      },
      "nodeContext" : "longSideOutput=testHarness.getSideOutput(SideOutputProcessFunction.LONG_OUTPUT_TAG)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 144,
        "startLineNumber" : 408,
        "startColumnNumber" : 8,
        "endLineNumber" : 409,
        "endColumnNumber" : 85
      },
      "nodeContext" : "ConcurrentLinkedQueue<StreamRecord<Long>> longSideOutput=testHarness.getSideOutput(SideOutputProcessFunction.LONG_OUTPUT_TAG);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1830,
        "startLineNumber" : 377,
        "startColumnNumber" : 50,
        "endLineNumber" : 414,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  KeyedProcessOperator<Integer,Integer,String> operator=new KeyedProcessOperator<>(new SideOutputProcessFunction());\n  OneInputStreamOperatorTestHarness<Integer,String> testHarness=new KeyedOneInputStreamOperatorTestHarness<>(operator,new IdentityKeySelector<>(),BasicTypeInfo.INT_TYPE_INFO);\n  testHarness.setup();\n  testHarness.open();\n  testHarness.processElement(new StreamRecord<>(42,17L));\n  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<>();\n  expectedOutput.add(new StreamRecord<>(\"IN:42\",17L));\n  TestHarnessUtil.assertOutputEquals(\"Output was not correct.\",expectedOutput,testHarness.getOutput());\n  ConcurrentLinkedQueue<StreamRecord<Integer>> expectedIntSideOutput=new ConcurrentLinkedQueue<>();\n  expectedIntSideOutput.add(new StreamRecord<>(42,17L));\n  ConcurrentLinkedQueue<StreamRecord<Integer>> intSideOutput=testHarness.getSideOutput(SideOutputProcessFunction.INTEGER_OUTPUT_TAG);\n  TestHarnessUtil.assertOutputEquals(\"Side output was not correct.\",expectedIntSideOutput,intSideOutput);\n  ConcurrentLinkedQueue<StreamRecord<Long>> expectedLongSideOutput=new ConcurrentLinkedQueue<>();\n  expectedLongSideOutput.add(new StreamRecord<>(42L,17L));\n  ConcurrentLinkedQueue<StreamRecord<Long>> longSideOutput=testHarness.getSideOutput(SideOutputProcessFunction.LONG_OUTPUT_TAG);\n  TestHarnessUtil.assertOutputEquals(\"Side output was not correct.\",expectedLongSideOutput,longSideOutput);\n  testHarness.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 193,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1973,
        "startLineNumber" : 375,
        "startColumnNumber" : 4,
        "endLineNumber" : 414,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * This also verifies that the timestamps ouf side-emitted records is correct. \n */\n@Test public void testSideOutput() throws Exception {\n  KeyedProcessOperator<Integer,Integer,String> operator=new KeyedProcessOperator<>(new SideOutputProcessFunction());\n  OneInputStreamOperatorTestHarness<Integer,String> testHarness=new KeyedOneInputStreamOperatorTestHarness<>(operator,new IdentityKeySelector<>(),BasicTypeInfo.INT_TYPE_INFO);\n  testHarness.setup();\n  testHarness.open();\n  testHarness.processElement(new StreamRecord<>(42,17L));\n  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<>();\n  expectedOutput.add(new StreamRecord<>(\"IN:42\",17L));\n  TestHarnessUtil.assertOutputEquals(\"Output was not correct.\",expectedOutput,testHarness.getOutput());\n  ConcurrentLinkedQueue<StreamRecord<Integer>> expectedIntSideOutput=new ConcurrentLinkedQueue<>();\n  expectedIntSideOutput.add(new StreamRecord<>(42,17L));\n  ConcurrentLinkedQueue<StreamRecord<Integer>> intSideOutput=testHarness.getSideOutput(SideOutputProcessFunction.INTEGER_OUTPUT_TAG);\n  TestHarnessUtil.assertOutputEquals(\"Side output was not correct.\",expectedIntSideOutput,intSideOutput);\n  ConcurrentLinkedQueue<StreamRecord<Long>> expectedLongSideOutput=new ConcurrentLinkedQueue<>();\n  expectedLongSideOutput.add(new StreamRecord<>(42L,17L));\n  ConcurrentLinkedQueue<StreamRecord<Long>> longSideOutput=testHarness.getSideOutput(SideOutputProcessFunction.LONG_OUTPUT_TAG);\n  TestHarnessUtil.assertOutputEquals(\"Side output was not correct.\",expectedLongSideOutput,longSideOutput);\n  testHarness.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 202,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 408,
        "startColumnNumber" : 50,
        "endLineNumber" : 409,
        "endColumnNumber" : 84
      },
      "nodeContext" : "longSideOutput=testHarness.getSideOutput(SideOutputProcessFunction.LONG_OUTPUT_TAG)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 6,
    "type" : "java.util.concurrent.ConcurrentLinkedQueue<org.apache.flink.streaming.runtime.streamrecord.StreamRecord<java.lang.Long>>"
  } ],
  "positionList" : [ {
    "charLength" : 68,
    "startLineNumber" : 409,
    "startColumnNumber" : 16,
    "endLineNumber" : 409,
    "endColumnNumber" : 84
  } ],
  "layoutRelationDataList" : [ ]
}