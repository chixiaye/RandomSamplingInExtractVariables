{
  "id" : 500,
  "expression" : "packingRequests",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-connectors/flink-connector-files/src/main/java/org/apache/flink/connector/file/sink/compactor/operator/CompactCoordinator.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "packingRequests",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 105,
      "startColumnNumber" : 16,
      "endLineNumber" : 105,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 105,
        "startColumnNumber" : 16,
        "endLineNumber" : 105,
        "endColumnNumber" : 80
      },
      "nodeContext" : "packingRequests.computeIfAbsent(bucketId,CompactorRequest::new)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 104,
        "startColumnNumber" : 25,
        "endLineNumber" : 105,
        "endColumnNumber" : 80
      },
      "nodeContext" : "bucketRequest=packingRequests.computeIfAbsent(bucketId,CompactorRequest::new)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 104,
        "startColumnNumber" : 8,
        "endLineNumber" : 105,
        "endColumnNumber" : 81
      },
      "nodeContext" : "CompactorRequest bucketRequest=packingRequests.computeIfAbsent(bucketId,CompactorRequest::new);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1330,
        "startLineNumber" : 102,
        "startColumnNumber" : 68,
        "endLineNumber" : 133,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String bucketId=committable.getBucketId();\n  CompactorRequest bucketRequest=packingRequests.computeIfAbsent(bucketId,CompactorRequest::new);\n  if (committable.hasInProgressFileToCleanup() || committable.hasCompactedFileToCleanup()) {\n    checkState(!committable.hasPendingFile());\n    bucketRequest.addToPassthrough(committable);\n    return false;\n  }\n  if (!committable.hasPendingFile()) {\n    throw new RuntimeException(\"Committable to compact has no content.\");\n  }\n  CompactTrigger trigger=triggers.computeIfAbsent(bucketId,id -> new CompactTrigger(strategy));\n  CompactTriggerResult triggerResult=trigger.onElement(committable);\nswitch (triggerResult) {\ncase PASS_THROUGH:    bucketRequest.addToPassthrough(committable);\n  return false;\ncase CONTINUE:bucketRequest.addToCompact(committable);\nreturn false;\ncase FIRE_AND_PURGE:bucketRequest.addToCompact(committable);\nreturn true;\ndefault:throw new RuntimeException(\"Unexpected trigger result:\" + triggerResult);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 117,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1394,
        "startLineNumber" : 102,
        "startColumnNumber" : 4,
        "endLineNumber" : 133,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private boolean packAndTrigger(FileSinkCommittable committable){\n  String bucketId=committable.getBucketId();\n  CompactorRequest bucketRequest=packingRequests.computeIfAbsent(bucketId,CompactorRequest::new);\n  if (committable.hasInProgressFileToCleanup() || committable.hasCompactedFileToCleanup()) {\n    checkState(!committable.hasPendingFile());\n    bucketRequest.addToPassthrough(committable);\n    return false;\n  }\n  if (!committable.hasPendingFile()) {\n    throw new RuntimeException(\"Committable to compact has no content.\");\n  }\n  CompactTrigger trigger=triggers.computeIfAbsent(bucketId,id -> new CompactTrigger(strategy));\n  CompactTriggerResult triggerResult=trigger.onElement(committable);\nswitch (triggerResult) {\ncase PASS_THROUGH:    bucketRequest.addToPassthrough(committable);\n  return false;\ncase CONTINUE:bucketRequest.addToCompact(committable);\nreturn false;\ncase FIRE_AND_PURGE:bucketRequest.addToCompact(committable);\nreturn true;\ndefault:throw new RuntimeException(\"Unexpected trigger result:\" + triggerResult);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 125,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 105,
        "startColumnNumber" : 16,
        "endLineNumber" : 105,
        "endColumnNumber" : 80
      },
      "nodeContext" : "packingRequests.computeIfAbsent(bucketId,CompactorRequest::new)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.Map<java.lang.String,org.apache.flink.connector.file.sink.compactor.operator.CompactorRequest>"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 105,
    "startColumnNumber" : 16,
    "endLineNumber" : 105,
    "endColumnNumber" : 31
  } ],
  "layoutRelationDataList" : [ ]
}