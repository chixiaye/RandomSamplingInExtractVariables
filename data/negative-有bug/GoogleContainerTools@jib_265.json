{
  "id" : 265,
  "expression" : "Paths",
  "projectName" : "GoogleContainerTools@jib",
  "commitID" : "a0742fd277b5490a0965dba4443f5864f1250199",
  "filePath" : "/jib-core/src/test/java/com/google/cloud/tools/jib/image/ReproducibleLayerBuilderTest.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Paths",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 79,
      "startColumnNumber" : 26,
      "endLineNumber" : 79,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 79,
        "startColumnNumber" : 26,
        "endLineNumber" : 79,
        "endColumnNumber" : 75
      },
      "nodeContext" : "Paths.get(Resources.getResource(\"layer\").toURI())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 79,
        "startColumnNumber" : 9,
        "endLineNumber" : 79,
        "endColumnNumber" : 75
      },
      "nodeContext" : "layerDirectory=Paths.get(Resources.getResource(\"layer\").toURI())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 79,
        "startColumnNumber" : 4,
        "endLineNumber" : 79,
        "endColumnNumber" : 76
      },
      "nodeContext" : "Path layerDirectory=Paths.get(Resources.getResource(\"layer\").toURI());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2499,
        "startLineNumber" : 78,
        "startColumnNumber" : 65,
        "endLineNumber" : 131,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Path layerDirectory=Paths.get(Resources.getResource(\"layer\").toURI());\n  Path blobA=Paths.get(Resources.getResource(\"blobA\").toURI());\n  ReproducibleLayerBuilder layerBuilder=new ReproducibleLayerBuilder().addFiles(Arrays.asList(layerDirectory,blobA),\"extract/here/apple\").addFiles(Collections.singletonList(blobA),\"extract/here/banana\");\n  UnwrittenLayer unwrittenLayer=layerBuilder.build();\n  Path temporaryFile=temporaryFolder.newFile().toPath();\n  try (OutputStream temporaryFileOutputStream=new BufferedOutputStream(Files.newOutputStream(temporaryFile))){\n    unwrittenLayer.getBlob().writeTo(temporaryFileOutputStream);\n  }\n   try (TarArchiveInputStream tarArchiveInputStream=new TarArchiveInputStream(Files.newInputStream(temporaryFile))){\n    verifyNextTarArchiveEntry(tarArchiveInputStream,\"extract/here/apple/blobA\",blobA);\n    ImmutableList<Path> layerDirectoryPaths=new DirectoryWalker(layerDirectory).filter(path -> !path.equals(layerDirectory)).walk();\n    for (    Path path : layerDirectoryPaths) {\n      TarArchiveEntry header=tarArchiveInputStream.getNextTarEntry();\n      StringBuilder expectedExtractionPath=new StringBuilder(\"extract/here/apple\");\n      for (      Path pathComponent : layerDirectory.getParent().relativize(path)) {\n        expectedExtractionPath.append(\"/\").append(pathComponent);\n      }\n      Assert.assertEquals(Paths.get(expectedExtractionPath.toString()),Paths.get(header.getName()));\n      if (Files.isRegularFile(path)) {\n        String expectedFileString=new String(Files.readAllBytes(path),StandardCharsets.UTF_8);\n        String extractedFileString=CharStreams.toString(new InputStreamReader(tarArchiveInputStream,StandardCharsets.UTF_8));\n        Assert.assertEquals(expectedFileString,extractedFileString);\n      }\n    }\n    verifyNextTarArchiveEntry(tarArchiveInputStream,\"extract/here/banana/blobA\",blobA);\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 243,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2570,
        "startLineNumber" : 77,
        "startColumnNumber" : 2,
        "endLineNumber" : 131,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testBuild() throws URISyntaxException, IOException {\n  Path layerDirectory=Paths.get(Resources.getResource(\"layer\").toURI());\n  Path blobA=Paths.get(Resources.getResource(\"blobA\").toURI());\n  ReproducibleLayerBuilder layerBuilder=new ReproducibleLayerBuilder().addFiles(Arrays.asList(layerDirectory,blobA),\"extract/here/apple\").addFiles(Collections.singletonList(blobA),\"extract/here/banana\");\n  UnwrittenLayer unwrittenLayer=layerBuilder.build();\n  Path temporaryFile=temporaryFolder.newFile().toPath();\n  try (OutputStream temporaryFileOutputStream=new BufferedOutputStream(Files.newOutputStream(temporaryFile))){\n    unwrittenLayer.getBlob().writeTo(temporaryFileOutputStream);\n  }\n   try (TarArchiveInputStream tarArchiveInputStream=new TarArchiveInputStream(Files.newInputStream(temporaryFile))){\n    verifyNextTarArchiveEntry(tarArchiveInputStream,\"extract/here/apple/blobA\",blobA);\n    ImmutableList<Path> layerDirectoryPaths=new DirectoryWalker(layerDirectory).filter(path -> !path.equals(layerDirectory)).walk();\n    for (    Path path : layerDirectoryPaths) {\n      TarArchiveEntry header=tarArchiveInputStream.getNextTarEntry();\n      StringBuilder expectedExtractionPath=new StringBuilder(\"extract/here/apple\");\n      for (      Path pathComponent : layerDirectory.getParent().relativize(path)) {\n        expectedExtractionPath.append(\"/\").append(pathComponent);\n      }\n      Assert.assertEquals(Paths.get(expectedExtractionPath.toString()),Paths.get(header.getName()));\n      if (Files.isRegularFile(path)) {\n        String expectedFileString=new String(Files.readAllBytes(path),StandardCharsets.UTF_8);\n        String extractedFileString=CharStreams.toString(new InputStreamReader(tarArchiveInputStream,StandardCharsets.UTF_8));\n        Assert.assertEquals(expectedFileString,extractedFileString);\n      }\n    }\n    verifyNextTarArchiveEntry(tarArchiveInputStream,\"extract/here/banana/blobA\",blobA);\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 253,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 79,
        "startColumnNumber" : 4,
        "endLineNumber" : 79,
        "endColumnNumber" : 76
      },
      "nodeContext" : "Path layerDirectory=Paths.get(Resources.getResource(\"layer\").toURI());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.nio.file.Paths"
  }, {
    "nodeContext" : "Paths",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 80,
      "startColumnNumber" : 17,
      "endLineNumber" : 80,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 80,
        "startColumnNumber" : 17,
        "endLineNumber" : 80,
        "endColumnNumber" : 66
      },
      "nodeContext" : "Paths.get(Resources.getResource(\"blobA\").toURI())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 80,
        "startColumnNumber" : 9,
        "endLineNumber" : 80,
        "endColumnNumber" : 66
      },
      "nodeContext" : "blobA=Paths.get(Resources.getResource(\"blobA\").toURI())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 80,
        "startColumnNumber" : 4,
        "endLineNumber" : 80,
        "endColumnNumber" : 67
      },
      "nodeContext" : "Path blobA=Paths.get(Resources.getResource(\"blobA\").toURI());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2499,
        "startLineNumber" : 78,
        "startColumnNumber" : 65,
        "endLineNumber" : 131,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Path layerDirectory=Paths.get(Resources.getResource(\"layer\").toURI());\n  Path blobA=Paths.get(Resources.getResource(\"blobA\").toURI());\n  ReproducibleLayerBuilder layerBuilder=new ReproducibleLayerBuilder().addFiles(Arrays.asList(layerDirectory,blobA),\"extract/here/apple\").addFiles(Collections.singletonList(blobA),\"extract/here/banana\");\n  UnwrittenLayer unwrittenLayer=layerBuilder.build();\n  Path temporaryFile=temporaryFolder.newFile().toPath();\n  try (OutputStream temporaryFileOutputStream=new BufferedOutputStream(Files.newOutputStream(temporaryFile))){\n    unwrittenLayer.getBlob().writeTo(temporaryFileOutputStream);\n  }\n   try (TarArchiveInputStream tarArchiveInputStream=new TarArchiveInputStream(Files.newInputStream(temporaryFile))){\n    verifyNextTarArchiveEntry(tarArchiveInputStream,\"extract/here/apple/blobA\",blobA);\n    ImmutableList<Path> layerDirectoryPaths=new DirectoryWalker(layerDirectory).filter(path -> !path.equals(layerDirectory)).walk();\n    for (    Path path : layerDirectoryPaths) {\n      TarArchiveEntry header=tarArchiveInputStream.getNextTarEntry();\n      StringBuilder expectedExtractionPath=new StringBuilder(\"extract/here/apple\");\n      for (      Path pathComponent : layerDirectory.getParent().relativize(path)) {\n        expectedExtractionPath.append(\"/\").append(pathComponent);\n      }\n      Assert.assertEquals(Paths.get(expectedExtractionPath.toString()),Paths.get(header.getName()));\n      if (Files.isRegularFile(path)) {\n        String expectedFileString=new String(Files.readAllBytes(path),StandardCharsets.UTF_8);\n        String extractedFileString=CharStreams.toString(new InputStreamReader(tarArchiveInputStream,StandardCharsets.UTF_8));\n        Assert.assertEquals(expectedFileString,extractedFileString);\n      }\n    }\n    verifyNextTarArchiveEntry(tarArchiveInputStream,\"extract/here/banana/blobA\",blobA);\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 243,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2570,
        "startLineNumber" : 77,
        "startColumnNumber" : 2,
        "endLineNumber" : 131,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testBuild() throws URISyntaxException, IOException {\n  Path layerDirectory=Paths.get(Resources.getResource(\"layer\").toURI());\n  Path blobA=Paths.get(Resources.getResource(\"blobA\").toURI());\n  ReproducibleLayerBuilder layerBuilder=new ReproducibleLayerBuilder().addFiles(Arrays.asList(layerDirectory,blobA),\"extract/here/apple\").addFiles(Collections.singletonList(blobA),\"extract/here/banana\");\n  UnwrittenLayer unwrittenLayer=layerBuilder.build();\n  Path temporaryFile=temporaryFolder.newFile().toPath();\n  try (OutputStream temporaryFileOutputStream=new BufferedOutputStream(Files.newOutputStream(temporaryFile))){\n    unwrittenLayer.getBlob().writeTo(temporaryFileOutputStream);\n  }\n   try (TarArchiveInputStream tarArchiveInputStream=new TarArchiveInputStream(Files.newInputStream(temporaryFile))){\n    verifyNextTarArchiveEntry(tarArchiveInputStream,\"extract/here/apple/blobA\",blobA);\n    ImmutableList<Path> layerDirectoryPaths=new DirectoryWalker(layerDirectory).filter(path -> !path.equals(layerDirectory)).walk();\n    for (    Path path : layerDirectoryPaths) {\n      TarArchiveEntry header=tarArchiveInputStream.getNextTarEntry();\n      StringBuilder expectedExtractionPath=new StringBuilder(\"extract/here/apple\");\n      for (      Path pathComponent : layerDirectory.getParent().relativize(path)) {\n        expectedExtractionPath.append(\"/\").append(pathComponent);\n      }\n      Assert.assertEquals(Paths.get(expectedExtractionPath.toString()),Paths.get(header.getName()));\n      if (Files.isRegularFile(path)) {\n        String expectedFileString=new String(Files.readAllBytes(path),StandardCharsets.UTF_8);\n        String extractedFileString=CharStreams.toString(new InputStreamReader(tarArchiveInputStream,StandardCharsets.UTF_8));\n        Assert.assertEquals(expectedFileString,extractedFileString);\n      }\n    }\n    verifyNextTarArchiveEntry(tarArchiveInputStream,\"extract/here/banana/blobA\",blobA);\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 253,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 80,
        "startColumnNumber" : 4,
        "endLineNumber" : 80,
        "endColumnNumber" : 67
      },
      "nodeContext" : "Path blobA=Paths.get(Resources.getResource(\"blobA\").toURI());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.nio.file.Paths"
  }, {
    "nodeContext" : "Paths",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 114,
      "startColumnNumber" : 12,
      "endLineNumber" : 114,
      "endColumnNumber" : 17
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 114,
        "startColumnNumber" : 12,
        "endLineNumber" : 114,
        "endColumnNumber" : 56
      },
      "nodeContext" : "Paths.get(expectedExtractionPath.toString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 113,
        "startColumnNumber" : 8,
        "endLineNumber" : 114,
        "endColumnNumber" : 86
      },
      "nodeContext" : "Assert.assertEquals(Paths.get(expectedExtractionPath.toString()),Paths.get(header.getName()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 113,
        "startColumnNumber" : 8,
        "endLineNumber" : 114,
        "endColumnNumber" : 87
      },
      "nodeContext" : "Assert.assertEquals(Paths.get(expectedExtractionPath.toString()),Paths.get(header.getName()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1018,
        "startLineNumber" : 104,
        "startColumnNumber" : 44,
        "endLineNumber" : 126,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  TarArchiveEntry header=tarArchiveInputStream.getNextTarEntry();\n  StringBuilder expectedExtractionPath=new StringBuilder(\"extract/here/apple\");\n  for (  Path pathComponent : layerDirectory.getParent().relativize(path)) {\n    expectedExtractionPath.append(\"/\").append(pathComponent);\n  }\n  Assert.assertEquals(Paths.get(expectedExtractionPath.toString()),Paths.get(header.getName()));\n  if (Files.isRegularFile(path)) {\n    String expectedFileString=new String(Files.readAllBytes(path),StandardCharsets.UTF_8);\n    String extractedFileString=CharStreams.toString(new InputStreamReader(tarArchiveInputStream,StandardCharsets.UTF_8));\n    Assert.assertEquals(expectedFileString,extractedFileString);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 96,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1056,
        "startLineNumber" : 104,
        "startColumnNumber" : 6,
        "endLineNumber" : 126,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (Path path : layerDirectoryPaths) {\n  TarArchiveEntry header=tarArchiveInputStream.getNextTarEntry();\n  StringBuilder expectedExtractionPath=new StringBuilder(\"extract/here/apple\");\n  for (  Path pathComponent : layerDirectory.getParent().relativize(path)) {\n    expectedExtractionPath.append(\"/\").append(pathComponent);\n  }\n  Assert.assertEquals(Paths.get(expectedExtractionPath.toString()),Paths.get(header.getName()));\n  if (Files.isRegularFile(path)) {\n    String expectedFileString=new String(Files.readAllBytes(path),StandardCharsets.UTF_8);\n    String extractedFileString=CharStreams.toString(new InputStreamReader(tarArchiveInputStream,StandardCharsets.UTF_8));\n    Assert.assertEquals(expectedFileString,extractedFileString);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 102,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1580,
        "startLineNumber" : 97,
        "startColumnNumber" : 72,
        "endLineNumber" : 130,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  verifyNextTarArchiveEntry(tarArchiveInputStream,\"extract/here/apple/blobA\",blobA);\n  ImmutableList<Path> layerDirectoryPaths=new DirectoryWalker(layerDirectory).filter(path -> !path.equals(layerDirectory)).walk();\n  for (  Path path : layerDirectoryPaths) {\n    TarArchiveEntry header=tarArchiveInputStream.getNextTarEntry();\n    StringBuilder expectedExtractionPath=new StringBuilder(\"extract/here/apple\");\n    for (    Path pathComponent : layerDirectory.getParent().relativize(path)) {\n      expectedExtractionPath.append(\"/\").append(pathComponent);\n    }\n    Assert.assertEquals(Paths.get(expectedExtractionPath.toString()),Paths.get(header.getName()));\n    if (Files.isRegularFile(path)) {\n      String expectedFileString=new String(Files.readAllBytes(path),StandardCharsets.UTF_8);\n      String extractedFileString=CharStreams.toString(new InputStreamReader(tarArchiveInputStream,StandardCharsets.UTF_8));\n      Assert.assertEquals(expectedFileString,extractedFileString);\n    }\n  }\n  verifyNextTarArchiveEntry(tarArchiveInputStream,\"extract/here/banana/blobA\",blobA);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 139,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1703,
        "startLineNumber" : 96,
        "startColumnNumber" : 4,
        "endLineNumber" : 130,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (TarArchiveInputStream tarArchiveInputStream=new TarArchiveInputStream(Files.newInputStream(temporaryFile))){\n  verifyNextTarArchiveEntry(tarArchiveInputStream,\"extract/here/apple/blobA\",blobA);\n  ImmutableList<Path> layerDirectoryPaths=new DirectoryWalker(layerDirectory).filter(path -> !path.equals(layerDirectory)).walk();\n  for (  Path path : layerDirectoryPaths) {\n    TarArchiveEntry header=tarArchiveInputStream.getNextTarEntry();\n    StringBuilder expectedExtractionPath=new StringBuilder(\"extract/here/apple\");\n    for (    Path pathComponent : layerDirectory.getParent().relativize(path)) {\n      expectedExtractionPath.append(\"/\").append(pathComponent);\n    }\n    Assert.assertEquals(Paths.get(expectedExtractionPath.toString()),Paths.get(header.getName()));\n    if (Files.isRegularFile(path)) {\n      String expectedFileString=new String(Files.readAllBytes(path),StandardCharsets.UTF_8);\n      String extractedFileString=CharStreams.toString(new InputStreamReader(tarArchiveInputStream,StandardCharsets.UTF_8));\n      Assert.assertEquals(expectedFileString,extractedFileString);\n    }\n  }\n  verifyNextTarArchiveEntry(tarArchiveInputStream,\"extract/here/banana/blobA\",blobA);\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 152,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2499,
        "startLineNumber" : 78,
        "startColumnNumber" : 65,
        "endLineNumber" : 131,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Path layerDirectory=Paths.get(Resources.getResource(\"layer\").toURI());\n  Path blobA=Paths.get(Resources.getResource(\"blobA\").toURI());\n  ReproducibleLayerBuilder layerBuilder=new ReproducibleLayerBuilder().addFiles(Arrays.asList(layerDirectory,blobA),\"extract/here/apple\").addFiles(Collections.singletonList(blobA),\"extract/here/banana\");\n  UnwrittenLayer unwrittenLayer=layerBuilder.build();\n  Path temporaryFile=temporaryFolder.newFile().toPath();\n  try (OutputStream temporaryFileOutputStream=new BufferedOutputStream(Files.newOutputStream(temporaryFile))){\n    unwrittenLayer.getBlob().writeTo(temporaryFileOutputStream);\n  }\n   try (TarArchiveInputStream tarArchiveInputStream=new TarArchiveInputStream(Files.newInputStream(temporaryFile))){\n    verifyNextTarArchiveEntry(tarArchiveInputStream,\"extract/here/apple/blobA\",blobA);\n    ImmutableList<Path> layerDirectoryPaths=new DirectoryWalker(layerDirectory).filter(path -> !path.equals(layerDirectory)).walk();\n    for (    Path path : layerDirectoryPaths) {\n      TarArchiveEntry header=tarArchiveInputStream.getNextTarEntry();\n      StringBuilder expectedExtractionPath=new StringBuilder(\"extract/here/apple\");\n      for (      Path pathComponent : layerDirectory.getParent().relativize(path)) {\n        expectedExtractionPath.append(\"/\").append(pathComponent);\n      }\n      Assert.assertEquals(Paths.get(expectedExtractionPath.toString()),Paths.get(header.getName()));\n      if (Files.isRegularFile(path)) {\n        String expectedFileString=new String(Files.readAllBytes(path),StandardCharsets.UTF_8);\n        String extractedFileString=CharStreams.toString(new InputStreamReader(tarArchiveInputStream,StandardCharsets.UTF_8));\n        Assert.assertEquals(expectedFileString,extractedFileString);\n      }\n    }\n    verifyNextTarArchiveEntry(tarArchiveInputStream,\"extract/here/banana/blobA\",blobA);\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 243,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2570,
        "startLineNumber" : 77,
        "startColumnNumber" : 2,
        "endLineNumber" : 131,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testBuild() throws URISyntaxException, IOException {\n  Path layerDirectory=Paths.get(Resources.getResource(\"layer\").toURI());\n  Path blobA=Paths.get(Resources.getResource(\"blobA\").toURI());\n  ReproducibleLayerBuilder layerBuilder=new ReproducibleLayerBuilder().addFiles(Arrays.asList(layerDirectory,blobA),\"extract/here/apple\").addFiles(Collections.singletonList(blobA),\"extract/here/banana\");\n  UnwrittenLayer unwrittenLayer=layerBuilder.build();\n  Path temporaryFile=temporaryFolder.newFile().toPath();\n  try (OutputStream temporaryFileOutputStream=new BufferedOutputStream(Files.newOutputStream(temporaryFile))){\n    unwrittenLayer.getBlob().writeTo(temporaryFileOutputStream);\n  }\n   try (TarArchiveInputStream tarArchiveInputStream=new TarArchiveInputStream(Files.newInputStream(temporaryFile))){\n    verifyNextTarArchiveEntry(tarArchiveInputStream,\"extract/here/apple/blobA\",blobA);\n    ImmutableList<Path> layerDirectoryPaths=new DirectoryWalker(layerDirectory).filter(path -> !path.equals(layerDirectory)).walk();\n    for (    Path path : layerDirectoryPaths) {\n      TarArchiveEntry header=tarArchiveInputStream.getNextTarEntry();\n      StringBuilder expectedExtractionPath=new StringBuilder(\"extract/here/apple\");\n      for (      Path pathComponent : layerDirectory.getParent().relativize(path)) {\n        expectedExtractionPath.append(\"/\").append(pathComponent);\n      }\n      Assert.assertEquals(Paths.get(expectedExtractionPath.toString()),Paths.get(header.getName()));\n      if (Files.isRegularFile(path)) {\n        String expectedFileString=new String(Files.readAllBytes(path),StandardCharsets.UTF_8);\n        String extractedFileString=CharStreams.toString(new InputStreamReader(tarArchiveInputStream,StandardCharsets.UTF_8));\n        Assert.assertEquals(expectedFileString,extractedFileString);\n      }\n    }\n    verifyNextTarArchiveEntry(tarArchiveInputStream,\"extract/here/banana/blobA\",blobA);\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 253,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 114,
        "startColumnNumber" : 12,
        "endLineNumber" : 114,
        "endColumnNumber" : 56
      },
      "nodeContext" : "Paths.get(expectedExtractionPath.toString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.nio.file.Paths"
  }, {
    "nodeContext" : "Paths",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 114,
      "startColumnNumber" : 58,
      "endLineNumber" : 114,
      "endColumnNumber" : 63
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 114,
        "startColumnNumber" : 58,
        "endLineNumber" : 114,
        "endColumnNumber" : 85
      },
      "nodeContext" : "Paths.get(header.getName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 113,
        "startColumnNumber" : 8,
        "endLineNumber" : 114,
        "endColumnNumber" : 86
      },
      "nodeContext" : "Assert.assertEquals(Paths.get(expectedExtractionPath.toString()),Paths.get(header.getName()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 113,
        "startColumnNumber" : 8,
        "endLineNumber" : 114,
        "endColumnNumber" : 87
      },
      "nodeContext" : "Assert.assertEquals(Paths.get(expectedExtractionPath.toString()),Paths.get(header.getName()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1018,
        "startLineNumber" : 104,
        "startColumnNumber" : 44,
        "endLineNumber" : 126,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  TarArchiveEntry header=tarArchiveInputStream.getNextTarEntry();\n  StringBuilder expectedExtractionPath=new StringBuilder(\"extract/here/apple\");\n  for (  Path pathComponent : layerDirectory.getParent().relativize(path)) {\n    expectedExtractionPath.append(\"/\").append(pathComponent);\n  }\n  Assert.assertEquals(Paths.get(expectedExtractionPath.toString()),Paths.get(header.getName()));\n  if (Files.isRegularFile(path)) {\n    String expectedFileString=new String(Files.readAllBytes(path),StandardCharsets.UTF_8);\n    String extractedFileString=CharStreams.toString(new InputStreamReader(tarArchiveInputStream,StandardCharsets.UTF_8));\n    Assert.assertEquals(expectedFileString,extractedFileString);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 96,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1056,
        "startLineNumber" : 104,
        "startColumnNumber" : 6,
        "endLineNumber" : 126,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (Path path : layerDirectoryPaths) {\n  TarArchiveEntry header=tarArchiveInputStream.getNextTarEntry();\n  StringBuilder expectedExtractionPath=new StringBuilder(\"extract/here/apple\");\n  for (  Path pathComponent : layerDirectory.getParent().relativize(path)) {\n    expectedExtractionPath.append(\"/\").append(pathComponent);\n  }\n  Assert.assertEquals(Paths.get(expectedExtractionPath.toString()),Paths.get(header.getName()));\n  if (Files.isRegularFile(path)) {\n    String expectedFileString=new String(Files.readAllBytes(path),StandardCharsets.UTF_8);\n    String extractedFileString=CharStreams.toString(new InputStreamReader(tarArchiveInputStream,StandardCharsets.UTF_8));\n    Assert.assertEquals(expectedFileString,extractedFileString);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 102,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1580,
        "startLineNumber" : 97,
        "startColumnNumber" : 72,
        "endLineNumber" : 130,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  verifyNextTarArchiveEntry(tarArchiveInputStream,\"extract/here/apple/blobA\",blobA);\n  ImmutableList<Path> layerDirectoryPaths=new DirectoryWalker(layerDirectory).filter(path -> !path.equals(layerDirectory)).walk();\n  for (  Path path : layerDirectoryPaths) {\n    TarArchiveEntry header=tarArchiveInputStream.getNextTarEntry();\n    StringBuilder expectedExtractionPath=new StringBuilder(\"extract/here/apple\");\n    for (    Path pathComponent : layerDirectory.getParent().relativize(path)) {\n      expectedExtractionPath.append(\"/\").append(pathComponent);\n    }\n    Assert.assertEquals(Paths.get(expectedExtractionPath.toString()),Paths.get(header.getName()));\n    if (Files.isRegularFile(path)) {\n      String expectedFileString=new String(Files.readAllBytes(path),StandardCharsets.UTF_8);\n      String extractedFileString=CharStreams.toString(new InputStreamReader(tarArchiveInputStream,StandardCharsets.UTF_8));\n      Assert.assertEquals(expectedFileString,extractedFileString);\n    }\n  }\n  verifyNextTarArchiveEntry(tarArchiveInputStream,\"extract/here/banana/blobA\",blobA);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 139,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1703,
        "startLineNumber" : 96,
        "startColumnNumber" : 4,
        "endLineNumber" : 130,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (TarArchiveInputStream tarArchiveInputStream=new TarArchiveInputStream(Files.newInputStream(temporaryFile))){\n  verifyNextTarArchiveEntry(tarArchiveInputStream,\"extract/here/apple/blobA\",blobA);\n  ImmutableList<Path> layerDirectoryPaths=new DirectoryWalker(layerDirectory).filter(path -> !path.equals(layerDirectory)).walk();\n  for (  Path path : layerDirectoryPaths) {\n    TarArchiveEntry header=tarArchiveInputStream.getNextTarEntry();\n    StringBuilder expectedExtractionPath=new StringBuilder(\"extract/here/apple\");\n    for (    Path pathComponent : layerDirectory.getParent().relativize(path)) {\n      expectedExtractionPath.append(\"/\").append(pathComponent);\n    }\n    Assert.assertEquals(Paths.get(expectedExtractionPath.toString()),Paths.get(header.getName()));\n    if (Files.isRegularFile(path)) {\n      String expectedFileString=new String(Files.readAllBytes(path),StandardCharsets.UTF_8);\n      String extractedFileString=CharStreams.toString(new InputStreamReader(tarArchiveInputStream,StandardCharsets.UTF_8));\n      Assert.assertEquals(expectedFileString,extractedFileString);\n    }\n  }\n  verifyNextTarArchiveEntry(tarArchiveInputStream,\"extract/here/banana/blobA\",blobA);\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 152,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2499,
        "startLineNumber" : 78,
        "startColumnNumber" : 65,
        "endLineNumber" : 131,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Path layerDirectory=Paths.get(Resources.getResource(\"layer\").toURI());\n  Path blobA=Paths.get(Resources.getResource(\"blobA\").toURI());\n  ReproducibleLayerBuilder layerBuilder=new ReproducibleLayerBuilder().addFiles(Arrays.asList(layerDirectory,blobA),\"extract/here/apple\").addFiles(Collections.singletonList(blobA),\"extract/here/banana\");\n  UnwrittenLayer unwrittenLayer=layerBuilder.build();\n  Path temporaryFile=temporaryFolder.newFile().toPath();\n  try (OutputStream temporaryFileOutputStream=new BufferedOutputStream(Files.newOutputStream(temporaryFile))){\n    unwrittenLayer.getBlob().writeTo(temporaryFileOutputStream);\n  }\n   try (TarArchiveInputStream tarArchiveInputStream=new TarArchiveInputStream(Files.newInputStream(temporaryFile))){\n    verifyNextTarArchiveEntry(tarArchiveInputStream,\"extract/here/apple/blobA\",blobA);\n    ImmutableList<Path> layerDirectoryPaths=new DirectoryWalker(layerDirectory).filter(path -> !path.equals(layerDirectory)).walk();\n    for (    Path path : layerDirectoryPaths) {\n      TarArchiveEntry header=tarArchiveInputStream.getNextTarEntry();\n      StringBuilder expectedExtractionPath=new StringBuilder(\"extract/here/apple\");\n      for (      Path pathComponent : layerDirectory.getParent().relativize(path)) {\n        expectedExtractionPath.append(\"/\").append(pathComponent);\n      }\n      Assert.assertEquals(Paths.get(expectedExtractionPath.toString()),Paths.get(header.getName()));\n      if (Files.isRegularFile(path)) {\n        String expectedFileString=new String(Files.readAllBytes(path),StandardCharsets.UTF_8);\n        String extractedFileString=CharStreams.toString(new InputStreamReader(tarArchiveInputStream,StandardCharsets.UTF_8));\n        Assert.assertEquals(expectedFileString,extractedFileString);\n      }\n    }\n    verifyNextTarArchiveEntry(tarArchiveInputStream,\"extract/here/banana/blobA\",blobA);\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 243,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2570,
        "startLineNumber" : 77,
        "startColumnNumber" : 2,
        "endLineNumber" : 131,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testBuild() throws URISyntaxException, IOException {\n  Path layerDirectory=Paths.get(Resources.getResource(\"layer\").toURI());\n  Path blobA=Paths.get(Resources.getResource(\"blobA\").toURI());\n  ReproducibleLayerBuilder layerBuilder=new ReproducibleLayerBuilder().addFiles(Arrays.asList(layerDirectory,blobA),\"extract/here/apple\").addFiles(Collections.singletonList(blobA),\"extract/here/banana\");\n  UnwrittenLayer unwrittenLayer=layerBuilder.build();\n  Path temporaryFile=temporaryFolder.newFile().toPath();\n  try (OutputStream temporaryFileOutputStream=new BufferedOutputStream(Files.newOutputStream(temporaryFile))){\n    unwrittenLayer.getBlob().writeTo(temporaryFileOutputStream);\n  }\n   try (TarArchiveInputStream tarArchiveInputStream=new TarArchiveInputStream(Files.newInputStream(temporaryFile))){\n    verifyNextTarArchiveEntry(tarArchiveInputStream,\"extract/here/apple/blobA\",blobA);\n    ImmutableList<Path> layerDirectoryPaths=new DirectoryWalker(layerDirectory).filter(path -> !path.equals(layerDirectory)).walk();\n    for (    Path path : layerDirectoryPaths) {\n      TarArchiveEntry header=tarArchiveInputStream.getNextTarEntry();\n      StringBuilder expectedExtractionPath=new StringBuilder(\"extract/here/apple\");\n      for (      Path pathComponent : layerDirectory.getParent().relativize(path)) {\n        expectedExtractionPath.append(\"/\").append(pathComponent);\n      }\n      Assert.assertEquals(Paths.get(expectedExtractionPath.toString()),Paths.get(header.getName()));\n      if (Files.isRegularFile(path)) {\n        String expectedFileString=new String(Files.readAllBytes(path),StandardCharsets.UTF_8);\n        String extractedFileString=CharStreams.toString(new InputStreamReader(tarArchiveInputStream,StandardCharsets.UTF_8));\n        Assert.assertEquals(expectedFileString,extractedFileString);\n      }\n    }\n    verifyNextTarArchiveEntry(tarArchiveInputStream,\"extract/here/banana/blobA\",blobA);\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 253,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 114,
        "startColumnNumber" : 58,
        "endLineNumber" : 114,
        "endColumnNumber" : 85
      },
      "nodeContext" : "Paths.get(header.getName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.nio.file.Paths"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 79,
    "startColumnNumber" : 26,
    "endLineNumber" : 79,
    "endColumnNumber" : 31
  }, {
    "charLength" : 5,
    "startLineNumber" : 80,
    "startColumnNumber" : 17,
    "endLineNumber" : 80,
    "endColumnNumber" : 22
  }, {
    "charLength" : 5,
    "startLineNumber" : 114,
    "startColumnNumber" : 12,
    "endLineNumber" : 114,
    "endColumnNumber" : 17
  }, {
    "charLength" : 5,
    "startLineNumber" : 114,
    "startColumnNumber" : 58,
    "endLineNumber" : 114,
    "endColumnNumber" : 63
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 1
  } ]
}