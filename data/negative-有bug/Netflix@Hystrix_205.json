{
  "id" : 205,
  "expression" : "new TreeTraverser<Type>(){\n  @Override public Iterable<Type> children(  Type root){\n    if (root instanceof ParameterizedType) {\n      ParameterizedType pType=(ParameterizedType)root;\n      return Arrays.asList(pType.getActualTypeArguments());\n    }\n else     if (root instanceof TypeVariable) {\n      TypeVariable pType=(TypeVariable)root;\n      return Arrays.asList(pType.getBounds());\n    }\n    return Collections.emptyList();\n  }\n}\n",
  "projectName" : "Netflix@Hystrix",
  "commitID" : "45d7875c3e51f6d6152b667db31e4fe435711917",
  "filePath" : "/hystrix-contrib/hystrix-javanica/src/main/java/com/netflix/hystrix/contrib/javanica/utils/TypeHelper.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new TreeTraverser<Type>(){\n  @Override public Iterable<Type> children(  Type root){\n    if (root instanceof ParameterizedType) {\n      ParameterizedType pType=(ParameterizedType)root;\n      return Arrays.asList(pType.getActualTypeArguments());\n    }\n else     if (root instanceof TypeVariable) {\n      TypeVariable pType=(TypeVariable)root;\n      return Arrays.asList(pType.getBounds());\n    }\n    return Collections.emptyList();\n  }\n}\n",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 580,
      "startLineNumber" : 87,
      "startColumnNumber" : 44,
      "endLineNumber" : 99,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 70,
    "astHeight" : 12,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 596,
        "startLineNumber" : 87,
        "startColumnNumber" : 28,
        "endLineNumber" : 99,
        "endColumnNumber" : 9
      },
      "nodeContext" : "typeTraverser=new TreeTraverser<Type>(){\n  @Override public Iterable<Type> children(  Type root){\n    if (root instanceof ParameterizedType) {\n      ParameterizedType pType=(ParameterizedType)root;\n      return Arrays.asList(pType.getActualTypeArguments());\n    }\n else     if (root instanceof TypeVariable) {\n      TypeVariable pType=(TypeVariable)root;\n      return Arrays.asList(pType.getBounds());\n    }\n    return Collections.emptyList();\n  }\n}\n",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 72,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 617,
        "startLineNumber" : 87,
        "startColumnNumber" : 8,
        "endLineNumber" : 99,
        "endColumnNumber" : 10
      },
      "nodeContext" : "TreeTraverser<Type> typeTraverser=new TreeTraverser<Type>(){\n  @Override public Iterable<Type> children(  Type root){\n    if (root instanceof ParameterizedType) {\n      ParameterizedType pType=(ParameterizedType)root;\n      return Arrays.asList(pType.getActualTypeArguments());\n    }\n else     if (root instanceof TypeVariable) {\n      TypeVariable pType=(TypeVariable)root;\n      return Arrays.asList(pType.getBounds());\n    }\n    return Collections.emptyList();\n  }\n}\n;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 78,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 863,
        "startLineNumber" : 84,
        "startColumnNumber" : 61,
        "endLineNumber" : 104,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Validate.notNull(type,\"type cannot be null\");\n  List<Type> types=new ArrayList<Type>();\n  TreeTraverser<Type> typeTraverser=new TreeTraverser<Type>(){\n    @Override public Iterable<Type> children(    Type root){\n      if (root instanceof ParameterizedType) {\n        ParameterizedType pType=(ParameterizedType)root;\n        return Arrays.asList(pType.getActualTypeArguments());\n      }\n else       if (root instanceof TypeVariable) {\n        TypeVariable pType=(TypeVariable)root;\n        return Arrays.asList(pType.getBounds());\n      }\n      return Collections.emptyList();\n    }\n  }\n;\n  for (  Type t : typeTraverser.breadthFirstTraversal(type)) {\n    types.add(t);\n  }\n  return types;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 116,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1625,
        "startLineNumber" : 68,
        "startColumnNumber" : 4,
        "endLineNumber" : 104,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Unwinds parametrized type into plain list that contains all parameters for the given type including nested parameterized types, for example calling the method for the following type <code> GType<GType<GDoubleType<GType<GDoubleType<Parent, Parent>>, Parent>>> </code> will return list of 8 elements: <code> [GType, GType, GDoubleType, GType, GDoubleType, Parent, Parent, Parent] </code> if the given type is not parametrized then returns list with one element which is given type passed into method.\n * @param type the parameterized type\n * @return list of {@link Type}\n */\n@ParametersAreNonnullByDefault public static List<Type> flattenTypeVariables(Type type){\n  Validate.notNull(type,\"type cannot be null\");\n  List<Type> types=new ArrayList<Type>();\n  TreeTraverser<Type> typeTraverser=new TreeTraverser<Type>(){\n    @Override public Iterable<Type> children(    Type root){\n      if (root instanceof ParameterizedType) {\n        ParameterizedType pType=(ParameterizedType)root;\n        return Arrays.asList(pType.getActualTypeArguments());\n      }\n else       if (root instanceof TypeVariable) {\n        TypeVariable pType=(TypeVariable)root;\n        return Arrays.asList(pType.getBounds());\n      }\n      return Collections.emptyList();\n    }\n  }\n;\n  for (  Type t : typeTraverser.breadthFirstTraversal(type)) {\n    types.add(t);\n  }\n  return types;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 132,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 617,
        "startLineNumber" : 87,
        "startColumnNumber" : 8,
        "endLineNumber" : 99,
        "endColumnNumber" : 10
      },
      "nodeContext" : "TreeTraverser<Type> typeTraverser=new TreeTraverser<Type>(){\n  @Override public Iterable<Type> children(  Type root){\n    if (root instanceof ParameterizedType) {\n      ParameterizedType pType=(ParameterizedType)root;\n      return Arrays.asList(pType.getActualTypeArguments());\n    }\n else     if (root instanceof TypeVariable) {\n      TypeVariable pType=(TypeVariable)root;\n      return Arrays.asList(pType.getBounds());\n    }\n    return Collections.emptyList();\n  }\n}\n;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 78,
      "astHeight" : 14
    },
    "tokenLength" : 28,
    "type" : ""
  } ],
  "positionList" : [ {
    "charLength" : 580,
    "startLineNumber" : 87,
    "startColumnNumber" : 44,
    "endLineNumber" : 99,
    "endColumnNumber" : 9
  } ],
  "layoutRelationDataList" : [ ]
}