{
  "id" : 189,
  "expression" : "claimData != null",
  "projectName" : "thingsboard@thingsboard",
  "commitID" : "7c2b3a9fbf84cc58aa7546029c5c7c10a662c55a",
  "filePath" : "/application/src/main/java/org/thingsboard/server/service/device/ClaimDevicesServiceImpl.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "claimData != null",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 149,
      "startColumnNumber" : 12,
      "endLineNumber" : 149,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1701,
        "startLineNumber" : 149,
        "startColumnNumber" : 8,
        "endLineNumber" : 173,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (claimData != null) {\n  long currTs=System.currentTimeMillis();\n  if (currTs > claimData.getData().getExpirationTime() || !secretKeyIsEmptyOrEqual(secretKey,claimData.getData().getSecretKey())) {\n    log.warn(\"The claiming timeout occurred or wrong 'secretKey' provided for the device [{}]\",device.getName());\n    if (claimData.isFromCache()) {\n      cache.evict(claimData.getKey());\n    }\n    return Futures.immediateFuture(new ClaimResult(null,ClaimResponse.FAILURE));\n  }\n else {\n    if (device.getCustomerId().getId().equals(ModelConstants.NULL_UUID)) {\n      device.setCustomerId(customerId);\n      Device savedDevice=deviceService.saveDevice(device);\n      clusterService.onDeviceUpdated(savedDevice,device);\n      return Futures.transform(removeClaimingSavedData(cache,claimData,device),result -> new ClaimResult(savedDevice,ClaimResponse.SUCCESS),MoreExecutors.directExecutor());\n    }\n    return Futures.transform(removeClaimingSavedData(cache,claimData,device),result -> new ClaimResult(null,ClaimResponse.CLAIMED),MoreExecutors.directExecutor());\n  }\n}\n else {\n  log.warn(\"Failed to find the device's claiming message![{}]\",device.getName());\n  if (device.getCustomerId().getId().equals(ModelConstants.NULL_UUID)) {\n    return Futures.immediateFuture(new ClaimResult(null,ClaimResponse.FAILURE));\n  }\n else {\n    return Futures.immediateFuture(new ClaimResult(null,ClaimResponse.CLAIMED));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 183,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1846,
        "startLineNumber" : 146,
        "startColumnNumber" : 157,
        "endLineNumber" : 174,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Cache cache=cacheManager.getCache(CLAIM_DEVICES_CACHE);\n  ClaimDataInfo claimData=getClaimData(cache,device);\n  if (claimData != null) {\n    long currTs=System.currentTimeMillis();\n    if (currTs > claimData.getData().getExpirationTime() || !secretKeyIsEmptyOrEqual(secretKey,claimData.getData().getSecretKey())) {\n      log.warn(\"The claiming timeout occurred or wrong 'secretKey' provided for the device [{}]\",device.getName());\n      if (claimData.isFromCache()) {\n        cache.evict(claimData.getKey());\n      }\n      return Futures.immediateFuture(new ClaimResult(null,ClaimResponse.FAILURE));\n    }\n else {\n      if (device.getCustomerId().getId().equals(ModelConstants.NULL_UUID)) {\n        device.setCustomerId(customerId);\n        Device savedDevice=deviceService.saveDevice(device);\n        clusterService.onDeviceUpdated(savedDevice,device);\n        return Futures.transform(removeClaimingSavedData(cache,claimData,device),result -> new ClaimResult(savedDevice,ClaimResponse.SUCCESS),MoreExecutors.directExecutor());\n      }\n      return Futures.transform(removeClaimingSavedData(cache,claimData,device),result -> new ClaimResult(null,ClaimResponse.CLAIMED),MoreExecutors.directExecutor());\n    }\n  }\n else {\n    log.warn(\"Failed to find the device's claiming message![{}]\",device.getName());\n    if (device.getCustomerId().getId().equals(ModelConstants.NULL_UUID)) {\n      return Futures.immediateFuture(new ClaimResult(null,ClaimResponse.FAILURE));\n    }\n else {\n      return Futures.immediateFuture(new ClaimResult(null,ClaimResponse.CLAIMED));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 202,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2013,
        "startLineNumber" : 145,
        "startColumnNumber" : 4,
        "endLineNumber" : 174,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public ListenableFuture<ClaimResult> claimDevice(Device device,CustomerId customerId,String secretKey) throws ExecutionException, InterruptedException {\n  Cache cache=cacheManager.getCache(CLAIM_DEVICES_CACHE);\n  ClaimDataInfo claimData=getClaimData(cache,device);\n  if (claimData != null) {\n    long currTs=System.currentTimeMillis();\n    if (currTs > claimData.getData().getExpirationTime() || !secretKeyIsEmptyOrEqual(secretKey,claimData.getData().getSecretKey())) {\n      log.warn(\"The claiming timeout occurred or wrong 'secretKey' provided for the device [{}]\",device.getName());\n      if (claimData.isFromCache()) {\n        cache.evict(claimData.getKey());\n      }\n      return Futures.immediateFuture(new ClaimResult(null,ClaimResponse.FAILURE));\n    }\n else {\n      if (device.getCustomerId().getId().equals(ModelConstants.NULL_UUID)) {\n        device.setCustomerId(customerId);\n        Device savedDevice=deviceService.saveDevice(device);\n        clusterService.onDeviceUpdated(savedDevice,device);\n        return Futures.transform(removeClaimingSavedData(cache,claimData,device),result -> new ClaimResult(savedDevice,ClaimResponse.SUCCESS),MoreExecutors.directExecutor());\n      }\n      return Futures.transform(removeClaimingSavedData(cache,claimData,device),result -> new ClaimResult(null,ClaimResponse.CLAIMED),MoreExecutors.directExecutor());\n    }\n  }\n else {\n    log.warn(\"Failed to find the device's claiming message![{}]\",device.getName());\n    if (device.getCustomerId().getId().equals(ModelConstants.NULL_UUID)) {\n      return Futures.immediateFuture(new ClaimResult(null,ClaimResponse.FAILURE));\n    }\n else {\n      return Futures.immediateFuture(new ClaimResult(null,ClaimResponse.CLAIMED));\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 228,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1701,
        "startLineNumber" : 149,
        "startColumnNumber" : 8,
        "endLineNumber" : 173,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (claimData != null) {\n  long currTs=System.currentTimeMillis();\n  if (currTs > claimData.getData().getExpirationTime() || !secretKeyIsEmptyOrEqual(secretKey,claimData.getData().getSecretKey())) {\n    log.warn(\"The claiming timeout occurred or wrong 'secretKey' provided for the device [{}]\",device.getName());\n    if (claimData.isFromCache()) {\n      cache.evict(claimData.getKey());\n    }\n    return Futures.immediateFuture(new ClaimResult(null,ClaimResponse.FAILURE));\n  }\n else {\n    if (device.getCustomerId().getId().equals(ModelConstants.NULL_UUID)) {\n      device.setCustomerId(customerId);\n      Device savedDevice=deviceService.saveDevice(device);\n      clusterService.onDeviceUpdated(savedDevice,device);\n      return Futures.transform(removeClaimingSavedData(cache,claimData,device),result -> new ClaimResult(savedDevice,ClaimResponse.SUCCESS),MoreExecutors.directExecutor());\n    }\n    return Futures.transform(removeClaimingSavedData(cache,claimData,device),result -> new ClaimResult(null,ClaimResponse.CLAIMED),MoreExecutors.directExecutor());\n  }\n}\n else {\n  log.warn(\"Failed to find the device's claiming message![{}]\",device.getName());\n  if (device.getCustomerId().getId().equals(ModelConstants.NULL_UUID)) {\n    return Futures.immediateFuture(new ClaimResult(null,ClaimResponse.FAILURE));\n  }\n else {\n    return Futures.immediateFuture(new ClaimResult(null,ClaimResponse.CLAIMED));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 183,
      "astHeight" : 12
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 17,
    "startLineNumber" : 149,
    "startColumnNumber" : 12,
    "endLineNumber" : 149,
    "endColumnNumber" : 29
  } ],
  "layoutRelationDataList" : [ ]
}