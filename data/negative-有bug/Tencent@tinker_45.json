{
  "id" : 45,
  "expression" : "!tinker.isTinkerLoaded()",
  "projectName" : "Tencent@tinker",
  "commitID" : "df9e1d29420d53a650ab73569d828a22e3cfe728",
  "filePath" : "/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/library/TinkerLoadLibrary.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "!tinker.isTinkerLoaded()",
    "nodeType" : "PrefixExpression",
    "nodePosition" : {
      "charLength" : 24,
      "startLineNumber" : 182,
      "startColumnNumber" : 12,
      "endLineNumber" : 182,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 139,
        "startLineNumber" : 182,
        "startColumnNumber" : 8,
        "endLineNumber" : 185,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!tinker.isTinkerLoaded()) {\n  ShareTinkerLog.i(TAG,\"tinker is not loaded, just return\");\n  return false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1311,
        "startLineNumber" : 180,
        "startColumnNumber" : 87,
        "endLineNumber" : 212,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Tinker tinker=Tinker.with(context);\n  if (!tinker.isTinkerLoaded()) {\n    ShareTinkerLog.i(TAG,\"tinker is not loaded, just return\");\n    return false;\n  }\n  TinkerLoadResult loadResult=tinker.getTinkerLoadResultIfPresent();\n  if (loadResult.libs == null) {\n    ShareTinkerLog.i(TAG,\"tinker libs is null, just return\");\n    return false;\n  }\n  File soDir=new File(loadResult.libraryDirectory,\"lib/\" + currentABI);\n  if (!soDir.exists()) {\n    ShareTinkerLog.e(TAG,\"current libraryABI folder is not exist, path: %s\",soDir.getPath());\n    return false;\n  }\n  ClassLoader classLoader=context.getClassLoader();\n  if (classLoader == null) {\n    ShareTinkerLog.e(TAG,\"classloader is null\");\n    return false;\n  }\n  ShareTinkerLog.i(TAG,\"before hack classloader:\" + classLoader.toString());\n  try {\n    installNativeLibraryPath(classLoader,soDir);\n    return true;\n  }\n catch (  Throwable throwable) {\n    ShareTinkerLog.e(TAG,\"installNativeLibraryPath fail:\" + throwable);\n    return false;\n  }\n finally {\n    ShareTinkerLog.i(TAG,\"after hack classloader:\" + classLoader.toString());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 145,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1583,
        "startLineNumber" : 174,
        "startColumnNumber" : 4,
        "endLineNumber" : 212,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * you can reflect your current abi to classloader library path as you don't need to use load*Library method above\n * @param context\n * @param currentABI\n */\npublic static boolean installNavitveLibraryABI(Context context,String currentABI){\n  Tinker tinker=Tinker.with(context);\n  if (!tinker.isTinkerLoaded()) {\n    ShareTinkerLog.i(TAG,\"tinker is not loaded, just return\");\n    return false;\n  }\n  TinkerLoadResult loadResult=tinker.getTinkerLoadResultIfPresent();\n  if (loadResult.libs == null) {\n    ShareTinkerLog.i(TAG,\"tinker libs is null, just return\");\n    return false;\n  }\n  File soDir=new File(loadResult.libraryDirectory,\"lib/\" + currentABI);\n  if (!soDir.exists()) {\n    ShareTinkerLog.e(TAG,\"current libraryABI folder is not exist, path: %s\",soDir.getPath());\n    return false;\n  }\n  ClassLoader classLoader=context.getClassLoader();\n  if (classLoader == null) {\n    ShareTinkerLog.e(TAG,\"classloader is null\");\n    return false;\n  }\n  ShareTinkerLog.i(TAG,\"before hack classloader:\" + classLoader.toString());\n  try {\n    installNativeLibraryPath(classLoader,soDir);\n    return true;\n  }\n catch (  Throwable throwable) {\n    ShareTinkerLog.e(TAG,\"installNativeLibraryPath fail:\" + throwable);\n    return false;\n  }\n finally {\n    ShareTinkerLog.i(TAG,\"after hack classloader:\" + classLoader.toString());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 159,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 139,
        "startLineNumber" : 182,
        "startColumnNumber" : 8,
        "endLineNumber" : 185,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!tinker.isTinkerLoaded()) {\n  ShareTinkerLog.i(TAG,\"tinker is not loaded, just return\");\n  return false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 24,
    "startLineNumber" : 182,
    "startColumnNumber" : 12,
    "endLineNumber" : 182,
    "endColumnNumber" : 36
  } ],
  "layoutRelationDataList" : [ ]
}