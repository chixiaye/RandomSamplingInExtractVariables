{
  "id" : 233,
  "expression" : "rand_nums.contains(key)",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/test/java/com/williamfiset/algorithms/datastructures/hashtable/HashTableSeparateChainingTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "rand_nums.contains(key)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 107,
      "startColumnNumber" : 19,
      "endLineNumber" : 107,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 107,
        "startColumnNumber" : 8,
        "endLineNumber" : 107,
        "endColumnNumber" : 43
      },
      "nodeContext" : "assertTrue(rand_nums.contains(key))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 107,
        "startColumnNumber" : 8,
        "endLineNumber" : 107,
        "endColumnNumber" : 44
      },
      "nodeContext" : "assertTrue(rand_nums.contains(key));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 200,
        "startLineNumber" : 103,
        "startColumnNumber" : 30,
        "endLineNumber" : 109,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  assertEquals(key,map.get(key));\n  assertEquals(map.get(key),map2.get(key));\n  assertTrue(map.hasKey(key));\n  assertTrue(rand_nums.contains(key));\n  count++;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 37,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 224,
        "startLineNumber" : 103,
        "startColumnNumber" : 6,
        "endLineNumber" : 109,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (Integer key : map) {\n  assertEquals(key,map.get(key));\n  assertEquals(map.get(key),map2.get(key));\n  assertTrue(map.hasKey(key));\n  assertTrue(rand_nums.contains(key));\n  count++;\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 43,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 783,
        "startLineNumber" : 91,
        "startColumnNumber" : 45,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  map.clear();\n  map2.clear();\n  assertTrue(map.isEmpty());\n  map=new HashTableSeparateChaining<>();\n  List<Integer> rand_nums=genRandList(MAX_SIZE);\n  for (  Integer key : rand_nums)   assertEquals(map.add(key,key),map2.put(key,key));\n  int count=0;\n  for (  Integer key : map) {\n    assertEquals(key,map.get(key));\n    assertEquals(map.get(key),map2.get(key));\n    assertTrue(map.hasKey(key));\n    assertTrue(rand_nums.contains(key));\n    count++;\n  }\n  for (  Integer key : map2.keySet()) {\n    assertEquals(key,map.get(key));\n  }\n  Set<Integer> set=new HashSet<>();\n  for (  int n : rand_nums)   set.add(n);\n  assertEquals(set.size(),count);\n  assertEquals(map2.size(),count);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 153,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 824,
        "startLineNumber" : 91,
        "startColumnNumber" : 4,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int loop=0; loop < LOOPS; loop++) {\n  map.clear();\n  map2.clear();\n  assertTrue(map.isEmpty());\n  map=new HashTableSeparateChaining<>();\n  List<Integer> rand_nums=genRandList(MAX_SIZE);\n  for (  Integer key : rand_nums)   assertEquals(map.add(key,key),map2.put(key,key));\n  int count=0;\n  for (  Integer key : map) {\n    assertEquals(key,map.get(key));\n    assertEquals(map.get(key),map2.get(key));\n    assertTrue(map.hasKey(key));\n    assertTrue(rand_nums.contains(key));\n    count++;\n  }\n  for (  Integer key : map2.keySet()) {\n    assertEquals(key,map.get(key));\n  }\n  Set<Integer> set=new HashSet<>();\n  for (  int n : rand_nums)   set.add(n);\n  assertEquals(set.size(),count);\n  assertEquals(map2.size(),count);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 164,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 890,
        "startLineNumber" : 87,
        "startColumnNumber" : 29,
        "endLineNumber" : 121,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  HashMap<Integer,Integer> map2=new HashMap<>();\n  for (int loop=0; loop < LOOPS; loop++) {\n    map.clear();\n    map2.clear();\n    assertTrue(map.isEmpty());\n    map=new HashTableSeparateChaining<>();\n    List<Integer> rand_nums=genRandList(MAX_SIZE);\n    for (    Integer key : rand_nums)     assertEquals(map.add(key,key),map2.put(key,key));\n    int count=0;\n    for (    Integer key : map) {\n      assertEquals(key,map.get(key));\n      assertEquals(map.get(key),map2.get(key));\n      assertTrue(map.hasKey(key));\n      assertTrue(rand_nums.contains(key));\n      count++;\n    }\n    for (    Integer key : map2.keySet()) {\n      assertEquals(key,map.get(key));\n    }\n    Set<Integer> set=new HashSet<>();\n    for (    int n : rand_nums)     set.add(n);\n    assertEquals(set.size(),count);\n    assertEquals(map2.size(),count);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 179,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 925,
        "startLineNumber" : 86,
        "startColumnNumber" : 2,
        "endLineNumber" : 121,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testIterator(){\n  HashMap<Integer,Integer> map2=new HashMap<>();\n  for (int loop=0; loop < LOOPS; loop++) {\n    map.clear();\n    map2.clear();\n    assertTrue(map.isEmpty());\n    map=new HashTableSeparateChaining<>();\n    List<Integer> rand_nums=genRandList(MAX_SIZE);\n    for (    Integer key : rand_nums)     assertEquals(map.add(key,key),map2.put(key,key));\n    int count=0;\n    for (    Integer key : map) {\n      assertEquals(key,map.get(key));\n      assertEquals(map.get(key),map2.get(key));\n      assertTrue(map.hasKey(key));\n      assertTrue(rand_nums.contains(key));\n      count++;\n    }\n    for (    Integer key : map2.keySet()) {\n      assertEquals(key,map.get(key));\n    }\n    Set<Integer> set=new HashSet<>();\n    for (    int n : rand_nums)     set.add(n);\n    assertEquals(set.size(),count);\n    assertEquals(map2.size(),count);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 185,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 107,
        "startColumnNumber" : 8,
        "endLineNumber" : 107,
        "endColumnNumber" : 44
      },
      "nodeContext" : "assertTrue(rand_nums.contains(key));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 4,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 23,
    "startLineNumber" : 107,
    "startColumnNumber" : 19,
    "endLineNumber" : 107,
    "endColumnNumber" : 42
  } ],
  "layoutRelationDataList" : [ ]
}