{
  "id" : 189,
  "expression" : "value.length()",
  "projectName" : "openzipkin@zipkin",
  "commitID" : "f02a993656f506277ca83737ddf494ed45fde4b3",
  "filePath" : "/zipkin-server/src/main/java/zipkin2/server/internal/ZipkinQueryApiV2.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "value.length()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 215,
      "startColumnNumber" : 22,
      "endLineNumber" : 215,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 215,
        "startColumnNumber" : 22,
        "endLineNumber" : 215,
        "endColumnNumber" : 40
      },
      "nodeContext" : "value.length() + 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 215,
        "startColumnNumber" : 6,
        "endLineNumber" : 215,
        "endColumnNumber" : 40
      },
      "nodeContext" : "sizeEstimate+=value.length() + 1",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 215,
        "startColumnNumber" : 6,
        "endLineNumber" : 215,
        "endColumnNumber" : 53
      },
      "nodeContext" : "sizeEstimate+=value.length() + 1;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 214,
        "startColumnNumber" : 32,
        "endLineNumber" : 216,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  sizeEstimate+=value.length() + 1;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 214,
        "startColumnNumber" : 4,
        "endLineNumber" : 216,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (String value : values) {\n  sizeEstimate+=value.length() + 1;\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1098,
        "startLineNumber" : 211,
        "startColumnNumber" : 77,
        "endLineNumber" : 238,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Collections.sort(values);\n  int sizeEstimate=2;\n  for (  String value : values) {\n    sizeEstimate+=value.length() + 1;\n  }\n  sizeEstimate-=1;\n  ByteBuf buf=alloc.buffer(sizeEstimate);\n  try (JsonGenerator gen=JsonUtil.JSON_FACTORY.createGenerator((OutputStream)new ByteBufOutputStream(buf))){\n    gen.writeStartArray(values.size());\n    for (    String value : values) {\n      gen.writeString(value);\n    }\n    gen.writeEndArray();\n  }\n catch (  IOException e) {\n    buf.release();\n    throw new UncheckedIOException(e);\n  }\n  ResponseHeadersBuilder headers=ResponseHeaders.builder(200).contentType(MediaType.JSON).setInt(HttpHeaderNames.CONTENT_LENGTH,buf.readableBytes());\n  if (shouldCacheControl) {\n    headers=headers.add(CACHE_CONTROL,\"max-age=\" + namesMaxAge + \", must-revalidate\");\n  }\n  return AggregatedHttpResponse.of(headers.build(),HttpData.wrap(buf));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 143,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1497,
        "startLineNumber" : 205,
        "startColumnNumber" : 2,
        "endLineNumber" : 238,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * We cache names if there are more than 3 names. This helps people getting started: if we cache empty results, users have more questions. We assume caching becomes a concern when zipkin is in active use, and active use usually implies more than 3 services.\n */\nAggregatedHttpResponse maybeCacheNames(boolean shouldCacheControl,List<String> values,ByteBufAllocator alloc){\n  Collections.sort(values);\n  int sizeEstimate=2;\n  for (  String value : values) {\n    sizeEstimate+=value.length() + 1;\n  }\n  sizeEstimate-=1;\n  ByteBuf buf=alloc.buffer(sizeEstimate);\n  try (JsonGenerator gen=JsonUtil.JSON_FACTORY.createGenerator((OutputStream)new ByteBufOutputStream(buf))){\n    gen.writeStartArray(values.size());\n    for (    String value : values) {\n      gen.writeString(value);\n    }\n    gen.writeEndArray();\n  }\n catch (  IOException e) {\n    buf.release();\n    throw new UncheckedIOException(e);\n  }\n  ResponseHeadersBuilder headers=ResponseHeaders.builder(200).contentType(MediaType.JSON).setInt(HttpHeaderNames.CONTENT_LENGTH,buf.readableBytes());\n  if (shouldCacheControl) {\n    headers=headers.add(CACHE_CONTROL,\"max-age=\" + namesMaxAge + \", must-revalidate\");\n  }\n  return AggregatedHttpResponse.of(headers.build(),HttpData.wrap(buf));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 162,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 215,
        "startColumnNumber" : 6,
        "endLineNumber" : 215,
        "endColumnNumber" : 53
      },
      "nodeContext" : "sizeEstimate+=value.length() + 1;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 215,
    "startColumnNumber" : 22,
    "endLineNumber" : 215,
    "endColumnNumber" : 36
  } ],
  "layoutRelationDataList" : [ ]
}