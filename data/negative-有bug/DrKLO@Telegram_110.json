{
  "id" : 110,
  "expression" : "a != length - 1 ? 7 : 0",
  "projectName" : "DrKLO@Telegram",
  "commitID" : "11fbfb1329df700b203e1852a71c4c11b5ab12f4",
  "filePath" : "/TMessagesProj/src/main/java/org/telegram/ui/CancelAccountDeletionActivity.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "a != length - 1 ? 7 : 0",
    "nodeType" : "ConditionalExpression",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 702,
      "startColumnNumber" : 128,
      "endLineNumber" : 702,
      "endColumnNumber" : 151
    },
    "astNodeNumber" : 8,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 702,
        "startColumnNumber" : 61,
        "endLineNumber" : 702,
        "endColumnNumber" : 155
      },
      "nodeContext" : "LayoutHelper.createLinear(34,36,Gravity.CENTER_HORIZONTAL,0,0,a != length - 1 ? 7 : 0,0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 136,
        "startLineNumber" : 702,
        "startColumnNumber" : 20,
        "endLineNumber" : 702,
        "endColumnNumber" : 156
      },
      "nodeContext" : "codeFieldContainer.addView(codeField[a],LayoutHelper.createLinear(34,36,Gravity.CENTER_HORIZONTAL,0,0,a != length - 1 ? 7 : 0,0))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 25,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 137,
        "startLineNumber" : 702,
        "startColumnNumber" : 20,
        "endLineNumber" : 702,
        "endColumnNumber" : 157
      },
      "nodeContext" : "codeFieldContainer.addView(codeField[a],LayoutHelper.createLinear(34,36,Gravity.CENTER_HORIZONTAL,0,0,a != length - 1 ? 7 : 0,0));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 26,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 4708,
        "startLineNumber" : 677,
        "startColumnNumber" : 49,
        "endLineNumber" : 761,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  final int num=a;\n  codeField[a]=new EditTextBoldCursor(getContext());\n  codeField[a].setTextColor(Theme.getColor(Theme.key_windowBackgroundWhiteBlackText));\n  codeField[a].setCursorColor(Theme.getColor(Theme.key_windowBackgroundWhiteBlackText));\n  codeField[a].setCursorSize(AndroidUtilities.dp(20));\n  codeField[a].setCursorWidth(1.5f);\n  Drawable pressedDrawable=getResources().getDrawable(R.drawable.search_dark_activated).mutate();\n  pressedDrawable.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_windowBackgroundWhiteInputFieldActivated),PorterDuff.Mode.MULTIPLY));\n  codeField[a].setBackgroundDrawable(pressedDrawable);\n  codeField[a].setImeOptions(EditorInfo.IME_ACTION_NEXT | EditorInfo.IME_FLAG_NO_EXTRACT_UI);\n  codeField[a].setTextSize(TypedValue.COMPLEX_UNIT_DIP,20);\n  codeField[a].setMaxLines(1);\n  codeField[a].setTypeface(AndroidUtilities.getTypeface(\"fonts/rmedium.ttf\"));\n  codeField[a].setPadding(0,0,0,0);\n  codeField[a].setGravity(Gravity.CENTER_HORIZONTAL | Gravity.TOP);\n  if (currentType == 3) {\n    codeField[a].setEnabled(false);\n    codeField[a].setInputType(InputType.TYPE_NULL);\n    codeField[a].setVisibility(GONE);\n  }\n else {\n    codeField[a].setInputType(InputType.TYPE_CLASS_PHONE);\n  }\n  codeFieldContainer.addView(codeField[a],LayoutHelper.createLinear(34,36,Gravity.CENTER_HORIZONTAL,0,0,a != length - 1 ? 7 : 0,0));\n  codeField[a].addTextChangedListener(new TextWatcher(){\n    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){\n    }\n    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){\n    }\n    @Override public void afterTextChanged(    Editable s){\n      if (ignoreOnTextChange) {\n        return;\n      }\n      int len=s.length();\n      if (len >= 1) {\n        if (len > 1) {\n          String text=s.toString();\n          ignoreOnTextChange=true;\n          for (int a=0; a < Math.min(length - num,len); a++) {\n            if (a == 0) {\n              s.replace(0,len,text.substring(a,a + 1));\n            }\n else {\n              codeField[num + a].setText(text.substring(a,a + 1));\n            }\n          }\n          ignoreOnTextChange=false;\n        }\n        if (num != length - 1) {\n          codeField[num + 1].setSelection(codeField[num + 1].length());\n          codeField[num + 1].requestFocus();\n        }\n        if ((num == length - 1 || num == length - 2 && len >= 2) && getCode().length() == length) {\n          onNextPressed();\n        }\n      }\n    }\n  }\n);\n  codeField[a].setOnKeyListener((v,keyCode,event) -> {\n    if (keyCode == KeyEvent.KEYCODE_DEL && codeField[num].length() == 0 && num > 0) {\n      codeField[num - 1].setSelection(codeField[num - 1].length());\n      codeField[num - 1].requestFocus();\n      codeField[num - 1].dispatchKeyEvent(event);\n      return true;\n    }\n    return false;\n  }\n);\n  codeField[a].setOnEditorActionListener((textView,i,keyEvent) -> {\n    if (i == EditorInfo.IME_ACTION_NEXT) {\n      onNextPressed();\n      return true;\n    }\n    return false;\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 531,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4741,
        "startLineNumber" : 677,
        "startColumnNumber" : 16,
        "endLineNumber" : 761,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (int a=0; a < length; a++) {\n  final int num=a;\n  codeField[a]=new EditTextBoldCursor(getContext());\n  codeField[a].setTextColor(Theme.getColor(Theme.key_windowBackgroundWhiteBlackText));\n  codeField[a].setCursorColor(Theme.getColor(Theme.key_windowBackgroundWhiteBlackText));\n  codeField[a].setCursorSize(AndroidUtilities.dp(20));\n  codeField[a].setCursorWidth(1.5f);\n  Drawable pressedDrawable=getResources().getDrawable(R.drawable.search_dark_activated).mutate();\n  pressedDrawable.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_windowBackgroundWhiteInputFieldActivated),PorterDuff.Mode.MULTIPLY));\n  codeField[a].setBackgroundDrawable(pressedDrawable);\n  codeField[a].setImeOptions(EditorInfo.IME_ACTION_NEXT | EditorInfo.IME_FLAG_NO_EXTRACT_UI);\n  codeField[a].setTextSize(TypedValue.COMPLEX_UNIT_DIP,20);\n  codeField[a].setMaxLines(1);\n  codeField[a].setTypeface(AndroidUtilities.getTypeface(\"fonts/rmedium.ttf\"));\n  codeField[a].setPadding(0,0,0,0);\n  codeField[a].setGravity(Gravity.CENTER_HORIZONTAL | Gravity.TOP);\n  if (currentType == 3) {\n    codeField[a].setEnabled(false);\n    codeField[a].setInputType(InputType.TYPE_NULL);\n    codeField[a].setVisibility(GONE);\n  }\n else {\n    codeField[a].setInputType(InputType.TYPE_CLASS_PHONE);\n  }\n  codeFieldContainer.addView(codeField[a],LayoutHelper.createLinear(34,36,Gravity.CENTER_HORIZONTAL,0,0,a != length - 1 ? 7 : 0,0));\n  codeField[a].addTextChangedListener(new TextWatcher(){\n    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){\n    }\n    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){\n    }\n    @Override public void afterTextChanged(    Editable s){\n      if (ignoreOnTextChange) {\n        return;\n      }\n      int len=s.length();\n      if (len >= 1) {\n        if (len > 1) {\n          String text=s.toString();\n          ignoreOnTextChange=true;\n          for (int a=0; a < Math.min(length - num,len); a++) {\n            if (a == 0) {\n              s.replace(0,len,text.substring(a,a + 1));\n            }\n else {\n              codeField[num + a].setText(text.substring(a,a + 1));\n            }\n          }\n          ignoreOnTextChange=false;\n        }\n        if (num != length - 1) {\n          codeField[num + 1].setSelection(codeField[num + 1].length());\n          codeField[num + 1].requestFocus();\n        }\n        if ((num == length - 1 || num == length - 2 && len >= 2) && getCode().length() == length) {\n          onNextPressed();\n        }\n      }\n    }\n  }\n);\n  codeField[a].setOnKeyListener((v,keyCode,event) -> {\n    if (keyCode == KeyEvent.KEYCODE_DEL && codeField[num].length() == 0 && num > 0) {\n      codeField[num - 1].setSelection(codeField[num - 1].length());\n      codeField[num - 1].requestFocus();\n      codeField[num - 1].dispatchKeyEvent(event);\n      return true;\n    }\n    return false;\n  }\n);\n  codeField[a].setOnEditorActionListener((textView,i,keyEvent) -> {\n    if (i == EditorInfo.IME_ACTION_NEXT) {\n      onNextPressed();\n      return true;\n    }\n    return false;\n  }\n);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 542,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 4833,
        "startLineNumber" : 675,
        "startColumnNumber" : 65,
        "endLineNumber" : 762,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  codeField=new EditTextBoldCursor[length];\n  for (int a=0; a < length; a++) {\n    final int num=a;\n    codeField[a]=new EditTextBoldCursor(getContext());\n    codeField[a].setTextColor(Theme.getColor(Theme.key_windowBackgroundWhiteBlackText));\n    codeField[a].setCursorColor(Theme.getColor(Theme.key_windowBackgroundWhiteBlackText));\n    codeField[a].setCursorSize(AndroidUtilities.dp(20));\n    codeField[a].setCursorWidth(1.5f);\n    Drawable pressedDrawable=getResources().getDrawable(R.drawable.search_dark_activated).mutate();\n    pressedDrawable.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_windowBackgroundWhiteInputFieldActivated),PorterDuff.Mode.MULTIPLY));\n    codeField[a].setBackgroundDrawable(pressedDrawable);\n    codeField[a].setImeOptions(EditorInfo.IME_ACTION_NEXT | EditorInfo.IME_FLAG_NO_EXTRACT_UI);\n    codeField[a].setTextSize(TypedValue.COMPLEX_UNIT_DIP,20);\n    codeField[a].setMaxLines(1);\n    codeField[a].setTypeface(AndroidUtilities.getTypeface(\"fonts/rmedium.ttf\"));\n    codeField[a].setPadding(0,0,0,0);\n    codeField[a].setGravity(Gravity.CENTER_HORIZONTAL | Gravity.TOP);\n    if (currentType == 3) {\n      codeField[a].setEnabled(false);\n      codeField[a].setInputType(InputType.TYPE_NULL);\n      codeField[a].setVisibility(GONE);\n    }\n else {\n      codeField[a].setInputType(InputType.TYPE_CLASS_PHONE);\n    }\n    codeFieldContainer.addView(codeField[a],LayoutHelper.createLinear(34,36,Gravity.CENTER_HORIZONTAL,0,0,a != length - 1 ? 7 : 0,0));\n    codeField[a].addTextChangedListener(new TextWatcher(){\n      @Override public void beforeTextChanged(      CharSequence s,      int start,      int count,      int after){\n      }\n      @Override public void onTextChanged(      CharSequence s,      int start,      int before,      int count){\n      }\n      @Override public void afterTextChanged(      Editable s){\n        if (ignoreOnTextChange) {\n          return;\n        }\n        int len=s.length();\n        if (len >= 1) {\n          if (len > 1) {\n            String text=s.toString();\n            ignoreOnTextChange=true;\n            for (int a=0; a < Math.min(length - num,len); a++) {\n              if (a == 0) {\n                s.replace(0,len,text.substring(a,a + 1));\n              }\n else {\n                codeField[num + a].setText(text.substring(a,a + 1));\n              }\n            }\n            ignoreOnTextChange=false;\n          }\n          if (num != length - 1) {\n            codeField[num + 1].setSelection(codeField[num + 1].length());\n            codeField[num + 1].requestFocus();\n          }\n          if ((num == length - 1 || num == length - 2 && len >= 2) && getCode().length() == length) {\n            onNextPressed();\n          }\n        }\n      }\n    }\n);\n    codeField[a].setOnKeyListener((v,keyCode,event) -> {\n      if (keyCode == KeyEvent.KEYCODE_DEL && codeField[num].length() == 0 && num > 0) {\n        codeField[num - 1].setSelection(codeField[num - 1].length());\n        codeField[num - 1].requestFocus();\n        codeField[num - 1].dispatchKeyEvent(event);\n        return true;\n      }\n      return false;\n    }\n);\n    codeField[a].setOnEditorActionListener((textView,i,keyEvent) -> {\n      if (i == EditorInfo.IME_ACTION_NEXT) {\n        onNextPressed();\n        return true;\n      }\n      return false;\n    }\n);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 552,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5032,
        "startLineNumber" : 675,
        "startColumnNumber" : 12,
        "endLineNumber" : 766,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (codeField == null || codeField.length != length) {\n  codeField=new EditTextBoldCursor[length];\n  for (int a=0; a < length; a++) {\n    final int num=a;\n    codeField[a]=new EditTextBoldCursor(getContext());\n    codeField[a].setTextColor(Theme.getColor(Theme.key_windowBackgroundWhiteBlackText));\n    codeField[a].setCursorColor(Theme.getColor(Theme.key_windowBackgroundWhiteBlackText));\n    codeField[a].setCursorSize(AndroidUtilities.dp(20));\n    codeField[a].setCursorWidth(1.5f);\n    Drawable pressedDrawable=getResources().getDrawable(R.drawable.search_dark_activated).mutate();\n    pressedDrawable.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_windowBackgroundWhiteInputFieldActivated),PorterDuff.Mode.MULTIPLY));\n    codeField[a].setBackgroundDrawable(pressedDrawable);\n    codeField[a].setImeOptions(EditorInfo.IME_ACTION_NEXT | EditorInfo.IME_FLAG_NO_EXTRACT_UI);\n    codeField[a].setTextSize(TypedValue.COMPLEX_UNIT_DIP,20);\n    codeField[a].setMaxLines(1);\n    codeField[a].setTypeface(AndroidUtilities.getTypeface(\"fonts/rmedium.ttf\"));\n    codeField[a].setPadding(0,0,0,0);\n    codeField[a].setGravity(Gravity.CENTER_HORIZONTAL | Gravity.TOP);\n    if (currentType == 3) {\n      codeField[a].setEnabled(false);\n      codeField[a].setInputType(InputType.TYPE_NULL);\n      codeField[a].setVisibility(GONE);\n    }\n else {\n      codeField[a].setInputType(InputType.TYPE_CLASS_PHONE);\n    }\n    codeFieldContainer.addView(codeField[a],LayoutHelper.createLinear(34,36,Gravity.CENTER_HORIZONTAL,0,0,a != length - 1 ? 7 : 0,0));\n    codeField[a].addTextChangedListener(new TextWatcher(){\n      @Override public void beforeTextChanged(      CharSequence s,      int start,      int count,      int after){\n      }\n      @Override public void onTextChanged(      CharSequence s,      int start,      int before,      int count){\n      }\n      @Override public void afterTextChanged(      Editable s){\n        if (ignoreOnTextChange) {\n          return;\n        }\n        int len=s.length();\n        if (len >= 1) {\n          if (len > 1) {\n            String text=s.toString();\n            ignoreOnTextChange=true;\n            for (int a=0; a < Math.min(length - num,len); a++) {\n              if (a == 0) {\n                s.replace(0,len,text.substring(a,a + 1));\n              }\n else {\n                codeField[num + a].setText(text.substring(a,a + 1));\n              }\n            }\n            ignoreOnTextChange=false;\n          }\n          if (num != length - 1) {\n            codeField[num + 1].setSelection(codeField[num + 1].length());\n            codeField[num + 1].requestFocus();\n          }\n          if ((num == length - 1 || num == length - 2 && len >= 2) && getCode().length() == length) {\n            onNextPressed();\n          }\n        }\n      }\n    }\n);\n    codeField[a].setOnKeyListener((v,keyCode,event) -> {\n      if (keyCode == KeyEvent.KEYCODE_DEL && codeField[num].length() == 0 && num > 0) {\n        codeField[num - 1].setSelection(codeField[num - 1].length());\n        codeField[num - 1].requestFocus();\n        codeField[num - 1].dispatchKeyEvent(event);\n        return true;\n      }\n      return false;\n    }\n);\n    codeField[a].setOnEditorActionListener((textView,i,keyEvent) -> {\n      if (i == EditorInfo.IME_ACTION_NEXT) {\n        onNextPressed();\n        return true;\n      }\n      return false;\n    }\n);\n  }\n}\n else {\n  for (int a=0; a < codeField.length; a++) {\n    codeField[a].setText(\"\");\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 584,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8954,
        "startLineNumber" : 652,
        "startColumnNumber" : 62,
        "endLineNumber" : 828,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (params == null) {\n    return;\n  }\n  waitingForEvent=true;\n  if (currentType == 2) {\n    AndroidUtilities.setWaitingForSms(true);\n    NotificationCenter.getGlobalInstance().addObserver(this,NotificationCenter.didReceiveSmsCode);\n  }\n else   if (currentType == 3) {\n    AndroidUtilities.setWaitingForCall(true);\n    NotificationCenter.getGlobalInstance().addObserver(this,NotificationCenter.didReceiveCall);\n  }\n  phone=params.getString(\"phone\");\n  phoneHash=params.getString(\"phoneHash\");\n  timeout=time=params.getInt(\"timeout\");\n  nextType=params.getInt(\"nextType\");\n  pattern=params.getString(\"pattern\");\n  length=params.getInt(\"length\");\n  if (length == 0) {\n    length=5;\n  }\n  if (codeField == null || codeField.length != length) {\n    codeField=new EditTextBoldCursor[length];\n    for (int a=0; a < length; a++) {\n      final int num=a;\n      codeField[a]=new EditTextBoldCursor(getContext());\n      codeField[a].setTextColor(Theme.getColor(Theme.key_windowBackgroundWhiteBlackText));\n      codeField[a].setCursorColor(Theme.getColor(Theme.key_windowBackgroundWhiteBlackText));\n      codeField[a].setCursorSize(AndroidUtilities.dp(20));\n      codeField[a].setCursorWidth(1.5f);\n      Drawable pressedDrawable=getResources().getDrawable(R.drawable.search_dark_activated).mutate();\n      pressedDrawable.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_windowBackgroundWhiteInputFieldActivated),PorterDuff.Mode.MULTIPLY));\n      codeField[a].setBackgroundDrawable(pressedDrawable);\n      codeField[a].setImeOptions(EditorInfo.IME_ACTION_NEXT | EditorInfo.IME_FLAG_NO_EXTRACT_UI);\n      codeField[a].setTextSize(TypedValue.COMPLEX_UNIT_DIP,20);\n      codeField[a].setMaxLines(1);\n      codeField[a].setTypeface(AndroidUtilities.getTypeface(\"fonts/rmedium.ttf\"));\n      codeField[a].setPadding(0,0,0,0);\n      codeField[a].setGravity(Gravity.CENTER_HORIZONTAL | Gravity.TOP);\n      if (currentType == 3) {\n        codeField[a].setEnabled(false);\n        codeField[a].setInputType(InputType.TYPE_NULL);\n        codeField[a].setVisibility(GONE);\n      }\n else {\n        codeField[a].setInputType(InputType.TYPE_CLASS_PHONE);\n      }\n      codeFieldContainer.addView(codeField[a],LayoutHelper.createLinear(34,36,Gravity.CENTER_HORIZONTAL,0,0,a != length - 1 ? 7 : 0,0));\n      codeField[a].addTextChangedListener(new TextWatcher(){\n        @Override public void beforeTextChanged(        CharSequence s,        int start,        int count,        int after){\n        }\n        @Override public void onTextChanged(        CharSequence s,        int start,        int before,        int count){\n        }\n        @Override public void afterTextChanged(        Editable s){\n          if (ignoreOnTextChange) {\n            return;\n          }\n          int len=s.length();\n          if (len >= 1) {\n            if (len > 1) {\n              String text=s.toString();\n              ignoreOnTextChange=true;\n              for (int a=0; a < Math.min(length - num,len); a++) {\n                if (a == 0) {\n                  s.replace(0,len,text.substring(a,a + 1));\n                }\n else {\n                  codeField[num + a].setText(text.substring(a,a + 1));\n                }\n              }\n              ignoreOnTextChange=false;\n            }\n            if (num != length - 1) {\n              codeField[num + 1].setSelection(codeField[num + 1].length());\n              codeField[num + 1].requestFocus();\n            }\n            if ((num == length - 1 || num == length - 2 && len >= 2) && getCode().length() == length) {\n              onNextPressed();\n            }\n          }\n        }\n      }\n);\n      codeField[a].setOnKeyListener((v,keyCode,event) -> {\n        if (keyCode == KeyEvent.KEYCODE_DEL && codeField[num].length() == 0 && num > 0) {\n          codeField[num - 1].setSelection(codeField[num - 1].length());\n          codeField[num - 1].requestFocus();\n          codeField[num - 1].dispatchKeyEvent(event);\n          return true;\n        }\n        return false;\n      }\n);\n      codeField[a].setOnEditorActionListener((textView,i,keyEvent) -> {\n        if (i == EditorInfo.IME_ACTION_NEXT) {\n          onNextPressed();\n          return true;\n        }\n        return false;\n      }\n);\n    }\n  }\n else {\n    for (int a=0; a < codeField.length; a++) {\n      codeField[a].setText(\"\");\n    }\n  }\n  if (progressView != null) {\n    progressView.setVisibility(nextType != 0 ? VISIBLE : GONE);\n  }\n  if (phone == null) {\n    return;\n  }\n  String number=PhoneFormat.getInstance().format(phone);\n  SpannableStringBuilder spanned=new SpannableStringBuilder(AndroidUtilities.replaceTags(LocaleController.formatString(\"CancelAccountResetInfo2\",R.string.CancelAccountResetInfo2,PhoneFormat.getInstance().format(\"+\" + number))));\n  int index1=TextUtils.indexOf(spanned,'*');\n  int index2=TextUtils.lastIndexOf(spanned,'*');\n  if (index1 != -1 && index2 != -1 && index1 != index2) {\n    confirmTextView.setMovementMethod(new AndroidUtilities.LinkMovementMethodMy());\n    spanned.replace(index2,index2 + 1,\"\");\n    spanned.replace(index1,index1 + 1,\"\");\n    spanned.setSpan(new URLSpanNoUnderline(\"tg://settings/change_number\"),index1,index2 - 1,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);\n  }\n  confirmTextView.setText(spanned);\n  if (currentType != 3) {\n    AndroidUtilities.showKeyboard(codeField[0]);\n    codeField[0].requestFocus();\n  }\n else {\n    AndroidUtilities.hideKeyboard(codeField[0]);\n  }\n  destroyTimer();\n  destroyCodeTimer();\n  lastCurrentTime=System.currentTimeMillis();\n  if (currentType == 1) {\n    problemText.setVisibility(VISIBLE);\n    timeText.setVisibility(GONE);\n  }\n else   if (currentType == 3 && (nextType == 4 || nextType == 2)) {\n    problemText.setVisibility(GONE);\n    timeText.setVisibility(VISIBLE);\n    if (nextType == 4) {\n      timeText.setText(LocaleController.formatString(\"CallText\",R.string.CallText,1,0));\n    }\n else     if (nextType == 2) {\n      timeText.setText(LocaleController.formatString(\"SmsText\",R.string.SmsText,1,0));\n    }\n    createTimer();\n  }\n else   if (currentType == 2 && (nextType == 4 || nextType == 3)) {\n    timeText.setText(LocaleController.formatString(\"CallText\",R.string.CallText,2,0));\n    problemText.setVisibility(time < 1000 ? VISIBLE : GONE);\n    timeText.setVisibility(time < 1000 ? GONE : VISIBLE);\n    createTimer();\n  }\n else   if (currentType == 4 && nextType == 2) {\n    timeText.setText(LocaleController.formatString(\"SmsText\",R.string.SmsText,2,0));\n    problemText.setVisibility(time < 1000 ? VISIBLE : GONE);\n    timeText.setVisibility(time < 1000 ? GONE : VISIBLE);\n    createTimer();\n  }\n else {\n    timeText.setVisibility(GONE);\n    problemText.setVisibility(GONE);\n    createCodeTimer();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1061,
      "astHeight" : 24
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 9026,
        "startLineNumber" : 651,
        "startColumnNumber" : 8,
        "endLineNumber" : 828,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void setParams(Bundle params,boolean restore){\n  if (params == null) {\n    return;\n  }\n  waitingForEvent=true;\n  if (currentType == 2) {\n    AndroidUtilities.setWaitingForSms(true);\n    NotificationCenter.getGlobalInstance().addObserver(this,NotificationCenter.didReceiveSmsCode);\n  }\n else   if (currentType == 3) {\n    AndroidUtilities.setWaitingForCall(true);\n    NotificationCenter.getGlobalInstance().addObserver(this,NotificationCenter.didReceiveCall);\n  }\n  phone=params.getString(\"phone\");\n  phoneHash=params.getString(\"phoneHash\");\n  timeout=time=params.getInt(\"timeout\");\n  nextType=params.getInt(\"nextType\");\n  pattern=params.getString(\"pattern\");\n  length=params.getInt(\"length\");\n  if (length == 0) {\n    length=5;\n  }\n  if (codeField == null || codeField.length != length) {\n    codeField=new EditTextBoldCursor[length];\n    for (int a=0; a < length; a++) {\n      final int num=a;\n      codeField[a]=new EditTextBoldCursor(getContext());\n      codeField[a].setTextColor(Theme.getColor(Theme.key_windowBackgroundWhiteBlackText));\n      codeField[a].setCursorColor(Theme.getColor(Theme.key_windowBackgroundWhiteBlackText));\n      codeField[a].setCursorSize(AndroidUtilities.dp(20));\n      codeField[a].setCursorWidth(1.5f);\n      Drawable pressedDrawable=getResources().getDrawable(R.drawable.search_dark_activated).mutate();\n      pressedDrawable.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_windowBackgroundWhiteInputFieldActivated),PorterDuff.Mode.MULTIPLY));\n      codeField[a].setBackgroundDrawable(pressedDrawable);\n      codeField[a].setImeOptions(EditorInfo.IME_ACTION_NEXT | EditorInfo.IME_FLAG_NO_EXTRACT_UI);\n      codeField[a].setTextSize(TypedValue.COMPLEX_UNIT_DIP,20);\n      codeField[a].setMaxLines(1);\n      codeField[a].setTypeface(AndroidUtilities.getTypeface(\"fonts/rmedium.ttf\"));\n      codeField[a].setPadding(0,0,0,0);\n      codeField[a].setGravity(Gravity.CENTER_HORIZONTAL | Gravity.TOP);\n      if (currentType == 3) {\n        codeField[a].setEnabled(false);\n        codeField[a].setInputType(InputType.TYPE_NULL);\n        codeField[a].setVisibility(GONE);\n      }\n else {\n        codeField[a].setInputType(InputType.TYPE_CLASS_PHONE);\n      }\n      codeFieldContainer.addView(codeField[a],LayoutHelper.createLinear(34,36,Gravity.CENTER_HORIZONTAL,0,0,a != length - 1 ? 7 : 0,0));\n      codeField[a].addTextChangedListener(new TextWatcher(){\n        @Override public void beforeTextChanged(        CharSequence s,        int start,        int count,        int after){\n        }\n        @Override public void onTextChanged(        CharSequence s,        int start,        int before,        int count){\n        }\n        @Override public void afterTextChanged(        Editable s){\n          if (ignoreOnTextChange) {\n            return;\n          }\n          int len=s.length();\n          if (len >= 1) {\n            if (len > 1) {\n              String text=s.toString();\n              ignoreOnTextChange=true;\n              for (int a=0; a < Math.min(length - num,len); a++) {\n                if (a == 0) {\n                  s.replace(0,len,text.substring(a,a + 1));\n                }\n else {\n                  codeField[num + a].setText(text.substring(a,a + 1));\n                }\n              }\n              ignoreOnTextChange=false;\n            }\n            if (num != length - 1) {\n              codeField[num + 1].setSelection(codeField[num + 1].length());\n              codeField[num + 1].requestFocus();\n            }\n            if ((num == length - 1 || num == length - 2 && len >= 2) && getCode().length() == length) {\n              onNextPressed();\n            }\n          }\n        }\n      }\n);\n      codeField[a].setOnKeyListener((v,keyCode,event) -> {\n        if (keyCode == KeyEvent.KEYCODE_DEL && codeField[num].length() == 0 && num > 0) {\n          codeField[num - 1].setSelection(codeField[num - 1].length());\n          codeField[num - 1].requestFocus();\n          codeField[num - 1].dispatchKeyEvent(event);\n          return true;\n        }\n        return false;\n      }\n);\n      codeField[a].setOnEditorActionListener((textView,i,keyEvent) -> {\n        if (i == EditorInfo.IME_ACTION_NEXT) {\n          onNextPressed();\n          return true;\n        }\n        return false;\n      }\n);\n    }\n  }\n else {\n    for (int a=0; a < codeField.length; a++) {\n      codeField[a].setText(\"\");\n    }\n  }\n  if (progressView != null) {\n    progressView.setVisibility(nextType != 0 ? VISIBLE : GONE);\n  }\n  if (phone == null) {\n    return;\n  }\n  String number=PhoneFormat.getInstance().format(phone);\n  SpannableStringBuilder spanned=new SpannableStringBuilder(AndroidUtilities.replaceTags(LocaleController.formatString(\"CancelAccountResetInfo2\",R.string.CancelAccountResetInfo2,PhoneFormat.getInstance().format(\"+\" + number))));\n  int index1=TextUtils.indexOf(spanned,'*');\n  int index2=TextUtils.lastIndexOf(spanned,'*');\n  if (index1 != -1 && index2 != -1 && index1 != index2) {\n    confirmTextView.setMovementMethod(new AndroidUtilities.LinkMovementMethodMy());\n    spanned.replace(index2,index2 + 1,\"\");\n    spanned.replace(index1,index1 + 1,\"\");\n    spanned.setSpan(new URLSpanNoUnderline(\"tg://settings/change_number\"),index1,index2 - 1,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);\n  }\n  confirmTextView.setText(spanned);\n  if (currentType != 3) {\n    AndroidUtilities.showKeyboard(codeField[0]);\n    codeField[0].requestFocus();\n  }\n else {\n    AndroidUtilities.hideKeyboard(codeField[0]);\n  }\n  destroyTimer();\n  destroyCodeTimer();\n  lastCurrentTime=System.currentTimeMillis();\n  if (currentType == 1) {\n    problemText.setVisibility(VISIBLE);\n    timeText.setVisibility(GONE);\n  }\n else   if (currentType == 3 && (nextType == 4 || nextType == 2)) {\n    problemText.setVisibility(GONE);\n    timeText.setVisibility(VISIBLE);\n    if (nextType == 4) {\n      timeText.setText(LocaleController.formatString(\"CallText\",R.string.CallText,1,0));\n    }\n else     if (nextType == 2) {\n      timeText.setText(LocaleController.formatString(\"SmsText\",R.string.SmsText,1,0));\n    }\n    createTimer();\n  }\n else   if (currentType == 2 && (nextType == 4 || nextType == 3)) {\n    timeText.setText(LocaleController.formatString(\"CallText\",R.string.CallText,2,0));\n    problemText.setVisibility(time < 1000 ? VISIBLE : GONE);\n    timeText.setVisibility(time < 1000 ? GONE : VISIBLE);\n    createTimer();\n  }\n else   if (currentType == 4 && nextType == 2) {\n    timeText.setText(LocaleController.formatString(\"SmsText\",R.string.SmsText,2,0));\n    problemText.setVisibility(time < 1000 ? VISIBLE : GONE);\n    timeText.setVisibility(time < 1000 ? GONE : VISIBLE);\n    createTimer();\n  }\n else {\n    timeText.setVisibility(GONE);\n    problemText.setVisibility(GONE);\n    createCodeTimer();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1074,
      "astHeight" : 25
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 137,
        "startLineNumber" : 702,
        "startColumnNumber" : 20,
        "endLineNumber" : 702,
        "endColumnNumber" : 157
      },
      "nodeContext" : "codeFieldContainer.addView(codeField[a],LayoutHelper.createLinear(34,36,Gravity.CENTER_HORIZONTAL,0,0,a != length - 1 ? 7 : 0,0));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 26,
      "astHeight" : 7
    },
    "tokenLength" : 7,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 23,
    "startLineNumber" : 702,
    "startColumnNumber" : 128,
    "endLineNumber" : 702,
    "endColumnNumber" : 151
  } ],
  "layoutRelationDataList" : [ ]
}