{
  "id" : 90,
  "expression" : "metadatumTokens[0]",
  "projectName" : "zxing@zxing",
  "commitID" : "1b0aed9c091717337b865955f58290450a3a9e3a",
  "filePath" : "/core/src/main/java/com/google/zxing/client/result/VCardResultParser.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "metadatumTokens[0]",
    "nodeType" : "ArrayAccess",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 138,
      "startColumnNumber" : 25,
      "endLineNumber" : 138,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 138,
        "startColumnNumber" : 19,
        "endLineNumber" : 138,
        "endColumnNumber" : 43
      },
      "nodeContext" : "key=metadatumTokens[0]",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 138,
        "startColumnNumber" : 12,
        "endLineNumber" : 138,
        "endColumnNumber" : 44
      },
      "nodeContext" : "String key=metadatumTokens[0];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 458,
        "startLineNumber" : 137,
        "startColumnNumber" : 42,
        "endLineNumber" : 147,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  String key=metadatumTokens[0];\n  String value=metadatumTokens[1];\n  if (\"ENCODING\".equalsIgnoreCase(key) && \"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n    quotedPrintable=true;\n  }\n else   if (\"CHARSET\".equalsIgnoreCase(key)) {\n    quotedPrintableCharset=value;\n  }\n else   if (\"VALUE\".equalsIgnoreCase(key)) {\n    valueType=value;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 52,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 490,
        "startLineNumber" : 137,
        "startColumnNumber" : 10,
        "endLineNumber" : 147,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (metadatumTokens.length > 1) {\n  String key=metadatumTokens[0];\n  String value=metadatumTokens[1];\n  if (\"ENCODING\".equalsIgnoreCase(key) && \"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n    quotedPrintable=true;\n  }\n else   if (\"CHARSET\".equalsIgnoreCase(key)) {\n    quotedPrintableCharset=value;\n  }\n else   if (\"VALUE\".equalsIgnoreCase(key)) {\n    valueType=value;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 58,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 708,
        "startLineNumber" : 131,
        "startColumnNumber" : 65,
        "endLineNumber" : 148,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (metadata == null) {\n    metadata=new ArrayList<>(1);\n  }\n  metadata.add(metadatum);\n  String[] metadatumTokens=EQUALS.split(metadatum,2);\n  if (metadatumTokens.length > 1) {\n    String key=metadatumTokens[0];\n    String value=metadatumTokens[1];\n    if (\"ENCODING\".equalsIgnoreCase(key) && \"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n      quotedPrintable=true;\n    }\n else     if (\"CHARSET\".equalsIgnoreCase(key)) {\n      quotedPrintableCharset=value;\n    }\n else     if (\"VALUE\".equalsIgnoreCase(key)) {\n      valueType=value;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 89,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 765,
        "startLineNumber" : 131,
        "startColumnNumber" : 8,
        "endLineNumber" : 148,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (String metadatum : SEMICOLON.split(metadataString)) {\n  if (metadata == null) {\n    metadata=new ArrayList<>(1);\n  }\n  metadata.add(metadatum);\n  String[] metadatumTokens=EQUALS.split(metadatum,2);\n  if (metadatumTokens.length > 1) {\n    String key=metadatumTokens[0];\n    String value=metadatumTokens[1];\n    if (\"ENCODING\".equalsIgnoreCase(key) && \"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n      quotedPrintable=true;\n    }\n else     if (\"CHARSET\".equalsIgnoreCase(key)) {\n      quotedPrintableCharset=value;\n    }\n else     if (\"VALUE\".equalsIgnoreCase(key)) {\n      valueType=value;\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 98,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 785,
        "startLineNumber" : 130,
        "startColumnNumber" : 34,
        "endLineNumber" : 149,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  for (  String metadatum : SEMICOLON.split(metadataString)) {\n    if (metadata == null) {\n      metadata=new ArrayList<>(1);\n    }\n    metadata.add(metadatum);\n    String[] metadatumTokens=EQUALS.split(metadatum,2);\n    if (metadatumTokens.length > 1) {\n      String key=metadatumTokens[0];\n      String value=metadatumTokens[1];\n      if (\"ENCODING\".equalsIgnoreCase(key) && \"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n        quotedPrintable=true;\n      }\n else       if (\"CHARSET\".equalsIgnoreCase(key)) {\n        quotedPrintableCharset=value;\n      }\n else       if (\"VALUE\".equalsIgnoreCase(key)) {\n        valueType=value;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 99,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 813,
        "startLineNumber" : 130,
        "startColumnNumber" : 6,
        "endLineNumber" : 149,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (metadataString != null) {\n  for (  String metadatum : SEMICOLON.split(metadataString)) {\n    if (metadata == null) {\n      metadata=new ArrayList<>(1);\n    }\n    metadata.add(metadatum);\n    String[] metadatumTokens=EQUALS.split(metadatum,2);\n    if (metadatumTokens.length > 1) {\n      String key=metadatumTokens[0];\n      String value=metadatumTokens[1];\n      if (\"ENCODING\".equalsIgnoreCase(key) && \"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n        quotedPrintable=true;\n      }\n else       if (\"CHARSET\".equalsIgnoreCase(key)) {\n        quotedPrintableCharset=value;\n      }\n else       if (\"VALUE\".equalsIgnoreCase(key)) {\n        valueType=value;\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 103,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 4249,
        "startLineNumber" : 111,
        "startColumnNumber" : 20,
        "endLineNumber" : 218,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Matcher matcher=Pattern.compile(\"(?:^|\\n)\" + prefix + \"(?:;([^:]*))?:\",Pattern.CASE_INSENSITIVE).matcher(rawText);\n  if (i > 0) {\n    i--;\n  }\n  if (!matcher.find(i)) {\n    break;\n  }\n  i=matcher.end(0);\n  String metadataString=matcher.group(1);\n  List<String> metadata=null;\n  boolean quotedPrintable=false;\n  String quotedPrintableCharset=null;\n  String valueType=null;\n  if (metadataString != null) {\n    for (    String metadatum : SEMICOLON.split(metadataString)) {\n      if (metadata == null) {\n        metadata=new ArrayList<>(1);\n      }\n      metadata.add(metadatum);\n      String[] metadatumTokens=EQUALS.split(metadatum,2);\n      if (metadatumTokens.length > 1) {\n        String key=metadatumTokens[0];\n        String value=metadatumTokens[1];\n        if (\"ENCODING\".equalsIgnoreCase(key) && \"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n          quotedPrintable=true;\n        }\n else         if (\"CHARSET\".equalsIgnoreCase(key)) {\n          quotedPrintableCharset=value;\n        }\n else         if (\"VALUE\".equalsIgnoreCase(key)) {\n          valueType=value;\n        }\n      }\n    }\n  }\n  int matchStart=i;\n  while ((i=rawText.indexOf('\\n',i)) >= 0) {\n    if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n      i+=2;\n    }\n else     if (quotedPrintable && ((i >= 1 && rawText.charAt(i - 1) == '=') || (i >= 2 && rawText.charAt(i - 2) == '='))) {\n      i++;\n    }\n else {\n      break;\n    }\n  }\n  if (i < 0) {\n    i=max;\n  }\n else   if (i > matchStart) {\n    if (matches == null) {\n      matches=new ArrayList<>(1);\n    }\n    if (i >= 1 && rawText.charAt(i - 1) == '\\r') {\n      i--;\n    }\n    String element=rawText.substring(matchStart,i);\n    if (trim) {\n      element=element.trim();\n    }\n    if (quotedPrintable) {\n      element=decodeQuotedPrintable(element,quotedPrintableCharset);\n      if (parseFieldDivider) {\n        element=UNESCAPED_SEMICOLONS.matcher(element).replaceAll(\"\\n\").trim();\n      }\n    }\n else {\n      if (parseFieldDivider) {\n        element=UNESCAPED_SEMICOLONS.matcher(element).replaceAll(\"\\n\").trim();\n      }\n      element=CR_LF_SPACE_TAB.matcher(element).replaceAll(\"\");\n      element=NEWLINE_ESCAPE.matcher(element).replaceAll(\"\\n\");\n      element=VCARD_ESCAPES.matcher(element).replaceAll(\"$1\");\n    }\n    if (\"uri\".equals(valueType)) {\n      try {\n        element=URI.create(element).getSchemeSpecificPart();\n      }\n catch (      IllegalArgumentException iae) {\n      }\n    }\n    if (metadata == null) {\n      List<String> match=new ArrayList<>(1);\n      match.add(element);\n      matches.add(match);\n    }\n else {\n      metadata.add(0,element);\n      matches.add(metadata);\n    }\n    i++;\n  }\n else {\n    i++;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 470,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4265,
        "startLineNumber" : 111,
        "startColumnNumber" : 4,
        "endLineNumber" : 218,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (i < max) {\n  Matcher matcher=Pattern.compile(\"(?:^|\\n)\" + prefix + \"(?:;([^:]*))?:\",Pattern.CASE_INSENSITIVE).matcher(rawText);\n  if (i > 0) {\n    i--;\n  }\n  if (!matcher.find(i)) {\n    break;\n  }\n  i=matcher.end(0);\n  String metadataString=matcher.group(1);\n  List<String> metadata=null;\n  boolean quotedPrintable=false;\n  String quotedPrintableCharset=null;\n  String valueType=null;\n  if (metadataString != null) {\n    for (    String metadatum : SEMICOLON.split(metadataString)) {\n      if (metadata == null) {\n        metadata=new ArrayList<>(1);\n      }\n      metadata.add(metadatum);\n      String[] metadatumTokens=EQUALS.split(metadatum,2);\n      if (metadatumTokens.length > 1) {\n        String key=metadatumTokens[0];\n        String value=metadatumTokens[1];\n        if (\"ENCODING\".equalsIgnoreCase(key) && \"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n          quotedPrintable=true;\n        }\n else         if (\"CHARSET\".equalsIgnoreCase(key)) {\n          quotedPrintableCharset=value;\n        }\n else         if (\"VALUE\".equalsIgnoreCase(key)) {\n          valueType=value;\n        }\n      }\n    }\n  }\n  int matchStart=i;\n  while ((i=rawText.indexOf('\\n',i)) >= 0) {\n    if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n      i+=2;\n    }\n else     if (quotedPrintable && ((i >= 1 && rawText.charAt(i - 1) == '=') || (i >= 2 && rawText.charAt(i - 2) == '='))) {\n      i++;\n    }\n else {\n      break;\n    }\n  }\n  if (i < 0) {\n    i=max;\n  }\n else   if (i > matchStart) {\n    if (matches == null) {\n      matches=new ArrayList<>(1);\n    }\n    if (i >= 1 && rawText.charAt(i - 1) == '\\r') {\n      i--;\n    }\n    String element=rawText.substring(matchStart,i);\n    if (trim) {\n      element=element.trim();\n    }\n    if (quotedPrintable) {\n      element=decodeQuotedPrintable(element,quotedPrintableCharset);\n      if (parseFieldDivider) {\n        element=UNESCAPED_SEMICOLONS.matcher(element).replaceAll(\"\\n\").trim();\n      }\n    }\n else {\n      if (parseFieldDivider) {\n        element=UNESCAPED_SEMICOLONS.matcher(element).replaceAll(\"\\n\").trim();\n      }\n      element=CR_LF_SPACE_TAB.matcher(element).replaceAll(\"\");\n      element=NEWLINE_ESCAPE.matcher(element).replaceAll(\"\\n\");\n      element=VCARD_ESCAPES.matcher(element).replaceAll(\"$1\");\n    }\n    if (\"uri\".equals(valueType)) {\n      try {\n        element=URI.create(element).getSchemeSpecificPart();\n      }\n catch (      IllegalArgumentException iae) {\n      }\n    }\n    if (metadata == null) {\n      List<String> match=new ArrayList<>(1);\n      match.add(element);\n      matches.add(match);\n    }\n else {\n      metadata.add(0,element);\n      matches.add(metadata);\n    }\n    i++;\n  }\n else {\n    i++;\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 474,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4391,
        "startLineNumber" : 106,
        "startColumnNumber" : 79,
        "endLineNumber" : 221,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<List<String>> matches=null;\n  int i=0;\n  int max=rawText.length();\n  while (i < max) {\n    Matcher matcher=Pattern.compile(\"(?:^|\\n)\" + prefix + \"(?:;([^:]*))?:\",Pattern.CASE_INSENSITIVE).matcher(rawText);\n    if (i > 0) {\n      i--;\n    }\n    if (!matcher.find(i)) {\n      break;\n    }\n    i=matcher.end(0);\n    String metadataString=matcher.group(1);\n    List<String> metadata=null;\n    boolean quotedPrintable=false;\n    String quotedPrintableCharset=null;\n    String valueType=null;\n    if (metadataString != null) {\n      for (      String metadatum : SEMICOLON.split(metadataString)) {\n        if (metadata == null) {\n          metadata=new ArrayList<>(1);\n        }\n        metadata.add(metadatum);\n        String[] metadatumTokens=EQUALS.split(metadatum,2);\n        if (metadatumTokens.length > 1) {\n          String key=metadatumTokens[0];\n          String value=metadatumTokens[1];\n          if (\"ENCODING\".equalsIgnoreCase(key) && \"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n            quotedPrintable=true;\n          }\n else           if (\"CHARSET\".equalsIgnoreCase(key)) {\n            quotedPrintableCharset=value;\n          }\n else           if (\"VALUE\".equalsIgnoreCase(key)) {\n            valueType=value;\n          }\n        }\n      }\n    }\n    int matchStart=i;\n    while ((i=rawText.indexOf('\\n',i)) >= 0) {\n      if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n        i+=2;\n      }\n else       if (quotedPrintable && ((i >= 1 && rawText.charAt(i - 1) == '=') || (i >= 2 && rawText.charAt(i - 2) == '='))) {\n        i++;\n      }\n else {\n        break;\n      }\n    }\n    if (i < 0) {\n      i=max;\n    }\n else     if (i > matchStart) {\n      if (matches == null) {\n        matches=new ArrayList<>(1);\n      }\n      if (i >= 1 && rawText.charAt(i - 1) == '\\r') {\n        i--;\n      }\n      String element=rawText.substring(matchStart,i);\n      if (trim) {\n        element=element.trim();\n      }\n      if (quotedPrintable) {\n        element=decodeQuotedPrintable(element,quotedPrintableCharset);\n        if (parseFieldDivider) {\n          element=UNESCAPED_SEMICOLONS.matcher(element).replaceAll(\"\\n\").trim();\n        }\n      }\n else {\n        if (parseFieldDivider) {\n          element=UNESCAPED_SEMICOLONS.matcher(element).replaceAll(\"\\n\").trim();\n        }\n        element=CR_LF_SPACE_TAB.matcher(element).replaceAll(\"\");\n        element=NEWLINE_ESCAPE.matcher(element).replaceAll(\"\\n\");\n        element=VCARD_ESCAPES.matcher(element).replaceAll(\"$1\");\n      }\n      if (\"uri\".equals(valueType)) {\n        try {\n          element=URI.create(element).getSchemeSpecificPart();\n        }\n catch (        IllegalArgumentException iae) {\n        }\n      }\n      if (metadata == null) {\n        List<String> match=new ArrayList<>(1);\n        match.add(element);\n        matches.add(match);\n      }\n else {\n        metadata.add(0,element);\n        matches.add(metadata);\n      }\n      i++;\n    }\n else {\n      i++;\n    }\n  }\n  return matches;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 501,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4678,
        "startLineNumber" : 103,
        "startColumnNumber" : 2,
        "endLineNumber" : 221,
        "endColumnNumber" : 3
      },
      "nodeContext" : "static List<List<String>> matchVCardPrefixedField(CharSequence prefix,String rawText,boolean trim,boolean parseFieldDivider){\n  List<List<String>> matches=null;\n  int i=0;\n  int max=rawText.length();\n  while (i < max) {\n    Matcher matcher=Pattern.compile(\"(?:^|\\n)\" + prefix + \"(?:;([^:]*))?:\",Pattern.CASE_INSENSITIVE).matcher(rawText);\n    if (i > 0) {\n      i--;\n    }\n    if (!matcher.find(i)) {\n      break;\n    }\n    i=matcher.end(0);\n    String metadataString=matcher.group(1);\n    List<String> metadata=null;\n    boolean quotedPrintable=false;\n    String quotedPrintableCharset=null;\n    String valueType=null;\n    if (metadataString != null) {\n      for (      String metadatum : SEMICOLON.split(metadataString)) {\n        if (metadata == null) {\n          metadata=new ArrayList<>(1);\n        }\n        metadata.add(metadatum);\n        String[] metadatumTokens=EQUALS.split(metadatum,2);\n        if (metadatumTokens.length > 1) {\n          String key=metadatumTokens[0];\n          String value=metadatumTokens[1];\n          if (\"ENCODING\".equalsIgnoreCase(key) && \"QUOTED-PRINTABLE\".equalsIgnoreCase(value)) {\n            quotedPrintable=true;\n          }\n else           if (\"CHARSET\".equalsIgnoreCase(key)) {\n            quotedPrintableCharset=value;\n          }\n else           if (\"VALUE\".equalsIgnoreCase(key)) {\n            valueType=value;\n          }\n        }\n      }\n    }\n    int matchStart=i;\n    while ((i=rawText.indexOf('\\n',i)) >= 0) {\n      if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\\t')) {\n        i+=2;\n      }\n else       if (quotedPrintable && ((i >= 1 && rawText.charAt(i - 1) == '=') || (i >= 2 && rawText.charAt(i - 2) == '='))) {\n        i++;\n      }\n else {\n        break;\n      }\n    }\n    if (i < 0) {\n      i=max;\n    }\n else     if (i > matchStart) {\n      if (matches == null) {\n        matches=new ArrayList<>(1);\n      }\n      if (i >= 1 && rawText.charAt(i - 1) == '\\r') {\n        i--;\n      }\n      String element=rawText.substring(matchStart,i);\n      if (trim) {\n        element=element.trim();\n      }\n      if (quotedPrintable) {\n        element=decodeQuotedPrintable(element,quotedPrintableCharset);\n        if (parseFieldDivider) {\n          element=UNESCAPED_SEMICOLONS.matcher(element).replaceAll(\"\\n\").trim();\n        }\n      }\n else {\n        if (parseFieldDivider) {\n          element=UNESCAPED_SEMICOLONS.matcher(element).replaceAll(\"\\n\").trim();\n        }\n        element=CR_LF_SPACE_TAB.matcher(element).replaceAll(\"\");\n        element=NEWLINE_ESCAPE.matcher(element).replaceAll(\"\\n\");\n        element=VCARD_ESCAPES.matcher(element).replaceAll(\"$1\");\n      }\n      if (\"uri\".equals(valueType)) {\n        try {\n          element=URI.create(element).getSchemeSpecificPart();\n        }\n catch (        IllegalArgumentException iae) {\n        }\n      }\n      if (metadata == null) {\n        List<String> match=new ArrayList<>(1);\n        match.add(element);\n        matches.add(match);\n      }\n else {\n        metadata.add(0,element);\n        matches.add(metadata);\n      }\n      i++;\n    }\n else {\n      i++;\n    }\n  }\n  return matches;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 526,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 138,
        "startColumnNumber" : 12,
        "endLineNumber" : 138,
        "endColumnNumber" : 44
      },
      "nodeContext" : "String key=metadatumTokens[0];\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 18,
    "startLineNumber" : 138,
    "startColumnNumber" : 25,
    "endLineNumber" : 138,
    "endColumnNumber" : 43
  } ],
  "layoutRelationDataList" : [ ]
}