{
  "id" : 298,
  "expression" : "'F'",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/example/src/main/java/io/netty/example/factorial/NumberEncoder.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "'F'",
    "nodeType" : "CharacterLiteral",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 46,
      "startColumnNumber" : 29,
      "endLineNumber" : 46,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 46,
        "startColumnNumber" : 22,
        "endLineNumber" : 46,
        "endColumnNumber" : 32
      },
      "nodeContext" : "(byte)'F'",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 46,
        "startColumnNumber" : 8,
        "endLineNumber" : 46,
        "endColumnNumber" : 33
      },
      "nodeContext" : "out.writeByte((byte)'F')",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 46,
        "startColumnNumber" : 8,
        "endLineNumber" : 46,
        "endColumnNumber" : 34
      },
      "nodeContext" : "out.writeByte((byte)'F');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 569,
        "startLineNumber" : 32,
        "startColumnNumber" : 78,
        "endLineNumber" : 49,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  BigInteger v;\n  if (msg instanceof BigInteger) {\n    v=(BigInteger)msg;\n  }\n else {\n    v=new BigInteger(String.valueOf(msg));\n  }\n  byte[] data=v.toByteArray();\n  int dataLength=data.length;\n  out.writeByte((byte)'F');\n  out.writeInt(dataLength);\n  out.writeBytes(data);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 63,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 658,
        "startLineNumber" : 31,
        "startColumnNumber" : 4,
        "endLineNumber" : 49,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override protected void encode(ChannelHandlerContext ctx,Number msg,ByteBuf out){\n  BigInteger v;\n  if (msg instanceof BigInteger) {\n    v=(BigInteger)msg;\n  }\n else {\n    v=new BigInteger(String.valueOf(msg));\n  }\n  byte[] data=v.toByteArray();\n  int dataLength=data.length;\n  out.writeByte((byte)'F');\n  out.writeInt(dataLength);\n  out.writeBytes(data);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 81,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 46,
        "startColumnNumber" : 8,
        "endLineNumber" : 46,
        "endColumnNumber" : 34
      },
      "nodeContext" : "out.writeByte((byte)'F');\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "char"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 46,
    "startColumnNumber" : 29,
    "endLineNumber" : 46,
    "endColumnNumber" : 32
  } ],
  "layoutRelationDataList" : [ ]
}