{
  "id" : 355,
  "expression" : "annotationNode",
  "projectName" : "projectlombok@lombok",
  "commitID" : "25def866b50860715ee7c315c678b8c3d1ba9b56",
  "filePath" : "/src/core/lombok/eclipse/handlers/HandleData.java",
  "occurrences" : 6,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "annotationNode",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 42,
      "startColumnNumber" : 25,
      "endLineNumber" : 42,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 42,
        "startColumnNumber" : 25,
        "endLineNumber" : 42,
        "endColumnNumber" : 44
      },
      "nodeContext" : "annotationNode.up()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 42,
        "startColumnNumber" : 14,
        "endLineNumber" : 42,
        "endColumnNumber" : 44
      },
      "nodeContext" : "typeNode=annotationNode.up()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 42,
        "startColumnNumber" : 2,
        "endLineNumber" : 42,
        "endColumnNumber" : 45
      },
      "nodeContext" : "EclipseNode typeNode=annotationNode.up();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1478,
        "startLineNumber" : 40,
        "startColumnNumber" : 99,
        "endLineNumber" : 66,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Data ann=annotation.getInstance();\n  EclipseNode typeNode=annotationNode.up();\n  TypeDeclaration typeDecl=null;\n  if (typeNode.get() instanceof TypeDeclaration)   typeDecl=(TypeDeclaration)typeNode.get();\n  int modifiers=typeDecl == null ? 0 : typeDecl.modifiers;\n  boolean notAClass=(modifiers & (ClassFileConstants.AccInterface | ClassFileConstants.AccAnnotation | ClassFileConstants.AccEnum)) != 0;\n  if (typeDecl == null || notAClass) {\n    annotationNode.addError(\"@Data is only supported on a class.\");\n    return;\n  }\n  new HandleGetter().generateGetterForType(typeNode,annotationNode,AccessLevel.PUBLIC,true);\n  new HandleSetter().generateSetterForType(typeNode,annotationNode,AccessLevel.PUBLIC,true);\n  new HandleEqualsAndHashCode().generateEqualsAndHashCodeForType(typeNode,annotationNode);\n  new HandleToString().generateToStringForType(typeNode,annotationNode);\n  new HandleConstructor().generateRequiredArgsConstructor(typeNode,AccessLevel.PUBLIC,ann.staticConstructor(),true,ast);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 139,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1576,
        "startLineNumber" : 40,
        "startColumnNumber" : 1,
        "endLineNumber" : 66,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public void handle(AnnotationValues<Data> annotation,Annotation ast,EclipseNode annotationNode){\n  Data ann=annotation.getInstance();\n  EclipseNode typeNode=annotationNode.up();\n  TypeDeclaration typeDecl=null;\n  if (typeNode.get() instanceof TypeDeclaration)   typeDecl=(TypeDeclaration)typeNode.get();\n  int modifiers=typeDecl == null ? 0 : typeDecl.modifiers;\n  boolean notAClass=(modifiers & (ClassFileConstants.AccInterface | ClassFileConstants.AccAnnotation | ClassFileConstants.AccEnum)) != 0;\n  if (typeDecl == null || notAClass) {\n    annotationNode.addError(\"@Data is only supported on a class.\");\n    return;\n  }\n  new HandleGetter().generateGetterForType(typeNode,annotationNode,AccessLevel.PUBLIC,true);\n  new HandleSetter().generateSetterForType(typeNode,annotationNode,AccessLevel.PUBLIC,true);\n  new HandleEqualsAndHashCode().generateEqualsAndHashCodeForType(typeNode,annotationNode);\n  new HandleToString().generateToStringForType(typeNode,annotationNode);\n  new HandleConstructor().generateRequiredArgsConstructor(typeNode,AccessLevel.PUBLIC,ann.staticConstructor(),true,ast);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 158,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 42,
        "startColumnNumber" : 2,
        "endLineNumber" : 42,
        "endColumnNumber" : 45
      },
      "nodeContext" : "EclipseNode typeNode=annotationNode.up();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "lombok.eclipse.EclipseNode"
  }, {
    "nodeContext" : "annotationNode",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 51,
      "startColumnNumber" : 3,
      "endLineNumber" : 51,
      "endColumnNumber" : 17
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 51,
        "startColumnNumber" : 3,
        "endLineNumber" : 51,
        "endColumnNumber" : 65
      },
      "nodeContext" : "annotationNode.addError(\"@Data is only supported on a class.\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 51,
        "startColumnNumber" : 3,
        "endLineNumber" : 51,
        "endColumnNumber" : 66
      },
      "nodeContext" : "annotationNode.addError(\"@Data is only supported on a class.\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 50,
        "startColumnNumber" : 37,
        "endLineNumber" : 53,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  annotationNode.addError(\"@Data is only supported on a class.\");\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 118,
        "startLineNumber" : 50,
        "startColumnNumber" : 2,
        "endLineNumber" : 53,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (typeDecl == null || notAClass) {\n  annotationNode.addError(\"@Data is only supported on a class.\");\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1478,
        "startLineNumber" : 40,
        "startColumnNumber" : 99,
        "endLineNumber" : 66,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Data ann=annotation.getInstance();\n  EclipseNode typeNode=annotationNode.up();\n  TypeDeclaration typeDecl=null;\n  if (typeNode.get() instanceof TypeDeclaration)   typeDecl=(TypeDeclaration)typeNode.get();\n  int modifiers=typeDecl == null ? 0 : typeDecl.modifiers;\n  boolean notAClass=(modifiers & (ClassFileConstants.AccInterface | ClassFileConstants.AccAnnotation | ClassFileConstants.AccEnum)) != 0;\n  if (typeDecl == null || notAClass) {\n    annotationNode.addError(\"@Data is only supported on a class.\");\n    return;\n  }\n  new HandleGetter().generateGetterForType(typeNode,annotationNode,AccessLevel.PUBLIC,true);\n  new HandleSetter().generateSetterForType(typeNode,annotationNode,AccessLevel.PUBLIC,true);\n  new HandleEqualsAndHashCode().generateEqualsAndHashCodeForType(typeNode,annotationNode);\n  new HandleToString().generateToStringForType(typeNode,annotationNode);\n  new HandleConstructor().generateRequiredArgsConstructor(typeNode,AccessLevel.PUBLIC,ann.staticConstructor(),true,ast);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 139,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1576,
        "startLineNumber" : 40,
        "startColumnNumber" : 1,
        "endLineNumber" : 66,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public void handle(AnnotationValues<Data> annotation,Annotation ast,EclipseNode annotationNode){\n  Data ann=annotation.getInstance();\n  EclipseNode typeNode=annotationNode.up();\n  TypeDeclaration typeDecl=null;\n  if (typeNode.get() instanceof TypeDeclaration)   typeDecl=(TypeDeclaration)typeNode.get();\n  int modifiers=typeDecl == null ? 0 : typeDecl.modifiers;\n  boolean notAClass=(modifiers & (ClassFileConstants.AccInterface | ClassFileConstants.AccAnnotation | ClassFileConstants.AccEnum)) != 0;\n  if (typeDecl == null || notAClass) {\n    annotationNode.addError(\"@Data is only supported on a class.\");\n    return;\n  }\n  new HandleGetter().generateGetterForType(typeNode,annotationNode,AccessLevel.PUBLIC,true);\n  new HandleSetter().generateSetterForType(typeNode,annotationNode,AccessLevel.PUBLIC,true);\n  new HandleEqualsAndHashCode().generateEqualsAndHashCodeForType(typeNode,annotationNode);\n  new HandleToString().generateToStringForType(typeNode,annotationNode);\n  new HandleConstructor().generateRequiredArgsConstructor(typeNode,AccessLevel.PUBLIC,ann.staticConstructor(),true,ast);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 158,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 51,
        "startColumnNumber" : 3,
        "endLineNumber" : 51,
        "endColumnNumber" : 66
      },
      "nodeContext" : "annotationNode.addError(\"@Data is only supported on a class.\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "lombok.eclipse.EclipseNode"
  }, {
    "nodeContext" : "annotationNode",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 61,
      "startColumnNumber" : 53,
      "endLineNumber" : 61,
      "endColumnNumber" : 67
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 61,
        "startColumnNumber" : 2,
        "endLineNumber" : 61,
        "endColumnNumber" : 94
      },
      "nodeContext" : "new HandleGetter().generateGetterForType(typeNode,annotationNode,AccessLevel.PUBLIC,true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 61,
        "startColumnNumber" : 2,
        "endLineNumber" : 61,
        "endColumnNumber" : 95
      },
      "nodeContext" : "new HandleGetter().generateGetterForType(typeNode,annotationNode,AccessLevel.PUBLIC,true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1478,
        "startLineNumber" : 40,
        "startColumnNumber" : 99,
        "endLineNumber" : 66,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Data ann=annotation.getInstance();\n  EclipseNode typeNode=annotationNode.up();\n  TypeDeclaration typeDecl=null;\n  if (typeNode.get() instanceof TypeDeclaration)   typeDecl=(TypeDeclaration)typeNode.get();\n  int modifiers=typeDecl == null ? 0 : typeDecl.modifiers;\n  boolean notAClass=(modifiers & (ClassFileConstants.AccInterface | ClassFileConstants.AccAnnotation | ClassFileConstants.AccEnum)) != 0;\n  if (typeDecl == null || notAClass) {\n    annotationNode.addError(\"@Data is only supported on a class.\");\n    return;\n  }\n  new HandleGetter().generateGetterForType(typeNode,annotationNode,AccessLevel.PUBLIC,true);\n  new HandleSetter().generateSetterForType(typeNode,annotationNode,AccessLevel.PUBLIC,true);\n  new HandleEqualsAndHashCode().generateEqualsAndHashCodeForType(typeNode,annotationNode);\n  new HandleToString().generateToStringForType(typeNode,annotationNode);\n  new HandleConstructor().generateRequiredArgsConstructor(typeNode,AccessLevel.PUBLIC,ann.staticConstructor(),true,ast);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 139,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1576,
        "startLineNumber" : 40,
        "startColumnNumber" : 1,
        "endLineNumber" : 66,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public void handle(AnnotationValues<Data> annotation,Annotation ast,EclipseNode annotationNode){\n  Data ann=annotation.getInstance();\n  EclipseNode typeNode=annotationNode.up();\n  TypeDeclaration typeDecl=null;\n  if (typeNode.get() instanceof TypeDeclaration)   typeDecl=(TypeDeclaration)typeNode.get();\n  int modifiers=typeDecl == null ? 0 : typeDecl.modifiers;\n  boolean notAClass=(modifiers & (ClassFileConstants.AccInterface | ClassFileConstants.AccAnnotation | ClassFileConstants.AccEnum)) != 0;\n  if (typeDecl == null || notAClass) {\n    annotationNode.addError(\"@Data is only supported on a class.\");\n    return;\n  }\n  new HandleGetter().generateGetterForType(typeNode,annotationNode,AccessLevel.PUBLIC,true);\n  new HandleSetter().generateSetterForType(typeNode,annotationNode,AccessLevel.PUBLIC,true);\n  new HandleEqualsAndHashCode().generateEqualsAndHashCodeForType(typeNode,annotationNode);\n  new HandleToString().generateToStringForType(typeNode,annotationNode);\n  new HandleConstructor().generateRequiredArgsConstructor(typeNode,AccessLevel.PUBLIC,ann.staticConstructor(),true,ast);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 158,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 61,
        "startColumnNumber" : 2,
        "endLineNumber" : 61,
        "endColumnNumber" : 95
      },
      "nodeContext" : "new HandleGetter().generateGetterForType(typeNode,annotationNode,AccessLevel.PUBLIC,true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "lombok.eclipse.EclipseNode"
  }, {
    "nodeContext" : "annotationNode",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 62,
      "startColumnNumber" : 53,
      "endLineNumber" : 62,
      "endColumnNumber" : 67
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 62,
        "startColumnNumber" : 2,
        "endLineNumber" : 62,
        "endColumnNumber" : 94
      },
      "nodeContext" : "new HandleSetter().generateSetterForType(typeNode,annotationNode,AccessLevel.PUBLIC,true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 62,
        "startColumnNumber" : 2,
        "endLineNumber" : 62,
        "endColumnNumber" : 95
      },
      "nodeContext" : "new HandleSetter().generateSetterForType(typeNode,annotationNode,AccessLevel.PUBLIC,true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1478,
        "startLineNumber" : 40,
        "startColumnNumber" : 99,
        "endLineNumber" : 66,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Data ann=annotation.getInstance();\n  EclipseNode typeNode=annotationNode.up();\n  TypeDeclaration typeDecl=null;\n  if (typeNode.get() instanceof TypeDeclaration)   typeDecl=(TypeDeclaration)typeNode.get();\n  int modifiers=typeDecl == null ? 0 : typeDecl.modifiers;\n  boolean notAClass=(modifiers & (ClassFileConstants.AccInterface | ClassFileConstants.AccAnnotation | ClassFileConstants.AccEnum)) != 0;\n  if (typeDecl == null || notAClass) {\n    annotationNode.addError(\"@Data is only supported on a class.\");\n    return;\n  }\n  new HandleGetter().generateGetterForType(typeNode,annotationNode,AccessLevel.PUBLIC,true);\n  new HandleSetter().generateSetterForType(typeNode,annotationNode,AccessLevel.PUBLIC,true);\n  new HandleEqualsAndHashCode().generateEqualsAndHashCodeForType(typeNode,annotationNode);\n  new HandleToString().generateToStringForType(typeNode,annotationNode);\n  new HandleConstructor().generateRequiredArgsConstructor(typeNode,AccessLevel.PUBLIC,ann.staticConstructor(),true,ast);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 139,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1576,
        "startLineNumber" : 40,
        "startColumnNumber" : 1,
        "endLineNumber" : 66,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public void handle(AnnotationValues<Data> annotation,Annotation ast,EclipseNode annotationNode){\n  Data ann=annotation.getInstance();\n  EclipseNode typeNode=annotationNode.up();\n  TypeDeclaration typeDecl=null;\n  if (typeNode.get() instanceof TypeDeclaration)   typeDecl=(TypeDeclaration)typeNode.get();\n  int modifiers=typeDecl == null ? 0 : typeDecl.modifiers;\n  boolean notAClass=(modifiers & (ClassFileConstants.AccInterface | ClassFileConstants.AccAnnotation | ClassFileConstants.AccEnum)) != 0;\n  if (typeDecl == null || notAClass) {\n    annotationNode.addError(\"@Data is only supported on a class.\");\n    return;\n  }\n  new HandleGetter().generateGetterForType(typeNode,annotationNode,AccessLevel.PUBLIC,true);\n  new HandleSetter().generateSetterForType(typeNode,annotationNode,AccessLevel.PUBLIC,true);\n  new HandleEqualsAndHashCode().generateEqualsAndHashCodeForType(typeNode,annotationNode);\n  new HandleToString().generateToStringForType(typeNode,annotationNode);\n  new HandleConstructor().generateRequiredArgsConstructor(typeNode,AccessLevel.PUBLIC,ann.staticConstructor(),true,ast);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 158,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 62,
        "startColumnNumber" : 2,
        "endLineNumber" : 62,
        "endColumnNumber" : 95
      },
      "nodeContext" : "new HandleSetter().generateSetterForType(typeNode,annotationNode,AccessLevel.PUBLIC,true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "lombok.eclipse.EclipseNode"
  }, {
    "nodeContext" : "annotationNode",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 63,
      "startColumnNumber" : 75,
      "endLineNumber" : 63,
      "endColumnNumber" : 89
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 63,
        "startColumnNumber" : 2,
        "endLineNumber" : 63,
        "endColumnNumber" : 90
      },
      "nodeContext" : "new HandleEqualsAndHashCode().generateEqualsAndHashCodeForType(typeNode,annotationNode)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 63,
        "startColumnNumber" : 2,
        "endLineNumber" : 63,
        "endColumnNumber" : 91
      },
      "nodeContext" : "new HandleEqualsAndHashCode().generateEqualsAndHashCodeForType(typeNode,annotationNode);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1478,
        "startLineNumber" : 40,
        "startColumnNumber" : 99,
        "endLineNumber" : 66,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Data ann=annotation.getInstance();\n  EclipseNode typeNode=annotationNode.up();\n  TypeDeclaration typeDecl=null;\n  if (typeNode.get() instanceof TypeDeclaration)   typeDecl=(TypeDeclaration)typeNode.get();\n  int modifiers=typeDecl == null ? 0 : typeDecl.modifiers;\n  boolean notAClass=(modifiers & (ClassFileConstants.AccInterface | ClassFileConstants.AccAnnotation | ClassFileConstants.AccEnum)) != 0;\n  if (typeDecl == null || notAClass) {\n    annotationNode.addError(\"@Data is only supported on a class.\");\n    return;\n  }\n  new HandleGetter().generateGetterForType(typeNode,annotationNode,AccessLevel.PUBLIC,true);\n  new HandleSetter().generateSetterForType(typeNode,annotationNode,AccessLevel.PUBLIC,true);\n  new HandleEqualsAndHashCode().generateEqualsAndHashCodeForType(typeNode,annotationNode);\n  new HandleToString().generateToStringForType(typeNode,annotationNode);\n  new HandleConstructor().generateRequiredArgsConstructor(typeNode,AccessLevel.PUBLIC,ann.staticConstructor(),true,ast);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 139,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1576,
        "startLineNumber" : 40,
        "startColumnNumber" : 1,
        "endLineNumber" : 66,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public void handle(AnnotationValues<Data> annotation,Annotation ast,EclipseNode annotationNode){\n  Data ann=annotation.getInstance();\n  EclipseNode typeNode=annotationNode.up();\n  TypeDeclaration typeDecl=null;\n  if (typeNode.get() instanceof TypeDeclaration)   typeDecl=(TypeDeclaration)typeNode.get();\n  int modifiers=typeDecl == null ? 0 : typeDecl.modifiers;\n  boolean notAClass=(modifiers & (ClassFileConstants.AccInterface | ClassFileConstants.AccAnnotation | ClassFileConstants.AccEnum)) != 0;\n  if (typeDecl == null || notAClass) {\n    annotationNode.addError(\"@Data is only supported on a class.\");\n    return;\n  }\n  new HandleGetter().generateGetterForType(typeNode,annotationNode,AccessLevel.PUBLIC,true);\n  new HandleSetter().generateSetterForType(typeNode,annotationNode,AccessLevel.PUBLIC,true);\n  new HandleEqualsAndHashCode().generateEqualsAndHashCodeForType(typeNode,annotationNode);\n  new HandleToString().generateToStringForType(typeNode,annotationNode);\n  new HandleConstructor().generateRequiredArgsConstructor(typeNode,AccessLevel.PUBLIC,ann.staticConstructor(),true,ast);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 158,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 63,
        "startColumnNumber" : 2,
        "endLineNumber" : 63,
        "endColumnNumber" : 91
      },
      "nodeContext" : "new HandleEqualsAndHashCode().generateEqualsAndHashCodeForType(typeNode,annotationNode);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "lombok.eclipse.EclipseNode"
  }, {
    "nodeContext" : "annotationNode",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 64,
      "startColumnNumber" : 57,
      "endLineNumber" : 64,
      "endColumnNumber" : 71
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 64,
        "startColumnNumber" : 2,
        "endLineNumber" : 64,
        "endColumnNumber" : 72
      },
      "nodeContext" : "new HandleToString().generateToStringForType(typeNode,annotationNode)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 64,
        "startColumnNumber" : 2,
        "endLineNumber" : 64,
        "endColumnNumber" : 73
      },
      "nodeContext" : "new HandleToString().generateToStringForType(typeNode,annotationNode);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1478,
        "startLineNumber" : 40,
        "startColumnNumber" : 99,
        "endLineNumber" : 66,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Data ann=annotation.getInstance();\n  EclipseNode typeNode=annotationNode.up();\n  TypeDeclaration typeDecl=null;\n  if (typeNode.get() instanceof TypeDeclaration)   typeDecl=(TypeDeclaration)typeNode.get();\n  int modifiers=typeDecl == null ? 0 : typeDecl.modifiers;\n  boolean notAClass=(modifiers & (ClassFileConstants.AccInterface | ClassFileConstants.AccAnnotation | ClassFileConstants.AccEnum)) != 0;\n  if (typeDecl == null || notAClass) {\n    annotationNode.addError(\"@Data is only supported on a class.\");\n    return;\n  }\n  new HandleGetter().generateGetterForType(typeNode,annotationNode,AccessLevel.PUBLIC,true);\n  new HandleSetter().generateSetterForType(typeNode,annotationNode,AccessLevel.PUBLIC,true);\n  new HandleEqualsAndHashCode().generateEqualsAndHashCodeForType(typeNode,annotationNode);\n  new HandleToString().generateToStringForType(typeNode,annotationNode);\n  new HandleConstructor().generateRequiredArgsConstructor(typeNode,AccessLevel.PUBLIC,ann.staticConstructor(),true,ast);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 139,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1576,
        "startLineNumber" : 40,
        "startColumnNumber" : 1,
        "endLineNumber" : 66,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public void handle(AnnotationValues<Data> annotation,Annotation ast,EclipseNode annotationNode){\n  Data ann=annotation.getInstance();\n  EclipseNode typeNode=annotationNode.up();\n  TypeDeclaration typeDecl=null;\n  if (typeNode.get() instanceof TypeDeclaration)   typeDecl=(TypeDeclaration)typeNode.get();\n  int modifiers=typeDecl == null ? 0 : typeDecl.modifiers;\n  boolean notAClass=(modifiers & (ClassFileConstants.AccInterface | ClassFileConstants.AccAnnotation | ClassFileConstants.AccEnum)) != 0;\n  if (typeDecl == null || notAClass) {\n    annotationNode.addError(\"@Data is only supported on a class.\");\n    return;\n  }\n  new HandleGetter().generateGetterForType(typeNode,annotationNode,AccessLevel.PUBLIC,true);\n  new HandleSetter().generateSetterForType(typeNode,annotationNode,AccessLevel.PUBLIC,true);\n  new HandleEqualsAndHashCode().generateEqualsAndHashCodeForType(typeNode,annotationNode);\n  new HandleToString().generateToStringForType(typeNode,annotationNode);\n  new HandleConstructor().generateRequiredArgsConstructor(typeNode,AccessLevel.PUBLIC,ann.staticConstructor(),true,ast);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 158,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 64,
        "startColumnNumber" : 2,
        "endLineNumber" : 64,
        "endColumnNumber" : 73
      },
      "nodeContext" : "new HandleToString().generateToStringForType(typeNode,annotationNode);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "lombok.eclipse.EclipseNode"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 42,
    "startColumnNumber" : 25,
    "endLineNumber" : 42,
    "endColumnNumber" : 39
  }, {
    "charLength" : 14,
    "startLineNumber" : 51,
    "startColumnNumber" : 3,
    "endLineNumber" : 51,
    "endColumnNumber" : 17
  }, {
    "charLength" : 14,
    "startLineNumber" : 61,
    "startColumnNumber" : 53,
    "endLineNumber" : 61,
    "endColumnNumber" : 67
  }, {
    "charLength" : 14,
    "startLineNumber" : 62,
    "startColumnNumber" : 53,
    "endLineNumber" : 62,
    "endColumnNumber" : 67
  }, {
    "charLength" : 14,
    "startLineNumber" : 63,
    "startColumnNumber" : 75,
    "endLineNumber" : 63,
    "endColumnNumber" : 89
  }, {
    "charLength" : 14,
    "startLineNumber" : 64,
    "startColumnNumber" : 57,
    "endLineNumber" : 64,
    "endColumnNumber" : 71
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 2
  } ]
}