{
  "id" : 4,
  "expression" : "JavaPluginConvention.class",
  "projectName" : "GoogleContainerTools@jib",
  "commitID" : "a0742fd277b5490a0965dba4443f5864f1250199",
  "filePath" : "/jib-gradle-plugin/src/test/java/com/google/cloud/tools/jib/gradle/GradleLayerConfigurationsTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "JavaPluginConvention.class",
    "nodeType" : "TypeLiteral",
    "nodePosition" : {
      "charLength" : 26,
      "startLineNumber" : 103,
      "startColumnNumber" : 42,
      "endLineNumber" : 103,
      "endColumnNumber" : 68
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 103,
        "startColumnNumber" : 17,
        "endLineNumber" : 103,
        "endColumnNumber" : 69
      },
      "nodeContext" : "mockConvention.getPlugin(JavaPluginConvention.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 103,
        "startColumnNumber" : 4,
        "endLineNumber" : 103,
        "endColumnNumber" : 70
      },
      "nodeContext" : "Mockito.when(mockConvention.getPlugin(JavaPluginConvention.class))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 112,
        "startLineNumber" : 103,
        "startColumnNumber" : 4,
        "endLineNumber" : 104,
        "endColumnNumber" : 45
      },
      "nodeContext" : "Mockito.when(mockConvention.getPlugin(JavaPluginConvention.class)).thenReturn(mockJavaPluginConvention)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 103,
        "startColumnNumber" : 4,
        "endLineNumber" : 104,
        "endColumnNumber" : 46
      },
      "nodeContext" : "Mockito.when(mockConvention.getPlugin(JavaPluginConvention.class)).thenReturn(mockJavaPluginConvention);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1806,
        "startLineNumber" : 79,
        "startColumnNumber" : 48,
        "endLineNumber" : 111,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Set<File> classesFiles=ImmutableSet.of(Paths.get(Resources.getResource(\"application/classes\").toURI()).toFile());\n  FileCollection classesFileCollection=new TestFileCollection(classesFiles);\n  File resourcesOutputDir=Paths.get(Resources.getResource(\"application/resources\").toURI()).toFile();\n  Set<File> allFiles=new HashSet<>(classesFiles);\n  allFiles.add(resourcesOutputDir);\n  allFiles.add(Paths.get(Resources.getResource(\"application/dependencies/libraryB.jar\").toURI()).toFile());\n  allFiles.add(Paths.get(Resources.getResource(\"application/dependencies/libraryA.jar\").toURI()).toFile());\n  allFiles.add(Paths.get(Resources.getResource(\"application/dependencies/dependency-1.0.0.jar\").toURI()).toFile());\n  allFiles.add(Paths.get(Resources.getResource(\"application/dependencies/dependencyX-1.0.0-SNAPSHOT.jar\").toURI()).toFile());\n  FileCollection runtimeFileCollection=new TestFileCollection(allFiles);\n  Mockito.when(mockProject.getConvention()).thenReturn(mockConvention);\n  Mockito.when(mockConvention.getPlugin(JavaPluginConvention.class)).thenReturn(mockJavaPluginConvention);\n  Mockito.when(mockJavaPluginConvention.getSourceSets()).thenReturn(mockSourceSetContainer);\n  Mockito.when(mockSourceSetContainer.getByName(\"main\")).thenReturn(mockMainSourceSet);\n  Mockito.when(mockMainSourceSet.getOutput()).thenReturn(mockMainSourceSetOutput);\n  Mockito.when(mockMainSourceSetOutput.getClassesDirs()).thenReturn(classesFileCollection);\n  Mockito.when(mockMainSourceSetOutput.getResourcesDir()).thenReturn(resourcesOutputDir);\n  Mockito.when(mockMainSourceSet.getRuntimeClasspath()).thenReturn(runtimeFileCollection);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 219,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1862,
        "startLineNumber" : 78,
        "startColumnNumber" : 2,
        "endLineNumber" : 111,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Before public void setUp() throws URISyntaxException {\n  Set<File> classesFiles=ImmutableSet.of(Paths.get(Resources.getResource(\"application/classes\").toURI()).toFile());\n  FileCollection classesFileCollection=new TestFileCollection(classesFiles);\n  File resourcesOutputDir=Paths.get(Resources.getResource(\"application/resources\").toURI()).toFile();\n  Set<File> allFiles=new HashSet<>(classesFiles);\n  allFiles.add(resourcesOutputDir);\n  allFiles.add(Paths.get(Resources.getResource(\"application/dependencies/libraryB.jar\").toURI()).toFile());\n  allFiles.add(Paths.get(Resources.getResource(\"application/dependencies/libraryA.jar\").toURI()).toFile());\n  allFiles.add(Paths.get(Resources.getResource(\"application/dependencies/dependency-1.0.0.jar\").toURI()).toFile());\n  allFiles.add(Paths.get(Resources.getResource(\"application/dependencies/dependencyX-1.0.0-SNAPSHOT.jar\").toURI()).toFile());\n  FileCollection runtimeFileCollection=new TestFileCollection(allFiles);\n  Mockito.when(mockProject.getConvention()).thenReturn(mockConvention);\n  Mockito.when(mockConvention.getPlugin(JavaPluginConvention.class)).thenReturn(mockJavaPluginConvention);\n  Mockito.when(mockJavaPluginConvention.getSourceSets()).thenReturn(mockSourceSetContainer);\n  Mockito.when(mockSourceSetContainer.getByName(\"main\")).thenReturn(mockMainSourceSet);\n  Mockito.when(mockMainSourceSet.getOutput()).thenReturn(mockMainSourceSetOutput);\n  Mockito.when(mockMainSourceSetOutput.getClassesDirs()).thenReturn(classesFileCollection);\n  Mockito.when(mockMainSourceSetOutput.getResourcesDir()).thenReturn(resourcesOutputDir);\n  Mockito.when(mockMainSourceSet.getRuntimeClasspath()).thenReturn(runtimeFileCollection);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 227,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 103,
        "startColumnNumber" : 4,
        "endLineNumber" : 103,
        "endColumnNumber" : 70
      },
      "nodeContext" : "Mockito.when(mockConvention.getPlugin(JavaPluginConvention.class))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.Class<com.google.cloud.tools.jib.gradle.JavaPluginConvention>"
  } ],
  "positionList" : [ {
    "charLength" : 26,
    "startLineNumber" : 103,
    "startColumnNumber" : 42,
    "endLineNumber" : 103,
    "endColumnNumber" : 68
  } ],
  "layoutRelationDataList" : [ ]
}