{
  "id" : 26,
  "expression" : "TypeValidation",
  "projectName" : "mockito@mockito",
  "commitID" : "7f036eb9ed79444adcec3a6c635870222b109e50",
  "filePath" : "/src/main/java/org/mockito/internal/creation/bytebuddy/InlineBytecodeGenerator.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "TypeValidation",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 93,
      "startColumnNumber" : 30,
      "endLineNumber" : 93,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 93,
        "startColumnNumber" : 30,
        "endLineNumber" : 93,
        "endColumnNumber" : 53
      },
      "nodeContext" : "TypeValidation.DISABLED",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 92,
        "startColumnNumber" : 16,
        "endLineNumber" : 93,
        "endColumnNumber" : 54
      },
      "nodeContext" : "new ByteBuddy().with(TypeValidation.DISABLED)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 152,
        "startLineNumber" : 92,
        "startColumnNumber" : 16,
        "endLineNumber" : 94,
        "endColumnNumber" : 79
      },
      "nodeContext" : "new ByteBuddy().with(TypeValidation.DISABLED).with(Implementation.Context.Disabled.Factory.INSTANCE)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 233,
        "startLineNumber" : 92,
        "startColumnNumber" : 16,
        "endLineNumber" : 95,
        "endColumnNumber" : 79
      },
      "nodeContext" : "new ByteBuddy().with(TypeValidation.DISABLED).with(Implementation.Context.Disabled.Factory.INSTANCE).with(MethodGraph.Compiler.ForDeclaredMethods.INSTANCE)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 28,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 332,
        "startLineNumber" : 92,
        "startColumnNumber" : 16,
        "endLineNumber" : 96,
        "endColumnNumber" : 97
      },
      "nodeContext" : "new ByteBuddy().with(TypeValidation.DISABLED).with(Implementation.Context.Disabled.Factory.INSTANCE).with(MethodGraph.Compiler.ForDeclaredMethods.INSTANCE).ignore(isSynthetic().and(not(isConstructor())).or(isDefaultFinalizer()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 42,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 361,
        "startLineNumber" : 91,
        "startColumnNumber" : 8,
        "endLineNumber" : 96,
        "endColumnNumber" : 97
      },
      "nodeContext" : "byteBuddy=new ByteBuddy().with(TypeValidation.DISABLED).with(Implementation.Context.Disabled.Factory.INSTANCE).with(MethodGraph.Compiler.ForDeclaredMethods.INSTANCE).ignore(isSynthetic().and(not(isConstructor())).or(isDefaultFinalizer()))",
      "nodeType" : "Assignment",
      "astNodeNumber" : 44,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 362,
        "startLineNumber" : 91,
        "startColumnNumber" : 8,
        "endLineNumber" : 96,
        "endColumnNumber" : 98
      },
      "nodeContext" : "byteBuddy=new ByteBuddy().with(TypeValidation.DISABLED).with(Implementation.Context.Disabled.Factory.INSTANCE).with(MethodGraph.Compiler.ForDeclaredMethods.INSTANCE).ignore(isSynthetic().and(not(isConstructor())).or(isDefaultFinalizer()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 45,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4573,
        "startLineNumber" : 88,
        "startColumnNumber" : 49,
        "endLineNumber" : 169,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  preload();\n  this.instrumentation=instrumentation;\n  byteBuddy=new ByteBuddy().with(TypeValidation.DISABLED).with(Implementation.Context.Disabled.Factory.INSTANCE).with(MethodGraph.Compiler.ForDeclaredMethods.INSTANCE).ignore(isSynthetic().and(not(isConstructor())).or(isDefaultFinalizer()));\n  mocked=new WeakConcurrentSet<>(WeakConcurrentSet.Cleaner.INLINE);\n  flatMocked=new WeakConcurrentSet<>(WeakConcurrentSet.Cleaner.INLINE);\n  String identifier=RandomString.make();\n  subclassEngine=new TypeCachingBytecodeGenerator(new SubclassBytecodeGenerator(withDefaultConfiguration().withBinders(of(MockMethodAdvice.Identifier.class,identifier)).to(MockMethodAdvice.ForReadObject.class),isAbstract().or(isNative()).or(isToString())),false);\n  mockTransformer=new AsmVisitorWrapper.ForDeclaredMethods().method(isVirtual().and(not(isBridge().or(isHashCode()).or(isEquals()).or(isDefaultFinalizer()))).and(not(isDeclaredBy(nameStartsWith(\"java.\")).<MethodDescription>and(isPackagePrivate()))),Advice.withCustomMapping().bind(MockMethodAdvice.Identifier.class,identifier).to(MockMethodAdvice.class)).method(isStatic(),Advice.withCustomMapping().bind(MockMethodAdvice.Identifier.class,identifier).to(MockMethodAdvice.ForStatic.class)).constructor(any(),new MockMethodAdvice.ConstructorShortcut(identifier)).method(isHashCode(),Advice.withCustomMapping().bind(MockMethodAdvice.Identifier.class,identifier).to(MockMethodAdvice.ForHashCode.class)).method(isEquals(),Advice.withCustomMapping().bind(MockMethodAdvice.Identifier.class,identifier).to(MockMethodAdvice.ForEquals.class));\n  Method getModule, canRead, redefineModule;\n  try {\n    getModule=Class.class.getMethod(\"getModule\");\n    canRead=getModule.getReturnType().getMethod(\"canRead\",getModule.getReturnType());\n    redefineModule=Instrumentation.class.getMethod(\"redefineModule\",getModule.getReturnType(),Set.class,Map.class,Map.class,Set.class,Map.class);\n  }\n catch (  Exception ignored) {\n    getModule=null;\n    canRead=null;\n    redefineModule=null;\n  }\n  this.getModule=getModule;\n  this.canRead=canRead;\n  this.redefineModule=redefineModule;\n  MockMethodDispatcher.set(identifier,new MockMethodAdvice(mocks,mockedStatics,identifier,isMockConstruction,onConstruction));\n  instrumentation.addTransformer(this,true);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 377,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4909,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 169,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public InlineBytecodeGenerator(Instrumentation instrumentation,WeakConcurrentMap<Object,MockMethodInterceptor> mocks,DetachedThreadLocal<Map<Class<?>,MockMethodInterceptor>> mockedStatics,Predicate<Class<?>> isMockConstruction,ConstructionCallback onConstruction){\n  preload();\n  this.instrumentation=instrumentation;\n  byteBuddy=new ByteBuddy().with(TypeValidation.DISABLED).with(Implementation.Context.Disabled.Factory.INSTANCE).with(MethodGraph.Compiler.ForDeclaredMethods.INSTANCE).ignore(isSynthetic().and(not(isConstructor())).or(isDefaultFinalizer()));\n  mocked=new WeakConcurrentSet<>(WeakConcurrentSet.Cleaner.INLINE);\n  flatMocked=new WeakConcurrentSet<>(WeakConcurrentSet.Cleaner.INLINE);\n  String identifier=RandomString.make();\n  subclassEngine=new TypeCachingBytecodeGenerator(new SubclassBytecodeGenerator(withDefaultConfiguration().withBinders(of(MockMethodAdvice.Identifier.class,identifier)).to(MockMethodAdvice.ForReadObject.class),isAbstract().or(isNative()).or(isToString())),false);\n  mockTransformer=new AsmVisitorWrapper.ForDeclaredMethods().method(isVirtual().and(not(isBridge().or(isHashCode()).or(isEquals()).or(isDefaultFinalizer()))).and(not(isDeclaredBy(nameStartsWith(\"java.\")).<MethodDescription>and(isPackagePrivate()))),Advice.withCustomMapping().bind(MockMethodAdvice.Identifier.class,identifier).to(MockMethodAdvice.class)).method(isStatic(),Advice.withCustomMapping().bind(MockMethodAdvice.Identifier.class,identifier).to(MockMethodAdvice.ForStatic.class)).constructor(any(),new MockMethodAdvice.ConstructorShortcut(identifier)).method(isHashCode(),Advice.withCustomMapping().bind(MockMethodAdvice.Identifier.class,identifier).to(MockMethodAdvice.ForHashCode.class)).method(isEquals(),Advice.withCustomMapping().bind(MockMethodAdvice.Identifier.class,identifier).to(MockMethodAdvice.ForEquals.class));\n  Method getModule, canRead, redefineModule;\n  try {\n    getModule=Class.class.getMethod(\"getModule\");\n    canRead=getModule.getReturnType().getMethod(\"canRead\",getModule.getReturnType());\n    redefineModule=Instrumentation.class.getMethod(\"redefineModule\",getModule.getReturnType(),Set.class,Map.class,Map.class,Set.class,Map.class);\n  }\n catch (  Exception ignored) {\n    getModule=null;\n    canRead=null;\n    redefineModule=null;\n  }\n  this.getModule=getModule;\n  this.canRead=canRead;\n  this.redefineModule=redefineModule;\n  MockMethodDispatcher.set(identifier,new MockMethodAdvice(mocks,mockedStatics,identifier,isMockConstruction,onConstruction));\n  instrumentation.addTransformer(this,true);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 420,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 93,
        "startColumnNumber" : 30,
        "endLineNumber" : 93,
        "endColumnNumber" : 53
      },
      "nodeContext" : "TypeValidation.DISABLED",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 93,
    "startColumnNumber" : 30,
    "endLineNumber" : 93,
    "endColumnNumber" : 44
  } ],
  "layoutRelationDataList" : [ ]
}