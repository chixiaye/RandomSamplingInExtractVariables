{
  "id" : 335,
  "expression" : "MODIFIABLE",
  "projectName" : "google@guava",
  "commitID" : "68500b2c09fa6985eab2e41577e2992685b57f2b",
  "filePath" : "/android/guava-tests/test/com/google/common/collect/MultimapsTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "MODIFIABLE",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 503,
      "startColumnNumber" : 15,
      "endLineNumber" : 503,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 662,
        "startLineNumber" : 502,
        "startColumnNumber" : 8,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "new IteratorTester<Integer>(4,MODIFIABLE,newHashSet(1),IteratorTester.KnownOrder.KNOWN_ORDER){\n  private Multimap<String,Integer> multimap;\n  @Override protected Iterator<Integer> newTargetIterator(){\n    Map<String,Integer> map=Maps.newHashMap();\n    map.put(\"foo\",1);\n    map.put(\"bar\",2);\n    multimap=Multimaps.forMap(map);\n    return multimap.get(\"foo\").iterator();\n  }\n  @Override protected void verify(  List<Integer> elements){\n    assertEquals(newHashSet(elements),multimap.get(\"foo\"));\n  }\n}\n",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 102,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 680,
        "startLineNumber" : 501,
        "startColumnNumber" : 28,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "tester=new IteratorTester<Integer>(4,MODIFIABLE,newHashSet(1),IteratorTester.KnownOrder.KNOWN_ORDER){\n  private Multimap<String,Integer> multimap;\n  @Override protected Iterator<Integer> newTargetIterator(){\n    Map<String,Integer> map=Maps.newHashMap();\n    map.put(\"foo\",1);\n    map.put(\"bar\",2);\n    multimap=Multimaps.forMap(map);\n    return multimap.get(\"foo\").iterator();\n  }\n  @Override protected void verify(  List<Integer> elements){\n    assertEquals(newHashSet(elements),multimap.get(\"foo\"));\n  }\n}\n",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 104,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 705,
        "startLineNumber" : 501,
        "startColumnNumber" : 4,
        "endLineNumber" : 519,
        "endColumnNumber" : 10
      },
      "nodeContext" : "IteratorTester<Integer> tester=new IteratorTester<Integer>(4,MODIFIABLE,newHashSet(1),IteratorTester.KnownOrder.KNOWN_ORDER){\n  private Multimap<String,Integer> multimap;\n  @Override protected Iterator<Integer> newTargetIterator(){\n    Map<String,Integer> map=Maps.newHashMap();\n    map.put(\"foo\",1);\n    map.put(\"bar\",2);\n    multimap=Multimaps.forMap(map);\n    return multimap.get(\"foo\").iterator();\n  }\n  @Override protected void verify(  List<Integer> elements){\n    assertEquals(newHashSet(elements),multimap.get(\"foo\"));\n  }\n}\n;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 110,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 739,
        "startLineNumber" : 500,
        "startColumnNumber" : 39,
        "endLineNumber" : 522,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  IteratorTester<Integer> tester=new IteratorTester<Integer>(4,MODIFIABLE,newHashSet(1),IteratorTester.KnownOrder.KNOWN_ORDER){\n    private Multimap<String,Integer> multimap;\n    @Override protected Iterator<Integer> newTargetIterator(){\n      Map<String,Integer> map=Maps.newHashMap();\n      map.put(\"foo\",1);\n      map.put(\"bar\",2);\n      multimap=Multimaps.forMap(map);\n      return multimap.get(\"foo\").iterator();\n    }\n    @Override protected void verify(    List<Integer> elements){\n      assertEquals(newHashSet(elements),multimap.get(\"foo\"));\n    }\n  }\n;\n  tester.test();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 115,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 776,
        "startLineNumber" : 500,
        "startColumnNumber" : 2,
        "endLineNumber" : 522,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public void testForMapGetIteration(){\n  IteratorTester<Integer> tester=new IteratorTester<Integer>(4,MODIFIABLE,newHashSet(1),IteratorTester.KnownOrder.KNOWN_ORDER){\n    private Multimap<String,Integer> multimap;\n    @Override protected Iterator<Integer> newTargetIterator(){\n      Map<String,Integer> map=Maps.newHashMap();\n      map.put(\"foo\",1);\n      map.put(\"bar\",2);\n      multimap=Multimaps.forMap(map);\n      return multimap.get(\"foo\").iterator();\n    }\n    @Override protected void verify(    List<Integer> elements){\n      assertEquals(newHashSet(elements),multimap.get(\"foo\"));\n    }\n  }\n;\n  tester.test();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 119,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 662,
        "startLineNumber" : 502,
        "startColumnNumber" : 8,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "new IteratorTester<Integer>(4,MODIFIABLE,newHashSet(1),IteratorTester.KnownOrder.KNOWN_ORDER){\n  private Multimap<String,Integer> multimap;\n  @Override protected Iterator<Integer> newTargetIterator(){\n    Map<String,Integer> map=Maps.newHashMap();\n    map.put(\"foo\",1);\n    map.put(\"bar\",2);\n    multimap=Multimaps.forMap(map);\n    return multimap.get(\"foo\").iterator();\n  }\n  @Override protected void verify(  List<Integer> elements){\n    assertEquals(newHashSet(elements),multimap.get(\"foo\"));\n  }\n}\n",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 102,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : "java.util.Set<com.google.common.collect.testing.IteratorFeature>"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 503,
    "startColumnNumber" : 15,
    "endLineNumber" : 503,
    "endColumnNumber" : 25
  } ],
  "layoutRelationDataList" : [ ]
}