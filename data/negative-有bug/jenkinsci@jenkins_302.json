{
  "id" : 302,
  "expression" : "Level.INFO",
  "projectName" : "jenkinsci@jenkins",
  "commitID" : "c44fa7f4cf769257844d562353a579a198ea517a",
  "filePath" : "/core/src/main/java/hudson/util/AtomicFileWriter.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Level.INFO",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 203,
      "startColumnNumber" : 27,
      "endLineNumber" : 203,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 203,
        "startColumnNumber" : 16,
        "endLineNumber" : 203,
        "endColumnNumber" : 92
      },
      "nodeContext" : "LOGGER.log(Level.INFO,\"The target file {0} was already existing\",destPath)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 203,
        "startColumnNumber" : 16,
        "endLineNumber" : 203,
        "endColumnNumber" : 93
      },
      "nodeContext" : "LOGGER.log(Level.INFO,\"The target file {0} was already existing\",destPath);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 111,
        "startLineNumber" : 202,
        "startColumnNumber" : 44,
        "endLineNumber" : 204,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  LOGGER.log(Level.INFO,\"The target file {0} was already existing\",destPath);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 143,
        "startLineNumber" : 202,
        "startColumnNumber" : 12,
        "endLineNumber" : 204,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (destPath.toFile().exists()) {\n  LOGGER.log(Level.INFO,\"The target file {0} was already existing\",destPath);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 1506,
        "startLineNumber" : 193,
        "startColumnNumber" : 41,
        "endLineNumber" : 222,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (moveFailed instanceof AtomicMoveNotSupportedException) {\n    LOGGER.log(Level.WARNING,\"Atomic move not supported. falling back to non-atomic move.\",moveFailed);\n  }\n else {\n    LOGGER.log(Level.WARNING,\"Unable to move atomically, falling back to non-atomic move.\",moveFailed);\n  }\n  if (destPath.toFile().exists()) {\n    LOGGER.log(Level.INFO,\"The target file {0} was already existing\",destPath);\n  }\n  try {\n    Files.move(tmpPath,destPath,StandardCopyOption.REPLACE_EXISTING);\n  }\n catch (  IOException replaceFailed) {\n    replaceFailed.addSuppressed(moveFailed);\n    LOGGER.log(Level.WARNING,\"Unable to move {0} to {1}. Attempting to delete {0} and abandoning.\",new Path[]{tmpPath,destPath});\n    try {\n      Files.deleteIfExists(tmpPath);\n    }\n catch (    IOException deleteFailed) {\n      replaceFailed.addSuppressed(deleteFailed);\n      LOGGER.log(Level.WARNING,\"Unable to delete {0}, good bye then!\",tmpPath);\n      throw replaceFailed;\n    }\n    throw replaceFailed;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 111,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 1537,
        "startLineNumber" : 193,
        "startColumnNumber" : 10,
        "endLineNumber" : 222,
        "endColumnNumber" : 9
      },
      "nodeContext" : "catch (IOException moveFailed) {\n  if (moveFailed instanceof AtomicMoveNotSupportedException) {\n    LOGGER.log(Level.WARNING,\"Atomic move not supported. falling back to non-atomic move.\",moveFailed);\n  }\n else {\n    LOGGER.log(Level.WARNING,\"Unable to move atomically, falling back to non-atomic move.\",moveFailed);\n  }\n  if (destPath.toFile().exists()) {\n    LOGGER.log(Level.INFO,\"The target file {0} was already existing\",destPath);\n  }\n  try {\n    Files.move(tmpPath,destPath,StandardCopyOption.REPLACE_EXISTING);\n  }\n catch (  IOException replaceFailed) {\n    replaceFailed.addSuppressed(moveFailed);\n    LOGGER.log(Level.WARNING,\"Unable to move {0} to {1}. Attempting to delete {0} and abandoning.\",new Path[]{tmpPath,destPath});\n    try {\n      Files.deleteIfExists(tmpPath);\n    }\n catch (    IOException deleteFailed) {\n      replaceFailed.addSuppressed(deleteFailed);\n      LOGGER.log(Level.WARNING,\"Unable to delete {0}, good bye then!\",tmpPath);\n      throw replaceFailed;\n    }\n    throw replaceFailed;\n  }\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 116,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1674,
        "startLineNumber" : 190,
        "startColumnNumber" : 8,
        "endLineNumber" : 222,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  Files.move(tmpPath,destPath,StandardCopyOption.ATOMIC_MOVE);\n}\n catch (IOException moveFailed) {\n  if (moveFailed instanceof AtomicMoveNotSupportedException) {\n    LOGGER.log(Level.WARNING,\"Atomic move not supported. falling back to non-atomic move.\",moveFailed);\n  }\n else {\n    LOGGER.log(Level.WARNING,\"Unable to move atomically, falling back to non-atomic move.\",moveFailed);\n  }\n  if (destPath.toFile().exists()) {\n    LOGGER.log(Level.INFO,\"The target file {0} was already existing\",destPath);\n  }\n  try {\n    Files.move(tmpPath,destPath,StandardCopyOption.REPLACE_EXISTING);\n  }\n catch (  IOException replaceFailed) {\n    replaceFailed.addSuppressed(moveFailed);\n    LOGGER.log(Level.WARNING,\"Unable to move {0} to {1}. Attempting to delete {0} and abandoning.\",new Path[]{tmpPath,destPath});\n    try {\n      Files.deleteIfExists(tmpPath);\n    }\n catch (    IOException deleteFailed) {\n      replaceFailed.addSuppressed(deleteFailed);\n      LOGGER.log(Level.WARNING,\"Unable to delete {0}, good bye then!\",tmpPath);\n      throw replaceFailed;\n    }\n    throw replaceFailed;\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 127,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1710,
        "startLineNumber" : 188,
        "startColumnNumber" : 44,
        "endLineNumber" : 223,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  close();\n  try {\n    Files.move(tmpPath,destPath,StandardCopyOption.ATOMIC_MOVE);\n  }\n catch (  IOException moveFailed) {\n    if (moveFailed instanceof AtomicMoveNotSupportedException) {\n      LOGGER.log(Level.WARNING,\"Atomic move not supported. falling back to non-atomic move.\",moveFailed);\n    }\n else {\n      LOGGER.log(Level.WARNING,\"Unable to move atomically, falling back to non-atomic move.\",moveFailed);\n    }\n    if (destPath.toFile().exists()) {\n      LOGGER.log(Level.INFO,\"The target file {0} was already existing\",destPath);\n    }\n    try {\n      Files.move(tmpPath,destPath,StandardCopyOption.REPLACE_EXISTING);\n    }\n catch (    IOException replaceFailed) {\n      replaceFailed.addSuppressed(moveFailed);\n      LOGGER.log(Level.WARNING,\"Unable to move {0} to {1}. Attempting to delete {0} and abandoning.\",new Path[]{tmpPath,destPath});\n      try {\n        Files.deleteIfExists(tmpPath);\n      }\n catch (      IOException deleteFailed) {\n        replaceFailed.addSuppressed(deleteFailed);\n        LOGGER.log(Level.WARNING,\"Unable to delete {0}, good bye then!\",tmpPath);\n        throw replaceFailed;\n      }\n      throw replaceFailed;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 131,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1750,
        "startLineNumber" : 188,
        "startColumnNumber" : 4,
        "endLineNumber" : 223,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void commit() throws IOException {\n  close();\n  try {\n    Files.move(tmpPath,destPath,StandardCopyOption.ATOMIC_MOVE);\n  }\n catch (  IOException moveFailed) {\n    if (moveFailed instanceof AtomicMoveNotSupportedException) {\n      LOGGER.log(Level.WARNING,\"Atomic move not supported. falling back to non-atomic move.\",moveFailed);\n    }\n else {\n      LOGGER.log(Level.WARNING,\"Unable to move atomically, falling back to non-atomic move.\",moveFailed);\n    }\n    if (destPath.toFile().exists()) {\n      LOGGER.log(Level.INFO,\"The target file {0} was already existing\",destPath);\n    }\n    try {\n      Files.move(tmpPath,destPath,StandardCopyOption.REPLACE_EXISTING);\n    }\n catch (    IOException replaceFailed) {\n      replaceFailed.addSuppressed(moveFailed);\n      LOGGER.log(Level.WARNING,\"Unable to move {0} to {1}. Attempting to delete {0} and abandoning.\",new Path[]{tmpPath,destPath});\n      try {\n        Files.deleteIfExists(tmpPath);\n      }\n catch (      IOException deleteFailed) {\n        replaceFailed.addSuppressed(deleteFailed);\n        LOGGER.log(Level.WARNING,\"Unable to delete {0}, good bye then!\",tmpPath);\n        throw replaceFailed;\n      }\n      throw replaceFailed;\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 137,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 203,
        "startColumnNumber" : 16,
        "endLineNumber" : 203,
        "endColumnNumber" : 93
      },
      "nodeContext" : "LOGGER.log(Level.INFO,\"The target file {0} was already existing\",destPath);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.util.logging.Level"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 203,
    "startColumnNumber" : 27,
    "endLineNumber" : 203,
    "endColumnNumber" : 37
  } ],
  "layoutRelationDataList" : [ ]
}