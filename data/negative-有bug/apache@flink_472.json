{
  "id" : 472,
  "expression" : "\"toBytes\"",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-table/flink-table-planner/src/main/java/org/apache/flink/table/planner/functions/casting/StringToBinaryCastRule.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"toBytes\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 88,
      "startColumnNumber" : 70,
      "endLineNumber" : 88,
      "endColumnNumber" : 79
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 88,
        "startColumnNumber" : 48,
        "endLineNumber" : 88,
        "endColumnNumber" : 80
      },
      "nodeContext" : "methodCall(inputTerm,\"toBytes\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 112,
        "startLineNumber" : 87,
        "startColumnNumber" : 19,
        "endLineNumber" : 88,
        "endColumnNumber" : 81
      },
      "nodeContext" : "new CastRuleUtils.CodeWriter().assignStmt(returnVariable,methodCall(inputTerm,\"toBytes\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 144,
        "startLineNumber" : 87,
        "startColumnNumber" : 19,
        "endLineNumber" : 89,
        "endColumnNumber" : 31
      },
      "nodeContext" : "new CastRuleUtils.CodeWriter().assignStmt(returnVariable,methodCall(inputTerm,\"toBytes\")).toString()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 152,
        "startLineNumber" : 87,
        "startColumnNumber" : 12,
        "endLineNumber" : 89,
        "endColumnNumber" : 32
      },
      "nodeContext" : "return new CastRuleUtils.CodeWriter().assignStmt(returnVariable,methodCall(inputTerm,\"toBytes\")).toString();\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 176,
        "startLineNumber" : 86,
        "startColumnNumber" : 39,
        "endLineNumber" : 90,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  return new CastRuleUtils.CodeWriter().assignStmt(returnVariable,methodCall(inputTerm,\"toBytes\")).toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1878,
        "startLineNumber" : 86,
        "startColumnNumber" : 8,
        "endLineNumber" : 121,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (context.legacyBehaviour()) {\n  return new CastRuleUtils.CodeWriter().assignStmt(returnVariable,methodCall(inputTerm,\"toBytes\")).toString();\n}\n else {\n  final int targetLength=LogicalTypeChecks.getLength(targetLogicalType);\n  final String byteArrayTerm=newName(\"byteArrayTerm\");\n  final String hexStringTerm=newName(\"hexStringTerm\");\n  return new CastRuleUtils.CodeWriter().declStmt(String.class,hexStringTerm,methodCall(inputTerm,\"toString\")).declStmt(byte[].class,byteArrayTerm,staticCall(EncodingUtils.class,\"decodeHex\",hexStringTerm)).ifStmt(arrayLength(byteArrayTerm) + \" <= \" + targetLength,thenWriter -> {\n    if (couldPad(targetLogicalType,targetLength)) {\n      trimOrPadByteArray(returnVariable,targetLength,byteArrayTerm,thenWriter);\n    }\n else {\n      thenWriter.assignStmt(returnVariable,byteArrayTerm);\n    }\n  }\n,elseWriter -> trimOrPadByteArray(returnVariable,targetLength,byteArrayTerm,elseWriter)).toString();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 121,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1894,
        "startLineNumber" : 85,
        "startColumnNumber" : 43,
        "endLineNumber" : 122,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (context.legacyBehaviour()) {\n    return new CastRuleUtils.CodeWriter().assignStmt(returnVariable,methodCall(inputTerm,\"toBytes\")).toString();\n  }\n else {\n    final int targetLength=LogicalTypeChecks.getLength(targetLogicalType);\n    final String byteArrayTerm=newName(\"byteArrayTerm\");\n    final String hexStringTerm=newName(\"hexStringTerm\");\n    return new CastRuleUtils.CodeWriter().declStmt(String.class,hexStringTerm,methodCall(inputTerm,\"toString\")).declStmt(byte[].class,byteArrayTerm,staticCall(EncodingUtils.class,\"decodeHex\",hexStringTerm)).ifStmt(arrayLength(byteArrayTerm) + \" <= \" + targetLength,thenWriter -> {\n      if (couldPad(targetLogicalType,targetLength)) {\n        trimOrPadByteArray(returnVariable,targetLength,byteArrayTerm,thenWriter);\n      }\n else {\n        thenWriter.assignStmt(returnVariable,byteArrayTerm);\n      }\n    }\n,elseWriter -> trimOrPadByteArray(returnVariable,targetLength,byteArrayTerm,elseWriter)).toString();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 122,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2153,
        "startLineNumber" : 79,
        "startColumnNumber" : 4,
        "endLineNumber" : 122,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override protected String generateCodeBlockInternal(CodeGeneratorCastRule.Context context,String inputTerm,String returnVariable,LogicalType inputLogicalType,LogicalType targetLogicalType){\n  if (context.legacyBehaviour()) {\n    return new CastRuleUtils.CodeWriter().assignStmt(returnVariable,methodCall(inputTerm,\"toBytes\")).toString();\n  }\n else {\n    final int targetLength=LogicalTypeChecks.getLength(targetLogicalType);\n    final String byteArrayTerm=newName(\"byteArrayTerm\");\n    final String hexStringTerm=newName(\"hexStringTerm\");\n    return new CastRuleUtils.CodeWriter().declStmt(String.class,hexStringTerm,methodCall(inputTerm,\"toString\")).declStmt(byte[].class,byteArrayTerm,staticCall(EncodingUtils.class,\"decodeHex\",hexStringTerm)).ifStmt(arrayLength(byteArrayTerm) + \" <= \" + targetLength,thenWriter -> {\n      if (couldPad(targetLogicalType,targetLength)) {\n        trimOrPadByteArray(returnVariable,targetLength,byteArrayTerm,thenWriter);\n      }\n else {\n        thenWriter.assignStmt(returnVariable,byteArrayTerm);\n      }\n    }\n,elseWriter -> trimOrPadByteArray(returnVariable,targetLength,byteArrayTerm,elseWriter)).toString();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 151,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 88,
        "startColumnNumber" : 48,
        "endLineNumber" : 88,
        "endColumnNumber" : 80
      },
      "nodeContext" : "methodCall(inputTerm,\"toBytes\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 88,
    "startColumnNumber" : 70,
    "endLineNumber" : 88,
    "endColumnNumber" : 79
  } ],
  "layoutRelationDataList" : [ ]
}