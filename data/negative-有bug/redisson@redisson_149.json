{
  "id" : 149,
  "expression" : "RedisCommands",
  "projectName" : "redisson@redisson",
  "commitID" : "62b5e68c05b7475e1e0f98b4161aacb35d376b97",
  "filePath" : "/redisson-spring-data/redisson-spring-data-27/src/main/java/org/redisson/spring/data/connection/RedissonReactiveStreamCommands.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "RedisCommands",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 77,
      "startColumnNumber" : 98,
      "endLineNumber" : 77,
      "endColumnNumber" : 111
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 77,
        "startColumnNumber" : 98,
        "endLineNumber" : 77,
        "endColumnNumber" : 118
      },
      "nodeContext" : "RedisCommands.XCLAIM",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 77,
        "startColumnNumber" : 64,
        "endLineNumber" : 77,
        "endColumnNumber" : 137
      },
      "nodeContext" : "write(k,ByteArrayCodec.INSTANCE,RedisCommands.XCLAIM,params.toArray())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 77,
        "startColumnNumber" : 60,
        "endLineNumber" : 77,
        "endColumnNumber" : 137
      },
      "nodeContext" : "m=write(k,ByteArrayCodec.INSTANCE,RedisCommands.XCLAIM,params.toArray())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 126,
        "startLineNumber" : 77,
        "startColumnNumber" : 12,
        "endLineNumber" : 77,
        "endColumnNumber" : 138
      },
      "nodeContext" : "Mono<Map<StreamMessageId,Map<byte[],byte[]>>> m=write(k,ByteArrayCodec.INSTANCE,RedisCommands.XCLAIM,params.toArray());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 32,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 1162,
        "startLineNumber" : 61,
        "startColumnNumber" : 45,
        "endLineNumber" : 81,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Assert.notNull(command.getKey(),\"Key must not be null!\");\n  Assert.notNull(command.getGroupName(),\"Group name must not be null!\");\n  Assert.notNull(command.getNewOwner(),\"NewOwner must not be null!\");\n  Assert.notEmpty(command.getOptions().getIds(),\"Ids collection must not be empty!\");\n  List<Object> params=new ArrayList<>();\n  byte[] k=toByteArray(command.getKey());\n  params.add(k);\n  params.add(command.getGroupName());\n  params.add(command.getNewOwner());\n  params.add(Objects.requireNonNull(command.getOptions().getIdleTime()).toMillis());\n  params.addAll(Arrays.asList(command.getOptions().getIdsAsStringArray()));\n  params.add(\"JUSTID\");\n  Mono<Map<StreamMessageId,Map<byte[],byte[]>>> m=write(k,ByteArrayCodec.INSTANCE,RedisCommands.XCLAIM,params.toArray());\n  return m.map(v -> new ReactiveRedisConnection.CommandResponse<>(command,Flux.fromStream(v.entrySet().stream()).map(e -> {\n    return RecordId.of(e.getKey().toString());\n  }\n)));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 177,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 1173,
        "startLineNumber" : 61,
        "startColumnNumber" : 34,
        "endLineNumber" : 81,
        "endColumnNumber" : 9
      },
      "nodeContext" : "command -> {\n  Assert.notNull(command.getKey(),\"Key must not be null!\");\n  Assert.notNull(command.getGroupName(),\"Group name must not be null!\");\n  Assert.notNull(command.getNewOwner(),\"NewOwner must not be null!\");\n  Assert.notEmpty(command.getOptions().getIds(),\"Ids collection must not be empty!\");\n  List<Object> params=new ArrayList<>();\n  byte[] k=toByteArray(command.getKey());\n  params.add(k);\n  params.add(command.getGroupName());\n  params.add(command.getNewOwner());\n  params.add(Objects.requireNonNull(command.getOptions().getIdleTime()).toMillis());\n  params.addAll(Arrays.asList(command.getOptions().getIdsAsStringArray()));\n  params.add(\"JUSTID\");\n  Mono<Map<StreamMessageId,Map<byte[],byte[]>>> m=write(k,ByteArrayCodec.INSTANCE,RedisCommands.XCLAIM,params.toArray());\n  return m.map(v -> new ReactiveRedisConnection.CommandResponse<>(command,Flux.fromStream(v.entrySet().stream()).map(e -> {\n    return RecordId.of(e.getKey().toString());\n  }\n)));\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 180,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 126,
        "startLineNumber" : 77,
        "startColumnNumber" : 12,
        "endLineNumber" : 77,
        "endColumnNumber" : 138
      },
      "nodeContext" : "Mono<Map<StreamMessageId,Map<byte[],byte[]>>> m=write(k,ByteArrayCodec.INSTANCE,RedisCommands.XCLAIM,params.toArray());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 32,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 77,
    "startColumnNumber" : 98,
    "endLineNumber" : 77,
    "endColumnNumber" : 111
  } ],
  "layoutRelationDataList" : [ ]
}