{
  "id" : 13,
  "expression" : "\"Final normal zip resource: %s, size=%d, md5=%s\"",
  "projectName" : "Tencent@tinker",
  "commitID" : "df9e1d29420d53a650ab73569d828a22e3cfe728",
  "filePath" : "/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/decoder/ResDiffDecoder.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Final normal zip resource: %s, size=%d, md5=%s\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 48,
      "startLineNumber" : 361,
      "startColumnNumber" : 17,
      "endLineNumber" : 361,
      "endColumnNumber" : 65
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 361,
        "startColumnNumber" : 8,
        "endLineNumber" : 361,
        "endColumnNumber" : 124
      },
      "nodeContext" : "Logger.e(\"Final normal zip resource: %s, size=%d, md5=%s\",extractToZip.getName(),extractToZip.length(),resZipMd5)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 117,
        "startLineNumber" : 361,
        "startColumnNumber" : 8,
        "endLineNumber" : 361,
        "endColumnNumber" : 125
      },
      "nodeContext" : "Logger.e(\"Final normal zip resource: %s, size=%d, md5=%s\",extractToZip.getName(),extractToZip.length(),resZipMd5);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5456,
        "startLineNumber" : 292,
        "startColumnNumber" : 75,
        "endLineNumber" : 401,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (addedSet.isEmpty() && modifiedSet.isEmpty() && largeModifiedSet.isEmpty()) {\n    return;\n  }\n  if (!config.mResRawPattern.contains(TypedValue.RES_ARSC)) {\n    throw new TinkerPatchException(\"resource must contain resources.arsc pattern\");\n  }\n  if (!config.mResRawPattern.contains(TypedValue.RES_MANIFEST)) {\n    throw new TinkerPatchException(\"resource must contain AndroidManifest.xml pattern\");\n  }\n  if (config.mUsingGradle) {\n    final boolean ignoreWarning=config.mIgnoreWarning;\n    final boolean resourceArscChanged=modifiedSet.contains(TypedValue.RES_ARSC) || largeModifiedSet.contains(TypedValue.RES_ARSC);\n    if (resourceArscChanged && !config.mUseApplyResource) {\n      if (ignoreWarning) {\n        Logger.e(\"Warning:ignoreWarning is true, but resources.arsc is changed, you should use applyResourceMapping mode to build the new apk, otherwise, it may be crash at some times\");\n      }\n else {\n        Logger.e(\"Warning:ignoreWarning is false, but resources.arsc is changed, you should use applyResourceMapping mode to build the new apk, otherwise, it may be crash at some times\");\n        throw new TinkerPatchException(String.format(\"ignoreWarning is false, but resources.arsc is changed, you should use applyResourceMapping mode to build the new apk, otherwise, it may be crash at some times\"));\n      }\n    }\n  }\n  deletedSet.addAll(getDeletedResource(config.mTempUnzipOldDir,config.mTempUnzipNewDir));\n  addedSet.remove(TypedValue.RES_MANIFEST);\n  deletedSet.remove(TypedValue.RES_MANIFEST);\n  modifiedSet.remove(TypedValue.RES_MANIFEST);\n  largeModifiedSet.remove(TypedValue.RES_MANIFEST);\n  removeIgnoreChangeFile(modifiedSet);\n  removeIgnoreChangeFile(deletedSet);\n  removeIgnoreChangeFile(addedSet);\n  removeIgnoreChangeFile(largeModifiedSet);\n  checkIfSpecificResWasAnimRes(addedSet);\n  checkIfSpecificResWasAnimRes(modifiedSet);\n  checkIfSpecificResWasAnimRes(largeModifiedSet);\n  addAssetsFileForTestResource();\n  File tempResZip=new File(config.mOutFolder + File.separator + TEMP_RES_ZIP);\n  final File tempResFiles=config.mTempResultDir;\n  FileOperation.zipInputDir(tempResFiles,tempResZip,null);\n  File extractToZip=new File(config.mOutFolder + File.separator + TypedValue.RES_OUT);\n  String resZipMd5=Utils.genResOutputFile(extractToZip,tempResZip,config,addedSet,modifiedSet,deletedSet,largeModifiedSet,largeModifiedMap);\n  Logger.e(\"Final normal zip resource: %s, size=%d, md5=%s\",extractToZip.getName(),extractToZip.length(),resZipMd5);\n  logWriter.writeLineToInfoFile(String.format(\"Final normal zip resource: %s, size=%d, md5=%s\",extractToZip.getName(),extractToZip.length(),resZipMd5));\n  FileOperation.deleteFile(tempResZip);\n  String arscBaseCrc=FileOperation.getZipEntryCrc(config.mOldApkFile,TypedValue.RES_ARSC);\n  String arscMd5=FileOperation.getZipEntryMd5(extractToZip,TypedValue.RES_ARSC);\n  if (arscBaseCrc == null || arscMd5 == null) {\n    throw new TinkerPatchException(\"can't find resources.arsc's base crc or md5\");\n  }\n  String resourceMeta=Utils.getResourceMeta(arscBaseCrc,arscMd5);\n  writeMetaFile(resourceMeta);\n  String patternMeta=TypedValue.PATTERN_TITLE;\n  HashSet<String> patterns=new HashSet<>(config.mResRawPattern);\n  patterns.remove(TypedValue.RES_MANIFEST);\n  writeMetaFile(patternMeta + patterns.size());\n  for (  String item : patterns) {\n    writeMetaFile(item);\n  }\n  getCompressMethodFromApk();\n  writeMetaFile(largeModifiedSet,TypedValue.LARGE_MOD);\n  writeMetaFile(modifiedSet,TypedValue.MOD);\n  writeMetaFile(addedSet,TypedValue.ADD);\n  writeMetaFile(deletedSet,TypedValue.DEL);\n  writeMetaFile(storedSet,TypedValue.STORED);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 417,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5541,
        "startLineNumber" : 291,
        "startColumnNumber" : 4,
        "endLineNumber" : 401,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void onAllPatchesEnd() throws IOException, TinkerPatchException {\n  if (addedSet.isEmpty() && modifiedSet.isEmpty() && largeModifiedSet.isEmpty()) {\n    return;\n  }\n  if (!config.mResRawPattern.contains(TypedValue.RES_ARSC)) {\n    throw new TinkerPatchException(\"resource must contain resources.arsc pattern\");\n  }\n  if (!config.mResRawPattern.contains(TypedValue.RES_MANIFEST)) {\n    throw new TinkerPatchException(\"resource must contain AndroidManifest.xml pattern\");\n  }\n  if (config.mUsingGradle) {\n    final boolean ignoreWarning=config.mIgnoreWarning;\n    final boolean resourceArscChanged=modifiedSet.contains(TypedValue.RES_ARSC) || largeModifiedSet.contains(TypedValue.RES_ARSC);\n    if (resourceArscChanged && !config.mUseApplyResource) {\n      if (ignoreWarning) {\n        Logger.e(\"Warning:ignoreWarning is true, but resources.arsc is changed, you should use applyResourceMapping mode to build the new apk, otherwise, it may be crash at some times\");\n      }\n else {\n        Logger.e(\"Warning:ignoreWarning is false, but resources.arsc is changed, you should use applyResourceMapping mode to build the new apk, otherwise, it may be crash at some times\");\n        throw new TinkerPatchException(String.format(\"ignoreWarning is false, but resources.arsc is changed, you should use applyResourceMapping mode to build the new apk, otherwise, it may be crash at some times\"));\n      }\n    }\n  }\n  deletedSet.addAll(getDeletedResource(config.mTempUnzipOldDir,config.mTempUnzipNewDir));\n  addedSet.remove(TypedValue.RES_MANIFEST);\n  deletedSet.remove(TypedValue.RES_MANIFEST);\n  modifiedSet.remove(TypedValue.RES_MANIFEST);\n  largeModifiedSet.remove(TypedValue.RES_MANIFEST);\n  removeIgnoreChangeFile(modifiedSet);\n  removeIgnoreChangeFile(deletedSet);\n  removeIgnoreChangeFile(addedSet);\n  removeIgnoreChangeFile(largeModifiedSet);\n  checkIfSpecificResWasAnimRes(addedSet);\n  checkIfSpecificResWasAnimRes(modifiedSet);\n  checkIfSpecificResWasAnimRes(largeModifiedSet);\n  addAssetsFileForTestResource();\n  File tempResZip=new File(config.mOutFolder + File.separator + TEMP_RES_ZIP);\n  final File tempResFiles=config.mTempResultDir;\n  FileOperation.zipInputDir(tempResFiles,tempResZip,null);\n  File extractToZip=new File(config.mOutFolder + File.separator + TypedValue.RES_OUT);\n  String resZipMd5=Utils.genResOutputFile(extractToZip,tempResZip,config,addedSet,modifiedSet,deletedSet,largeModifiedSet,largeModifiedMap);\n  Logger.e(\"Final normal zip resource: %s, size=%d, md5=%s\",extractToZip.getName(),extractToZip.length(),resZipMd5);\n  logWriter.writeLineToInfoFile(String.format(\"Final normal zip resource: %s, size=%d, md5=%s\",extractToZip.getName(),extractToZip.length(),resZipMd5));\n  FileOperation.deleteFile(tempResZip);\n  String arscBaseCrc=FileOperation.getZipEntryCrc(config.mOldApkFile,TypedValue.RES_ARSC);\n  String arscMd5=FileOperation.getZipEntryMd5(extractToZip,TypedValue.RES_ARSC);\n  if (arscBaseCrc == null || arscMd5 == null) {\n    throw new TinkerPatchException(\"can't find resources.arsc's base crc or md5\");\n  }\n  String resourceMeta=Utils.getResourceMeta(arscBaseCrc,arscMd5);\n  writeMetaFile(resourceMeta);\n  String patternMeta=TypedValue.PATTERN_TITLE;\n  HashSet<String> patterns=new HashSet<>(config.mResRawPattern);\n  patterns.remove(TypedValue.RES_MANIFEST);\n  writeMetaFile(patternMeta + patterns.size());\n  for (  String item : patterns) {\n    writeMetaFile(item);\n  }\n  getCompressMethodFromApk();\n  writeMetaFile(largeModifiedSet,TypedValue.LARGE_MOD);\n  writeMetaFile(modifiedSet,TypedValue.MOD);\n  writeMetaFile(addedSet,TypedValue.ADD);\n  writeMetaFile(deletedSet,TypedValue.DEL);\n  writeMetaFile(storedSet,TypedValue.STORED);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 427,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 117,
        "startLineNumber" : 361,
        "startColumnNumber" : 8,
        "endLineNumber" : 361,
        "endColumnNumber" : 125
      },
      "nodeContext" : "Logger.e(\"Final normal zip resource: %s, size=%d, md5=%s\",extractToZip.getName(),extractToZip.length(),resZipMd5);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 7,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"Final normal zip resource: %s, size=%d, md5=%s\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 48,
      "startLineNumber" : 363,
      "startColumnNumber" : 26,
      "endLineNumber" : 363,
      "endColumnNumber" : 74
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 121,
        "startLineNumber" : 363,
        "startColumnNumber" : 12,
        "endLineNumber" : 363,
        "endColumnNumber" : 133
      },
      "nodeContext" : "String.format(\"Final normal zip resource: %s, size=%d, md5=%s\",extractToZip.getName(),extractToZip.length(),resZipMd5)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 174,
        "startLineNumber" : 362,
        "startColumnNumber" : 8,
        "endLineNumber" : 364,
        "endColumnNumber" : 9
      },
      "nodeContext" : "logWriter.writeLineToInfoFile(String.format(\"Final normal zip resource: %s, size=%d, md5=%s\",extractToZip.getName(),extractToZip.length(),resZipMd5))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 175,
        "startLineNumber" : 362,
        "startColumnNumber" : 8,
        "endLineNumber" : 364,
        "endColumnNumber" : 10
      },
      "nodeContext" : "logWriter.writeLineToInfoFile(String.format(\"Final normal zip resource: %s, size=%d, md5=%s\",extractToZip.getName(),extractToZip.length(),resZipMd5));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5456,
        "startLineNumber" : 292,
        "startColumnNumber" : 75,
        "endLineNumber" : 401,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (addedSet.isEmpty() && modifiedSet.isEmpty() && largeModifiedSet.isEmpty()) {\n    return;\n  }\n  if (!config.mResRawPattern.contains(TypedValue.RES_ARSC)) {\n    throw new TinkerPatchException(\"resource must contain resources.arsc pattern\");\n  }\n  if (!config.mResRawPattern.contains(TypedValue.RES_MANIFEST)) {\n    throw new TinkerPatchException(\"resource must contain AndroidManifest.xml pattern\");\n  }\n  if (config.mUsingGradle) {\n    final boolean ignoreWarning=config.mIgnoreWarning;\n    final boolean resourceArscChanged=modifiedSet.contains(TypedValue.RES_ARSC) || largeModifiedSet.contains(TypedValue.RES_ARSC);\n    if (resourceArscChanged && !config.mUseApplyResource) {\n      if (ignoreWarning) {\n        Logger.e(\"Warning:ignoreWarning is true, but resources.arsc is changed, you should use applyResourceMapping mode to build the new apk, otherwise, it may be crash at some times\");\n      }\n else {\n        Logger.e(\"Warning:ignoreWarning is false, but resources.arsc is changed, you should use applyResourceMapping mode to build the new apk, otherwise, it may be crash at some times\");\n        throw new TinkerPatchException(String.format(\"ignoreWarning is false, but resources.arsc is changed, you should use applyResourceMapping mode to build the new apk, otherwise, it may be crash at some times\"));\n      }\n    }\n  }\n  deletedSet.addAll(getDeletedResource(config.mTempUnzipOldDir,config.mTempUnzipNewDir));\n  addedSet.remove(TypedValue.RES_MANIFEST);\n  deletedSet.remove(TypedValue.RES_MANIFEST);\n  modifiedSet.remove(TypedValue.RES_MANIFEST);\n  largeModifiedSet.remove(TypedValue.RES_MANIFEST);\n  removeIgnoreChangeFile(modifiedSet);\n  removeIgnoreChangeFile(deletedSet);\n  removeIgnoreChangeFile(addedSet);\n  removeIgnoreChangeFile(largeModifiedSet);\n  checkIfSpecificResWasAnimRes(addedSet);\n  checkIfSpecificResWasAnimRes(modifiedSet);\n  checkIfSpecificResWasAnimRes(largeModifiedSet);\n  addAssetsFileForTestResource();\n  File tempResZip=new File(config.mOutFolder + File.separator + TEMP_RES_ZIP);\n  final File tempResFiles=config.mTempResultDir;\n  FileOperation.zipInputDir(tempResFiles,tempResZip,null);\n  File extractToZip=new File(config.mOutFolder + File.separator + TypedValue.RES_OUT);\n  String resZipMd5=Utils.genResOutputFile(extractToZip,tempResZip,config,addedSet,modifiedSet,deletedSet,largeModifiedSet,largeModifiedMap);\n  Logger.e(\"Final normal zip resource: %s, size=%d, md5=%s\",extractToZip.getName(),extractToZip.length(),resZipMd5);\n  logWriter.writeLineToInfoFile(String.format(\"Final normal zip resource: %s, size=%d, md5=%s\",extractToZip.getName(),extractToZip.length(),resZipMd5));\n  FileOperation.deleteFile(tempResZip);\n  String arscBaseCrc=FileOperation.getZipEntryCrc(config.mOldApkFile,TypedValue.RES_ARSC);\n  String arscMd5=FileOperation.getZipEntryMd5(extractToZip,TypedValue.RES_ARSC);\n  if (arscBaseCrc == null || arscMd5 == null) {\n    throw new TinkerPatchException(\"can't find resources.arsc's base crc or md5\");\n  }\n  String resourceMeta=Utils.getResourceMeta(arscBaseCrc,arscMd5);\n  writeMetaFile(resourceMeta);\n  String patternMeta=TypedValue.PATTERN_TITLE;\n  HashSet<String> patterns=new HashSet<>(config.mResRawPattern);\n  patterns.remove(TypedValue.RES_MANIFEST);\n  writeMetaFile(patternMeta + patterns.size());\n  for (  String item : patterns) {\n    writeMetaFile(item);\n  }\n  getCompressMethodFromApk();\n  writeMetaFile(largeModifiedSet,TypedValue.LARGE_MOD);\n  writeMetaFile(modifiedSet,TypedValue.MOD);\n  writeMetaFile(addedSet,TypedValue.ADD);\n  writeMetaFile(deletedSet,TypedValue.DEL);\n  writeMetaFile(storedSet,TypedValue.STORED);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 417,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5541,
        "startLineNumber" : 291,
        "startColumnNumber" : 4,
        "endLineNumber" : 401,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void onAllPatchesEnd() throws IOException, TinkerPatchException {\n  if (addedSet.isEmpty() && modifiedSet.isEmpty() && largeModifiedSet.isEmpty()) {\n    return;\n  }\n  if (!config.mResRawPattern.contains(TypedValue.RES_ARSC)) {\n    throw new TinkerPatchException(\"resource must contain resources.arsc pattern\");\n  }\n  if (!config.mResRawPattern.contains(TypedValue.RES_MANIFEST)) {\n    throw new TinkerPatchException(\"resource must contain AndroidManifest.xml pattern\");\n  }\n  if (config.mUsingGradle) {\n    final boolean ignoreWarning=config.mIgnoreWarning;\n    final boolean resourceArscChanged=modifiedSet.contains(TypedValue.RES_ARSC) || largeModifiedSet.contains(TypedValue.RES_ARSC);\n    if (resourceArscChanged && !config.mUseApplyResource) {\n      if (ignoreWarning) {\n        Logger.e(\"Warning:ignoreWarning is true, but resources.arsc is changed, you should use applyResourceMapping mode to build the new apk, otherwise, it may be crash at some times\");\n      }\n else {\n        Logger.e(\"Warning:ignoreWarning is false, but resources.arsc is changed, you should use applyResourceMapping mode to build the new apk, otherwise, it may be crash at some times\");\n        throw new TinkerPatchException(String.format(\"ignoreWarning is false, but resources.arsc is changed, you should use applyResourceMapping mode to build the new apk, otherwise, it may be crash at some times\"));\n      }\n    }\n  }\n  deletedSet.addAll(getDeletedResource(config.mTempUnzipOldDir,config.mTempUnzipNewDir));\n  addedSet.remove(TypedValue.RES_MANIFEST);\n  deletedSet.remove(TypedValue.RES_MANIFEST);\n  modifiedSet.remove(TypedValue.RES_MANIFEST);\n  largeModifiedSet.remove(TypedValue.RES_MANIFEST);\n  removeIgnoreChangeFile(modifiedSet);\n  removeIgnoreChangeFile(deletedSet);\n  removeIgnoreChangeFile(addedSet);\n  removeIgnoreChangeFile(largeModifiedSet);\n  checkIfSpecificResWasAnimRes(addedSet);\n  checkIfSpecificResWasAnimRes(modifiedSet);\n  checkIfSpecificResWasAnimRes(largeModifiedSet);\n  addAssetsFileForTestResource();\n  File tempResZip=new File(config.mOutFolder + File.separator + TEMP_RES_ZIP);\n  final File tempResFiles=config.mTempResultDir;\n  FileOperation.zipInputDir(tempResFiles,tempResZip,null);\n  File extractToZip=new File(config.mOutFolder + File.separator + TypedValue.RES_OUT);\n  String resZipMd5=Utils.genResOutputFile(extractToZip,tempResZip,config,addedSet,modifiedSet,deletedSet,largeModifiedSet,largeModifiedMap);\n  Logger.e(\"Final normal zip resource: %s, size=%d, md5=%s\",extractToZip.getName(),extractToZip.length(),resZipMd5);\n  logWriter.writeLineToInfoFile(String.format(\"Final normal zip resource: %s, size=%d, md5=%s\",extractToZip.getName(),extractToZip.length(),resZipMd5));\n  FileOperation.deleteFile(tempResZip);\n  String arscBaseCrc=FileOperation.getZipEntryCrc(config.mOldApkFile,TypedValue.RES_ARSC);\n  String arscMd5=FileOperation.getZipEntryMd5(extractToZip,TypedValue.RES_ARSC);\n  if (arscBaseCrc == null || arscMd5 == null) {\n    throw new TinkerPatchException(\"can't find resources.arsc's base crc or md5\");\n  }\n  String resourceMeta=Utils.getResourceMeta(arscBaseCrc,arscMd5);\n  writeMetaFile(resourceMeta);\n  String patternMeta=TypedValue.PATTERN_TITLE;\n  HashSet<String> patterns=new HashSet<>(config.mResRawPattern);\n  patterns.remove(TypedValue.RES_MANIFEST);\n  writeMetaFile(patternMeta + patterns.size());\n  for (  String item : patterns) {\n    writeMetaFile(item);\n  }\n  getCompressMethodFromApk();\n  writeMetaFile(largeModifiedSet,TypedValue.LARGE_MOD);\n  writeMetaFile(modifiedSet,TypedValue.MOD);\n  writeMetaFile(addedSet,TypedValue.ADD);\n  writeMetaFile(deletedSet,TypedValue.DEL);\n  writeMetaFile(storedSet,TypedValue.STORED);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 427,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 121,
        "startLineNumber" : 363,
        "startColumnNumber" : 12,
        "endLineNumber" : 363,
        "endColumnNumber" : 133
      },
      "nodeContext" : "String.format(\"Final normal zip resource: %s, size=%d, md5=%s\",extractToZip.getName(),extractToZip.length(),resZipMd5)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 3
    },
    "tokenLength" : 7,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 48,
    "startLineNumber" : 361,
    "startColumnNumber" : 17,
    "endLineNumber" : 361,
    "endColumnNumber" : 65
  }, {
    "charLength" : 48,
    "startLineNumber" : 363,
    "startColumnNumber" : 26,
    "endLineNumber" : 363,
    "endColumnNumber" : 74
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}