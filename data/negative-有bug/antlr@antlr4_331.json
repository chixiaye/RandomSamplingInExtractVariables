{
  "id" : 331,
  "expression" : "i",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/tool-testsuite/test/org/antlr/v4/test/tool/JavaUnicodeInputStream.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "i",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 78,
      "startColumnNumber" : 19,
      "endLineNumber" : 78,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 78,
        "startColumnNumber" : 19,
        "endLineNumber" : 78,
        "endColumnNumber" : 43
      },
      "nodeContext" : "i < 6 + indirectionLevel",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 78,
        "startColumnNumber" : 3,
        "endLineNumber" : 80,
        "endColumnNumber" : 4
      },
      "nodeContext" : "for (int i=0; i < 6 + indirectionLevel; i++) {\n  source.consume();\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 206,
        "startLineNumber" : 76,
        "startColumnNumber" : 7,
        "endLineNumber" : 84,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int indirectionLevel=escapeIndirectionLevels.get(escapeListIndex);\n  for (int i=0; i < 6 + indirectionLevel; i++) {\n    source.consume();\n  }\n  escapeListIndex++;\n  slashCount=0;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 34,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 355,
        "startLineNumber" : 72,
        "startColumnNumber" : 2,
        "endLineNumber" : 84,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (escapeListIndex >= escapeIndexes.size() || escapeIndexes.get(escapeListIndex) != index()) {\n  source.consume();\n  slashCount++;\n}\n else {\n  int indirectionLevel=escapeIndirectionLevels.get(escapeListIndex);\n  for (int i=0; i < 6 + indirectionLevel; i++) {\n    source.consume();\n  }\n  escapeListIndex++;\n  slashCount=0;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 56,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 640,
        "startLineNumber" : 60,
        "startColumnNumber" : 23,
        "endLineNumber" : 88,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (la1 != '\\\\') {\n    source.consume();\n    la1=source.LA(1);\n    range=Math.max(range,source.index());\n    slashCount=0;\n    return;\n  }\n  this.LA(1);\n  if (escapeListIndex >= escapeIndexes.size() || escapeIndexes.get(escapeListIndex) != index()) {\n    source.consume();\n    slashCount++;\n  }\n else {\n    int indirectionLevel=escapeIndirectionLevels.get(escapeListIndex);\n    for (int i=0; i < 6 + indirectionLevel; i++) {\n      source.consume();\n    }\n    escapeListIndex++;\n    slashCount=0;\n  }\n  la1=source.LA(1);\n  assert range >= index();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 105,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 674,
        "startLineNumber" : 59,
        "startColumnNumber" : 1,
        "endLineNumber" : 88,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public void consume(){\n  if (la1 != '\\\\') {\n    source.consume();\n    la1=source.LA(1);\n    range=Math.max(range,source.index());\n    slashCount=0;\n    return;\n  }\n  this.LA(1);\n  if (escapeListIndex >= escapeIndexes.size() || escapeIndexes.get(escapeListIndex) != index()) {\n    source.consume();\n    slashCount++;\n  }\n else {\n    int indirectionLevel=escapeIndirectionLevels.get(escapeListIndex);\n    for (int i=0; i < 6 + indirectionLevel; i++) {\n      source.consume();\n    }\n    escapeListIndex++;\n    slashCount=0;\n  }\n  la1=source.LA(1);\n  assert range >= index();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 111,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 78,
        "startColumnNumber" : 19,
        "endLineNumber" : 78,
        "endColumnNumber" : 43
      },
      "nodeContext" : "i < 6 + indirectionLevel",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 78,
    "startColumnNumber" : 19,
    "endLineNumber" : 78,
    "endColumnNumber" : 20
  } ],
  "layoutRelationDataList" : [ ]
}