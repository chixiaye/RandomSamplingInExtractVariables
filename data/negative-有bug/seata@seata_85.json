{
  "id" : 85,
  "expression" : "CONFIG.getBoolean(\"transport.heartbeat\",false)",
  "projectName" : "seata@seata",
  "commitID" : "42d41623178ab076b11b27a0f049ac3ed7f1a9dc",
  "filePath" : "/core/src/main/java/io/seata/core/rpc/netty/NettyBaseConfig.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "CONFIG.getBoolean(\"transport.heartbeat\",false)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 47,
      "startLineNumber" : 164,
      "startColumnNumber" : 34,
      "endLineNumber" : 164,
      "endColumnNumber" : 81
    },
    "astNodeNumber" : 5,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 164,
        "startColumnNumber" : 16,
        "endLineNumber" : 164,
        "endColumnNumber" : 81
      },
      "nodeContext" : "enableHeartbeat=CONFIG.getBoolean(\"transport.heartbeat\",false)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 164,
        "startColumnNumber" : 8,
        "endLineNumber" : 164,
        "endColumnNumber" : 82
      },
      "nodeContext" : "boolean enableHeartbeat=CONFIG.getBoolean(\"transport.heartbeat\",false);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Initializer,body]",
      "nodePosition" : {
        "charLength" : 3449,
        "startLineNumber" : 110,
        "startColumnNumber" : 11,
        "endLineNumber" : 171,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TRANSPORT_PROTOCOL_TYPE=TransportProtocolType.valueOf(CONFIG.getConfig(\"transport.type\",TransportProtocolType.TCP.name()));\n  String workerThreadSize=CONFIG.getConfig(\"transport.thread-factory.worker-thread-size\");\n  if (StringUtils.isNotBlank(workerThreadSize) && StringUtils.isNumeric(workerThreadSize)) {\n    WORKER_THREAD_SIZE=Integer.parseInt(workerThreadSize);\n  }\n else   if (null != WorkThreadMode.getModeByName(workerThreadSize)) {\n    WORKER_THREAD_SIZE=WorkThreadMode.getModeByName(workerThreadSize).getValue();\n  }\n else {\n    WORKER_THREAD_SIZE=WorkThreadMode.Default.getValue();\n  }\n  TRANSPORT_SERVER_TYPE=TransportServerType.valueOf(CONFIG.getConfig(\"transport.server\",TransportServerType.NIO.name()));\nswitch (TRANSPORT_SERVER_TYPE) {\ncase NIO:    if (TRANSPORT_PROTOCOL_TYPE == TransportProtocolType.TCP) {\n      SERVER_CHANNEL_CLAZZ=NioServerSocketChannel.class;\n      CLIENT_CHANNEL_CLAZZ=NioSocketChannel.class;\n    }\n else {\n      raiseUnsupportedTransportError();\n      SERVER_CHANNEL_CLAZZ=null;\n      CLIENT_CHANNEL_CLAZZ=null;\n    }\n  break;\ncase NATIVE:if (PlatformDependent.isWindows()) {\n  throw new IllegalArgumentException(\"no native supporting for Windows.\");\n}\n else if (PlatformDependent.isOsx()) {\n  if (TRANSPORT_PROTOCOL_TYPE == TransportProtocolType.TCP) {\n    SERVER_CHANNEL_CLAZZ=KQueueServerSocketChannel.class;\n    CLIENT_CHANNEL_CLAZZ=KQueueSocketChannel.class;\n  }\n else   if (TRANSPORT_PROTOCOL_TYPE == TransportProtocolType.UNIX_DOMAIN_SOCKET) {\n    SERVER_CHANNEL_CLAZZ=KQueueServerDomainSocketChannel.class;\n    CLIENT_CHANNEL_CLAZZ=KQueueDomainSocketChannel.class;\n  }\n else {\n    raiseUnsupportedTransportError();\n    SERVER_CHANNEL_CLAZZ=null;\n    CLIENT_CHANNEL_CLAZZ=null;\n  }\n}\n else {\n  if (TRANSPORT_PROTOCOL_TYPE == TransportProtocolType.TCP) {\n    SERVER_CHANNEL_CLAZZ=EpollServerSocketChannel.class;\n    CLIENT_CHANNEL_CLAZZ=EpollSocketChannel.class;\n  }\n else   if (TRANSPORT_PROTOCOL_TYPE == TransportProtocolType.UNIX_DOMAIN_SOCKET) {\n    SERVER_CHANNEL_CLAZZ=EpollServerDomainSocketChannel.class;\n    CLIENT_CHANNEL_CLAZZ=EpollDomainSocketChannel.class;\n  }\n else {\n    raiseUnsupportedTransportError();\n    SERVER_CHANNEL_CLAZZ=null;\n    CLIENT_CHANNEL_CLAZZ=null;\n  }\n}\nbreak;\ndefault:throw new IllegalArgumentException(\"unsupported.\");\n}\nboolean enableHeartbeat=CONFIG.getBoolean(\"transport.heartbeat\",false);\nif (enableHeartbeat) {\nMAX_WRITE_IDLE_SECONDS=DEFAULT_WRITE_IDLE_SECONDS;\n}\n else {\nMAX_WRITE_IDLE_SECONDS=0;\n}\nMAX_READ_IDLE_SECONDS=MAX_WRITE_IDLE_SECONDS * READIDLE_BASE_WRITEIDLE;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 272,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3456,
        "startLineNumber" : 110,
        "startColumnNumber" : 4,
        "endLineNumber" : 171,
        "endColumnNumber" : 5
      },
      "nodeContext" : "static {\n  TRANSPORT_PROTOCOL_TYPE=TransportProtocolType.valueOf(CONFIG.getConfig(\"transport.type\",TransportProtocolType.TCP.name()));\n  String workerThreadSize=CONFIG.getConfig(\"transport.thread-factory.worker-thread-size\");\n  if (StringUtils.isNotBlank(workerThreadSize) && StringUtils.isNumeric(workerThreadSize)) {\n    WORKER_THREAD_SIZE=Integer.parseInt(workerThreadSize);\n  }\n else   if (null != WorkThreadMode.getModeByName(workerThreadSize)) {\n    WORKER_THREAD_SIZE=WorkThreadMode.getModeByName(workerThreadSize).getValue();\n  }\n else {\n    WORKER_THREAD_SIZE=WorkThreadMode.Default.getValue();\n  }\n  TRANSPORT_SERVER_TYPE=TransportServerType.valueOf(CONFIG.getConfig(\"transport.server\",TransportServerType.NIO.name()));\nswitch (TRANSPORT_SERVER_TYPE) {\ncase NIO:    if (TRANSPORT_PROTOCOL_TYPE == TransportProtocolType.TCP) {\n      SERVER_CHANNEL_CLAZZ=NioServerSocketChannel.class;\n      CLIENT_CHANNEL_CLAZZ=NioSocketChannel.class;\n    }\n else {\n      raiseUnsupportedTransportError();\n      SERVER_CHANNEL_CLAZZ=null;\n      CLIENT_CHANNEL_CLAZZ=null;\n    }\n  break;\ncase NATIVE:if (PlatformDependent.isWindows()) {\n  throw new IllegalArgumentException(\"no native supporting for Windows.\");\n}\n else if (PlatformDependent.isOsx()) {\n  if (TRANSPORT_PROTOCOL_TYPE == TransportProtocolType.TCP) {\n    SERVER_CHANNEL_CLAZZ=KQueueServerSocketChannel.class;\n    CLIENT_CHANNEL_CLAZZ=KQueueSocketChannel.class;\n  }\n else   if (TRANSPORT_PROTOCOL_TYPE == TransportProtocolType.UNIX_DOMAIN_SOCKET) {\n    SERVER_CHANNEL_CLAZZ=KQueueServerDomainSocketChannel.class;\n    CLIENT_CHANNEL_CLAZZ=KQueueDomainSocketChannel.class;\n  }\n else {\n    raiseUnsupportedTransportError();\n    SERVER_CHANNEL_CLAZZ=null;\n    CLIENT_CHANNEL_CLAZZ=null;\n  }\n}\n else {\n  if (TRANSPORT_PROTOCOL_TYPE == TransportProtocolType.TCP) {\n    SERVER_CHANNEL_CLAZZ=EpollServerSocketChannel.class;\n    CLIENT_CHANNEL_CLAZZ=EpollSocketChannel.class;\n  }\n else   if (TRANSPORT_PROTOCOL_TYPE == TransportProtocolType.UNIX_DOMAIN_SOCKET) {\n    SERVER_CHANNEL_CLAZZ=EpollServerDomainSocketChannel.class;\n    CLIENT_CHANNEL_CLAZZ=EpollDomainSocketChannel.class;\n  }\n else {\n    raiseUnsupportedTransportError();\n    SERVER_CHANNEL_CLAZZ=null;\n    CLIENT_CHANNEL_CLAZZ=null;\n  }\n}\nbreak;\ndefault:throw new IllegalArgumentException(\"unsupported.\");\n}\nboolean enableHeartbeat=CONFIG.getBoolean(\"transport.heartbeat\",false);\nif (enableHeartbeat) {\nMAX_WRITE_IDLE_SECONDS=DEFAULT_WRITE_IDLE_SECONDS;\n}\n else {\nMAX_WRITE_IDLE_SECONDS=0;\n}\nMAX_READ_IDLE_SECONDS=MAX_WRITE_IDLE_SECONDS * READIDLE_BASE_WRITEIDLE;\n}\n",
      "nodeType" : "Initializer",
      "astNodeNumber" : 274,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 164,
        "startColumnNumber" : 8,
        "endLineNumber" : 164,
        "endColumnNumber" : 82
      },
      "nodeContext" : "boolean enableHeartbeat=CONFIG.getBoolean(\"transport.heartbeat\",false);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 5,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 47,
    "startLineNumber" : 164,
    "startColumnNumber" : 34,
    "endLineNumber" : 164,
    "endColumnNumber" : 81
  } ],
  "layoutRelationDataList" : [ ]
}