{
  "id" : 68,
  "expression" : "trustWriteMemOption",
  "projectName" : "NationalSecurityAgency@ghidra",
  "commitID" : "a54d0e28d652c48502551a88278808549aed5f98",
  "filePath" : "/Ghidra/Processors/x86/src/main/java/ghidra/app/plugin/core/analysis/X86Analyzer.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "trustWriteMemOption",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 51,
      "startColumnNumber" : 66,
      "endLineNumber" : 51,
      "endColumnNumber" : 85
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 1297,
        "startLineNumber" : 51,
        "startColumnNumber" : 26,
        "endLineNumber" : 87,
        "endColumnNumber" : 3
      },
      "nodeContext" : "new ConstantPropagationContextEvaluator(trustWriteMemOption){\n  @Override public boolean evaluateContext(  VarnodeContext context,  Instruction instr){\n    String mnemonic=instr.getMnemonicString();\n    if (mnemonic.equals(\"LEA\")) {\n      Register reg=instr.getRegister(0);\n      if (reg != null) {\n        BigInteger val=context.getValue(reg,false);\n        if (val != null) {\n          long lval=val.longValue();\n          Address refAddr=instr.getMinAddress().getNewAddress(lval);\n          if ((lval > 4096 || lval < 0) && program.getMemory().contains(refAddr)) {\n            if (instr.getOperandReferences(1).length == 0) {\n              instr.addOperandReference(1,refAddr,RefType.DATA,SourceType.ANALYSIS);\n            }\n          }\n        }\n      }\n    }\n    return false;\n  }\n  @Override public boolean evaluateReference(  VarnodeContext context,  Instruction instr,  int pcodeop,  Address address,  int size,  RefType refType){\n    if (refType.isFlow() && !instr.getMemory().contains(address) && !address.isExternalAddress()) {\n      return false;\n    }\n    return super.evaluateReference(context,instr,pcodeop,address,size,refType);\n  }\n}\n",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 179,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 1304,
        "startLineNumber" : 51,
        "startColumnNumber" : 19,
        "endLineNumber" : 87,
        "endColumnNumber" : 3
      },
      "nodeContext" : "eval=new ConstantPropagationContextEvaluator(trustWriteMemOption){\n  @Override public boolean evaluateContext(  VarnodeContext context,  Instruction instr){\n    String mnemonic=instr.getMnemonicString();\n    if (mnemonic.equals(\"LEA\")) {\n      Register reg=instr.getRegister(0);\n      if (reg != null) {\n        BigInteger val=context.getValue(reg,false);\n        if (val != null) {\n          long lval=val.longValue();\n          Address refAddr=instr.getMinAddress().getNewAddress(lval);\n          if ((lval > 4096 || lval < 0) && program.getMemory().contains(refAddr)) {\n            if (instr.getOperandReferences(1).length == 0) {\n              instr.addOperandReference(1,refAddr,RefType.DATA,SourceType.ANALYSIS);\n            }\n          }\n        }\n      }\n    }\n    return false;\n  }\n  @Override public boolean evaluateReference(  VarnodeContext context,  Instruction instr,  int pcodeop,  Address address,  int size,  RefType refType){\n    if (refType.isFlow() && !instr.getMemory().contains(address) && !address.isExternalAddress()) {\n      return false;\n    }\n    return super.evaluateReference(context,instr,pcodeop,address,size,refType);\n  }\n}\n",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 181,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1322,
        "startLineNumber" : 51,
        "startColumnNumber" : 2,
        "endLineNumber" : 87,
        "endColumnNumber" : 4
      },
      "nodeContext" : "ContextEvaluator eval=new ConstantPropagationContextEvaluator(trustWriteMemOption){\n  @Override public boolean evaluateContext(  VarnodeContext context,  Instruction instr){\n    String mnemonic=instr.getMnemonicString();\n    if (mnemonic.equals(\"LEA\")) {\n      Register reg=instr.getRegister(0);\n      if (reg != null) {\n        BigInteger val=context.getValue(reg,false);\n        if (val != null) {\n          long lval=val.longValue();\n          Address refAddr=instr.getMinAddress().getNewAddress(lval);\n          if ((lval > 4096 || lval < 0) && program.getMemory().contains(refAddr)) {\n            if (instr.getOperandReferences(1).length == 0) {\n              instr.addOperandReference(1,refAddr,RefType.DATA,SourceType.ANALYSIS);\n            }\n          }\n        }\n      }\n    }\n    return false;\n  }\n  @Override public boolean evaluateReference(  VarnodeContext context,  Instruction instr,  int pcodeop,  Address address,  int size,  RefType refType){\n    if (refType.isFlow() && !instr.getMemory().contains(address) && !address.isExternalAddress()) {\n      return false;\n    }\n    return super.evaluateReference(context,instr,pcodeop,address,size,refType);\n  }\n}\n;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 184,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1558,
        "startLineNumber" : 47,
        "startColumnNumber" : 29,
        "endLineNumber" : 92,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  ContextEvaluator eval=new ConstantPropagationContextEvaluator(trustWriteMemOption){\n    @Override public boolean evaluateContext(    VarnodeContext context,    Instruction instr){\n      String mnemonic=instr.getMnemonicString();\n      if (mnemonic.equals(\"LEA\")) {\n        Register reg=instr.getRegister(0);\n        if (reg != null) {\n          BigInteger val=context.getValue(reg,false);\n          if (val != null) {\n            long lval=val.longValue();\n            Address refAddr=instr.getMinAddress().getNewAddress(lval);\n            if ((lval > 4096 || lval < 0) && program.getMemory().contains(refAddr)) {\n              if (instr.getOperandReferences(1).length == 0) {\n                instr.addOperandReference(1,refAddr,RefType.DATA,SourceType.ANALYSIS);\n              }\n            }\n          }\n        }\n      }\n      return false;\n    }\n    @Override public boolean evaluateReference(    VarnodeContext context,    Instruction instr,    int pcodeop,    Address address,    int size,    RefType refType){\n      if (refType.isFlow() && !instr.getMemory().contains(address) && !address.isExternalAddress()) {\n        return false;\n      }\n      return super.evaluateReference(context,instr,pcodeop,address,size,refType);\n    }\n  }\n;\n  AddressSet resultSet=symEval.flowConstants(flowStart,flowSet,eval,true,monitor);\n  return resultSet;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 200,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1763,
        "startLineNumber" : 45,
        "startColumnNumber" : 1,
        "endLineNumber" : 92,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public AddressSetView flowConstants(final Program program,Address flowStart,AddressSetView flowSet,final SymbolicPropogator symEval,final TaskMonitor monitor) throws CancelledException {\n  ContextEvaluator eval=new ConstantPropagationContextEvaluator(trustWriteMemOption){\n    @Override public boolean evaluateContext(    VarnodeContext context,    Instruction instr){\n      String mnemonic=instr.getMnemonicString();\n      if (mnemonic.equals(\"LEA\")) {\n        Register reg=instr.getRegister(0);\n        if (reg != null) {\n          BigInteger val=context.getValue(reg,false);\n          if (val != null) {\n            long lval=val.longValue();\n            Address refAddr=instr.getMinAddress().getNewAddress(lval);\n            if ((lval > 4096 || lval < 0) && program.getMemory().contains(refAddr)) {\n              if (instr.getOperandReferences(1).length == 0) {\n                instr.addOperandReference(1,refAddr,RefType.DATA,SourceType.ANALYSIS);\n              }\n            }\n          }\n        }\n      }\n      return false;\n    }\n    @Override public boolean evaluateReference(    VarnodeContext context,    Instruction instr,    int pcodeop,    Address address,    int size,    RefType refType){\n      if (refType.isFlow() && !instr.getMemory().contains(address) && !address.isExternalAddress()) {\n        return false;\n      }\n      return super.evaluateReference(context,instr,pcodeop,address,size,refType);\n    }\n  }\n;\n  AddressSet resultSet=symEval.flowConstants(flowStart,flowSet,eval,true,monitor);\n  return resultSet;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 232,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 1297,
        "startLineNumber" : 51,
        "startColumnNumber" : 26,
        "endLineNumber" : 87,
        "endColumnNumber" : 3
      },
      "nodeContext" : "new ConstantPropagationContextEvaluator(trustWriteMemOption){\n  @Override public boolean evaluateContext(  VarnodeContext context,  Instruction instr){\n    String mnemonic=instr.getMnemonicString();\n    if (mnemonic.equals(\"LEA\")) {\n      Register reg=instr.getRegister(0);\n      if (reg != null) {\n        BigInteger val=context.getValue(reg,false);\n        if (val != null) {\n          long lval=val.longValue();\n          Address refAddr=instr.getMinAddress().getNewAddress(lval);\n          if ((lval > 4096 || lval < 0) && program.getMemory().contains(refAddr)) {\n            if (instr.getOperandReferences(1).length == 0) {\n              instr.addOperandReference(1,refAddr,RefType.DATA,SourceType.ANALYSIS);\n            }\n          }\n        }\n      }\n    }\n    return false;\n  }\n  @Override public boolean evaluateReference(  VarnodeContext context,  Instruction instr,  int pcodeop,  Address address,  int size,  RefType refType){\n    if (refType.isFlow() && !instr.getMemory().contains(address) && !address.isExternalAddress()) {\n      return false;\n    }\n    return super.evaluateReference(context,instr,pcodeop,address,size,refType);\n  }\n}\n",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 179,
      "astHeight" : 18
    },
    "tokenLength" : 1,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 51,
    "startColumnNumber" : 66,
    "endLineNumber" : 51,
    "endColumnNumber" : 85
  } ],
  "layoutRelationDataList" : [ ]
}