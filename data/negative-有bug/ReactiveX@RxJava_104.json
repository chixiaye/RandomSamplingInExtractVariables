{
  "id" : 104,
  "expression" : "new BiFunction<Integer,Integer,Integer>(){\n  @Override public Integer apply(  Integer a,  Integer b){\n    return a + b;\n  }\n}\n",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/test/java/io/reactivex/internal/operators/flowable/FlowableZipTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new BiFunction<Integer,Integer,Integer>(){\n  @Override public Integer apply(  Integer a,  Integer b){\n    return a + b;\n  }\n}\n",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 223,
      "startLineNumber" : 729,
      "startColumnNumber" : 34,
      "endLineNumber" : 734,
      "endColumnNumber" : 17
    },
    "astNodeNumber" : 31,
    "astHeight" : 7,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 290,
        "startLineNumber" : 728,
        "startColumnNumber" : 8,
        "endLineNumber" : 734,
        "endColumnNumber" : 18
      },
      "nodeContext" : "Flowable.zip(Flowable.just(1),Flowable.just(1),new BiFunction<Integer,Integer,Integer>(){\n  @Override public Integer apply(  Integer a,  Integer b){\n    return a + b;\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 42,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 721,
        "startLineNumber" : 728,
        "startColumnNumber" : 8,
        "endLineNumber" : 751,
        "endColumnNumber" : 10
      },
      "nodeContext" : "Flowable.zip(Flowable.just(1),Flowable.just(1),new BiFunction<Integer,Integer,Integer>(){\n  @Override public Integer apply(  Integer a,  Integer b){\n    return a + b;\n  }\n}\n).subscribe(new DefaultObserver<Integer>(){\n  @Override public void onComplete(){\n    observer.onComplete();\n  }\n  @Override public void onError(  Throwable e){\n    observer.onError(e);\n  }\n  @Override public void onNext(  Integer args){\n    observer.onNext(args);\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 94,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 722,
        "startLineNumber" : 728,
        "startColumnNumber" : 8,
        "endLineNumber" : 751,
        "endColumnNumber" : 11
      },
      "nodeContext" : "Flowable.zip(Flowable.just(1),Flowable.just(1),new BiFunction<Integer,Integer,Integer>(){\n  @Override public Integer apply(  Integer a,  Integer b){\n    return a + b;\n  }\n}\n).subscribe(new DefaultObserver<Integer>(){\n  @Override public void onComplete(){\n    observer.onComplete();\n  }\n  @Override public void onError(  Throwable e){\n    observer.onError(e);\n  }\n  @Override public void onNext(  Integer args){\n    observer.onNext(args);\n  }\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 95,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1608,
        "startLineNumber" : 716,
        "startColumnNumber" : 48,
        "endLineNumber" : 757,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final Subscriber<Integer> observer=TestHelper.mockSubscriber();\n  Flowable.zip(Flowable.just(1),Flowable.just(1),new BiFunction<Integer,Integer,Integer>(){\n    @Override public Integer apply(    Integer a,    Integer b){\n      return a + b;\n    }\n  }\n).subscribe(new DefaultObserver<Integer>(){\n    @Override public void onComplete(){\n      observer.onComplete();\n    }\n    @Override public void onError(    Throwable e){\n      observer.onError(e);\n    }\n    @Override public void onNext(    Integer args){\n      observer.onNext(args);\n    }\n  }\n);\n  InOrder inOrder=inOrder(observer);\n  inOrder.verify(observer,times(1)).onNext(2);\n  inOrder.verify(observer,times(1)).onComplete();\n  inOrder.verifyNoMoreInteractions();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 141,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1663,
        "startLineNumber" : 715,
        "startColumnNumber" : 4,
        "endLineNumber" : 757,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testStartWithOnCompletedTwice(){\n  final Subscriber<Integer> observer=TestHelper.mockSubscriber();\n  Flowable.zip(Flowable.just(1),Flowable.just(1),new BiFunction<Integer,Integer,Integer>(){\n    @Override public Integer apply(    Integer a,    Integer b){\n      return a + b;\n    }\n  }\n).subscribe(new DefaultObserver<Integer>(){\n    @Override public void onComplete(){\n      observer.onComplete();\n    }\n    @Override public void onError(    Throwable e){\n      observer.onError(e);\n    }\n    @Override public void onNext(    Integer args){\n      observer.onNext(args);\n    }\n  }\n);\n  InOrder inOrder=inOrder(observer);\n  inOrder.verify(observer,times(1)).onNext(2);\n  inOrder.verify(observer,times(1)).onComplete();\n  inOrder.verifyNoMoreInteractions();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 147,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 290,
        "startLineNumber" : 728,
        "startColumnNumber" : 8,
        "endLineNumber" : 734,
        "endColumnNumber" : 18
      },
      "nodeContext" : "Flowable.zip(Flowable.just(1),Flowable.just(1),new BiFunction<Integer,Integer,Integer>(){\n  @Override public Integer apply(  Integer a,  Integer b){\n    return a + b;\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 42,
      "astHeight" : 8
    },
    "tokenLength" : 13,
    "type" : ""
  } ],
  "positionList" : [ {
    "charLength" : 223,
    "startLineNumber" : 729,
    "startColumnNumber" : 34,
    "endLineNumber" : 734,
    "endColumnNumber" : 17
  } ],
  "layoutRelationDataList" : [ ]
}