{
  "id" : 302,
  "expression" : "\"fileA\"",
  "projectName" : "GoogleContainerTools@jib",
  "commitID" : "a0742fd277b5490a0965dba4443f5864f1250199",
  "filePath" : "/jib-core/src/test/java/com/google/cloud/tools/jib/docker/ImageToTarballTranslatorTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"fileA\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 53,
      "startColumnNumber" : 49,
      "endLineNumber" : 53,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 53,
        "startColumnNumber" : 27,
        "endLineNumber" : 53,
        "endColumnNumber" : 57
      },
      "nodeContext" : "Resources.getResource(\"fileA\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 53,
        "startColumnNumber" : 27,
        "endLineNumber" : 53,
        "endColumnNumber" : 65
      },
      "nodeContext" : "Resources.getResource(\"fileA\").toURI()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 53,
        "startColumnNumber" : 17,
        "endLineNumber" : 53,
        "endColumnNumber" : 66
      },
      "nodeContext" : "Paths.get(Resources.getResource(\"fileA\").toURI())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 53,
        "startColumnNumber" : 9,
        "endLineNumber" : 53,
        "endColumnNumber" : 66
      },
      "nodeContext" : "fileA=Paths.get(Resources.getResource(\"fileA\").toURI())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 53,
        "endColumnNumber" : 67
      },
      "nodeContext" : "Path fileA=Paths.get(Resources.getResource(\"fileA\").toURI());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2828,
        "startLineNumber" : 52,
        "startColumnNumber" : 58,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Path fileA=Paths.get(Resources.getResource(\"fileA\").toURI());\n  Path fileB=Paths.get(Resources.getResource(\"fileB\").toURI());\n  DescriptorDigest fakeDigestA=DescriptorDigest.fromHash(\"5994471abb01112afcc18159f6cc74b4f511b99806da59b3caf5a9c173cacfc5\");\n  DescriptorDigest fakeDigestB=DescriptorDigest.fromHash(\"5994471abb01112afcc18159f6cc74b4f511b99806da59b3caf5a9c173cacfc6\");\n  Image<CachedLayer> testImage=Image.<CachedLayer>builder().addLayer(new CachedLayer(fileA,new BlobDescriptor(fakeDigestA),fakeDigestA)).addLayer(new CachedLayer(fileB,new BlobDescriptor(fakeDigestB),fakeDigestB)).build();\n  Blob tarballBlob=new ImageToTarballTranslator(testImage).toTarballBlob(ImageReference.parse(\"my/image:tag\"));\n  try (ByteArrayInputStream tarballBytesStream=new ByteArrayInputStream(Blobs.writeToByteArray(tarballBlob));TarArchiveInputStream tarArchiveInputStream=new TarArchiveInputStream(tarballBytesStream)){\n    TarArchiveEntry headerFileALayer=tarArchiveInputStream.getNextTarEntry();\n    Assert.assertEquals(\"fileA\",headerFileALayer.getName());\n    String fileAString=CharStreams.toString(new InputStreamReader(tarArchiveInputStream,StandardCharsets.UTF_8));\n    Assert.assertEquals(Blobs.writeToString(Blobs.from(fileA)),fileAString);\n    TarArchiveEntry headerFileBLayer=tarArchiveInputStream.getNextTarEntry();\n    Assert.assertEquals(\"fileB\",headerFileBLayer.getName());\n    String fileBString=CharStreams.toString(new InputStreamReader(tarArchiveInputStream,StandardCharsets.UTF_8));\n    Assert.assertEquals(Blobs.writeToString(Blobs.from(fileB)),fileBString);\n    TarArchiveEntry headerContainerConfiguration=tarArchiveInputStream.getNextTarEntry();\n    Assert.assertEquals(\"config.json\",headerContainerConfiguration.getName());\n    String containerConfigJson=CharStreams.toString(new InputStreamReader(tarArchiveInputStream,StandardCharsets.UTF_8));\n    JsonTemplateMapper.readJson(containerConfigJson,ContainerConfigurationTemplate.class);\n    TarArchiveEntry headerManifest=tarArchiveInputStream.getNextTarEntry();\n    Assert.assertEquals(\"manifest.json\",headerManifest.getName());\n    String manifestJson=CharStreams.toString(new InputStreamReader(tarArchiveInputStream,StandardCharsets.UTF_8));\n    JsonTemplateMapper.readListOfJson(manifestJson,DockerLoadManifestTemplate.class);\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 286,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3004,
        "startLineNumber" : 49,
        "startColumnNumber" : 2,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testToTarballBlob() throws InvalidImageReferenceException, IOException, URISyntaxException, LayerPropertyNotFoundException, DigestException {\n  Path fileA=Paths.get(Resources.getResource(\"fileA\").toURI());\n  Path fileB=Paths.get(Resources.getResource(\"fileB\").toURI());\n  DescriptorDigest fakeDigestA=DescriptorDigest.fromHash(\"5994471abb01112afcc18159f6cc74b4f511b99806da59b3caf5a9c173cacfc5\");\n  DescriptorDigest fakeDigestB=DescriptorDigest.fromHash(\"5994471abb01112afcc18159f6cc74b4f511b99806da59b3caf5a9c173cacfc6\");\n  Image<CachedLayer> testImage=Image.<CachedLayer>builder().addLayer(new CachedLayer(fileA,new BlobDescriptor(fakeDigestA),fakeDigestA)).addLayer(new CachedLayer(fileB,new BlobDescriptor(fakeDigestB),fakeDigestB)).build();\n  Blob tarballBlob=new ImageToTarballTranslator(testImage).toTarballBlob(ImageReference.parse(\"my/image:tag\"));\n  try (ByteArrayInputStream tarballBytesStream=new ByteArrayInputStream(Blobs.writeToByteArray(tarballBlob));TarArchiveInputStream tarArchiveInputStream=new TarArchiveInputStream(tarballBytesStream)){\n    TarArchiveEntry headerFileALayer=tarArchiveInputStream.getNextTarEntry();\n    Assert.assertEquals(\"fileA\",headerFileALayer.getName());\n    String fileAString=CharStreams.toString(new InputStreamReader(tarArchiveInputStream,StandardCharsets.UTF_8));\n    Assert.assertEquals(Blobs.writeToString(Blobs.from(fileA)),fileAString);\n    TarArchiveEntry headerFileBLayer=tarArchiveInputStream.getNextTarEntry();\n    Assert.assertEquals(\"fileB\",headerFileBLayer.getName());\n    String fileBString=CharStreams.toString(new InputStreamReader(tarArchiveInputStream,StandardCharsets.UTF_8));\n    Assert.assertEquals(Blobs.writeToString(Blobs.from(fileB)),fileBString);\n    TarArchiveEntry headerContainerConfiguration=tarArchiveInputStream.getNextTarEntry();\n    Assert.assertEquals(\"config.json\",headerContainerConfiguration.getName());\n    String containerConfigJson=CharStreams.toString(new InputStreamReader(tarArchiveInputStream,StandardCharsets.UTF_8));\n    JsonTemplateMapper.readJson(containerConfigJson,ContainerConfigurationTemplate.class);\n    TarArchiveEntry headerManifest=tarArchiveInputStream.getNextTarEntry();\n    Assert.assertEquals(\"manifest.json\",headerManifest.getName());\n    String manifestJson=CharStreams.toString(new InputStreamReader(tarArchiveInputStream,StandardCharsets.UTF_8));\n    JsonTemplateMapper.readListOfJson(manifestJson,DockerLoadManifestTemplate.class);\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 302,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 53,
        "endColumnNumber" : 67
      },
      "nodeContext" : "Path fileA=Paths.get(Resources.getResource(\"fileA\").toURI());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"fileA\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 78,
      "startColumnNumber" : 26,
      "endLineNumber" : 78,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 78,
        "startColumnNumber" : 6,
        "endLineNumber" : 78,
        "endColumnNumber" : 62
      },
      "nodeContext" : "Assert.assertEquals(\"fileA\",headerFileALayer.getName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 78,
        "startColumnNumber" : 6,
        "endLineNumber" : 78,
        "endColumnNumber" : 63
      },
      "nodeContext" : "Assert.assertEquals(\"fileA\",headerFileALayer.getName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1739,
        "startLineNumber" : 75,
        "startColumnNumber" : 59,
        "endLineNumber" : 107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TarArchiveEntry headerFileALayer=tarArchiveInputStream.getNextTarEntry();\n  Assert.assertEquals(\"fileA\",headerFileALayer.getName());\n  String fileAString=CharStreams.toString(new InputStreamReader(tarArchiveInputStream,StandardCharsets.UTF_8));\n  Assert.assertEquals(Blobs.writeToString(Blobs.from(fileA)),fileAString);\n  TarArchiveEntry headerFileBLayer=tarArchiveInputStream.getNextTarEntry();\n  Assert.assertEquals(\"fileB\",headerFileBLayer.getName());\n  String fileBString=CharStreams.toString(new InputStreamReader(tarArchiveInputStream,StandardCharsets.UTF_8));\n  Assert.assertEquals(Blobs.writeToString(Blobs.from(fileB)),fileBString);\n  TarArchiveEntry headerContainerConfiguration=tarArchiveInputStream.getNextTarEntry();\n  Assert.assertEquals(\"config.json\",headerContainerConfiguration.getName());\n  String containerConfigJson=CharStreams.toString(new InputStreamReader(tarArchiveInputStream,StandardCharsets.UTF_8));\n  JsonTemplateMapper.readJson(containerConfigJson,ContainerConfigurationTemplate.class);\n  TarArchiveEntry headerManifest=tarArchiveInputStream.getNextTarEntry();\n  Assert.assertEquals(\"manifest.json\",headerManifest.getName());\n  String manifestJson=CharStreams.toString(new InputStreamReader(tarArchiveInputStream,StandardCharsets.UTF_8));\n  JsonTemplateMapper.readListOfJson(manifestJson,DockerLoadManifestTemplate.class);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 165,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1974,
        "startLineNumber" : 72,
        "startColumnNumber" : 4,
        "endLineNumber" : 107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (ByteArrayInputStream tarballBytesStream=new ByteArrayInputStream(Blobs.writeToByteArray(tarballBlob));TarArchiveInputStream tarArchiveInputStream=new TarArchiveInputStream(tarballBytesStream)){\n  TarArchiveEntry headerFileALayer=tarArchiveInputStream.getNextTarEntry();\n  Assert.assertEquals(\"fileA\",headerFileALayer.getName());\n  String fileAString=CharStreams.toString(new InputStreamReader(tarArchiveInputStream,StandardCharsets.UTF_8));\n  Assert.assertEquals(Blobs.writeToString(Blobs.from(fileA)),fileAString);\n  TarArchiveEntry headerFileBLayer=tarArchiveInputStream.getNextTarEntry();\n  Assert.assertEquals(\"fileB\",headerFileBLayer.getName());\n  String fileBString=CharStreams.toString(new InputStreamReader(tarArchiveInputStream,StandardCharsets.UTF_8));\n  Assert.assertEquals(Blobs.writeToString(Blobs.from(fileB)),fileBString);\n  TarArchiveEntry headerContainerConfiguration=tarArchiveInputStream.getNextTarEntry();\n  Assert.assertEquals(\"config.json\",headerContainerConfiguration.getName());\n  String containerConfigJson=CharStreams.toString(new InputStreamReader(tarArchiveInputStream,StandardCharsets.UTF_8));\n  JsonTemplateMapper.readJson(containerConfigJson,ContainerConfigurationTemplate.class);\n  TarArchiveEntry headerManifest=tarArchiveInputStream.getNextTarEntry();\n  Assert.assertEquals(\"manifest.json\",headerManifest.getName());\n  String manifestJson=CharStreams.toString(new InputStreamReader(tarArchiveInputStream,StandardCharsets.UTF_8));\n  JsonTemplateMapper.readListOfJson(manifestJson,DockerLoadManifestTemplate.class);\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 187,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2828,
        "startLineNumber" : 52,
        "startColumnNumber" : 58,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Path fileA=Paths.get(Resources.getResource(\"fileA\").toURI());\n  Path fileB=Paths.get(Resources.getResource(\"fileB\").toURI());\n  DescriptorDigest fakeDigestA=DescriptorDigest.fromHash(\"5994471abb01112afcc18159f6cc74b4f511b99806da59b3caf5a9c173cacfc5\");\n  DescriptorDigest fakeDigestB=DescriptorDigest.fromHash(\"5994471abb01112afcc18159f6cc74b4f511b99806da59b3caf5a9c173cacfc6\");\n  Image<CachedLayer> testImage=Image.<CachedLayer>builder().addLayer(new CachedLayer(fileA,new BlobDescriptor(fakeDigestA),fakeDigestA)).addLayer(new CachedLayer(fileB,new BlobDescriptor(fakeDigestB),fakeDigestB)).build();\n  Blob tarballBlob=new ImageToTarballTranslator(testImage).toTarballBlob(ImageReference.parse(\"my/image:tag\"));\n  try (ByteArrayInputStream tarballBytesStream=new ByteArrayInputStream(Blobs.writeToByteArray(tarballBlob));TarArchiveInputStream tarArchiveInputStream=new TarArchiveInputStream(tarballBytesStream)){\n    TarArchiveEntry headerFileALayer=tarArchiveInputStream.getNextTarEntry();\n    Assert.assertEquals(\"fileA\",headerFileALayer.getName());\n    String fileAString=CharStreams.toString(new InputStreamReader(tarArchiveInputStream,StandardCharsets.UTF_8));\n    Assert.assertEquals(Blobs.writeToString(Blobs.from(fileA)),fileAString);\n    TarArchiveEntry headerFileBLayer=tarArchiveInputStream.getNextTarEntry();\n    Assert.assertEquals(\"fileB\",headerFileBLayer.getName());\n    String fileBString=CharStreams.toString(new InputStreamReader(tarArchiveInputStream,StandardCharsets.UTF_8));\n    Assert.assertEquals(Blobs.writeToString(Blobs.from(fileB)),fileBString);\n    TarArchiveEntry headerContainerConfiguration=tarArchiveInputStream.getNextTarEntry();\n    Assert.assertEquals(\"config.json\",headerContainerConfiguration.getName());\n    String containerConfigJson=CharStreams.toString(new InputStreamReader(tarArchiveInputStream,StandardCharsets.UTF_8));\n    JsonTemplateMapper.readJson(containerConfigJson,ContainerConfigurationTemplate.class);\n    TarArchiveEntry headerManifest=tarArchiveInputStream.getNextTarEntry();\n    Assert.assertEquals(\"manifest.json\",headerManifest.getName());\n    String manifestJson=CharStreams.toString(new InputStreamReader(tarArchiveInputStream,StandardCharsets.UTF_8));\n    JsonTemplateMapper.readListOfJson(manifestJson,DockerLoadManifestTemplate.class);\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 286,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3004,
        "startLineNumber" : 49,
        "startColumnNumber" : 2,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testToTarballBlob() throws InvalidImageReferenceException, IOException, URISyntaxException, LayerPropertyNotFoundException, DigestException {\n  Path fileA=Paths.get(Resources.getResource(\"fileA\").toURI());\n  Path fileB=Paths.get(Resources.getResource(\"fileB\").toURI());\n  DescriptorDigest fakeDigestA=DescriptorDigest.fromHash(\"5994471abb01112afcc18159f6cc74b4f511b99806da59b3caf5a9c173cacfc5\");\n  DescriptorDigest fakeDigestB=DescriptorDigest.fromHash(\"5994471abb01112afcc18159f6cc74b4f511b99806da59b3caf5a9c173cacfc6\");\n  Image<CachedLayer> testImage=Image.<CachedLayer>builder().addLayer(new CachedLayer(fileA,new BlobDescriptor(fakeDigestA),fakeDigestA)).addLayer(new CachedLayer(fileB,new BlobDescriptor(fakeDigestB),fakeDigestB)).build();\n  Blob tarballBlob=new ImageToTarballTranslator(testImage).toTarballBlob(ImageReference.parse(\"my/image:tag\"));\n  try (ByteArrayInputStream tarballBytesStream=new ByteArrayInputStream(Blobs.writeToByteArray(tarballBlob));TarArchiveInputStream tarArchiveInputStream=new TarArchiveInputStream(tarballBytesStream)){\n    TarArchiveEntry headerFileALayer=tarArchiveInputStream.getNextTarEntry();\n    Assert.assertEquals(\"fileA\",headerFileALayer.getName());\n    String fileAString=CharStreams.toString(new InputStreamReader(tarArchiveInputStream,StandardCharsets.UTF_8));\n    Assert.assertEquals(Blobs.writeToString(Blobs.from(fileA)),fileAString);\n    TarArchiveEntry headerFileBLayer=tarArchiveInputStream.getNextTarEntry();\n    Assert.assertEquals(\"fileB\",headerFileBLayer.getName());\n    String fileBString=CharStreams.toString(new InputStreamReader(tarArchiveInputStream,StandardCharsets.UTF_8));\n    Assert.assertEquals(Blobs.writeToString(Blobs.from(fileB)),fileBString);\n    TarArchiveEntry headerContainerConfiguration=tarArchiveInputStream.getNextTarEntry();\n    Assert.assertEquals(\"config.json\",headerContainerConfiguration.getName());\n    String containerConfigJson=CharStreams.toString(new InputStreamReader(tarArchiveInputStream,StandardCharsets.UTF_8));\n    JsonTemplateMapper.readJson(containerConfigJson,ContainerConfigurationTemplate.class);\n    TarArchiveEntry headerManifest=tarArchiveInputStream.getNextTarEntry();\n    Assert.assertEquals(\"manifest.json\",headerManifest.getName());\n    String manifestJson=CharStreams.toString(new InputStreamReader(tarArchiveInputStream,StandardCharsets.UTF_8));\n    JsonTemplateMapper.readListOfJson(manifestJson,DockerLoadManifestTemplate.class);\n  }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 302,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 78,
        "startColumnNumber" : 6,
        "endLineNumber" : 78,
        "endColumnNumber" : 63
      },
      "nodeContext" : "Assert.assertEquals(\"fileA\",headerFileALayer.getName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 53,
    "startColumnNumber" : 49,
    "endLineNumber" : 53,
    "endColumnNumber" : 56
  }, {
    "charLength" : 7,
    "startLineNumber" : 78,
    "startColumnNumber" : 26,
    "endLineNumber" : 78,
    "endColumnNumber" : 33
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}