{
  "id" : 129,
  "expression" : "new IllegalArgumentException(\"n should probably be >= 0\")",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/linearalgebra/LinearRecurrenceSolver.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new IllegalArgumentException(\"n should probably be >= 0\")",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 57,
      "startLineNumber" : 107,
      "startColumnNumber" : 21,
      "endLineNumber" : 107,
      "endColumnNumber" : 78
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 107,
        "startColumnNumber" : 15,
        "endLineNumber" : 107,
        "endColumnNumber" : 79
      },
      "nodeContext" : "throw new IllegalArgumentException(\"n should probably be >= 0\");\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 107,
        "startColumnNumber" : 4,
        "endLineNumber" : 107,
        "endColumnNumber" : 79
      },
      "nodeContext" : "if (n < 0) throw new IllegalArgumentException(\"n should probably be >= 0\");\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 872,
        "startLineNumber" : 105,
        "startColumnNumber" : 77,
        "endLineNumber" : 131,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (n < 0)   throw new IllegalArgumentException(\"n should probably be >= 0\");\n  long[] initialValues=computeInitialValues(coefficients,f_0,k);\n  if (n < initialValues.length)   return initialValues[(int)n];\n  final int size=initialValues.length + 1;\n  long[][] T=createTransformationMatrix(coefficients,size);\n  long[][] result=matrixPower(T,n);\n  long ans=0L;\n  for (int j=0; j < size; j++) {\n    if (j == size - 1) {\n      ans=ans + result[0][j] * k;\n    }\n else {\n      ans=ans + result[0][j] * initialValues[j];\n    }\n  }\n  return ans;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 118,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2040,
        "startLineNumber" : 88,
        "startColumnNumber" : 2,
        "endLineNumber" : 131,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Solve for the nth term in a linear recurrence of the following form f(n) = k + c_1*f(n-1) + c_2*f(n-2) + ... + c_m*f(n-m) in O(m^3log(n)) time\n * @param coefficients - contains the coefficients for the recurrence, so [c_1, c_2, c_3, ... ,c_m]\n * @param f_0 - The value of the function at f(0). This is usually 1 or k.\n * @param k - The constant k added to the recurrence\n * @param n - The nth term of the recurrence you wish to find<p>NOTE1: The numbers produced by this method can get VERY LARGE quickly so watch out for overflow because there is a very high probability it will occur. <p>NOTE2: Make sure the dimension of coefficients array is no bigger than it needs to be. For instance do not add any additional zero coefficient terms at the end of the coefficients array as this is throw off the recurrence. <p>EXAMPLE: If your recurrence is f(n) = 2 + 3*f(n-1) + 5f(n-4) with f(0) = 2 and you want to find f(100) call the function like: solveRecurrence([3, 0, 0, 5], 2, 2, 100)\n */\nstatic long solveRecurrence(long[] coefficients,long f_0,long k,long n){\n  if (n < 0)   throw new IllegalArgumentException(\"n should probably be >= 0\");\n  long[] initialValues=computeInitialValues(coefficients,f_0,k);\n  if (n < initialValues.length)   return initialValues[(int)n];\n  final int size=initialValues.length + 1;\n  long[][] T=createTransformationMatrix(coefficients,size);\n  long[][] result=matrixPower(T,n);\n  long ans=0L;\n  for (int j=0; j < size; j++) {\n    if (j == size - 1) {\n      ans=ans + result[0][j] * k;\n    }\n else {\n      ans=ans + result[0][j] * initialValues[j];\n    }\n  }\n  return ans;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 137,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 107,
        "startColumnNumber" : 4,
        "endLineNumber" : 107,
        "endColumnNumber" : 79
      },
      "nodeContext" : "if (n < 0) throw new IllegalArgumentException(\"n should probably be >= 0\");\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 7,
    "type" : "java.lang.IllegalArgumentException"
  } ],
  "positionList" : [ {
    "charLength" : 57,
    "startLineNumber" : 107,
    "startColumnNumber" : 21,
    "endLineNumber" : 107,
    "endColumnNumber" : 78
  } ],
  "layoutRelationDataList" : [ ]
}