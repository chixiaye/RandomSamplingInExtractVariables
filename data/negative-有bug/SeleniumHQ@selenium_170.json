{
  "id" : 170,
  "expression" : "jsonInput.read(Object.class)",
  "projectName" : "SeleniumHQ@selenium",
  "commitID" : "c146621f39dbec94114835aa1f6af6a0e1fa4cd0",
  "filePath" : "/java/client/src/org/openqa/selenium/json/InstantCoercer.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "jsonInput.read(Object.class)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 28,
      "startLineNumber" : 55,
      "startColumnNumber" : 52,
      "endLineNumber" : 55,
      "endColumnNumber" : 80
    },
    "astNodeNumber" : 6,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 55,
        "startColumnNumber" : 30,
        "endLineNumber" : 55,
        "endColumnNumber" : 80
      },
      "nodeContext" : "\"Unable to parse: \" + jsonInput.read(Object.class)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 55,
        "startColumnNumber" : 12,
        "endLineNumber" : 55,
        "endColumnNumber" : 81
      },
      "nodeContext" : "new JsonException(\"Unable to parse: \" + jsonInput.read(Object.class))",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 55,
        "startColumnNumber" : 6,
        "endLineNumber" : 55,
        "endColumnNumber" : 82
      },
      "nodeContext" : "throw new JsonException(\"Unable to parse: \" + jsonInput.read(Object.class));\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 12,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 769,
        "startLineNumber" : 36,
        "startColumnNumber" : 35,
        "endLineNumber" : 56,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  JsonType token=jsonInput.peek();\n  if (JsonType.NUMBER.equals(token)) {\n    return Instant.ofEpochMilli(jsonInput.nextNumber().longValue());\n  }\n else   if (JsonType.STRING.equals(token)) {\n    String raw=jsonInput.nextString();\n    try {\n      TemporalAccessor parsed=DateTimeFormatter.ISO_INSTANT.parse(raw);\n      return Instant.from(parsed);\n    }\n catch (    DateTimeParseException ignored) {\n      try {\n        return Instant.ofEpochMilli(new BigDecimal(raw).longValue());\n      }\n catch (      NumberFormatException e) {\n        throw new JsonException(raw + \" does not look like an Instant\");\n      }\n    }\n  }\n  throw new JsonException(\"Unable to parse: \" + jsonInput.read(Object.class));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 103,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 793,
        "startLineNumber" : 36,
        "startColumnNumber" : 11,
        "endLineNumber" : 56,
        "endColumnNumber" : 5
      },
      "nodeContext" : "(jsonInput,setting) -> {\n  JsonType token=jsonInput.peek();\n  if (JsonType.NUMBER.equals(token)) {\n    return Instant.ofEpochMilli(jsonInput.nextNumber().longValue());\n  }\n else   if (JsonType.STRING.equals(token)) {\n    String raw=jsonInput.nextString();\n    try {\n      TemporalAccessor parsed=DateTimeFormatter.ISO_INSTANT.parse(raw);\n      return Instant.from(parsed);\n    }\n catch (    DateTimeParseException ignored) {\n      try {\n        return Instant.ofEpochMilli(new BigDecimal(raw).longValue());\n      }\n catch (      NumberFormatException e) {\n        throw new JsonException(raw + \" does not look like an Instant\");\n      }\n    }\n  }\n  throw new JsonException(\"Unable to parse: \" + jsonInput.read(Object.class));\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 108,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 55,
        "startColumnNumber" : 6,
        "endLineNumber" : 55,
        "endColumnNumber" : 82
      },
      "nodeContext" : "throw new JsonException(\"Unable to parse: \" + jsonInput.read(Object.class));\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 12,
      "astHeight" : 7
    },
    "tokenLength" : 3,
    "type" : "java.lang.Object"
  } ],
  "positionList" : [ {
    "charLength" : 28,
    "startLineNumber" : 55,
    "startColumnNumber" : 52,
    "endLineNumber" : 55,
    "endColumnNumber" : 80
  } ],
  "layoutRelationDataList" : [ ]
}