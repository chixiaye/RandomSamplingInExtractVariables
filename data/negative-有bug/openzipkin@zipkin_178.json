{
  "id" : 178,
  "expression" : "TestObjects.TRACE.size()",
  "projectName" : "openzipkin@zipkin",
  "commitID" : "f02a993656f506277ca83737ddf494ed45fde4b3",
  "filePath" : "/zipkin-server/src/test/java/zipkin/server/brave/LocalSpanCollectorTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "TestObjects.TRACE.size()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 24,
      "startLineNumber" : 72,
      "startColumnNumber" : 47,
      "endLineNumber" : 72,
      "endColumnNumber" : 71
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 72,
        "startColumnNumber" : 4,
        "endLineNumber" : 72,
        "endColumnNumber" : 72
      },
      "nodeContext" : "assertThat(localMetrics.spans()).isEqualTo(TestObjects.TRACE.size())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 72,
        "startColumnNumber" : 4,
        "endLineNumber" : 72,
        "endColumnNumber" : 73
      },
      "nodeContext" : "assertThat(localMetrics.spans()).isEqualTo(TestObjects.TRACE.size());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 514,
        "startLineNumber" : 61,
        "startColumnNumber" : 72,
        "endLineNumber" : 73,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  when(storage.asyncSpanConsumer(ALWAYS_SAMPLE,metrics)).thenReturn((spans,callback) -> callback.onSuccess(null));\n  byte[] bytes=Codec.THRIFT.writeSpans(TestObjects.TRACE);\n  try (LocalSpanCollector c=new LocalSpanCollector(storage,1,ALWAYS_SAMPLE,metrics)){\n    c.sendSpans(bytes);\n  }\n   assertThat(localMetrics.messages()).isEqualTo(1);\n  assertThat(localMetrics.bytes()).isEqualTo(bytes.length);\n  assertThat(localMetrics.spans()).isEqualTo(TestObjects.TRACE.size());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 86,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 592,
        "startLineNumber" : 60,
        "startColumnNumber" : 2,
        "endLineNumber" : 73,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void sendSpans_incrementsMetricsOnSuccess() throws IOException {\n  when(storage.asyncSpanConsumer(ALWAYS_SAMPLE,metrics)).thenReturn((spans,callback) -> callback.onSuccess(null));\n  byte[] bytes=Codec.THRIFT.writeSpans(TestObjects.TRACE);\n  try (LocalSpanCollector c=new LocalSpanCollector(storage,1,ALWAYS_SAMPLE,metrics)){\n    c.sendSpans(bytes);\n  }\n   assertThat(localMetrics.messages()).isEqualTo(1);\n  assertThat(localMetrics.bytes()).isEqualTo(bytes.length);\n  assertThat(localMetrics.spans()).isEqualTo(TestObjects.TRACE.size());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 94,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 72,
        "startColumnNumber" : 4,
        "endLineNumber" : 72,
        "endColumnNumber" : 73
      },
      "nodeContext" : "assertThat(localMetrics.spans()).isEqualTo(TestObjects.TRACE.size());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 24,
    "startLineNumber" : 72,
    "startColumnNumber" : 47,
    "endLineNumber" : 72,
    "endColumnNumber" : 71
  } ],
  "layoutRelationDataList" : [ ]
}