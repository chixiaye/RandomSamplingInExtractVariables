{
  "id" : 14,
  "expression" : "((Building)target)",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "a7188c48845dd423fc9b58bc6bcf6797f6d25b46",
  "filePath" : "/core/src/mindustry/input/MobileInput.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "((Building)target)",
    "nodeType" : "ParenthesizedExpression",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 847,
      "startColumnNumber" : 80,
      "endLineNumber" : 847,
      "endColumnNumber" : 98
    },
    "astNodeNumber" : 5,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.InfixExpression,extendedOperands]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 847,
        "startColumnNumber" : 80,
        "endLineNumber" : 847,
        "endColumnNumber" : 108
      },
      "nodeContext" : "((Building)target).isValid()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 847,
        "startColumnNumber" : 34,
        "endLineNumber" : 847,
        "endColumnNumber" : 138
      },
      "nodeContext" : "allowHealing && target instanceof Building && ((Building)target).isValid()&& target.team() == unit.team",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 148,
        "startLineNumber" : 847,
        "startColumnNumber" : 34,
        "endLineNumber" : 848,
        "endColumnNumber" : 40
      },
      "nodeContext" : "allowHealing && target instanceof Building && ((Building)target).isValid()&& target.team() == unit.team && ((Building)target).damaged()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 28,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 183,
        "startLineNumber" : 847,
        "startColumnNumber" : 34,
        "endLineNumber" : 848,
        "endColumnNumber" : 75
      },
      "nodeContext" : "allowHealing && target instanceof Building && ((Building)target).isValid()&& target.team() == unit.team && ((Building)target).damaged() && target.within(unit,type.range)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 36,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 201,
        "startLineNumber" : 847,
        "startColumnNumber" : 16,
        "endLineNumber" : 848,
        "endColumnNumber" : 75
      },
      "nodeContext" : "validHealTarget=allowHealing && target instanceof Building && ((Building)target).isValid()&& target.team() == unit.team && ((Building)target).damaged() && target.within(unit,type.range)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 38,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 210,
        "startLineNumber" : 847,
        "startColumnNumber" : 8,
        "endLineNumber" : 848,
        "endColumnNumber" : 76
      },
      "nodeContext" : "boolean validHealTarget=allowHealing && target instanceof Building && ((Building)target).isValid()&& target.team() == unit.team && ((Building)target).damaged() && target.within(unit,type.range);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 40,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4853,
        "startLineNumber" : 839,
        "startColumnNumber" : 44,
        "endLineNumber" : 957,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Rect rect=Tmp.r3;\n  UnitType type=unit.type;\n  if (type == null)   return;\n  boolean omni=unit.type.omniMovement;\n  boolean allowHealing=type.canHeal;\n  boolean validHealTarget=allowHealing && target instanceof Building && ((Building)target).isValid()&& target.team() == unit.team && ((Building)target).damaged() && target.within(unit,type.range);\n  boolean boosted=(unit instanceof Mechc && unit.isFlying());\n  if ((Units.invalidateTarget(target,unit,type.range) && !validHealTarget) || state.isEditor()) {\n    target=null;\n  }\n  targetPos.set(Core.camera.position);\n  float attractDst=15f;\n  float speed=unit.realSpeed();\n  float range=unit.hasWeapons() ? unit.range() : 0f;\n  float bulletSpeed=unit.hasWeapons() ? type.weapons.first().bullet.speed : 0f;\n  float mouseAngle=unit.angleTo(unit.aimX(),unit.aimY());\n  boolean aimCursor=omni && player.shooting && type.hasWeapons()&& type.faceTarget&& !boosted&& type.rotateShooting;\n  if (aimCursor) {\n    unit.lookAt(mouseAngle);\n  }\n else {\n    unit.lookAt(unit.prefRotation());\n  }\n  if (payloadTarget != null && unit instanceof   Payloadc pay) {\n    targetPos.set(payloadTarget);\n    attractDst=0f;\n    if (unit.within(payloadTarget,3f * Time.delta)) {\n      if (payloadTarget instanceof Vec2 && pay.hasPayload()) {\n        tryDropPayload();\n      }\n else       if (payloadTarget instanceof       Building build && pay.canPickup(build)) {\n        Call.requestBuildPayload(player,build);\n      }\n else       if (payloadTarget instanceof       Unit other && pay.canPickup(other)) {\n        Call.requestUnitPayload(player,other);\n      }\n      payloadTarget=null;\n    }\n  }\n else {\n    payloadTarget=null;\n  }\n  movement.set(targetPos).sub(player).limit(speed);\n  movement.setAngle(Mathf.slerp(movement.angle(),unit.vel.angle(),0.05f));\n  if (player.within(targetPos,attractDst)) {\n    movement.setZero();\n    unit.vel.approachDelta(Vec2.ZERO,unit.speed() * type.accel / 2f);\n  }\n  float expansion=3f;\n  unit.hitbox(rect);\n  rect.x-=expansion;\n  rect.y-=expansion;\n  rect.width+=expansion * 2f;\n  rect.height+=expansion * 2f;\n  player.boosting=collisions.overlapsTile(rect) || !unit.within(targetPos,85f);\n  if (omni) {\n    unit.moveAt(movement);\n  }\n else {\n    unit.moveAt(Tmp.v2.trns(unit.rotation,movement.len()));\n    if (!movement.isZero()) {\n      unit.vel.rotateTo(movement.angle(),unit.type.rotateSpeed * Math.max(Time.delta,1));\n    }\n  }\n  if (!player.unit().activelyBuilding() && player.unit().mineTile == null) {\n    if (manualShooting) {\n      player.shooting=!boosted;\n      unit.aim(player.mouseX=Core.input.mouseWorldX(),player.mouseY=Core.input.mouseWorldY());\n    }\n else     if (target == null) {\n      player.shooting=false;\n      if (Core.settings.getBool(\"autotarget\") && !(player.unit() instanceof       BlockUnitUnit u && u.tile() instanceof       ControlBlock c && !c.shouldAutoTarget())) {\n        target=Units.closestTarget(unit.team,unit.x,unit.y,range,u -> u.team != Team.derelict,u -> u.team != Team.derelict);\n        if (allowHealing && target == null) {\n          target=Geometry.findClosest(unit.x,unit.y,indexer.getDamaged(Team.sharded));\n          if (target != null && !unit.within(target,range)) {\n            target=null;\n          }\n        }\n      }\n      unit.aim(Core.input.mouseWorldX(),Core.input.mouseWorldY());\n    }\n else {\n      Vec2 intercept=Predict.intercept(unit,target,bulletSpeed);\n      player.mouseX=intercept.x;\n      player.mouseY=intercept.y;\n      player.shooting=!boosted;\n      unit.aim(player.mouseX,player.mouseY);\n    }\n  }\n  unit.controlWeapons(player.shooting && !boosted);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 704,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4893,
        "startLineNumber" : 839,
        "startColumnNumber" : 4,
        "endLineNumber" : 957,
        "endColumnNumber" : 5
      },
      "nodeContext" : "protected void updateMovement(Unit unit){\n  Rect rect=Tmp.r3;\n  UnitType type=unit.type;\n  if (type == null)   return;\n  boolean omni=unit.type.omniMovement;\n  boolean allowHealing=type.canHeal;\n  boolean validHealTarget=allowHealing && target instanceof Building && ((Building)target).isValid()&& target.team() == unit.team && ((Building)target).damaged() && target.within(unit,type.range);\n  boolean boosted=(unit instanceof Mechc && unit.isFlying());\n  if ((Units.invalidateTarget(target,unit,type.range) && !validHealTarget) || state.isEditor()) {\n    target=null;\n  }\n  targetPos.set(Core.camera.position);\n  float attractDst=15f;\n  float speed=unit.realSpeed();\n  float range=unit.hasWeapons() ? unit.range() : 0f;\n  float bulletSpeed=unit.hasWeapons() ? type.weapons.first().bullet.speed : 0f;\n  float mouseAngle=unit.angleTo(unit.aimX(),unit.aimY());\n  boolean aimCursor=omni && player.shooting && type.hasWeapons()&& type.faceTarget&& !boosted&& type.rotateShooting;\n  if (aimCursor) {\n    unit.lookAt(mouseAngle);\n  }\n else {\n    unit.lookAt(unit.prefRotation());\n  }\n  if (payloadTarget != null && unit instanceof   Payloadc pay) {\n    targetPos.set(payloadTarget);\n    attractDst=0f;\n    if (unit.within(payloadTarget,3f * Time.delta)) {\n      if (payloadTarget instanceof Vec2 && pay.hasPayload()) {\n        tryDropPayload();\n      }\n else       if (payloadTarget instanceof       Building build && pay.canPickup(build)) {\n        Call.requestBuildPayload(player,build);\n      }\n else       if (payloadTarget instanceof       Unit other && pay.canPickup(other)) {\n        Call.requestUnitPayload(player,other);\n      }\n      payloadTarget=null;\n    }\n  }\n else {\n    payloadTarget=null;\n  }\n  movement.set(targetPos).sub(player).limit(speed);\n  movement.setAngle(Mathf.slerp(movement.angle(),unit.vel.angle(),0.05f));\n  if (player.within(targetPos,attractDst)) {\n    movement.setZero();\n    unit.vel.approachDelta(Vec2.ZERO,unit.speed() * type.accel / 2f);\n  }\n  float expansion=3f;\n  unit.hitbox(rect);\n  rect.x-=expansion;\n  rect.y-=expansion;\n  rect.width+=expansion * 2f;\n  rect.height+=expansion * 2f;\n  player.boosting=collisions.overlapsTile(rect) || !unit.within(targetPos,85f);\n  if (omni) {\n    unit.moveAt(movement);\n  }\n else {\n    unit.moveAt(Tmp.v2.trns(unit.rotation,movement.len()));\n    if (!movement.isZero()) {\n      unit.vel.rotateTo(movement.angle(),unit.type.rotateSpeed * Math.max(Time.delta,1));\n    }\n  }\n  if (!player.unit().activelyBuilding() && player.unit().mineTile == null) {\n    if (manualShooting) {\n      player.shooting=!boosted;\n      unit.aim(player.mouseX=Core.input.mouseWorldX(),player.mouseY=Core.input.mouseWorldY());\n    }\n else     if (target == null) {\n      player.shooting=false;\n      if (Core.settings.getBool(\"autotarget\") && !(player.unit() instanceof       BlockUnitUnit u && u.tile() instanceof       ControlBlock c && !c.shouldAutoTarget())) {\n        target=Units.closestTarget(unit.team,unit.x,unit.y,range,u -> u.team != Team.derelict,u -> u.team != Team.derelict);\n        if (allowHealing && target == null) {\n          target=Geometry.findClosest(unit.x,unit.y,indexer.getDamaged(Team.sharded));\n          if (target != null && !unit.within(target,range)) {\n            target=null;\n          }\n        }\n      }\n      unit.aim(Core.input.mouseWorldX(),Core.input.mouseWorldY());\n    }\n else {\n      Vec2 intercept=Predict.intercept(unit,target,bulletSpeed);\n      player.mouseX=intercept.x;\n      player.mouseY=intercept.y;\n      player.shooting=!boosted;\n      unit.aim(player.mouseX,player.mouseY);\n    }\n  }\n  unit.controlWeapons(player.shooting && !boosted);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 847,
        "startColumnNumber" : 34,
        "endLineNumber" : 847,
        "endColumnNumber" : 138
      },
      "nodeContext" : "allowHealing && target instanceof Building && ((Building)target).isValid()&& target.team() == unit.team",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 20,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "mindustry.core.Building"
  }, {
    "nodeContext" : "((Building)target)",
    "nodeType" : "ParenthesizedExpression",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 848,
      "startColumnNumber" : 12,
      "endLineNumber" : 848,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 5,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 848,
        "startColumnNumber" : 12,
        "endLineNumber" : 848,
        "endColumnNumber" : 40
      },
      "nodeContext" : "((Building)target).damaged()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 148,
        "startLineNumber" : 847,
        "startColumnNumber" : 34,
        "endLineNumber" : 848,
        "endColumnNumber" : 40
      },
      "nodeContext" : "allowHealing && target instanceof Building && ((Building)target).isValid()&& target.team() == unit.team && ((Building)target).damaged()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 28,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 183,
        "startLineNumber" : 847,
        "startColumnNumber" : 34,
        "endLineNumber" : 848,
        "endColumnNumber" : 75
      },
      "nodeContext" : "allowHealing && target instanceof Building && ((Building)target).isValid()&& target.team() == unit.team && ((Building)target).damaged() && target.within(unit,type.range)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 36,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 201,
        "startLineNumber" : 847,
        "startColumnNumber" : 16,
        "endLineNumber" : 848,
        "endColumnNumber" : 75
      },
      "nodeContext" : "validHealTarget=allowHealing && target instanceof Building && ((Building)target).isValid()&& target.team() == unit.team && ((Building)target).damaged() && target.within(unit,type.range)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 38,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 210,
        "startLineNumber" : 847,
        "startColumnNumber" : 8,
        "endLineNumber" : 848,
        "endColumnNumber" : 76
      },
      "nodeContext" : "boolean validHealTarget=allowHealing && target instanceof Building && ((Building)target).isValid()&& target.team() == unit.team && ((Building)target).damaged() && target.within(unit,type.range);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 40,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4853,
        "startLineNumber" : 839,
        "startColumnNumber" : 44,
        "endLineNumber" : 957,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Rect rect=Tmp.r3;\n  UnitType type=unit.type;\n  if (type == null)   return;\n  boolean omni=unit.type.omniMovement;\n  boolean allowHealing=type.canHeal;\n  boolean validHealTarget=allowHealing && target instanceof Building && ((Building)target).isValid()&& target.team() == unit.team && ((Building)target).damaged() && target.within(unit,type.range);\n  boolean boosted=(unit instanceof Mechc && unit.isFlying());\n  if ((Units.invalidateTarget(target,unit,type.range) && !validHealTarget) || state.isEditor()) {\n    target=null;\n  }\n  targetPos.set(Core.camera.position);\n  float attractDst=15f;\n  float speed=unit.realSpeed();\n  float range=unit.hasWeapons() ? unit.range() : 0f;\n  float bulletSpeed=unit.hasWeapons() ? type.weapons.first().bullet.speed : 0f;\n  float mouseAngle=unit.angleTo(unit.aimX(),unit.aimY());\n  boolean aimCursor=omni && player.shooting && type.hasWeapons()&& type.faceTarget&& !boosted&& type.rotateShooting;\n  if (aimCursor) {\n    unit.lookAt(mouseAngle);\n  }\n else {\n    unit.lookAt(unit.prefRotation());\n  }\n  if (payloadTarget != null && unit instanceof   Payloadc pay) {\n    targetPos.set(payloadTarget);\n    attractDst=0f;\n    if (unit.within(payloadTarget,3f * Time.delta)) {\n      if (payloadTarget instanceof Vec2 && pay.hasPayload()) {\n        tryDropPayload();\n      }\n else       if (payloadTarget instanceof       Building build && pay.canPickup(build)) {\n        Call.requestBuildPayload(player,build);\n      }\n else       if (payloadTarget instanceof       Unit other && pay.canPickup(other)) {\n        Call.requestUnitPayload(player,other);\n      }\n      payloadTarget=null;\n    }\n  }\n else {\n    payloadTarget=null;\n  }\n  movement.set(targetPos).sub(player).limit(speed);\n  movement.setAngle(Mathf.slerp(movement.angle(),unit.vel.angle(),0.05f));\n  if (player.within(targetPos,attractDst)) {\n    movement.setZero();\n    unit.vel.approachDelta(Vec2.ZERO,unit.speed() * type.accel / 2f);\n  }\n  float expansion=3f;\n  unit.hitbox(rect);\n  rect.x-=expansion;\n  rect.y-=expansion;\n  rect.width+=expansion * 2f;\n  rect.height+=expansion * 2f;\n  player.boosting=collisions.overlapsTile(rect) || !unit.within(targetPos,85f);\n  if (omni) {\n    unit.moveAt(movement);\n  }\n else {\n    unit.moveAt(Tmp.v2.trns(unit.rotation,movement.len()));\n    if (!movement.isZero()) {\n      unit.vel.rotateTo(movement.angle(),unit.type.rotateSpeed * Math.max(Time.delta,1));\n    }\n  }\n  if (!player.unit().activelyBuilding() && player.unit().mineTile == null) {\n    if (manualShooting) {\n      player.shooting=!boosted;\n      unit.aim(player.mouseX=Core.input.mouseWorldX(),player.mouseY=Core.input.mouseWorldY());\n    }\n else     if (target == null) {\n      player.shooting=false;\n      if (Core.settings.getBool(\"autotarget\") && !(player.unit() instanceof       BlockUnitUnit u && u.tile() instanceof       ControlBlock c && !c.shouldAutoTarget())) {\n        target=Units.closestTarget(unit.team,unit.x,unit.y,range,u -> u.team != Team.derelict,u -> u.team != Team.derelict);\n        if (allowHealing && target == null) {\n          target=Geometry.findClosest(unit.x,unit.y,indexer.getDamaged(Team.sharded));\n          if (target != null && !unit.within(target,range)) {\n            target=null;\n          }\n        }\n      }\n      unit.aim(Core.input.mouseWorldX(),Core.input.mouseWorldY());\n    }\n else {\n      Vec2 intercept=Predict.intercept(unit,target,bulletSpeed);\n      player.mouseX=intercept.x;\n      player.mouseY=intercept.y;\n      player.shooting=!boosted;\n      unit.aim(player.mouseX,player.mouseY);\n    }\n  }\n  unit.controlWeapons(player.shooting && !boosted);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 704,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4893,
        "startLineNumber" : 839,
        "startColumnNumber" : 4,
        "endLineNumber" : 957,
        "endColumnNumber" : 5
      },
      "nodeContext" : "protected void updateMovement(Unit unit){\n  Rect rect=Tmp.r3;\n  UnitType type=unit.type;\n  if (type == null)   return;\n  boolean omni=unit.type.omniMovement;\n  boolean allowHealing=type.canHeal;\n  boolean validHealTarget=allowHealing && target instanceof Building && ((Building)target).isValid()&& target.team() == unit.team && ((Building)target).damaged() && target.within(unit,type.range);\n  boolean boosted=(unit instanceof Mechc && unit.isFlying());\n  if ((Units.invalidateTarget(target,unit,type.range) && !validHealTarget) || state.isEditor()) {\n    target=null;\n  }\n  targetPos.set(Core.camera.position);\n  float attractDst=15f;\n  float speed=unit.realSpeed();\n  float range=unit.hasWeapons() ? unit.range() : 0f;\n  float bulletSpeed=unit.hasWeapons() ? type.weapons.first().bullet.speed : 0f;\n  float mouseAngle=unit.angleTo(unit.aimX(),unit.aimY());\n  boolean aimCursor=omni && player.shooting && type.hasWeapons()&& type.faceTarget&& !boosted&& type.rotateShooting;\n  if (aimCursor) {\n    unit.lookAt(mouseAngle);\n  }\n else {\n    unit.lookAt(unit.prefRotation());\n  }\n  if (payloadTarget != null && unit instanceof   Payloadc pay) {\n    targetPos.set(payloadTarget);\n    attractDst=0f;\n    if (unit.within(payloadTarget,3f * Time.delta)) {\n      if (payloadTarget instanceof Vec2 && pay.hasPayload()) {\n        tryDropPayload();\n      }\n else       if (payloadTarget instanceof       Building build && pay.canPickup(build)) {\n        Call.requestBuildPayload(player,build);\n      }\n else       if (payloadTarget instanceof       Unit other && pay.canPickup(other)) {\n        Call.requestUnitPayload(player,other);\n      }\n      payloadTarget=null;\n    }\n  }\n else {\n    payloadTarget=null;\n  }\n  movement.set(targetPos).sub(player).limit(speed);\n  movement.setAngle(Mathf.slerp(movement.angle(),unit.vel.angle(),0.05f));\n  if (player.within(targetPos,attractDst)) {\n    movement.setZero();\n    unit.vel.approachDelta(Vec2.ZERO,unit.speed() * type.accel / 2f);\n  }\n  float expansion=3f;\n  unit.hitbox(rect);\n  rect.x-=expansion;\n  rect.y-=expansion;\n  rect.width+=expansion * 2f;\n  rect.height+=expansion * 2f;\n  player.boosting=collisions.overlapsTile(rect) || !unit.within(targetPos,85f);\n  if (omni) {\n    unit.moveAt(movement);\n  }\n else {\n    unit.moveAt(Tmp.v2.trns(unit.rotation,movement.len()));\n    if (!movement.isZero()) {\n      unit.vel.rotateTo(movement.angle(),unit.type.rotateSpeed * Math.max(Time.delta,1));\n    }\n  }\n  if (!player.unit().activelyBuilding() && player.unit().mineTile == null) {\n    if (manualShooting) {\n      player.shooting=!boosted;\n      unit.aim(player.mouseX=Core.input.mouseWorldX(),player.mouseY=Core.input.mouseWorldY());\n    }\n else     if (target == null) {\n      player.shooting=false;\n      if (Core.settings.getBool(\"autotarget\") && !(player.unit() instanceof       BlockUnitUnit u && u.tile() instanceof       ControlBlock c && !c.shouldAutoTarget())) {\n        target=Units.closestTarget(unit.team,unit.x,unit.y,range,u -> u.team != Team.derelict,u -> u.team != Team.derelict);\n        if (allowHealing && target == null) {\n          target=Geometry.findClosest(unit.x,unit.y,indexer.getDamaged(Team.sharded));\n          if (target != null && !unit.within(target,range)) {\n            target=null;\n          }\n        }\n      }\n      unit.aim(Core.input.mouseWorldX(),Core.input.mouseWorldY());\n    }\n else {\n      Vec2 intercept=Predict.intercept(unit,target,bulletSpeed);\n      player.mouseX=intercept.x;\n      player.mouseY=intercept.y;\n      player.shooting=!boosted;\n      unit.aim(player.mouseX,player.mouseY);\n    }\n  }\n  unit.controlWeapons(player.shooting && !boosted);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 712,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 848,
        "startColumnNumber" : 12,
        "endLineNumber" : 848,
        "endColumnNumber" : 40
      },
      "nodeContext" : "((Building)target).damaged()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "mindustry.core.Building"
  } ],
  "positionList" : [ {
    "charLength" : 18,
    "startLineNumber" : 847,
    "startColumnNumber" : 80,
    "endLineNumber" : 847,
    "endColumnNumber" : 98
  }, {
    "charLength" : 18,
    "startLineNumber" : 848,
    "startColumnNumber" : 12,
    "endLineNumber" : 848,
    "endColumnNumber" : 30
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  } ]
}