{
  "id" : 46,
  "expression" : "1",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/common/src/main/java/io/netty/util/internal/logging/MessageFormatter.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 176,
      "startColumnNumber" : 43,
      "endLineNumber" : 176,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 176,
        "startColumnNumber" : 25,
        "endLineNumber" : 176,
        "endColumnNumber" : 44
      },
      "nodeContext" : "argArray.length - 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 176,
        "startColumnNumber" : 12,
        "endLineNumber" : 176,
        "endColumnNumber" : 44
      },
      "nodeContext" : "lastArrIdx=argArray.length - 1",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 176,
        "startColumnNumber" : 8,
        "endLineNumber" : 176,
        "endColumnNumber" : 45
      },
      "nodeContext" : "int lastArrIdx=argArray.length - 1;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1840,
        "startLineNumber" : 171,
        "startColumnNumber" : 64,
        "endLineNumber" : 220,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (argArray == null || argArray.length == 0) {\n    return new FormattingTuple(messagePattern,null);\n  }\n  int lastArrIdx=argArray.length - 1;\n  Object lastEntry=argArray[lastArrIdx];\n  Throwable throwable=lastEntry instanceof Throwable ? (Throwable)lastEntry : null;\n  if (messagePattern == null) {\n    return new FormattingTuple(null,throwable);\n  }\n  int j=messagePattern.indexOf(DELIM_STR);\n  if (j == -1) {\n    return new FormattingTuple(messagePattern,throwable);\n  }\n  StringBuilder sbuf=new StringBuilder(messagePattern.length() + 50);\n  int i=0;\n  int L=0;\n  do {\n    boolean notEscaped=j == 0 || messagePattern.charAt(j - 1) != ESCAPE_CHAR;\n    if (notEscaped) {\n      sbuf.append(messagePattern,i,j);\n    }\n else {\n      sbuf.append(messagePattern,i,j - 1);\n      notEscaped=j >= 2 && messagePattern.charAt(j - 2) == ESCAPE_CHAR;\n    }\n    i=j + 2;\n    if (notEscaped) {\n      deeplyAppendParameter(sbuf,argArray[L],null);\n      L++;\n      if (L > lastArrIdx) {\n        break;\n      }\n    }\n else {\n      sbuf.append(DELIM_STR);\n    }\n    j=messagePattern.indexOf(DELIM_STR,i);\n  }\n while (j != -1);\n  sbuf.append(messagePattern,i,messagePattern.length());\n  return new FormattingTuple(sbuf.toString(),L <= lastArrIdx ? throwable : null);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 223,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2442,
        "startLineNumber" : 160,
        "startColumnNumber" : 4,
        "endLineNumber" : 220,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Same principle as the  {@link #format(String,Object)} and{@link #format(String,Object,Object)} methods except that any number ofarguments can be passed in an array.\n * @param messagePattern The message pattern which will be parsed and formatted\n * @param argArray       An array of arguments to be substituted in place of formattinganchors\n * @return The formatted message\n */\nstatic FormattingTuple arrayFormat(final String messagePattern,final Object[] argArray){\n  if (argArray == null || argArray.length == 0) {\n    return new FormattingTuple(messagePattern,null);\n  }\n  int lastArrIdx=argArray.length - 1;\n  Object lastEntry=argArray[lastArrIdx];\n  Throwable throwable=lastEntry instanceof Throwable ? (Throwable)lastEntry : null;\n  if (messagePattern == null) {\n    return new FormattingTuple(null,throwable);\n  }\n  int j=messagePattern.indexOf(DELIM_STR);\n  if (j == -1) {\n    return new FormattingTuple(messagePattern,throwable);\n  }\n  StringBuilder sbuf=new StringBuilder(messagePattern.length() + 50);\n  int i=0;\n  int L=0;\n  do {\n    boolean notEscaped=j == 0 || messagePattern.charAt(j - 1) != ESCAPE_CHAR;\n    if (notEscaped) {\n      sbuf.append(messagePattern,i,j);\n    }\n else {\n      sbuf.append(messagePattern,i,j - 1);\n      notEscaped=j >= 2 && messagePattern.charAt(j - 2) == ESCAPE_CHAR;\n    }\n    i=j + 2;\n    if (notEscaped) {\n      deeplyAppendParameter(sbuf,argArray[L],null);\n      L++;\n      if (L > lastArrIdx) {\n        break;\n      }\n    }\n else {\n      sbuf.append(DELIM_STR);\n    }\n    j=messagePattern.indexOf(DELIM_STR,i);\n  }\n while (j != -1);\n  sbuf.append(messagePattern,i,messagePattern.length());\n  return new FormattingTuple(sbuf.toString(),L <= lastArrIdx ? throwable : null);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 241,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 176,
        "startColumnNumber" : 8,
        "endLineNumber" : 176,
        "endColumnNumber" : 45
      },
      "nodeContext" : "int lastArrIdx=argArray.length - 1;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 185,
      "startColumnNumber" : 18,
      "endLineNumber" : 185,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 2,
        "startLineNumber" : 185,
        "startColumnNumber" : 17,
        "endLineNumber" : 185,
        "endColumnNumber" : 19
      },
      "nodeContext" : "-1",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 185,
        "startColumnNumber" : 12,
        "endLineNumber" : 185,
        "endColumnNumber" : 19
      },
      "nodeContext" : "j == -1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 133,
        "startLineNumber" : 185,
        "startColumnNumber" : 8,
        "endLineNumber" : 188,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (j == -1) {\n  return new FormattingTuple(messagePattern,throwable);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1840,
        "startLineNumber" : 171,
        "startColumnNumber" : 64,
        "endLineNumber" : 220,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (argArray == null || argArray.length == 0) {\n    return new FormattingTuple(messagePattern,null);\n  }\n  int lastArrIdx=argArray.length - 1;\n  Object lastEntry=argArray[lastArrIdx];\n  Throwable throwable=lastEntry instanceof Throwable ? (Throwable)lastEntry : null;\n  if (messagePattern == null) {\n    return new FormattingTuple(null,throwable);\n  }\n  int j=messagePattern.indexOf(DELIM_STR);\n  if (j == -1) {\n    return new FormattingTuple(messagePattern,throwable);\n  }\n  StringBuilder sbuf=new StringBuilder(messagePattern.length() + 50);\n  int i=0;\n  int L=0;\n  do {\n    boolean notEscaped=j == 0 || messagePattern.charAt(j - 1) != ESCAPE_CHAR;\n    if (notEscaped) {\n      sbuf.append(messagePattern,i,j);\n    }\n else {\n      sbuf.append(messagePattern,i,j - 1);\n      notEscaped=j >= 2 && messagePattern.charAt(j - 2) == ESCAPE_CHAR;\n    }\n    i=j + 2;\n    if (notEscaped) {\n      deeplyAppendParameter(sbuf,argArray[L],null);\n      L++;\n      if (L > lastArrIdx) {\n        break;\n      }\n    }\n else {\n      sbuf.append(DELIM_STR);\n    }\n    j=messagePattern.indexOf(DELIM_STR,i);\n  }\n while (j != -1);\n  sbuf.append(messagePattern,i,messagePattern.length());\n  return new FormattingTuple(sbuf.toString(),L <= lastArrIdx ? throwable : null);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 223,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2442,
        "startLineNumber" : 160,
        "startColumnNumber" : 4,
        "endLineNumber" : 220,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Same principle as the  {@link #format(String,Object)} and{@link #format(String,Object,Object)} methods except that any number ofarguments can be passed in an array.\n * @param messagePattern The message pattern which will be parsed and formatted\n * @param argArray       An array of arguments to be substituted in place of formattinganchors\n * @return The formatted message\n */\nstatic FormattingTuple arrayFormat(final String messagePattern,final Object[] argArray){\n  if (argArray == null || argArray.length == 0) {\n    return new FormattingTuple(messagePattern,null);\n  }\n  int lastArrIdx=argArray.length - 1;\n  Object lastEntry=argArray[lastArrIdx];\n  Throwable throwable=lastEntry instanceof Throwable ? (Throwable)lastEntry : null;\n  if (messagePattern == null) {\n    return new FormattingTuple(null,throwable);\n  }\n  int j=messagePattern.indexOf(DELIM_STR);\n  if (j == -1) {\n    return new FormattingTuple(messagePattern,throwable);\n  }\n  StringBuilder sbuf=new StringBuilder(messagePattern.length() + 50);\n  int i=0;\n  int L=0;\n  do {\n    boolean notEscaped=j == 0 || messagePattern.charAt(j - 1) != ESCAPE_CHAR;\n    if (notEscaped) {\n      sbuf.append(messagePattern,i,j);\n    }\n else {\n      sbuf.append(messagePattern,i,j - 1);\n      notEscaped=j >= 2 && messagePattern.charAt(j - 2) == ESCAPE_CHAR;\n    }\n    i=j + 2;\n    if (notEscaped) {\n      deeplyAppendParameter(sbuf,argArray[L],null);\n      L++;\n      if (L > lastArrIdx) {\n        break;\n      }\n    }\n else {\n      sbuf.append(DELIM_STR);\n    }\n    j=messagePattern.indexOf(DELIM_STR,i);\n  }\n while (j != -1);\n  sbuf.append(messagePattern,i,messagePattern.length());\n  return new FormattingTuple(sbuf.toString(),L <= lastArrIdx ? throwable : null);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 241,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 185,
        "startColumnNumber" : 12,
        "endLineNumber" : 185,
        "endColumnNumber" : 19
      },
      "nodeContext" : "j == -1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 194,
      "startColumnNumber" : 69,
      "endLineNumber" : 194,
      "endColumnNumber" : 70
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 194,
        "startColumnNumber" : 65,
        "endLineNumber" : 194,
        "endColumnNumber" : 70
      },
      "nodeContext" : "j - 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 194,
        "startColumnNumber" : 43,
        "endLineNumber" : 194,
        "endColumnNumber" : 71
      },
      "nodeContext" : "messagePattern.charAt(j - 1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 194,
        "startColumnNumber" : 43,
        "endLineNumber" : 194,
        "endColumnNumber" : 86
      },
      "nodeContext" : "messagePattern.charAt(j - 1) != ESCAPE_CHAR",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 194,
        "startColumnNumber" : 33,
        "endLineNumber" : 194,
        "endColumnNumber" : 86
      },
      "nodeContext" : "j == 0 || messagePattern.charAt(j - 1) != ESCAPE_CHAR",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 194,
        "startColumnNumber" : 20,
        "endLineNumber" : 194,
        "endColumnNumber" : 86
      },
      "nodeContext" : "notEscaped=j == 0 || messagePattern.charAt(j - 1) != ESCAPE_CHAR",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 194,
        "startColumnNumber" : 12,
        "endLineNumber" : 194,
        "endColumnNumber" : 87
      },
      "nodeContext" : "boolean notEscaped=j == 0 || messagePattern.charAt(j - 1) != ESCAPE_CHAR;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.DoStatement,body]",
      "nodePosition" : {
        "charLength" : 832,
        "startLineNumber" : 193,
        "startColumnNumber" : 11,
        "endLineNumber" : 215,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  boolean notEscaped=j == 0 || messagePattern.charAt(j - 1) != ESCAPE_CHAR;\n  if (notEscaped) {\n    sbuf.append(messagePattern,i,j);\n  }\n else {\n    sbuf.append(messagePattern,i,j - 1);\n    notEscaped=j >= 2 && messagePattern.charAt(j - 2) == ESCAPE_CHAR;\n  }\n  i=j + 2;\n  if (notEscaped) {\n    deeplyAppendParameter(sbuf,argArray[L],null);\n    L++;\n    if (L > lastArrIdx) {\n      break;\n    }\n  }\n else {\n    sbuf.append(DELIM_STR);\n  }\n  j=messagePattern.indexOf(DELIM_STR,i);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 92,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 852,
        "startLineNumber" : 193,
        "startColumnNumber" : 8,
        "endLineNumber" : 215,
        "endColumnNumber" : 26
      },
      "nodeContext" : "do {\n  boolean notEscaped=j == 0 || messagePattern.charAt(j - 1) != ESCAPE_CHAR;\n  if (notEscaped) {\n    sbuf.append(messagePattern,i,j);\n  }\n else {\n    sbuf.append(messagePattern,i,j - 1);\n    notEscaped=j >= 2 && messagePattern.charAt(j - 2) == ESCAPE_CHAR;\n  }\n  i=j + 2;\n  if (notEscaped) {\n    deeplyAppendParameter(sbuf,argArray[L],null);\n    L++;\n    if (L > lastArrIdx) {\n      break;\n    }\n  }\n else {\n    sbuf.append(DELIM_STR);\n  }\n  j=messagePattern.indexOf(DELIM_STR,i);\n}\n while (j != -1);\n",
      "nodeType" : "DoStatement",
      "astNodeNumber" : 97,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1840,
        "startLineNumber" : 171,
        "startColumnNumber" : 64,
        "endLineNumber" : 220,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (argArray == null || argArray.length == 0) {\n    return new FormattingTuple(messagePattern,null);\n  }\n  int lastArrIdx=argArray.length - 1;\n  Object lastEntry=argArray[lastArrIdx];\n  Throwable throwable=lastEntry instanceof Throwable ? (Throwable)lastEntry : null;\n  if (messagePattern == null) {\n    return new FormattingTuple(null,throwable);\n  }\n  int j=messagePattern.indexOf(DELIM_STR);\n  if (j == -1) {\n    return new FormattingTuple(messagePattern,throwable);\n  }\n  StringBuilder sbuf=new StringBuilder(messagePattern.length() + 50);\n  int i=0;\n  int L=0;\n  do {\n    boolean notEscaped=j == 0 || messagePattern.charAt(j - 1) != ESCAPE_CHAR;\n    if (notEscaped) {\n      sbuf.append(messagePattern,i,j);\n    }\n else {\n      sbuf.append(messagePattern,i,j - 1);\n      notEscaped=j >= 2 && messagePattern.charAt(j - 2) == ESCAPE_CHAR;\n    }\n    i=j + 2;\n    if (notEscaped) {\n      deeplyAppendParameter(sbuf,argArray[L],null);\n      L++;\n      if (L > lastArrIdx) {\n        break;\n      }\n    }\n else {\n      sbuf.append(DELIM_STR);\n    }\n    j=messagePattern.indexOf(DELIM_STR,i);\n  }\n while (j != -1);\n  sbuf.append(messagePattern,i,messagePattern.length());\n  return new FormattingTuple(sbuf.toString(),L <= lastArrIdx ? throwable : null);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 223,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2442,
        "startLineNumber" : 160,
        "startColumnNumber" : 4,
        "endLineNumber" : 220,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Same principle as the  {@link #format(String,Object)} and{@link #format(String,Object,Object)} methods except that any number ofarguments can be passed in an array.\n * @param messagePattern The message pattern which will be parsed and formatted\n * @param argArray       An array of arguments to be substituted in place of formattinganchors\n * @return The formatted message\n */\nstatic FormattingTuple arrayFormat(final String messagePattern,final Object[] argArray){\n  if (argArray == null || argArray.length == 0) {\n    return new FormattingTuple(messagePattern,null);\n  }\n  int lastArrIdx=argArray.length - 1;\n  Object lastEntry=argArray[lastArrIdx];\n  Throwable throwable=lastEntry instanceof Throwable ? (Throwable)lastEntry : null;\n  if (messagePattern == null) {\n    return new FormattingTuple(null,throwable);\n  }\n  int j=messagePattern.indexOf(DELIM_STR);\n  if (j == -1) {\n    return new FormattingTuple(messagePattern,throwable);\n  }\n  StringBuilder sbuf=new StringBuilder(messagePattern.length() + 50);\n  int i=0;\n  int L=0;\n  do {\n    boolean notEscaped=j == 0 || messagePattern.charAt(j - 1) != ESCAPE_CHAR;\n    if (notEscaped) {\n      sbuf.append(messagePattern,i,j);\n    }\n else {\n      sbuf.append(messagePattern,i,j - 1);\n      notEscaped=j >= 2 && messagePattern.charAt(j - 2) == ESCAPE_CHAR;\n    }\n    i=j + 2;\n    if (notEscaped) {\n      deeplyAppendParameter(sbuf,argArray[L],null);\n      L++;\n      if (L > lastArrIdx) {\n        break;\n      }\n    }\n else {\n      sbuf.append(DELIM_STR);\n    }\n    j=messagePattern.indexOf(DELIM_STR,i);\n  }\n while (j != -1);\n  sbuf.append(messagePattern,i,messagePattern.length());\n  return new FormattingTuple(sbuf.toString(),L <= lastArrIdx ? throwable : null);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 241,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 194,
        "startColumnNumber" : 12,
        "endLineNumber" : 194,
        "endColumnNumber" : 87
      },
      "nodeContext" : "boolean notEscaped=j == 0 || messagePattern.charAt(j - 1) != ESCAPE_CHAR;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 16,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 199,
      "startColumnNumber" : 51,
      "endLineNumber" : 199,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 199,
        "startColumnNumber" : 47,
        "endLineNumber" : 199,
        "endColumnNumber" : 52
      },
      "nodeContext" : "j - 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 199,
        "startColumnNumber" : 16,
        "endLineNumber" : 199,
        "endColumnNumber" : 53
      },
      "nodeContext" : "sbuf.append(messagePattern,i,j - 1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 199,
        "startColumnNumber" : 16,
        "endLineNumber" : 199,
        "endColumnNumber" : 54
      },
      "nodeContext" : "sbuf.append(messagePattern,i,j - 1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 232,
        "startLineNumber" : 198,
        "startColumnNumber" : 19,
        "endLineNumber" : 202,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  sbuf.append(messagePattern,i,j - 1);\n  notEscaped=j >= 2 && messagePattern.charAt(j - 2) == ESCAPE_CHAR;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 25,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 354,
        "startLineNumber" : 195,
        "startColumnNumber" : 12,
        "endLineNumber" : 202,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (notEscaped) {\n  sbuf.append(messagePattern,i,j);\n}\n else {\n  sbuf.append(messagePattern,i,j - 1);\n  notEscaped=j >= 2 && messagePattern.charAt(j - 2) == ESCAPE_CHAR;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 35,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.DoStatement,body]",
      "nodePosition" : {
        "charLength" : 832,
        "startLineNumber" : 193,
        "startColumnNumber" : 11,
        "endLineNumber" : 215,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  boolean notEscaped=j == 0 || messagePattern.charAt(j - 1) != ESCAPE_CHAR;\n  if (notEscaped) {\n    sbuf.append(messagePattern,i,j);\n  }\n else {\n    sbuf.append(messagePattern,i,j - 1);\n    notEscaped=j >= 2 && messagePattern.charAt(j - 2) == ESCAPE_CHAR;\n  }\n  i=j + 2;\n  if (notEscaped) {\n    deeplyAppendParameter(sbuf,argArray[L],null);\n    L++;\n    if (L > lastArrIdx) {\n      break;\n    }\n  }\n else {\n    sbuf.append(DELIM_STR);\n  }\n  j=messagePattern.indexOf(DELIM_STR,i);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 92,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 852,
        "startLineNumber" : 193,
        "startColumnNumber" : 8,
        "endLineNumber" : 215,
        "endColumnNumber" : 26
      },
      "nodeContext" : "do {\n  boolean notEscaped=j == 0 || messagePattern.charAt(j - 1) != ESCAPE_CHAR;\n  if (notEscaped) {\n    sbuf.append(messagePattern,i,j);\n  }\n else {\n    sbuf.append(messagePattern,i,j - 1);\n    notEscaped=j >= 2 && messagePattern.charAt(j - 2) == ESCAPE_CHAR;\n  }\n  i=j + 2;\n  if (notEscaped) {\n    deeplyAppendParameter(sbuf,argArray[L],null);\n    L++;\n    if (L > lastArrIdx) {\n      break;\n    }\n  }\n else {\n    sbuf.append(DELIM_STR);\n  }\n  j=messagePattern.indexOf(DELIM_STR,i);\n}\n while (j != -1);\n",
      "nodeType" : "DoStatement",
      "astNodeNumber" : 97,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1840,
        "startLineNumber" : 171,
        "startColumnNumber" : 64,
        "endLineNumber" : 220,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (argArray == null || argArray.length == 0) {\n    return new FormattingTuple(messagePattern,null);\n  }\n  int lastArrIdx=argArray.length - 1;\n  Object lastEntry=argArray[lastArrIdx];\n  Throwable throwable=lastEntry instanceof Throwable ? (Throwable)lastEntry : null;\n  if (messagePattern == null) {\n    return new FormattingTuple(null,throwable);\n  }\n  int j=messagePattern.indexOf(DELIM_STR);\n  if (j == -1) {\n    return new FormattingTuple(messagePattern,throwable);\n  }\n  StringBuilder sbuf=new StringBuilder(messagePattern.length() + 50);\n  int i=0;\n  int L=0;\n  do {\n    boolean notEscaped=j == 0 || messagePattern.charAt(j - 1) != ESCAPE_CHAR;\n    if (notEscaped) {\n      sbuf.append(messagePattern,i,j);\n    }\n else {\n      sbuf.append(messagePattern,i,j - 1);\n      notEscaped=j >= 2 && messagePattern.charAt(j - 2) == ESCAPE_CHAR;\n    }\n    i=j + 2;\n    if (notEscaped) {\n      deeplyAppendParameter(sbuf,argArray[L],null);\n      L++;\n      if (L > lastArrIdx) {\n        break;\n      }\n    }\n else {\n      sbuf.append(DELIM_STR);\n    }\n    j=messagePattern.indexOf(DELIM_STR,i);\n  }\n while (j != -1);\n  sbuf.append(messagePattern,i,messagePattern.length());\n  return new FormattingTuple(sbuf.toString(),L <= lastArrIdx ? throwable : null);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 223,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2442,
        "startLineNumber" : 160,
        "startColumnNumber" : 4,
        "endLineNumber" : 220,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Same principle as the  {@link #format(String,Object)} and{@link #format(String,Object,Object)} methods except that any number ofarguments can be passed in an array.\n * @param messagePattern The message pattern which will be parsed and formatted\n * @param argArray       An array of arguments to be substituted in place of formattinganchors\n * @return The formatted message\n */\nstatic FormattingTuple arrayFormat(final String messagePattern,final Object[] argArray){\n  if (argArray == null || argArray.length == 0) {\n    return new FormattingTuple(messagePattern,null);\n  }\n  int lastArrIdx=argArray.length - 1;\n  Object lastEntry=argArray[lastArrIdx];\n  Throwable throwable=lastEntry instanceof Throwable ? (Throwable)lastEntry : null;\n  if (messagePattern == null) {\n    return new FormattingTuple(null,throwable);\n  }\n  int j=messagePattern.indexOf(DELIM_STR);\n  if (j == -1) {\n    return new FormattingTuple(messagePattern,throwable);\n  }\n  StringBuilder sbuf=new StringBuilder(messagePattern.length() + 50);\n  int i=0;\n  int L=0;\n  do {\n    boolean notEscaped=j == 0 || messagePattern.charAt(j - 1) != ESCAPE_CHAR;\n    if (notEscaped) {\n      sbuf.append(messagePattern,i,j);\n    }\n else {\n      sbuf.append(messagePattern,i,j - 1);\n      notEscaped=j >= 2 && messagePattern.charAt(j - 2) == ESCAPE_CHAR;\n    }\n    i=j + 2;\n    if (notEscaped) {\n      deeplyAppendParameter(sbuf,argArray[L],null);\n      L++;\n      if (L > lastArrIdx) {\n        break;\n      }\n    }\n else {\n      sbuf.append(DELIM_STR);\n    }\n    j=messagePattern.indexOf(DELIM_STR,i);\n  }\n while (j != -1);\n  sbuf.append(messagePattern,i,messagePattern.length());\n  return new FormattingTuple(sbuf.toString(),L <= lastArrIdx ? throwable : null);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 241,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 199,
        "startColumnNumber" : 16,
        "endLineNumber" : 199,
        "endColumnNumber" : 54
      },
      "nodeContext" : "sbuf.append(messagePattern,i,j - 1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 215,
      "startColumnNumber" : 23,
      "endLineNumber" : 215,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 2,
        "startLineNumber" : 215,
        "startColumnNumber" : 22,
        "endLineNumber" : 215,
        "endColumnNumber" : 24
      },
      "nodeContext" : "-1",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.DoStatement,expression]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 215,
        "startColumnNumber" : 17,
        "endLineNumber" : 215,
        "endColumnNumber" : 24
      },
      "nodeContext" : "j != -1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 852,
        "startLineNumber" : 193,
        "startColumnNumber" : 8,
        "endLineNumber" : 215,
        "endColumnNumber" : 26
      },
      "nodeContext" : "do {\n  boolean notEscaped=j == 0 || messagePattern.charAt(j - 1) != ESCAPE_CHAR;\n  if (notEscaped) {\n    sbuf.append(messagePattern,i,j);\n  }\n else {\n    sbuf.append(messagePattern,i,j - 1);\n    notEscaped=j >= 2 && messagePattern.charAt(j - 2) == ESCAPE_CHAR;\n  }\n  i=j + 2;\n  if (notEscaped) {\n    deeplyAppendParameter(sbuf,argArray[L],null);\n    L++;\n    if (L > lastArrIdx) {\n      break;\n    }\n  }\n else {\n    sbuf.append(DELIM_STR);\n  }\n  j=messagePattern.indexOf(DELIM_STR,i);\n}\n while (j != -1);\n",
      "nodeType" : "DoStatement",
      "astNodeNumber" : 97,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1840,
        "startLineNumber" : 171,
        "startColumnNumber" : 64,
        "endLineNumber" : 220,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (argArray == null || argArray.length == 0) {\n    return new FormattingTuple(messagePattern,null);\n  }\n  int lastArrIdx=argArray.length - 1;\n  Object lastEntry=argArray[lastArrIdx];\n  Throwable throwable=lastEntry instanceof Throwable ? (Throwable)lastEntry : null;\n  if (messagePattern == null) {\n    return new FormattingTuple(null,throwable);\n  }\n  int j=messagePattern.indexOf(DELIM_STR);\n  if (j == -1) {\n    return new FormattingTuple(messagePattern,throwable);\n  }\n  StringBuilder sbuf=new StringBuilder(messagePattern.length() + 50);\n  int i=0;\n  int L=0;\n  do {\n    boolean notEscaped=j == 0 || messagePattern.charAt(j - 1) != ESCAPE_CHAR;\n    if (notEscaped) {\n      sbuf.append(messagePattern,i,j);\n    }\n else {\n      sbuf.append(messagePattern,i,j - 1);\n      notEscaped=j >= 2 && messagePattern.charAt(j - 2) == ESCAPE_CHAR;\n    }\n    i=j + 2;\n    if (notEscaped) {\n      deeplyAppendParameter(sbuf,argArray[L],null);\n      L++;\n      if (L > lastArrIdx) {\n        break;\n      }\n    }\n else {\n      sbuf.append(DELIM_STR);\n    }\n    j=messagePattern.indexOf(DELIM_STR,i);\n  }\n while (j != -1);\n  sbuf.append(messagePattern,i,messagePattern.length());\n  return new FormattingTuple(sbuf.toString(),L <= lastArrIdx ? throwable : null);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 223,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2442,
        "startLineNumber" : 160,
        "startColumnNumber" : 4,
        "endLineNumber" : 220,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Same principle as the  {@link #format(String,Object)} and{@link #format(String,Object,Object)} methods except that any number ofarguments can be passed in an array.\n * @param messagePattern The message pattern which will be parsed and formatted\n * @param argArray       An array of arguments to be substituted in place of formattinganchors\n * @return The formatted message\n */\nstatic FormattingTuple arrayFormat(final String messagePattern,final Object[] argArray){\n  if (argArray == null || argArray.length == 0) {\n    return new FormattingTuple(messagePattern,null);\n  }\n  int lastArrIdx=argArray.length - 1;\n  Object lastEntry=argArray[lastArrIdx];\n  Throwable throwable=lastEntry instanceof Throwable ? (Throwable)lastEntry : null;\n  if (messagePattern == null) {\n    return new FormattingTuple(null,throwable);\n  }\n  int j=messagePattern.indexOf(DELIM_STR);\n  if (j == -1) {\n    return new FormattingTuple(messagePattern,throwable);\n  }\n  StringBuilder sbuf=new StringBuilder(messagePattern.length() + 50);\n  int i=0;\n  int L=0;\n  do {\n    boolean notEscaped=j == 0 || messagePattern.charAt(j - 1) != ESCAPE_CHAR;\n    if (notEscaped) {\n      sbuf.append(messagePattern,i,j);\n    }\n else {\n      sbuf.append(messagePattern,i,j - 1);\n      notEscaped=j >= 2 && messagePattern.charAt(j - 2) == ESCAPE_CHAR;\n    }\n    i=j + 2;\n    if (notEscaped) {\n      deeplyAppendParameter(sbuf,argArray[L],null);\n      L++;\n      if (L > lastArrIdx) {\n        break;\n      }\n    }\n else {\n      sbuf.append(DELIM_STR);\n    }\n    j=messagePattern.indexOf(DELIM_STR,i);\n  }\n while (j != -1);\n  sbuf.append(messagePattern,i,messagePattern.length());\n  return new FormattingTuple(sbuf.toString(),L <= lastArrIdx ? throwable : null);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 241,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.DoStatement,expression]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 215,
        "startColumnNumber" : 17,
        "endLineNumber" : 215,
        "endColumnNumber" : 24
      },
      "nodeContext" : "j != -1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 176,
    "startColumnNumber" : 43,
    "endLineNumber" : 176,
    "endColumnNumber" : 44
  }, {
    "charLength" : 1,
    "startLineNumber" : 185,
    "startColumnNumber" : 18,
    "endLineNumber" : 185,
    "endColumnNumber" : 19
  }, {
    "charLength" : 1,
    "startLineNumber" : 194,
    "startColumnNumber" : 69,
    "endLineNumber" : 194,
    "endColumnNumber" : 70
  }, {
    "charLength" : 1,
    "startLineNumber" : 199,
    "startColumnNumber" : 51,
    "endLineNumber" : 199,
    "endColumnNumber" : 52
  }, {
    "charLength" : 1,
    "startLineNumber" : 215,
    "startColumnNumber" : 23,
    "endLineNumber" : 215,
    "endColumnNumber" : 24
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  } ]
}