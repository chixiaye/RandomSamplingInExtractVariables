{
  "id" : 8,
  "expression" : "\") handleFlow_FirstLoad:offline->\"",
  "projectName" : "Tencent@VasSonic",
  "commitID" : "a3e09c156adb93b4ebe6139def465c519069aa9e",
  "filePath" : "/sonic-android/sdk/src/main/java/com/tencent/sonic/sdk/StandardSonicSession.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\") handleFlow_FirstLoad:offline->\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 34,
      "startLineNumber" : 360,
      "startColumnNumber" : 61,
      "endLineNumber" : 360,
      "endColumnNumber" : 95
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 360,
        "startColumnNumber" : 42,
        "endLineNumber" : 360,
        "endColumnNumber" : 147
      },
      "nodeContext" : "\"session(\" + sId + \") handleFlow_FirstLoad:offline->\"+ cacheOffline+ \" , so do not need cache to file.\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 136,
        "startLineNumber" : 360,
        "startColumnNumber" : 12,
        "endLineNumber" : 360,
        "endColumnNumber" : 148
      },
      "nodeContext" : "SonicUtils.log(TAG,Log.INFO,\"session(\" + sId + \") handleFlow_FirstLoad:offline->\"+ cacheOffline+ \" , so do not need cache to file.\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 137,
        "startLineNumber" : 360,
        "startColumnNumber" : 12,
        "endLineNumber" : 360,
        "endColumnNumber" : 149
      },
      "nodeContext" : "SonicUtils.log(TAG,Log.INFO,\"session(\" + sId + \") handleFlow_FirstLoad:offline->\"+ cacheOffline+ \" , so do not need cache to file.\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 161,
        "startLineNumber" : 359,
        "startColumnNumber" : 15,
        "endLineNumber" : 361,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  SonicUtils.log(TAG,Log.INFO,\"session(\" + sId + \") handleFlow_FirstLoad:offline->\"+ cacheOffline+ \" , so do not need cache to file.\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 740,
        "startLineNumber" : 348,
        "startColumnNumber" : 8,
        "endLineNumber" : 361,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (SonicUtils.needSaveData(cacheOffline)) {\n  try {\n    if (hasCacheData) {\n      switchState(STATE_RUNNING,STATE_READY,true);\n      Thread.sleep(1500);\n      separateAndSaveCache(htmlString);\n    }\n  }\n catch (  Throwable e) {\n    SonicUtils.log(TAG,Log.ERROR,\"session(\" + sId + \") handleFlow_FirstLoad error:  \"+ e.getMessage());\n  }\n}\n else {\n  SonicUtils.log(TAG,Log.INFO,\"session(\" + sId + \") handleFlow_FirstLoad:offline->\"+ cacheOffline+ \" , so do not need cache to file.\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 62,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2601,
        "startLineNumber" : 312,
        "startColumnNumber" : 42,
        "endLineNumber" : 363,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  SonicSessionConnection.ResponseDataTuple responseDataTuple=sessionConnection.getResponseData(wasInterceptInvoked,null);\n  if (null == responseDataTuple) {\n    SonicUtils.log(TAG,Log.ERROR,\"session(\" + sId + \") handleFlow_FirstLoad error:responseDataTuple is null!\");\n    return;\n  }\n  Message msg=mainHandler.obtainMessage(CLIENT_MSG_NOTIFY_RESULT);\n  msg.arg1=msg.arg2=SONIC_RESULT_CODE_FIRST_LOAD;\n  String htmlString=null;\n  if (responseDataTuple.isComplete) {\n    try {\n      htmlString=responseDataTuple.outputStream.toString(\"UTF-8\");\nsynchronized (webResponseLock) {\n        pendingWebResourceStream=new ByteArrayInputStream(htmlString.getBytes());\n      }\n      msg.arg2=SONIC_RESULT_CODE_HIT_CACHE;\n      SonicUtils.log(TAG,Log.INFO,\"session(\" + sId + \") handleFlow_FirstLoad:oh yeah, first load hit 304.\");\n    }\n catch (    Throwable e) {\nsynchronized (webResponseLock) {\n        pendingWebResourceStream=null;\n      }\n      SonicUtils.log(TAG,Log.ERROR,\"session(\" + sId + \") handleFlow_FirstLoad error:\"+ e.getMessage()+ \".\");\n    }\n  }\n else {\nsynchronized (webResponseLock) {\n      pendingWebResourceStream=new SonicSessionStream(this,responseDataTuple.outputStream,responseDataTuple.responseStream);\n    }\n  }\n  mainHandler.sendMessage(msg);\n  boolean hasCacheData=!TextUtils.isEmpty(htmlString);\n  SonicUtils.log(TAG,Log.INFO,\"session(\" + sId + \") handleFlow_FirstLoad:hasCacheData=\"+ hasCacheData+ \".\");\n  String cacheOffline=sessionConnection.getResponseHeaderField(SonicSessionConnection.CUSTOM_HEAD_FILED_CACHE_OFFLINE);\n  if (SonicUtils.needSaveData(cacheOffline)) {\n    try {\n      if (hasCacheData) {\n        switchState(STATE_RUNNING,STATE_READY,true);\n        Thread.sleep(1500);\n        separateAndSaveCache(htmlString);\n      }\n    }\n catch (    Throwable e) {\n      SonicUtils.log(TAG,Log.ERROR,\"session(\" + sId + \") handleFlow_FirstLoad error:  \"+ e.getMessage());\n    }\n  }\n else {\n    SonicUtils.log(TAG,Log.INFO,\"session(\" + sId + \") handleFlow_FirstLoad:offline->\"+ cacheOffline+ \" , so do not need cache to file.\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 249,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3290,
        "startLineNumber" : 300,
        "startColumnNumber" : 4,
        "endLineNumber" : 363,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Sonic will always read the new data from the server until client initiates a resource interception If the server data is not read finished sonic will split the read and unread data into a bridgedStream {@link SonicSessionStream}, otherwise all the read data will be encapsulated as an inputStream {@link java.io.ByteArrayInputStream}. When client initiates a resource interception, sonic will provide the bridgedStream or inputStream to the kernel. <p> If need save and separate data, sonic will save the server data and separate the server data to template and data\n */\nprotected void handleFlow_FirstLoad(){\n  SonicSessionConnection.ResponseDataTuple responseDataTuple=sessionConnection.getResponseData(wasInterceptInvoked,null);\n  if (null == responseDataTuple) {\n    SonicUtils.log(TAG,Log.ERROR,\"session(\" + sId + \") handleFlow_FirstLoad error:responseDataTuple is null!\");\n    return;\n  }\n  Message msg=mainHandler.obtainMessage(CLIENT_MSG_NOTIFY_RESULT);\n  msg.arg1=msg.arg2=SONIC_RESULT_CODE_FIRST_LOAD;\n  String htmlString=null;\n  if (responseDataTuple.isComplete) {\n    try {\n      htmlString=responseDataTuple.outputStream.toString(\"UTF-8\");\nsynchronized (webResponseLock) {\n        pendingWebResourceStream=new ByteArrayInputStream(htmlString.getBytes());\n      }\n      msg.arg2=SONIC_RESULT_CODE_HIT_CACHE;\n      SonicUtils.log(TAG,Log.INFO,\"session(\" + sId + \") handleFlow_FirstLoad:oh yeah, first load hit 304.\");\n    }\n catch (    Throwable e) {\nsynchronized (webResponseLock) {\n        pendingWebResourceStream=null;\n      }\n      SonicUtils.log(TAG,Log.ERROR,\"session(\" + sId + \") handleFlow_FirstLoad error:\"+ e.getMessage()+ \".\");\n    }\n  }\n else {\nsynchronized (webResponseLock) {\n      pendingWebResourceStream=new SonicSessionStream(this,responseDataTuple.outputStream,responseDataTuple.responseStream);\n    }\n  }\n  mainHandler.sendMessage(msg);\n  boolean hasCacheData=!TextUtils.isEmpty(htmlString);\n  SonicUtils.log(TAG,Log.INFO,\"session(\" + sId + \") handleFlow_FirstLoad:hasCacheData=\"+ hasCacheData+ \".\");\n  String cacheOffline=sessionConnection.getResponseHeaderField(SonicSessionConnection.CUSTOM_HEAD_FILED_CACHE_OFFLINE);\n  if (SonicUtils.needSaveData(cacheOffline)) {\n    try {\n      if (hasCacheData) {\n        switchState(STATE_RUNNING,STATE_READY,true);\n        Thread.sleep(1500);\n        separateAndSaveCache(htmlString);\n      }\n    }\n catch (    Throwable e) {\n      SonicUtils.log(TAG,Log.ERROR,\"session(\" + sId + \") handleFlow_FirstLoad error:  \"+ e.getMessage());\n    }\n  }\n else {\n    SonicUtils.log(TAG,Log.INFO,\"session(\" + sId + \") handleFlow_FirstLoad:offline->\"+ cacheOffline+ \" , so do not need cache to file.\");\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 254,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 137,
        "startLineNumber" : 360,
        "startColumnNumber" : 12,
        "endLineNumber" : 360,
        "endColumnNumber" : 149
      },
      "nodeContext" : "SonicUtils.log(TAG,Log.INFO,\"session(\" + sId + \") handleFlow_FirstLoad:offline->\"+ cacheOffline+ \" , so do not need cache to file.\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 34,
    "startLineNumber" : 360,
    "startColumnNumber" : 61,
    "endLineNumber" : 360,
    "endColumnNumber" : 95
  } ],
  "layoutRelationDataList" : [ ]
}