{
  "id" : 399,
  "expression" : "\"Broker {} is overloaded: CPU: {}%, MEMORY: {}%, DIRECT MEMORY: {}%, BANDWIDTH IN: {}%, \" + \"BANDWIDTH OUT: {}%\"",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-broker/src/main/java/org/apache/pulsar/broker/loadbalance/impl/LeastLongTermMessageRate.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Broker {} is overloaded: CPU: {}%, MEMORY: {}%, DIRECT MEMORY: {}%, BANDWIDTH IN: {}%, \" + \"BANDWIDTH OUT: {}%\"",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 144,
      "startLineNumber" : 107,
      "startColumnNumber" : 24,
      "endLineNumber" : 108,
      "endColumnNumber" : 54
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 463,
        "startLineNumber" : 106,
        "startColumnNumber" : 16,
        "endLineNumber" : 111,
        "endColumnNumber" : 67
      },
      "nodeContext" : "log.warn(\"Broker {} is overloaded: CPU: {}%, MEMORY: {}%, DIRECT MEMORY: {}%, BANDWIDTH IN: {}%, \" + \"BANDWIDTH OUT: {}%\",broker,localData.getCpu().percentUsage(),localData.getMemory().percentUsage(),localData.getDirectMemory().percentUsage(),localData.getBandwidthIn().percentUsage(),localData.getBandwidthOut().percentUsage())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 32,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 464,
        "startLineNumber" : 106,
        "startColumnNumber" : 16,
        "endLineNumber" : 111,
        "endColumnNumber" : 68
      },
      "nodeContext" : "log.warn(\"Broker {} is overloaded: CPU: {}%, MEMORY: {}%, DIRECT MEMORY: {}%, BANDWIDTH IN: {}%, \" + \"BANDWIDTH OUT: {}%\",broker,localData.getCpu().percentUsage(),localData.getMemory().percentUsage(),localData.getDirectMemory().percentUsage(),localData.getBandwidthIn().percentUsage(),localData.getBandwidthOut().percentUsage());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 33,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 574,
        "startLineNumber" : 104,
        "startColumnNumber" : 51,
        "endLineNumber" : 113,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  final LocalBrokerData localData=brokerData.getLocalData();\n  log.warn(\"Broker {} is overloaded: CPU: {}%, MEMORY: {}%, DIRECT MEMORY: {}%, BANDWIDTH IN: {}%, \" + \"BANDWIDTH OUT: {}%\",broker,localData.getCpu().percentUsage(),localData.getMemory().percentUsage(),localData.getDirectMemory().percentUsage(),localData.getBandwidthIn().percentUsage(),localData.getBandwidthOut().percentUsage());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 43,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 613,
        "startLineNumber" : 104,
        "startColumnNumber" : 12,
        "endLineNumber" : 113,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (score == Double.POSITIVE_INFINITY) {\n  final LocalBrokerData localData=brokerData.getLocalData();\n  log.warn(\"Broker {} is overloaded: CPU: {}%, MEMORY: {}%, DIRECT MEMORY: {}%, BANDWIDTH IN: {}%, \" + \"BANDWIDTH OUT: {}%\",broker,localData.getCpu().percentUsage(),localData.getMemory().percentUsage(),localData.getDirectMemory().percentUsage(),localData.getBandwidthIn().percentUsage(),localData.getBandwidthOut().percentUsage());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 49,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1191,
        "startLineNumber" : 101,
        "startColumnNumber" : 41,
        "endLineNumber" : 123,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final BrokerData brokerData=loadData.getBrokerData().get(broker);\n  final double score=getScore(brokerData,conf);\n  if (score == Double.POSITIVE_INFINITY) {\n    final LocalBrokerData localData=brokerData.getLocalData();\n    log.warn(\"Broker {} is overloaded: CPU: {}%, MEMORY: {}%, DIRECT MEMORY: {}%, BANDWIDTH IN: {}%, \" + \"BANDWIDTH OUT: {}%\",broker,localData.getCpu().percentUsage(),localData.getMemory().percentUsage(),localData.getDirectMemory().percentUsage(),localData.getBandwidthIn().percentUsage(),localData.getBandwidthOut().percentUsage());\n  }\n  if (score < minScore) {\n    bestBrokers.clear();\n    bestBrokers.add(broker);\n    minScore=score;\n  }\n else   if (score == minScore) {\n    bestBrokers.add(broker);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 99,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1224,
        "startLineNumber" : 101,
        "startColumnNumber" : 8,
        "endLineNumber" : 123,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (String broker : candidates) {\n  final BrokerData brokerData=loadData.getBrokerData().get(broker);\n  final double score=getScore(brokerData,conf);\n  if (score == Double.POSITIVE_INFINITY) {\n    final LocalBrokerData localData=brokerData.getLocalData();\n    log.warn(\"Broker {} is overloaded: CPU: {}%, MEMORY: {}%, DIRECT MEMORY: {}%, BANDWIDTH IN: {}%, \" + \"BANDWIDTH OUT: {}%\",broker,localData.getCpu().percentUsage(),localData.getMemory().percentUsage(),localData.getDirectMemory().percentUsage(),localData.getBandwidthIn().percentUsage(),localData.getBandwidthOut().percentUsage());\n  }\n  if (score < minScore) {\n    bestBrokers.clear();\n    bestBrokers.add(broker);\n    minScore=score;\n  }\n else   if (score == minScore) {\n    bestBrokers.add(broker);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 105,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1887,
        "startLineNumber" : 96,
        "startColumnNumber" : 74,
        "endLineNumber" : 136,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  bestBrokers.clear();\n  double minScore=Double.POSITIVE_INFINITY;\n  for (  String broker : candidates) {\n    final BrokerData brokerData=loadData.getBrokerData().get(broker);\n    final double score=getScore(brokerData,conf);\n    if (score == Double.POSITIVE_INFINITY) {\n      final LocalBrokerData localData=brokerData.getLocalData();\n      log.warn(\"Broker {} is overloaded: CPU: {}%, MEMORY: {}%, DIRECT MEMORY: {}%, BANDWIDTH IN: {}%, \" + \"BANDWIDTH OUT: {}%\",broker,localData.getCpu().percentUsage(),localData.getMemory().percentUsage(),localData.getDirectMemory().percentUsage(),localData.getBandwidthIn().percentUsage(),localData.getBandwidthOut().percentUsage());\n    }\n    if (score < minScore) {\n      bestBrokers.clear();\n      bestBrokers.add(broker);\n      minScore=score;\n    }\n else     if (score == minScore) {\n      bestBrokers.add(broker);\n    }\n  }\n  if (bestBrokers.isEmpty()) {\n    bestBrokers.addAll(candidates);\n  }\n  if (bestBrokers.isEmpty()) {\n    return Optional.empty();\n  }\n  return Optional.of(bestBrokers.get(ThreadLocalRandom.current().nextInt(bestBrokers.size())));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 151,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2621,
        "startLineNumber" : 80,
        "startColumnNumber" : 4,
        "endLineNumber" : 136,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Find a suitable broker to assign the given bundle to.\n * @param candidates The candidates for which the bundle may be assigned.\n * @param bundleToAssign The data for the bundle to assign.\n * @param loadData The load data from the leader broker.\n * @param conf The service configuration.\n * @return The name of the selected broker as it appears on ZooKeeper.\n */\n@Override public Optional<String> selectBroker(final Set<String> candidates,final BundleData bundleToAssign,final LoadData loadData,final ServiceConfiguration conf){\n  bestBrokers.clear();\n  double minScore=Double.POSITIVE_INFINITY;\n  for (  String broker : candidates) {\n    final BrokerData brokerData=loadData.getBrokerData().get(broker);\n    final double score=getScore(brokerData,conf);\n    if (score == Double.POSITIVE_INFINITY) {\n      final LocalBrokerData localData=brokerData.getLocalData();\n      log.warn(\"Broker {} is overloaded: CPU: {}%, MEMORY: {}%, DIRECT MEMORY: {}%, BANDWIDTH IN: {}%, \" + \"BANDWIDTH OUT: {}%\",broker,localData.getCpu().percentUsage(),localData.getMemory().percentUsage(),localData.getDirectMemory().percentUsage(),localData.getBandwidthIn().percentUsage(),localData.getBandwidthOut().percentUsage());\n    }\n    if (score < minScore) {\n      bestBrokers.clear();\n      bestBrokers.add(broker);\n      minScore=score;\n    }\n else     if (score == minScore) {\n      bestBrokers.add(broker);\n    }\n  }\n  if (bestBrokers.isEmpty()) {\n    bestBrokers.addAll(candidates);\n  }\n  if (bestBrokers.isEmpty()) {\n    return Optional.empty();\n  }\n  return Optional.of(bestBrokers.get(ThreadLocalRandom.current().nextInt(bestBrokers.size())));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 185,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 463,
        "startLineNumber" : 106,
        "startColumnNumber" : 16,
        "endLineNumber" : 111,
        "endColumnNumber" : 67
      },
      "nodeContext" : "log.warn(\"Broker {} is overloaded: CPU: {}%, MEMORY: {}%, DIRECT MEMORY: {}%, BANDWIDTH IN: {}%, \" + \"BANDWIDTH OUT: {}%\",broker,localData.getCpu().percentUsage(),localData.getMemory().percentUsage(),localData.getDirectMemory().percentUsage(),localData.getBandwidthIn().percentUsage(),localData.getBandwidthOut().percentUsage())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 32,
      "astHeight" : 4
    },
    "tokenLength" : 17,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 144,
    "startLineNumber" : 107,
    "startColumnNumber" : 24,
    "endLineNumber" : 108,
    "endColumnNumber" : 54
  } ],
  "layoutRelationDataList" : [ ]
}