{
  "id" : 101,
  "expression" : "File",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/core/src/main/java/org/apache/druid/utils/CompressionUtils.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "File",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 200,
      "startColumnNumber" : 27,
      "endLineNumber" : 200,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 200,
        "startColumnNumber" : 27,
        "endLineNumber" : 200,
        "endColumnNumber" : 85
      },
      "nodeContext" : "File.createTempFile(\"compressionUtilZipCache\",ZIP_SUFFIX)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 200,
        "startColumnNumber" : 17,
        "endLineNumber" : 200,
        "endColumnNumber" : 85
      },
      "nodeContext" : "tmpFile=File.createTempFile(\"compressionUtilZipCache\",ZIP_SUFFIX)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 200,
        "startColumnNumber" : 6,
        "endLineNumber" : 200,
        "endColumnNumber" : 86
      },
      "nodeContext" : "final File tmpFile=File.createTempFile(\"compressionUtilZipCache\",ZIP_SUFFIX);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 440,
        "startLineNumber" : 199,
        "startColumnNumber" : 11,
        "endLineNumber" : 215,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final File tmpFile=File.createTempFile(\"compressionUtilZipCache\",ZIP_SUFFIX);\n  try {\n    FileUtils.retryCopy(byteSource,tmpFile,shouldRetry,DEFAULT_RETRY_COUNT);\n    return unzip(tmpFile,outDir);\n  }\n  finally {\n    if (!tmpFile.delete()) {\n      log.warn(\"Could not delete zip cache at [%s]\",tmpFile.toString());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 42,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 781,
        "startLineNumber" : 185,
        "startColumnNumber" : 4,
        "endLineNumber" : 215,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!cacheLocally) {\n  try {\n    return RetryUtils.retry(() -> unzip(byteSource.openStream(),outDir),shouldRetry,DEFAULT_RETRY_COUNT);\n  }\n catch (  IOException e) {\n    throw e;\n  }\ncatch (  Exception e) {\n    throw Throwables.propagate(e);\n  }\n}\n else {\n  final File tmpFile=File.createTempFile(\"compressionUtilZipCache\",ZIP_SUFFIX);\n  try {\n    FileUtils.retryCopy(byteSource,tmpFile,shouldRetry,DEFAULT_RETRY_COUNT);\n    return unzip(tmpFile,outDir);\n  }\n  finally {\n    if (!tmpFile.delete()) {\n      log.warn(\"Could not delete zip cache at [%s]\",tmpFile.toString());\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 80,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 791,
        "startLineNumber" : 184,
        "startColumnNumber" : 2,
        "endLineNumber" : 216,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!cacheLocally) {\n    try {\n      return RetryUtils.retry(() -> unzip(byteSource.openStream(),outDir),shouldRetry,DEFAULT_RETRY_COUNT);\n    }\n catch (    IOException e) {\n      throw e;\n    }\ncatch (    Exception e) {\n      throw Throwables.propagate(e);\n    }\n  }\n else {\n    final File tmpFile=File.createTempFile(\"compressionUtilZipCache\",ZIP_SUFFIX);\n    try {\n      FileUtils.retryCopy(byteSource,tmpFile,shouldRetry,DEFAULT_RETRY_COUNT);\n      return unzip(tmpFile,outDir);\n    }\n  finally {\n      if (!tmpFile.delete()) {\n        log.warn(\"Could not delete zip cache at [%s]\",tmpFile.toString());\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 81,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1965,
        "startLineNumber" : 162,
        "startColumnNumber" : 2,
        "endLineNumber" : 216,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Unzip the byteSource to the output directory. If cacheLocally is true, the byteSource is cached to local disk before unzipping. This may cause more predictable behavior than trying to unzip a large file directly off a network stream, for example. * @param byteSource The ByteSource which supplies the zip data\n * @param byteSource   The ByteSource which supplies the zip data\n * @param outDir       The output directory to put the contents of the zip\n * @param shouldRetry  A predicate expression to determine if a new InputStream should be acquired from ByteSourceand the copy attempted again. If you want to retry on any exception, use {@link FileUtils#IS_EXCEPTION}.\n * @param cacheLocally A boolean flag to indicate if the data should be cached locally\n * @return A FileCopyResult containing the result of writing the zip entries to disk\n * @throws IOException\n */\npublic static FileUtils.FileCopyResult unzip(final ByteSource byteSource,final File outDir,final Predicate<Throwable> shouldRetry,boolean cacheLocally) throws IOException {\n  if (!cacheLocally) {\n    try {\n      return RetryUtils.retry(() -> unzip(byteSource.openStream(),outDir),shouldRetry,DEFAULT_RETRY_COUNT);\n    }\n catch (    IOException e) {\n      throw e;\n    }\ncatch (    Exception e) {\n      throw Throwables.propagate(e);\n    }\n  }\n else {\n    final File tmpFile=File.createTempFile(\"compressionUtilZipCache\",ZIP_SUFFIX);\n    try {\n      FileUtils.retryCopy(byteSource,tmpFile,shouldRetry,DEFAULT_RETRY_COUNT);\n      return unzip(tmpFile,outDir);\n    }\n  finally {\n      if (!tmpFile.delete()) {\n        log.warn(\"Could not delete zip cache at [%s]\",tmpFile.toString());\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 113,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 200,
        "startColumnNumber" : 6,
        "endLineNumber" : 200,
        "endColumnNumber" : 86
      },
      "nodeContext" : "final File tmpFile=File.createTempFile(\"compressionUtilZipCache\",ZIP_SUFFIX);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.io.File"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 200,
    "startColumnNumber" : 27,
    "endLineNumber" : 200,
    "endColumnNumber" : 31
  } ],
  "layoutRelationDataList" : [ ]
}