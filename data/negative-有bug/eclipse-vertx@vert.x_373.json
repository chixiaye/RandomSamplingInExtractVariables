{
  "id" : 373,
  "expression" : "new FromStringBasedConverter<>(clazz,method)",
  "projectName" : "eclipse-vertx@vert.x",
  "commitID" : "665e20a715caff0cbaa72adfd1bb374c543281f0",
  "filePath" : "/src/main/java/io/vertx/core/cli/converters/FromStringBasedConverter.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new FromStringBasedConverter<>(clazz,method)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 45,
      "startLineNumber" : 56,
      "startColumnNumber" : 15,
      "endLineNumber" : 56,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 6,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 56,
        "startColumnNumber" : 8,
        "endLineNumber" : 56,
        "endColumnNumber" : 61
      },
      "nodeContext" : "return new FromStringBasedConverter<>(clazz,method);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 157,
        "startLineNumber" : 52,
        "startColumnNumber" : 52,
        "endLineNumber" : 57,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (!method.isAccessible()) {\n    method.setAccessible(true);\n  }\n  return new FromStringBasedConverter<>(clazz,method);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 300,
        "startLineNumber" : 52,
        "startColumnNumber" : 6,
        "endLineNumber" : 60,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (Modifier.isStatic(method.getModifiers())) {\n  if (!method.isAccessible()) {\n    method.setAccessible(true);\n  }\n  return new FromStringBasedConverter<>(clazz,method);\n}\n else {\n  return null;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 29,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 386,
        "startLineNumber" : 50,
        "startColumnNumber" : 8,
        "endLineNumber" : 61,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final Method method=clazz.getMethod(FROM_STRING,String.class);\n  if (Modifier.isStatic(method.getModifiers())) {\n    if (!method.isAccessible()) {\n      method.setAccessible(true);\n    }\n    return new FromStringBasedConverter<>(clazz,method);\n  }\n else {\n    return null;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 43,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 513,
        "startLineNumber" : 50,
        "startColumnNumber" : 4,
        "endLineNumber" : 64,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  final Method method=clazz.getMethod(FROM_STRING,String.class);\n  if (Modifier.isStatic(method.getModifiers())) {\n    if (!method.isAccessible()) {\n      method.setAccessible(true);\n    }\n    return new FromStringBasedConverter<>(clazz,method);\n  }\n else {\n    return null;\n  }\n}\n catch (NoSuchMethodException e) {\n  return null;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 52,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 524,
        "startLineNumber" : 49,
        "startColumnNumber" : 78,
        "endLineNumber" : 66,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  try {\n    final Method method=clazz.getMethod(FROM_STRING,String.class);\n    if (Modifier.isStatic(method.getModifiers())) {\n      if (!method.isAccessible()) {\n        method.setAccessible(true);\n      }\n      return new FromStringBasedConverter<>(clazz,method);\n    }\n else {\n      return null;\n    }\n  }\n catch (  NoSuchMethodException e) {\n    return null;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 53,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 989,
        "startLineNumber" : 40,
        "startColumnNumber" : 2,
        "endLineNumber" : 66,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Checks whether the given class can be used by the  {@link FromStringBasedConverter} (i.e. has a static'fromString' method taking a single String as argument). If so, creates a new instance of converter for this type.\n * @param clazz the class\n * @return a {@link FromStringBasedConverter} if the given class is eligible,{@literal null} otherwise.\n */\npublic static <T>FromStringBasedConverter<T> getIfEligible(Class<T> clazz){\n  try {\n    final Method method=clazz.getMethod(FROM_STRING,String.class);\n    if (Modifier.isStatic(method.getModifiers())) {\n      if (!method.isAccessible()) {\n        method.setAccessible(true);\n      }\n      return new FromStringBasedConverter<>(clazz,method);\n    }\n else {\n      return null;\n    }\n  }\n catch (  NoSuchMethodException e) {\n    return null;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 72,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 56,
        "startColumnNumber" : 8,
        "endLineNumber" : 56,
        "endColumnNumber" : 61
      },
      "nodeContext" : "return new FromStringBasedConverter<>(clazz,method);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 7,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "io.vertx.core.cli.converters.FromStringBasedConverter<T>"
  } ],
  "positionList" : [ {
    "charLength" : 45,
    "startLineNumber" : 56,
    "startColumnNumber" : 15,
    "endLineNumber" : 56,
    "endColumnNumber" : 60
  } ],
  "layoutRelationDataList" : [ ]
}