{
  "id" : 135,
  "expression" : "-1",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/common/src/test/java/io/netty/util/internal/MathUtilTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "-1",
    "nodeType" : "PrefixExpression",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 35,
      "startColumnNumber" : 51,
      "endLineNumber" : 35,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 2,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 35,
        "startColumnNumber" : 24,
        "endLineNumber" : 35,
        "endColumnNumber" : 54
      },
      "nodeContext" : "findNextPositivePowerOfTwo(-1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 35,
        "startColumnNumber" : 8,
        "endLineNumber" : 35,
        "endColumnNumber" : 55
      },
      "nodeContext" : "assertEquals(1,findNextPositivePowerOfTwo(-1))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 35,
        "startColumnNumber" : 8,
        "endLineNumber" : 35,
        "endColumnNumber" : 56
      },
      "nodeContext" : "assertEquals(1,findNextPositivePowerOfTwo(-1));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 506,
        "startLineNumber" : 28,
        "startColumnNumber" : 49,
        "endLineNumber" : 37,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  assertEquals(1,findNextPositivePowerOfTwo(0));\n  assertEquals(1,findNextPositivePowerOfTwo(1));\n  assertEquals(1024,findNextPositivePowerOfTwo(1000));\n  assertEquals(1024,findNextPositivePowerOfTwo(1023));\n  assertEquals(2048,findNextPositivePowerOfTwo(2048));\n  assertEquals(1 << 30,findNextPositivePowerOfTwo((1 << 30) - 1));\n  assertEquals(1,findNextPositivePowerOfTwo(-1));\n  assertEquals(1,findNextPositivePowerOfTwo(-10000));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 66,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 562,
        "startLineNumber" : 27,
        "startColumnNumber" : 4,
        "endLineNumber" : 37,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testFindNextPositivePowerOfTwo(){\n  assertEquals(1,findNextPositivePowerOfTwo(0));\n  assertEquals(1,findNextPositivePowerOfTwo(1));\n  assertEquals(1024,findNextPositivePowerOfTwo(1000));\n  assertEquals(1024,findNextPositivePowerOfTwo(1023));\n  assertEquals(2048,findNextPositivePowerOfTwo(2048));\n  assertEquals(1 << 30,findNextPositivePowerOfTwo((1 << 30) - 1));\n  assertEquals(1,findNextPositivePowerOfTwo(-1));\n  assertEquals(1,findNextPositivePowerOfTwo(-10000));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 72,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 35,
        "startColumnNumber" : 8,
        "endLineNumber" : 35,
        "endColumnNumber" : 56
      },
      "nodeContext" : "assertEquals(1,findNextPositivePowerOfTwo(-1));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 35,
    "startColumnNumber" : 51,
    "endLineNumber" : 35,
    "endColumnNumber" : 53
  } ],
  "layoutRelationDataList" : [ ]
}