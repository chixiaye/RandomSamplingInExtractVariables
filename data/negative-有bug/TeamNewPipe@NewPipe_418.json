{
  "id" : 418,
  "expression" : "0.0f",
  "projectName" : "TeamNewPipe@NewPipe",
  "commitID" : "d7574973e97fa7a3a21aa59967311f6091941830",
  "filePath" : "/app/src/main/java/us/shandian/giga/ui/adapter/MissionAdapter.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "0.0f",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 246,
      "startColumnNumber" : 35,
      "endLineNumber" : 246,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 246,
        "startColumnNumber" : 12,
        "endLineNumber" : 246,
        "endColumnNumber" : 40
      },
      "nodeContext" : "h.progress.setProgress(0.0f)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 246,
        "startColumnNumber" : 12,
        "endLineNumber" : 246,
        "endColumnNumber" : 41
      },
      "nodeContext" : "h.progress.setProgress(0.0f);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 244,
        "startColumnNumber" : 35,
        "endLineNumber" : 247,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  progress=Double.NaN;\n  h.progress.setProgress(0.0f);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 170,
        "startLineNumber" : 244,
        "startColumnNumber" : 8,
        "endLineNumber" : 249,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (mission.unknownLength) {\n  progress=Double.NaN;\n  h.progress.setProgress(0.0f);\n}\n else {\n  progress=done / length;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 25,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3643,
        "startLineNumber" : 229,
        "startColumnNumber" : 50,
        "endLineNumber" : 334,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (h == null || h.item == null || h.item.mission instanceof FinishedMission)   return;\n  DownloadMission mission=(DownloadMission)h.item.mission;\n  double done=mission.done;\n  long length=mission.getLength();\n  long now=System.currentTimeMillis();\n  boolean hasError=mission.errCode != ERROR_NOTHING;\n  h.progress.setMarquee(mission.isRecovering() || !hasError && (!mission.isInitialized() || mission.unknownLength));\n  double progress;\n  if (mission.unknownLength) {\n    progress=Double.NaN;\n    h.progress.setProgress(0.0f);\n  }\n else {\n    progress=done / length;\n  }\n  if (hasError) {\n    h.progress.setProgress(isNotFinite(progress) ? 1d : progress);\n    h.status.setText(R.string.msg_error);\n  }\n else   if (isNotFinite(progress)) {\n    h.status.setText(UNDEFINED_PROGRESS);\n  }\n else {\n    h.status.setText(String.format(\"%.2f%%\",progress * 100));\n    h.progress.setProgress(progress);\n  }\n  @StringRes int state;\n  String sizeStr=Utility.formatBytes(length).concat(\"  \");\n  if (mission.isPsFailed() || mission.errCode == ERROR_POSTPROCESSING_HOLD) {\n    h.size.setText(sizeStr);\n    return;\n  }\n else   if (!mission.running) {\n    state=mission.enqueued ? R.string.queued : R.string.paused;\n  }\n else   if (mission.isPsRunning()) {\n    state=R.string.post_processing;\n  }\n else   if (mission.isRecovering()) {\n    state=R.string.recovering;\n  }\n else {\n    state=0;\n  }\n  if (state != 0) {\n    h.size.setText(sizeStr.concat(\"(\").concat(mContext.getString(state)).concat(\")\"));\n    h.resetSpeedMeasure();\n    return;\n  }\n  if (h.lastTimestamp < 0) {\n    h.size.setText(sizeStr);\n    h.lastTimestamp=now;\n    h.lastDone=done;\n    return;\n  }\n  long deltaTime=now - h.lastTimestamp;\n  double deltaDone=done - h.lastDone;\n  if (h.lastDone > done) {\n    h.lastDone=done;\n    h.size.setText(sizeStr);\n    return;\n  }\n  if (deltaDone > 0 && deltaTime > 0) {\n    float speed=(float)((deltaDone * 1000d) / deltaTime);\n    float averageSpeed=speed;\n    if (h.lastSpeedIdx < 0) {\n      for (int i=0; i < h.lastSpeed.length; i++) {\n        h.lastSpeed[i]=speed;\n      }\n      h.lastSpeedIdx=0;\n    }\n else {\n      for (int i=0; i < h.lastSpeed.length; i++) {\n        averageSpeed+=h.lastSpeed[i];\n      }\n      averageSpeed/=h.lastSpeed.length + 1.0f;\n    }\n    String speedStr=Utility.formatSpeed(averageSpeed);\n    String etaStr;\n    if (mission.unknownLength) {\n      etaStr=\"\";\n    }\n else {\n      long eta=(long)Math.ceil((length - done) / averageSpeed);\n      etaStr=Utility.formatBytes((long)done) + \"/\" + Utility.stringifySeconds(eta)+ \"  \";\n    }\n    h.size.setText(sizeStr.concat(etaStr).concat(speedStr));\n    h.lastTimestamp=now;\n    h.lastDone=done;\n    h.lastSpeed[h.lastSpeedIdx++]=speed;\n    if (h.lastSpeedIdx >= h.lastSpeed.length)     h.lastSpeedIdx=0;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 566,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3724,
        "startLineNumber" : 228,
        "startColumnNumber" : 4,
        "endLineNumber" : 334,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressLint(\"DefaultLocale\") private void updateProgress(ViewHolderItem h){\n  if (h == null || h.item == null || h.item.mission instanceof FinishedMission)   return;\n  DownloadMission mission=(DownloadMission)h.item.mission;\n  double done=mission.done;\n  long length=mission.getLength();\n  long now=System.currentTimeMillis();\n  boolean hasError=mission.errCode != ERROR_NOTHING;\n  h.progress.setMarquee(mission.isRecovering() || !hasError && (!mission.isInitialized() || mission.unknownLength));\n  double progress;\n  if (mission.unknownLength) {\n    progress=Double.NaN;\n    h.progress.setProgress(0.0f);\n  }\n else {\n    progress=done / length;\n  }\n  if (hasError) {\n    h.progress.setProgress(isNotFinite(progress) ? 1d : progress);\n    h.status.setText(R.string.msg_error);\n  }\n else   if (isNotFinite(progress)) {\n    h.status.setText(UNDEFINED_PROGRESS);\n  }\n else {\n    h.status.setText(String.format(\"%.2f%%\",progress * 100));\n    h.progress.setProgress(progress);\n  }\n  @StringRes int state;\n  String sizeStr=Utility.formatBytes(length).concat(\"  \");\n  if (mission.isPsFailed() || mission.errCode == ERROR_POSTPROCESSING_HOLD) {\n    h.size.setText(sizeStr);\n    return;\n  }\n else   if (!mission.running) {\n    state=mission.enqueued ? R.string.queued : R.string.paused;\n  }\n else   if (mission.isPsRunning()) {\n    state=R.string.post_processing;\n  }\n else   if (mission.isRecovering()) {\n    state=R.string.recovering;\n  }\n else {\n    state=0;\n  }\n  if (state != 0) {\n    h.size.setText(sizeStr.concat(\"(\").concat(mContext.getString(state)).concat(\")\"));\n    h.resetSpeedMeasure();\n    return;\n  }\n  if (h.lastTimestamp < 0) {\n    h.size.setText(sizeStr);\n    h.lastTimestamp=now;\n    h.lastDone=done;\n    return;\n  }\n  long deltaTime=now - h.lastTimestamp;\n  double deltaDone=done - h.lastDone;\n  if (h.lastDone > done) {\n    h.lastDone=done;\n    h.size.setText(sizeStr);\n    return;\n  }\n  if (deltaDone > 0 && deltaTime > 0) {\n    float speed=(float)((deltaDone * 1000d) / deltaTime);\n    float averageSpeed=speed;\n    if (h.lastSpeedIdx < 0) {\n      for (int i=0; i < h.lastSpeed.length; i++) {\n        h.lastSpeed[i]=speed;\n      }\n      h.lastSpeedIdx=0;\n    }\n else {\n      for (int i=0; i < h.lastSpeed.length; i++) {\n        averageSpeed+=h.lastSpeed[i];\n      }\n      averageSpeed/=h.lastSpeed.length + 1.0f;\n    }\n    String speedStr=Utility.formatSpeed(averageSpeed);\n    String etaStr;\n    if (mission.unknownLength) {\n      etaStr=\"\";\n    }\n else {\n      long eta=(long)Math.ceil((length - done) / averageSpeed);\n      etaStr=Utility.formatBytes((long)done) + \"/\" + Utility.stringifySeconds(eta)+ \"  \";\n    }\n    h.size.setText(sizeStr.concat(etaStr).concat(speedStr));\n    h.lastTimestamp=now;\n    h.lastDone=done;\n    h.lastSpeed[h.lastSpeedIdx++]=speed;\n    if (h.lastSpeedIdx >= h.lastSpeed.length)     h.lastSpeedIdx=0;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 577,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 246,
        "startColumnNumber" : 12,
        "endLineNumber" : 246,
        "endColumnNumber" : 41
      },
      "nodeContext" : "h.progress.setProgress(0.0f);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "float"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 246,
    "startColumnNumber" : 35,
    "endLineNumber" : 246,
    "endColumnNumber" : 39
  } ],
  "layoutRelationDataList" : [ ]
}