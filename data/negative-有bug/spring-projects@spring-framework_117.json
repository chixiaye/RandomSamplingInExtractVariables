{
  "id" : 117,
  "expression" : "size",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-test/src/test/java/org/springframework/mock/web/MockHttpServletResponseTests.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "size",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 182,
      "startColumnNumber" : 44,
      "endLineNumber" : 182,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 182,
        "startColumnNumber" : 35,
        "endLineNumber" : 182,
        "endColumnNumber" : 49
      },
      "nodeContext" : "new byte[size]",
      "nodeType" : "ArrayCreation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 182,
        "startColumnNumber" : 2,
        "endLineNumber" : 182,
        "endColumnNumber" : 50
      },
      "nodeContext" : "response.getOutputStream().write(new byte[size])",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 182,
        "startColumnNumber" : 2,
        "endLineNumber" : 182,
        "endColumnNumber" : 51
      },
      "nodeContext" : "response.getOutputStream().write(new byte[size]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 319,
        "startLineNumber" : 177,
        "startColumnNumber" : 85,
        "endLineNumber" : 185,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  assertFalse(response.isCommitted());\n  response.getOutputStream().write('X');\n  assertFalse(response.isCommitted());\n  int size=response.getBufferSize();\n  response.getOutputStream().write(new byte[size]);\n  assertTrue(response.isCommitted());\n  assertEquals(size + 1,response.getContentAsByteArray().length);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 55,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 410,
        "startLineNumber" : 176,
        "startColumnNumber" : 1,
        "endLineNumber" : 185,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void servletOutputStreamCommittedWhenBufferSizeExceeded() throws IOException {\n  assertFalse(response.isCommitted());\n  response.getOutputStream().write('X');\n  assertFalse(response.isCommitted());\n  int size=response.getBufferSize();\n  response.getOutputStream().write(new byte[size]);\n  assertTrue(response.isCommitted());\n  assertEquals(size + 1,response.getContentAsByteArray().length);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 63,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 182,
        "startColumnNumber" : 2,
        "endLineNumber" : 182,
        "endColumnNumber" : 51
      },
      "nodeContext" : "response.getOutputStream().write(new byte[size]);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "size",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 184,
      "startColumnNumber" : 15,
      "endLineNumber" : 184,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 184,
        "startColumnNumber" : 15,
        "endLineNumber" : 184,
        "endColumnNumber" : 23
      },
      "nodeContext" : "size + 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 184,
        "startColumnNumber" : 2,
        "endLineNumber" : 184,
        "endColumnNumber" : 65
      },
      "nodeContext" : "assertEquals(size + 1,response.getContentAsByteArray().length)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 184,
        "startColumnNumber" : 2,
        "endLineNumber" : 184,
        "endColumnNumber" : 66
      },
      "nodeContext" : "assertEquals(size + 1,response.getContentAsByteArray().length);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 319,
        "startLineNumber" : 177,
        "startColumnNumber" : 85,
        "endLineNumber" : 185,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  assertFalse(response.isCommitted());\n  response.getOutputStream().write('X');\n  assertFalse(response.isCommitted());\n  int size=response.getBufferSize();\n  response.getOutputStream().write(new byte[size]);\n  assertTrue(response.isCommitted());\n  assertEquals(size + 1,response.getContentAsByteArray().length);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 55,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 410,
        "startLineNumber" : 176,
        "startColumnNumber" : 1,
        "endLineNumber" : 185,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void servletOutputStreamCommittedWhenBufferSizeExceeded() throws IOException {\n  assertFalse(response.isCommitted());\n  response.getOutputStream().write('X');\n  assertFalse(response.isCommitted());\n  int size=response.getBufferSize();\n  response.getOutputStream().write(new byte[size]);\n  assertTrue(response.isCommitted());\n  assertEquals(size + 1,response.getContentAsByteArray().length);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 63,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 184,
        "startColumnNumber" : 2,
        "endLineNumber" : 184,
        "endColumnNumber" : 66
      },
      "nodeContext" : "assertEquals(size + 1,response.getContentAsByteArray().length);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 182,
    "startColumnNumber" : 44,
    "endLineNumber" : 182,
    "endColumnNumber" : 48
  }, {
    "charLength" : 4,
    "startLineNumber" : 184,
    "startColumnNumber" : 15,
    "endLineNumber" : 184,
    "endColumnNumber" : 19
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}