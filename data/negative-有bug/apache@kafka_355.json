{
  "id" : 355,
  "expression" : "\"--max-messages\"",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/tools/src/main/java/org/apache/kafka/tools/VerifiableProducer.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"--max-messages\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 141,
      "startColumnNumber" : 27,
      "endLineNumber" : 141,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 141,
        "startColumnNumber" : 8,
        "endLineNumber" : 141,
        "endColumnNumber" : 44
      },
      "nodeContext" : "parser.addArgument(\"--max-messages\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 141,
        "startColumnNumber" : 8,
        "endLineNumber" : 142,
        "endColumnNumber" : 32
      },
      "nodeContext" : "parser.addArgument(\"--max-messages\").action(store())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 141,
        "startColumnNumber" : 8,
        "endLineNumber" : 143,
        "endColumnNumber" : 32
      },
      "nodeContext" : "parser.addArgument(\"--max-messages\").action(store()).required(false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 134,
        "startLineNumber" : 141,
        "startColumnNumber" : 8,
        "endLineNumber" : 144,
        "endColumnNumber" : 31
      },
      "nodeContext" : "parser.addArgument(\"--max-messages\").action(store()).required(false).setDefault(-1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 171,
        "startLineNumber" : 141,
        "startColumnNumber" : 8,
        "endLineNumber" : 145,
        "endColumnNumber" : 36
      },
      "nodeContext" : "parser.addArgument(\"--max-messages\").action(store()).required(false).setDefault(-1).type(Integer.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 212,
        "startLineNumber" : 141,
        "startColumnNumber" : 8,
        "endLineNumber" : 146,
        "endColumnNumber" : 40
      },
      "nodeContext" : "parser.addArgument(\"--max-messages\").action(store()).required(false).setDefault(-1).type(Integer.class).metavar(\"MAX-MESSAGES\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 23,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 249,
        "startLineNumber" : 141,
        "startColumnNumber" : 8,
        "endLineNumber" : 147,
        "endColumnNumber" : 36
      },
      "nodeContext" : "parser.addArgument(\"--max-messages\").action(store()).required(false).setDefault(-1).type(Integer.class).metavar(\"MAX-MESSAGES\").dest(\"maxMessages\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 26,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 366,
        "startLineNumber" : 141,
        "startColumnNumber" : 8,
        "endLineNumber" : 148,
        "endColumnNumber" : 116
      },
      "nodeContext" : "parser.addArgument(\"--max-messages\").action(store()).required(false).setDefault(-1).type(Integer.class).metavar(\"MAX-MESSAGES\").dest(\"maxMessages\").help(\"Produce this many messages. If -1, produce messages until the process is killed externally.\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 29,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 367,
        "startLineNumber" : 141,
        "startColumnNumber" : 8,
        "endLineNumber" : 148,
        "endColumnNumber" : 117
      },
      "nodeContext" : "parser.addArgument(\"--max-messages\").action(store()).required(false).setDefault(-1).type(Integer.class).metavar(\"MAX-MESSAGES\").dest(\"maxMessages\").help(\"Produce this many messages. If -1, produce messages until the process is killed externally.\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 30,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4076,
        "startLineNumber" : 110,
        "startColumnNumber" : 46,
        "endLineNumber" : 200,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ArgumentParser parser=ArgumentParsers.newArgumentParser(\"verifiable-producer\").defaultHelp(true).description(\"This tool produces increasing integers to the specified topic and prints JSON metadata to stdout on each \\\"send\\\" request, making externally visible which messages have been acked and which have not.\");\n  parser.addArgument(\"--topic\").action(store()).required(true).type(String.class).metavar(\"TOPIC\").help(\"Produce messages to this topic.\");\n  MutuallyExclusiveGroup connectionGroup=parser.addMutuallyExclusiveGroup(\"Connection Group\").description(\"Group of arguments for connection to brokers\").required(true);\n  connectionGroup.addArgument(\"--bootstrap-server\").action(store()).required(false).type(String.class).metavar(\"HOST1:PORT1[,HOST2:PORT2[...]]\").dest(\"bootstrapServer\").help(\"REQUIRED: The server(s) to connect to. Comma-separated list of Kafka brokers in the form HOST1:PORT1,HOST2:PORT2,...\");\n  connectionGroup.addArgument(\"--broker-list\").action(store()).required(false).type(String.class).metavar(\"HOST1:PORT1[,HOST2:PORT2[...]]\").dest(\"brokerList\").help(\"DEPRECATED, use --bootstrap-server instead; ignored if --bootstrap-server is specified.  Comma-separated list of Kafka brokers in the form HOST1:PORT1,HOST2:PORT2,...\");\n  parser.addArgument(\"--max-messages\").action(store()).required(false).setDefault(-1).type(Integer.class).metavar(\"MAX-MESSAGES\").dest(\"maxMessages\").help(\"Produce this many messages. If -1, produce messages until the process is killed externally.\");\n  parser.addArgument(\"--throughput\").action(store()).required(false).setDefault(-1).type(Integer.class).metavar(\"THROUGHPUT\").help(\"If set >= 0, throttle maximum message throughput to *approximately* THROUGHPUT messages/sec.\");\n  parser.addArgument(\"--acks\").action(store()).required(false).setDefault(-1).type(Integer.class).choices(0,1,-1).metavar(\"ACKS\").help(\"Acks required on each produced message. See Kafka docs on acks for details.\");\n  parser.addArgument(\"--producer.config\").action(store()).required(false).type(String.class).metavar(\"CONFIG_FILE\").help(\"Producer config properties file.\");\n  parser.addArgument(\"--message-create-time\").action(store()).required(false).setDefault(-1L).type(Long.class).metavar(\"CREATETIME\").dest(\"createTime\").help(\"Send messages with creation time starting at the arguments value, in milliseconds since epoch\");\n  parser.addArgument(\"--value-prefix\").action(store()).required(false).type(Integer.class).metavar(\"VALUE-PREFIX\").dest(\"valuePrefix\").help(\"If specified, each produced value will have this prefix with a dot separator\");\n  parser.addArgument(\"--repeating-keys\").action(store()).required(false).type(Integer.class).metavar(\"REPEATING-KEYS\").dest(\"repeatingKeys\").help(\"If specified, each produced record will have a key starting at 0 increment by 1 up to the number specified (exclusive), then the key is set to 0 again\");\n  return parser;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 303,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4167,
        "startLineNumber" : 109,
        "startColumnNumber" : 4,
        "endLineNumber" : 200,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Get the command-line argument parser. \n */\nprivate static ArgumentParser argParser(){\n  ArgumentParser parser=ArgumentParsers.newArgumentParser(\"verifiable-producer\").defaultHelp(true).description(\"This tool produces increasing integers to the specified topic and prints JSON metadata to stdout on each \\\"send\\\" request, making externally visible which messages have been acked and which have not.\");\n  parser.addArgument(\"--topic\").action(store()).required(true).type(String.class).metavar(\"TOPIC\").help(\"Produce messages to this topic.\");\n  MutuallyExclusiveGroup connectionGroup=parser.addMutuallyExclusiveGroup(\"Connection Group\").description(\"Group of arguments for connection to brokers\").required(true);\n  connectionGroup.addArgument(\"--bootstrap-server\").action(store()).required(false).type(String.class).metavar(\"HOST1:PORT1[,HOST2:PORT2[...]]\").dest(\"bootstrapServer\").help(\"REQUIRED: The server(s) to connect to. Comma-separated list of Kafka brokers in the form HOST1:PORT1,HOST2:PORT2,...\");\n  connectionGroup.addArgument(\"--broker-list\").action(store()).required(false).type(String.class).metavar(\"HOST1:PORT1[,HOST2:PORT2[...]]\").dest(\"brokerList\").help(\"DEPRECATED, use --bootstrap-server instead; ignored if --bootstrap-server is specified.  Comma-separated list of Kafka brokers in the form HOST1:PORT1,HOST2:PORT2,...\");\n  parser.addArgument(\"--max-messages\").action(store()).required(false).setDefault(-1).type(Integer.class).metavar(\"MAX-MESSAGES\").dest(\"maxMessages\").help(\"Produce this many messages. If -1, produce messages until the process is killed externally.\");\n  parser.addArgument(\"--throughput\").action(store()).required(false).setDefault(-1).type(Integer.class).metavar(\"THROUGHPUT\").help(\"If set >= 0, throttle maximum message throughput to *approximately* THROUGHPUT messages/sec.\");\n  parser.addArgument(\"--acks\").action(store()).required(false).setDefault(-1).type(Integer.class).choices(0,1,-1).metavar(\"ACKS\").help(\"Acks required on each produced message. See Kafka docs on acks for details.\");\n  parser.addArgument(\"--producer.config\").action(store()).required(false).type(String.class).metavar(\"CONFIG_FILE\").help(\"Producer config properties file.\");\n  parser.addArgument(\"--message-create-time\").action(store()).required(false).setDefault(-1L).type(Long.class).metavar(\"CREATETIME\").dest(\"createTime\").help(\"Send messages with creation time starting at the arguments value, in milliseconds since epoch\");\n  parser.addArgument(\"--value-prefix\").action(store()).required(false).type(Integer.class).metavar(\"VALUE-PREFIX\").dest(\"valuePrefix\").help(\"If specified, each produced value will have this prefix with a dot separator\");\n  parser.addArgument(\"--repeating-keys\").action(store()).required(false).type(Integer.class).metavar(\"REPEATING-KEYS\").dest(\"repeatingKeys\").help(\"If specified, each produced record will have a key starting at 0 increment by 1 up to the number specified (exclusive), then the key is set to 0 again\");\n  return parser;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 310,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 141,
        "startColumnNumber" : 8,
        "endLineNumber" : 141,
        "endColumnNumber" : 44
      },
      "nodeContext" : "parser.addArgument(\"--max-messages\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 141,
    "startColumnNumber" : 27,
    "endLineNumber" : 141,
    "endColumnNumber" : 43
  } ],
  "layoutRelationDataList" : [ ]
}