{
  "id" : 101,
  "expression" : "null",
  "projectName" : "apache@dubbo",
  "commitID" : "4ea0a09846fa74b7b1a6a1a548f31859a2cddcc8",
  "filePath" : "/dubbo-rpc/dubbo-rpc-dubbo/src/test/java/org/apache/dubbo/rpc/protocol/dubbo/decode/DubboTelnetDecodeTest.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 89,
      "startColumnNumber" : 29,
      "endLineNumber" : 89,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 89,
        "startColumnNumber" : 24,
        "endLineNumber" : 89,
        "endColumnNumber" : 33
      },
      "nodeContext" : "ch=null",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 89,
        "startColumnNumber" : 8,
        "endLineNumber" : 89,
        "endColumnNumber" : 34
      },
      "nodeContext" : "EmbeddedChannel ch=null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1672,
        "startLineNumber" : 86,
        "startColumnNumber" : 75,
        "endLineNumber" : 125,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ByteBuf dubboByteBuf=createDubboByteBuf();\n  EmbeddedChannel ch=null;\n  try {\n    Codec2 codec=ExtensionLoader.getExtensionLoader(Codec2.class).getExtension(\"dubbo\");\n    URL url=new ServiceConfigURL(\"dubbo\",\"localhost\",22226);\n    NettyCodecAdapter adapter=new NettyCodecAdapter(codec,url,new MockChannelHandler());\n    MockHandler mockHandler=new MockHandler(null,new MultiMessageHandler(new DecodeHandler(new HeaderExchangeHandler(new ExchangeHandlerAdapter(){\n      @Override public CompletableFuture<Object> reply(      ExchangeChannel channel,      Object msg){\n        if (checkDubboDecoded(msg)) {\n          dubbo.incrementAndGet();\n        }\n        return getDefaultFuture();\n      }\n    }\n))));\n    ch=new LocalEmbeddedChannel();\n    ch.pipeline().addLast(\"decoder\",adapter.getDecoder()).addLast(\"handler\",mockHandler);\n    ch.writeInbound(dubboByteBuf);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n finally {\n    if (ch != null) {\n      ch.close().await(200,TimeUnit.MILLISECONDS);\n    }\n  }\n  TimeUnit.MILLISECONDS.sleep(100);\n  Assertions.assertEquals(1,dubbo.get());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 173,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1838,
        "startLineNumber" : 80,
        "startColumnNumber" : 4,
        "endLineNumber" : 125,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * just dubbo request\n * @throws InterruptedException\n */\n@Test public void testDubboDecode() throws InterruptedException, IOException {\n  ByteBuf dubboByteBuf=createDubboByteBuf();\n  EmbeddedChannel ch=null;\n  try {\n    Codec2 codec=ExtensionLoader.getExtensionLoader(Codec2.class).getExtension(\"dubbo\");\n    URL url=new ServiceConfigURL(\"dubbo\",\"localhost\",22226);\n    NettyCodecAdapter adapter=new NettyCodecAdapter(codec,url,new MockChannelHandler());\n    MockHandler mockHandler=new MockHandler(null,new MultiMessageHandler(new DecodeHandler(new HeaderExchangeHandler(new ExchangeHandlerAdapter(){\n      @Override public CompletableFuture<Object> reply(      ExchangeChannel channel,      Object msg){\n        if (checkDubboDecoded(msg)) {\n          dubbo.incrementAndGet();\n        }\n        return getDefaultFuture();\n      }\n    }\n))));\n    ch=new LocalEmbeddedChannel();\n    ch.pipeline().addLast(\"decoder\",adapter.getDecoder()).addLast(\"handler\",mockHandler);\n    ch.writeInbound(dubboByteBuf);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n finally {\n    if (ch != null) {\n      ch.close().await(200,TimeUnit.MILLISECONDS);\n    }\n  }\n  TimeUnit.MILLISECONDS.sleep(100);\n  Assertions.assertEquals(1,dubbo.get());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 184,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 89,
        "startColumnNumber" : 8,
        "endLineNumber" : 89,
        "endColumnNumber" : 34
      },
      "nodeContext" : "EmbeddedChannel ch=null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 95,
      "startColumnNumber" : 54,
      "endLineNumber" : 95,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 722,
        "startLineNumber" : 95,
        "startColumnNumber" : 38,
        "endLineNumber" : 106,
        "endColumnNumber" : 41
      },
      "nodeContext" : "new MockHandler(null,new MultiMessageHandler(new DecodeHandler(new HeaderExchangeHandler(new ExchangeHandlerAdapter(){\n  @Override public CompletableFuture<Object> reply(  ExchangeChannel channel,  Object msg){\n    if (checkDubboDecoded(msg)) {\n      dubbo.incrementAndGet();\n    }\n    return getDefaultFuture();\n  }\n}\n))))",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 48,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 736,
        "startLineNumber" : 95,
        "startColumnNumber" : 24,
        "endLineNumber" : 106,
        "endColumnNumber" : 41
      },
      "nodeContext" : "mockHandler=new MockHandler(null,new MultiMessageHandler(new DecodeHandler(new HeaderExchangeHandler(new ExchangeHandlerAdapter(){\n  @Override public CompletableFuture<Object> reply(  ExchangeChannel channel,  Object msg){\n    if (checkDubboDecoded(msg)) {\n      dubbo.incrementAndGet();\n    }\n    return getDefaultFuture();\n  }\n}\n))))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 50,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 749,
        "startLineNumber" : 95,
        "startColumnNumber" : 12,
        "endLineNumber" : 106,
        "endColumnNumber" : 42
      },
      "nodeContext" : "MockHandler mockHandler=new MockHandler(null,new MultiMessageHandler(new DecodeHandler(new HeaderExchangeHandler(new ExchangeHandlerAdapter(){\n  @Override public CompletableFuture<Object> reply(  ExchangeChannel channel,  Object msg){\n    if (checkDubboDecoded(msg)) {\n      dubbo.incrementAndGet();\n    }\n    return getDefaultFuture();\n  }\n}\n))));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 53,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1279,
        "startLineNumber" : 90,
        "startColumnNumber" : 12,
        "endLineNumber" : 114,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Codec2 codec=ExtensionLoader.getExtensionLoader(Codec2.class).getExtension(\"dubbo\");\n  URL url=new ServiceConfigURL(\"dubbo\",\"localhost\",22226);\n  NettyCodecAdapter adapter=new NettyCodecAdapter(codec,url,new MockChannelHandler());\n  MockHandler mockHandler=new MockHandler(null,new MultiMessageHandler(new DecodeHandler(new HeaderExchangeHandler(new ExchangeHandlerAdapter(){\n    @Override public CompletableFuture<Object> reply(    ExchangeChannel channel,    Object msg){\n      if (checkDubboDecoded(msg)) {\n        dubbo.incrementAndGet();\n      }\n      return getDefaultFuture();\n    }\n  }\n))));\n  ch=new LocalEmbeddedChannel();\n  ch.pipeline().addLast(\"decoder\",adapter.getDecoder()).addLast(\"handler\",mockHandler);\n  ch.writeInbound(dubboByteBuf);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 117,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1474,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 120,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  Codec2 codec=ExtensionLoader.getExtensionLoader(Codec2.class).getExtension(\"dubbo\");\n  URL url=new ServiceConfigURL(\"dubbo\",\"localhost\",22226);\n  NettyCodecAdapter adapter=new NettyCodecAdapter(codec,url,new MockChannelHandler());\n  MockHandler mockHandler=new MockHandler(null,new MultiMessageHandler(new DecodeHandler(new HeaderExchangeHandler(new ExchangeHandlerAdapter(){\n    @Override public CompletableFuture<Object> reply(    ExchangeChannel channel,    Object msg){\n      if (checkDubboDecoded(msg)) {\n        dubbo.incrementAndGet();\n      }\n      return getDefaultFuture();\n    }\n  }\n))));\n  ch=new LocalEmbeddedChannel();\n  ch.pipeline().addLast(\"decoder\",adapter.getDecoder()).addLast(\"handler\",mockHandler);\n  ch.writeInbound(dubboByteBuf);\n}\n catch (Exception e) {\n  e.printStackTrace();\n}\n finally {\n  if (ch != null) {\n    ch.close().await(200,TimeUnit.MILLISECONDS);\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 144,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1672,
        "startLineNumber" : 86,
        "startColumnNumber" : 75,
        "endLineNumber" : 125,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ByteBuf dubboByteBuf=createDubboByteBuf();\n  EmbeddedChannel ch=null;\n  try {\n    Codec2 codec=ExtensionLoader.getExtensionLoader(Codec2.class).getExtension(\"dubbo\");\n    URL url=new ServiceConfigURL(\"dubbo\",\"localhost\",22226);\n    NettyCodecAdapter adapter=new NettyCodecAdapter(codec,url,new MockChannelHandler());\n    MockHandler mockHandler=new MockHandler(null,new MultiMessageHandler(new DecodeHandler(new HeaderExchangeHandler(new ExchangeHandlerAdapter(){\n      @Override public CompletableFuture<Object> reply(      ExchangeChannel channel,      Object msg){\n        if (checkDubboDecoded(msg)) {\n          dubbo.incrementAndGet();\n        }\n        return getDefaultFuture();\n      }\n    }\n))));\n    ch=new LocalEmbeddedChannel();\n    ch.pipeline().addLast(\"decoder\",adapter.getDecoder()).addLast(\"handler\",mockHandler);\n    ch.writeInbound(dubboByteBuf);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n finally {\n    if (ch != null) {\n      ch.close().await(200,TimeUnit.MILLISECONDS);\n    }\n  }\n  TimeUnit.MILLISECONDS.sleep(100);\n  Assertions.assertEquals(1,dubbo.get());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 173,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1838,
        "startLineNumber" : 80,
        "startColumnNumber" : 4,
        "endLineNumber" : 125,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * just dubbo request\n * @throws InterruptedException\n */\n@Test public void testDubboDecode() throws InterruptedException, IOException {\n  ByteBuf dubboByteBuf=createDubboByteBuf();\n  EmbeddedChannel ch=null;\n  try {\n    Codec2 codec=ExtensionLoader.getExtensionLoader(Codec2.class).getExtension(\"dubbo\");\n    URL url=new ServiceConfigURL(\"dubbo\",\"localhost\",22226);\n    NettyCodecAdapter adapter=new NettyCodecAdapter(codec,url,new MockChannelHandler());\n    MockHandler mockHandler=new MockHandler(null,new MultiMessageHandler(new DecodeHandler(new HeaderExchangeHandler(new ExchangeHandlerAdapter(){\n      @Override public CompletableFuture<Object> reply(      ExchangeChannel channel,      Object msg){\n        if (checkDubboDecoded(msg)) {\n          dubbo.incrementAndGet();\n        }\n        return getDefaultFuture();\n      }\n    }\n))));\n    ch=new LocalEmbeddedChannel();\n    ch.pipeline().addLast(\"decoder\",adapter.getDecoder()).addLast(\"handler\",mockHandler);\n    ch.writeInbound(dubboByteBuf);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n finally {\n    if (ch != null) {\n      ch.close().await(200,TimeUnit.MILLISECONDS);\n    }\n  }\n  TimeUnit.MILLISECONDS.sleep(100);\n  Assertions.assertEquals(1,dubbo.get());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 184,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 722,
        "startLineNumber" : 95,
        "startColumnNumber" : 38,
        "endLineNumber" : 106,
        "endColumnNumber" : 41
      },
      "nodeContext" : "new MockHandler(null,new MultiMessageHandler(new DecodeHandler(new HeaderExchangeHandler(new ExchangeHandlerAdapter(){\n  @Override public CompletableFuture<Object> reply(  ExchangeChannel channel,  Object msg){\n    if (checkDubboDecoded(msg)) {\n      dubbo.incrementAndGet();\n    }\n    return getDefaultFuture();\n  }\n}\n))))",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 48,
      "astHeight" : 13
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 117,
      "startColumnNumber" : 22,
      "endLineNumber" : 117,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 117,
        "startColumnNumber" : 16,
        "endLineNumber" : 117,
        "endColumnNumber" : 26
      },
      "nodeContext" : "ch != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 117,
        "startColumnNumber" : 12,
        "endLineNumber" : 119,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (ch != null) {\n  ch.close().await(200,TimeUnit.MILLISECONDS);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,finally]",
      "nodePosition" : {
        "charLength" : 117,
        "startLineNumber" : 116,
        "startColumnNumber" : 18,
        "endLineNumber" : 120,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (ch != null) {\n    ch.close().await(200,TimeUnit.MILLISECONDS);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1474,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 120,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  Codec2 codec=ExtensionLoader.getExtensionLoader(Codec2.class).getExtension(\"dubbo\");\n  URL url=new ServiceConfigURL(\"dubbo\",\"localhost\",22226);\n  NettyCodecAdapter adapter=new NettyCodecAdapter(codec,url,new MockChannelHandler());\n  MockHandler mockHandler=new MockHandler(null,new MultiMessageHandler(new DecodeHandler(new HeaderExchangeHandler(new ExchangeHandlerAdapter(){\n    @Override public CompletableFuture<Object> reply(    ExchangeChannel channel,    Object msg){\n      if (checkDubboDecoded(msg)) {\n        dubbo.incrementAndGet();\n      }\n      return getDefaultFuture();\n    }\n  }\n))));\n  ch=new LocalEmbeddedChannel();\n  ch.pipeline().addLast(\"decoder\",adapter.getDecoder()).addLast(\"handler\",mockHandler);\n  ch.writeInbound(dubboByteBuf);\n}\n catch (Exception e) {\n  e.printStackTrace();\n}\n finally {\n  if (ch != null) {\n    ch.close().await(200,TimeUnit.MILLISECONDS);\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 144,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1672,
        "startLineNumber" : 86,
        "startColumnNumber" : 75,
        "endLineNumber" : 125,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ByteBuf dubboByteBuf=createDubboByteBuf();\n  EmbeddedChannel ch=null;\n  try {\n    Codec2 codec=ExtensionLoader.getExtensionLoader(Codec2.class).getExtension(\"dubbo\");\n    URL url=new ServiceConfigURL(\"dubbo\",\"localhost\",22226);\n    NettyCodecAdapter adapter=new NettyCodecAdapter(codec,url,new MockChannelHandler());\n    MockHandler mockHandler=new MockHandler(null,new MultiMessageHandler(new DecodeHandler(new HeaderExchangeHandler(new ExchangeHandlerAdapter(){\n      @Override public CompletableFuture<Object> reply(      ExchangeChannel channel,      Object msg){\n        if (checkDubboDecoded(msg)) {\n          dubbo.incrementAndGet();\n        }\n        return getDefaultFuture();\n      }\n    }\n))));\n    ch=new LocalEmbeddedChannel();\n    ch.pipeline().addLast(\"decoder\",adapter.getDecoder()).addLast(\"handler\",mockHandler);\n    ch.writeInbound(dubboByteBuf);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n finally {\n    if (ch != null) {\n      ch.close().await(200,TimeUnit.MILLISECONDS);\n    }\n  }\n  TimeUnit.MILLISECONDS.sleep(100);\n  Assertions.assertEquals(1,dubbo.get());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 173,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1838,
        "startLineNumber" : 80,
        "startColumnNumber" : 4,
        "endLineNumber" : 125,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * just dubbo request\n * @throws InterruptedException\n */\n@Test public void testDubboDecode() throws InterruptedException, IOException {\n  ByteBuf dubboByteBuf=createDubboByteBuf();\n  EmbeddedChannel ch=null;\n  try {\n    Codec2 codec=ExtensionLoader.getExtensionLoader(Codec2.class).getExtension(\"dubbo\");\n    URL url=new ServiceConfigURL(\"dubbo\",\"localhost\",22226);\n    NettyCodecAdapter adapter=new NettyCodecAdapter(codec,url,new MockChannelHandler());\n    MockHandler mockHandler=new MockHandler(null,new MultiMessageHandler(new DecodeHandler(new HeaderExchangeHandler(new ExchangeHandlerAdapter(){\n      @Override public CompletableFuture<Object> reply(      ExchangeChannel channel,      Object msg){\n        if (checkDubboDecoded(msg)) {\n          dubbo.incrementAndGet();\n        }\n        return getDefaultFuture();\n      }\n    }\n))));\n    ch=new LocalEmbeddedChannel();\n    ch.pipeline().addLast(\"decoder\",adapter.getDecoder()).addLast(\"handler\",mockHandler);\n    ch.writeInbound(dubboByteBuf);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n finally {\n    if (ch != null) {\n      ch.close().await(200,TimeUnit.MILLISECONDS);\n    }\n  }\n  TimeUnit.MILLISECONDS.sleep(100);\n  Assertions.assertEquals(1,dubbo.get());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 184,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 117,
        "startColumnNumber" : 16,
        "endLineNumber" : 117,
        "endColumnNumber" : 26
      },
      "nodeContext" : "ch != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 89,
    "startColumnNumber" : 29,
    "endLineNumber" : 89,
    "endColumnNumber" : 33
  }, {
    "charLength" : 4,
    "startLineNumber" : 95,
    "startColumnNumber" : 54,
    "endLineNumber" : 95,
    "endColumnNumber" : 58
  }, {
    "charLength" : 4,
    "startLineNumber" : 117,
    "startColumnNumber" : 22,
    "endLineNumber" : 117,
    "endColumnNumber" : 26
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  } ]
}