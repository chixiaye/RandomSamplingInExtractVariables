{
  "id" : 206,
  "expression" : "\"The method '\"",
  "projectName" : "projectlombok@lombok",
  "commitID" : "25def866b50860715ee7c315c678b8c3d1ba9b56",
  "filePath" : "/src/eclipseAgent/lombok/eclipse/agent/PatchDelegate.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"The method '\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 235,
      "startColumnNumber" : 34,
      "endLineNumber" : 235,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 235,
        "startColumnNumber" : 34,
        "endLineNumber" : 235,
        "endColumnNumber" : 113
      },
      "nodeContext" : "\"The method '\" + dupe + \"' is being delegated by more than one specified type.\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 235,
        "startColumnNumber" : 5,
        "endLineNumber" : 235,
        "endColumnNumber" : 114
      },
      "nodeContext" : "eclipseAst.get(ann).addError(\"The method '\" + dupe + \"' is being delegated by more than one specified type.\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 235,
        "startColumnNumber" : 5,
        "endLineNumber" : 235,
        "endColumnNumber" : 115
      },
      "nodeContext" : "eclipseAst.get(ann).addError(\"The method '\" + dupe + \"' is being delegated by more than one specified type.\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 191,
        "startLineNumber" : 233,
        "startColumnNumber" : 22,
        "endLineNumber" : 236,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  EclipseAST eclipseAst=TransformEclipseAST.getAST(cud,true);\n  eclipseAst.get(ann).addError(\"The method '\" + dupe + \"' is being delegated by more than one specified type.\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 22,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 282,
        "startLineNumber" : 233,
        "startColumnNumber" : 4,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (dupe != null) {\n  EclipseAST eclipseAst=TransformEclipseAST.getAST(cud,true);\n  eclipseAst.get(ann).addError(\"The method '\" + dupe + \"' is being delegated by more than one specified type.\");\n}\n else {\n  methodsToDelegate.addAll(methodsToDelegateForThisAnn);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 32,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1855,
        "startLineNumber" : 198,
        "startColumnNumber" : 44,
        "endLineNumber" : 239,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  if (!isDelegate(ann,decl))   continue;\n  if (alreadyApplied.put(ann,MARKER) == MARKER)   continue;\n  if ((field.modifiers & ClassFileConstants.AccStatic) != 0) {\n    EclipseAST eclipseAst=TransformEclipseAST.getAST(cud,true);\n    eclipseAst.get(ann).addError(LEGALITY_OF_DELEGATE);\n    break;\n  }\n  List<ClassLiteralAccess> rawTypes=rawTypes(ann,\"types\");\n  List<ClassLiteralAccess> excludedRawTypes=rawTypes(ann,\"excludes\");\n  List<BindingTuple> methodsToExclude=new ArrayList<BindingTuple>();\n  for (  ClassLiteralAccess cla : excludedRawTypes) {\n    addAllMethodBindings(methodsToExclude,cla.type.resolveType(decl.initializerScope),new HashSet<String>(),field.name,ann);\n  }\n  Set<String> banList=new HashSet<String>();\n  for (  BindingTuple excluded : methodsToExclude)   banList.add(printSig(excluded.parameterized));\n  List<BindingTuple> methodsToDelegateForThisAnn=new ArrayList<BindingTuple>();\n  if (rawTypes.isEmpty()) {\n    addAllMethodBindings(methodsToDelegateForThisAnn,field.type.resolveType(decl.initializerScope),banList,field.name,ann);\n  }\n else {\n    for (    ClassLiteralAccess cla : rawTypes) {\n      addAllMethodBindings(methodsToDelegateForThisAnn,cla.type.resolveType(decl.initializerScope),banList,field.name,ann);\n    }\n  }\n  String dupe=containsDuplicates(methodsToDelegateForThisAnn);\n  if (dupe != null) {\n    EclipseAST eclipseAst=TransformEclipseAST.getAST(cud,true);\n    eclipseAst.get(ann).addError(\"The method '\" + dupe + \"' is being delegated by more than one specified type.\");\n  }\n else {\n    methodsToDelegate.addAll(methodsToDelegateForThisAnn);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 245,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1896,
        "startLineNumber" : 198,
        "startColumnNumber" : 3,
        "endLineNumber" : 239,
        "endColumnNumber" : 4
      },
      "nodeContext" : "for (Annotation ann : field.annotations) {\n  if (!isDelegate(ann,decl))   continue;\n  if (alreadyApplied.put(ann,MARKER) == MARKER)   continue;\n  if ((field.modifiers & ClassFileConstants.AccStatic) != 0) {\n    EclipseAST eclipseAst=TransformEclipseAST.getAST(cud,true);\n    eclipseAst.get(ann).addError(LEGALITY_OF_DELEGATE);\n    break;\n  }\n  List<ClassLiteralAccess> rawTypes=rawTypes(ann,\"types\");\n  List<ClassLiteralAccess> excludedRawTypes=rawTypes(ann,\"excludes\");\n  List<BindingTuple> methodsToExclude=new ArrayList<BindingTuple>();\n  for (  ClassLiteralAccess cla : excludedRawTypes) {\n    addAllMethodBindings(methodsToExclude,cla.type.resolveType(decl.initializerScope),new HashSet<String>(),field.name,ann);\n  }\n  Set<String> banList=new HashSet<String>();\n  for (  BindingTuple excluded : methodsToExclude)   banList.add(printSig(excluded.parameterized));\n  List<BindingTuple> methodsToDelegateForThisAnn=new ArrayList<BindingTuple>();\n  if (rawTypes.isEmpty()) {\n    addAllMethodBindings(methodsToDelegateForThisAnn,field.type.resolveType(decl.initializerScope),banList,field.name,ann);\n  }\n else {\n    for (    ClassLiteralAccess cla : rawTypes) {\n      addAllMethodBindings(methodsToDelegateForThisAnn,cla.type.resolveType(decl.initializerScope),banList,field.name,ann);\n    }\n  }\n  String dupe=containsDuplicates(methodsToDelegateForThisAnn);\n  if (dupe != null) {\n    EclipseAST eclipseAst=TransformEclipseAST.getAST(cud,true);\n    eclipseAst.get(ann).addError(\"The method '\" + dupe + \"' is being delegated by more than one specified type.\");\n  }\n else {\n    methodsToDelegate.addAll(methodsToDelegateForThisAnn);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 253,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1949,
        "startLineNumber" : 196,
        "startColumnNumber" : 70,
        "endLineNumber" : 240,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (field.annotations == null)   continue;\n  for (  Annotation ann : field.annotations) {\n    if (!isDelegate(ann,decl))     continue;\n    if (alreadyApplied.put(ann,MARKER) == MARKER)     continue;\n    if ((field.modifiers & ClassFileConstants.AccStatic) != 0) {\n      EclipseAST eclipseAst=TransformEclipseAST.getAST(cud,true);\n      eclipseAst.get(ann).addError(LEGALITY_OF_DELEGATE);\n      break;\n    }\n    List<ClassLiteralAccess> rawTypes=rawTypes(ann,\"types\");\n    List<ClassLiteralAccess> excludedRawTypes=rawTypes(ann,\"excludes\");\n    List<BindingTuple> methodsToExclude=new ArrayList<BindingTuple>();\n    for (    ClassLiteralAccess cla : excludedRawTypes) {\n      addAllMethodBindings(methodsToExclude,cla.type.resolveType(decl.initializerScope),new HashSet<String>(),field.name,ann);\n    }\n    Set<String> banList=new HashSet<String>();\n    for (    BindingTuple excluded : methodsToExclude)     banList.add(printSig(excluded.parameterized));\n    List<BindingTuple> methodsToDelegateForThisAnn=new ArrayList<BindingTuple>();\n    if (rawTypes.isEmpty()) {\n      addAllMethodBindings(methodsToDelegateForThisAnn,field.type.resolveType(decl.initializerScope),banList,field.name,ann);\n    }\n else {\n      for (      ClassLiteralAccess cla : rawTypes) {\n        addAllMethodBindings(methodsToDelegateForThisAnn,cla.type.resolveType(decl.initializerScope),banList,field.name,ann);\n      }\n    }\n    String dupe=containsDuplicates(methodsToDelegateForThisAnn);\n    if (dupe != null) {\n      EclipseAST eclipseAst=TransformEclipseAST.getAST(cud,true);\n      eclipseAst.get(ann).addError(\"The method '\" + dupe + \"' is being delegated by more than one specified type.\");\n    }\n else {\n      methodsToDelegate.addAll(methodsToDelegateForThisAnn);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 261,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1992,
        "startLineNumber" : 196,
        "startColumnNumber" : 27,
        "endLineNumber" : 240,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (FieldDeclaration field : decl.fields) {\n  if (field.annotations == null)   continue;\n  for (  Annotation ann : field.annotations) {\n    if (!isDelegate(ann,decl))     continue;\n    if (alreadyApplied.put(ann,MARKER) == MARKER)     continue;\n    if ((field.modifiers & ClassFileConstants.AccStatic) != 0) {\n      EclipseAST eclipseAst=TransformEclipseAST.getAST(cud,true);\n      eclipseAst.get(ann).addError(LEGALITY_OF_DELEGATE);\n      break;\n    }\n    List<ClassLiteralAccess> rawTypes=rawTypes(ann,\"types\");\n    List<ClassLiteralAccess> excludedRawTypes=rawTypes(ann,\"excludes\");\n    List<BindingTuple> methodsToExclude=new ArrayList<BindingTuple>();\n    for (    ClassLiteralAccess cla : excludedRawTypes) {\n      addAllMethodBindings(methodsToExclude,cla.type.resolveType(decl.initializerScope),new HashSet<String>(),field.name,ann);\n    }\n    Set<String> banList=new HashSet<String>();\n    for (    BindingTuple excluded : methodsToExclude)     banList.add(printSig(excluded.parameterized));\n    List<BindingTuple> methodsToDelegateForThisAnn=new ArrayList<BindingTuple>();\n    if (rawTypes.isEmpty()) {\n      addAllMethodBindings(methodsToDelegateForThisAnn,field.type.resolveType(decl.initializerScope),banList,field.name,ann);\n    }\n else {\n      for (      ClassLiteralAccess cla : rawTypes) {\n        addAllMethodBindings(methodsToDelegateForThisAnn,cla.type.resolveType(decl.initializerScope),banList,field.name,ann);\n      }\n    }\n    String dupe=containsDuplicates(methodsToDelegateForThisAnn);\n    if (dupe != null) {\n      EclipseAST eclipseAst=TransformEclipseAST.getAST(cud,true);\n      eclipseAst.get(ann).addError(\"The method '\" + dupe + \"' is being delegated by more than one specified type.\");\n    }\n else {\n      methodsToDelegate.addAll(methodsToDelegateForThisAnn);\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 269,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2017,
        "startLineNumber" : 196,
        "startColumnNumber" : 2,
        "endLineNumber" : 240,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (decl.fields != null) for (FieldDeclaration field : decl.fields) {\n  if (field.annotations == null)   continue;\n  for (  Annotation ann : field.annotations) {\n    if (!isDelegate(ann,decl))     continue;\n    if (alreadyApplied.put(ann,MARKER) == MARKER)     continue;\n    if ((field.modifiers & ClassFileConstants.AccStatic) != 0) {\n      EclipseAST eclipseAst=TransformEclipseAST.getAST(cud,true);\n      eclipseAst.get(ann).addError(LEGALITY_OF_DELEGATE);\n      break;\n    }\n    List<ClassLiteralAccess> rawTypes=rawTypes(ann,\"types\");\n    List<ClassLiteralAccess> excludedRawTypes=rawTypes(ann,\"excludes\");\n    List<BindingTuple> methodsToExclude=new ArrayList<BindingTuple>();\n    for (    ClassLiteralAccess cla : excludedRawTypes) {\n      addAllMethodBindings(methodsToExclude,cla.type.resolveType(decl.initializerScope),new HashSet<String>(),field.name,ann);\n    }\n    Set<String> banList=new HashSet<String>();\n    for (    BindingTuple excluded : methodsToExclude)     banList.add(printSig(excluded.parameterized));\n    List<BindingTuple> methodsToDelegateForThisAnn=new ArrayList<BindingTuple>();\n    if (rawTypes.isEmpty()) {\n      addAllMethodBindings(methodsToDelegateForThisAnn,field.type.resolveType(decl.initializerScope),banList,field.name,ann);\n    }\n else {\n      for (      ClassLiteralAccess cla : rawTypes) {\n        addAllMethodBindings(methodsToDelegateForThisAnn,cla.type.resolveType(decl.initializerScope),banList,field.name,ann);\n      }\n    }\n    String dupe=containsDuplicates(methodsToDelegateForThisAnn);\n    if (dupe != null) {\n      EclipseAST eclipseAst=TransformEclipseAST.getAST(cud,true);\n      eclipseAst.get(ann).addError(\"The method '\" + dupe + \"' is being delegated by more than one specified type.\");\n    }\n else {\n      methodsToDelegate.addAll(methodsToDelegateForThisAnn);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 275,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2104,
        "startLineNumber" : 192,
        "startColumnNumber" : 137,
        "endLineNumber" : 241,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  TypeDeclaration decl=scope.referenceContext;\n  if (decl == null)   return;\n  if (decl.fields != null)   for (  FieldDeclaration field : decl.fields) {\n    if (field.annotations == null)     continue;\n    for (    Annotation ann : field.annotations) {\n      if (!isDelegate(ann,decl))       continue;\n      if (alreadyApplied.put(ann,MARKER) == MARKER)       continue;\n      if ((field.modifiers & ClassFileConstants.AccStatic) != 0) {\n        EclipseAST eclipseAst=TransformEclipseAST.getAST(cud,true);\n        eclipseAst.get(ann).addError(LEGALITY_OF_DELEGATE);\n        break;\n      }\n      List<ClassLiteralAccess> rawTypes=rawTypes(ann,\"types\");\n      List<ClassLiteralAccess> excludedRawTypes=rawTypes(ann,\"excludes\");\n      List<BindingTuple> methodsToExclude=new ArrayList<BindingTuple>();\n      for (      ClassLiteralAccess cla : excludedRawTypes) {\n        addAllMethodBindings(methodsToExclude,cla.type.resolveType(decl.initializerScope),new HashSet<String>(),field.name,ann);\n      }\n      Set<String> banList=new HashSet<String>();\n      for (      BindingTuple excluded : methodsToExclude)       banList.add(printSig(excluded.parameterized));\n      List<BindingTuple> methodsToDelegateForThisAnn=new ArrayList<BindingTuple>();\n      if (rawTypes.isEmpty()) {\n        addAllMethodBindings(methodsToDelegateForThisAnn,field.type.resolveType(decl.initializerScope),banList,field.name,ann);\n      }\n else {\n        for (        ClassLiteralAccess cla : rawTypes) {\n          addAllMethodBindings(methodsToDelegateForThisAnn,cla.type.resolveType(decl.initializerScope),banList,field.name,ann);\n        }\n      }\n      String dupe=containsDuplicates(methodsToDelegateForThisAnn);\n      if (dupe != null) {\n        EclipseAST eclipseAst=TransformEclipseAST.getAST(cud,true);\n        eclipseAst.get(ann).addError(\"The method '\" + dupe + \"' is being delegated by more than one specified type.\");\n      }\n else {\n        methodsToDelegate.addAll(methodsToDelegateForThisAnn);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 289,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2240,
        "startLineNumber" : 192,
        "startColumnNumber" : 1,
        "endLineNumber" : 241,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private static void fillMethodBindingsForFields(CompilationUnitDeclaration cud,ClassScope scope,List<BindingTuple> methodsToDelegate){\n  TypeDeclaration decl=scope.referenceContext;\n  if (decl == null)   return;\n  if (decl.fields != null)   for (  FieldDeclaration field : decl.fields) {\n    if (field.annotations == null)     continue;\n    for (    Annotation ann : field.annotations) {\n      if (!isDelegate(ann,decl))       continue;\n      if (alreadyApplied.put(ann,MARKER) == MARKER)       continue;\n      if ((field.modifiers & ClassFileConstants.AccStatic) != 0) {\n        EclipseAST eclipseAst=TransformEclipseAST.getAST(cud,true);\n        eclipseAst.get(ann).addError(LEGALITY_OF_DELEGATE);\n        break;\n      }\n      List<ClassLiteralAccess> rawTypes=rawTypes(ann,\"types\");\n      List<ClassLiteralAccess> excludedRawTypes=rawTypes(ann,\"excludes\");\n      List<BindingTuple> methodsToExclude=new ArrayList<BindingTuple>();\n      for (      ClassLiteralAccess cla : excludedRawTypes) {\n        addAllMethodBindings(methodsToExclude,cla.type.resolveType(decl.initializerScope),new HashSet<String>(),field.name,ann);\n      }\n      Set<String> banList=new HashSet<String>();\n      for (      BindingTuple excluded : methodsToExclude)       banList.add(printSig(excluded.parameterized));\n      List<BindingTuple> methodsToDelegateForThisAnn=new ArrayList<BindingTuple>();\n      if (rawTypes.isEmpty()) {\n        addAllMethodBindings(methodsToDelegateForThisAnn,field.type.resolveType(decl.initializerScope),banList,field.name,ann);\n      }\n else {\n        for (        ClassLiteralAccess cla : rawTypes) {\n          addAllMethodBindings(methodsToDelegateForThisAnn,cla.type.resolveType(decl.initializerScope),banList,field.name,ann);\n        }\n      }\n      String dupe=containsDuplicates(methodsToDelegateForThisAnn);\n      if (dupe != null) {\n        EclipseAST eclipseAst=TransformEclipseAST.getAST(cud,true);\n        eclipseAst.get(ann).addError(\"The method '\" + dupe + \"' is being delegated by more than one specified type.\");\n      }\n else {\n        methodsToDelegate.addAll(methodsToDelegateForThisAnn);\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 309,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 235,
        "startColumnNumber" : 5,
        "endLineNumber" : 235,
        "endColumnNumber" : 115
      },
      "nodeContext" : "eclipseAst.get(ann).addError(\"The method '\" + dupe + \"' is being delegated by more than one specified type.\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 235,
    "startColumnNumber" : 34,
    "endLineNumber" : 235,
    "endColumnNumber" : 48
  } ],
  "layoutRelationDataList" : [ ]
}