{
  "id" : 185,
  "expression" : "Function.Resources",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-functions/utils/src/test/java/org/apache/pulsar/functions/utils/FunctionConfigUtilsTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Function.Resources",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 526,
      "startColumnNumber" : 8,
      "endLineNumber" : 526,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,type]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 526,
        "startColumnNumber" : 8,
        "endLineNumber" : 526,
        "endColumnNumber" : 26
      },
      "nodeContext" : "Function.Resources",
      "nodeType" : "SimpleType",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 120,
        "startLineNumber" : 526,
        "startColumnNumber" : 8,
        "endLineNumber" : 526,
        "endColumnNumber" : 128
      },
      "nodeContext" : "Function.Resources resources=Function.Resources.newBuilder().setCpu(1.5).setDisk(1024 * 20).setRam(1024 * 10).build();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 27,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3378,
        "startLineNumber" : 505,
        "startColumnNumber" : 55,
        "endLineNumber" : 565,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String name=\"test1\";\n  String namespace=\"ns1\";\n  String tenant=\"tenant1\";\n  String classname=getClass().getName();\n  int parallelism=3;\n  Map<String,String> userConfig=new HashMap<>();\n  userConfig.put(\"key1\",\"val1\");\n  Function.ProcessingGuarantees processingGuarantees=Function.ProcessingGuarantees.EFFECTIVELY_ONCE;\n  Function.FunctionDetails.Runtime runtime=Function.FunctionDetails.Runtime.JAVA;\n  Function.SinkSpec sinkSpec=Function.SinkSpec.newBuilder().setTopic(\"sinkTopic1\").build();\n  Map<String,Function.ConsumerSpec> consumerSpecMap=new HashMap<>();\n  consumerSpecMap.put(\"sourceTopic1\",Function.ConsumerSpec.newBuilder().setSchemaType(JSONSchema.class.getName()).build());\n  Function.SourceSpec sourceSpec=Function.SourceSpec.newBuilder().putAllInputSpecs(consumerSpecMap).setSubscriptionType(Function.SubscriptionType.FAILOVER).setCleanupSubscription(true).build();\n  boolean autoAck=true;\n  String logTopic=\"log-topic1\";\n  Function.Resources resources=Function.Resources.newBuilder().setCpu(1.5).setDisk(1024 * 20).setRam(1024 * 10).build();\n  String packageUrl=\"http://package.url\";\n  Map<String,String> secretsMap=new HashMap<>();\n  secretsMap.put(\"secretConfigKey1\",\"secretConfigVal1\");\n  Function.RetryDetails retryDetails=Function.RetryDetails.newBuilder().setDeadLetterTopic(\"dead-letter-1\").build();\n  Function.FunctionDetails functionDetails=Function.FunctionDetails.newBuilder().setNamespace(namespace).setTenant(tenant).setName(name).setClassName(classname).setParallelism(parallelism).setUserConfig(new Gson().toJson(userConfig)).setProcessingGuarantees(processingGuarantees).setRuntime(runtime).setSink(sinkSpec).setSource(sourceSpec).setAutoAck(autoAck).setLogTopic(logTopic).setResources(resources).setPackageUrl(packageUrl).setSecretsMap(new Gson().toJson(secretsMap)).setRetryDetails(retryDetails).build();\n  FunctionConfig functionConfig=FunctionConfigUtils.convertFromDetails(functionDetails);\n  assertEquals(functionConfig.getTenant(),tenant);\n  assertEquals(functionConfig.getNamespace(),namespace);\n  assertEquals(functionConfig.getName(),name);\n  assertEquals(functionConfig.getClassName(),classname);\n  assertEquals(functionConfig.getLogTopic(),logTopic);\n  assertEquals((Object)functionConfig.getResources().getCpu(),resources.getCpu());\n  assertEquals(functionConfig.getResources().getDisk().longValue(),resources.getDisk());\n  assertEquals(functionConfig.getResources().getRam().longValue(),resources.getRam());\n  assertEquals(functionConfig.getOutput(),sinkSpec.getTopic());\n  assertEquals(functionConfig.getInputSpecs().keySet(),sourceSpec.getInputSpecsMap().keySet());\n  assertEquals(functionConfig.getCleanupSubscription().booleanValue(),sourceSpec.getCleanupSubscription());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 430,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3439,
        "startLineNumber" : 504,
        "startColumnNumber" : 4,
        "endLineNumber" : 565,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testFunctionConfigConvertFromDetails(){\n  String name=\"test1\";\n  String namespace=\"ns1\";\n  String tenant=\"tenant1\";\n  String classname=getClass().getName();\n  int parallelism=3;\n  Map<String,String> userConfig=new HashMap<>();\n  userConfig.put(\"key1\",\"val1\");\n  Function.ProcessingGuarantees processingGuarantees=Function.ProcessingGuarantees.EFFECTIVELY_ONCE;\n  Function.FunctionDetails.Runtime runtime=Function.FunctionDetails.Runtime.JAVA;\n  Function.SinkSpec sinkSpec=Function.SinkSpec.newBuilder().setTopic(\"sinkTopic1\").build();\n  Map<String,Function.ConsumerSpec> consumerSpecMap=new HashMap<>();\n  consumerSpecMap.put(\"sourceTopic1\",Function.ConsumerSpec.newBuilder().setSchemaType(JSONSchema.class.getName()).build());\n  Function.SourceSpec sourceSpec=Function.SourceSpec.newBuilder().putAllInputSpecs(consumerSpecMap).setSubscriptionType(Function.SubscriptionType.FAILOVER).setCleanupSubscription(true).build();\n  boolean autoAck=true;\n  String logTopic=\"log-topic1\";\n  Function.Resources resources=Function.Resources.newBuilder().setCpu(1.5).setDisk(1024 * 20).setRam(1024 * 10).build();\n  String packageUrl=\"http://package.url\";\n  Map<String,String> secretsMap=new HashMap<>();\n  secretsMap.put(\"secretConfigKey1\",\"secretConfigVal1\");\n  Function.RetryDetails retryDetails=Function.RetryDetails.newBuilder().setDeadLetterTopic(\"dead-letter-1\").build();\n  Function.FunctionDetails functionDetails=Function.FunctionDetails.newBuilder().setNamespace(namespace).setTenant(tenant).setName(name).setClassName(classname).setParallelism(parallelism).setUserConfig(new Gson().toJson(userConfig)).setProcessingGuarantees(processingGuarantees).setRuntime(runtime).setSink(sinkSpec).setSource(sourceSpec).setAutoAck(autoAck).setLogTopic(logTopic).setResources(resources).setPackageUrl(packageUrl).setSecretsMap(new Gson().toJson(secretsMap)).setRetryDetails(retryDetails).build();\n  FunctionConfig functionConfig=FunctionConfigUtils.convertFromDetails(functionDetails);\n  assertEquals(functionConfig.getTenant(),tenant);\n  assertEquals(functionConfig.getNamespace(),namespace);\n  assertEquals(functionConfig.getName(),name);\n  assertEquals(functionConfig.getClassName(),classname);\n  assertEquals(functionConfig.getLogTopic(),logTopic);\n  assertEquals((Object)functionConfig.getResources().getCpu(),resources.getCpu());\n  assertEquals(functionConfig.getResources().getDisk().longValue(),resources.getDisk());\n  assertEquals(functionConfig.getResources().getRam().longValue(),resources.getRam());\n  assertEquals(functionConfig.getOutput(),sinkSpec.getTopic());\n  assertEquals(functionConfig.getInputSpecs().keySet(),sourceSpec.getInputSpecsMap().keySet());\n  assertEquals(functionConfig.getCleanupSubscription().booleanValue(),sourceSpec.getCleanupSubscription());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 436,
      "astHeight" : 24
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 120,
        "startLineNumber" : 526,
        "startColumnNumber" : 8,
        "endLineNumber" : 526,
        "endColumnNumber" : 128
      },
      "nodeContext" : "Function.Resources resources=Function.Resources.newBuilder().setCpu(1.5).setDisk(1024 * 20).setRam(1024 * 10).build();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 27,
      "astHeight" : 9
    },
    "tokenLength" : 2,
    "type" : "Function"
  } ],
  "positionList" : [ {
    "charLength" : 18,
    "startLineNumber" : 526,
    "startColumnNumber" : 8,
    "endLineNumber" : 526,
    "endColumnNumber" : 26
  } ],
  "layoutRelationDataList" : [ ]
}