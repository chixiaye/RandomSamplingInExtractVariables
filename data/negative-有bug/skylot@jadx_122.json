{
  "id" : 122,
  "expression" : "0",
  "projectName" : "skylot@jadx",
  "commitID" : "eb2a1734d3e02c19814f628e10bf80de5fb19772",
  "filePath" : "/jadx-core/src/main/java/jadx/core/dex/visitors/ssa/SSATransform.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 48,
      "startColumnNumber" : 15,
      "endLineNumber" : 48,
      "endColumnNumber" : 16
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationExpression,fragments]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 48,
        "startColumnNumber" : 11,
        "endLineNumber" : 48,
        "endColumnNumber" : 16
      },
      "nodeContext" : "i=0",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 48,
        "startColumnNumber" : 7,
        "endLineNumber" : 48,
        "endColumnNumber" : 16
      },
      "nodeContext" : "int i=0",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 48,
        "startColumnNumber" : 2,
        "endLineNumber" : 50,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0; i < regsCount; i++) {\n  placePhi(mth,i,la);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 485,
        "startLineNumber" : 44,
        "startColumnNumber" : 45,
        "endLineNumber" : 65,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  LiveVarAnalysis la=new LiveVarAnalysis(mth);\n  la.runAnalysis();\n  int regsCount=mth.getRegsCount();\n  for (int i=0; i < regsCount; i++) {\n    placePhi(mth,i,la);\n  }\n  renameVariables(mth);\n  fixLastAssignInTry(mth);\n  removeBlockerInsns(mth);\n  markThisArgs(mth.getThisArg());\n  boolean repeatFix;\n  int k=0;\n  do {\n    repeatFix=fixUselessPhi(mth);\n    if (k++ > 50) {\n      throw new JadxRuntimeException(\"Phi nodes fix limit reached!\");\n    }\n  }\n while (repeatFix);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 86,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 529,
        "startLineNumber" : 44,
        "startColumnNumber" : 1,
        "endLineNumber" : 65,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private static void process(MethodNode mth){\n  LiveVarAnalysis la=new LiveVarAnalysis(mth);\n  la.runAnalysis();\n  int regsCount=mth.getRegsCount();\n  for (int i=0; i < regsCount; i++) {\n    placePhi(mth,i,la);\n  }\n  renameVariables(mth);\n  fixLastAssignInTry(mth);\n  removeBlockerInsns(mth);\n  markThisArgs(mth.getThisArg());\n  boolean repeatFix;\n  int k=0;\n  do {\n    repeatFix=fixUselessPhi(mth);\n    if (k++ > 50) {\n      throw new JadxRuntimeException(\"Phi nodes fix limit reached!\");\n    }\n  }\n while (repeatFix);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 95,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 48,
        "startColumnNumber" : 7,
        "endLineNumber" : 48,
        "endColumnNumber" : 16
      },
      "nodeContext" : "int i=0",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 58,
      "startColumnNumber" : 10,
      "endLineNumber" : 58,
      "endColumnNumber" : 11
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 58,
        "startColumnNumber" : 6,
        "endLineNumber" : 58,
        "endColumnNumber" : 11
      },
      "nodeContext" : "k=0",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 58,
        "startColumnNumber" : 2,
        "endLineNumber" : 58,
        "endColumnNumber" : 12
      },
      "nodeContext" : "int k=0;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 485,
        "startLineNumber" : 44,
        "startColumnNumber" : 45,
        "endLineNumber" : 65,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  LiveVarAnalysis la=new LiveVarAnalysis(mth);\n  la.runAnalysis();\n  int regsCount=mth.getRegsCount();\n  for (int i=0; i < regsCount; i++) {\n    placePhi(mth,i,la);\n  }\n  renameVariables(mth);\n  fixLastAssignInTry(mth);\n  removeBlockerInsns(mth);\n  markThisArgs(mth.getThisArg());\n  boolean repeatFix;\n  int k=0;\n  do {\n    repeatFix=fixUselessPhi(mth);\n    if (k++ > 50) {\n      throw new JadxRuntimeException(\"Phi nodes fix limit reached!\");\n    }\n  }\n while (repeatFix);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 86,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 529,
        "startLineNumber" : 44,
        "startColumnNumber" : 1,
        "endLineNumber" : 65,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private static void process(MethodNode mth){\n  LiveVarAnalysis la=new LiveVarAnalysis(mth);\n  la.runAnalysis();\n  int regsCount=mth.getRegsCount();\n  for (int i=0; i < regsCount; i++) {\n    placePhi(mth,i,la);\n  }\n  renameVariables(mth);\n  fixLastAssignInTry(mth);\n  removeBlockerInsns(mth);\n  markThisArgs(mth.getThisArg());\n  boolean repeatFix;\n  int k=0;\n  do {\n    repeatFix=fixUselessPhi(mth);\n    if (k++ > 50) {\n      throw new JadxRuntimeException(\"Phi nodes fix limit reached!\");\n    }\n  }\n while (repeatFix);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 95,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 58,
        "startColumnNumber" : 2,
        "endLineNumber" : 58,
        "endColumnNumber" : 12
      },
      "nodeContext" : "int k=0;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 48,
    "startColumnNumber" : 15,
    "endLineNumber" : 48,
    "endColumnNumber" : 16
  }, {
    "charLength" : 1,
    "startLineNumber" : 58,
    "startColumnNumber" : 10,
    "endLineNumber" : 58,
    "endColumnNumber" : 11
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}