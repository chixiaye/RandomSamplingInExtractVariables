{
  "id" : 482,
  "expression" : "crcCheckPresent",
  "projectName" : "google@ExoPlayer",
  "commitID" : "4803ab3bd12b71fc32150e96475c0e16aaf6ddc5",
  "filePath" : "/library/extractor/src/main/java/com/google/android/exoplayer2/extractor/ts/LatmReader.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "crcCheckPresent",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 243,
      "startColumnNumber" : 10,
      "endLineNumber" : 243,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 243,
        "startColumnNumber" : 6,
        "endLineNumber" : 245,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (crcCheckPresent) {\n  data.skipBits(8);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2168,
        "startLineNumber" : 189,
        "startColumnNumber" : 31,
        "endLineNumber" : 246,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (audioMuxVersion == 1) {\n    latmGetValue(data);\n  }\n  if (!data.readBit()) {\n    throw ParserException.createForMalformedContainer(null,null);\n  }\n  numSubframes=data.readBits(6);\n  int numProgram=data.readBits(4);\n  int numLayer=data.readBits(3);\n  if (numProgram != 0 || numLayer != 0) {\n    throw ParserException.createForMalformedContainer(null,null);\n  }\n  if (audioMuxVersion == 0) {\n    int startPosition=data.getPosition();\n    int readBits=parseAudioSpecificConfig(data);\n    data.setPosition(startPosition);\n    byte[] initData=new byte[(readBits + 7) / 8];\n    data.readBits(initData,0,readBits);\n    Format format=new Format.Builder().setId(formatId).setSampleMimeType(MimeTypes.AUDIO_AAC).setCodecs(codecs).setChannelCount(channelCount).setSampleRate(sampleRateHz).setInitializationData(Collections.singletonList(initData)).setLanguage(language).build();\n    if (!format.equals(this.format)) {\n      this.format=format;\n      sampleDurationUs=(C.MICROS_PER_SECOND * 1024) / format.sampleRate;\n      output.format(format);\n    }\n  }\n else {\n    int ascLen=(int)latmGetValue(data);\n    int bitsRead=parseAudioSpecificConfig(data);\n    data.skipBits(ascLen - bitsRead);\n  }\n  parseFrameLength(data);\n  otherDataPresent=data.readBit();\n  otherDataLenBits=0;\n  if (otherDataPresent) {\n    if (audioMuxVersion == 1) {\n      otherDataLenBits=latmGetValue(data);\n    }\n else {\n      boolean otherDataLenEsc;\n      do {\n        otherDataLenEsc=data.readBit();\n        otherDataLenBits=(otherDataLenBits << 8) + data.readBits(8);\n      }\n while (otherDataLenEsc);\n    }\n  }\n  boolean crcCheckPresent=data.readBit();\n  if (crcCheckPresent) {\n    data.skipBits(8);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 271,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2359,
        "startLineNumber" : 189,
        "startColumnNumber" : 4,
        "endLineNumber" : 249,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (audioMuxVersionA == 0) {\n  if (audioMuxVersion == 1) {\n    latmGetValue(data);\n  }\n  if (!data.readBit()) {\n    throw ParserException.createForMalformedContainer(null,null);\n  }\n  numSubframes=data.readBits(6);\n  int numProgram=data.readBits(4);\n  int numLayer=data.readBits(3);\n  if (numProgram != 0 || numLayer != 0) {\n    throw ParserException.createForMalformedContainer(null,null);\n  }\n  if (audioMuxVersion == 0) {\n    int startPosition=data.getPosition();\n    int readBits=parseAudioSpecificConfig(data);\n    data.setPosition(startPosition);\n    byte[] initData=new byte[(readBits + 7) / 8];\n    data.readBits(initData,0,readBits);\n    Format format=new Format.Builder().setId(formatId).setSampleMimeType(MimeTypes.AUDIO_AAC).setCodecs(codecs).setChannelCount(channelCount).setSampleRate(sampleRateHz).setInitializationData(Collections.singletonList(initData)).setLanguage(language).build();\n    if (!format.equals(this.format)) {\n      this.format=format;\n      sampleDurationUs=(C.MICROS_PER_SECOND * 1024) / format.sampleRate;\n      output.format(format);\n    }\n  }\n else {\n    int ascLen=(int)latmGetValue(data);\n    int bitsRead=parseAudioSpecificConfig(data);\n    data.skipBits(ascLen - bitsRead);\n  }\n  parseFrameLength(data);\n  otherDataPresent=data.readBit();\n  otherDataLenBits=0;\n  if (otherDataPresent) {\n    if (audioMuxVersion == 1) {\n      otherDataLenBits=latmGetValue(data);\n    }\n else {\n      boolean otherDataLenEsc;\n      do {\n        otherDataLenEsc=data.readBit();\n        otherDataLenBits=(otherDataLenBits << 8) + data.readBits(8);\n      }\n while (otherDataLenEsc);\n    }\n  }\n  boolean crcCheckPresent=data.readBit();\n  if (crcCheckPresent) {\n    data.skipBits(8);\n  }\n}\n else {\n  throw ParserException.createForMalformedContainer(null,null);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 282,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2481,
        "startLineNumber" : 186,
        "startColumnNumber" : 82,
        "endLineNumber" : 250,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int audioMuxVersion=data.readBits(1);\n  audioMuxVersionA=audioMuxVersion == 1 ? data.readBits(1) : 0;\n  if (audioMuxVersionA == 0) {\n    if (audioMuxVersion == 1) {\n      latmGetValue(data);\n    }\n    if (!data.readBit()) {\n      throw ParserException.createForMalformedContainer(null,null);\n    }\n    numSubframes=data.readBits(6);\n    int numProgram=data.readBits(4);\n    int numLayer=data.readBits(3);\n    if (numProgram != 0 || numLayer != 0) {\n      throw ParserException.createForMalformedContainer(null,null);\n    }\n    if (audioMuxVersion == 0) {\n      int startPosition=data.getPosition();\n      int readBits=parseAudioSpecificConfig(data);\n      data.setPosition(startPosition);\n      byte[] initData=new byte[(readBits + 7) / 8];\n      data.readBits(initData,0,readBits);\n      Format format=new Format.Builder().setId(formatId).setSampleMimeType(MimeTypes.AUDIO_AAC).setCodecs(codecs).setChannelCount(channelCount).setSampleRate(sampleRateHz).setInitializationData(Collections.singletonList(initData)).setLanguage(language).build();\n      if (!format.equals(this.format)) {\n        this.format=format;\n        sampleDurationUs=(C.MICROS_PER_SECOND * 1024) / format.sampleRate;\n        output.format(format);\n      }\n    }\n else {\n      int ascLen=(int)latmGetValue(data);\n      int bitsRead=parseAudioSpecificConfig(data);\n      data.skipBits(ascLen - bitsRead);\n    }\n    parseFrameLength(data);\n    otherDataPresent=data.readBit();\n    otherDataLenBits=0;\n    if (otherDataPresent) {\n      if (audioMuxVersion == 1) {\n        otherDataLenBits=latmGetValue(data);\n      }\n else {\n        boolean otherDataLenEsc;\n        do {\n          otherDataLenEsc=data.readBit();\n          otherDataLenBits=(otherDataLenBits << 8) + data.readBits(8);\n        }\n while (otherDataLenEsc);\n      }\n    }\n    boolean crcCheckPresent=data.readBit();\n    if (crcCheckPresent) {\n      data.skipBits(8);\n    }\n  }\n else {\n    throw ParserException.createForMalformedContainer(null,null);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 303,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2688,
        "startLineNumber" : 184,
        "startColumnNumber" : 2,
        "endLineNumber" : 250,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Parses a StreamMuxConfig as defined in ISO/IEC 14496-3:2009 Section 1.7.3.1, Table 1.42. \n */\n@RequiresNonNull(\"output\") private void parseStreamMuxConfig(ParsableBitArray data) throws ParserException {\n  int audioMuxVersion=data.readBits(1);\n  audioMuxVersionA=audioMuxVersion == 1 ? data.readBits(1) : 0;\n  if (audioMuxVersionA == 0) {\n    if (audioMuxVersion == 1) {\n      latmGetValue(data);\n    }\n    if (!data.readBit()) {\n      throw ParserException.createForMalformedContainer(null,null);\n    }\n    numSubframes=data.readBits(6);\n    int numProgram=data.readBits(4);\n    int numLayer=data.readBits(3);\n    if (numProgram != 0 || numLayer != 0) {\n      throw ParserException.createForMalformedContainer(null,null);\n    }\n    if (audioMuxVersion == 0) {\n      int startPosition=data.getPosition();\n      int readBits=parseAudioSpecificConfig(data);\n      data.setPosition(startPosition);\n      byte[] initData=new byte[(readBits + 7) / 8];\n      data.readBits(initData,0,readBits);\n      Format format=new Format.Builder().setId(formatId).setSampleMimeType(MimeTypes.AUDIO_AAC).setCodecs(codecs).setChannelCount(channelCount).setSampleRate(sampleRateHz).setInitializationData(Collections.singletonList(initData)).setLanguage(language).build();\n      if (!format.equals(this.format)) {\n        this.format=format;\n        sampleDurationUs=(C.MICROS_PER_SECOND * 1024) / format.sampleRate;\n        output.format(format);\n      }\n    }\n else {\n      int ascLen=(int)latmGetValue(data);\n      int bitsRead=parseAudioSpecificConfig(data);\n      data.skipBits(ascLen - bitsRead);\n    }\n    parseFrameLength(data);\n    otherDataPresent=data.readBit();\n    otherDataLenBits=0;\n    if (otherDataPresent) {\n      if (audioMuxVersion == 1) {\n        otherDataLenBits=latmGetValue(data);\n      }\n else {\n        boolean otherDataLenEsc;\n        do {\n          otherDataLenEsc=data.readBit();\n          otherDataLenBits=(otherDataLenBits << 8) + data.readBits(8);\n        }\n while (otherDataLenEsc);\n      }\n    }\n    boolean crcCheckPresent=data.readBit();\n    if (crcCheckPresent) {\n      data.skipBits(8);\n    }\n  }\n else {\n    throw ParserException.createForMalformedContainer(null,null);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 317,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 243,
        "startColumnNumber" : 6,
        "endLineNumber" : 245,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (crcCheckPresent) {\n  data.skipBits(8);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 243,
    "startColumnNumber" : 10,
    "endLineNumber" : 243,
    "endColumnNumber" : 25
  } ],
  "layoutRelationDataList" : [ ]
}