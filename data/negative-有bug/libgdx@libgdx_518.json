{
  "id" : 518,
  "expression" : "y",
  "projectName" : "libgdx@libgdx",
  "commitID" : "3485b16e8979c0141421bc80cb8831b7a0403f67",
  "filePath" : "/gdx/src/com/badlogic/gdx/maps/tiled/renderers/IsometricStaggeredTiledMapRenderer.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "y",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 73,
      "startColumnNumber" : 25,
      "endLineNumber" : 73,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 73,
        "startColumnNumber" : 25,
        "endLineNumber" : 73,
        "endColumnNumber" : 34
      },
      "nodeContext" : "y >= minY",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3235,
        "startLineNumber" : 73,
        "startColumnNumber" : 2,
        "endLineNumber" : 188,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int y=maxY - 1; y >= minY; y--) {\n  float offsetX=(y % 2 == 1) ? layerTileWidth50 : 0;\n  for (int x=maxX - 1; x >= minX; x--) {\n    final TiledMapTileLayer.Cell cell=layer.getCell(x,y);\n    if (cell == null)     continue;\n    final TiledMapTile tile=cell.getTile();\n    if (tile != null) {\n      final boolean flipX=cell.getFlipHorizontally();\n      final boolean flipY=cell.getFlipVertically();\n      final int rotations=cell.getRotation();\n      TextureRegion region=tile.getTextureRegion();\n      float x1=x * layerTileWidth - offsetX + tile.getOffsetX() * unitScale + layerOffsetX;\n      float y1=y * layerTileHeight50 + tile.getOffsetY() * unitScale + layerOffsetY;\n      float x2=x1 + region.getRegionWidth() * unitScale;\n      float y2=y1 + region.getRegionHeight() * unitScale;\n      float u1=region.getU();\n      float v1=region.getV2();\n      float u2=region.getU2();\n      float v2=region.getV();\n      vertices[X1]=x1;\n      vertices[Y1]=y1;\n      vertices[C1]=color;\n      vertices[U1]=u1;\n      vertices[V1]=v1;\n      vertices[X2]=x1;\n      vertices[Y2]=y2;\n      vertices[C2]=color;\n      vertices[U2]=u1;\n      vertices[V2]=v2;\n      vertices[X3]=x2;\n      vertices[Y3]=y2;\n      vertices[C3]=color;\n      vertices[U3]=u2;\n      vertices[V3]=v2;\n      vertices[X4]=x2;\n      vertices[Y4]=y1;\n      vertices[C4]=color;\n      vertices[U4]=u2;\n      vertices[V4]=v1;\n      if (flipX) {\n        float temp=vertices[U1];\n        vertices[U1]=vertices[U3];\n        vertices[U3]=temp;\n        temp=vertices[U2];\n        vertices[U2]=vertices[U4];\n        vertices[U4]=temp;\n      }\n      if (flipY) {\n        float temp=vertices[V1];\n        vertices[V1]=vertices[V3];\n        vertices[V3]=temp;\n        temp=vertices[V2];\n        vertices[V2]=vertices[V4];\n        vertices[V4]=temp;\n      }\n      if (rotations != 0) {\nswitch (rotations) {\ncase Cell.ROTATE_90:{\n            float tempV=vertices[V1];\n            vertices[V1]=vertices[V2];\n            vertices[V2]=vertices[V3];\n            vertices[V3]=vertices[V4];\n            vertices[V4]=tempV;\n            float tempU=vertices[U1];\n            vertices[U1]=vertices[U2];\n            vertices[U2]=vertices[U3];\n            vertices[U3]=vertices[U4];\n            vertices[U4]=tempU;\n            break;\n          }\ncase Cell.ROTATE_180:{\n          float tempU=vertices[U1];\n          vertices[U1]=vertices[U3];\n          vertices[U3]=tempU;\n          tempU=vertices[U2];\n          vertices[U2]=vertices[U4];\n          vertices[U4]=tempU;\n          float tempV=vertices[V1];\n          vertices[V1]=vertices[V3];\n          vertices[V3]=tempV;\n          tempV=vertices[V2];\n          vertices[V2]=vertices[V4];\n          vertices[V4]=tempV;\n          break;\n        }\ncase Cell.ROTATE_270:{\n        float tempV=vertices[V1];\n        vertices[V1]=vertices[V4];\n        vertices[V4]=vertices[V3];\n        vertices[V3]=vertices[V2];\n        vertices[V2]=tempV;\n        float tempU=vertices[U1];\n        vertices[U1]=vertices[U4];\n        vertices[U4]=vertices[U3];\n        vertices[U3]=vertices[U2];\n        vertices[U2]=tempU;\n        break;\n      }\n  }\n}\nbatch.draw(region.getTexture(),vertices,0,NUM_VERTICES);\n}\n}\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 660,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4440,
        "startLineNumber" : 48,
        "startColumnNumber" : 55,
        "endLineNumber" : 189,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  final Color batchColor=batch.getColor();\n  final float color=Color.toFloatBits(batchColor.r,batchColor.g,batchColor.b,batchColor.a * layer.getOpacity());\n  final int layerWidth=layer.getWidth();\n  final int layerHeight=layer.getHeight();\n  final float layerOffsetX=layer.getRenderOffsetX() * unitScale;\n  final float layerOffsetY=-layer.getRenderOffsetY() * unitScale;\n  final float layerTileWidth=layer.getTileWidth() * unitScale;\n  final float layerTileHeight=layer.getTileHeight() * unitScale;\n  final float layerTileWidth50=layerTileWidth * 0.50f;\n  final float layerTileHeight50=layerTileHeight * 0.50f;\n  final int minX=Math.max(0,(int)(((viewBounds.x - layerTileWidth50 - layerOffsetX) / layerTileWidth)));\n  final int maxX=Math.min(layerWidth,(int)((viewBounds.x + viewBounds.width + layerTileWidth+ layerTileWidth50 - layerOffsetX) / layerTileWidth));\n  final int minY=Math.max(0,(int)(((viewBounds.y - layerTileHeight - layerOffsetY) / layerTileHeight)));\n  final int maxY=Math.min(layerHeight,(int)((viewBounds.y + viewBounds.height + layerTileHeight - layerOffsetY) / layerTileHeight50));\n  for (int y=maxY - 1; y >= minY; y--) {\n    float offsetX=(y % 2 == 1) ? layerTileWidth50 : 0;\n    for (int x=maxX - 1; x >= minX; x--) {\n      final TiledMapTileLayer.Cell cell=layer.getCell(x,y);\n      if (cell == null)       continue;\n      final TiledMapTile tile=cell.getTile();\n      if (tile != null) {\n        final boolean flipX=cell.getFlipHorizontally();\n        final boolean flipY=cell.getFlipVertically();\n        final int rotations=cell.getRotation();\n        TextureRegion region=tile.getTextureRegion();\n        float x1=x * layerTileWidth - offsetX + tile.getOffsetX() * unitScale + layerOffsetX;\n        float y1=y * layerTileHeight50 + tile.getOffsetY() * unitScale + layerOffsetY;\n        float x2=x1 + region.getRegionWidth() * unitScale;\n        float y2=y1 + region.getRegionHeight() * unitScale;\n        float u1=region.getU();\n        float v1=region.getV2();\n        float u2=region.getU2();\n        float v2=region.getV();\n        vertices[X1]=x1;\n        vertices[Y1]=y1;\n        vertices[C1]=color;\n        vertices[U1]=u1;\n        vertices[V1]=v1;\n        vertices[X2]=x1;\n        vertices[Y2]=y2;\n        vertices[C2]=color;\n        vertices[U2]=u1;\n        vertices[V2]=v2;\n        vertices[X3]=x2;\n        vertices[Y3]=y2;\n        vertices[C3]=color;\n        vertices[U3]=u2;\n        vertices[V3]=v2;\n        vertices[X4]=x2;\n        vertices[Y4]=y1;\n        vertices[C4]=color;\n        vertices[U4]=u2;\n        vertices[V4]=v1;\n        if (flipX) {\n          float temp=vertices[U1];\n          vertices[U1]=vertices[U3];\n          vertices[U3]=temp;\n          temp=vertices[U2];\n          vertices[U2]=vertices[U4];\n          vertices[U4]=temp;\n        }\n        if (flipY) {\n          float temp=vertices[V1];\n          vertices[V1]=vertices[V3];\n          vertices[V3]=temp;\n          temp=vertices[V2];\n          vertices[V2]=vertices[V4];\n          vertices[V4]=temp;\n        }\n        if (rotations != 0) {\nswitch (rotations) {\ncase Cell.ROTATE_90:{\n              float tempV=vertices[V1];\n              vertices[V1]=vertices[V2];\n              vertices[V2]=vertices[V3];\n              vertices[V3]=vertices[V4];\n              vertices[V4]=tempV;\n              float tempU=vertices[U1];\n              vertices[U1]=vertices[U2];\n              vertices[U2]=vertices[U3];\n              vertices[U3]=vertices[U4];\n              vertices[U4]=tempU;\n              break;\n            }\ncase Cell.ROTATE_180:{\n            float tempU=vertices[U1];\n            vertices[U1]=vertices[U3];\n            vertices[U3]=tempU;\n            tempU=vertices[U2];\n            vertices[U2]=vertices[U4];\n            vertices[U4]=tempU;\n            float tempV=vertices[V1];\n            vertices[V1]=vertices[V3];\n            vertices[V3]=tempV;\n            tempV=vertices[V2];\n            vertices[V2]=vertices[V4];\n            vertices[V4]=tempV;\n            break;\n          }\ncase Cell.ROTATE_270:{\n          float tempV=vertices[V1];\n          vertices[V1]=vertices[V4];\n          vertices[V4]=vertices[V3];\n          vertices[V3]=vertices[V2];\n          vertices[V2]=tempV;\n          float tempU=vertices[U1];\n          vertices[U1]=vertices[U4];\n          vertices[U4]=vertices[U3];\n          vertices[U3]=vertices[U2];\n          vertices[U2]=tempU;\n          break;\n        }\n    }\n  }\n  batch.draw(region.getTexture(),vertices,0,NUM_VERTICES);\n}\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 862,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4505,
        "startLineNumber" : 47,
        "startColumnNumber" : 1,
        "endLineNumber" : 189,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public void renderTileLayer(TiledMapTileLayer layer){\n  final Color batchColor=batch.getColor();\n  final float color=Color.toFloatBits(batchColor.r,batchColor.g,batchColor.b,batchColor.a * layer.getOpacity());\n  final int layerWidth=layer.getWidth();\n  final int layerHeight=layer.getHeight();\n  final float layerOffsetX=layer.getRenderOffsetX() * unitScale;\n  final float layerOffsetY=-layer.getRenderOffsetY() * unitScale;\n  final float layerTileWidth=layer.getTileWidth() * unitScale;\n  final float layerTileHeight=layer.getTileHeight() * unitScale;\n  final float layerTileWidth50=layerTileWidth * 0.50f;\n  final float layerTileHeight50=layerTileHeight * 0.50f;\n  final int minX=Math.max(0,(int)(((viewBounds.x - layerTileWidth50 - layerOffsetX) / layerTileWidth)));\n  final int maxX=Math.min(layerWidth,(int)((viewBounds.x + viewBounds.width + layerTileWidth+ layerTileWidth50 - layerOffsetX) / layerTileWidth));\n  final int minY=Math.max(0,(int)(((viewBounds.y - layerTileHeight - layerOffsetY) / layerTileHeight)));\n  final int maxY=Math.min(layerHeight,(int)((viewBounds.y + viewBounds.height + layerTileHeight - layerOffsetY) / layerTileHeight50));\n  for (int y=maxY - 1; y >= minY; y--) {\n    float offsetX=(y % 2 == 1) ? layerTileWidth50 : 0;\n    for (int x=maxX - 1; x >= minX; x--) {\n      final TiledMapTileLayer.Cell cell=layer.getCell(x,y);\n      if (cell == null)       continue;\n      final TiledMapTile tile=cell.getTile();\n      if (tile != null) {\n        final boolean flipX=cell.getFlipHorizontally();\n        final boolean flipY=cell.getFlipVertically();\n        final int rotations=cell.getRotation();\n        TextureRegion region=tile.getTextureRegion();\n        float x1=x * layerTileWidth - offsetX + tile.getOffsetX() * unitScale + layerOffsetX;\n        float y1=y * layerTileHeight50 + tile.getOffsetY() * unitScale + layerOffsetY;\n        float x2=x1 + region.getRegionWidth() * unitScale;\n        float y2=y1 + region.getRegionHeight() * unitScale;\n        float u1=region.getU();\n        float v1=region.getV2();\n        float u2=region.getU2();\n        float v2=region.getV();\n        vertices[X1]=x1;\n        vertices[Y1]=y1;\n        vertices[C1]=color;\n        vertices[U1]=u1;\n        vertices[V1]=v1;\n        vertices[X2]=x1;\n        vertices[Y2]=y2;\n        vertices[C2]=color;\n        vertices[U2]=u1;\n        vertices[V2]=v2;\n        vertices[X3]=x2;\n        vertices[Y3]=y2;\n        vertices[C3]=color;\n        vertices[U3]=u2;\n        vertices[V3]=v2;\n        vertices[X4]=x2;\n        vertices[Y4]=y1;\n        vertices[C4]=color;\n        vertices[U4]=u2;\n        vertices[V4]=v1;\n        if (flipX) {\n          float temp=vertices[U1];\n          vertices[U1]=vertices[U3];\n          vertices[U3]=temp;\n          temp=vertices[U2];\n          vertices[U2]=vertices[U4];\n          vertices[U4]=temp;\n        }\n        if (flipY) {\n          float temp=vertices[V1];\n          vertices[V1]=vertices[V3];\n          vertices[V3]=temp;\n          temp=vertices[V2];\n          vertices[V2]=vertices[V4];\n          vertices[V4]=temp;\n        }\n        if (rotations != 0) {\nswitch (rotations) {\ncase Cell.ROTATE_90:{\n              float tempV=vertices[V1];\n              vertices[V1]=vertices[V2];\n              vertices[V2]=vertices[V3];\n              vertices[V3]=vertices[V4];\n              vertices[V4]=tempV;\n              float tempU=vertices[U1];\n              vertices[U1]=vertices[U2];\n              vertices[U2]=vertices[U3];\n              vertices[U3]=vertices[U4];\n              vertices[U4]=tempU;\n              break;\n            }\ncase Cell.ROTATE_180:{\n            float tempU=vertices[U1];\n            vertices[U1]=vertices[U3];\n            vertices[U3]=tempU;\n            tempU=vertices[U2];\n            vertices[U2]=vertices[U4];\n            vertices[U4]=tempU;\n            float tempV=vertices[V1];\n            vertices[V1]=vertices[V3];\n            vertices[V3]=tempV;\n            tempV=vertices[V2];\n            vertices[V2]=vertices[V4];\n            vertices[V4]=tempV;\n            break;\n          }\ncase Cell.ROTATE_270:{\n          float tempV=vertices[V1];\n          vertices[V1]=vertices[V4];\n          vertices[V4]=vertices[V3];\n          vertices[V3]=vertices[V2];\n          vertices[V2]=tempV;\n          float tempU=vertices[U1];\n          vertices[U1]=vertices[U4];\n          vertices[U4]=vertices[U3];\n          vertices[U3]=vertices[U2];\n          vertices[U2]=tempU;\n          break;\n        }\n    }\n  }\n  batch.draw(region.getTexture(),vertices,0,NUM_VERTICES);\n}\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 872,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 73,
        "startColumnNumber" : 25,
        "endLineNumber" : 73,
        "endColumnNumber" : 34
      },
      "nodeContext" : "y >= minY",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "y",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 74,
      "startColumnNumber" : 20,
      "endLineNumber" : 74,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 74,
        "startColumnNumber" : 20,
        "endLineNumber" : 74,
        "endColumnNumber" : 25
      },
      "nodeContext" : "y % 2",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 74,
        "startColumnNumber" : 20,
        "endLineNumber" : 74,
        "endColumnNumber" : 30
      },
      "nodeContext" : "y % 2 == 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 74,
        "startColumnNumber" : 19,
        "endLineNumber" : 74,
        "endColumnNumber" : 31
      },
      "nodeContext" : "(y % 2 == 1)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 74,
        "startColumnNumber" : 19,
        "endLineNumber" : 74,
        "endColumnNumber" : 54
      },
      "nodeContext" : "(y % 2 == 1) ? layerTileWidth50 : 0",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 74,
        "startColumnNumber" : 9,
        "endLineNumber" : 74,
        "endColumnNumber" : 54
      },
      "nodeContext" : "offsetX=(y % 2 == 1) ? layerTileWidth50 : 0",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 74,
        "startColumnNumber" : 3,
        "endLineNumber" : 74,
        "endColumnNumber" : 55
      },
      "nodeContext" : "float offsetX=(y % 2 == 1) ? layerTileWidth50 : 0;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 3196,
        "startLineNumber" : 73,
        "startColumnNumber" : 41,
        "endLineNumber" : 188,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  float offsetX=(y % 2 == 1) ? layerTileWidth50 : 0;\n  for (int x=maxX - 1; x >= minX; x--) {\n    final TiledMapTileLayer.Cell cell=layer.getCell(x,y);\n    if (cell == null)     continue;\n    final TiledMapTile tile=cell.getTile();\n    if (tile != null) {\n      final boolean flipX=cell.getFlipHorizontally();\n      final boolean flipY=cell.getFlipVertically();\n      final int rotations=cell.getRotation();\n      TextureRegion region=tile.getTextureRegion();\n      float x1=x * layerTileWidth - offsetX + tile.getOffsetX() * unitScale + layerOffsetX;\n      float y1=y * layerTileHeight50 + tile.getOffsetY() * unitScale + layerOffsetY;\n      float x2=x1 + region.getRegionWidth() * unitScale;\n      float y2=y1 + region.getRegionHeight() * unitScale;\n      float u1=region.getU();\n      float v1=region.getV2();\n      float u2=region.getU2();\n      float v2=region.getV();\n      vertices[X1]=x1;\n      vertices[Y1]=y1;\n      vertices[C1]=color;\n      vertices[U1]=u1;\n      vertices[V1]=v1;\n      vertices[X2]=x1;\n      vertices[Y2]=y2;\n      vertices[C2]=color;\n      vertices[U2]=u1;\n      vertices[V2]=v2;\n      vertices[X3]=x2;\n      vertices[Y3]=y2;\n      vertices[C3]=color;\n      vertices[U3]=u2;\n      vertices[V3]=v2;\n      vertices[X4]=x2;\n      vertices[Y4]=y1;\n      vertices[C4]=color;\n      vertices[U4]=u2;\n      vertices[V4]=v1;\n      if (flipX) {\n        float temp=vertices[U1];\n        vertices[U1]=vertices[U3];\n        vertices[U3]=temp;\n        temp=vertices[U2];\n        vertices[U2]=vertices[U4];\n        vertices[U4]=temp;\n      }\n      if (flipY) {\n        float temp=vertices[V1];\n        vertices[V1]=vertices[V3];\n        vertices[V3]=temp;\n        temp=vertices[V2];\n        vertices[V2]=vertices[V4];\n        vertices[V4]=temp;\n      }\n      if (rotations != 0) {\nswitch (rotations) {\ncase Cell.ROTATE_90:{\n            float tempV=vertices[V1];\n            vertices[V1]=vertices[V2];\n            vertices[V2]=vertices[V3];\n            vertices[V3]=vertices[V4];\n            vertices[V4]=tempV;\n            float tempU=vertices[U1];\n            vertices[U1]=vertices[U2];\n            vertices[U2]=vertices[U3];\n            vertices[U3]=vertices[U4];\n            vertices[U4]=tempU;\n            break;\n          }\ncase Cell.ROTATE_180:{\n          float tempU=vertices[U1];\n          vertices[U1]=vertices[U3];\n          vertices[U3]=tempU;\n          tempU=vertices[U2];\n          vertices[U2]=vertices[U4];\n          vertices[U4]=tempU;\n          float tempV=vertices[V1];\n          vertices[V1]=vertices[V3];\n          vertices[V3]=tempV;\n          tempV=vertices[V2];\n          vertices[V2]=vertices[V4];\n          vertices[V4]=tempV;\n          break;\n        }\ncase Cell.ROTATE_270:{\n        float tempV=vertices[V1];\n        vertices[V1]=vertices[V4];\n        vertices[V4]=vertices[V3];\n        vertices[V3]=vertices[V2];\n        vertices[V2]=tempV;\n        float tempU=vertices[U1];\n        vertices[U1]=vertices[U4];\n        vertices[U4]=vertices[U3];\n        vertices[U3]=vertices[U2];\n        vertices[U2]=tempU;\n        break;\n      }\n  }\n}\nbatch.draw(region.getTexture(),vertices,0,NUM_VERTICES);\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 647,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3235,
        "startLineNumber" : 73,
        "startColumnNumber" : 2,
        "endLineNumber" : 188,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int y=maxY - 1; y >= minY; y--) {\n  float offsetX=(y % 2 == 1) ? layerTileWidth50 : 0;\n  for (int x=maxX - 1; x >= minX; x--) {\n    final TiledMapTileLayer.Cell cell=layer.getCell(x,y);\n    if (cell == null)     continue;\n    final TiledMapTile tile=cell.getTile();\n    if (tile != null) {\n      final boolean flipX=cell.getFlipHorizontally();\n      final boolean flipY=cell.getFlipVertically();\n      final int rotations=cell.getRotation();\n      TextureRegion region=tile.getTextureRegion();\n      float x1=x * layerTileWidth - offsetX + tile.getOffsetX() * unitScale + layerOffsetX;\n      float y1=y * layerTileHeight50 + tile.getOffsetY() * unitScale + layerOffsetY;\n      float x2=x1 + region.getRegionWidth() * unitScale;\n      float y2=y1 + region.getRegionHeight() * unitScale;\n      float u1=region.getU();\n      float v1=region.getV2();\n      float u2=region.getU2();\n      float v2=region.getV();\n      vertices[X1]=x1;\n      vertices[Y1]=y1;\n      vertices[C1]=color;\n      vertices[U1]=u1;\n      vertices[V1]=v1;\n      vertices[X2]=x1;\n      vertices[Y2]=y2;\n      vertices[C2]=color;\n      vertices[U2]=u1;\n      vertices[V2]=v2;\n      vertices[X3]=x2;\n      vertices[Y3]=y2;\n      vertices[C3]=color;\n      vertices[U3]=u2;\n      vertices[V3]=v2;\n      vertices[X4]=x2;\n      vertices[Y4]=y1;\n      vertices[C4]=color;\n      vertices[U4]=u2;\n      vertices[V4]=v1;\n      if (flipX) {\n        float temp=vertices[U1];\n        vertices[U1]=vertices[U3];\n        vertices[U3]=temp;\n        temp=vertices[U2];\n        vertices[U2]=vertices[U4];\n        vertices[U4]=temp;\n      }\n      if (flipY) {\n        float temp=vertices[V1];\n        vertices[V1]=vertices[V3];\n        vertices[V3]=temp;\n        temp=vertices[V2];\n        vertices[V2]=vertices[V4];\n        vertices[V4]=temp;\n      }\n      if (rotations != 0) {\nswitch (rotations) {\ncase Cell.ROTATE_90:{\n            float tempV=vertices[V1];\n            vertices[V1]=vertices[V2];\n            vertices[V2]=vertices[V3];\n            vertices[V3]=vertices[V4];\n            vertices[V4]=tempV;\n            float tempU=vertices[U1];\n            vertices[U1]=vertices[U2];\n            vertices[U2]=vertices[U3];\n            vertices[U3]=vertices[U4];\n            vertices[U4]=tempU;\n            break;\n          }\ncase Cell.ROTATE_180:{\n          float tempU=vertices[U1];\n          vertices[U1]=vertices[U3];\n          vertices[U3]=tempU;\n          tempU=vertices[U2];\n          vertices[U2]=vertices[U4];\n          vertices[U4]=tempU;\n          float tempV=vertices[V1];\n          vertices[V1]=vertices[V3];\n          vertices[V3]=tempV;\n          tempV=vertices[V2];\n          vertices[V2]=vertices[V4];\n          vertices[V4]=tempV;\n          break;\n        }\ncase Cell.ROTATE_270:{\n        float tempV=vertices[V1];\n        vertices[V1]=vertices[V4];\n        vertices[V4]=vertices[V3];\n        vertices[V3]=vertices[V2];\n        vertices[V2]=tempV;\n        float tempU=vertices[U1];\n        vertices[U1]=vertices[U4];\n        vertices[U4]=vertices[U3];\n        vertices[U3]=vertices[U2];\n        vertices[U2]=tempU;\n        break;\n      }\n  }\n}\nbatch.draw(region.getTexture(),vertices,0,NUM_VERTICES);\n}\n}\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 660,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4440,
        "startLineNumber" : 48,
        "startColumnNumber" : 55,
        "endLineNumber" : 189,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  final Color batchColor=batch.getColor();\n  final float color=Color.toFloatBits(batchColor.r,batchColor.g,batchColor.b,batchColor.a * layer.getOpacity());\n  final int layerWidth=layer.getWidth();\n  final int layerHeight=layer.getHeight();\n  final float layerOffsetX=layer.getRenderOffsetX() * unitScale;\n  final float layerOffsetY=-layer.getRenderOffsetY() * unitScale;\n  final float layerTileWidth=layer.getTileWidth() * unitScale;\n  final float layerTileHeight=layer.getTileHeight() * unitScale;\n  final float layerTileWidth50=layerTileWidth * 0.50f;\n  final float layerTileHeight50=layerTileHeight * 0.50f;\n  final int minX=Math.max(0,(int)(((viewBounds.x - layerTileWidth50 - layerOffsetX) / layerTileWidth)));\n  final int maxX=Math.min(layerWidth,(int)((viewBounds.x + viewBounds.width + layerTileWidth+ layerTileWidth50 - layerOffsetX) / layerTileWidth));\n  final int minY=Math.max(0,(int)(((viewBounds.y - layerTileHeight - layerOffsetY) / layerTileHeight)));\n  final int maxY=Math.min(layerHeight,(int)((viewBounds.y + viewBounds.height + layerTileHeight - layerOffsetY) / layerTileHeight50));\n  for (int y=maxY - 1; y >= minY; y--) {\n    float offsetX=(y % 2 == 1) ? layerTileWidth50 : 0;\n    for (int x=maxX - 1; x >= minX; x--) {\n      final TiledMapTileLayer.Cell cell=layer.getCell(x,y);\n      if (cell == null)       continue;\n      final TiledMapTile tile=cell.getTile();\n      if (tile != null) {\n        final boolean flipX=cell.getFlipHorizontally();\n        final boolean flipY=cell.getFlipVertically();\n        final int rotations=cell.getRotation();\n        TextureRegion region=tile.getTextureRegion();\n        float x1=x * layerTileWidth - offsetX + tile.getOffsetX() * unitScale + layerOffsetX;\n        float y1=y * layerTileHeight50 + tile.getOffsetY() * unitScale + layerOffsetY;\n        float x2=x1 + region.getRegionWidth() * unitScale;\n        float y2=y1 + region.getRegionHeight() * unitScale;\n        float u1=region.getU();\n        float v1=region.getV2();\n        float u2=region.getU2();\n        float v2=region.getV();\n        vertices[X1]=x1;\n        vertices[Y1]=y1;\n        vertices[C1]=color;\n        vertices[U1]=u1;\n        vertices[V1]=v1;\n        vertices[X2]=x1;\n        vertices[Y2]=y2;\n        vertices[C2]=color;\n        vertices[U2]=u1;\n        vertices[V2]=v2;\n        vertices[X3]=x2;\n        vertices[Y3]=y2;\n        vertices[C3]=color;\n        vertices[U3]=u2;\n        vertices[V3]=v2;\n        vertices[X4]=x2;\n        vertices[Y4]=y1;\n        vertices[C4]=color;\n        vertices[U4]=u2;\n        vertices[V4]=v1;\n        if (flipX) {\n          float temp=vertices[U1];\n          vertices[U1]=vertices[U3];\n          vertices[U3]=temp;\n          temp=vertices[U2];\n          vertices[U2]=vertices[U4];\n          vertices[U4]=temp;\n        }\n        if (flipY) {\n          float temp=vertices[V1];\n          vertices[V1]=vertices[V3];\n          vertices[V3]=temp;\n          temp=vertices[V2];\n          vertices[V2]=vertices[V4];\n          vertices[V4]=temp;\n        }\n        if (rotations != 0) {\nswitch (rotations) {\ncase Cell.ROTATE_90:{\n              float tempV=vertices[V1];\n              vertices[V1]=vertices[V2];\n              vertices[V2]=vertices[V3];\n              vertices[V3]=vertices[V4];\n              vertices[V4]=tempV;\n              float tempU=vertices[U1];\n              vertices[U1]=vertices[U2];\n              vertices[U2]=vertices[U3];\n              vertices[U3]=vertices[U4];\n              vertices[U4]=tempU;\n              break;\n            }\ncase Cell.ROTATE_180:{\n            float tempU=vertices[U1];\n            vertices[U1]=vertices[U3];\n            vertices[U3]=tempU;\n            tempU=vertices[U2];\n            vertices[U2]=vertices[U4];\n            vertices[U4]=tempU;\n            float tempV=vertices[V1];\n            vertices[V1]=vertices[V3];\n            vertices[V3]=tempV;\n            tempV=vertices[V2];\n            vertices[V2]=vertices[V4];\n            vertices[V4]=tempV;\n            break;\n          }\ncase Cell.ROTATE_270:{\n          float tempV=vertices[V1];\n          vertices[V1]=vertices[V4];\n          vertices[V4]=vertices[V3];\n          vertices[V3]=vertices[V2];\n          vertices[V2]=tempV;\n          float tempU=vertices[U1];\n          vertices[U1]=vertices[U4];\n          vertices[U4]=vertices[U3];\n          vertices[U3]=vertices[U2];\n          vertices[U2]=tempU;\n          break;\n        }\n    }\n  }\n  batch.draw(region.getTexture(),vertices,0,NUM_VERTICES);\n}\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 862,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4505,
        "startLineNumber" : 47,
        "startColumnNumber" : 1,
        "endLineNumber" : 189,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public void renderTileLayer(TiledMapTileLayer layer){\n  final Color batchColor=batch.getColor();\n  final float color=Color.toFloatBits(batchColor.r,batchColor.g,batchColor.b,batchColor.a * layer.getOpacity());\n  final int layerWidth=layer.getWidth();\n  final int layerHeight=layer.getHeight();\n  final float layerOffsetX=layer.getRenderOffsetX() * unitScale;\n  final float layerOffsetY=-layer.getRenderOffsetY() * unitScale;\n  final float layerTileWidth=layer.getTileWidth() * unitScale;\n  final float layerTileHeight=layer.getTileHeight() * unitScale;\n  final float layerTileWidth50=layerTileWidth * 0.50f;\n  final float layerTileHeight50=layerTileHeight * 0.50f;\n  final int minX=Math.max(0,(int)(((viewBounds.x - layerTileWidth50 - layerOffsetX) / layerTileWidth)));\n  final int maxX=Math.min(layerWidth,(int)((viewBounds.x + viewBounds.width + layerTileWidth+ layerTileWidth50 - layerOffsetX) / layerTileWidth));\n  final int minY=Math.max(0,(int)(((viewBounds.y - layerTileHeight - layerOffsetY) / layerTileHeight)));\n  final int maxY=Math.min(layerHeight,(int)((viewBounds.y + viewBounds.height + layerTileHeight - layerOffsetY) / layerTileHeight50));\n  for (int y=maxY - 1; y >= minY; y--) {\n    float offsetX=(y % 2 == 1) ? layerTileWidth50 : 0;\n    for (int x=maxX - 1; x >= minX; x--) {\n      final TiledMapTileLayer.Cell cell=layer.getCell(x,y);\n      if (cell == null)       continue;\n      final TiledMapTile tile=cell.getTile();\n      if (tile != null) {\n        final boolean flipX=cell.getFlipHorizontally();\n        final boolean flipY=cell.getFlipVertically();\n        final int rotations=cell.getRotation();\n        TextureRegion region=tile.getTextureRegion();\n        float x1=x * layerTileWidth - offsetX + tile.getOffsetX() * unitScale + layerOffsetX;\n        float y1=y * layerTileHeight50 + tile.getOffsetY() * unitScale + layerOffsetY;\n        float x2=x1 + region.getRegionWidth() * unitScale;\n        float y2=y1 + region.getRegionHeight() * unitScale;\n        float u1=region.getU();\n        float v1=region.getV2();\n        float u2=region.getU2();\n        float v2=region.getV();\n        vertices[X1]=x1;\n        vertices[Y1]=y1;\n        vertices[C1]=color;\n        vertices[U1]=u1;\n        vertices[V1]=v1;\n        vertices[X2]=x1;\n        vertices[Y2]=y2;\n        vertices[C2]=color;\n        vertices[U2]=u1;\n        vertices[V2]=v2;\n        vertices[X3]=x2;\n        vertices[Y3]=y2;\n        vertices[C3]=color;\n        vertices[U3]=u2;\n        vertices[V3]=v2;\n        vertices[X4]=x2;\n        vertices[Y4]=y1;\n        vertices[C4]=color;\n        vertices[U4]=u2;\n        vertices[V4]=v1;\n        if (flipX) {\n          float temp=vertices[U1];\n          vertices[U1]=vertices[U3];\n          vertices[U3]=temp;\n          temp=vertices[U2];\n          vertices[U2]=vertices[U4];\n          vertices[U4]=temp;\n        }\n        if (flipY) {\n          float temp=vertices[V1];\n          vertices[V1]=vertices[V3];\n          vertices[V3]=temp;\n          temp=vertices[V2];\n          vertices[V2]=vertices[V4];\n          vertices[V4]=temp;\n        }\n        if (rotations != 0) {\nswitch (rotations) {\ncase Cell.ROTATE_90:{\n              float tempV=vertices[V1];\n              vertices[V1]=vertices[V2];\n              vertices[V2]=vertices[V3];\n              vertices[V3]=vertices[V4];\n              vertices[V4]=tempV;\n              float tempU=vertices[U1];\n              vertices[U1]=vertices[U2];\n              vertices[U2]=vertices[U3];\n              vertices[U3]=vertices[U4];\n              vertices[U4]=tempU;\n              break;\n            }\ncase Cell.ROTATE_180:{\n            float tempU=vertices[U1];\n            vertices[U1]=vertices[U3];\n            vertices[U3]=tempU;\n            tempU=vertices[U2];\n            vertices[U2]=vertices[U4];\n            vertices[U4]=tempU;\n            float tempV=vertices[V1];\n            vertices[V1]=vertices[V3];\n            vertices[V3]=tempV;\n            tempV=vertices[V2];\n            vertices[V2]=vertices[V4];\n            vertices[V4]=tempV;\n            break;\n          }\ncase Cell.ROTATE_270:{\n          float tempV=vertices[V1];\n          vertices[V1]=vertices[V4];\n          vertices[V4]=vertices[V3];\n          vertices[V3]=vertices[V2];\n          vertices[V2]=tempV;\n          float tempU=vertices[U1];\n          vertices[U1]=vertices[U4];\n          vertices[U4]=vertices[U3];\n          vertices[U3]=vertices[U2];\n          vertices[U2]=tempU;\n          break;\n        }\n    }\n  }\n  batch.draw(region.getTexture(),vertices,0,NUM_VERTICES);\n}\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 872,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 74,
        "startColumnNumber" : 3,
        "endLineNumber" : 74,
        "endColumnNumber" : 55
      },
      "nodeContext" : "float offsetX=(y % 2 == 1) ? layerTileWidth50 : 0;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "y",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 76,
      "startColumnNumber" : 57,
      "endLineNumber" : 76,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 76,
        "startColumnNumber" : 40,
        "endLineNumber" : 76,
        "endColumnNumber" : 59
      },
      "nodeContext" : "layer.getCell(x,y)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 76,
        "startColumnNumber" : 33,
        "endLineNumber" : 76,
        "endColumnNumber" : 59
      },
      "nodeContext" : "cell=layer.getCell(x,y)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 76,
        "startColumnNumber" : 4,
        "endLineNumber" : 76,
        "endColumnNumber" : 60
      },
      "nodeContext" : "final TiledMapTileLayer.Cell cell=layer.getCell(x,y);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 3092,
        "startLineNumber" : 75,
        "startColumnNumber" : 42,
        "endLineNumber" : 187,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  final TiledMapTileLayer.Cell cell=layer.getCell(x,y);\n  if (cell == null)   continue;\n  final TiledMapTile tile=cell.getTile();\n  if (tile != null) {\n    final boolean flipX=cell.getFlipHorizontally();\n    final boolean flipY=cell.getFlipVertically();\n    final int rotations=cell.getRotation();\n    TextureRegion region=tile.getTextureRegion();\n    float x1=x * layerTileWidth - offsetX + tile.getOffsetX() * unitScale + layerOffsetX;\n    float y1=y * layerTileHeight50 + tile.getOffsetY() * unitScale + layerOffsetY;\n    float x2=x1 + region.getRegionWidth() * unitScale;\n    float y2=y1 + region.getRegionHeight() * unitScale;\n    float u1=region.getU();\n    float v1=region.getV2();\n    float u2=region.getU2();\n    float v2=region.getV();\n    vertices[X1]=x1;\n    vertices[Y1]=y1;\n    vertices[C1]=color;\n    vertices[U1]=u1;\n    vertices[V1]=v1;\n    vertices[X2]=x1;\n    vertices[Y2]=y2;\n    vertices[C2]=color;\n    vertices[U2]=u1;\n    vertices[V2]=v2;\n    vertices[X3]=x2;\n    vertices[Y3]=y2;\n    vertices[C3]=color;\n    vertices[U3]=u2;\n    vertices[V3]=v2;\n    vertices[X4]=x2;\n    vertices[Y4]=y1;\n    vertices[C4]=color;\n    vertices[U4]=u2;\n    vertices[V4]=v1;\n    if (flipX) {\n      float temp=vertices[U1];\n      vertices[U1]=vertices[U3];\n      vertices[U3]=temp;\n      temp=vertices[U2];\n      vertices[U2]=vertices[U4];\n      vertices[U4]=temp;\n    }\n    if (flipY) {\n      float temp=vertices[V1];\n      vertices[V1]=vertices[V3];\n      vertices[V3]=temp;\n      temp=vertices[V2];\n      vertices[V2]=vertices[V4];\n      vertices[V4]=temp;\n    }\n    if (rotations != 0) {\nswitch (rotations) {\ncase Cell.ROTATE_90:{\n          float tempV=vertices[V1];\n          vertices[V1]=vertices[V2];\n          vertices[V2]=vertices[V3];\n          vertices[V3]=vertices[V4];\n          vertices[V4]=tempV;\n          float tempU=vertices[U1];\n          vertices[U1]=vertices[U2];\n          vertices[U2]=vertices[U3];\n          vertices[U3]=vertices[U4];\n          vertices[U4]=tempU;\n          break;\n        }\ncase Cell.ROTATE_180:{\n        float tempU=vertices[U1];\n        vertices[U1]=vertices[U3];\n        vertices[U3]=tempU;\n        tempU=vertices[U2];\n        vertices[U2]=vertices[U4];\n        vertices[U4]=tempU;\n        float tempV=vertices[V1];\n        vertices[V1]=vertices[V3];\n        vertices[V3]=tempV;\n        tempV=vertices[V2];\n        vertices[V2]=vertices[V4];\n        vertices[V4]=tempV;\n        break;\n      }\ncase Cell.ROTATE_270:{\n      float tempV=vertices[V1];\n      vertices[V1]=vertices[V4];\n      vertices[V4]=vertices[V3];\n      vertices[V3]=vertices[V2];\n      vertices[V2]=tempV;\n      float tempU=vertices[U1];\n      vertices[U1]=vertices[U4];\n      vertices[U4]=vertices[U3];\n      vertices[U3]=vertices[U2];\n      vertices[U2]=tempU;\n      break;\n    }\n}\n}\nbatch.draw(region.getTexture(),vertices,0,NUM_VERTICES);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 620,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3131,
        "startLineNumber" : 75,
        "startColumnNumber" : 3,
        "endLineNumber" : 187,
        "endColumnNumber" : 4
      },
      "nodeContext" : "for (int x=maxX - 1; x >= minX; x--) {\n  final TiledMapTileLayer.Cell cell=layer.getCell(x,y);\n  if (cell == null)   continue;\n  final TiledMapTile tile=cell.getTile();\n  if (tile != null) {\n    final boolean flipX=cell.getFlipHorizontally();\n    final boolean flipY=cell.getFlipVertically();\n    final int rotations=cell.getRotation();\n    TextureRegion region=tile.getTextureRegion();\n    float x1=x * layerTileWidth - offsetX + tile.getOffsetX() * unitScale + layerOffsetX;\n    float y1=y * layerTileHeight50 + tile.getOffsetY() * unitScale + layerOffsetY;\n    float x2=x1 + region.getRegionWidth() * unitScale;\n    float y2=y1 + region.getRegionHeight() * unitScale;\n    float u1=region.getU();\n    float v1=region.getV2();\n    float u2=region.getU2();\n    float v2=region.getV();\n    vertices[X1]=x1;\n    vertices[Y1]=y1;\n    vertices[C1]=color;\n    vertices[U1]=u1;\n    vertices[V1]=v1;\n    vertices[X2]=x1;\n    vertices[Y2]=y2;\n    vertices[C2]=color;\n    vertices[U2]=u1;\n    vertices[V2]=v2;\n    vertices[X3]=x2;\n    vertices[Y3]=y2;\n    vertices[C3]=color;\n    vertices[U3]=u2;\n    vertices[V3]=v2;\n    vertices[X4]=x2;\n    vertices[Y4]=y1;\n    vertices[C4]=color;\n    vertices[U4]=u2;\n    vertices[V4]=v1;\n    if (flipX) {\n      float temp=vertices[U1];\n      vertices[U1]=vertices[U3];\n      vertices[U3]=temp;\n      temp=vertices[U2];\n      vertices[U2]=vertices[U4];\n      vertices[U4]=temp;\n    }\n    if (flipY) {\n      float temp=vertices[V1];\n      vertices[V1]=vertices[V3];\n      vertices[V3]=temp;\n      temp=vertices[V2];\n      vertices[V2]=vertices[V4];\n      vertices[V4]=temp;\n    }\n    if (rotations != 0) {\nswitch (rotations) {\ncase Cell.ROTATE_90:{\n          float tempV=vertices[V1];\n          vertices[V1]=vertices[V2];\n          vertices[V2]=vertices[V3];\n          vertices[V3]=vertices[V4];\n          vertices[V4]=tempV;\n          float tempU=vertices[U1];\n          vertices[U1]=vertices[U2];\n          vertices[U2]=vertices[U3];\n          vertices[U3]=vertices[U4];\n          vertices[U4]=tempU;\n          break;\n        }\ncase Cell.ROTATE_180:{\n        float tempU=vertices[U1];\n        vertices[U1]=vertices[U3];\n        vertices[U3]=tempU;\n        tempU=vertices[U2];\n        vertices[U2]=vertices[U4];\n        vertices[U4]=tempU;\n        float tempV=vertices[V1];\n        vertices[V1]=vertices[V3];\n        vertices[V3]=tempV;\n        tempV=vertices[V2];\n        vertices[V2]=vertices[V4];\n        vertices[V4]=tempV;\n        break;\n      }\ncase Cell.ROTATE_270:{\n      float tempV=vertices[V1];\n      vertices[V1]=vertices[V4];\n      vertices[V4]=vertices[V3];\n      vertices[V3]=vertices[V2];\n      vertices[V2]=tempV;\n      float tempU=vertices[U1];\n      vertices[U1]=vertices[U4];\n      vertices[U4]=vertices[U3];\n      vertices[U3]=vertices[U2];\n      vertices[U2]=tempU;\n      break;\n    }\n}\n}\nbatch.draw(region.getTexture(),vertices,0,NUM_VERTICES);\n}\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 633,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 3196,
        "startLineNumber" : 73,
        "startColumnNumber" : 41,
        "endLineNumber" : 188,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  float offsetX=(y % 2 == 1) ? layerTileWidth50 : 0;\n  for (int x=maxX - 1; x >= minX; x--) {\n    final TiledMapTileLayer.Cell cell=layer.getCell(x,y);\n    if (cell == null)     continue;\n    final TiledMapTile tile=cell.getTile();\n    if (tile != null) {\n      final boolean flipX=cell.getFlipHorizontally();\n      final boolean flipY=cell.getFlipVertically();\n      final int rotations=cell.getRotation();\n      TextureRegion region=tile.getTextureRegion();\n      float x1=x * layerTileWidth - offsetX + tile.getOffsetX() * unitScale + layerOffsetX;\n      float y1=y * layerTileHeight50 + tile.getOffsetY() * unitScale + layerOffsetY;\n      float x2=x1 + region.getRegionWidth() * unitScale;\n      float y2=y1 + region.getRegionHeight() * unitScale;\n      float u1=region.getU();\n      float v1=region.getV2();\n      float u2=region.getU2();\n      float v2=region.getV();\n      vertices[X1]=x1;\n      vertices[Y1]=y1;\n      vertices[C1]=color;\n      vertices[U1]=u1;\n      vertices[V1]=v1;\n      vertices[X2]=x1;\n      vertices[Y2]=y2;\n      vertices[C2]=color;\n      vertices[U2]=u1;\n      vertices[V2]=v2;\n      vertices[X3]=x2;\n      vertices[Y3]=y2;\n      vertices[C3]=color;\n      vertices[U3]=u2;\n      vertices[V3]=v2;\n      vertices[X4]=x2;\n      vertices[Y4]=y1;\n      vertices[C4]=color;\n      vertices[U4]=u2;\n      vertices[V4]=v1;\n      if (flipX) {\n        float temp=vertices[U1];\n        vertices[U1]=vertices[U3];\n        vertices[U3]=temp;\n        temp=vertices[U2];\n        vertices[U2]=vertices[U4];\n        vertices[U4]=temp;\n      }\n      if (flipY) {\n        float temp=vertices[V1];\n        vertices[V1]=vertices[V3];\n        vertices[V3]=temp;\n        temp=vertices[V2];\n        vertices[V2]=vertices[V4];\n        vertices[V4]=temp;\n      }\n      if (rotations != 0) {\nswitch (rotations) {\ncase Cell.ROTATE_90:{\n            float tempV=vertices[V1];\n            vertices[V1]=vertices[V2];\n            vertices[V2]=vertices[V3];\n            vertices[V3]=vertices[V4];\n            vertices[V4]=tempV;\n            float tempU=vertices[U1];\n            vertices[U1]=vertices[U2];\n            vertices[U2]=vertices[U3];\n            vertices[U3]=vertices[U4];\n            vertices[U4]=tempU;\n            break;\n          }\ncase Cell.ROTATE_180:{\n          float tempU=vertices[U1];\n          vertices[U1]=vertices[U3];\n          vertices[U3]=tempU;\n          tempU=vertices[U2];\n          vertices[U2]=vertices[U4];\n          vertices[U4]=tempU;\n          float tempV=vertices[V1];\n          vertices[V1]=vertices[V3];\n          vertices[V3]=tempV;\n          tempV=vertices[V2];\n          vertices[V2]=vertices[V4];\n          vertices[V4]=tempV;\n          break;\n        }\ncase Cell.ROTATE_270:{\n        float tempV=vertices[V1];\n        vertices[V1]=vertices[V4];\n        vertices[V4]=vertices[V3];\n        vertices[V3]=vertices[V2];\n        vertices[V2]=tempV;\n        float tempU=vertices[U1];\n        vertices[U1]=vertices[U4];\n        vertices[U4]=vertices[U3];\n        vertices[U3]=vertices[U2];\n        vertices[U2]=tempU;\n        break;\n      }\n  }\n}\nbatch.draw(region.getTexture(),vertices,0,NUM_VERTICES);\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 647,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3235,
        "startLineNumber" : 73,
        "startColumnNumber" : 2,
        "endLineNumber" : 188,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int y=maxY - 1; y >= minY; y--) {\n  float offsetX=(y % 2 == 1) ? layerTileWidth50 : 0;\n  for (int x=maxX - 1; x >= minX; x--) {\n    final TiledMapTileLayer.Cell cell=layer.getCell(x,y);\n    if (cell == null)     continue;\n    final TiledMapTile tile=cell.getTile();\n    if (tile != null) {\n      final boolean flipX=cell.getFlipHorizontally();\n      final boolean flipY=cell.getFlipVertically();\n      final int rotations=cell.getRotation();\n      TextureRegion region=tile.getTextureRegion();\n      float x1=x * layerTileWidth - offsetX + tile.getOffsetX() * unitScale + layerOffsetX;\n      float y1=y * layerTileHeight50 + tile.getOffsetY() * unitScale + layerOffsetY;\n      float x2=x1 + region.getRegionWidth() * unitScale;\n      float y2=y1 + region.getRegionHeight() * unitScale;\n      float u1=region.getU();\n      float v1=region.getV2();\n      float u2=region.getU2();\n      float v2=region.getV();\n      vertices[X1]=x1;\n      vertices[Y1]=y1;\n      vertices[C1]=color;\n      vertices[U1]=u1;\n      vertices[V1]=v1;\n      vertices[X2]=x1;\n      vertices[Y2]=y2;\n      vertices[C2]=color;\n      vertices[U2]=u1;\n      vertices[V2]=v2;\n      vertices[X3]=x2;\n      vertices[Y3]=y2;\n      vertices[C3]=color;\n      vertices[U3]=u2;\n      vertices[V3]=v2;\n      vertices[X4]=x2;\n      vertices[Y4]=y1;\n      vertices[C4]=color;\n      vertices[U4]=u2;\n      vertices[V4]=v1;\n      if (flipX) {\n        float temp=vertices[U1];\n        vertices[U1]=vertices[U3];\n        vertices[U3]=temp;\n        temp=vertices[U2];\n        vertices[U2]=vertices[U4];\n        vertices[U4]=temp;\n      }\n      if (flipY) {\n        float temp=vertices[V1];\n        vertices[V1]=vertices[V3];\n        vertices[V3]=temp;\n        temp=vertices[V2];\n        vertices[V2]=vertices[V4];\n        vertices[V4]=temp;\n      }\n      if (rotations != 0) {\nswitch (rotations) {\ncase Cell.ROTATE_90:{\n            float tempV=vertices[V1];\n            vertices[V1]=vertices[V2];\n            vertices[V2]=vertices[V3];\n            vertices[V3]=vertices[V4];\n            vertices[V4]=tempV;\n            float tempU=vertices[U1];\n            vertices[U1]=vertices[U2];\n            vertices[U2]=vertices[U3];\n            vertices[U3]=vertices[U4];\n            vertices[U4]=tempU;\n            break;\n          }\ncase Cell.ROTATE_180:{\n          float tempU=vertices[U1];\n          vertices[U1]=vertices[U3];\n          vertices[U3]=tempU;\n          tempU=vertices[U2];\n          vertices[U2]=vertices[U4];\n          vertices[U4]=tempU;\n          float tempV=vertices[V1];\n          vertices[V1]=vertices[V3];\n          vertices[V3]=tempV;\n          tempV=vertices[V2];\n          vertices[V2]=vertices[V4];\n          vertices[V4]=tempV;\n          break;\n        }\ncase Cell.ROTATE_270:{\n        float tempV=vertices[V1];\n        vertices[V1]=vertices[V4];\n        vertices[V4]=vertices[V3];\n        vertices[V3]=vertices[V2];\n        vertices[V2]=tempV;\n        float tempU=vertices[U1];\n        vertices[U1]=vertices[U4];\n        vertices[U4]=vertices[U3];\n        vertices[U3]=vertices[U2];\n        vertices[U2]=tempU;\n        break;\n      }\n  }\n}\nbatch.draw(region.getTexture(),vertices,0,NUM_VERTICES);\n}\n}\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 660,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4440,
        "startLineNumber" : 48,
        "startColumnNumber" : 55,
        "endLineNumber" : 189,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  final Color batchColor=batch.getColor();\n  final float color=Color.toFloatBits(batchColor.r,batchColor.g,batchColor.b,batchColor.a * layer.getOpacity());\n  final int layerWidth=layer.getWidth();\n  final int layerHeight=layer.getHeight();\n  final float layerOffsetX=layer.getRenderOffsetX() * unitScale;\n  final float layerOffsetY=-layer.getRenderOffsetY() * unitScale;\n  final float layerTileWidth=layer.getTileWidth() * unitScale;\n  final float layerTileHeight=layer.getTileHeight() * unitScale;\n  final float layerTileWidth50=layerTileWidth * 0.50f;\n  final float layerTileHeight50=layerTileHeight * 0.50f;\n  final int minX=Math.max(0,(int)(((viewBounds.x - layerTileWidth50 - layerOffsetX) / layerTileWidth)));\n  final int maxX=Math.min(layerWidth,(int)((viewBounds.x + viewBounds.width + layerTileWidth+ layerTileWidth50 - layerOffsetX) / layerTileWidth));\n  final int minY=Math.max(0,(int)(((viewBounds.y - layerTileHeight - layerOffsetY) / layerTileHeight)));\n  final int maxY=Math.min(layerHeight,(int)((viewBounds.y + viewBounds.height + layerTileHeight - layerOffsetY) / layerTileHeight50));\n  for (int y=maxY - 1; y >= minY; y--) {\n    float offsetX=(y % 2 == 1) ? layerTileWidth50 : 0;\n    for (int x=maxX - 1; x >= minX; x--) {\n      final TiledMapTileLayer.Cell cell=layer.getCell(x,y);\n      if (cell == null)       continue;\n      final TiledMapTile tile=cell.getTile();\n      if (tile != null) {\n        final boolean flipX=cell.getFlipHorizontally();\n        final boolean flipY=cell.getFlipVertically();\n        final int rotations=cell.getRotation();\n        TextureRegion region=tile.getTextureRegion();\n        float x1=x * layerTileWidth - offsetX + tile.getOffsetX() * unitScale + layerOffsetX;\n        float y1=y * layerTileHeight50 + tile.getOffsetY() * unitScale + layerOffsetY;\n        float x2=x1 + region.getRegionWidth() * unitScale;\n        float y2=y1 + region.getRegionHeight() * unitScale;\n        float u1=region.getU();\n        float v1=region.getV2();\n        float u2=region.getU2();\n        float v2=region.getV();\n        vertices[X1]=x1;\n        vertices[Y1]=y1;\n        vertices[C1]=color;\n        vertices[U1]=u1;\n        vertices[V1]=v1;\n        vertices[X2]=x1;\n        vertices[Y2]=y2;\n        vertices[C2]=color;\n        vertices[U2]=u1;\n        vertices[V2]=v2;\n        vertices[X3]=x2;\n        vertices[Y3]=y2;\n        vertices[C3]=color;\n        vertices[U3]=u2;\n        vertices[V3]=v2;\n        vertices[X4]=x2;\n        vertices[Y4]=y1;\n        vertices[C4]=color;\n        vertices[U4]=u2;\n        vertices[V4]=v1;\n        if (flipX) {\n          float temp=vertices[U1];\n          vertices[U1]=vertices[U3];\n          vertices[U3]=temp;\n          temp=vertices[U2];\n          vertices[U2]=vertices[U4];\n          vertices[U4]=temp;\n        }\n        if (flipY) {\n          float temp=vertices[V1];\n          vertices[V1]=vertices[V3];\n          vertices[V3]=temp;\n          temp=vertices[V2];\n          vertices[V2]=vertices[V4];\n          vertices[V4]=temp;\n        }\n        if (rotations != 0) {\nswitch (rotations) {\ncase Cell.ROTATE_90:{\n              float tempV=vertices[V1];\n              vertices[V1]=vertices[V2];\n              vertices[V2]=vertices[V3];\n              vertices[V3]=vertices[V4];\n              vertices[V4]=tempV;\n              float tempU=vertices[U1];\n              vertices[U1]=vertices[U2];\n              vertices[U2]=vertices[U3];\n              vertices[U3]=vertices[U4];\n              vertices[U4]=tempU;\n              break;\n            }\ncase Cell.ROTATE_180:{\n            float tempU=vertices[U1];\n            vertices[U1]=vertices[U3];\n            vertices[U3]=tempU;\n            tempU=vertices[U2];\n            vertices[U2]=vertices[U4];\n            vertices[U4]=tempU;\n            float tempV=vertices[V1];\n            vertices[V1]=vertices[V3];\n            vertices[V3]=tempV;\n            tempV=vertices[V2];\n            vertices[V2]=vertices[V4];\n            vertices[V4]=tempV;\n            break;\n          }\ncase Cell.ROTATE_270:{\n          float tempV=vertices[V1];\n          vertices[V1]=vertices[V4];\n          vertices[V4]=vertices[V3];\n          vertices[V3]=vertices[V2];\n          vertices[V2]=tempV;\n          float tempU=vertices[U1];\n          vertices[U1]=vertices[U4];\n          vertices[U4]=vertices[U3];\n          vertices[U3]=vertices[U2];\n          vertices[U2]=tempU;\n          break;\n        }\n    }\n  }\n  batch.draw(region.getTexture(),vertices,0,NUM_VERTICES);\n}\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 862,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4505,
        "startLineNumber" : 47,
        "startColumnNumber" : 1,
        "endLineNumber" : 189,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public void renderTileLayer(TiledMapTileLayer layer){\n  final Color batchColor=batch.getColor();\n  final float color=Color.toFloatBits(batchColor.r,batchColor.g,batchColor.b,batchColor.a * layer.getOpacity());\n  final int layerWidth=layer.getWidth();\n  final int layerHeight=layer.getHeight();\n  final float layerOffsetX=layer.getRenderOffsetX() * unitScale;\n  final float layerOffsetY=-layer.getRenderOffsetY() * unitScale;\n  final float layerTileWidth=layer.getTileWidth() * unitScale;\n  final float layerTileHeight=layer.getTileHeight() * unitScale;\n  final float layerTileWidth50=layerTileWidth * 0.50f;\n  final float layerTileHeight50=layerTileHeight * 0.50f;\n  final int minX=Math.max(0,(int)(((viewBounds.x - layerTileWidth50 - layerOffsetX) / layerTileWidth)));\n  final int maxX=Math.min(layerWidth,(int)((viewBounds.x + viewBounds.width + layerTileWidth+ layerTileWidth50 - layerOffsetX) / layerTileWidth));\n  final int minY=Math.max(0,(int)(((viewBounds.y - layerTileHeight - layerOffsetY) / layerTileHeight)));\n  final int maxY=Math.min(layerHeight,(int)((viewBounds.y + viewBounds.height + layerTileHeight - layerOffsetY) / layerTileHeight50));\n  for (int y=maxY - 1; y >= minY; y--) {\n    float offsetX=(y % 2 == 1) ? layerTileWidth50 : 0;\n    for (int x=maxX - 1; x >= minX; x--) {\n      final TiledMapTileLayer.Cell cell=layer.getCell(x,y);\n      if (cell == null)       continue;\n      final TiledMapTile tile=cell.getTile();\n      if (tile != null) {\n        final boolean flipX=cell.getFlipHorizontally();\n        final boolean flipY=cell.getFlipVertically();\n        final int rotations=cell.getRotation();\n        TextureRegion region=tile.getTextureRegion();\n        float x1=x * layerTileWidth - offsetX + tile.getOffsetX() * unitScale + layerOffsetX;\n        float y1=y * layerTileHeight50 + tile.getOffsetY() * unitScale + layerOffsetY;\n        float x2=x1 + region.getRegionWidth() * unitScale;\n        float y2=y1 + region.getRegionHeight() * unitScale;\n        float u1=region.getU();\n        float v1=region.getV2();\n        float u2=region.getU2();\n        float v2=region.getV();\n        vertices[X1]=x1;\n        vertices[Y1]=y1;\n        vertices[C1]=color;\n        vertices[U1]=u1;\n        vertices[V1]=v1;\n        vertices[X2]=x1;\n        vertices[Y2]=y2;\n        vertices[C2]=color;\n        vertices[U2]=u1;\n        vertices[V2]=v2;\n        vertices[X3]=x2;\n        vertices[Y3]=y2;\n        vertices[C3]=color;\n        vertices[U3]=u2;\n        vertices[V3]=v2;\n        vertices[X4]=x2;\n        vertices[Y4]=y1;\n        vertices[C4]=color;\n        vertices[U4]=u2;\n        vertices[V4]=v1;\n        if (flipX) {\n          float temp=vertices[U1];\n          vertices[U1]=vertices[U3];\n          vertices[U3]=temp;\n          temp=vertices[U2];\n          vertices[U2]=vertices[U4];\n          vertices[U4]=temp;\n        }\n        if (flipY) {\n          float temp=vertices[V1];\n          vertices[V1]=vertices[V3];\n          vertices[V3]=temp;\n          temp=vertices[V2];\n          vertices[V2]=vertices[V4];\n          vertices[V4]=temp;\n        }\n        if (rotations != 0) {\nswitch (rotations) {\ncase Cell.ROTATE_90:{\n              float tempV=vertices[V1];\n              vertices[V1]=vertices[V2];\n              vertices[V2]=vertices[V3];\n              vertices[V3]=vertices[V4];\n              vertices[V4]=tempV;\n              float tempU=vertices[U1];\n              vertices[U1]=vertices[U2];\n              vertices[U2]=vertices[U3];\n              vertices[U3]=vertices[U4];\n              vertices[U4]=tempU;\n              break;\n            }\ncase Cell.ROTATE_180:{\n            float tempU=vertices[U1];\n            vertices[U1]=vertices[U3];\n            vertices[U3]=tempU;\n            tempU=vertices[U2];\n            vertices[U2]=vertices[U4];\n            vertices[U4]=tempU;\n            float tempV=vertices[V1];\n            vertices[V1]=vertices[V3];\n            vertices[V3]=tempV;\n            tempV=vertices[V2];\n            vertices[V2]=vertices[V4];\n            vertices[V4]=tempV;\n            break;\n          }\ncase Cell.ROTATE_270:{\n          float tempV=vertices[V1];\n          vertices[V1]=vertices[V4];\n          vertices[V4]=vertices[V3];\n          vertices[V3]=vertices[V2];\n          vertices[V2]=tempV;\n          float tempU=vertices[U1];\n          vertices[U1]=vertices[U4];\n          vertices[U4]=vertices[U3];\n          vertices[U3]=vertices[U2];\n          vertices[U2]=tempU;\n          break;\n        }\n    }\n  }\n  batch.draw(region.getTexture(),vertices,0,NUM_VERTICES);\n}\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 872,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 76,
        "startColumnNumber" : 4,
        "endLineNumber" : 76,
        "endColumnNumber" : 60
      },
      "nodeContext" : "final TiledMapTileLayer.Cell cell=layer.getCell(x,y);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "y",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 87,
      "startColumnNumber" : 16,
      "endLineNumber" : 87,
      "endColumnNumber" : 17
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 87,
        "startColumnNumber" : 16,
        "endLineNumber" : 87,
        "endColumnNumber" : 37
      },
      "nodeContext" : "y * layerTileHeight50",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 87,
        "startColumnNumber" : 16,
        "endLineNumber" : 87,
        "endColumnNumber" : 69
      },
      "nodeContext" : "y * layerTileHeight50 + tile.getOffsetY() * unitScale",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 87,
        "startColumnNumber" : 16,
        "endLineNumber" : 87,
        "endColumnNumber" : 84
      },
      "nodeContext" : "y * layerTileHeight50 + tile.getOffsetY() * unitScale + layerOffsetY",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 87,
        "startColumnNumber" : 11,
        "endLineNumber" : 87,
        "endColumnNumber" : 84
      },
      "nodeContext" : "y1=y * layerTileHeight50 + tile.getOffsetY() * unitScale + layerOffsetY",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 87,
        "startColumnNumber" : 5,
        "endLineNumber" : 87,
        "endColumnNumber" : 85
      },
      "nodeContext" : "float y1=y * layerTileHeight50 + tile.getOffsetY() * unitScale + layerOffsetY;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2923,
        "startLineNumber" : 80,
        "startColumnNumber" : 22,
        "endLineNumber" : 186,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final boolean flipX=cell.getFlipHorizontally();\n  final boolean flipY=cell.getFlipVertically();\n  final int rotations=cell.getRotation();\n  TextureRegion region=tile.getTextureRegion();\n  float x1=x * layerTileWidth - offsetX + tile.getOffsetX() * unitScale + layerOffsetX;\n  float y1=y * layerTileHeight50 + tile.getOffsetY() * unitScale + layerOffsetY;\n  float x2=x1 + region.getRegionWidth() * unitScale;\n  float y2=y1 + region.getRegionHeight() * unitScale;\n  float u1=region.getU();\n  float v1=region.getV2();\n  float u2=region.getU2();\n  float v2=region.getV();\n  vertices[X1]=x1;\n  vertices[Y1]=y1;\n  vertices[C1]=color;\n  vertices[U1]=u1;\n  vertices[V1]=v1;\n  vertices[X2]=x1;\n  vertices[Y2]=y2;\n  vertices[C2]=color;\n  vertices[U2]=u1;\n  vertices[V2]=v2;\n  vertices[X3]=x2;\n  vertices[Y3]=y2;\n  vertices[C3]=color;\n  vertices[U3]=u2;\n  vertices[V3]=v2;\n  vertices[X4]=x2;\n  vertices[Y4]=y1;\n  vertices[C4]=color;\n  vertices[U4]=u2;\n  vertices[V4]=v1;\n  if (flipX) {\n    float temp=vertices[U1];\n    vertices[U1]=vertices[U3];\n    vertices[U3]=temp;\n    temp=vertices[U2];\n    vertices[U2]=vertices[U4];\n    vertices[U4]=temp;\n  }\n  if (flipY) {\n    float temp=vertices[V1];\n    vertices[V1]=vertices[V3];\n    vertices[V3]=temp;\n    temp=vertices[V2];\n    vertices[V2]=vertices[V4];\n    vertices[V4]=temp;\n  }\n  if (rotations != 0) {\nswitch (rotations) {\ncase Cell.ROTATE_90:{\n        float tempV=vertices[V1];\n        vertices[V1]=vertices[V2];\n        vertices[V2]=vertices[V3];\n        vertices[V3]=vertices[V4];\n        vertices[V4]=tempV;\n        float tempU=vertices[U1];\n        vertices[U1]=vertices[U2];\n        vertices[U2]=vertices[U3];\n        vertices[U3]=vertices[U4];\n        vertices[U4]=tempU;\n        break;\n      }\ncase Cell.ROTATE_180:{\n      float tempU=vertices[U1];\n      vertices[U1]=vertices[U3];\n      vertices[U3]=tempU;\n      tempU=vertices[U2];\n      vertices[U2]=vertices[U4];\n      vertices[U4]=tempU;\n      float tempV=vertices[V1];\n      vertices[V1]=vertices[V3];\n      vertices[V3]=tempV;\n      tempV=vertices[V2];\n      vertices[V2]=vertices[V4];\n      vertices[V4]=tempV;\n      break;\n    }\ncase Cell.ROTATE_270:{\n    float tempV=vertices[V1];\n    vertices[V1]=vertices[V4];\n    vertices[V4]=vertices[V3];\n    vertices[V3]=vertices[V2];\n    vertices[V2]=tempV;\n    float tempU=vertices[U1];\n    vertices[U1]=vertices[U4];\n    vertices[U4]=vertices[U3];\n    vertices[U3]=vertices[U2];\n    vertices[U2]=tempU;\n    break;\n  }\n}\n}\nbatch.draw(region.getTexture(),vertices,0,NUM_VERTICES);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 588,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2941,
        "startLineNumber" : 80,
        "startColumnNumber" : 4,
        "endLineNumber" : 186,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (tile != null) {\n  final boolean flipX=cell.getFlipHorizontally();\n  final boolean flipY=cell.getFlipVertically();\n  final int rotations=cell.getRotation();\n  TextureRegion region=tile.getTextureRegion();\n  float x1=x * layerTileWidth - offsetX + tile.getOffsetX() * unitScale + layerOffsetX;\n  float y1=y * layerTileHeight50 + tile.getOffsetY() * unitScale + layerOffsetY;\n  float x2=x1 + region.getRegionWidth() * unitScale;\n  float y2=y1 + region.getRegionHeight() * unitScale;\n  float u1=region.getU();\n  float v1=region.getV2();\n  float u2=region.getU2();\n  float v2=region.getV();\n  vertices[X1]=x1;\n  vertices[Y1]=y1;\n  vertices[C1]=color;\n  vertices[U1]=u1;\n  vertices[V1]=v1;\n  vertices[X2]=x1;\n  vertices[Y2]=y2;\n  vertices[C2]=color;\n  vertices[U2]=u1;\n  vertices[V2]=v2;\n  vertices[X3]=x2;\n  vertices[Y3]=y2;\n  vertices[C3]=color;\n  vertices[U3]=u2;\n  vertices[V3]=v2;\n  vertices[X4]=x2;\n  vertices[Y4]=y1;\n  vertices[C4]=color;\n  vertices[U4]=u2;\n  vertices[V4]=v1;\n  if (flipX) {\n    float temp=vertices[U1];\n    vertices[U1]=vertices[U3];\n    vertices[U3]=temp;\n    temp=vertices[U2];\n    vertices[U2]=vertices[U4];\n    vertices[U4]=temp;\n  }\n  if (flipY) {\n    float temp=vertices[V1];\n    vertices[V1]=vertices[V3];\n    vertices[V3]=temp;\n    temp=vertices[V2];\n    vertices[V2]=vertices[V4];\n    vertices[V4]=temp;\n  }\n  if (rotations != 0) {\nswitch (rotations) {\ncase Cell.ROTATE_90:{\n        float tempV=vertices[V1];\n        vertices[V1]=vertices[V2];\n        vertices[V2]=vertices[V3];\n        vertices[V3]=vertices[V4];\n        vertices[V4]=tempV;\n        float tempU=vertices[U1];\n        vertices[U1]=vertices[U2];\n        vertices[U2]=vertices[U3];\n        vertices[U3]=vertices[U4];\n        vertices[U4]=tempU;\n        break;\n      }\ncase Cell.ROTATE_180:{\n      float tempU=vertices[U1];\n      vertices[U1]=vertices[U3];\n      vertices[U3]=tempU;\n      tempU=vertices[U2];\n      vertices[U2]=vertices[U4];\n      vertices[U4]=tempU;\n      float tempV=vertices[V1];\n      vertices[V1]=vertices[V3];\n      vertices[V3]=tempV;\n      tempV=vertices[V2];\n      vertices[V2]=vertices[V4];\n      vertices[V4]=tempV;\n      break;\n    }\ncase Cell.ROTATE_270:{\n    float tempV=vertices[V1];\n    vertices[V1]=vertices[V4];\n    vertices[V4]=vertices[V3];\n    vertices[V3]=vertices[V2];\n    vertices[V2]=tempV;\n    float tempU=vertices[U1];\n    vertices[U1]=vertices[U4];\n    vertices[U4]=vertices[U3];\n    vertices[U3]=vertices[U2];\n    vertices[U2]=tempU;\n    break;\n  }\n}\n}\nbatch.draw(region.getTexture(),vertices,0,NUM_VERTICES);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 592,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 3092,
        "startLineNumber" : 75,
        "startColumnNumber" : 42,
        "endLineNumber" : 187,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  final TiledMapTileLayer.Cell cell=layer.getCell(x,y);\n  if (cell == null)   continue;\n  final TiledMapTile tile=cell.getTile();\n  if (tile != null) {\n    final boolean flipX=cell.getFlipHorizontally();\n    final boolean flipY=cell.getFlipVertically();\n    final int rotations=cell.getRotation();\n    TextureRegion region=tile.getTextureRegion();\n    float x1=x * layerTileWidth - offsetX + tile.getOffsetX() * unitScale + layerOffsetX;\n    float y1=y * layerTileHeight50 + tile.getOffsetY() * unitScale + layerOffsetY;\n    float x2=x1 + region.getRegionWidth() * unitScale;\n    float y2=y1 + region.getRegionHeight() * unitScale;\n    float u1=region.getU();\n    float v1=region.getV2();\n    float u2=region.getU2();\n    float v2=region.getV();\n    vertices[X1]=x1;\n    vertices[Y1]=y1;\n    vertices[C1]=color;\n    vertices[U1]=u1;\n    vertices[V1]=v1;\n    vertices[X2]=x1;\n    vertices[Y2]=y2;\n    vertices[C2]=color;\n    vertices[U2]=u1;\n    vertices[V2]=v2;\n    vertices[X3]=x2;\n    vertices[Y3]=y2;\n    vertices[C3]=color;\n    vertices[U3]=u2;\n    vertices[V3]=v2;\n    vertices[X4]=x2;\n    vertices[Y4]=y1;\n    vertices[C4]=color;\n    vertices[U4]=u2;\n    vertices[V4]=v1;\n    if (flipX) {\n      float temp=vertices[U1];\n      vertices[U1]=vertices[U3];\n      vertices[U3]=temp;\n      temp=vertices[U2];\n      vertices[U2]=vertices[U4];\n      vertices[U4]=temp;\n    }\n    if (flipY) {\n      float temp=vertices[V1];\n      vertices[V1]=vertices[V3];\n      vertices[V3]=temp;\n      temp=vertices[V2];\n      vertices[V2]=vertices[V4];\n      vertices[V4]=temp;\n    }\n    if (rotations != 0) {\nswitch (rotations) {\ncase Cell.ROTATE_90:{\n          float tempV=vertices[V1];\n          vertices[V1]=vertices[V2];\n          vertices[V2]=vertices[V3];\n          vertices[V3]=vertices[V4];\n          vertices[V4]=tempV;\n          float tempU=vertices[U1];\n          vertices[U1]=vertices[U2];\n          vertices[U2]=vertices[U3];\n          vertices[U3]=vertices[U4];\n          vertices[U4]=tempU;\n          break;\n        }\ncase Cell.ROTATE_180:{\n        float tempU=vertices[U1];\n        vertices[U1]=vertices[U3];\n        vertices[U3]=tempU;\n        tempU=vertices[U2];\n        vertices[U2]=vertices[U4];\n        vertices[U4]=tempU;\n        float tempV=vertices[V1];\n        vertices[V1]=vertices[V3];\n        vertices[V3]=tempV;\n        tempV=vertices[V2];\n        vertices[V2]=vertices[V4];\n        vertices[V4]=tempV;\n        break;\n      }\ncase Cell.ROTATE_270:{\n      float tempV=vertices[V1];\n      vertices[V1]=vertices[V4];\n      vertices[V4]=vertices[V3];\n      vertices[V3]=vertices[V2];\n      vertices[V2]=tempV;\n      float tempU=vertices[U1];\n      vertices[U1]=vertices[U4];\n      vertices[U4]=vertices[U3];\n      vertices[U3]=vertices[U2];\n      vertices[U2]=tempU;\n      break;\n    }\n}\n}\nbatch.draw(region.getTexture(),vertices,0,NUM_VERTICES);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 620,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3131,
        "startLineNumber" : 75,
        "startColumnNumber" : 3,
        "endLineNumber" : 187,
        "endColumnNumber" : 4
      },
      "nodeContext" : "for (int x=maxX - 1; x >= minX; x--) {\n  final TiledMapTileLayer.Cell cell=layer.getCell(x,y);\n  if (cell == null)   continue;\n  final TiledMapTile tile=cell.getTile();\n  if (tile != null) {\n    final boolean flipX=cell.getFlipHorizontally();\n    final boolean flipY=cell.getFlipVertically();\n    final int rotations=cell.getRotation();\n    TextureRegion region=tile.getTextureRegion();\n    float x1=x * layerTileWidth - offsetX + tile.getOffsetX() * unitScale + layerOffsetX;\n    float y1=y * layerTileHeight50 + tile.getOffsetY() * unitScale + layerOffsetY;\n    float x2=x1 + region.getRegionWidth() * unitScale;\n    float y2=y1 + region.getRegionHeight() * unitScale;\n    float u1=region.getU();\n    float v1=region.getV2();\n    float u2=region.getU2();\n    float v2=region.getV();\n    vertices[X1]=x1;\n    vertices[Y1]=y1;\n    vertices[C1]=color;\n    vertices[U1]=u1;\n    vertices[V1]=v1;\n    vertices[X2]=x1;\n    vertices[Y2]=y2;\n    vertices[C2]=color;\n    vertices[U2]=u1;\n    vertices[V2]=v2;\n    vertices[X3]=x2;\n    vertices[Y3]=y2;\n    vertices[C3]=color;\n    vertices[U3]=u2;\n    vertices[V3]=v2;\n    vertices[X4]=x2;\n    vertices[Y4]=y1;\n    vertices[C4]=color;\n    vertices[U4]=u2;\n    vertices[V4]=v1;\n    if (flipX) {\n      float temp=vertices[U1];\n      vertices[U1]=vertices[U3];\n      vertices[U3]=temp;\n      temp=vertices[U2];\n      vertices[U2]=vertices[U4];\n      vertices[U4]=temp;\n    }\n    if (flipY) {\n      float temp=vertices[V1];\n      vertices[V1]=vertices[V3];\n      vertices[V3]=temp;\n      temp=vertices[V2];\n      vertices[V2]=vertices[V4];\n      vertices[V4]=temp;\n    }\n    if (rotations != 0) {\nswitch (rotations) {\ncase Cell.ROTATE_90:{\n          float tempV=vertices[V1];\n          vertices[V1]=vertices[V2];\n          vertices[V2]=vertices[V3];\n          vertices[V3]=vertices[V4];\n          vertices[V4]=tempV;\n          float tempU=vertices[U1];\n          vertices[U1]=vertices[U2];\n          vertices[U2]=vertices[U3];\n          vertices[U3]=vertices[U4];\n          vertices[U4]=tempU;\n          break;\n        }\ncase Cell.ROTATE_180:{\n        float tempU=vertices[U1];\n        vertices[U1]=vertices[U3];\n        vertices[U3]=tempU;\n        tempU=vertices[U2];\n        vertices[U2]=vertices[U4];\n        vertices[U4]=tempU;\n        float tempV=vertices[V1];\n        vertices[V1]=vertices[V3];\n        vertices[V3]=tempV;\n        tempV=vertices[V2];\n        vertices[V2]=vertices[V4];\n        vertices[V4]=tempV;\n        break;\n      }\ncase Cell.ROTATE_270:{\n      float tempV=vertices[V1];\n      vertices[V1]=vertices[V4];\n      vertices[V4]=vertices[V3];\n      vertices[V3]=vertices[V2];\n      vertices[V2]=tempV;\n      float tempU=vertices[U1];\n      vertices[U1]=vertices[U4];\n      vertices[U4]=vertices[U3];\n      vertices[U3]=vertices[U2];\n      vertices[U2]=tempU;\n      break;\n    }\n}\n}\nbatch.draw(region.getTexture(),vertices,0,NUM_VERTICES);\n}\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 633,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 3196,
        "startLineNumber" : 73,
        "startColumnNumber" : 41,
        "endLineNumber" : 188,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  float offsetX=(y % 2 == 1) ? layerTileWidth50 : 0;\n  for (int x=maxX - 1; x >= minX; x--) {\n    final TiledMapTileLayer.Cell cell=layer.getCell(x,y);\n    if (cell == null)     continue;\n    final TiledMapTile tile=cell.getTile();\n    if (tile != null) {\n      final boolean flipX=cell.getFlipHorizontally();\n      final boolean flipY=cell.getFlipVertically();\n      final int rotations=cell.getRotation();\n      TextureRegion region=tile.getTextureRegion();\n      float x1=x * layerTileWidth - offsetX + tile.getOffsetX() * unitScale + layerOffsetX;\n      float y1=y * layerTileHeight50 + tile.getOffsetY() * unitScale + layerOffsetY;\n      float x2=x1 + region.getRegionWidth() * unitScale;\n      float y2=y1 + region.getRegionHeight() * unitScale;\n      float u1=region.getU();\n      float v1=region.getV2();\n      float u2=region.getU2();\n      float v2=region.getV();\n      vertices[X1]=x1;\n      vertices[Y1]=y1;\n      vertices[C1]=color;\n      vertices[U1]=u1;\n      vertices[V1]=v1;\n      vertices[X2]=x1;\n      vertices[Y2]=y2;\n      vertices[C2]=color;\n      vertices[U2]=u1;\n      vertices[V2]=v2;\n      vertices[X3]=x2;\n      vertices[Y3]=y2;\n      vertices[C3]=color;\n      vertices[U3]=u2;\n      vertices[V3]=v2;\n      vertices[X4]=x2;\n      vertices[Y4]=y1;\n      vertices[C4]=color;\n      vertices[U4]=u2;\n      vertices[V4]=v1;\n      if (flipX) {\n        float temp=vertices[U1];\n        vertices[U1]=vertices[U3];\n        vertices[U3]=temp;\n        temp=vertices[U2];\n        vertices[U2]=vertices[U4];\n        vertices[U4]=temp;\n      }\n      if (flipY) {\n        float temp=vertices[V1];\n        vertices[V1]=vertices[V3];\n        vertices[V3]=temp;\n        temp=vertices[V2];\n        vertices[V2]=vertices[V4];\n        vertices[V4]=temp;\n      }\n      if (rotations != 0) {\nswitch (rotations) {\ncase Cell.ROTATE_90:{\n            float tempV=vertices[V1];\n            vertices[V1]=vertices[V2];\n            vertices[V2]=vertices[V3];\n            vertices[V3]=vertices[V4];\n            vertices[V4]=tempV;\n            float tempU=vertices[U1];\n            vertices[U1]=vertices[U2];\n            vertices[U2]=vertices[U3];\n            vertices[U3]=vertices[U4];\n            vertices[U4]=tempU;\n            break;\n          }\ncase Cell.ROTATE_180:{\n          float tempU=vertices[U1];\n          vertices[U1]=vertices[U3];\n          vertices[U3]=tempU;\n          tempU=vertices[U2];\n          vertices[U2]=vertices[U4];\n          vertices[U4]=tempU;\n          float tempV=vertices[V1];\n          vertices[V1]=vertices[V3];\n          vertices[V3]=tempV;\n          tempV=vertices[V2];\n          vertices[V2]=vertices[V4];\n          vertices[V4]=tempV;\n          break;\n        }\ncase Cell.ROTATE_270:{\n        float tempV=vertices[V1];\n        vertices[V1]=vertices[V4];\n        vertices[V4]=vertices[V3];\n        vertices[V3]=vertices[V2];\n        vertices[V2]=tempV;\n        float tempU=vertices[U1];\n        vertices[U1]=vertices[U4];\n        vertices[U4]=vertices[U3];\n        vertices[U3]=vertices[U2];\n        vertices[U2]=tempU;\n        break;\n      }\n  }\n}\nbatch.draw(region.getTexture(),vertices,0,NUM_VERTICES);\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 647,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3235,
        "startLineNumber" : 73,
        "startColumnNumber" : 2,
        "endLineNumber" : 188,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int y=maxY - 1; y >= minY; y--) {\n  float offsetX=(y % 2 == 1) ? layerTileWidth50 : 0;\n  for (int x=maxX - 1; x >= minX; x--) {\n    final TiledMapTileLayer.Cell cell=layer.getCell(x,y);\n    if (cell == null)     continue;\n    final TiledMapTile tile=cell.getTile();\n    if (tile != null) {\n      final boolean flipX=cell.getFlipHorizontally();\n      final boolean flipY=cell.getFlipVertically();\n      final int rotations=cell.getRotation();\n      TextureRegion region=tile.getTextureRegion();\n      float x1=x * layerTileWidth - offsetX + tile.getOffsetX() * unitScale + layerOffsetX;\n      float y1=y * layerTileHeight50 + tile.getOffsetY() * unitScale + layerOffsetY;\n      float x2=x1 + region.getRegionWidth() * unitScale;\n      float y2=y1 + region.getRegionHeight() * unitScale;\n      float u1=region.getU();\n      float v1=region.getV2();\n      float u2=region.getU2();\n      float v2=region.getV();\n      vertices[X1]=x1;\n      vertices[Y1]=y1;\n      vertices[C1]=color;\n      vertices[U1]=u1;\n      vertices[V1]=v1;\n      vertices[X2]=x1;\n      vertices[Y2]=y2;\n      vertices[C2]=color;\n      vertices[U2]=u1;\n      vertices[V2]=v2;\n      vertices[X3]=x2;\n      vertices[Y3]=y2;\n      vertices[C3]=color;\n      vertices[U3]=u2;\n      vertices[V3]=v2;\n      vertices[X4]=x2;\n      vertices[Y4]=y1;\n      vertices[C4]=color;\n      vertices[U4]=u2;\n      vertices[V4]=v1;\n      if (flipX) {\n        float temp=vertices[U1];\n        vertices[U1]=vertices[U3];\n        vertices[U3]=temp;\n        temp=vertices[U2];\n        vertices[U2]=vertices[U4];\n        vertices[U4]=temp;\n      }\n      if (flipY) {\n        float temp=vertices[V1];\n        vertices[V1]=vertices[V3];\n        vertices[V3]=temp;\n        temp=vertices[V2];\n        vertices[V2]=vertices[V4];\n        vertices[V4]=temp;\n      }\n      if (rotations != 0) {\nswitch (rotations) {\ncase Cell.ROTATE_90:{\n            float tempV=vertices[V1];\n            vertices[V1]=vertices[V2];\n            vertices[V2]=vertices[V3];\n            vertices[V3]=vertices[V4];\n            vertices[V4]=tempV;\n            float tempU=vertices[U1];\n            vertices[U1]=vertices[U2];\n            vertices[U2]=vertices[U3];\n            vertices[U3]=vertices[U4];\n            vertices[U4]=tempU;\n            break;\n          }\ncase Cell.ROTATE_180:{\n          float tempU=vertices[U1];\n          vertices[U1]=vertices[U3];\n          vertices[U3]=tempU;\n          tempU=vertices[U2];\n          vertices[U2]=vertices[U4];\n          vertices[U4]=tempU;\n          float tempV=vertices[V1];\n          vertices[V1]=vertices[V3];\n          vertices[V3]=tempV;\n          tempV=vertices[V2];\n          vertices[V2]=vertices[V4];\n          vertices[V4]=tempV;\n          break;\n        }\ncase Cell.ROTATE_270:{\n        float tempV=vertices[V1];\n        vertices[V1]=vertices[V4];\n        vertices[V4]=vertices[V3];\n        vertices[V3]=vertices[V2];\n        vertices[V2]=tempV;\n        float tempU=vertices[U1];\n        vertices[U1]=vertices[U4];\n        vertices[U4]=vertices[U3];\n        vertices[U3]=vertices[U2];\n        vertices[U2]=tempU;\n        break;\n      }\n  }\n}\nbatch.draw(region.getTexture(),vertices,0,NUM_VERTICES);\n}\n}\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 660,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4440,
        "startLineNumber" : 48,
        "startColumnNumber" : 55,
        "endLineNumber" : 189,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  final Color batchColor=batch.getColor();\n  final float color=Color.toFloatBits(batchColor.r,batchColor.g,batchColor.b,batchColor.a * layer.getOpacity());\n  final int layerWidth=layer.getWidth();\n  final int layerHeight=layer.getHeight();\n  final float layerOffsetX=layer.getRenderOffsetX() * unitScale;\n  final float layerOffsetY=-layer.getRenderOffsetY() * unitScale;\n  final float layerTileWidth=layer.getTileWidth() * unitScale;\n  final float layerTileHeight=layer.getTileHeight() * unitScale;\n  final float layerTileWidth50=layerTileWidth * 0.50f;\n  final float layerTileHeight50=layerTileHeight * 0.50f;\n  final int minX=Math.max(0,(int)(((viewBounds.x - layerTileWidth50 - layerOffsetX) / layerTileWidth)));\n  final int maxX=Math.min(layerWidth,(int)((viewBounds.x + viewBounds.width + layerTileWidth+ layerTileWidth50 - layerOffsetX) / layerTileWidth));\n  final int minY=Math.max(0,(int)(((viewBounds.y - layerTileHeight - layerOffsetY) / layerTileHeight)));\n  final int maxY=Math.min(layerHeight,(int)((viewBounds.y + viewBounds.height + layerTileHeight - layerOffsetY) / layerTileHeight50));\n  for (int y=maxY - 1; y >= minY; y--) {\n    float offsetX=(y % 2 == 1) ? layerTileWidth50 : 0;\n    for (int x=maxX - 1; x >= minX; x--) {\n      final TiledMapTileLayer.Cell cell=layer.getCell(x,y);\n      if (cell == null)       continue;\n      final TiledMapTile tile=cell.getTile();\n      if (tile != null) {\n        final boolean flipX=cell.getFlipHorizontally();\n        final boolean flipY=cell.getFlipVertically();\n        final int rotations=cell.getRotation();\n        TextureRegion region=tile.getTextureRegion();\n        float x1=x * layerTileWidth - offsetX + tile.getOffsetX() * unitScale + layerOffsetX;\n        float y1=y * layerTileHeight50 + tile.getOffsetY() * unitScale + layerOffsetY;\n        float x2=x1 + region.getRegionWidth() * unitScale;\n        float y2=y1 + region.getRegionHeight() * unitScale;\n        float u1=region.getU();\n        float v1=region.getV2();\n        float u2=region.getU2();\n        float v2=region.getV();\n        vertices[X1]=x1;\n        vertices[Y1]=y1;\n        vertices[C1]=color;\n        vertices[U1]=u1;\n        vertices[V1]=v1;\n        vertices[X2]=x1;\n        vertices[Y2]=y2;\n        vertices[C2]=color;\n        vertices[U2]=u1;\n        vertices[V2]=v2;\n        vertices[X3]=x2;\n        vertices[Y3]=y2;\n        vertices[C3]=color;\n        vertices[U3]=u2;\n        vertices[V3]=v2;\n        vertices[X4]=x2;\n        vertices[Y4]=y1;\n        vertices[C4]=color;\n        vertices[U4]=u2;\n        vertices[V4]=v1;\n        if (flipX) {\n          float temp=vertices[U1];\n          vertices[U1]=vertices[U3];\n          vertices[U3]=temp;\n          temp=vertices[U2];\n          vertices[U2]=vertices[U4];\n          vertices[U4]=temp;\n        }\n        if (flipY) {\n          float temp=vertices[V1];\n          vertices[V1]=vertices[V3];\n          vertices[V3]=temp;\n          temp=vertices[V2];\n          vertices[V2]=vertices[V4];\n          vertices[V4]=temp;\n        }\n        if (rotations != 0) {\nswitch (rotations) {\ncase Cell.ROTATE_90:{\n              float tempV=vertices[V1];\n              vertices[V1]=vertices[V2];\n              vertices[V2]=vertices[V3];\n              vertices[V3]=vertices[V4];\n              vertices[V4]=tempV;\n              float tempU=vertices[U1];\n              vertices[U1]=vertices[U2];\n              vertices[U2]=vertices[U3];\n              vertices[U3]=vertices[U4];\n              vertices[U4]=tempU;\n              break;\n            }\ncase Cell.ROTATE_180:{\n            float tempU=vertices[U1];\n            vertices[U1]=vertices[U3];\n            vertices[U3]=tempU;\n            tempU=vertices[U2];\n            vertices[U2]=vertices[U4];\n            vertices[U4]=tempU;\n            float tempV=vertices[V1];\n            vertices[V1]=vertices[V3];\n            vertices[V3]=tempV;\n            tempV=vertices[V2];\n            vertices[V2]=vertices[V4];\n            vertices[V4]=tempV;\n            break;\n          }\ncase Cell.ROTATE_270:{\n          float tempV=vertices[V1];\n          vertices[V1]=vertices[V4];\n          vertices[V4]=vertices[V3];\n          vertices[V3]=vertices[V2];\n          vertices[V2]=tempV;\n          float tempU=vertices[U1];\n          vertices[U1]=vertices[U4];\n          vertices[U4]=vertices[U3];\n          vertices[U3]=vertices[U2];\n          vertices[U2]=tempU;\n          break;\n        }\n    }\n  }\n  batch.draw(region.getTexture(),vertices,0,NUM_VERTICES);\n}\n}\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 862,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4505,
        "startLineNumber" : 47,
        "startColumnNumber" : 1,
        "endLineNumber" : 189,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public void renderTileLayer(TiledMapTileLayer layer){\n  final Color batchColor=batch.getColor();\n  final float color=Color.toFloatBits(batchColor.r,batchColor.g,batchColor.b,batchColor.a * layer.getOpacity());\n  final int layerWidth=layer.getWidth();\n  final int layerHeight=layer.getHeight();\n  final float layerOffsetX=layer.getRenderOffsetX() * unitScale;\n  final float layerOffsetY=-layer.getRenderOffsetY() * unitScale;\n  final float layerTileWidth=layer.getTileWidth() * unitScale;\n  final float layerTileHeight=layer.getTileHeight() * unitScale;\n  final float layerTileWidth50=layerTileWidth * 0.50f;\n  final float layerTileHeight50=layerTileHeight * 0.50f;\n  final int minX=Math.max(0,(int)(((viewBounds.x - layerTileWidth50 - layerOffsetX) / layerTileWidth)));\n  final int maxX=Math.min(layerWidth,(int)((viewBounds.x + viewBounds.width + layerTileWidth+ layerTileWidth50 - layerOffsetX) / layerTileWidth));\n  final int minY=Math.max(0,(int)(((viewBounds.y - layerTileHeight - layerOffsetY) / layerTileHeight)));\n  final int maxY=Math.min(layerHeight,(int)((viewBounds.y + viewBounds.height + layerTileHeight - layerOffsetY) / layerTileHeight50));\n  for (int y=maxY - 1; y >= minY; y--) {\n    float offsetX=(y % 2 == 1) ? layerTileWidth50 : 0;\n    for (int x=maxX - 1; x >= minX; x--) {\n      final TiledMapTileLayer.Cell cell=layer.getCell(x,y);\n      if (cell == null)       continue;\n      final TiledMapTile tile=cell.getTile();\n      if (tile != null) {\n        final boolean flipX=cell.getFlipHorizontally();\n        final boolean flipY=cell.getFlipVertically();\n        final int rotations=cell.getRotation();\n        TextureRegion region=tile.getTextureRegion();\n        float x1=x * layerTileWidth - offsetX + tile.getOffsetX() * unitScale + layerOffsetX;\n        float y1=y * layerTileHeight50 + tile.getOffsetY() * unitScale + layerOffsetY;\n        float x2=x1 + region.getRegionWidth() * unitScale;\n        float y2=y1 + region.getRegionHeight() * unitScale;\n        float u1=region.getU();\n        float v1=region.getV2();\n        float u2=region.getU2();\n        float v2=region.getV();\n        vertices[X1]=x1;\n        vertices[Y1]=y1;\n        vertices[C1]=color;\n        vertices[U1]=u1;\n        vertices[V1]=v1;\n        vertices[X2]=x1;\n        vertices[Y2]=y2;\n        vertices[C2]=color;\n        vertices[U2]=u1;\n        vertices[V2]=v2;\n        vertices[X3]=x2;\n        vertices[Y3]=y2;\n        vertices[C3]=color;\n        vertices[U3]=u2;\n        vertices[V3]=v2;\n        vertices[X4]=x2;\n        vertices[Y4]=y1;\n        vertices[C4]=color;\n        vertices[U4]=u2;\n        vertices[V4]=v1;\n        if (flipX) {\n          float temp=vertices[U1];\n          vertices[U1]=vertices[U3];\n          vertices[U3]=temp;\n          temp=vertices[U2];\n          vertices[U2]=vertices[U4];\n          vertices[U4]=temp;\n        }\n        if (flipY) {\n          float temp=vertices[V1];\n          vertices[V1]=vertices[V3];\n          vertices[V3]=temp;\n          temp=vertices[V2];\n          vertices[V2]=vertices[V4];\n          vertices[V4]=temp;\n        }\n        if (rotations != 0) {\nswitch (rotations) {\ncase Cell.ROTATE_90:{\n              float tempV=vertices[V1];\n              vertices[V1]=vertices[V2];\n              vertices[V2]=vertices[V3];\n              vertices[V3]=vertices[V4];\n              vertices[V4]=tempV;\n              float tempU=vertices[U1];\n              vertices[U1]=vertices[U2];\n              vertices[U2]=vertices[U3];\n              vertices[U3]=vertices[U4];\n              vertices[U4]=tempU;\n              break;\n            }\ncase Cell.ROTATE_180:{\n            float tempU=vertices[U1];\n            vertices[U1]=vertices[U3];\n            vertices[U3]=tempU;\n            tempU=vertices[U2];\n            vertices[U2]=vertices[U4];\n            vertices[U4]=tempU;\n            float tempV=vertices[V1];\n            vertices[V1]=vertices[V3];\n            vertices[V3]=tempV;\n            tempV=vertices[V2];\n            vertices[V2]=vertices[V4];\n            vertices[V4]=tempV;\n            break;\n          }\ncase Cell.ROTATE_270:{\n          float tempV=vertices[V1];\n          vertices[V1]=vertices[V4];\n          vertices[V4]=vertices[V3];\n          vertices[V3]=vertices[V2];\n          vertices[V2]=tempV;\n          float tempU=vertices[U1];\n          vertices[U1]=vertices[U4];\n          vertices[U4]=vertices[U3];\n          vertices[U3]=vertices[U2];\n          vertices[U2]=tempU;\n          break;\n        }\n    }\n  }\n  batch.draw(region.getTexture(),vertices,0,NUM_VERTICES);\n}\n}\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 872,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 87,
        "startColumnNumber" : 5,
        "endLineNumber" : 87,
        "endColumnNumber" : 85
      },
      "nodeContext" : "float y1=y * layerTileHeight50 + tile.getOffsetY() * unitScale + layerOffsetY;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 73,
    "startColumnNumber" : 25,
    "endLineNumber" : 73,
    "endColumnNumber" : 26
  }, {
    "charLength" : 1,
    "startLineNumber" : 74,
    "startColumnNumber" : 20,
    "endLineNumber" : 74,
    "endColumnNumber" : 21
  }, {
    "charLength" : 1,
    "startLineNumber" : 76,
    "startColumnNumber" : 57,
    "endLineNumber" : 76,
    "endColumnNumber" : 58
  }, {
    "charLength" : 1,
    "startLineNumber" : 87,
    "startColumnNumber" : 16,
    "endLineNumber" : 87,
    "endColumnNumber" : 17
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 7
  } ]
}