{
  "id" : 433,
  "expression" : "executorService",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/handler/src/test/java/io/netty/handler/ipfilter/UniqueIpFilterTest.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "executorService",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 41,
      "startColumnNumber" : 75,
      "endLineNumber" : 41,
      "endColumnNumber" : 90
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 41,
        "startColumnNumber" : 50,
        "endLineNumber" : 41,
        "endColumnNumber" : 101
      },
      "nodeContext" : "newChannelAsync(barrier,executorService,ipFilter)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 41,
        "startColumnNumber" : 40,
        "endLineNumber" : 41,
        "endColumnNumber" : 101
      },
      "nodeContext" : "future1=newChannelAsync(barrier,executorService,ipFilter)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 41,
        "startColumnNumber" : 16,
        "endLineNumber" : 41,
        "endColumnNumber" : 102
      },
      "nodeContext" : "Future<EmbeddedChannel> future1=newChannelAsync(barrier,executorService,ipFilter);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 642,
        "startLineNumber" : 39,
        "startColumnNumber" : 56,
        "endLineNumber" : 51,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  final UniqueIpFilter ipFilter=new UniqueIpFilter();\n  Future<EmbeddedChannel> future1=newChannelAsync(barrier,executorService,ipFilter);\n  Future<EmbeddedChannel> future2=newChannelAsync(barrier,executorService,ipFilter);\n  EmbeddedChannel ch1=future1.get();\n  EmbeddedChannel ch2=future2.get();\n  assertTrue(ch1.isActive() || ch2.isActive());\n  assertFalse(ch1.isActive() && ch2.isActive());\n  barrier.reset();\n  ch1.close().await();\n  ch2.close().await();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 88,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 686,
        "startLineNumber" : 39,
        "startColumnNumber" : 12,
        "endLineNumber" : 51,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int round=0; round < 10000; round++) {\n  final UniqueIpFilter ipFilter=new UniqueIpFilter();\n  Future<EmbeddedChannel> future1=newChannelAsync(barrier,executorService,ipFilter);\n  Future<EmbeddedChannel> future2=newChannelAsync(barrier,executorService,ipFilter);\n  EmbeddedChannel ch1=future1.get();\n  EmbeddedChannel ch2=future2.get();\n  assertTrue(ch1.isActive() || ch2.isActive());\n  assertFalse(ch1.isActive() && ch2.isActive());\n  barrier.reset();\n  ch1.close().await();\n  ch2.close().await();\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 99,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 712,
        "startLineNumber" : 38,
        "startColumnNumber" : 12,
        "endLineNumber" : 52,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (int round=0; round < 10000; round++) {\n    final UniqueIpFilter ipFilter=new UniqueIpFilter();\n    Future<EmbeddedChannel> future1=newChannelAsync(barrier,executorService,ipFilter);\n    Future<EmbeddedChannel> future2=newChannelAsync(barrier,executorService,ipFilter);\n    EmbeddedChannel ch1=future1.get();\n    EmbeddedChannel ch2=future2.get();\n    assertTrue(ch1.isActive() || ch2.isActive());\n    assertFalse(ch1.isActive() && ch2.isActive());\n    barrier.reset();\n    ch1.close().await();\n    ch2.close().await();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 100,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 778,
        "startLineNumber" : 38,
        "startColumnNumber" : 8,
        "endLineNumber" : 54,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  for (int round=0; round < 10000; round++) {\n    final UniqueIpFilter ipFilter=new UniqueIpFilter();\n    Future<EmbeddedChannel> future1=newChannelAsync(barrier,executorService,ipFilter);\n    Future<EmbeddedChannel> future2=newChannelAsync(barrier,executorService,ipFilter);\n    EmbeddedChannel ch1=future1.get();\n    EmbeddedChannel ch2=future2.get();\n    assertTrue(ch1.isActive() || ch2.isActive());\n    assertFalse(ch1.isActive() && ch2.isActive());\n    barrier.reset();\n    ch1.close().await();\n    ch2.close().await();\n  }\n}\n  finally {\n  executorService.shutdown();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 106,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 933,
        "startLineNumber" : 35,
        "startColumnNumber" : 61,
        "endLineNumber" : 55,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final CyclicBarrier barrier=new CyclicBarrier(2);\n  ExecutorService executorService=Executors.newFixedThreadPool(2);\n  try {\n    for (int round=0; round < 10000; round++) {\n      final UniqueIpFilter ipFilter=new UniqueIpFilter();\n      Future<EmbeddedChannel> future1=newChannelAsync(barrier,executorService,ipFilter);\n      Future<EmbeddedChannel> future2=newChannelAsync(barrier,executorService,ipFilter);\n      EmbeddedChannel ch1=future1.get();\n      EmbeddedChannel ch2=future2.get();\n      assertTrue(ch1.isActive() || ch2.isActive());\n      assertFalse(ch1.isActive() && ch2.isActive());\n      barrier.reset();\n      ch1.close().await();\n      ch2.close().await();\n    }\n  }\n  finally {\n    executorService.shutdown();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 126,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1001,
        "startLineNumber" : 34,
        "startColumnNumber" : 4,
        "endLineNumber" : 55,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testUniqueIpFilterHandler() throws Exception {\n  final CyclicBarrier barrier=new CyclicBarrier(2);\n  ExecutorService executorService=Executors.newFixedThreadPool(2);\n  try {\n    for (int round=0; round < 10000; round++) {\n      final UniqueIpFilter ipFilter=new UniqueIpFilter();\n      Future<EmbeddedChannel> future1=newChannelAsync(barrier,executorService,ipFilter);\n      Future<EmbeddedChannel> future2=newChannelAsync(barrier,executorService,ipFilter);\n      EmbeddedChannel ch1=future1.get();\n      EmbeddedChannel ch2=future2.get();\n      assertTrue(ch1.isActive() || ch2.isActive());\n      assertFalse(ch1.isActive() && ch2.isActive());\n      barrier.reset();\n      ch1.close().await();\n      ch2.close().await();\n    }\n  }\n  finally {\n    executorService.shutdown();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 134,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 41,
        "startColumnNumber" : 16,
        "endLineNumber" : 41,
        "endColumnNumber" : 102
      },
      "nodeContext" : "Future<EmbeddedChannel> future1=newChannelAsync(barrier,executorService,ipFilter);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.concurrent.ExecutorService"
  }, {
    "nodeContext" : "executorService",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 42,
      "startColumnNumber" : 75,
      "endLineNumber" : 42,
      "endColumnNumber" : 90
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 42,
        "startColumnNumber" : 50,
        "endLineNumber" : 42,
        "endColumnNumber" : 101
      },
      "nodeContext" : "newChannelAsync(barrier,executorService,ipFilter)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 42,
        "startColumnNumber" : 40,
        "endLineNumber" : 42,
        "endColumnNumber" : 101
      },
      "nodeContext" : "future2=newChannelAsync(barrier,executorService,ipFilter)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 42,
        "startColumnNumber" : 16,
        "endLineNumber" : 42,
        "endColumnNumber" : 102
      },
      "nodeContext" : "Future<EmbeddedChannel> future2=newChannelAsync(barrier,executorService,ipFilter);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 642,
        "startLineNumber" : 39,
        "startColumnNumber" : 56,
        "endLineNumber" : 51,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  final UniqueIpFilter ipFilter=new UniqueIpFilter();\n  Future<EmbeddedChannel> future1=newChannelAsync(barrier,executorService,ipFilter);\n  Future<EmbeddedChannel> future2=newChannelAsync(barrier,executorService,ipFilter);\n  EmbeddedChannel ch1=future1.get();\n  EmbeddedChannel ch2=future2.get();\n  assertTrue(ch1.isActive() || ch2.isActive());\n  assertFalse(ch1.isActive() && ch2.isActive());\n  barrier.reset();\n  ch1.close().await();\n  ch2.close().await();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 88,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 686,
        "startLineNumber" : 39,
        "startColumnNumber" : 12,
        "endLineNumber" : 51,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int round=0; round < 10000; round++) {\n  final UniqueIpFilter ipFilter=new UniqueIpFilter();\n  Future<EmbeddedChannel> future1=newChannelAsync(barrier,executorService,ipFilter);\n  Future<EmbeddedChannel> future2=newChannelAsync(barrier,executorService,ipFilter);\n  EmbeddedChannel ch1=future1.get();\n  EmbeddedChannel ch2=future2.get();\n  assertTrue(ch1.isActive() || ch2.isActive());\n  assertFalse(ch1.isActive() && ch2.isActive());\n  barrier.reset();\n  ch1.close().await();\n  ch2.close().await();\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 99,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 712,
        "startLineNumber" : 38,
        "startColumnNumber" : 12,
        "endLineNumber" : 52,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (int round=0; round < 10000; round++) {\n    final UniqueIpFilter ipFilter=new UniqueIpFilter();\n    Future<EmbeddedChannel> future1=newChannelAsync(barrier,executorService,ipFilter);\n    Future<EmbeddedChannel> future2=newChannelAsync(barrier,executorService,ipFilter);\n    EmbeddedChannel ch1=future1.get();\n    EmbeddedChannel ch2=future2.get();\n    assertTrue(ch1.isActive() || ch2.isActive());\n    assertFalse(ch1.isActive() && ch2.isActive());\n    barrier.reset();\n    ch1.close().await();\n    ch2.close().await();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 100,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 778,
        "startLineNumber" : 38,
        "startColumnNumber" : 8,
        "endLineNumber" : 54,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  for (int round=0; round < 10000; round++) {\n    final UniqueIpFilter ipFilter=new UniqueIpFilter();\n    Future<EmbeddedChannel> future1=newChannelAsync(barrier,executorService,ipFilter);\n    Future<EmbeddedChannel> future2=newChannelAsync(barrier,executorService,ipFilter);\n    EmbeddedChannel ch1=future1.get();\n    EmbeddedChannel ch2=future2.get();\n    assertTrue(ch1.isActive() || ch2.isActive());\n    assertFalse(ch1.isActive() && ch2.isActive());\n    barrier.reset();\n    ch1.close().await();\n    ch2.close().await();\n  }\n}\n  finally {\n  executorService.shutdown();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 106,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 933,
        "startLineNumber" : 35,
        "startColumnNumber" : 61,
        "endLineNumber" : 55,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final CyclicBarrier barrier=new CyclicBarrier(2);\n  ExecutorService executorService=Executors.newFixedThreadPool(2);\n  try {\n    for (int round=0; round < 10000; round++) {\n      final UniqueIpFilter ipFilter=new UniqueIpFilter();\n      Future<EmbeddedChannel> future1=newChannelAsync(barrier,executorService,ipFilter);\n      Future<EmbeddedChannel> future2=newChannelAsync(barrier,executorService,ipFilter);\n      EmbeddedChannel ch1=future1.get();\n      EmbeddedChannel ch2=future2.get();\n      assertTrue(ch1.isActive() || ch2.isActive());\n      assertFalse(ch1.isActive() && ch2.isActive());\n      barrier.reset();\n      ch1.close().await();\n      ch2.close().await();\n    }\n  }\n  finally {\n    executorService.shutdown();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 126,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1001,
        "startLineNumber" : 34,
        "startColumnNumber" : 4,
        "endLineNumber" : 55,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testUniqueIpFilterHandler() throws Exception {\n  final CyclicBarrier barrier=new CyclicBarrier(2);\n  ExecutorService executorService=Executors.newFixedThreadPool(2);\n  try {\n    for (int round=0; round < 10000; round++) {\n      final UniqueIpFilter ipFilter=new UniqueIpFilter();\n      Future<EmbeddedChannel> future1=newChannelAsync(barrier,executorService,ipFilter);\n      Future<EmbeddedChannel> future2=newChannelAsync(barrier,executorService,ipFilter);\n      EmbeddedChannel ch1=future1.get();\n      EmbeddedChannel ch2=future2.get();\n      assertTrue(ch1.isActive() || ch2.isActive());\n      assertFalse(ch1.isActive() && ch2.isActive());\n      barrier.reset();\n      ch1.close().await();\n      ch2.close().await();\n    }\n  }\n  finally {\n    executorService.shutdown();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 134,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 42,
        "startColumnNumber" : 16,
        "endLineNumber" : 42,
        "endColumnNumber" : 102
      },
      "nodeContext" : "Future<EmbeddedChannel> future2=newChannelAsync(barrier,executorService,ipFilter);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.concurrent.ExecutorService"
  }, {
    "nodeContext" : "executorService",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 53,
      "startColumnNumber" : 12,
      "endLineNumber" : 53,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 53,
        "startColumnNumber" : 12,
        "endLineNumber" : 53,
        "endColumnNumber" : 38
      },
      "nodeContext" : "executorService.shutdown()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 53,
        "startColumnNumber" : 12,
        "endLineNumber" : 53,
        "endColumnNumber" : 39
      },
      "nodeContext" : "executorService.shutdown();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,finally]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 52,
        "startColumnNumber" : 18,
        "endLineNumber" : 54,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  executorService.shutdown();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 778,
        "startLineNumber" : 38,
        "startColumnNumber" : 8,
        "endLineNumber" : 54,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  for (int round=0; round < 10000; round++) {\n    final UniqueIpFilter ipFilter=new UniqueIpFilter();\n    Future<EmbeddedChannel> future1=newChannelAsync(barrier,executorService,ipFilter);\n    Future<EmbeddedChannel> future2=newChannelAsync(barrier,executorService,ipFilter);\n    EmbeddedChannel ch1=future1.get();\n    EmbeddedChannel ch2=future2.get();\n    assertTrue(ch1.isActive() || ch2.isActive());\n    assertFalse(ch1.isActive() && ch2.isActive());\n    barrier.reset();\n    ch1.close().await();\n    ch2.close().await();\n  }\n}\n  finally {\n  executorService.shutdown();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 106,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 933,
        "startLineNumber" : 35,
        "startColumnNumber" : 61,
        "endLineNumber" : 55,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final CyclicBarrier barrier=new CyclicBarrier(2);\n  ExecutorService executorService=Executors.newFixedThreadPool(2);\n  try {\n    for (int round=0; round < 10000; round++) {\n      final UniqueIpFilter ipFilter=new UniqueIpFilter();\n      Future<EmbeddedChannel> future1=newChannelAsync(barrier,executorService,ipFilter);\n      Future<EmbeddedChannel> future2=newChannelAsync(barrier,executorService,ipFilter);\n      EmbeddedChannel ch1=future1.get();\n      EmbeddedChannel ch2=future2.get();\n      assertTrue(ch1.isActive() || ch2.isActive());\n      assertFalse(ch1.isActive() && ch2.isActive());\n      barrier.reset();\n      ch1.close().await();\n      ch2.close().await();\n    }\n  }\n  finally {\n    executorService.shutdown();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 126,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1001,
        "startLineNumber" : 34,
        "startColumnNumber" : 4,
        "endLineNumber" : 55,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testUniqueIpFilterHandler() throws Exception {\n  final CyclicBarrier barrier=new CyclicBarrier(2);\n  ExecutorService executorService=Executors.newFixedThreadPool(2);\n  try {\n    for (int round=0; round < 10000; round++) {\n      final UniqueIpFilter ipFilter=new UniqueIpFilter();\n      Future<EmbeddedChannel> future1=newChannelAsync(barrier,executorService,ipFilter);\n      Future<EmbeddedChannel> future2=newChannelAsync(barrier,executorService,ipFilter);\n      EmbeddedChannel ch1=future1.get();\n      EmbeddedChannel ch2=future2.get();\n      assertTrue(ch1.isActive() || ch2.isActive());\n      assertFalse(ch1.isActive() && ch2.isActive());\n      barrier.reset();\n      ch1.close().await();\n      ch2.close().await();\n    }\n  }\n  finally {\n    executorService.shutdown();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 134,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 53,
        "startColumnNumber" : 12,
        "endLineNumber" : 53,
        "endColumnNumber" : 39
      },
      "nodeContext" : "executorService.shutdown();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.concurrent.ExecutorService"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 41,
    "startColumnNumber" : 75,
    "endLineNumber" : 41,
    "endColumnNumber" : 90
  }, {
    "charLength" : 15,
    "startLineNumber" : 42,
    "startColumnNumber" : 75,
    "endLineNumber" : 42,
    "endColumnNumber" : 90
  }, {
    "charLength" : 15,
    "startLineNumber" : 53,
    "startColumnNumber" : 12,
    "endLineNumber" : 53,
    "endColumnNumber" : 27
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  } ]
}