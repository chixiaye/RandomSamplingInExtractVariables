{
  "id" : 118,
  "expression" : "index",
  "projectName" : "mockito@mockito",
  "commitID" : "7f036eb9ed79444adcec3a6c635870222b109e50",
  "filePath" : "/src/main/java/org/mockito/internal/creation/bytebuddy/StackTraceChecker.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "index",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 14,
      "startColumnNumber" : 28,
      "endLineNumber" : 14,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 14,
        "startColumnNumber" : 28,
        "endLineNumber" : 14,
        "endColumnNumber" : 57
      },
      "nodeContext" : "index < stackTrace.length - 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 988,
        "startLineNumber" : 14,
        "startColumnNumber" : 8,
        "endLineNumber" : 33,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int index=1; index < stackTrace.length - 1; index++) {\n  if (!stackTrace[index].getClassName().startsWith(\"org.mockito.internal.\")) {\n    if (stackTrace[index + 1].getMethodName().startsWith(\"<init>\")) {\n      try {\n        if (!stackTrace[index + 1].getClassName().equals(type.getName()) && type.isAssignableFrom(Class.forName(stackTrace[index + 1].getClassName(),false,type.getClassLoader()))) {\n          return true;\n        }\n else {\n          break;\n        }\n      }\n catch (      ClassNotFoundException ignored) {\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 85,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1111,
        "startLineNumber" : 12,
        "startColumnNumber" : 39,
        "endLineNumber" : 35,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  StackTraceElement[] stackTrace=Thread.currentThread().getStackTrace();\n  for (int index=1; index < stackTrace.length - 1; index++) {\n    if (!stackTrace[index].getClassName().startsWith(\"org.mockito.internal.\")) {\n      if (stackTrace[index + 1].getMethodName().startsWith(\"<init>\")) {\n        try {\n          if (!stackTrace[index + 1].getClassName().equals(type.getName()) && type.isAssignableFrom(Class.forName(stackTrace[index + 1].getClassName(),false,type.getClassLoader()))) {\n            return true;\n          }\n else {\n            break;\n          }\n        }\n catch (        ClassNotFoundException ignored) {\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 100,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1161,
        "startLineNumber" : 11,
        "startColumnNumber" : 4,
        "endLineNumber" : 35,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean test(Class<?> type){\n  StackTraceElement[] stackTrace=Thread.currentThread().getStackTrace();\n  for (int index=1; index < stackTrace.length - 1; index++) {\n    if (!stackTrace[index].getClassName().startsWith(\"org.mockito.internal.\")) {\n      if (stackTrace[index + 1].getMethodName().startsWith(\"<init>\")) {\n        try {\n          if (!stackTrace[index + 1].getClassName().equals(type.getName()) && type.isAssignableFrom(Class.forName(stackTrace[index + 1].getClassName(),false,type.getClassLoader()))) {\n            return true;\n          }\n else {\n            break;\n          }\n        }\n catch (        ClassNotFoundException ignored) {\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 112,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 14,
        "startColumnNumber" : 28,
        "endLineNumber" : 14,
        "endColumnNumber" : 57
      },
      "nodeContext" : "index < stackTrace.length - 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "index",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 15,
      "startColumnNumber" : 28,
      "endLineNumber" : 15,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 15,
        "startColumnNumber" : 17,
        "endLineNumber" : 15,
        "endColumnNumber" : 34
      },
      "nodeContext" : "stackTrace[index]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 15,
        "startColumnNumber" : 17,
        "endLineNumber" : 15,
        "endColumnNumber" : 49
      },
      "nodeContext" : "stackTrace[index].getClassName()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 15,
        "startColumnNumber" : 17,
        "endLineNumber" : 15,
        "endColumnNumber" : 85
      },
      "nodeContext" : "stackTrace[index].getClassName().startsWith(\"org.mockito.internal.\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 15,
        "startColumnNumber" : 16,
        "endLineNumber" : 15,
        "endColumnNumber" : 85
      },
      "nodeContext" : "!stackTrace[index].getClassName().startsWith(\"org.mockito.internal.\")",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 902,
        "startLineNumber" : 15,
        "startColumnNumber" : 12,
        "endLineNumber" : 32,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!stackTrace[index].getClassName().startsWith(\"org.mockito.internal.\")) {\n  if (stackTrace[index + 1].getMethodName().startsWith(\"<init>\")) {\n    try {\n      if (!stackTrace[index + 1].getClassName().equals(type.getName()) && type.isAssignableFrom(Class.forName(stackTrace[index + 1].getClassName(),false,type.getClassLoader()))) {\n        return true;\n      }\n else {\n        break;\n      }\n    }\n catch (    ClassNotFoundException ignored) {\n      break;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 69,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 928,
        "startLineNumber" : 14,
        "startColumnNumber" : 68,
        "endLineNumber" : 33,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (!stackTrace[index].getClassName().startsWith(\"org.mockito.internal.\")) {\n    if (stackTrace[index + 1].getMethodName().startsWith(\"<init>\")) {\n      try {\n        if (!stackTrace[index + 1].getClassName().equals(type.getName()) && type.isAssignableFrom(Class.forName(stackTrace[index + 1].getClassName(),false,type.getClassLoader()))) {\n          return true;\n        }\n else {\n          break;\n        }\n      }\n catch (      ClassNotFoundException ignored) {\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 70,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 988,
        "startLineNumber" : 14,
        "startColumnNumber" : 8,
        "endLineNumber" : 33,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int index=1; index < stackTrace.length - 1; index++) {\n  if (!stackTrace[index].getClassName().startsWith(\"org.mockito.internal.\")) {\n    if (stackTrace[index + 1].getMethodName().startsWith(\"<init>\")) {\n      try {\n        if (!stackTrace[index + 1].getClassName().equals(type.getName()) && type.isAssignableFrom(Class.forName(stackTrace[index + 1].getClassName(),false,type.getClassLoader()))) {\n          return true;\n        }\n else {\n          break;\n        }\n      }\n catch (      ClassNotFoundException ignored) {\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 85,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1111,
        "startLineNumber" : 12,
        "startColumnNumber" : 39,
        "endLineNumber" : 35,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  StackTraceElement[] stackTrace=Thread.currentThread().getStackTrace();\n  for (int index=1; index < stackTrace.length - 1; index++) {\n    if (!stackTrace[index].getClassName().startsWith(\"org.mockito.internal.\")) {\n      if (stackTrace[index + 1].getMethodName().startsWith(\"<init>\")) {\n        try {\n          if (!stackTrace[index + 1].getClassName().equals(type.getName()) && type.isAssignableFrom(Class.forName(stackTrace[index + 1].getClassName(),false,type.getClassLoader()))) {\n            return true;\n          }\n else {\n            break;\n          }\n        }\n catch (        ClassNotFoundException ignored) {\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 100,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1161,
        "startLineNumber" : 11,
        "startColumnNumber" : 4,
        "endLineNumber" : 35,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean test(Class<?> type){\n  StackTraceElement[] stackTrace=Thread.currentThread().getStackTrace();\n  for (int index=1; index < stackTrace.length - 1; index++) {\n    if (!stackTrace[index].getClassName().startsWith(\"org.mockito.internal.\")) {\n      if (stackTrace[index + 1].getMethodName().startsWith(\"<init>\")) {\n        try {\n          if (!stackTrace[index + 1].getClassName().equals(type.getName()) && type.isAssignableFrom(Class.forName(stackTrace[index + 1].getClassName(),false,type.getClassLoader()))) {\n            return true;\n          }\n else {\n            break;\n          }\n        }\n catch (        ClassNotFoundException ignored) {\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 112,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 15,
        "startColumnNumber" : 16,
        "endLineNumber" : 15,
        "endColumnNumber" : 85
      },
      "nodeContext" : "!stackTrace[index].getClassName().startsWith(\"org.mockito.internal.\")",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "index",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 16,
      "startColumnNumber" : 31,
      "endLineNumber" : 16,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,index]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 16,
        "startColumnNumber" : 31,
        "endLineNumber" : 16,
        "endColumnNumber" : 40
      },
      "nodeContext" : "index + 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 16,
        "startColumnNumber" : 20,
        "endLineNumber" : 16,
        "endColumnNumber" : 41
      },
      "nodeContext" : "stackTrace[index + 1]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 16,
        "startColumnNumber" : 20,
        "endLineNumber" : 16,
        "endColumnNumber" : 57
      },
      "nodeContext" : "stackTrace[index + 1].getMethodName()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 16,
        "startColumnNumber" : 20,
        "endLineNumber" : 16,
        "endColumnNumber" : 78
      },
      "nodeContext" : "stackTrace[index + 1].getMethodName().startsWith(\"<init>\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 793,
        "startLineNumber" : 16,
        "startColumnNumber" : 16,
        "endLineNumber" : 31,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (stackTrace[index + 1].getMethodName().startsWith(\"<init>\")) {\n  try {\n    if (!stackTrace[index + 1].getClassName().equals(type.getName()) && type.isAssignableFrom(Class.forName(stackTrace[index + 1].getClassName(),false,type.getClassLoader()))) {\n      return true;\n    }\n else {\n      break;\n    }\n  }\n catch (  ClassNotFoundException ignored) {\n    break;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 58,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 827,
        "startLineNumber" : 15,
        "startColumnNumber" : 87,
        "endLineNumber" : 32,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (stackTrace[index + 1].getMethodName().startsWith(\"<init>\")) {\n    try {\n      if (!stackTrace[index + 1].getClassName().equals(type.getName()) && type.isAssignableFrom(Class.forName(stackTrace[index + 1].getClassName(),false,type.getClassLoader()))) {\n        return true;\n      }\n else {\n        break;\n      }\n    }\n catch (    ClassNotFoundException ignored) {\n      break;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 59,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 902,
        "startLineNumber" : 15,
        "startColumnNumber" : 12,
        "endLineNumber" : 32,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!stackTrace[index].getClassName().startsWith(\"org.mockito.internal.\")) {\n  if (stackTrace[index + 1].getMethodName().startsWith(\"<init>\")) {\n    try {\n      if (!stackTrace[index + 1].getClassName().equals(type.getName()) && type.isAssignableFrom(Class.forName(stackTrace[index + 1].getClassName(),false,type.getClassLoader()))) {\n        return true;\n      }\n else {\n        break;\n      }\n    }\n catch (    ClassNotFoundException ignored) {\n      break;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 69,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 928,
        "startLineNumber" : 14,
        "startColumnNumber" : 68,
        "endLineNumber" : 33,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (!stackTrace[index].getClassName().startsWith(\"org.mockito.internal.\")) {\n    if (stackTrace[index + 1].getMethodName().startsWith(\"<init>\")) {\n      try {\n        if (!stackTrace[index + 1].getClassName().equals(type.getName()) && type.isAssignableFrom(Class.forName(stackTrace[index + 1].getClassName(),false,type.getClassLoader()))) {\n          return true;\n        }\n else {\n          break;\n        }\n      }\n catch (      ClassNotFoundException ignored) {\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 70,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 988,
        "startLineNumber" : 14,
        "startColumnNumber" : 8,
        "endLineNumber" : 33,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int index=1; index < stackTrace.length - 1; index++) {\n  if (!stackTrace[index].getClassName().startsWith(\"org.mockito.internal.\")) {\n    if (stackTrace[index + 1].getMethodName().startsWith(\"<init>\")) {\n      try {\n        if (!stackTrace[index + 1].getClassName().equals(type.getName()) && type.isAssignableFrom(Class.forName(stackTrace[index + 1].getClassName(),false,type.getClassLoader()))) {\n          return true;\n        }\n else {\n          break;\n        }\n      }\n catch (      ClassNotFoundException ignored) {\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 85,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1111,
        "startLineNumber" : 12,
        "startColumnNumber" : 39,
        "endLineNumber" : 35,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  StackTraceElement[] stackTrace=Thread.currentThread().getStackTrace();\n  for (int index=1; index < stackTrace.length - 1; index++) {\n    if (!stackTrace[index].getClassName().startsWith(\"org.mockito.internal.\")) {\n      if (stackTrace[index + 1].getMethodName().startsWith(\"<init>\")) {\n        try {\n          if (!stackTrace[index + 1].getClassName().equals(type.getName()) && type.isAssignableFrom(Class.forName(stackTrace[index + 1].getClassName(),false,type.getClassLoader()))) {\n            return true;\n          }\n else {\n            break;\n          }\n        }\n catch (        ClassNotFoundException ignored) {\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 100,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1161,
        "startLineNumber" : 11,
        "startColumnNumber" : 4,
        "endLineNumber" : 35,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean test(Class<?> type){\n  StackTraceElement[] stackTrace=Thread.currentThread().getStackTrace();\n  for (int index=1; index < stackTrace.length - 1; index++) {\n    if (!stackTrace[index].getClassName().startsWith(\"org.mockito.internal.\")) {\n      if (stackTrace[index + 1].getMethodName().startsWith(\"<init>\")) {\n        try {\n          if (!stackTrace[index + 1].getClassName().equals(type.getName()) && type.isAssignableFrom(Class.forName(stackTrace[index + 1].getClassName(),false,type.getClassLoader()))) {\n            return true;\n          }\n else {\n            break;\n          }\n        }\n catch (        ClassNotFoundException ignored) {\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 112,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 16,
        "startColumnNumber" : 20,
        "endLineNumber" : 16,
        "endColumnNumber" : 78
      },
      "nodeContext" : "stackTrace[index + 1].getMethodName().startsWith(\"<init>\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "index",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 18,
      "startColumnNumber" : 40,
      "endLineNumber" : 18,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,index]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 18,
        "startColumnNumber" : 40,
        "endLineNumber" : 18,
        "endColumnNumber" : 49
      },
      "nodeContext" : "index + 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 18,
        "startColumnNumber" : 29,
        "endLineNumber" : 18,
        "endColumnNumber" : 50
      },
      "nodeContext" : "stackTrace[index + 1]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 18,
        "startColumnNumber" : 29,
        "endLineNumber" : 18,
        "endColumnNumber" : 65
      },
      "nodeContext" : "stackTrace[index + 1].getClassName()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 18,
        "startColumnNumber" : 29,
        "endLineNumber" : 18,
        "endColumnNumber" : 88
      },
      "nodeContext" : "stackTrace[index + 1].getClassName().equals(type.getName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 18,
        "startColumnNumber" : 28,
        "endLineNumber" : 18,
        "endColumnNumber" : 88
      },
      "nodeContext" : "!stackTrace[index + 1].getClassName().equals(type.getName())",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 391,
        "startLineNumber" : 18,
        "startColumnNumber" : 28,
        "endLineNumber" : 23,
        "endColumnNumber" : 71
      },
      "nodeContext" : "!stackTrace[index + 1].getClassName().equals(type.getName()) && type.isAssignableFrom(Class.forName(stackTrace[index + 1].getClassName(),false,type.getClassLoader()))",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 31,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 537,
        "startLineNumber" : 18,
        "startColumnNumber" : 24,
        "endLineNumber" : 27,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (!stackTrace[index + 1].getClassName().equals(type.getName()) && type.isAssignableFrom(Class.forName(stackTrace[index + 1].getClassName(),false,type.getClassLoader()))) {\n  return true;\n}\n else {\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 37,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 587,
        "startLineNumber" : 17,
        "startColumnNumber" : 24,
        "endLineNumber" : 28,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (!stackTrace[index + 1].getClassName().equals(type.getName()) && type.isAssignableFrom(Class.forName(stackTrace[index + 1].getClassName(),false,type.getClassLoader()))) {\n    return true;\n  }\n else {\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 38,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 687,
        "startLineNumber" : 17,
        "startColumnNumber" : 20,
        "endLineNumber" : 30,
        "endColumnNumber" : 21
      },
      "nodeContext" : "try {\n  if (!stackTrace[index + 1].getClassName().equals(type.getName()) && type.isAssignableFrom(Class.forName(stackTrace[index + 1].getClassName(),false,type.getClassLoader()))) {\n    return true;\n  }\n else {\n    break;\n  }\n}\n catch (ClassNotFoundException ignored) {\n  break;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 46,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 729,
        "startLineNumber" : 16,
        "startColumnNumber" : 80,
        "endLineNumber" : 31,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  try {\n    if (!stackTrace[index + 1].getClassName().equals(type.getName()) && type.isAssignableFrom(Class.forName(stackTrace[index + 1].getClassName(),false,type.getClassLoader()))) {\n      return true;\n    }\n else {\n      break;\n    }\n  }\n catch (  ClassNotFoundException ignored) {\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 47,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 793,
        "startLineNumber" : 16,
        "startColumnNumber" : 16,
        "endLineNumber" : 31,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (stackTrace[index + 1].getMethodName().startsWith(\"<init>\")) {\n  try {\n    if (!stackTrace[index + 1].getClassName().equals(type.getName()) && type.isAssignableFrom(Class.forName(stackTrace[index + 1].getClassName(),false,type.getClassLoader()))) {\n      return true;\n    }\n else {\n      break;\n    }\n  }\n catch (  ClassNotFoundException ignored) {\n    break;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 58,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 827,
        "startLineNumber" : 15,
        "startColumnNumber" : 87,
        "endLineNumber" : 32,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (stackTrace[index + 1].getMethodName().startsWith(\"<init>\")) {\n    try {\n      if (!stackTrace[index + 1].getClassName().equals(type.getName()) && type.isAssignableFrom(Class.forName(stackTrace[index + 1].getClassName(),false,type.getClassLoader()))) {\n        return true;\n      }\n else {\n        break;\n      }\n    }\n catch (    ClassNotFoundException ignored) {\n      break;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 59,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 902,
        "startLineNumber" : 15,
        "startColumnNumber" : 12,
        "endLineNumber" : 32,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!stackTrace[index].getClassName().startsWith(\"org.mockito.internal.\")) {\n  if (stackTrace[index + 1].getMethodName().startsWith(\"<init>\")) {\n    try {\n      if (!stackTrace[index + 1].getClassName().equals(type.getName()) && type.isAssignableFrom(Class.forName(stackTrace[index + 1].getClassName(),false,type.getClassLoader()))) {\n        return true;\n      }\n else {\n        break;\n      }\n    }\n catch (    ClassNotFoundException ignored) {\n      break;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 69,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 928,
        "startLineNumber" : 14,
        "startColumnNumber" : 68,
        "endLineNumber" : 33,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (!stackTrace[index].getClassName().startsWith(\"org.mockito.internal.\")) {\n    if (stackTrace[index + 1].getMethodName().startsWith(\"<init>\")) {\n      try {\n        if (!stackTrace[index + 1].getClassName().equals(type.getName()) && type.isAssignableFrom(Class.forName(stackTrace[index + 1].getClassName(),false,type.getClassLoader()))) {\n          return true;\n        }\n else {\n          break;\n        }\n      }\n catch (      ClassNotFoundException ignored) {\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 70,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 988,
        "startLineNumber" : 14,
        "startColumnNumber" : 8,
        "endLineNumber" : 33,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int index=1; index < stackTrace.length - 1; index++) {\n  if (!stackTrace[index].getClassName().startsWith(\"org.mockito.internal.\")) {\n    if (stackTrace[index + 1].getMethodName().startsWith(\"<init>\")) {\n      try {\n        if (!stackTrace[index + 1].getClassName().equals(type.getName()) && type.isAssignableFrom(Class.forName(stackTrace[index + 1].getClassName(),false,type.getClassLoader()))) {\n          return true;\n        }\n else {\n          break;\n        }\n      }\n catch (      ClassNotFoundException ignored) {\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 85,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1111,
        "startLineNumber" : 12,
        "startColumnNumber" : 39,
        "endLineNumber" : 35,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  StackTraceElement[] stackTrace=Thread.currentThread().getStackTrace();\n  for (int index=1; index < stackTrace.length - 1; index++) {\n    if (!stackTrace[index].getClassName().startsWith(\"org.mockito.internal.\")) {\n      if (stackTrace[index + 1].getMethodName().startsWith(\"<init>\")) {\n        try {\n          if (!stackTrace[index + 1].getClassName().equals(type.getName()) && type.isAssignableFrom(Class.forName(stackTrace[index + 1].getClassName(),false,type.getClassLoader()))) {\n            return true;\n          }\n else {\n            break;\n          }\n        }\n catch (        ClassNotFoundException ignored) {\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 100,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1161,
        "startLineNumber" : 11,
        "startColumnNumber" : 4,
        "endLineNumber" : 35,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean test(Class<?> type){\n  StackTraceElement[] stackTrace=Thread.currentThread().getStackTrace();\n  for (int index=1; index < stackTrace.length - 1; index++) {\n    if (!stackTrace[index].getClassName().startsWith(\"org.mockito.internal.\")) {\n      if (stackTrace[index + 1].getMethodName().startsWith(\"<init>\")) {\n        try {\n          if (!stackTrace[index + 1].getClassName().equals(type.getName()) && type.isAssignableFrom(Class.forName(stackTrace[index + 1].getClassName(),false,type.getClassLoader()))) {\n            return true;\n          }\n else {\n            break;\n          }\n        }\n catch (        ClassNotFoundException ignored) {\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 112,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 18,
        "startColumnNumber" : 28,
        "endLineNumber" : 18,
        "endColumnNumber" : 88
      },
      "nodeContext" : "!stackTrace[index + 1].getClassName().equals(type.getName())",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "index",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 21,
      "startColumnNumber" : 59,
      "endLineNumber" : 21,
      "endColumnNumber" : 64
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,index]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 21,
        "startColumnNumber" : 59,
        "endLineNumber" : 21,
        "endColumnNumber" : 68
      },
      "nodeContext" : "index + 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 21,
        "startColumnNumber" : 48,
        "endLineNumber" : 21,
        "endColumnNumber" : 69
      },
      "nodeContext" : "stackTrace[index + 1]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 21,
        "startColumnNumber" : 48,
        "endLineNumber" : 21,
        "endColumnNumber" : 84
      },
      "nodeContext" : "stackTrace[index + 1].getClassName()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 229,
        "startLineNumber" : 20,
        "startColumnNumber" : 40,
        "endLineNumber" : 23,
        "endColumnNumber" : 70
      },
      "nodeContext" : "Class.forName(stackTrace[index + 1].getClassName(),false,type.getClassLoader())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 294,
        "startLineNumber" : 19,
        "startColumnNumber" : 35,
        "endLineNumber" : 23,
        "endColumnNumber" : 71
      },
      "nodeContext" : "type.isAssignableFrom(Class.forName(stackTrace[index + 1].getClassName(),false,type.getClassLoader()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 391,
        "startLineNumber" : 18,
        "startColumnNumber" : 28,
        "endLineNumber" : 23,
        "endColumnNumber" : 71
      },
      "nodeContext" : "!stackTrace[index + 1].getClassName().equals(type.getName()) && type.isAssignableFrom(Class.forName(stackTrace[index + 1].getClassName(),false,type.getClassLoader()))",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 31,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 537,
        "startLineNumber" : 18,
        "startColumnNumber" : 24,
        "endLineNumber" : 27,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (!stackTrace[index + 1].getClassName().equals(type.getName()) && type.isAssignableFrom(Class.forName(stackTrace[index + 1].getClassName(),false,type.getClassLoader()))) {\n  return true;\n}\n else {\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 37,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 587,
        "startLineNumber" : 17,
        "startColumnNumber" : 24,
        "endLineNumber" : 28,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (!stackTrace[index + 1].getClassName().equals(type.getName()) && type.isAssignableFrom(Class.forName(stackTrace[index + 1].getClassName(),false,type.getClassLoader()))) {\n    return true;\n  }\n else {\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 38,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 687,
        "startLineNumber" : 17,
        "startColumnNumber" : 20,
        "endLineNumber" : 30,
        "endColumnNumber" : 21
      },
      "nodeContext" : "try {\n  if (!stackTrace[index + 1].getClassName().equals(type.getName()) && type.isAssignableFrom(Class.forName(stackTrace[index + 1].getClassName(),false,type.getClassLoader()))) {\n    return true;\n  }\n else {\n    break;\n  }\n}\n catch (ClassNotFoundException ignored) {\n  break;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 46,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 729,
        "startLineNumber" : 16,
        "startColumnNumber" : 80,
        "endLineNumber" : 31,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  try {\n    if (!stackTrace[index + 1].getClassName().equals(type.getName()) && type.isAssignableFrom(Class.forName(stackTrace[index + 1].getClassName(),false,type.getClassLoader()))) {\n      return true;\n    }\n else {\n      break;\n    }\n  }\n catch (  ClassNotFoundException ignored) {\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 47,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 793,
        "startLineNumber" : 16,
        "startColumnNumber" : 16,
        "endLineNumber" : 31,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (stackTrace[index + 1].getMethodName().startsWith(\"<init>\")) {\n  try {\n    if (!stackTrace[index + 1].getClassName().equals(type.getName()) && type.isAssignableFrom(Class.forName(stackTrace[index + 1].getClassName(),false,type.getClassLoader()))) {\n      return true;\n    }\n else {\n      break;\n    }\n  }\n catch (  ClassNotFoundException ignored) {\n    break;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 58,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 827,
        "startLineNumber" : 15,
        "startColumnNumber" : 87,
        "endLineNumber" : 32,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (stackTrace[index + 1].getMethodName().startsWith(\"<init>\")) {\n    try {\n      if (!stackTrace[index + 1].getClassName().equals(type.getName()) && type.isAssignableFrom(Class.forName(stackTrace[index + 1].getClassName(),false,type.getClassLoader()))) {\n        return true;\n      }\n else {\n        break;\n      }\n    }\n catch (    ClassNotFoundException ignored) {\n      break;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 59,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 902,
        "startLineNumber" : 15,
        "startColumnNumber" : 12,
        "endLineNumber" : 32,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!stackTrace[index].getClassName().startsWith(\"org.mockito.internal.\")) {\n  if (stackTrace[index + 1].getMethodName().startsWith(\"<init>\")) {\n    try {\n      if (!stackTrace[index + 1].getClassName().equals(type.getName()) && type.isAssignableFrom(Class.forName(stackTrace[index + 1].getClassName(),false,type.getClassLoader()))) {\n        return true;\n      }\n else {\n        break;\n      }\n    }\n catch (    ClassNotFoundException ignored) {\n      break;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 69,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 928,
        "startLineNumber" : 14,
        "startColumnNumber" : 68,
        "endLineNumber" : 33,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (!stackTrace[index].getClassName().startsWith(\"org.mockito.internal.\")) {\n    if (stackTrace[index + 1].getMethodName().startsWith(\"<init>\")) {\n      try {\n        if (!stackTrace[index + 1].getClassName().equals(type.getName()) && type.isAssignableFrom(Class.forName(stackTrace[index + 1].getClassName(),false,type.getClassLoader()))) {\n          return true;\n        }\n else {\n          break;\n        }\n      }\n catch (      ClassNotFoundException ignored) {\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 70,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 988,
        "startLineNumber" : 14,
        "startColumnNumber" : 8,
        "endLineNumber" : 33,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int index=1; index < stackTrace.length - 1; index++) {\n  if (!stackTrace[index].getClassName().startsWith(\"org.mockito.internal.\")) {\n    if (stackTrace[index + 1].getMethodName().startsWith(\"<init>\")) {\n      try {\n        if (!stackTrace[index + 1].getClassName().equals(type.getName()) && type.isAssignableFrom(Class.forName(stackTrace[index + 1].getClassName(),false,type.getClassLoader()))) {\n          return true;\n        }\n else {\n          break;\n        }\n      }\n catch (      ClassNotFoundException ignored) {\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 85,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1111,
        "startLineNumber" : 12,
        "startColumnNumber" : 39,
        "endLineNumber" : 35,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  StackTraceElement[] stackTrace=Thread.currentThread().getStackTrace();\n  for (int index=1; index < stackTrace.length - 1; index++) {\n    if (!stackTrace[index].getClassName().startsWith(\"org.mockito.internal.\")) {\n      if (stackTrace[index + 1].getMethodName().startsWith(\"<init>\")) {\n        try {\n          if (!stackTrace[index + 1].getClassName().equals(type.getName()) && type.isAssignableFrom(Class.forName(stackTrace[index + 1].getClassName(),false,type.getClassLoader()))) {\n            return true;\n          }\n else {\n            break;\n          }\n        }\n catch (        ClassNotFoundException ignored) {\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 100,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1161,
        "startLineNumber" : 11,
        "startColumnNumber" : 4,
        "endLineNumber" : 35,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public boolean test(Class<?> type){\n  StackTraceElement[] stackTrace=Thread.currentThread().getStackTrace();\n  for (int index=1; index < stackTrace.length - 1; index++) {\n    if (!stackTrace[index].getClassName().startsWith(\"org.mockito.internal.\")) {\n      if (stackTrace[index + 1].getMethodName().startsWith(\"<init>\")) {\n        try {\n          if (!stackTrace[index + 1].getClassName().equals(type.getName()) && type.isAssignableFrom(Class.forName(stackTrace[index + 1].getClassName(),false,type.getClassLoader()))) {\n            return true;\n          }\n else {\n            break;\n          }\n        }\n catch (        ClassNotFoundException ignored) {\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 112,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 21,
        "startColumnNumber" : 48,
        "endLineNumber" : 21,
        "endColumnNumber" : 84
      },
      "nodeContext" : "stackTrace[index + 1].getClassName()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 14,
    "startColumnNumber" : 28,
    "endLineNumber" : 14,
    "endColumnNumber" : 33
  }, {
    "charLength" : 5,
    "startLineNumber" : 15,
    "startColumnNumber" : 28,
    "endLineNumber" : 15,
    "endColumnNumber" : 33
  }, {
    "charLength" : 5,
    "startLineNumber" : 16,
    "startColumnNumber" : 31,
    "endLineNumber" : 16,
    "endColumnNumber" : 36
  }, {
    "charLength" : 5,
    "startLineNumber" : 18,
    "startColumnNumber" : 40,
    "endLineNumber" : 18,
    "endColumnNumber" : 45
  }, {
    "charLength" : 5,
    "startLineNumber" : 21,
    "startColumnNumber" : 59,
    "endLineNumber" : 21,
    "endColumnNumber" : 64
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 14
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 12
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 10
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 14
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 12
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 10
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 5
  } ]
}