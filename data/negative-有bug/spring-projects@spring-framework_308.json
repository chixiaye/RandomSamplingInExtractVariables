{
  "id" : 308,
  "expression" : "\"' on target class [\"",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-context-support/src/main/java/org/springframework/scheduling/quartz/JobMethodInvocationFailedException.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"' on target class [\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 41,
      "startColumnNumber" : 4,
      "endLineNumber" : 41,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SuperConstructorInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 132,
        "startLineNumber" : 40,
        "startColumnNumber" : 8,
        "endLineNumber" : 41,
        "endColumnNumber" : 71
      },
      "nodeContext" : "\"Invocation of method '\" + methodInvoker.getTargetMethod() + \"' on target class [\"+ methodInvoker.getTargetClass()+ \"] failed\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 147,
        "startLineNumber" : 40,
        "startColumnNumber" : 2,
        "endLineNumber" : 41,
        "endColumnNumber" : 80
      },
      "nodeContext" : "super(\"Invocation of method '\" + methodInvoker.getTargetMethod() + \"' on target class [\"+ methodInvoker.getTargetClass()+ \"] failed\",cause);\n",
      "nodeType" : "SuperConstructorInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 154,
        "startLineNumber" : 39,
        "startColumnNumber" : 89,
        "endLineNumber" : 42,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  super(\"Invocation of method '\" + methodInvoker.getTargetMethod() + \"' on target class [\"+ methodInvoker.getTargetClass()+ \"] failed\",cause);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 449,
        "startLineNumber" : 34,
        "startColumnNumber" : 1,
        "endLineNumber" : 42,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Constructor for JobMethodInvocationFailedException.\n * @param methodInvoker the MethodInvoker used for reflective invocation\n * @param cause the root cause (as thrown from the target method)\n */\npublic JobMethodInvocationFailedException(MethodInvoker methodInvoker,Throwable cause){\n  super(\"Invocation of method '\" + methodInvoker.getTargetMethod() + \"' on target class [\"+ methodInvoker.getTargetClass()+ \"] failed\",cause);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 25,
      "astHeight" : 6
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SuperConstructorInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 132,
        "startLineNumber" : 40,
        "startColumnNumber" : 8,
        "endLineNumber" : 41,
        "endColumnNumber" : 71
      },
      "nodeContext" : "\"Invocation of method '\" + methodInvoker.getTargetMethod() + \"' on target class [\"+ methodInvoker.getTargetClass()+ \"] failed\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 10,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 41,
    "startColumnNumber" : 4,
    "endLineNumber" : 41,
    "endColumnNumber" : 25
  } ],
  "layoutRelationDataList" : [ ]
}