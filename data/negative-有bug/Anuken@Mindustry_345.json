{
  "id" : 345,
  "expression" : "cons.append(\" | (\").append(\"(\").append(structType).append(\")\").append(\"Float.floatToIntBits(\").append(varName).append(\") << \")",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "a7188c48845dd423fc9b58bc6bcf6797f6d25b46",
  "filePath" : "/annotations/src/main/java/mindustry/annotations/impl/StructProcess.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "cons.append(\" | (\").append(\"(\").append(structType).append(\")\").append(\"Float.floatToIntBits(\").append(varName).append(\") << \")",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 126,
      "startLineNumber" : 104,
      "startColumnNumber" : 24,
      "endLineNumber" : 104,
      "endColumnNumber" : 150
    },
    "astNodeNumber" : 22,
    "astHeight" : 8,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 141,
        "startLineNumber" : 104,
        "startColumnNumber" : 24,
        "endLineNumber" : 104,
        "endColumnNumber" : 165
      },
      "nodeContext" : "cons.append(\" | (\").append(\"(\").append(structType).append(\")\").append(\"Float.floatToIntBits(\").append(varName).append(\") << \").append(offset)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 25,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 154,
        "startLineNumber" : 104,
        "startColumnNumber" : 24,
        "endLineNumber" : 104,
        "endColumnNumber" : 178
      },
      "nodeContext" : "cons.append(\" | (\").append(\"(\").append(structType).append(\")\").append(\"Float.floatToIntBits(\").append(varName).append(\") << \").append(offset).append(\"L)\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 28,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 155,
        "startLineNumber" : 104,
        "startColumnNumber" : 24,
        "endLineNumber" : 104,
        "endColumnNumber" : 179
      },
      "nodeContext" : "cons.append(\" | (\").append(\"(\").append(structType).append(\")\").append(\"Float.floatToIntBits(\").append(varName).append(\") << \").append(offset).append(\"L)\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 29,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 455,
        "startLineNumber" : 103,
        "startColumnNumber" : 55,
        "endLineNumber" : 108,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  cons.append(\" | (\").append(\"(\").append(structType).append(\")\").append(\"Float.floatToIntBits(\").append(varName).append(\") << \").append(offset).append(\"L)\");\n  setter.addStatement(\"return ($T)(($L & $L) | (($T)Float.floatToIntBits(value) << $LL))\",structType,structParam,bitString(offset,size,structTotalSize),structType,offset);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 44,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 956,
        "startLineNumber" : 103,
        "startColumnNumber" : 26,
        "endLineNumber" : 113,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (varType == TypeName.FLOAT) {\n  cons.append(\" | (\").append(\"(\").append(structType).append(\")\").append(\"Float.floatToIntBits(\").append(varName).append(\") << \").append(offset).append(\"L)\");\n  setter.addStatement(\"return ($T)(($L & $L) | (($T)Float.floatToIntBits(value) << $LL))\",structType,structParam,bitString(offset,size,structTotalSize),structType,offset);\n}\n else {\n  cons.append(\" | (((\").append(structType).append(\")\").append(varName).append(\" << \").append(offset).append(\"L)\").append(\" & \").append(bitString(offset,size,structTotalSize)).append(\")\");\n  setter.addStatement(\"return ($T)(($L & $L) | (($T)value << $LL))\",structType,structParam,bitString(offset,size,structTotalSize),structType,offset);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 101,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1637,
        "startLineNumber" : 94,
        "startColumnNumber" : 20,
        "endLineNumber" : 113,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (varType == TypeName.BOOLEAN) {\n  cons.append(\" | (\").append(varName).append(\" ? \").append(\"1L << \").append(offset).append(\"L : 0)\");\n  setter.beginControlFlow(\"if(value)\");\n  setter.addStatement(\"return ($T)(($L & ~(1L << $LL)))\",structType,structParam,offset);\n  setter.nextControlFlow(\"else\");\n  setter.addStatement(\"return ($T)(($L & ~(1L << $LL)) | (1L << $LL))\",structType,structParam,offset,offset);\n  setter.endControlFlow();\n}\n else if (varType == TypeName.FLOAT) {\n  cons.append(\" | (\").append(\"(\").append(structType).append(\")\").append(\"Float.floatToIntBits(\").append(varName).append(\") << \").append(offset).append(\"L)\");\n  setter.addStatement(\"return ($T)(($L & $L) | (($T)Float.floatToIntBits(value) << $LL))\",structType,structParam,bitString(offset,size,structTotalSize),structType,offset);\n}\n else {\n  cons.append(\" | (((\").append(structType).append(\")\").append(varName).append(\" << \").append(offset).append(\"L)\").append(\" & \").append(bitString(offset,size,structTotalSize)).append(\")\");\n  setter.addStatement(\"return ($T)(($L & $L) | (($T)value << $LL))\",structType,structParam,bitString(offset,size,structTotalSize),structType,offset);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 159,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3770,
        "startLineNumber" : 62,
        "startColumnNumber" : 41,
        "endLineNumber" : 122,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  int size=varSize(var);\n  TypeName varType=var.tname();\n  String varName=var.name();\n  constructor.addParameter(varType,varName);\n  MethodSpec.Builder getter=MethodSpec.methodBuilder(var.name().toString()).addModifiers(Modifier.STATIC,Modifier.PUBLIC).returns(varType).addParameter(structType,structParam);\n  MethodSpec.Builder setter=MethodSpec.methodBuilder(var.name().toString()).addModifiers(Modifier.STATIC,Modifier.PUBLIC).returns(structType).addParameter(structType,structParam).addParameter(varType,\"value\");\n  if (varType == TypeName.BOOLEAN) {\n    getter.addStatement(\"return ($L & (1L << $L)) != 0\",structParam,offset);\n  }\n else   if (varType == TypeName.FLOAT) {\n    getter.addStatement(\"return Float.intBitsToFloat((int)(($L >>> $L) & $L))\",structParam,offset,bitString(size,structTotalSize));\n  }\n else {\n    getter.addStatement(\"return ($T)(($L >>> $L) & $L)\",varType,structParam,offset,bitString(size,structTotalSize));\n  }\n  if (varType == TypeName.BOOLEAN) {\n    cons.append(\" | (\").append(varName).append(\" ? \").append(\"1L << \").append(offset).append(\"L : 0)\");\n    setter.beginControlFlow(\"if(value)\");\n    setter.addStatement(\"return ($T)(($L & ~(1L << $LL)))\",structType,structParam,offset);\n    setter.nextControlFlow(\"else\");\n    setter.addStatement(\"return ($T)(($L & ~(1L << $LL)) | (1L << $LL))\",structType,structParam,offset,offset);\n    setter.endControlFlow();\n  }\n else   if (varType == TypeName.FLOAT) {\n    cons.append(\" | (\").append(\"(\").append(structType).append(\")\").append(\"Float.floatToIntBits(\").append(varName).append(\") << \").append(offset).append(\"L)\");\n    setter.addStatement(\"return ($T)(($L & $L) | (($T)Float.floatToIntBits(value) << $LL))\",structType,structParam,bitString(offset,size,structTotalSize),structType,offset);\n  }\n else {\n    cons.append(\" | (((\").append(structType).append(\")\").append(varName).append(\" << \").append(offset).append(\"L)\").append(\" & \").append(bitString(offset,size,structTotalSize)).append(\")\");\n    setter.addStatement(\"return ($T)(($L & $L) | (($T)value << $LL))\",structType,structParam,bitString(offset,size,structTotalSize),structType,offset);\n  }\n  doc.append(\"<br>  \").append(varName).append(\" [\").append(offset).append(\"..\").append(size + offset).append(\"]\\n\");\n  classBuilder.addMethod(getter.build());\n  classBuilder.addMethod(setter.build());\n  offset+=size;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 341,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3795,
        "startLineNumber" : 62,
        "startColumnNumber" : 16,
        "endLineNumber" : 122,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (Svar var : variables) {\n  int size=varSize(var);\n  TypeName varType=var.tname();\n  String varName=var.name();\n  constructor.addParameter(varType,varName);\n  MethodSpec.Builder getter=MethodSpec.methodBuilder(var.name().toString()).addModifiers(Modifier.STATIC,Modifier.PUBLIC).returns(varType).addParameter(structType,structParam);\n  MethodSpec.Builder setter=MethodSpec.methodBuilder(var.name().toString()).addModifiers(Modifier.STATIC,Modifier.PUBLIC).returns(structType).addParameter(structType,structParam).addParameter(varType,\"value\");\n  if (varType == TypeName.BOOLEAN) {\n    getter.addStatement(\"return ($L & (1L << $L)) != 0\",structParam,offset);\n  }\n else   if (varType == TypeName.FLOAT) {\n    getter.addStatement(\"return Float.intBitsToFloat((int)(($L >>> $L) & $L))\",structParam,offset,bitString(size,structTotalSize));\n  }\n else {\n    getter.addStatement(\"return ($T)(($L >>> $L) & $L)\",varType,structParam,offset,bitString(size,structTotalSize));\n  }\n  if (varType == TypeName.BOOLEAN) {\n    cons.append(\" | (\").append(varName).append(\" ? \").append(\"1L << \").append(offset).append(\"L : 0)\");\n    setter.beginControlFlow(\"if(value)\");\n    setter.addStatement(\"return ($T)(($L & ~(1L << $LL)))\",structType,structParam,offset);\n    setter.nextControlFlow(\"else\");\n    setter.addStatement(\"return ($T)(($L & ~(1L << $LL)) | (1L << $LL))\",structType,structParam,offset,offset);\n    setter.endControlFlow();\n  }\n else   if (varType == TypeName.FLOAT) {\n    cons.append(\" | (\").append(\"(\").append(structType).append(\")\").append(\"Float.floatToIntBits(\").append(varName).append(\") << \").append(offset).append(\"L)\");\n    setter.addStatement(\"return ($T)(($L & $L) | (($T)Float.floatToIntBits(value) << $LL))\",structType,structParam,bitString(offset,size,structTotalSize),structType,offset);\n  }\n else {\n    cons.append(\" | (((\").append(structType).append(\")\").append(varName).append(\" << \").append(offset).append(\"L)\").append(\" & \").append(bitString(offset,size,structTotalSize)).append(\")\");\n    setter.addStatement(\"return ($T)(($L & $L) | (($T)value << $LL))\",structType,structParam,bitString(offset,size,structTotalSize),structType,offset);\n  }\n  doc.append(\"<br>  \").append(varName).append(\" [\").append(offset).append(\"..\").append(size + offset).append(\"]\\n\");\n  classBuilder.addMethod(getter.build());\n  classBuilder.addMethod(setter.build());\n  offset+=size;\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 347,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5277,
        "startLineNumber" : 39,
        "startColumnNumber" : 15,
        "endLineNumber" : 131,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Seq<Svar> variables=elem.fields();\n  int structSize=variables.mapInt(StructProcess::varSize).sum();\n  int structTotalSize=(structSize <= 8 ? 8 : structSize <= 16 ? 16 : structSize <= 32 ? 32 : 64);\n  if (variables.size == 0) {\n    err(\"making a struct with no fields is utterly pointles.\",elem);\n    continue;\n  }\n  Class<?> structType=typeForSize(structSize);\n  MethodSpec.Builder constructor=MethodSpec.methodBuilder(\"get\").addModifiers(Modifier.STATIC,Modifier.PUBLIC).returns(structType);\n  StringBuilder cons=new StringBuilder();\n  StringBuilder doc=new StringBuilder();\n  doc.append(\"Bits used: \").append(structSize).append(\" / \").append(structTotalSize).append(\"\\n\");\n  int offset=0;\n  for (  Svar var : variables) {\n    int size=varSize(var);\n    TypeName varType=var.tname();\n    String varName=var.name();\n    constructor.addParameter(varType,varName);\n    MethodSpec.Builder getter=MethodSpec.methodBuilder(var.name().toString()).addModifiers(Modifier.STATIC,Modifier.PUBLIC).returns(varType).addParameter(structType,structParam);\n    MethodSpec.Builder setter=MethodSpec.methodBuilder(var.name().toString()).addModifiers(Modifier.STATIC,Modifier.PUBLIC).returns(structType).addParameter(structType,structParam).addParameter(varType,\"value\");\n    if (varType == TypeName.BOOLEAN) {\n      getter.addStatement(\"return ($L & (1L << $L)) != 0\",structParam,offset);\n    }\n else     if (varType == TypeName.FLOAT) {\n      getter.addStatement(\"return Float.intBitsToFloat((int)(($L >>> $L) & $L))\",structParam,offset,bitString(size,structTotalSize));\n    }\n else {\n      getter.addStatement(\"return ($T)(($L >>> $L) & $L)\",varType,structParam,offset,bitString(size,structTotalSize));\n    }\n    if (varType == TypeName.BOOLEAN) {\n      cons.append(\" | (\").append(varName).append(\" ? \").append(\"1L << \").append(offset).append(\"L : 0)\");\n      setter.beginControlFlow(\"if(value)\");\n      setter.addStatement(\"return ($T)(($L & ~(1L << $LL)))\",structType,structParam,offset);\n      setter.nextControlFlow(\"else\");\n      setter.addStatement(\"return ($T)(($L & ~(1L << $LL)) | (1L << $LL))\",structType,structParam,offset,offset);\n      setter.endControlFlow();\n    }\n else     if (varType == TypeName.FLOAT) {\n      cons.append(\" | (\").append(\"(\").append(structType).append(\")\").append(\"Float.floatToIntBits(\").append(varName).append(\") << \").append(offset).append(\"L)\");\n      setter.addStatement(\"return ($T)(($L & $L) | (($T)Float.floatToIntBits(value) << $LL))\",structType,structParam,bitString(offset,size,structTotalSize),structType,offset);\n    }\n else {\n      cons.append(\" | (((\").append(structType).append(\")\").append(varName).append(\" << \").append(offset).append(\"L)\").append(\" & \").append(bitString(offset,size,structTotalSize)).append(\")\");\n      setter.addStatement(\"return ($T)(($L & $L) | (($T)value << $LL))\",structType,structParam,bitString(offset,size,structTotalSize),structType,offset);\n    }\n    doc.append(\"<br>  \").append(varName).append(\" [\").append(offset).append(\"..\").append(size + offset).append(\"]\\n\");\n    classBuilder.addMethod(getter.build());\n    classBuilder.addMethod(setter.build());\n    offset+=size;\n  }\n  classBuilder.addJavadoc(doc.toString());\n  constructor.addStatement(\"return ($T)($L)\",structType,cons.toString().substring(3));\n  classBuilder.addMethod(constructor.build());\n  JavaFile.builder(packageName,classBuilder.build()).build().writeTo(BaseProcessor.filer);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 516,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5408,
        "startLineNumber" : 39,
        "startColumnNumber" : 12,
        "endLineNumber" : 134,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  Seq<Svar> variables=elem.fields();\n  int structSize=variables.mapInt(StructProcess::varSize).sum();\n  int structTotalSize=(structSize <= 8 ? 8 : structSize <= 16 ? 16 : structSize <= 32 ? 32 : 64);\n  if (variables.size == 0) {\n    err(\"making a struct with no fields is utterly pointles.\",elem);\n    continue;\n  }\n  Class<?> structType=typeForSize(structSize);\n  MethodSpec.Builder constructor=MethodSpec.methodBuilder(\"get\").addModifiers(Modifier.STATIC,Modifier.PUBLIC).returns(structType);\n  StringBuilder cons=new StringBuilder();\n  StringBuilder doc=new StringBuilder();\n  doc.append(\"Bits used: \").append(structSize).append(\" / \").append(structTotalSize).append(\"\\n\");\n  int offset=0;\n  for (  Svar var : variables) {\n    int size=varSize(var);\n    TypeName varType=var.tname();\n    String varName=var.name();\n    constructor.addParameter(varType,varName);\n    MethodSpec.Builder getter=MethodSpec.methodBuilder(var.name().toString()).addModifiers(Modifier.STATIC,Modifier.PUBLIC).returns(varType).addParameter(structType,structParam);\n    MethodSpec.Builder setter=MethodSpec.methodBuilder(var.name().toString()).addModifiers(Modifier.STATIC,Modifier.PUBLIC).returns(structType).addParameter(structType,structParam).addParameter(varType,\"value\");\n    if (varType == TypeName.BOOLEAN) {\n      getter.addStatement(\"return ($L & (1L << $L)) != 0\",structParam,offset);\n    }\n else     if (varType == TypeName.FLOAT) {\n      getter.addStatement(\"return Float.intBitsToFloat((int)(($L >>> $L) & $L))\",structParam,offset,bitString(size,structTotalSize));\n    }\n else {\n      getter.addStatement(\"return ($T)(($L >>> $L) & $L)\",varType,structParam,offset,bitString(size,structTotalSize));\n    }\n    if (varType == TypeName.BOOLEAN) {\n      cons.append(\" | (\").append(varName).append(\" ? \").append(\"1L << \").append(offset).append(\"L : 0)\");\n      setter.beginControlFlow(\"if(value)\");\n      setter.addStatement(\"return ($T)(($L & ~(1L << $LL)))\",structType,structParam,offset);\n      setter.nextControlFlow(\"else\");\n      setter.addStatement(\"return ($T)(($L & ~(1L << $LL)) | (1L << $LL))\",structType,structParam,offset,offset);\n      setter.endControlFlow();\n    }\n else     if (varType == TypeName.FLOAT) {\n      cons.append(\" | (\").append(\"(\").append(structType).append(\")\").append(\"Float.floatToIntBits(\").append(varName).append(\") << \").append(offset).append(\"L)\");\n      setter.addStatement(\"return ($T)(($L & $L) | (($T)Float.floatToIntBits(value) << $LL))\",structType,structParam,bitString(offset,size,structTotalSize),structType,offset);\n    }\n else {\n      cons.append(\" | (((\").append(structType).append(\")\").append(varName).append(\" << \").append(offset).append(\"L)\").append(\" & \").append(bitString(offset,size,structTotalSize)).append(\")\");\n      setter.addStatement(\"return ($T)(($L & $L) | (($T)value << $LL))\",structType,structParam,bitString(offset,size,structTotalSize),structType,offset);\n    }\n    doc.append(\"<br>  \").append(varName).append(\" [\").append(offset).append(\"..\").append(size + offset).append(\"]\\n\");\n    classBuilder.addMethod(getter.build());\n    classBuilder.addMethod(setter.build());\n    offset+=size;\n  }\n  classBuilder.addJavadoc(doc.toString());\n  constructor.addStatement(\"return ($T)($L)\",structType,cons.toString().substring(3));\n  classBuilder.addMethod(constructor.build());\n  JavaFile.builder(packageName,classBuilder.build()).build().writeTo(BaseProcessor.filer);\n}\n catch (IllegalArgumentException e) {\n  e.printStackTrace();\n  err(e.getMessage(),elem);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 534,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 5932,
        "startLineNumber" : 26,
        "startColumnNumber" : 34,
        "endLineNumber" : 135,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (!elem.name().endsWith(\"Struct\")) {\n    err(\"All classes annotated with @Struct must have their class names end in 'Struct'.\",elem);\n    continue;\n  }\n  String structName=elem.name().substring(0,elem.name().length() - \"Struct\".length());\n  String structParam=structName.toLowerCase();\n  TypeSpec.Builder classBuilder=TypeSpec.classBuilder(structName).addModifiers(Modifier.FINAL,Modifier.PUBLIC);\n  try {\n    Seq<Svar> variables=elem.fields();\n    int structSize=variables.mapInt(StructProcess::varSize).sum();\n    int structTotalSize=(structSize <= 8 ? 8 : structSize <= 16 ? 16 : structSize <= 32 ? 32 : 64);\n    if (variables.size == 0) {\n      err(\"making a struct with no fields is utterly pointles.\",elem);\n      continue;\n    }\n    Class<?> structType=typeForSize(structSize);\n    MethodSpec.Builder constructor=MethodSpec.methodBuilder(\"get\").addModifiers(Modifier.STATIC,Modifier.PUBLIC).returns(structType);\n    StringBuilder cons=new StringBuilder();\n    StringBuilder doc=new StringBuilder();\n    doc.append(\"Bits used: \").append(structSize).append(\" / \").append(structTotalSize).append(\"\\n\");\n    int offset=0;\n    for (    Svar var : variables) {\n      int size=varSize(var);\n      TypeName varType=var.tname();\n      String varName=var.name();\n      constructor.addParameter(varType,varName);\n      MethodSpec.Builder getter=MethodSpec.methodBuilder(var.name().toString()).addModifiers(Modifier.STATIC,Modifier.PUBLIC).returns(varType).addParameter(structType,structParam);\n      MethodSpec.Builder setter=MethodSpec.methodBuilder(var.name().toString()).addModifiers(Modifier.STATIC,Modifier.PUBLIC).returns(structType).addParameter(structType,structParam).addParameter(varType,\"value\");\n      if (varType == TypeName.BOOLEAN) {\n        getter.addStatement(\"return ($L & (1L << $L)) != 0\",structParam,offset);\n      }\n else       if (varType == TypeName.FLOAT) {\n        getter.addStatement(\"return Float.intBitsToFloat((int)(($L >>> $L) & $L))\",structParam,offset,bitString(size,structTotalSize));\n      }\n else {\n        getter.addStatement(\"return ($T)(($L >>> $L) & $L)\",varType,structParam,offset,bitString(size,structTotalSize));\n      }\n      if (varType == TypeName.BOOLEAN) {\n        cons.append(\" | (\").append(varName).append(\" ? \").append(\"1L << \").append(offset).append(\"L : 0)\");\n        setter.beginControlFlow(\"if(value)\");\n        setter.addStatement(\"return ($T)(($L & ~(1L << $LL)))\",structType,structParam,offset);\n        setter.nextControlFlow(\"else\");\n        setter.addStatement(\"return ($T)(($L & ~(1L << $LL)) | (1L << $LL))\",structType,structParam,offset,offset);\n        setter.endControlFlow();\n      }\n else       if (varType == TypeName.FLOAT) {\n        cons.append(\" | (\").append(\"(\").append(structType).append(\")\").append(\"Float.floatToIntBits(\").append(varName).append(\") << \").append(offset).append(\"L)\");\n        setter.addStatement(\"return ($T)(($L & $L) | (($T)Float.floatToIntBits(value) << $LL))\",structType,structParam,bitString(offset,size,structTotalSize),structType,offset);\n      }\n else {\n        cons.append(\" | (((\").append(structType).append(\")\").append(varName).append(\" << \").append(offset).append(\"L)\").append(\" & \").append(bitString(offset,size,structTotalSize)).append(\")\");\n        setter.addStatement(\"return ($T)(($L & $L) | (($T)value << $LL))\",structType,structParam,bitString(offset,size,structTotalSize),structType,offset);\n      }\n      doc.append(\"<br>  \").append(varName).append(\" [\").append(offset).append(\"..\").append(size + offset).append(\"]\\n\");\n      classBuilder.addMethod(getter.build());\n      classBuilder.addMethod(setter.build());\n      offset+=size;\n    }\n    classBuilder.addJavadoc(doc.toString());\n    constructor.addStatement(\"return ($T)($L)\",structType,cons.toString().substring(3));\n    classBuilder.addMethod(constructor.build());\n    JavaFile.builder(packageName,classBuilder.build()).build().writeTo(BaseProcessor.filer);\n  }\n catch (  IllegalArgumentException e) {\n    e.printStackTrace();\n    err(e.getMessage(),elem);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 597,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5958,
        "startLineNumber" : 26,
        "startColumnNumber" : 8,
        "endLineNumber" : 135,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Stype elem : elements) {\n  if (!elem.name().endsWith(\"Struct\")) {\n    err(\"All classes annotated with @Struct must have their class names end in 'Struct'.\",elem);\n    continue;\n  }\n  String structName=elem.name().substring(0,elem.name().length() - \"Struct\".length());\n  String structParam=structName.toLowerCase();\n  TypeSpec.Builder classBuilder=TypeSpec.classBuilder(structName).addModifiers(Modifier.FINAL,Modifier.PUBLIC);\n  try {\n    Seq<Svar> variables=elem.fields();\n    int structSize=variables.mapInt(StructProcess::varSize).sum();\n    int structTotalSize=(structSize <= 8 ? 8 : structSize <= 16 ? 16 : structSize <= 32 ? 32 : 64);\n    if (variables.size == 0) {\n      err(\"making a struct with no fields is utterly pointles.\",elem);\n      continue;\n    }\n    Class<?> structType=typeForSize(structSize);\n    MethodSpec.Builder constructor=MethodSpec.methodBuilder(\"get\").addModifiers(Modifier.STATIC,Modifier.PUBLIC).returns(structType);\n    StringBuilder cons=new StringBuilder();\n    StringBuilder doc=new StringBuilder();\n    doc.append(\"Bits used: \").append(structSize).append(\" / \").append(structTotalSize).append(\"\\n\");\n    int offset=0;\n    for (    Svar var : variables) {\n      int size=varSize(var);\n      TypeName varType=var.tname();\n      String varName=var.name();\n      constructor.addParameter(varType,varName);\n      MethodSpec.Builder getter=MethodSpec.methodBuilder(var.name().toString()).addModifiers(Modifier.STATIC,Modifier.PUBLIC).returns(varType).addParameter(structType,structParam);\n      MethodSpec.Builder setter=MethodSpec.methodBuilder(var.name().toString()).addModifiers(Modifier.STATIC,Modifier.PUBLIC).returns(structType).addParameter(structType,structParam).addParameter(varType,\"value\");\n      if (varType == TypeName.BOOLEAN) {\n        getter.addStatement(\"return ($L & (1L << $L)) != 0\",structParam,offset);\n      }\n else       if (varType == TypeName.FLOAT) {\n        getter.addStatement(\"return Float.intBitsToFloat((int)(($L >>> $L) & $L))\",structParam,offset,bitString(size,structTotalSize));\n      }\n else {\n        getter.addStatement(\"return ($T)(($L >>> $L) & $L)\",varType,structParam,offset,bitString(size,structTotalSize));\n      }\n      if (varType == TypeName.BOOLEAN) {\n        cons.append(\" | (\").append(varName).append(\" ? \").append(\"1L << \").append(offset).append(\"L : 0)\");\n        setter.beginControlFlow(\"if(value)\");\n        setter.addStatement(\"return ($T)(($L & ~(1L << $LL)))\",structType,structParam,offset);\n        setter.nextControlFlow(\"else\");\n        setter.addStatement(\"return ($T)(($L & ~(1L << $LL)) | (1L << $LL))\",structType,structParam,offset,offset);\n        setter.endControlFlow();\n      }\n else       if (varType == TypeName.FLOAT) {\n        cons.append(\" | (\").append(\"(\").append(structType).append(\")\").append(\"Float.floatToIntBits(\").append(varName).append(\") << \").append(offset).append(\"L)\");\n        setter.addStatement(\"return ($T)(($L & $L) | (($T)Float.floatToIntBits(value) << $LL))\",structType,structParam,bitString(offset,size,structTotalSize),structType,offset);\n      }\n else {\n        cons.append(\" | (((\").append(structType).append(\")\").append(varName).append(\" << \").append(offset).append(\"L)\").append(\" & \").append(bitString(offset,size,structTotalSize)).append(\")\");\n        setter.addStatement(\"return ($T)(($L & $L) | (($T)value << $LL))\",structType,structParam,bitString(offset,size,structTotalSize),structType,offset);\n      }\n      doc.append(\"<br>  \").append(varName).append(\" [\").append(offset).append(\"..\").append(size + offset).append(\"]\\n\");\n      classBuilder.addMethod(getter.build());\n      classBuilder.addMethod(setter.build());\n      offset+=size;\n    }\n    classBuilder.addJavadoc(doc.toString());\n    constructor.addStatement(\"return ($T)($L)\",structType,cons.toString().substring(3));\n    classBuilder.addMethod(constructor.build());\n    JavaFile.builder(packageName,classBuilder.build()).build().writeTo(BaseProcessor.filer);\n  }\n catch (  IllegalArgumentException e) {\n    e.printStackTrace();\n    err(e.getMessage(),elem);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 603,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6027,
        "startLineNumber" : 23,
        "startColumnNumber" : 62,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Seq<Stype> elements=types(Struct.class);\n  for (  Stype elem : elements) {\n    if (!elem.name().endsWith(\"Struct\")) {\n      err(\"All classes annotated with @Struct must have their class names end in 'Struct'.\",elem);\n      continue;\n    }\n    String structName=elem.name().substring(0,elem.name().length() - \"Struct\".length());\n    String structParam=structName.toLowerCase();\n    TypeSpec.Builder classBuilder=TypeSpec.classBuilder(structName).addModifiers(Modifier.FINAL,Modifier.PUBLIC);\n    try {\n      Seq<Svar> variables=elem.fields();\n      int structSize=variables.mapInt(StructProcess::varSize).sum();\n      int structTotalSize=(structSize <= 8 ? 8 : structSize <= 16 ? 16 : structSize <= 32 ? 32 : 64);\n      if (variables.size == 0) {\n        err(\"making a struct with no fields is utterly pointles.\",elem);\n        continue;\n      }\n      Class<?> structType=typeForSize(structSize);\n      MethodSpec.Builder constructor=MethodSpec.methodBuilder(\"get\").addModifiers(Modifier.STATIC,Modifier.PUBLIC).returns(structType);\n      StringBuilder cons=new StringBuilder();\n      StringBuilder doc=new StringBuilder();\n      doc.append(\"Bits used: \").append(structSize).append(\" / \").append(structTotalSize).append(\"\\n\");\n      int offset=0;\n      for (      Svar var : variables) {\n        int size=varSize(var);\n        TypeName varType=var.tname();\n        String varName=var.name();\n        constructor.addParameter(varType,varName);\n        MethodSpec.Builder getter=MethodSpec.methodBuilder(var.name().toString()).addModifiers(Modifier.STATIC,Modifier.PUBLIC).returns(varType).addParameter(structType,structParam);\n        MethodSpec.Builder setter=MethodSpec.methodBuilder(var.name().toString()).addModifiers(Modifier.STATIC,Modifier.PUBLIC).returns(structType).addParameter(structType,structParam).addParameter(varType,\"value\");\n        if (varType == TypeName.BOOLEAN) {\n          getter.addStatement(\"return ($L & (1L << $L)) != 0\",structParam,offset);\n        }\n else         if (varType == TypeName.FLOAT) {\n          getter.addStatement(\"return Float.intBitsToFloat((int)(($L >>> $L) & $L))\",structParam,offset,bitString(size,structTotalSize));\n        }\n else {\n          getter.addStatement(\"return ($T)(($L >>> $L) & $L)\",varType,structParam,offset,bitString(size,structTotalSize));\n        }\n        if (varType == TypeName.BOOLEAN) {\n          cons.append(\" | (\").append(varName).append(\" ? \").append(\"1L << \").append(offset).append(\"L : 0)\");\n          setter.beginControlFlow(\"if(value)\");\n          setter.addStatement(\"return ($T)(($L & ~(1L << $LL)))\",structType,structParam,offset);\n          setter.nextControlFlow(\"else\");\n          setter.addStatement(\"return ($T)(($L & ~(1L << $LL)) | (1L << $LL))\",structType,structParam,offset,offset);\n          setter.endControlFlow();\n        }\n else         if (varType == TypeName.FLOAT) {\n          cons.append(\" | (\").append(\"(\").append(structType).append(\")\").append(\"Float.floatToIntBits(\").append(varName).append(\") << \").append(offset).append(\"L)\");\n          setter.addStatement(\"return ($T)(($L & $L) | (($T)Float.floatToIntBits(value) << $LL))\",structType,structParam,bitString(offset,size,structTotalSize),structType,offset);\n        }\n else {\n          cons.append(\" | (((\").append(structType).append(\")\").append(varName).append(\" << \").append(offset).append(\"L)\").append(\" & \").append(bitString(offset,size,structTotalSize)).append(\")\");\n          setter.addStatement(\"return ($T)(($L & $L) | (($T)value << $LL))\",structType,structParam,bitString(offset,size,structTotalSize),structType,offset);\n        }\n        doc.append(\"<br>  \").append(varName).append(\" [\").append(offset).append(\"..\").append(size + offset).append(\"]\\n\");\n        classBuilder.addMethod(getter.build());\n        classBuilder.addMethod(setter.build());\n        offset+=size;\n      }\n      classBuilder.addJavadoc(doc.toString());\n      constructor.addStatement(\"return ($T)($L)\",structType,cons.toString().substring(3));\n      classBuilder.addMethod(constructor.build());\n      JavaFile.builder(packageName,classBuilder.build()).build().writeTo(BaseProcessor.filer);\n    }\n catch (    IllegalArgumentException e) {\n      e.printStackTrace();\n      err(e.getMessage(),elem);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 617,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6099,
        "startLineNumber" : 22,
        "startColumnNumber" : 4,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void process(RoundEnvironment env) throws Exception {\n  Seq<Stype> elements=types(Struct.class);\n  for (  Stype elem : elements) {\n    if (!elem.name().endsWith(\"Struct\")) {\n      err(\"All classes annotated with @Struct must have their class names end in 'Struct'.\",elem);\n      continue;\n    }\n    String structName=elem.name().substring(0,elem.name().length() - \"Struct\".length());\n    String structParam=structName.toLowerCase();\n    TypeSpec.Builder classBuilder=TypeSpec.classBuilder(structName).addModifiers(Modifier.FINAL,Modifier.PUBLIC);\n    try {\n      Seq<Svar> variables=elem.fields();\n      int structSize=variables.mapInt(StructProcess::varSize).sum();\n      int structTotalSize=(structSize <= 8 ? 8 : structSize <= 16 ? 16 : structSize <= 32 ? 32 : 64);\n      if (variables.size == 0) {\n        err(\"making a struct with no fields is utterly pointles.\",elem);\n        continue;\n      }\n      Class<?> structType=typeForSize(structSize);\n      MethodSpec.Builder constructor=MethodSpec.methodBuilder(\"get\").addModifiers(Modifier.STATIC,Modifier.PUBLIC).returns(structType);\n      StringBuilder cons=new StringBuilder();\n      StringBuilder doc=new StringBuilder();\n      doc.append(\"Bits used: \").append(structSize).append(\" / \").append(structTotalSize).append(\"\\n\");\n      int offset=0;\n      for (      Svar var : variables) {\n        int size=varSize(var);\n        TypeName varType=var.tname();\n        String varName=var.name();\n        constructor.addParameter(varType,varName);\n        MethodSpec.Builder getter=MethodSpec.methodBuilder(var.name().toString()).addModifiers(Modifier.STATIC,Modifier.PUBLIC).returns(varType).addParameter(structType,structParam);\n        MethodSpec.Builder setter=MethodSpec.methodBuilder(var.name().toString()).addModifiers(Modifier.STATIC,Modifier.PUBLIC).returns(structType).addParameter(structType,structParam).addParameter(varType,\"value\");\n        if (varType == TypeName.BOOLEAN) {\n          getter.addStatement(\"return ($L & (1L << $L)) != 0\",structParam,offset);\n        }\n else         if (varType == TypeName.FLOAT) {\n          getter.addStatement(\"return Float.intBitsToFloat((int)(($L >>> $L) & $L))\",structParam,offset,bitString(size,structTotalSize));\n        }\n else {\n          getter.addStatement(\"return ($T)(($L >>> $L) & $L)\",varType,structParam,offset,bitString(size,structTotalSize));\n        }\n        if (varType == TypeName.BOOLEAN) {\n          cons.append(\" | (\").append(varName).append(\" ? \").append(\"1L << \").append(offset).append(\"L : 0)\");\n          setter.beginControlFlow(\"if(value)\");\n          setter.addStatement(\"return ($T)(($L & ~(1L << $LL)))\",structType,structParam,offset);\n          setter.nextControlFlow(\"else\");\n          setter.addStatement(\"return ($T)(($L & ~(1L << $LL)) | (1L << $LL))\",structType,structParam,offset,offset);\n          setter.endControlFlow();\n        }\n else         if (varType == TypeName.FLOAT) {\n          cons.append(\" | (\").append(\"(\").append(structType).append(\")\").append(\"Float.floatToIntBits(\").append(varName).append(\") << \").append(offset).append(\"L)\");\n          setter.addStatement(\"return ($T)(($L & $L) | (($T)Float.floatToIntBits(value) << $LL))\",structType,structParam,bitString(offset,size,structTotalSize),structType,offset);\n        }\n else {\n          cons.append(\" | (((\").append(structType).append(\")\").append(varName).append(\" << \").append(offset).append(\"L)\").append(\" & \").append(bitString(offset,size,structTotalSize)).append(\")\");\n          setter.addStatement(\"return ($T)(($L & $L) | (($T)value << $LL))\",structType,structParam,bitString(offset,size,structTotalSize),structType,offset);\n        }\n        doc.append(\"<br>  \").append(varName).append(\" [\").append(offset).append(\"..\").append(size + offset).append(\"]\\n\");\n        classBuilder.addMethod(getter.build());\n        classBuilder.addMethod(setter.build());\n        offset+=size;\n      }\n      classBuilder.addJavadoc(doc.toString());\n      constructor.addStatement(\"return ($T)($L)\",structType,cons.toString().substring(3));\n      classBuilder.addMethod(constructor.build());\n      JavaFile.builder(packageName,classBuilder.build()).build().writeTo(BaseProcessor.filer);\n    }\n catch (    IllegalArgumentException e) {\n      e.printStackTrace();\n      err(e.getMessage(),elem);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 629,
      "astHeight" : 23
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 155,
        "startLineNumber" : 104,
        "startColumnNumber" : 24,
        "endLineNumber" : 104,
        "endColumnNumber" : 179
      },
      "nodeContext" : "cons.append(\" | (\").append(\"(\").append(structType).append(\")\").append(\"Float.floatToIntBits(\").append(varName).append(\") << \").append(offset).append(\"L)\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 29,
      "astHeight" : 11
    },
    "tokenLength" : 14,
    "type" : "java.lang.StringBuilder"
  } ],
  "positionList" : [ {
    "charLength" : 126,
    "startLineNumber" : 104,
    "startColumnNumber" : 24,
    "endLineNumber" : 104,
    "endColumnNumber" : 150
  } ],
  "layoutRelationDataList" : [ ]
}