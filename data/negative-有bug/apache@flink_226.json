{
  "id" : 226,
  "expression" : "i",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-libraries/flink-gelly/src/test/java/org/apache/flink/graph/types/valuearray/LongValueArrayTest.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "i",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 40,
      "startColumnNumber" : 24,
      "endLineNumber" : 40,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 40,
        "startColumnNumber" : 24,
        "endLineNumber" : 40,
        "endColumnNumber" : 33
      },
      "nodeContext" : "i < count",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 221,
        "startLineNumber" : 40,
        "startColumnNumber" : 8,
        "endLineNumber" : 47,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < count; i++) {\n  assertFalse(lva.isFull());\n  assertEquals(i,lva.size());\n  assertTrue(lva.add(new LongValue(i)));\n  assertEquals(i + 1,lva.size());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 44,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1149,
        "startLineNumber" : 33,
        "startColumnNumber" : 35,
        "endLineNumber" : 74,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int count=LongValueArray.DEFAULT_CAPACITY_IN_BYTES / LongValueArray.ELEMENT_LENGTH_IN_BYTES;\n  ValueArray<LongValue> lva=new LongValueArray(LongValueArray.DEFAULT_CAPACITY_IN_BYTES);\n  for (int i=0; i < count; i++) {\n    assertFalse(lva.isFull());\n    assertEquals(i,lva.size());\n    assertTrue(lva.add(new LongValue(i)));\n    assertEquals(i + 1,lva.size());\n  }\n  assertTrue(lva.isFull());\n  assertEquals(count,lva.size());\n  int idx=0;\n  for (  LongValue lv : lva) {\n    assertEquals(idx++,lv.getValue());\n  }\n  assertFalse(lva.add(new LongValue(count)));\n  assertFalse(lva.addAll(lva));\n  assertEquals(lva,lva.copy());\n  LongValueArray lvaTo=new LongValueArray();\n  lva.copyTo(lvaTo);\n  assertEquals(lva,lvaTo);\n  lva.clear();\n  assertEquals(0,lva.size());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 156,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1190,
        "startLineNumber" : 32,
        "startColumnNumber" : 4,
        "endLineNumber" : 74,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testBoundedArray(){\n  int count=LongValueArray.DEFAULT_CAPACITY_IN_BYTES / LongValueArray.ELEMENT_LENGTH_IN_BYTES;\n  ValueArray<LongValue> lva=new LongValueArray(LongValueArray.DEFAULT_CAPACITY_IN_BYTES);\n  for (int i=0; i < count; i++) {\n    assertFalse(lva.isFull());\n    assertEquals(i,lva.size());\n    assertTrue(lva.add(new LongValue(i)));\n    assertEquals(i + 1,lva.size());\n  }\n  assertTrue(lva.isFull());\n  assertEquals(count,lva.size());\n  int idx=0;\n  for (  LongValue lv : lva) {\n    assertEquals(idx++,lv.getValue());\n  }\n  assertFalse(lva.add(new LongValue(count)));\n  assertFalse(lva.addAll(lva));\n  assertEquals(lva,lva.copy());\n  LongValueArray lvaTo=new LongValueArray();\n  lva.copyTo(lvaTo);\n  assertEquals(lva,lvaTo);\n  lva.clear();\n  assertEquals(0,lva.size());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 162,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 40,
        "startColumnNumber" : 24,
        "endLineNumber" : 40,
        "endColumnNumber" : 33
      },
      "nodeContext" : "i < count",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "i",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 42,
      "startColumnNumber" : 25,
      "endLineNumber" : 42,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 42,
        "startColumnNumber" : 12,
        "endLineNumber" : 42,
        "endColumnNumber" : 39
      },
      "nodeContext" : "assertEquals(i,lva.size())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 42,
        "startColumnNumber" : 12,
        "endLineNumber" : 42,
        "endColumnNumber" : 40
      },
      "nodeContext" : "assertEquals(i,lva.size());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 189,
        "startLineNumber" : 40,
        "startColumnNumber" : 40,
        "endLineNumber" : 47,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  assertFalse(lva.isFull());\n  assertEquals(i,lva.size());\n  assertTrue(lva.add(new LongValue(i)));\n  assertEquals(i + 1,lva.size());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 33,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 221,
        "startLineNumber" : 40,
        "startColumnNumber" : 8,
        "endLineNumber" : 47,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < count; i++) {\n  assertFalse(lva.isFull());\n  assertEquals(i,lva.size());\n  assertTrue(lva.add(new LongValue(i)));\n  assertEquals(i + 1,lva.size());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 44,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1149,
        "startLineNumber" : 33,
        "startColumnNumber" : 35,
        "endLineNumber" : 74,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int count=LongValueArray.DEFAULT_CAPACITY_IN_BYTES / LongValueArray.ELEMENT_LENGTH_IN_BYTES;\n  ValueArray<LongValue> lva=new LongValueArray(LongValueArray.DEFAULT_CAPACITY_IN_BYTES);\n  for (int i=0; i < count; i++) {\n    assertFalse(lva.isFull());\n    assertEquals(i,lva.size());\n    assertTrue(lva.add(new LongValue(i)));\n    assertEquals(i + 1,lva.size());\n  }\n  assertTrue(lva.isFull());\n  assertEquals(count,lva.size());\n  int idx=0;\n  for (  LongValue lv : lva) {\n    assertEquals(idx++,lv.getValue());\n  }\n  assertFalse(lva.add(new LongValue(count)));\n  assertFalse(lva.addAll(lva));\n  assertEquals(lva,lva.copy());\n  LongValueArray lvaTo=new LongValueArray();\n  lva.copyTo(lvaTo);\n  assertEquals(lva,lvaTo);\n  lva.clear();\n  assertEquals(0,lva.size());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 156,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1190,
        "startLineNumber" : 32,
        "startColumnNumber" : 4,
        "endLineNumber" : 74,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testBoundedArray(){\n  int count=LongValueArray.DEFAULT_CAPACITY_IN_BYTES / LongValueArray.ELEMENT_LENGTH_IN_BYTES;\n  ValueArray<LongValue> lva=new LongValueArray(LongValueArray.DEFAULT_CAPACITY_IN_BYTES);\n  for (int i=0; i < count; i++) {\n    assertFalse(lva.isFull());\n    assertEquals(i,lva.size());\n    assertTrue(lva.add(new LongValue(i)));\n    assertEquals(i + 1,lva.size());\n  }\n  assertTrue(lva.isFull());\n  assertEquals(count,lva.size());\n  int idx=0;\n  for (  LongValue lv : lva) {\n    assertEquals(idx++,lv.getValue());\n  }\n  assertFalse(lva.add(new LongValue(count)));\n  assertFalse(lva.addAll(lva));\n  assertEquals(lva,lva.copy());\n  LongValueArray lvaTo=new LongValueArray();\n  lva.copyTo(lvaTo);\n  assertEquals(lva,lvaTo);\n  lva.clear();\n  assertEquals(0,lva.size());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 162,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 42,
        "startColumnNumber" : 12,
        "endLineNumber" : 42,
        "endColumnNumber" : 40
      },
      "nodeContext" : "assertEquals(i,lva.size());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "i",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 44,
      "startColumnNumber" : 45,
      "endLineNumber" : 44,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 44,
        "startColumnNumber" : 31,
        "endLineNumber" : 44,
        "endColumnNumber" : 47
      },
      "nodeContext" : "new LongValue(i)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 44,
        "startColumnNumber" : 23,
        "endLineNumber" : 44,
        "endColumnNumber" : 48
      },
      "nodeContext" : "lva.add(new LongValue(i))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 44,
        "startColumnNumber" : 12,
        "endLineNumber" : 44,
        "endColumnNumber" : 49
      },
      "nodeContext" : "assertTrue(lva.add(new LongValue(i)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 44,
        "startColumnNumber" : 12,
        "endLineNumber" : 44,
        "endColumnNumber" : 50
      },
      "nodeContext" : "assertTrue(lva.add(new LongValue(i)));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 189,
        "startLineNumber" : 40,
        "startColumnNumber" : 40,
        "endLineNumber" : 47,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  assertFalse(lva.isFull());\n  assertEquals(i,lva.size());\n  assertTrue(lva.add(new LongValue(i)));\n  assertEquals(i + 1,lva.size());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 33,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 221,
        "startLineNumber" : 40,
        "startColumnNumber" : 8,
        "endLineNumber" : 47,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < count; i++) {\n  assertFalse(lva.isFull());\n  assertEquals(i,lva.size());\n  assertTrue(lva.add(new LongValue(i)));\n  assertEquals(i + 1,lva.size());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 44,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1149,
        "startLineNumber" : 33,
        "startColumnNumber" : 35,
        "endLineNumber" : 74,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int count=LongValueArray.DEFAULT_CAPACITY_IN_BYTES / LongValueArray.ELEMENT_LENGTH_IN_BYTES;\n  ValueArray<LongValue> lva=new LongValueArray(LongValueArray.DEFAULT_CAPACITY_IN_BYTES);\n  for (int i=0; i < count; i++) {\n    assertFalse(lva.isFull());\n    assertEquals(i,lva.size());\n    assertTrue(lva.add(new LongValue(i)));\n    assertEquals(i + 1,lva.size());\n  }\n  assertTrue(lva.isFull());\n  assertEquals(count,lva.size());\n  int idx=0;\n  for (  LongValue lv : lva) {\n    assertEquals(idx++,lv.getValue());\n  }\n  assertFalse(lva.add(new LongValue(count)));\n  assertFalse(lva.addAll(lva));\n  assertEquals(lva,lva.copy());\n  LongValueArray lvaTo=new LongValueArray();\n  lva.copyTo(lvaTo);\n  assertEquals(lva,lvaTo);\n  lva.clear();\n  assertEquals(0,lva.size());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 156,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1190,
        "startLineNumber" : 32,
        "startColumnNumber" : 4,
        "endLineNumber" : 74,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testBoundedArray(){\n  int count=LongValueArray.DEFAULT_CAPACITY_IN_BYTES / LongValueArray.ELEMENT_LENGTH_IN_BYTES;\n  ValueArray<LongValue> lva=new LongValueArray(LongValueArray.DEFAULT_CAPACITY_IN_BYTES);\n  for (int i=0; i < count; i++) {\n    assertFalse(lva.isFull());\n    assertEquals(i,lva.size());\n    assertTrue(lva.add(new LongValue(i)));\n    assertEquals(i + 1,lva.size());\n  }\n  assertTrue(lva.isFull());\n  assertEquals(count,lva.size());\n  int idx=0;\n  for (  LongValue lv : lva) {\n    assertEquals(idx++,lv.getValue());\n  }\n  assertFalse(lva.add(new LongValue(count)));\n  assertFalse(lva.addAll(lva));\n  assertEquals(lva,lva.copy());\n  LongValueArray lvaTo=new LongValueArray();\n  lva.copyTo(lvaTo);\n  assertEquals(lva,lvaTo);\n  lva.clear();\n  assertEquals(0,lva.size());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 162,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 44,
        "startColumnNumber" : 12,
        "endLineNumber" : 44,
        "endColumnNumber" : 50
      },
      "nodeContext" : "assertTrue(lva.add(new LongValue(i)));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "i",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 46,
      "startColumnNumber" : 25,
      "endLineNumber" : 46,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 5,
        "startLineNumber" : 46,
        "startColumnNumber" : 25,
        "endLineNumber" : 46,
        "endColumnNumber" : 30
      },
      "nodeContext" : "i + 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 46,
        "startColumnNumber" : 12,
        "endLineNumber" : 46,
        "endColumnNumber" : 43
      },
      "nodeContext" : "assertEquals(i + 1,lva.size())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 46,
        "startColumnNumber" : 12,
        "endLineNumber" : 46,
        "endColumnNumber" : 44
      },
      "nodeContext" : "assertEquals(i + 1,lva.size());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 189,
        "startLineNumber" : 40,
        "startColumnNumber" : 40,
        "endLineNumber" : 47,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  assertFalse(lva.isFull());\n  assertEquals(i,lva.size());\n  assertTrue(lva.add(new LongValue(i)));\n  assertEquals(i + 1,lva.size());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 33,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 221,
        "startLineNumber" : 40,
        "startColumnNumber" : 8,
        "endLineNumber" : 47,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < count; i++) {\n  assertFalse(lva.isFull());\n  assertEquals(i,lva.size());\n  assertTrue(lva.add(new LongValue(i)));\n  assertEquals(i + 1,lva.size());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 44,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1149,
        "startLineNumber" : 33,
        "startColumnNumber" : 35,
        "endLineNumber" : 74,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int count=LongValueArray.DEFAULT_CAPACITY_IN_BYTES / LongValueArray.ELEMENT_LENGTH_IN_BYTES;\n  ValueArray<LongValue> lva=new LongValueArray(LongValueArray.DEFAULT_CAPACITY_IN_BYTES);\n  for (int i=0; i < count; i++) {\n    assertFalse(lva.isFull());\n    assertEquals(i,lva.size());\n    assertTrue(lva.add(new LongValue(i)));\n    assertEquals(i + 1,lva.size());\n  }\n  assertTrue(lva.isFull());\n  assertEquals(count,lva.size());\n  int idx=0;\n  for (  LongValue lv : lva) {\n    assertEquals(idx++,lv.getValue());\n  }\n  assertFalse(lva.add(new LongValue(count)));\n  assertFalse(lva.addAll(lva));\n  assertEquals(lva,lva.copy());\n  LongValueArray lvaTo=new LongValueArray();\n  lva.copyTo(lvaTo);\n  assertEquals(lva,lvaTo);\n  lva.clear();\n  assertEquals(0,lva.size());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 156,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1190,
        "startLineNumber" : 32,
        "startColumnNumber" : 4,
        "endLineNumber" : 74,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testBoundedArray(){\n  int count=LongValueArray.DEFAULT_CAPACITY_IN_BYTES / LongValueArray.ELEMENT_LENGTH_IN_BYTES;\n  ValueArray<LongValue> lva=new LongValueArray(LongValueArray.DEFAULT_CAPACITY_IN_BYTES);\n  for (int i=0; i < count; i++) {\n    assertFalse(lva.isFull());\n    assertEquals(i,lva.size());\n    assertTrue(lva.add(new LongValue(i)));\n    assertEquals(i + 1,lva.size());\n  }\n  assertTrue(lva.isFull());\n  assertEquals(count,lva.size());\n  int idx=0;\n  for (  LongValue lv : lva) {\n    assertEquals(idx++,lv.getValue());\n  }\n  assertFalse(lva.add(new LongValue(count)));\n  assertFalse(lva.addAll(lva));\n  assertEquals(lva,lva.copy());\n  LongValueArray lvaTo=new LongValueArray();\n  lva.copyTo(lvaTo);\n  assertEquals(lva,lvaTo);\n  lva.clear();\n  assertEquals(0,lva.size());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 162,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 46,
        "startColumnNumber" : 12,
        "endLineNumber" : 46,
        "endColumnNumber" : 44
      },
      "nodeContext" : "assertEquals(i + 1,lva.size());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 40,
    "startColumnNumber" : 24,
    "endLineNumber" : 40,
    "endColumnNumber" : 25
  }, {
    "charLength" : 1,
    "startLineNumber" : 42,
    "startColumnNumber" : 25,
    "endLineNumber" : 42,
    "endColumnNumber" : 26
  }, {
    "charLength" : 1,
    "startLineNumber" : 44,
    "startColumnNumber" : 45,
    "endLineNumber" : 44,
    "endColumnNumber" : 46
  }, {
    "charLength" : 1,
    "startLineNumber" : 46,
    "startColumnNumber" : 25,
    "endLineNumber" : 46,
    "endColumnNumber" : 26
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  } ]
}