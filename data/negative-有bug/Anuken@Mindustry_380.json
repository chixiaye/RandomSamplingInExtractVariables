{
  "id" : 380,
  "expression" : "annotation.unreliable()",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "a7188c48845dd423fc9b58bc6bcf6797f6d25b46",
  "filePath" : "/annotations/src/main/java/mindustry/annotations/remote/RemoteProcess.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "annotation.unreliable()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 93,
      "startColumnNumber" : 37,
      "endLineNumber" : 93,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 246,
        "startLineNumber" : 92,
        "startColumnNumber" : 37,
        "endLineNumber" : 93,
        "endColumnNumber" : 133
      },
      "nodeContext" : "new MethodEntry(entry.name,BaseProcessor.getMethodName(element.e),annotation.targets(),annotation.variants(),annotation.called(),annotation.unreliable(),annotation.forward(),lastMethodID++,element.e,annotation.priority())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 35,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 255,
        "startLineNumber" : 92,
        "startColumnNumber" : 28,
        "endLineNumber" : 93,
        "endColumnNumber" : 133
      },
      "nodeContext" : "method=new MethodEntry(entry.name,BaseProcessor.getMethodName(element.e),annotation.targets(),annotation.variants(),annotation.called(),annotation.unreliable(),annotation.forward(),lastMethodID++,element.e,annotation.priority())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 37,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 268,
        "startLineNumber" : 92,
        "startColumnNumber" : 16,
        "endLineNumber" : 93,
        "endColumnNumber" : 134
      },
      "nodeContext" : "MethodEntry method=new MethodEntry(entry.name,BaseProcessor.getMethodName(element.e),annotation.targets(),annotation.variants(),annotation.called(),annotation.unreliable(),annotation.forward(),lastMethodID++,element.e,annotation.priority());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 40,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1280,
        "startLineNumber" : 69,
        "startColumnNumber" : 50,
        "endLineNumber" : 97,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Remote annotation=element.annotation(Remote.class);\n  if (!element.is(Modifier.STATIC) || !element.is(Modifier.PUBLIC)) {\n    err(\"All @Remote methods must be public and static: \",element);\n  }\n  if (annotation.targets() == Loc.none) {\n    err(\"A @Remote method's targets() cannot be equal to 'none':\",element);\n  }\n  if (!classMap.containsKey(callLocation)) {\n    ClassEntry clas=new ClassEntry(callLocation);\n    classMap.put(callLocation,clas);\n    classes.add(clas);\n  }\n  ClassEntry entry=classMap.get(callLocation);\n  MethodEntry method=new MethodEntry(entry.name,BaseProcessor.getMethodName(element.e),annotation.targets(),annotation.variants(),annotation.called(),annotation.unreliable(),annotation.forward(),lastMethodID++,element.e,annotation.priority());\n  entry.methods.add(method);\n  methods.add(method);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 136,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1318,
        "startLineNumber" : 69,
        "startColumnNumber" : 12,
        "endLineNumber" : 97,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (Smethod element : orderedElements) {\n  Remote annotation=element.annotation(Remote.class);\n  if (!element.is(Modifier.STATIC) || !element.is(Modifier.PUBLIC)) {\n    err(\"All @Remote methods must be public and static: \",element);\n  }\n  if (annotation.targets() == Loc.none) {\n    err(\"A @Remote method's targets() cannot be equal to 'none':\",element);\n  }\n  if (!classMap.containsKey(callLocation)) {\n    ClassEntry clas=new ClassEntry(callLocation);\n    classMap.put(callLocation,clas);\n    classes.add(clas);\n  }\n  ClassEntry entry=classMap.get(callLocation);\n  MethodEntry method=new MethodEntry(entry.name,BaseProcessor.getMethodName(element.e),annotation.targets(),annotation.variants(),annotation.called(),annotation.unreliable(),annotation.forward(),lastMethodID++,element.e,annotation.priority());\n  entry.methods.add(method);\n  methods.add(method);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 142,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2233,
        "startLineNumber" : 51,
        "startColumnNumber" : 22,
        "endLineNumber" : 104,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  serializer=TypeIOResolver.resolve(this);\n  int lastMethodID=0;\n  elements=methods(Remote.class);\n  classMap=new HashMap<>();\n  methods=new Seq<>();\n  classes=new Seq<>();\n  Seq<Smethod> orderedElements=elements.copy();\n  orderedElements.sortComparing(Object::toString);\n  for (  Smethod element : orderedElements) {\n    Remote annotation=element.annotation(Remote.class);\n    if (!element.is(Modifier.STATIC) || !element.is(Modifier.PUBLIC)) {\n      err(\"All @Remote methods must be public and static: \",element);\n    }\n    if (annotation.targets() == Loc.none) {\n      err(\"A @Remote method's targets() cannot be equal to 'none':\",element);\n    }\n    if (!classMap.containsKey(callLocation)) {\n      ClassEntry clas=new ClassEntry(callLocation);\n      classMap.put(callLocation,clas);\n      classes.add(clas);\n    }\n    ClassEntry entry=classMap.get(callLocation);\n    MethodEntry method=new MethodEntry(entry.name,BaseProcessor.getMethodName(element.e),annotation.targets(),annotation.variants(),annotation.called(),annotation.unreliable(),annotation.forward(),lastMethodID++,element.e,annotation.priority());\n    entry.methods.add(method);\n    methods.add(method);\n  }\n  RemoteWriteGenerator writegen=new RemoteWriteGenerator(serializer);\n  writegen.generateFor(classes,packageName);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 217,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3328,
        "startLineNumber" : 51,
        "startColumnNumber" : 8,
        "endLineNumber" : 121,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (round == 1) {\n  serializer=TypeIOResolver.resolve(this);\n  int lastMethodID=0;\n  elements=methods(Remote.class);\n  classMap=new HashMap<>();\n  methods=new Seq<>();\n  classes=new Seq<>();\n  Seq<Smethod> orderedElements=elements.copy();\n  orderedElements.sortComparing(Object::toString);\n  for (  Smethod element : orderedElements) {\n    Remote annotation=element.annotation(Remote.class);\n    if (!element.is(Modifier.STATIC) || !element.is(Modifier.PUBLIC)) {\n      err(\"All @Remote methods must be public and static: \",element);\n    }\n    if (annotation.targets() == Loc.none) {\n      err(\"A @Remote method's targets() cannot be equal to 'none':\",element);\n    }\n    if (!classMap.containsKey(callLocation)) {\n      ClassEntry clas=new ClassEntry(callLocation);\n      classMap.put(callLocation,clas);\n      classes.add(clas);\n    }\n    ClassEntry entry=classMap.get(callLocation);\n    MethodEntry method=new MethodEntry(entry.name,BaseProcessor.getMethodName(element.e),annotation.targets(),annotation.variants(),annotation.called(),annotation.unreliable(),annotation.forward(),lastMethodID++,element.e,annotation.priority());\n    entry.methods.add(method);\n    methods.add(method);\n  }\n  RemoteWriteGenerator writegen=new RemoteWriteGenerator(serializer);\n  writegen.generateFor(classes,packageName);\n}\n else if (round == 2) {\n  RemoteReadGenerator readgen=new RemoteReadGenerator(serializer);\n  readgen.generateFor(methods.select(method -> method.where.isClient),readServerName,packageName,true);\n  readgen.generateFor(methods.select(method -> method.where.isServer),readClientName,packageName,false);\n  TypeSpec.Builder hashBuilder=TypeSpec.classBuilder(\"MethodHash\").addModifiers(Modifier.PUBLIC);\n  hashBuilder.addJavadoc(autogenWarning);\n  hashBuilder.addField(FieldSpec.builder(int.class,\"HASH\",Modifier.STATIC,Modifier.PUBLIC,Modifier.FINAL).initializer(\"$1L\",Arrays.hashCode(methods.map(m -> m.element).toArray())).build());\n  TypeSpec spec=hashBuilder.build();\n  JavaFile.builder(packageName,spec).build().writeTo(BaseProcessor.filer);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 351,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3404,
        "startLineNumber" : 49,
        "startColumnNumber" : 67,
        "endLineNumber" : 122,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (round == 1) {\n    serializer=TypeIOResolver.resolve(this);\n    int lastMethodID=0;\n    elements=methods(Remote.class);\n    classMap=new HashMap<>();\n    methods=new Seq<>();\n    classes=new Seq<>();\n    Seq<Smethod> orderedElements=elements.copy();\n    orderedElements.sortComparing(Object::toString);\n    for (    Smethod element : orderedElements) {\n      Remote annotation=element.annotation(Remote.class);\n      if (!element.is(Modifier.STATIC) || !element.is(Modifier.PUBLIC)) {\n        err(\"All @Remote methods must be public and static: \",element);\n      }\n      if (annotation.targets() == Loc.none) {\n        err(\"A @Remote method's targets() cannot be equal to 'none':\",element);\n      }\n      if (!classMap.containsKey(callLocation)) {\n        ClassEntry clas=new ClassEntry(callLocation);\n        classMap.put(callLocation,clas);\n        classes.add(clas);\n      }\n      ClassEntry entry=classMap.get(callLocation);\n      MethodEntry method=new MethodEntry(entry.name,BaseProcessor.getMethodName(element.e),annotation.targets(),annotation.variants(),annotation.called(),annotation.unreliable(),annotation.forward(),lastMethodID++,element.e,annotation.priority());\n      entry.methods.add(method);\n      methods.add(method);\n    }\n    RemoteWriteGenerator writegen=new RemoteWriteGenerator(serializer);\n    writegen.generateFor(classes,packageName);\n  }\n else   if (round == 2) {\n    RemoteReadGenerator readgen=new RemoteReadGenerator(serializer);\n    readgen.generateFor(methods.select(method -> method.where.isClient),readServerName,packageName,true);\n    readgen.generateFor(methods.select(method -> method.where.isServer),readClientName,packageName,false);\n    TypeSpec.Builder hashBuilder=TypeSpec.classBuilder(\"MethodHash\").addModifiers(Modifier.PUBLIC);\n    hashBuilder.addJavadoc(autogenWarning);\n    hashBuilder.addField(FieldSpec.builder(int.class,\"HASH\",Modifier.STATIC,Modifier.PUBLIC,Modifier.FINAL).initializer(\"$1L\",Arrays.hashCode(methods.map(m -> m.element).toArray())).build());\n    TypeSpec spec=hashBuilder.build();\n    JavaFile.builder(packageName,spec).build().writeTo(BaseProcessor.filer);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 352,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3481,
        "startLineNumber" : 48,
        "startColumnNumber" : 4,
        "endLineNumber" : 122,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void process(RoundEnvironment roundEnv) throws Exception {\n  if (round == 1) {\n    serializer=TypeIOResolver.resolve(this);\n    int lastMethodID=0;\n    elements=methods(Remote.class);\n    classMap=new HashMap<>();\n    methods=new Seq<>();\n    classes=new Seq<>();\n    Seq<Smethod> orderedElements=elements.copy();\n    orderedElements.sortComparing(Object::toString);\n    for (    Smethod element : orderedElements) {\n      Remote annotation=element.annotation(Remote.class);\n      if (!element.is(Modifier.STATIC) || !element.is(Modifier.PUBLIC)) {\n        err(\"All @Remote methods must be public and static: \",element);\n      }\n      if (annotation.targets() == Loc.none) {\n        err(\"A @Remote method's targets() cannot be equal to 'none':\",element);\n      }\n      if (!classMap.containsKey(callLocation)) {\n        ClassEntry clas=new ClassEntry(callLocation);\n        classMap.put(callLocation,clas);\n        classes.add(clas);\n      }\n      ClassEntry entry=classMap.get(callLocation);\n      MethodEntry method=new MethodEntry(entry.name,BaseProcessor.getMethodName(element.e),annotation.targets(),annotation.variants(),annotation.called(),annotation.unreliable(),annotation.forward(),lastMethodID++,element.e,annotation.priority());\n      entry.methods.add(method);\n      methods.add(method);\n    }\n    RemoteWriteGenerator writegen=new RemoteWriteGenerator(serializer);\n    writegen.generateFor(classes,packageName);\n  }\n else   if (round == 2) {\n    RemoteReadGenerator readgen=new RemoteReadGenerator(serializer);\n    readgen.generateFor(methods.select(method -> method.where.isClient),readServerName,packageName,true);\n    readgen.generateFor(methods.select(method -> method.where.isServer),readClientName,packageName,false);\n    TypeSpec.Builder hashBuilder=TypeSpec.classBuilder(\"MethodHash\").addModifiers(Modifier.PUBLIC);\n    hashBuilder.addJavadoc(autogenWarning);\n    hashBuilder.addField(FieldSpec.builder(int.class,\"HASH\",Modifier.STATIC,Modifier.PUBLIC,Modifier.FINAL).initializer(\"$1L\",Arrays.hashCode(methods.map(m -> m.element).toArray())).build());\n    TypeSpec spec=hashBuilder.build();\n    JavaFile.builder(packageName,spec).build().writeTo(BaseProcessor.filer);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 364,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 246,
        "startLineNumber" : 92,
        "startColumnNumber" : 37,
        "endLineNumber" : 93,
        "endColumnNumber" : 133
      },
      "nodeContext" : "new MethodEntry(entry.name,BaseProcessor.getMethodName(element.e),annotation.targets(),annotation.variants(),annotation.called(),annotation.unreliable(),annotation.forward(),lastMethodID++,element.e,annotation.priority())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 35,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 23,
    "startLineNumber" : 93,
    "startColumnNumber" : 37,
    "endLineNumber" : 93,
    "endColumnNumber" : 60
  } ],
  "layoutRelationDataList" : [ ]
}