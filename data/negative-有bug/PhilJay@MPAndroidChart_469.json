{
  "id" : 469,
  "expression" : "end <= start + 1",
  "projectName" : "PhilJay@MPAndroidChart",
  "commitID" : "43046425fc2ed73d0d3f177759706116e02a9053",
  "filePath" : "/MPChartLib/src/com/github/mikephil/charting/data/filter/Approximator.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "end <= start + 1",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 171,
      "startColumnNumber" : 12,
      "endLineNumber" : 171,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 171,
        "startColumnNumber" : 8,
        "endLineNumber" : 174,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (end <= start + 1) {\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1026,
        "startLineNumber" : 170,
        "startColumnNumber" : 21,
        "endLineNumber" : 203,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (end <= start + 1) {\n    return;\n  }\n  int maxDistIndex=0;\n  double distMax=0;\n  Entry firstEntry=entries.get(start);\n  Entry lastEntry=entries.get(end);\n  for (int i=start + 1; i < end; i++) {\n    double dist=calcAngleBetweenLines(firstEntry,lastEntry,firstEntry,entries.get(i));\n    if (dist > distMax) {\n      distMax=dist;\n      maxDistIndex=i;\n    }\n  }\n  if (distMax > epsilon) {\n    keep[maxDistIndex]=true;\n    algorithmDouglasPeucker(entries,epsilon,start,maxDistIndex);\n    algorithmDouglasPeucker(entries,epsilon,maxDistIndex,end);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 102,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1362,
        "startLineNumber" : 160,
        "startColumnNumber" : 4,
        "endLineNumber" : 203,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * apply the Douglas-Peucker-Reduction to an ArrayList of Entry with a given epsilon (tolerance)\n * @param entries\n * @param epsilon as y-value\n * @param start\n * @param end\n */\nprivate void algorithmDouglasPeucker(ArrayList<Entry> entries,double epsilon,int start,int end){\n  if (end <= start + 1) {\n    return;\n  }\n  int maxDistIndex=0;\n  double distMax=0;\n  Entry firstEntry=entries.get(start);\n  Entry lastEntry=entries.get(end);\n  for (int i=start + 1; i < end; i++) {\n    double dist=calcAngleBetweenLines(firstEntry,lastEntry,firstEntry,entries.get(i));\n    if (dist > distMax) {\n      distMax=dist;\n      maxDistIndex=i;\n    }\n  }\n  if (distMax > epsilon) {\n    keep[maxDistIndex]=true;\n    algorithmDouglasPeucker(entries,epsilon,start,maxDistIndex);\n    algorithmDouglasPeucker(entries,epsilon,maxDistIndex,end);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 123,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 171,
        "startColumnNumber" : 8,
        "endLineNumber" : 174,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (end <= start + 1) {\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 5,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 171,
    "startColumnNumber" : 12,
    "endLineNumber" : 171,
    "endColumnNumber" : 28
  } ],
  "layoutRelationDataList" : [ ]
}