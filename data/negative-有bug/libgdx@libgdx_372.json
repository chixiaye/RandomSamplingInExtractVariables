{
  "id" : 372,
  "expression" : "\"Line Height is not equal\"",
  "projectName" : "libgdx@libgdx",
  "commitID" : "3485b16e8979c0141421bc80cb8831b7a0403f67",
  "filePath" : "/extensions/gdx-tools/src/com/badlogic/gdx/tools/bmfont/BitmapFontWriterTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Line Height is not equal\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 26,
      "startLineNumber" : 77,
      "startColumnNumber" : 90,
      "endLineNumber" : 77,
      "endColumnNumber" : 116
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 77,
        "startColumnNumber" : 66,
        "endLineNumber" : 77,
        "endColumnNumber" : 117
      },
      "nodeContext" : "new GdxRuntimeException(\"Line Height is not equal\")",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 77,
        "startColumnNumber" : 60,
        "endLineNumber" : 77,
        "endColumnNumber" : 118
      },
      "nodeContext" : "throw new GdxRuntimeException(\"Line Height is not equal\");\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 77,
        "startColumnNumber" : 2,
        "endLineNumber" : 77,
        "endColumnNumber" : 118
      },
      "nodeContext" : "if (!MathUtils.isEqual(lineHeight,loadedFontlineHeight)) throw new GdxRuntimeException(\"Line Height is not equal\");\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3180,
        "startLineNumber" : 28,
        "startColumnNumber" : 23,
        "endLineNumber" : 87,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  BitmapFontWriter.FontInfo info=new BitmapFontWriter.FontInfo();\n  info.padding=new BitmapFontWriter.Padding(0,0,0,0);\n  FreeTypeFontGenerator.FreeTypeFontParameter param=new FreeTypeFontGenerator.FreeTypeFontParameter();\n  param.size=13;\n  param.shadowOffsetY=3;\n  param.renderCount=3;\n  param.shadowColor=new Color(0,0,0,1);\n  param.characters=Hiero.EXTENDED_CHARS;\n  param.packer=new PixmapPacker(1024,1024,Pixmap.Format.RGBA8888,2,false,new PixmapPacker.SkylineStrategy());\n  FreeTypeFontGenerator generator=new FreeTypeFontGenerator(Gdx.files.absolute(\"../../tests/gdx-tests-android/assets/data/unbom.ttf\"));\n  generatedFont=generator.generateFont(param);\n  info.overrideMetrics(generatedFont.getData());\n  BitmapFontWriter.writeFont(generatedFont.getData(),new String[]{\"bitmapWrittenFont.png\"},Gdx.files.local(\"bitmapWrittenFont.fnt\"),info,512,512);\n  BitmapFontWriter.writePixmaps(param.packer.getPages(),Gdx.files.local(\"\"),\"bitmapWrittenFont\");\n  final float ascent=generatedFont.getAscent();\n  final float descent=generatedFont.getDescent();\n  final float capHeight=generatedFont.getCapHeight();\n  final float lineHeight=generatedFont.getLineHeight();\n  final float spaceXadvance=generatedFont.getSpaceXadvance();\n  final float xHeight=generatedFont.getXHeight();\n  loadedFont=new BitmapFont(Gdx.files.local(\"bitmapWrittenFont.fnt\"));\n  final float loadedFontascent=loadedFont.getAscent();\n  final float loadedFontdescent=loadedFont.getDescent();\n  final float loadedFontcapHeight=loadedFont.getCapHeight();\n  final float loadedFontlineHeight=loadedFont.getLineHeight();\n  final float loadedFontspaceXadvance=loadedFont.getSpaceXadvance();\n  final float loadedFontxHeight=loadedFont.getXHeight();\n  System.out.println(\"Ascent: \" + ascent + \" : \"+ loadedFontascent);\n  System.out.println(\"Descent: \" + descent + \" : \"+ loadedFontdescent);\n  System.out.println(\"Cap Height: \" + capHeight + \" : \"+ loadedFontcapHeight);\n  System.out.println(\"Line height: \" + lineHeight + \" : \"+ loadedFontlineHeight);\n  System.out.println(\"Space X advance: \" + spaceXadvance + \" : \"+ loadedFontspaceXadvance);\n  System.out.println(\"xHeight: \" + xHeight + \" : \"+ loadedFontxHeight);\n  if (!MathUtils.isEqual(ascent,loadedFontascent))   throw new GdxRuntimeException(\"Ascent is not equal\");\n  if (!MathUtils.isEqual(descent,loadedFontdescent))   throw new GdxRuntimeException(\"Descent is not equal\");\n  if (!MathUtils.isEqual(capHeight,loadedFontcapHeight))   throw new GdxRuntimeException(\"Cap height is not equal\");\n  if (!MathUtils.isEqual(lineHeight,loadedFontlineHeight))   throw new GdxRuntimeException(\"Line Height is not equal\");\n  if (!MathUtils.isEqual(spaceXadvance,loadedFontspaceXadvance))   throw new GdxRuntimeException(\"spaceXAdvance is not equal\");\n  if (!MathUtils.isEqual(xHeight,loadedFontxHeight))   throw new GdxRuntimeException(\"xHeight is not equal\");\n  spriteBatch=new SpriteBatch();\n  renderer=new ShapeRenderer();\n  renderer.setProjectionMatrix(spriteBatch.getProjectionMatrix());\n  font=new BitmapFont();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 437,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3214,
        "startLineNumber" : 27,
        "startColumnNumber" : 1,
        "endLineNumber" : 87,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public void create(){\n  BitmapFontWriter.FontInfo info=new BitmapFontWriter.FontInfo();\n  info.padding=new BitmapFontWriter.Padding(0,0,0,0);\n  FreeTypeFontGenerator.FreeTypeFontParameter param=new FreeTypeFontGenerator.FreeTypeFontParameter();\n  param.size=13;\n  param.shadowOffsetY=3;\n  param.renderCount=3;\n  param.shadowColor=new Color(0,0,0,1);\n  param.characters=Hiero.EXTENDED_CHARS;\n  param.packer=new PixmapPacker(1024,1024,Pixmap.Format.RGBA8888,2,false,new PixmapPacker.SkylineStrategy());\n  FreeTypeFontGenerator generator=new FreeTypeFontGenerator(Gdx.files.absolute(\"../../tests/gdx-tests-android/assets/data/unbom.ttf\"));\n  generatedFont=generator.generateFont(param);\n  info.overrideMetrics(generatedFont.getData());\n  BitmapFontWriter.writeFont(generatedFont.getData(),new String[]{\"bitmapWrittenFont.png\"},Gdx.files.local(\"bitmapWrittenFont.fnt\"),info,512,512);\n  BitmapFontWriter.writePixmaps(param.packer.getPages(),Gdx.files.local(\"\"),\"bitmapWrittenFont\");\n  final float ascent=generatedFont.getAscent();\n  final float descent=generatedFont.getDescent();\n  final float capHeight=generatedFont.getCapHeight();\n  final float lineHeight=generatedFont.getLineHeight();\n  final float spaceXadvance=generatedFont.getSpaceXadvance();\n  final float xHeight=generatedFont.getXHeight();\n  loadedFont=new BitmapFont(Gdx.files.local(\"bitmapWrittenFont.fnt\"));\n  final float loadedFontascent=loadedFont.getAscent();\n  final float loadedFontdescent=loadedFont.getDescent();\n  final float loadedFontcapHeight=loadedFont.getCapHeight();\n  final float loadedFontlineHeight=loadedFont.getLineHeight();\n  final float loadedFontspaceXadvance=loadedFont.getSpaceXadvance();\n  final float loadedFontxHeight=loadedFont.getXHeight();\n  System.out.println(\"Ascent: \" + ascent + \" : \"+ loadedFontascent);\n  System.out.println(\"Descent: \" + descent + \" : \"+ loadedFontdescent);\n  System.out.println(\"Cap Height: \" + capHeight + \" : \"+ loadedFontcapHeight);\n  System.out.println(\"Line height: \" + lineHeight + \" : \"+ loadedFontlineHeight);\n  System.out.println(\"Space X advance: \" + spaceXadvance + \" : \"+ loadedFontspaceXadvance);\n  System.out.println(\"xHeight: \" + xHeight + \" : \"+ loadedFontxHeight);\n  if (!MathUtils.isEqual(ascent,loadedFontascent))   throw new GdxRuntimeException(\"Ascent is not equal\");\n  if (!MathUtils.isEqual(descent,loadedFontdescent))   throw new GdxRuntimeException(\"Descent is not equal\");\n  if (!MathUtils.isEqual(capHeight,loadedFontcapHeight))   throw new GdxRuntimeException(\"Cap height is not equal\");\n  if (!MathUtils.isEqual(lineHeight,loadedFontlineHeight))   throw new GdxRuntimeException(\"Line Height is not equal\");\n  if (!MathUtils.isEqual(spaceXadvance,loadedFontspaceXadvance))   throw new GdxRuntimeException(\"spaceXAdvance is not equal\");\n  if (!MathUtils.isEqual(xHeight,loadedFontxHeight))   throw new GdxRuntimeException(\"xHeight is not equal\");\n  spriteBatch=new SpriteBatch();\n  renderer=new ShapeRenderer();\n  renderer.setProjectionMatrix(spriteBatch.getProjectionMatrix());\n  font=new BitmapFont();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 443,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 77,
        "startColumnNumber" : 2,
        "endLineNumber" : 77,
        "endColumnNumber" : 118
      },
      "nodeContext" : "if (!MathUtils.isEqual(lineHeight,loadedFontlineHeight)) throw new GdxRuntimeException(\"Line Height is not equal\");\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 5,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 26,
    "startLineNumber" : 77,
    "startColumnNumber" : 90,
    "endLineNumber" : 77,
    "endColumnNumber" : 116
  } ],
  "layoutRelationDataList" : [ ]
}