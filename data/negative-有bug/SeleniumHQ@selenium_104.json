{
  "id" : 104,
  "expression" : "driver.findElement(By.tagName(\"body\")).getText()",
  "projectName" : "SeleniumHQ@selenium",
  "commitID" : "c146621f39dbec94114835aa1f6af6a0e1fa4cd0",
  "filePath" : "/java/client/test/org/openqa/selenium/devtools/CdpFacadeTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "driver.findElement(By.tagName(\"body\")).getText()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 48,
      "startLineNumber" : 71,
      "startColumnNumber" : 16,
      "endLineNumber" : 71,
      "endColumnNumber" : 64
    },
    "astNodeNumber" : 9,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 71,
        "startColumnNumber" : 6,
        "endLineNumber" : 71,
        "endColumnNumber" : 64
      },
      "nodeContext" : "message=driver.findElement(By.tagName(\"body\")).getText()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 71,
        "startColumnNumber" : 6,
        "endLineNumber" : 71,
        "endColumnNumber" : 65
      },
      "nodeContext" : "message=driver.findElement(By.tagName(\"body\")).getText();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 168,
        "startLineNumber" : 68,
        "startColumnNumber" : 112,
        "endLineNumber" : 74,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  driver.get(server.whereIs(\"/\"));\n  message=driver.findElement(By.tagName(\"body\")).getText();\n  assertThat(message).isEqualTo(\"I like cheese\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 28,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 356,
        "startLineNumber" : 66,
        "startColumnNumber" : 4,
        "endLineNumber" : 74,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try (NetworkInterceptor interceptor=new NetworkInterceptor(driver,Route.matching(req -> true).to(() -> req -> new HttpResponse().setContent(utf8String(\"I like cheese\"))))){\n  driver.get(server.whereIs(\"/\"));\n  message=driver.findElement(By.tagName(\"body\")).getText();\n  assertThat(message).isEqualTo(\"I like cheese\");\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 59,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1019,
        "startLineNumber" : 53,
        "startColumnNumber" : 60,
        "endLineNumber" : 81,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  assumeThat(driver).isInstanceOf(HasAuthentication.class);\n  ((HasAuthentication)driver).register(UsernameAndPassword.of(\"test\",\"test\"));\n  driver.get(server.whereIs(\"/\"));\n  String message=driver.findElement(By.tagName(\"h1\")).getText();\n  assertThat(message).contains(\"authorized\");\n  try (NetworkInterceptor interceptor=new NetworkInterceptor(driver,Route.matching(req -> true).to(() -> req -> new HttpResponse().setContent(utf8String(\"I like cheese\"))))){\n    driver.get(server.whereIs(\"/\"));\n    message=driver.findElement(By.tagName(\"body\")).getText();\n    assertThat(message).isEqualTo(\"I like cheese\");\n  }\n   driver.get(server.whereIs(\"/\"));\n  message=driver.findElement(By.tagName(\"h1\")).getText();\n  assertThat(message).contains(\"authorized\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 138,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1085,
        "startLineNumber" : 52,
        "startColumnNumber" : 2,
        "endLineNumber" : 81,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void networkInterceptorAndAuthHandlersDoNotFight(){\n  assumeThat(driver).isInstanceOf(HasAuthentication.class);\n  ((HasAuthentication)driver).register(UsernameAndPassword.of(\"test\",\"test\"));\n  driver.get(server.whereIs(\"/\"));\n  String message=driver.findElement(By.tagName(\"h1\")).getText();\n  assertThat(message).contains(\"authorized\");\n  try (NetworkInterceptor interceptor=new NetworkInterceptor(driver,Route.matching(req -> true).to(() -> req -> new HttpResponse().setContent(utf8String(\"I like cheese\"))))){\n    driver.get(server.whereIs(\"/\"));\n    message=driver.findElement(By.tagName(\"body\")).getText();\n    assertThat(message).isEqualTo(\"I like cheese\");\n  }\n   driver.get(server.whereIs(\"/\"));\n  message=driver.findElement(By.tagName(\"h1\")).getText();\n  assertThat(message).contains(\"authorized\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 144,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 71,
        "startColumnNumber" : 6,
        "endLineNumber" : 71,
        "endColumnNumber" : 65
      },
      "nodeContext" : "message=driver.findElement(By.tagName(\"body\")).getText();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    },
    "tokenLength" : 6,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 48,
    "startLineNumber" : 71,
    "startColumnNumber" : 16,
    "endLineNumber" : 71,
    "endColumnNumber" : 64
  } ],
  "layoutRelationDataList" : [ ]
}