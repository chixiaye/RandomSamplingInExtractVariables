{
  "id" : 194,
  "expression" : "isPrintAST",
  "projectName" : "projectlombok@lombok",
  "commitID" : "25def866b50860715ee7c315c678b8c3d1ba9b56",
  "filePath" : "/src/core/lombok/eclipse/HandlerLibrary.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "isPrintAST",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 183,
      "startColumnNumber" : 7,
      "endLineNumber" : 183,
      "endColumnNumber" : 17
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 183,
        "startColumnNumber" : 7,
        "endLineNumber" : 183,
        "endColumnNumber" : 33
      },
      "nodeContext" : "isPrintAST == skipPrintAst",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 183,
        "startColumnNumber" : 3,
        "endLineNumber" : 183,
        "endColumnNumber" : 44
      },
      "nodeContext" : "if (isPrintAST == skipPrintAst) continue;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 741,
        "startLineNumber" : 181,
        "startColumnNumber" : 123,
        "endLineNumber" : 199,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  boolean isPrintAST=fqn.equals(PrintAST.class.getName());\n  if (isPrintAST == skipPrintAst)   continue;\n  AnnotationHandlerContainer<?> container=annotationHandlers.get(fqn);\n  if (container == null)   continue;\n  if (!annotationNode.isCompleteParse() && container.deferUntilPostDiet()) {\n    if (needsHandling(annotation))     container.preHandle(annotation,annotationNode);\n    continue;\n  }\n  try {\n    if (checkAndSetHandled(annotation))     container.handle(annotation,annotationNode);\n  }\n catch (  AnnotationValueDecodeFail fail) {\n    fail.owner.setError(fail.getMessage(),fail.idx);\n  }\ncatch (  Throwable t) {\n    error(ast,String.format(\"Lombok annotation handler %s failed\",container.handler.getClass()),t);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 105,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 862,
        "startLineNumber" : 181,
        "startColumnNumber" : 2,
        "endLineNumber" : 199,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (String fqn : resolver.findTypeMatches(annotationNode,typeLibrary,toQualifiedName(annotation.type.getTypeName()))) {\n  boolean isPrintAST=fqn.equals(PrintAST.class.getName());\n  if (isPrintAST == skipPrintAst)   continue;\n  AnnotationHandlerContainer<?> container=annotationHandlers.get(fqn);\n  if (container == null)   continue;\n  if (!annotationNode.isCompleteParse() && container.deferUntilPostDiet()) {\n    if (needsHandling(annotation))     container.preHandle(annotation,annotationNode);\n    continue;\n  }\n  try {\n    if (checkAndSetHandled(annotation))     container.handle(annotation,annotationNode);\n  }\n catch (  AnnotationValueDecodeFail fail) {\n    fail.owner.setError(fail.getMessage(),fail.idx);\n  }\ncatch (  Throwable t) {\n    error(ast,String.format(\"Lombok annotation handler %s failed\",container.handler.getClass()),t);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 122,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1139,
        "startLineNumber" : 173,
        "startColumnNumber" : 173,
        "endLineNumber" : 200,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String pkgName=annotationNode.getPackageDeclaration();\n  Collection<String> imports=annotationNode.getImportStatements();\n  TypeResolver resolver=new TypeResolver(pkgName,imports);\n  TypeReference rawType=annotation.type;\n  if (rawType == null)   return;\n  for (  String fqn : resolver.findTypeMatches(annotationNode,typeLibrary,toQualifiedName(annotation.type.getTypeName()))) {\n    boolean isPrintAST=fqn.equals(PrintAST.class.getName());\n    if (isPrintAST == skipPrintAst)     continue;\n    AnnotationHandlerContainer<?> container=annotationHandlers.get(fqn);\n    if (container == null)     continue;\n    if (!annotationNode.isCompleteParse() && container.deferUntilPostDiet()) {\n      if (needsHandling(annotation))       container.preHandle(annotation,annotationNode);\n      continue;\n    }\n    try {\n      if (checkAndSetHandled(annotation))       container.handle(annotation,annotationNode);\n    }\n catch (    AnnotationValueDecodeFail fail) {\n      fail.owner.setError(fail.getMessage(),fail.idx);\n    }\ncatch (    Throwable t) {\n      error(ast,String.format(\"Lombok annotation handler %s failed\",container.handler.getClass()),t);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 165,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2294,
        "startLineNumber" : 156,
        "startColumnNumber" : 1,
        "endLineNumber" : 200,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Handles the provided annotation node by first finding a qualifying instance of {@link EclipseAnnotationHandler} and if one exists, calling it with a freshly cooked upinstance of  {@link AnnotationValues}. Note that depending on the printASTOnly flag, the  {@link lombok.core.PrintAST} annotationwill either be silently skipped, or everything that isn't  {@code PrintAST} will be skipped.The HandlerLibrary will attempt to guess if the given annotation node represents a lombok annotation. For example, if  {@code lombok.*} is in the import list, then this method will guess that{@code Getter} refers to {@code lombok.Getter}, presuming that  {@link lombok.eclipse.handlers.HandleGetter}has been loaded.\n * @param ast The Compilation Unit that contains the Annotation AST Node.\n * @param annotationNode The Lombok AST Node representing the Annotation AST Node.\n * @param annotation 'node.get()' - convenience parameter.\n */\npublic void handleAnnotation(CompilationUnitDeclaration ast,EclipseNode annotationNode,org.eclipse.jdt.internal.compiler.ast.Annotation annotation,boolean skipPrintAst){\n  String pkgName=annotationNode.getPackageDeclaration();\n  Collection<String> imports=annotationNode.getImportStatements();\n  TypeResolver resolver=new TypeResolver(pkgName,imports);\n  TypeReference rawType=annotation.type;\n  if (rawType == null)   return;\n  for (  String fqn : resolver.findTypeMatches(annotationNode,typeLibrary,toQualifiedName(annotation.type.getTypeName()))) {\n    boolean isPrintAST=fqn.equals(PrintAST.class.getName());\n    if (isPrintAST == skipPrintAst)     continue;\n    AnnotationHandlerContainer<?> container=annotationHandlers.get(fqn);\n    if (container == null)     continue;\n    if (!annotationNode.isCompleteParse() && container.deferUntilPostDiet()) {\n      if (needsHandling(annotation))       container.preHandle(annotation,annotationNode);\n      continue;\n    }\n    try {\n      if (checkAndSetHandled(annotation))       container.handle(annotation,annotationNode);\n    }\n catch (    AnnotationValueDecodeFail fail) {\n      fail.owner.setError(fail.getMessage(),fail.idx);\n    }\ncatch (    Throwable t) {\n      error(ast,String.format(\"Lombok annotation handler %s failed\",container.handler.getClass()),t);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 197,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 183,
        "startColumnNumber" : 3,
        "endLineNumber" : 183,
        "endColumnNumber" : 44
      },
      "nodeContext" : "if (isPrintAST == skipPrintAst) continue;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 183,
    "startColumnNumber" : 7,
    "endLineNumber" : 183,
    "endColumnNumber" : 17
  } ],
  "layoutRelationDataList" : [ ]
}