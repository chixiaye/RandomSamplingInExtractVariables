{
  "id" : 368,
  "expression" : "request",
  "projectName" : "apache@skywalking",
  "commitID" : "16b51d55baec4f779f312e07081d1397addbcfe9",
  "filePath" : "/oap-server/server-fetcher-plugin/kafka-fetcher-plugin/src/main/java/org/apache/skywalking/oap/server/analyzer/agent/kafka/provider/handler/ServiceManagementHandler.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "request",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 76,
      "startColumnNumber" : 73,
      "endLineNumber" : 76,
      "endColumnNumber" : 80
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 76,
        "startColumnNumber" : 73,
        "endLineNumber" : 76,
        "endColumnNumber" : 93
      },
      "nodeContext" : "request.getService()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 76,
        "startColumnNumber" : 35,
        "endLineNumber" : 76,
        "endColumnNumber" : 94
      },
      "nodeContext" : "namingLengthControl.formatServiceName(request.getService())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 76,
        "startColumnNumber" : 21,
        "endLineNumber" : 76,
        "endColumnNumber" : 94
      },
      "nodeContext" : "serviceName=namingLengthControl.formatServiceName(request.getService())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 76,
        "startColumnNumber" : 8,
        "endLineNumber" : 76,
        "endColumnNumber" : 95
      },
      "nodeContext" : "final String serviceName=namingLengthControl.formatServiceName(request.getService());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1409,
        "startLineNumber" : 74,
        "startColumnNumber" : 75,
        "endLineNumber" : 103,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ServiceInstanceUpdate serviceInstanceUpdate=new ServiceInstanceUpdate();\n  final String serviceName=namingLengthControl.formatServiceName(request.getService());\n  final String instanceName=namingLengthControl.formatInstanceName(request.getServiceInstance());\n  serviceInstanceUpdate.setServiceId(IDManager.ServiceID.buildId(serviceName,NodeType.Normal));\n  serviceInstanceUpdate.setName(instanceName);\n  if (log.isDebugEnabled()) {\n    log.debug(\"Service[{}] instance[{}] registered.\",serviceName,instanceName);\n  }\n  JsonObject properties=new JsonObject();\n  List<String> ipv4List=new ArrayList<>();\n  request.getPropertiesList().forEach(prop -> {\n    if (InstanceTraffic.PropertyUtil.IPV4.equals(prop.getKey())) {\n      ipv4List.add(prop.getValue());\n    }\n else {\n      properties.addProperty(prop.getKey(),prop.getValue());\n    }\n  }\n);\n  properties.addProperty(InstanceTraffic.PropertyUtil.IPV4S,ipv4List.stream().collect(Collectors.joining(\",\")));\n  serviceInstanceUpdate.setProperties(properties);\n  serviceInstanceUpdate.setTimeBucket(TimeBucket.getTimeBucket(System.currentTimeMillis(),DownSampling.Minute));\n  sourceReceiver.receive(serviceInstanceUpdate);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 164,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1480,
        "startLineNumber" : 74,
        "startColumnNumber" : 4,
        "endLineNumber" : 103,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private final void serviceReportProperties(InstanceProperties request){\n  ServiceInstanceUpdate serviceInstanceUpdate=new ServiceInstanceUpdate();\n  final String serviceName=namingLengthControl.formatServiceName(request.getService());\n  final String instanceName=namingLengthControl.formatInstanceName(request.getServiceInstance());\n  serviceInstanceUpdate.setServiceId(IDManager.ServiceID.buildId(serviceName,NodeType.Normal));\n  serviceInstanceUpdate.setName(instanceName);\n  if (log.isDebugEnabled()) {\n    log.debug(\"Service[{}] instance[{}] registered.\",serviceName,instanceName);\n  }\n  JsonObject properties=new JsonObject();\n  List<String> ipv4List=new ArrayList<>();\n  request.getPropertiesList().forEach(prop -> {\n    if (InstanceTraffic.PropertyUtil.IPV4.equals(prop.getKey())) {\n      ipv4List.add(prop.getValue());\n    }\n else {\n      properties.addProperty(prop.getKey(),prop.getValue());\n    }\n  }\n);\n  properties.addProperty(InstanceTraffic.PropertyUtil.IPV4S,ipv4List.stream().collect(Collectors.joining(\",\")));\n  serviceInstanceUpdate.setProperties(properties);\n  serviceInstanceUpdate.setTimeBucket(TimeBucket.getTimeBucket(System.currentTimeMillis(),DownSampling.Minute));\n  sourceReceiver.receive(serviceInstanceUpdate);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 173,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 76,
        "startColumnNumber" : 8,
        "endLineNumber" : 76,
        "endColumnNumber" : 95
      },
      "nodeContext" : "final String serviceName=namingLengthControl.formatServiceName(request.getService());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.skywalking.oap.server.analyzer.agent.kafka.provider.handler.InstanceProperties"
  }, {
    "nodeContext" : "request",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 77,
      "startColumnNumber" : 75,
      "endLineNumber" : 77,
      "endColumnNumber" : 82
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 77,
        "startColumnNumber" : 75,
        "endLineNumber" : 77,
        "endColumnNumber" : 103
      },
      "nodeContext" : "request.getServiceInstance()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 77,
        "startColumnNumber" : 36,
        "endLineNumber" : 77,
        "endColumnNumber" : 104
      },
      "nodeContext" : "namingLengthControl.formatInstanceName(request.getServiceInstance())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 77,
        "startColumnNumber" : 21,
        "endLineNumber" : 77,
        "endColumnNumber" : 104
      },
      "nodeContext" : "instanceName=namingLengthControl.formatInstanceName(request.getServiceInstance())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 77,
        "startColumnNumber" : 8,
        "endLineNumber" : 77,
        "endColumnNumber" : 105
      },
      "nodeContext" : "final String instanceName=namingLengthControl.formatInstanceName(request.getServiceInstance());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1409,
        "startLineNumber" : 74,
        "startColumnNumber" : 75,
        "endLineNumber" : 103,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ServiceInstanceUpdate serviceInstanceUpdate=new ServiceInstanceUpdate();\n  final String serviceName=namingLengthControl.formatServiceName(request.getService());\n  final String instanceName=namingLengthControl.formatInstanceName(request.getServiceInstance());\n  serviceInstanceUpdate.setServiceId(IDManager.ServiceID.buildId(serviceName,NodeType.Normal));\n  serviceInstanceUpdate.setName(instanceName);\n  if (log.isDebugEnabled()) {\n    log.debug(\"Service[{}] instance[{}] registered.\",serviceName,instanceName);\n  }\n  JsonObject properties=new JsonObject();\n  List<String> ipv4List=new ArrayList<>();\n  request.getPropertiesList().forEach(prop -> {\n    if (InstanceTraffic.PropertyUtil.IPV4.equals(prop.getKey())) {\n      ipv4List.add(prop.getValue());\n    }\n else {\n      properties.addProperty(prop.getKey(),prop.getValue());\n    }\n  }\n);\n  properties.addProperty(InstanceTraffic.PropertyUtil.IPV4S,ipv4List.stream().collect(Collectors.joining(\",\")));\n  serviceInstanceUpdate.setProperties(properties);\n  serviceInstanceUpdate.setTimeBucket(TimeBucket.getTimeBucket(System.currentTimeMillis(),DownSampling.Minute));\n  sourceReceiver.receive(serviceInstanceUpdate);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 164,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1480,
        "startLineNumber" : 74,
        "startColumnNumber" : 4,
        "endLineNumber" : 103,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private final void serviceReportProperties(InstanceProperties request){\n  ServiceInstanceUpdate serviceInstanceUpdate=new ServiceInstanceUpdate();\n  final String serviceName=namingLengthControl.formatServiceName(request.getService());\n  final String instanceName=namingLengthControl.formatInstanceName(request.getServiceInstance());\n  serviceInstanceUpdate.setServiceId(IDManager.ServiceID.buildId(serviceName,NodeType.Normal));\n  serviceInstanceUpdate.setName(instanceName);\n  if (log.isDebugEnabled()) {\n    log.debug(\"Service[{}] instance[{}] registered.\",serviceName,instanceName);\n  }\n  JsonObject properties=new JsonObject();\n  List<String> ipv4List=new ArrayList<>();\n  request.getPropertiesList().forEach(prop -> {\n    if (InstanceTraffic.PropertyUtil.IPV4.equals(prop.getKey())) {\n      ipv4List.add(prop.getValue());\n    }\n else {\n      properties.addProperty(prop.getKey(),prop.getValue());\n    }\n  }\n);\n  properties.addProperty(InstanceTraffic.PropertyUtil.IPV4S,ipv4List.stream().collect(Collectors.joining(\",\")));\n  serviceInstanceUpdate.setProperties(properties);\n  serviceInstanceUpdate.setTimeBucket(TimeBucket.getTimeBucket(System.currentTimeMillis(),DownSampling.Minute));\n  sourceReceiver.receive(serviceInstanceUpdate);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 173,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 77,
        "startColumnNumber" : 8,
        "endLineNumber" : 77,
        "endColumnNumber" : 105
      },
      "nodeContext" : "final String instanceName=namingLengthControl.formatInstanceName(request.getServiceInstance());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.skywalking.oap.server.analyzer.agent.kafka.provider.handler.InstanceProperties"
  }, {
    "nodeContext" : "request",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 91,
      "startColumnNumber" : 8,
      "endLineNumber" : 91,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 91,
        "startColumnNumber" : 8,
        "endLineNumber" : 91,
        "endColumnNumber" : 35
      },
      "nodeContext" : "request.getPropertiesList()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 285,
        "startLineNumber" : 91,
        "startColumnNumber" : 8,
        "endLineNumber" : 97,
        "endColumnNumber" : 10
      },
      "nodeContext" : "request.getPropertiesList().forEach(prop -> {\n  if (InstanceTraffic.PropertyUtil.IPV4.equals(prop.getKey())) {\n    ipv4List.add(prop.getValue());\n  }\n else {\n    properties.addProperty(prop.getKey(),prop.getValue());\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 39,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 286,
        "startLineNumber" : 91,
        "startColumnNumber" : 8,
        "endLineNumber" : 97,
        "endColumnNumber" : 11
      },
      "nodeContext" : "request.getPropertiesList().forEach(prop -> {\n  if (InstanceTraffic.PropertyUtil.IPV4.equals(prop.getKey())) {\n    ipv4List.add(prop.getValue());\n  }\n else {\n    properties.addProperty(prop.getKey(),prop.getValue());\n  }\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 40,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1409,
        "startLineNumber" : 74,
        "startColumnNumber" : 75,
        "endLineNumber" : 103,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ServiceInstanceUpdate serviceInstanceUpdate=new ServiceInstanceUpdate();\n  final String serviceName=namingLengthControl.formatServiceName(request.getService());\n  final String instanceName=namingLengthControl.formatInstanceName(request.getServiceInstance());\n  serviceInstanceUpdate.setServiceId(IDManager.ServiceID.buildId(serviceName,NodeType.Normal));\n  serviceInstanceUpdate.setName(instanceName);\n  if (log.isDebugEnabled()) {\n    log.debug(\"Service[{}] instance[{}] registered.\",serviceName,instanceName);\n  }\n  JsonObject properties=new JsonObject();\n  List<String> ipv4List=new ArrayList<>();\n  request.getPropertiesList().forEach(prop -> {\n    if (InstanceTraffic.PropertyUtil.IPV4.equals(prop.getKey())) {\n      ipv4List.add(prop.getValue());\n    }\n else {\n      properties.addProperty(prop.getKey(),prop.getValue());\n    }\n  }\n);\n  properties.addProperty(InstanceTraffic.PropertyUtil.IPV4S,ipv4List.stream().collect(Collectors.joining(\",\")));\n  serviceInstanceUpdate.setProperties(properties);\n  serviceInstanceUpdate.setTimeBucket(TimeBucket.getTimeBucket(System.currentTimeMillis(),DownSampling.Minute));\n  sourceReceiver.receive(serviceInstanceUpdate);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 164,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1480,
        "startLineNumber" : 74,
        "startColumnNumber" : 4,
        "endLineNumber" : 103,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private final void serviceReportProperties(InstanceProperties request){\n  ServiceInstanceUpdate serviceInstanceUpdate=new ServiceInstanceUpdate();\n  final String serviceName=namingLengthControl.formatServiceName(request.getService());\n  final String instanceName=namingLengthControl.formatInstanceName(request.getServiceInstance());\n  serviceInstanceUpdate.setServiceId(IDManager.ServiceID.buildId(serviceName,NodeType.Normal));\n  serviceInstanceUpdate.setName(instanceName);\n  if (log.isDebugEnabled()) {\n    log.debug(\"Service[{}] instance[{}] registered.\",serviceName,instanceName);\n  }\n  JsonObject properties=new JsonObject();\n  List<String> ipv4List=new ArrayList<>();\n  request.getPropertiesList().forEach(prop -> {\n    if (InstanceTraffic.PropertyUtil.IPV4.equals(prop.getKey())) {\n      ipv4List.add(prop.getValue());\n    }\n else {\n      properties.addProperty(prop.getKey(),prop.getValue());\n    }\n  }\n);\n  properties.addProperty(InstanceTraffic.PropertyUtil.IPV4S,ipv4List.stream().collect(Collectors.joining(\",\")));\n  serviceInstanceUpdate.setProperties(properties);\n  serviceInstanceUpdate.setTimeBucket(TimeBucket.getTimeBucket(System.currentTimeMillis(),DownSampling.Minute));\n  sourceReceiver.receive(serviceInstanceUpdate);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 173,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 91,
        "startColumnNumber" : 8,
        "endLineNumber" : 91,
        "endColumnNumber" : 35
      },
      "nodeContext" : "request.getPropertiesList()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.skywalking.oap.server.analyzer.agent.kafka.provider.handler.InstanceProperties"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 76,
    "startColumnNumber" : 73,
    "endLineNumber" : 76,
    "endColumnNumber" : 80
  }, {
    "charLength" : 7,
    "startLineNumber" : 77,
    "startColumnNumber" : 75,
    "endLineNumber" : 77,
    "endColumnNumber" : 82
  }, {
    "charLength" : 7,
    "startLineNumber" : 91,
    "startColumnNumber" : 8,
    "endLineNumber" : 91,
    "endColumnNumber" : 15
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  } ]
}