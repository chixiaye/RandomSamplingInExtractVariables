{
  "id" : 112,
  "expression" : "i < 20",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-broker/src/test/java/org/apache/pulsar/client/api/SimpleTypedProducerConsumerTest.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "i < 20",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 553,
      "startColumnNumber" : 29,
      "endLineNumber" : 553,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 550,
        "startLineNumber" : 553,
        "startColumnNumber" : 12,
        "endLineNumber" : 564,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=10; i < 20; i++) {\n  String message=\"my-message-\" + i;\n  byte[] data=avroSchema.encode(new AvroEncodedPojo(message));\n  byte[] junkData=new byte[data.length / 2];\n  System.arraycopy(data,0,junkData,0,junkData.length);\n  try {\n    producer.send(junkData);\n    fail(\"Should fail on sending junk data\");\n  }\n catch (  SchemaSerializationException sse) {\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 76,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 841,
        "startLineNumber" : 551,
        "startColumnNumber" : 23,
        "endLineNumber" : 571,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (int i=10; i < 20; i++) {\n    String message=\"my-message-\" + i;\n    byte[] data=avroSchema.encode(new AvroEncodedPojo(message));\n    byte[] junkData=new byte[data.length / 2];\n    System.arraycopy(data,0,junkData,0,junkData.length);\n    try {\n      producer.send(junkData);\n      fail(\"Should fail on sending junk data\");\n    }\n catch (    SchemaSerializationException sse) {\n    }\n  }\n  for (int i=10; i < 20; i++) {\n    String message=\"my-message-\" + i;\n    byte[] data=avroSchema.encode(new AvroEncodedPojo(message));\n    producer.send(data);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 115,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1031,
        "startLineNumber" : 548,
        "startColumnNumber" : 8,
        "endLineNumber" : 571,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try (Producer<byte[]> producer=pulsarClient.newProducer(Schema.AUTO_PRODUCE_BYTES()).topic(\"persistent://my-property/use/my-ns/my-topic1\").create()){\n  for (int i=10; i < 20; i++) {\n    String message=\"my-message-\" + i;\n    byte[] data=avroSchema.encode(new AvroEncodedPojo(message));\n    byte[] junkData=new byte[data.length / 2];\n    System.arraycopy(data,0,junkData,0,junkData.length);\n    try {\n      producer.send(junkData);\n      fail(\"Should fail on sending junk data\");\n    }\n catch (    SchemaSerializationException sse) {\n    }\n  }\n  for (int i=10; i < 20; i++) {\n    String message=\"my-message-\" + i;\n    byte[] data=avroSchema.encode(new AvroEncodedPojo(message));\n    producer.send(data);\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 136,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2998,
        "startLineNumber" : 531,
        "startColumnNumber" : 57,
        "endLineNumber" : 602,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  log.info(\"-- Starting {} test --\",methodName);\n  AvroSchema<AvroEncodedPojo> avroSchema=AvroSchema.of(SchemaDefinition.<AvroEncodedPojo>builder().withPojo(AvroEncodedPojo.class).build());\n  try (Producer<AvroEncodedPojo> producer=pulsarClient.newProducer(avroSchema).topic(\"persistent://my-property/use/my-ns/my-topic1\").create()){\n    for (int i=0; i < 10; i++) {\n      String message=\"my-message-\" + i;\n      producer.send(new AvroEncodedPojo(message));\n    }\n  }\n   try (Producer<byte[]> producer=pulsarClient.newProducer(Schema.AUTO_PRODUCE_BYTES()).topic(\"persistent://my-property/use/my-ns/my-topic1\").create()){\n    for (int i=10; i < 20; i++) {\n      String message=\"my-message-\" + i;\n      byte[] data=avroSchema.encode(new AvroEncodedPojo(message));\n      byte[] junkData=new byte[data.length / 2];\n      System.arraycopy(data,0,junkData,0,junkData.length);\n      try {\n        producer.send(junkData);\n        fail(\"Should fail on sending junk data\");\n      }\n catch (      SchemaSerializationException sse) {\n      }\n    }\n    for (int i=10; i < 20; i++) {\n      String message=\"my-message-\" + i;\n      byte[] data=avroSchema.encode(new AvroEncodedPojo(message));\n      producer.send(data);\n    }\n  }\n   Consumer<GenericRecord> consumer=pulsarClient.newConsumer(Schema.AUTO_CONSUME()).topic(\"persistent://my-property/use/my-ns/my-topic1\").subscriptionName(\"my-subscriber-name\").subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribe();\n  Message<GenericRecord> msg=null;\n  Set<String> messageSet=Sets.newHashSet();\n  for (int i=0; i < 20; i++) {\n    msg=consumer.receive(5,TimeUnit.SECONDS);\n    GenericRecord receivedMessage=msg.getValue();\n    log.debug(\"Received message: [{}]\",receivedMessage);\n    String expectedMessage=\"my-message-\" + i;\n    String actualMessage=(String)receivedMessage.getField(\"message\");\n    testMessageOrderAndDuplicates(messageSet,actualMessage,expectedMessage);\n  }\n  consumer.acknowledgeCumulative(msg);\n  consumer.close();\n  SchemaRegistry.SchemaAndMetadata storedSchema=pulsar.getSchemaRegistryService().getSchema(\"my-property/my-ns/my-topic1\").get();\n  Assert.assertEquals(storedSchema.schema.getData(),avroSchema.getSchemaInfo().getSchema());\n  log.info(\"-- Exiting {} test --\",methodName);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 366,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3061,
        "startLineNumber" : 530,
        "startColumnNumber" : 4,
        "endLineNumber" : 602,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testAutoBytesProducer() throws Exception {\n  log.info(\"-- Starting {} test --\",methodName);\n  AvroSchema<AvroEncodedPojo> avroSchema=AvroSchema.of(SchemaDefinition.<AvroEncodedPojo>builder().withPojo(AvroEncodedPojo.class).build());\n  try (Producer<AvroEncodedPojo> producer=pulsarClient.newProducer(avroSchema).topic(\"persistent://my-property/use/my-ns/my-topic1\").create()){\n    for (int i=0; i < 10; i++) {\n      String message=\"my-message-\" + i;\n      producer.send(new AvroEncodedPojo(message));\n    }\n  }\n   try (Producer<byte[]> producer=pulsarClient.newProducer(Schema.AUTO_PRODUCE_BYTES()).topic(\"persistent://my-property/use/my-ns/my-topic1\").create()){\n    for (int i=10; i < 20; i++) {\n      String message=\"my-message-\" + i;\n      byte[] data=avroSchema.encode(new AvroEncodedPojo(message));\n      byte[] junkData=new byte[data.length / 2];\n      System.arraycopy(data,0,junkData,0,junkData.length);\n      try {\n        producer.send(junkData);\n        fail(\"Should fail on sending junk data\");\n      }\n catch (      SchemaSerializationException sse) {\n      }\n    }\n    for (int i=10; i < 20; i++) {\n      String message=\"my-message-\" + i;\n      byte[] data=avroSchema.encode(new AvroEncodedPojo(message));\n      producer.send(data);\n    }\n  }\n   Consumer<GenericRecord> consumer=pulsarClient.newConsumer(Schema.AUTO_CONSUME()).topic(\"persistent://my-property/use/my-ns/my-topic1\").subscriptionName(\"my-subscriber-name\").subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribe();\n  Message<GenericRecord> msg=null;\n  Set<String> messageSet=Sets.newHashSet();\n  for (int i=0; i < 20; i++) {\n    msg=consumer.receive(5,TimeUnit.SECONDS);\n    GenericRecord receivedMessage=msg.getValue();\n    log.debug(\"Received message: [{}]\",receivedMessage);\n    String expectedMessage=\"my-message-\" + i;\n    String actualMessage=(String)receivedMessage.getField(\"message\");\n    testMessageOrderAndDuplicates(messageSet,actualMessage,expectedMessage);\n  }\n  consumer.acknowledgeCumulative(msg);\n  consumer.close();\n  SchemaRegistry.SchemaAndMetadata storedSchema=pulsar.getSchemaRegistryService().getSchema(\"my-property/my-ns/my-topic1\").get();\n  Assert.assertEquals(storedSchema.schema.getData(),avroSchema.getSchemaInfo().getSchema());\n  log.info(\"-- Exiting {} test --\",methodName);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 374,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 550,
        "startLineNumber" : 553,
        "startColumnNumber" : 12,
        "endLineNumber" : 564,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=10; i < 20; i++) {\n  String message=\"my-message-\" + i;\n  byte[] data=avroSchema.encode(new AvroEncodedPojo(message));\n  byte[] junkData=new byte[data.length / 2];\n  System.arraycopy(data,0,junkData,0,junkData.length);\n  try {\n    producer.send(junkData);\n    fail(\"Should fail on sending junk data\");\n  }\n catch (  SchemaSerializationException sse) {\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 76,
      "astHeight" : 8
    },
    "tokenLength" : 3,
    "type" : "boolean"
  }, {
    "nodeContext" : "i < 20",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 566,
      "startColumnNumber" : 29,
      "endLineNumber" : 566,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 213,
        "startLineNumber" : 566,
        "startColumnNumber" : 12,
        "endLineNumber" : 570,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=10; i < 20; i++) {\n  String message=\"my-message-\" + i;\n  byte[] data=avroSchema.encode(new AvroEncodedPojo(message));\n  producer.send(data);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 38,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 841,
        "startLineNumber" : 551,
        "startColumnNumber" : 23,
        "endLineNumber" : 571,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (int i=10; i < 20; i++) {\n    String message=\"my-message-\" + i;\n    byte[] data=avroSchema.encode(new AvroEncodedPojo(message));\n    byte[] junkData=new byte[data.length / 2];\n    System.arraycopy(data,0,junkData,0,junkData.length);\n    try {\n      producer.send(junkData);\n      fail(\"Should fail on sending junk data\");\n    }\n catch (    SchemaSerializationException sse) {\n    }\n  }\n  for (int i=10; i < 20; i++) {\n    String message=\"my-message-\" + i;\n    byte[] data=avroSchema.encode(new AvroEncodedPojo(message));\n    producer.send(data);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 115,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1031,
        "startLineNumber" : 548,
        "startColumnNumber" : 8,
        "endLineNumber" : 571,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try (Producer<byte[]> producer=pulsarClient.newProducer(Schema.AUTO_PRODUCE_BYTES()).topic(\"persistent://my-property/use/my-ns/my-topic1\").create()){\n  for (int i=10; i < 20; i++) {\n    String message=\"my-message-\" + i;\n    byte[] data=avroSchema.encode(new AvroEncodedPojo(message));\n    byte[] junkData=new byte[data.length / 2];\n    System.arraycopy(data,0,junkData,0,junkData.length);\n    try {\n      producer.send(junkData);\n      fail(\"Should fail on sending junk data\");\n    }\n catch (    SchemaSerializationException sse) {\n    }\n  }\n  for (int i=10; i < 20; i++) {\n    String message=\"my-message-\" + i;\n    byte[] data=avroSchema.encode(new AvroEncodedPojo(message));\n    producer.send(data);\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 136,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2998,
        "startLineNumber" : 531,
        "startColumnNumber" : 57,
        "endLineNumber" : 602,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  log.info(\"-- Starting {} test --\",methodName);\n  AvroSchema<AvroEncodedPojo> avroSchema=AvroSchema.of(SchemaDefinition.<AvroEncodedPojo>builder().withPojo(AvroEncodedPojo.class).build());\n  try (Producer<AvroEncodedPojo> producer=pulsarClient.newProducer(avroSchema).topic(\"persistent://my-property/use/my-ns/my-topic1\").create()){\n    for (int i=0; i < 10; i++) {\n      String message=\"my-message-\" + i;\n      producer.send(new AvroEncodedPojo(message));\n    }\n  }\n   try (Producer<byte[]> producer=pulsarClient.newProducer(Schema.AUTO_PRODUCE_BYTES()).topic(\"persistent://my-property/use/my-ns/my-topic1\").create()){\n    for (int i=10; i < 20; i++) {\n      String message=\"my-message-\" + i;\n      byte[] data=avroSchema.encode(new AvroEncodedPojo(message));\n      byte[] junkData=new byte[data.length / 2];\n      System.arraycopy(data,0,junkData,0,junkData.length);\n      try {\n        producer.send(junkData);\n        fail(\"Should fail on sending junk data\");\n      }\n catch (      SchemaSerializationException sse) {\n      }\n    }\n    for (int i=10; i < 20; i++) {\n      String message=\"my-message-\" + i;\n      byte[] data=avroSchema.encode(new AvroEncodedPojo(message));\n      producer.send(data);\n    }\n  }\n   Consumer<GenericRecord> consumer=pulsarClient.newConsumer(Schema.AUTO_CONSUME()).topic(\"persistent://my-property/use/my-ns/my-topic1\").subscriptionName(\"my-subscriber-name\").subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribe();\n  Message<GenericRecord> msg=null;\n  Set<String> messageSet=Sets.newHashSet();\n  for (int i=0; i < 20; i++) {\n    msg=consumer.receive(5,TimeUnit.SECONDS);\n    GenericRecord receivedMessage=msg.getValue();\n    log.debug(\"Received message: [{}]\",receivedMessage);\n    String expectedMessage=\"my-message-\" + i;\n    String actualMessage=(String)receivedMessage.getField(\"message\");\n    testMessageOrderAndDuplicates(messageSet,actualMessage,expectedMessage);\n  }\n  consumer.acknowledgeCumulative(msg);\n  consumer.close();\n  SchemaRegistry.SchemaAndMetadata storedSchema=pulsar.getSchemaRegistryService().getSchema(\"my-property/my-ns/my-topic1\").get();\n  Assert.assertEquals(storedSchema.schema.getData(),avroSchema.getSchemaInfo().getSchema());\n  log.info(\"-- Exiting {} test --\",methodName);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 366,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3061,
        "startLineNumber" : 530,
        "startColumnNumber" : 4,
        "endLineNumber" : 602,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testAutoBytesProducer() throws Exception {\n  log.info(\"-- Starting {} test --\",methodName);\n  AvroSchema<AvroEncodedPojo> avroSchema=AvroSchema.of(SchemaDefinition.<AvroEncodedPojo>builder().withPojo(AvroEncodedPojo.class).build());\n  try (Producer<AvroEncodedPojo> producer=pulsarClient.newProducer(avroSchema).topic(\"persistent://my-property/use/my-ns/my-topic1\").create()){\n    for (int i=0; i < 10; i++) {\n      String message=\"my-message-\" + i;\n      producer.send(new AvroEncodedPojo(message));\n    }\n  }\n   try (Producer<byte[]> producer=pulsarClient.newProducer(Schema.AUTO_PRODUCE_BYTES()).topic(\"persistent://my-property/use/my-ns/my-topic1\").create()){\n    for (int i=10; i < 20; i++) {\n      String message=\"my-message-\" + i;\n      byte[] data=avroSchema.encode(new AvroEncodedPojo(message));\n      byte[] junkData=new byte[data.length / 2];\n      System.arraycopy(data,0,junkData,0,junkData.length);\n      try {\n        producer.send(junkData);\n        fail(\"Should fail on sending junk data\");\n      }\n catch (      SchemaSerializationException sse) {\n      }\n    }\n    for (int i=10; i < 20; i++) {\n      String message=\"my-message-\" + i;\n      byte[] data=avroSchema.encode(new AvroEncodedPojo(message));\n      producer.send(data);\n    }\n  }\n   Consumer<GenericRecord> consumer=pulsarClient.newConsumer(Schema.AUTO_CONSUME()).topic(\"persistent://my-property/use/my-ns/my-topic1\").subscriptionName(\"my-subscriber-name\").subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribe();\n  Message<GenericRecord> msg=null;\n  Set<String> messageSet=Sets.newHashSet();\n  for (int i=0; i < 20; i++) {\n    msg=consumer.receive(5,TimeUnit.SECONDS);\n    GenericRecord receivedMessage=msg.getValue();\n    log.debug(\"Received message: [{}]\",receivedMessage);\n    String expectedMessage=\"my-message-\" + i;\n    String actualMessage=(String)receivedMessage.getField(\"message\");\n    testMessageOrderAndDuplicates(messageSet,actualMessage,expectedMessage);\n  }\n  consumer.acknowledgeCumulative(msg);\n  consumer.close();\n  SchemaRegistry.SchemaAndMetadata storedSchema=pulsar.getSchemaRegistryService().getSchema(\"my-property/my-ns/my-topic1\").get();\n  Assert.assertEquals(storedSchema.schema.getData(),avroSchema.getSchemaInfo().getSchema());\n  log.info(\"-- Exiting {} test --\",methodName);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 374,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 213,
        "startLineNumber" : 566,
        "startColumnNumber" : 12,
        "endLineNumber" : 570,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=10; i < 20; i++) {\n  String message=\"my-message-\" + i;\n  byte[] data=avroSchema.encode(new AvroEncodedPojo(message));\n  producer.send(data);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 38,
      "astHeight" : 8
    },
    "tokenLength" : 3,
    "type" : "boolean"
  }, {
    "nodeContext" : "i < 20",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 582,
      "startColumnNumber" : 24,
      "endLineNumber" : 582,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 447,
        "startLineNumber" : 582,
        "startColumnNumber" : 8,
        "endLineNumber" : 589,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < 20; i++) {\n  msg=consumer.receive(5,TimeUnit.SECONDS);\n  GenericRecord receivedMessage=msg.getValue();\n  log.debug(\"Received message: [{}]\",receivedMessage);\n  String expectedMessage=\"my-message-\" + i;\n  String actualMessage=(String)receivedMessage.getField(\"message\");\n  testMessageOrderAndDuplicates(messageSet,actualMessage,expectedMessage);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 62,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2998,
        "startLineNumber" : 531,
        "startColumnNumber" : 57,
        "endLineNumber" : 602,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  log.info(\"-- Starting {} test --\",methodName);\n  AvroSchema<AvroEncodedPojo> avroSchema=AvroSchema.of(SchemaDefinition.<AvroEncodedPojo>builder().withPojo(AvroEncodedPojo.class).build());\n  try (Producer<AvroEncodedPojo> producer=pulsarClient.newProducer(avroSchema).topic(\"persistent://my-property/use/my-ns/my-topic1\").create()){\n    for (int i=0; i < 10; i++) {\n      String message=\"my-message-\" + i;\n      producer.send(new AvroEncodedPojo(message));\n    }\n  }\n   try (Producer<byte[]> producer=pulsarClient.newProducer(Schema.AUTO_PRODUCE_BYTES()).topic(\"persistent://my-property/use/my-ns/my-topic1\").create()){\n    for (int i=10; i < 20; i++) {\n      String message=\"my-message-\" + i;\n      byte[] data=avroSchema.encode(new AvroEncodedPojo(message));\n      byte[] junkData=new byte[data.length / 2];\n      System.arraycopy(data,0,junkData,0,junkData.length);\n      try {\n        producer.send(junkData);\n        fail(\"Should fail on sending junk data\");\n      }\n catch (      SchemaSerializationException sse) {\n      }\n    }\n    for (int i=10; i < 20; i++) {\n      String message=\"my-message-\" + i;\n      byte[] data=avroSchema.encode(new AvroEncodedPojo(message));\n      producer.send(data);\n    }\n  }\n   Consumer<GenericRecord> consumer=pulsarClient.newConsumer(Schema.AUTO_CONSUME()).topic(\"persistent://my-property/use/my-ns/my-topic1\").subscriptionName(\"my-subscriber-name\").subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribe();\n  Message<GenericRecord> msg=null;\n  Set<String> messageSet=Sets.newHashSet();\n  for (int i=0; i < 20; i++) {\n    msg=consumer.receive(5,TimeUnit.SECONDS);\n    GenericRecord receivedMessage=msg.getValue();\n    log.debug(\"Received message: [{}]\",receivedMessage);\n    String expectedMessage=\"my-message-\" + i;\n    String actualMessage=(String)receivedMessage.getField(\"message\");\n    testMessageOrderAndDuplicates(messageSet,actualMessage,expectedMessage);\n  }\n  consumer.acknowledgeCumulative(msg);\n  consumer.close();\n  SchemaRegistry.SchemaAndMetadata storedSchema=pulsar.getSchemaRegistryService().getSchema(\"my-property/my-ns/my-topic1\").get();\n  Assert.assertEquals(storedSchema.schema.getData(),avroSchema.getSchemaInfo().getSchema());\n  log.info(\"-- Exiting {} test --\",methodName);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 366,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3061,
        "startLineNumber" : 530,
        "startColumnNumber" : 4,
        "endLineNumber" : 602,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testAutoBytesProducer() throws Exception {\n  log.info(\"-- Starting {} test --\",methodName);\n  AvroSchema<AvroEncodedPojo> avroSchema=AvroSchema.of(SchemaDefinition.<AvroEncodedPojo>builder().withPojo(AvroEncodedPojo.class).build());\n  try (Producer<AvroEncodedPojo> producer=pulsarClient.newProducer(avroSchema).topic(\"persistent://my-property/use/my-ns/my-topic1\").create()){\n    for (int i=0; i < 10; i++) {\n      String message=\"my-message-\" + i;\n      producer.send(new AvroEncodedPojo(message));\n    }\n  }\n   try (Producer<byte[]> producer=pulsarClient.newProducer(Schema.AUTO_PRODUCE_BYTES()).topic(\"persistent://my-property/use/my-ns/my-topic1\").create()){\n    for (int i=10; i < 20; i++) {\n      String message=\"my-message-\" + i;\n      byte[] data=avroSchema.encode(new AvroEncodedPojo(message));\n      byte[] junkData=new byte[data.length / 2];\n      System.arraycopy(data,0,junkData,0,junkData.length);\n      try {\n        producer.send(junkData);\n        fail(\"Should fail on sending junk data\");\n      }\n catch (      SchemaSerializationException sse) {\n      }\n    }\n    for (int i=10; i < 20; i++) {\n      String message=\"my-message-\" + i;\n      byte[] data=avroSchema.encode(new AvroEncodedPojo(message));\n      producer.send(data);\n    }\n  }\n   Consumer<GenericRecord> consumer=pulsarClient.newConsumer(Schema.AUTO_CONSUME()).topic(\"persistent://my-property/use/my-ns/my-topic1\").subscriptionName(\"my-subscriber-name\").subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribe();\n  Message<GenericRecord> msg=null;\n  Set<String> messageSet=Sets.newHashSet();\n  for (int i=0; i < 20; i++) {\n    msg=consumer.receive(5,TimeUnit.SECONDS);\n    GenericRecord receivedMessage=msg.getValue();\n    log.debug(\"Received message: [{}]\",receivedMessage);\n    String expectedMessage=\"my-message-\" + i;\n    String actualMessage=(String)receivedMessage.getField(\"message\");\n    testMessageOrderAndDuplicates(messageSet,actualMessage,expectedMessage);\n  }\n  consumer.acknowledgeCumulative(msg);\n  consumer.close();\n  SchemaRegistry.SchemaAndMetadata storedSchema=pulsar.getSchemaRegistryService().getSchema(\"my-property/my-ns/my-topic1\").get();\n  Assert.assertEquals(storedSchema.schema.getData(),avroSchema.getSchemaInfo().getSchema());\n  log.info(\"-- Exiting {} test --\",methodName);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 374,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 447,
        "startLineNumber" : 582,
        "startColumnNumber" : 8,
        "endLineNumber" : 589,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < 20; i++) {\n  msg=consumer.receive(5,TimeUnit.SECONDS);\n  GenericRecord receivedMessage=msg.getValue();\n  log.debug(\"Received message: [{}]\",receivedMessage);\n  String expectedMessage=\"my-message-\" + i;\n  String actualMessage=(String)receivedMessage.getField(\"message\");\n  testMessageOrderAndDuplicates(messageSet,actualMessage,expectedMessage);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 62,
      "astHeight" : 7
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 553,
    "startColumnNumber" : 29,
    "endLineNumber" : 553,
    "endColumnNumber" : 35
  }, {
    "charLength" : 6,
    "startLineNumber" : 566,
    "startColumnNumber" : 29,
    "endLineNumber" : 566,
    "endColumnNumber" : 35
  }, {
    "charLength" : 6,
    "startLineNumber" : 582,
    "startColumnNumber" : 24,
    "endLineNumber" : 582,
    "endColumnNumber" : 30
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 1
  } ]
}