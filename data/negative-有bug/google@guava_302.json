{
  "id" : 302,
  "expression" : "baseName",
  "projectName" : "google@guava",
  "commitID" : "68500b2c09fa6985eab2e41577e2992685b57f2b",
  "filePath" : "/guava/src/com/google/common/io/Files.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "baseName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 432,
      "startColumnNumber" : 39,
      "endLineNumber" : 432,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 432,
        "startColumnNumber" : 39,
        "endLineNumber" : 432,
        "endColumnNumber" : 57
      },
      "nodeContext" : "baseName + counter",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 432,
        "startColumnNumber" : 21,
        "endLineNumber" : 432,
        "endColumnNumber" : 58
      },
      "nodeContext" : "new File(baseDir,baseName + counter)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 432,
        "startColumnNumber" : 11,
        "endLineNumber" : 432,
        "endColumnNumber" : 58
      },
      "nodeContext" : "tempDir=new File(baseDir,baseName + counter)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 432,
        "startColumnNumber" : 6,
        "endLineNumber" : 432,
        "endColumnNumber" : 59
      },
      "nodeContext" : "File tempDir=new File(baseDir,baseName + counter);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 133,
        "startLineNumber" : 431,
        "startColumnNumber" : 66,
        "endLineNumber" : 436,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  File tempDir=new File(baseDir,baseName + counter);\n  if (tempDir.mkdir()) {\n    return tempDir;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 195,
        "startLineNumber" : 431,
        "startColumnNumber" : 4,
        "endLineNumber" : 436,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int counter=0; counter < TEMP_DIR_ATTEMPTS; counter++) {\n  File tempDir=new File(baseDir,baseName + counter);\n  if (tempDir.mkdir()) {\n    return tempDir;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 31,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 694,
        "startLineNumber" : 426,
        "startColumnNumber" : 37,
        "endLineNumber" : 446,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  File baseDir=new File(System.getProperty(\"java.io.tmpdir\"));\n  @SuppressWarnings(\"GoodTime\") String baseName=System.currentTimeMillis() + \"-\";\n  for (int counter=0; counter < TEMP_DIR_ATTEMPTS; counter++) {\n    File tempDir=new File(baseDir,baseName + counter);\n    if (tempDir.mkdir()) {\n      return tempDir;\n    }\n  }\n  throw new IllegalStateException(\"Failed to create directory within \" + TEMP_DIR_ATTEMPTS + \" attempts (tried \"+ baseName+ \"0 to \"+ baseName+ (TEMP_DIR_ATTEMPTS - 1)+ ')');\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 73,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2593,
        "startLineNumber" : 394,
        "startColumnNumber" : 2,
        "endLineNumber" : 446,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Atomically creates a new directory somewhere beneath the system's temporary directory (as defined by the  {@code java.io.tmpdir} system property), and returns its name.<p>Use this method instead of  {@link File#createTempFile(String,String)} when you wish tocreate a directory, not a regular file. A common pitfall is to call  {@code createTempFile}, delete the file and create a directory in its place, but this leads a race condition which can be exploited to create security vulnerabilities, especially when executable files are to be written into the directory. <p>Depending on the environmment that this code is run in, the system temporary directory (and thus the directory this method creates) may be more visible that a program would like - files written to this directory may be read or overwritten by hostile programs running on the same machine. <p>This method assumes that the temporary volume is writable, has free inodes and free blocks, and that it will not be called thousands of times per second. <p><b> {@link java.nio.file.Path} equivalent:</b> {@link java.nio.file.Files#createTempDirectory}.\n * @return the newly-created directory\n * @throws IllegalStateException if the directory could not be created\n * @deprecated For Android users, see the <ahref=\"https://developer.android.com/training/data-storage\" target=\"_blank\">Data and File Storage overview</a> to select an appropriate temporary directory (perhaps  {@code context.getCacheDir()}). For developers on Java 7 or later, use  {@link java.nio.file.Files#createTempDirectory}, transforming it to a  {@link File} using {@link java.nio.file.Path#toFile() toFile()} if needed.\n */\n@Beta @Deprecated public static File createTempDir(){\n  File baseDir=new File(System.getProperty(\"java.io.tmpdir\"));\n  @SuppressWarnings(\"GoodTime\") String baseName=System.currentTimeMillis() + \"-\";\n  for (int counter=0; counter < TEMP_DIR_ATTEMPTS; counter++) {\n    File tempDir=new File(baseDir,baseName + counter);\n    if (tempDir.mkdir()) {\n      return tempDir;\n    }\n  }\n  throw new IllegalStateException(\"Failed to create directory within \" + TEMP_DIR_ATTEMPTS + \" attempts (tried \"+ baseName+ \"0 to \"+ baseName+ (TEMP_DIR_ATTEMPTS - 1)+ ')');\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 84,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 432,
        "startColumnNumber" : 6,
        "endLineNumber" : 432,
        "endColumnNumber" : 59
      },
      "nodeContext" : "File tempDir=new File(baseDir,baseName + counter);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "baseName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 441,
      "startColumnNumber" : 14,
      "endLineNumber" : 441,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 233,
        "startLineNumber" : 438,
        "startColumnNumber" : 8,
        "endLineNumber" : 445,
        "endColumnNumber" : 17
      },
      "nodeContext" : "\"Failed to create directory within \" + TEMP_DIR_ATTEMPTS + \" attempts (tried \"+ baseName+ \"0 to \"+ baseName+ (TEMP_DIR_ATTEMPTS - 1)+ ')'",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 270,
        "startLineNumber" : 437,
        "startColumnNumber" : 10,
        "endLineNumber" : 445,
        "endColumnNumber" : 18
      },
      "nodeContext" : "new IllegalStateException(\"Failed to create directory within \" + TEMP_DIR_ATTEMPTS + \" attempts (tried \"+ baseName+ \"0 to \"+ baseName+ (TEMP_DIR_ATTEMPTS - 1)+ ')')",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 277,
        "startLineNumber" : 437,
        "startColumnNumber" : 4,
        "endLineNumber" : 445,
        "endColumnNumber" : 19
      },
      "nodeContext" : "throw new IllegalStateException(\"Failed to create directory within \" + TEMP_DIR_ATTEMPTS + \" attempts (tried \"+ baseName+ \"0 to \"+ baseName+ (TEMP_DIR_ATTEMPTS - 1)+ ')');\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 694,
        "startLineNumber" : 426,
        "startColumnNumber" : 37,
        "endLineNumber" : 446,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  File baseDir=new File(System.getProperty(\"java.io.tmpdir\"));\n  @SuppressWarnings(\"GoodTime\") String baseName=System.currentTimeMillis() + \"-\";\n  for (int counter=0; counter < TEMP_DIR_ATTEMPTS; counter++) {\n    File tempDir=new File(baseDir,baseName + counter);\n    if (tempDir.mkdir()) {\n      return tempDir;\n    }\n  }\n  throw new IllegalStateException(\"Failed to create directory within \" + TEMP_DIR_ATTEMPTS + \" attempts (tried \"+ baseName+ \"0 to \"+ baseName+ (TEMP_DIR_ATTEMPTS - 1)+ ')');\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 73,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2593,
        "startLineNumber" : 394,
        "startColumnNumber" : 2,
        "endLineNumber" : 446,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Atomically creates a new directory somewhere beneath the system's temporary directory (as defined by the  {@code java.io.tmpdir} system property), and returns its name.<p>Use this method instead of  {@link File#createTempFile(String,String)} when you wish tocreate a directory, not a regular file. A common pitfall is to call  {@code createTempFile}, delete the file and create a directory in its place, but this leads a race condition which can be exploited to create security vulnerabilities, especially when executable files are to be written into the directory. <p>Depending on the environmment that this code is run in, the system temporary directory (and thus the directory this method creates) may be more visible that a program would like - files written to this directory may be read or overwritten by hostile programs running on the same machine. <p>This method assumes that the temporary volume is writable, has free inodes and free blocks, and that it will not be called thousands of times per second. <p><b> {@link java.nio.file.Path} equivalent:</b> {@link java.nio.file.Files#createTempDirectory}.\n * @return the newly-created directory\n * @throws IllegalStateException if the directory could not be created\n * @deprecated For Android users, see the <ahref=\"https://developer.android.com/training/data-storage\" target=\"_blank\">Data and File Storage overview</a> to select an appropriate temporary directory (perhaps  {@code context.getCacheDir()}). For developers on Java 7 or later, use  {@link java.nio.file.Files#createTempDirectory}, transforming it to a  {@link File} using {@link java.nio.file.Path#toFile() toFile()} if needed.\n */\n@Beta @Deprecated public static File createTempDir(){\n  File baseDir=new File(System.getProperty(\"java.io.tmpdir\"));\n  @SuppressWarnings(\"GoodTime\") String baseName=System.currentTimeMillis() + \"-\";\n  for (int counter=0; counter < TEMP_DIR_ATTEMPTS; counter++) {\n    File tempDir=new File(baseDir,baseName + counter);\n    if (tempDir.mkdir()) {\n      return tempDir;\n    }\n  }\n  throw new IllegalStateException(\"Failed to create directory within \" + TEMP_DIR_ATTEMPTS + \" attempts (tried \"+ baseName+ \"0 to \"+ baseName+ (TEMP_DIR_ATTEMPTS - 1)+ ')');\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 84,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 233,
        "startLineNumber" : 438,
        "startColumnNumber" : 8,
        "endLineNumber" : 445,
        "endColumnNumber" : 17
      },
      "nodeContext" : "\"Failed to create directory within \" + TEMP_DIR_ATTEMPTS + \" attempts (tried \"+ baseName+ \"0 to \"+ baseName+ (TEMP_DIR_ATTEMPTS - 1)+ ')'",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "baseName",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 443,
      "startColumnNumber" : 14,
      "endLineNumber" : 443,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 233,
        "startLineNumber" : 438,
        "startColumnNumber" : 8,
        "endLineNumber" : 445,
        "endColumnNumber" : 17
      },
      "nodeContext" : "\"Failed to create directory within \" + TEMP_DIR_ATTEMPTS + \" attempts (tried \"+ baseName+ \"0 to \"+ baseName+ (TEMP_DIR_ATTEMPTS - 1)+ ')'",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 270,
        "startLineNumber" : 437,
        "startColumnNumber" : 10,
        "endLineNumber" : 445,
        "endColumnNumber" : 18
      },
      "nodeContext" : "new IllegalStateException(\"Failed to create directory within \" + TEMP_DIR_ATTEMPTS + \" attempts (tried \"+ baseName+ \"0 to \"+ baseName+ (TEMP_DIR_ATTEMPTS - 1)+ ')')",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 277,
        "startLineNumber" : 437,
        "startColumnNumber" : 4,
        "endLineNumber" : 445,
        "endColumnNumber" : 19
      },
      "nodeContext" : "throw new IllegalStateException(\"Failed to create directory within \" + TEMP_DIR_ATTEMPTS + \" attempts (tried \"+ baseName+ \"0 to \"+ baseName+ (TEMP_DIR_ATTEMPTS - 1)+ ')');\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 694,
        "startLineNumber" : 426,
        "startColumnNumber" : 37,
        "endLineNumber" : 446,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  File baseDir=new File(System.getProperty(\"java.io.tmpdir\"));\n  @SuppressWarnings(\"GoodTime\") String baseName=System.currentTimeMillis() + \"-\";\n  for (int counter=0; counter < TEMP_DIR_ATTEMPTS; counter++) {\n    File tempDir=new File(baseDir,baseName + counter);\n    if (tempDir.mkdir()) {\n      return tempDir;\n    }\n  }\n  throw new IllegalStateException(\"Failed to create directory within \" + TEMP_DIR_ATTEMPTS + \" attempts (tried \"+ baseName+ \"0 to \"+ baseName+ (TEMP_DIR_ATTEMPTS - 1)+ ')');\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 73,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2593,
        "startLineNumber" : 394,
        "startColumnNumber" : 2,
        "endLineNumber" : 446,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Atomically creates a new directory somewhere beneath the system's temporary directory (as defined by the  {@code java.io.tmpdir} system property), and returns its name.<p>Use this method instead of  {@link File#createTempFile(String,String)} when you wish tocreate a directory, not a regular file. A common pitfall is to call  {@code createTempFile}, delete the file and create a directory in its place, but this leads a race condition which can be exploited to create security vulnerabilities, especially when executable files are to be written into the directory. <p>Depending on the environmment that this code is run in, the system temporary directory (and thus the directory this method creates) may be more visible that a program would like - files written to this directory may be read or overwritten by hostile programs running on the same machine. <p>This method assumes that the temporary volume is writable, has free inodes and free blocks, and that it will not be called thousands of times per second. <p><b> {@link java.nio.file.Path} equivalent:</b> {@link java.nio.file.Files#createTempDirectory}.\n * @return the newly-created directory\n * @throws IllegalStateException if the directory could not be created\n * @deprecated For Android users, see the <ahref=\"https://developer.android.com/training/data-storage\" target=\"_blank\">Data and File Storage overview</a> to select an appropriate temporary directory (perhaps  {@code context.getCacheDir()}). For developers on Java 7 or later, use  {@link java.nio.file.Files#createTempDirectory}, transforming it to a  {@link File} using {@link java.nio.file.Path#toFile() toFile()} if needed.\n */\n@Beta @Deprecated public static File createTempDir(){\n  File baseDir=new File(System.getProperty(\"java.io.tmpdir\"));\n  @SuppressWarnings(\"GoodTime\") String baseName=System.currentTimeMillis() + \"-\";\n  for (int counter=0; counter < TEMP_DIR_ATTEMPTS; counter++) {\n    File tempDir=new File(baseDir,baseName + counter);\n    if (tempDir.mkdir()) {\n      return tempDir;\n    }\n  }\n  throw new IllegalStateException(\"Failed to create directory within \" + TEMP_DIR_ATTEMPTS + \" attempts (tried \"+ baseName+ \"0 to \"+ baseName+ (TEMP_DIR_ATTEMPTS - 1)+ ')');\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 84,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 233,
        "startLineNumber" : 438,
        "startColumnNumber" : 8,
        "endLineNumber" : 445,
        "endColumnNumber" : 17
      },
      "nodeContext" : "\"Failed to create directory within \" + TEMP_DIR_ATTEMPTS + \" attempts (tried \"+ baseName+ \"0 to \"+ baseName+ (TEMP_DIR_ATTEMPTS - 1)+ ')'",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 432,
    "startColumnNumber" : 39,
    "endLineNumber" : 432,
    "endColumnNumber" : 47
  }, {
    "charLength" : 8,
    "startLineNumber" : 441,
    "startColumnNumber" : 14,
    "endLineNumber" : 441,
    "endColumnNumber" : 22
  }, {
    "charLength" : 8,
    "startLineNumber" : 443,
    "startColumnNumber" : 14,
    "endLineNumber" : 443,
    "endColumnNumber" : 22
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 0
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 0
  } ]
}