{
  "id" : 53,
  "expression" : "resultLength == uncompressedLength",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-common/src/main/java/org/apache/pulsar/common/compression/CompressionCodecZLib.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "resultLength == uncompressedLength",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 34,
      "startLineNumber" : 125,
      "startColumnNumber" : 22,
      "endLineNumber" : 125,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 125,
        "startColumnNumber" : 8,
        "endLineNumber" : 125,
        "endColumnNumber" : 57
      },
      "nodeContext" : "checkArgument(resultLength == uncompressedLength)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 125,
        "startColumnNumber" : 8,
        "endLineNumber" : 125,
        "endColumnNumber" : 58
      },
      "nodeContext" : "checkArgument(resultLength == uncompressedLength);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1006,
        "startLineNumber" : 98,
        "startColumnNumber" : 86,
        "endLineNumber" : 129,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ByteBuf uncompressed=PulsarByteBufAllocator.DEFAULT.heapBuffer(uncompressedLength,uncompressedLength);\n  int len=encoded.readableBytes();\n  byte[] array;\n  int offset;\n  if (encoded.hasArray()) {\n    array=encoded.array();\n    offset=encoded.arrayOffset() + encoded.readerIndex();\n  }\n else {\n    array=new byte[len];\n    encoded.getBytes(encoded.readerIndex(),array);\n    offset=0;\n  }\n  int resultLength;\n  Inflater inflater=this.inflater.get();\n  inflater.reset();\n  inflater.setInput(array,offset,len);\n  try {\n    resultLength=inflater.inflate(uncompressed.array(),uncompressed.arrayOffset(),uncompressedLength);\n  }\n catch (  DataFormatException e) {\n    throw new IOException(e);\n  }\n  checkArgument(resultLength == uncompressedLength);\n  uncompressed.writerIndex(uncompressedLength);\n  return uncompressed;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 136,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1102,
        "startLineNumber" : 97,
        "startColumnNumber" : 4,
        "endLineNumber" : 129,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public ByteBuf decode(ByteBuf encoded,int uncompressedLength) throws IOException {\n  ByteBuf uncompressed=PulsarByteBufAllocator.DEFAULT.heapBuffer(uncompressedLength,uncompressedLength);\n  int len=encoded.readableBytes();\n  byte[] array;\n  int offset;\n  if (encoded.hasArray()) {\n    array=encoded.array();\n    offset=encoded.arrayOffset() + encoded.readerIndex();\n  }\n else {\n    array=new byte[len];\n    encoded.getBytes(encoded.readerIndex(),array);\n    offset=0;\n  }\n  int resultLength;\n  Inflater inflater=this.inflater.get();\n  inflater.reset();\n  inflater.setInput(array,offset,len);\n  try {\n    resultLength=inflater.inflate(uncompressed.array(),uncompressed.arrayOffset(),uncompressedLength);\n  }\n catch (  DataFormatException e) {\n    throw new IOException(e);\n  }\n  checkArgument(resultLength == uncompressedLength);\n  uncompressed.writerIndex(uncompressedLength);\n  return uncompressed;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 152,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 125,
        "startColumnNumber" : 8,
        "endLineNumber" : 125,
        "endColumnNumber" : 58
      },
      "nodeContext" : "checkArgument(resultLength == uncompressedLength);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 34,
    "startLineNumber" : 125,
    "startColumnNumber" : 22,
    "endLineNumber" : 125,
    "endColumnNumber" : 56
  } ],
  "layoutRelationDataList" : [ ]
}