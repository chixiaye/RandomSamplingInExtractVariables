{
  "id" : 204,
  "expression" : "(JCAnnotation)get()",
  "projectName" : "projectlombok@lombok",
  "commitID" : "25def866b50860715ee7c315c678b8c3d1ba9b56",
  "filePath" : "/src/core/lombok/javac/JavacNode.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "(JCAnnotation)get()",
    "nodeType" : "CastExpression",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 104,
      "startColumnNumber" : 65,
      "endLineNumber" : 104,
      "endColumnNumber" : 84
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 104,
        "startColumnNumber" : 4,
        "endLineNumber" : 104,
        "endColumnNumber" : 85
      },
      "nodeContext" : "visitor.visitAnnotationOnType((JCClassDecl)up().get(),this,(JCAnnotation)get())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 104,
        "startColumnNumber" : 4,
        "endLineNumber" : 104,
        "endColumnNumber" : 86
      },
      "nodeContext" : "visitor.visitAnnotationOnType((JCClassDecl)up().get(),this,(JCAnnotation)get());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 826,
        "startLineNumber" : 102,
        "startColumnNumber" : 3,
        "endLineNumber" : 122,
        "endColumnNumber" : 4
      },
      "nodeContext" : "switch (up().getKind()) {\ncase TYPE:  visitor.visitAnnotationOnType((JCClassDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase FIELD:visitor.visitAnnotationOnField((JCVariableDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase METHOD:visitor.visitAnnotationOnMethod((JCMethodDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase ARGUMENT:JCVariableDecl argument=(JCVariableDecl)up().get();\nJCMethodDecl method=(JCMethodDecl)up().up().get();\nvisitor.visitAnnotationOnMethodArgument(argument,method,this,(JCAnnotation)get());\nbreak;\ncase LOCAL:visitor.visitAnnotationOnLocal((JCVariableDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ndefault:throw new AssertionError(\"Annotion not expected as child of a \" + up().getKind());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 137,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2469,
        "startLineNumber" : 59,
        "startColumnNumber" : 2,
        "endLineNumber" : 126,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (this.getKind()) {\ncase COMPILATION_UNIT:  visitor.visitCompilationUnit(this,(JCCompilationUnit)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitCompilationUnit(this,(JCCompilationUnit)get());\nbreak;\ncase TYPE:visitor.visitType(this,(JCClassDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitType(this,(JCClassDecl)get());\nbreak;\ncase FIELD:visitor.visitField(this,(JCVariableDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitField(this,(JCVariableDecl)get());\nbreak;\ncase METHOD:visitor.visitMethod(this,(JCMethodDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitMethod(this,(JCMethodDecl)get());\nbreak;\ncase INITIALIZER:visitor.visitInitializer(this,(JCBlock)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitInitializer(this,(JCBlock)get());\nbreak;\ncase ARGUMENT:JCMethodDecl parentMethod=(JCMethodDecl)up().get();\nvisitor.visitMethodArgument(this,(JCVariableDecl)get(),parentMethod);\nast.traverseChildren(visitor,this);\nvisitor.endVisitMethodArgument(this,(JCVariableDecl)get(),parentMethod);\nbreak;\ncase LOCAL:visitor.visitLocal(this,(JCVariableDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitLocal(this,(JCVariableDecl)get());\nbreak;\ncase STATEMENT:visitor.visitStatement(this,get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitStatement(this,get());\nbreak;\ncase ANNOTATION:switch (up().getKind()) {\ncase TYPE:visitor.visitAnnotationOnType((JCClassDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase FIELD:visitor.visitAnnotationOnField((JCVariableDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase METHOD:visitor.visitAnnotationOnMethod((JCMethodDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase ARGUMENT:JCVariableDecl argument=(JCVariableDecl)up().get();\nJCMethodDecl method=(JCMethodDecl)up().up().get();\nvisitor.visitAnnotationOnMethodArgument(argument,method,this,(JCAnnotation)get());\nbreak;\ncase LOCAL:visitor.visitAnnotationOnLocal((JCVariableDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ndefault:throw new AssertionError(\"Annotion not expected as child of a \" + up().getKind());\n}\nbreak;\ndefault:throw new AssertionError(\"Unexpected kind during node traversal: \" + getKind());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 393,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2476,
        "startLineNumber" : 58,
        "startColumnNumber" : 47,
        "endLineNumber" : 127,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (this.getKind()) {\ncase COMPILATION_UNIT:    visitor.visitCompilationUnit(this,(JCCompilationUnit)get());\n  ast.traverseChildren(visitor,this);\nvisitor.endVisitCompilationUnit(this,(JCCompilationUnit)get());\nbreak;\ncase TYPE:visitor.visitType(this,(JCClassDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitType(this,(JCClassDecl)get());\nbreak;\ncase FIELD:visitor.visitField(this,(JCVariableDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitField(this,(JCVariableDecl)get());\nbreak;\ncase METHOD:visitor.visitMethod(this,(JCMethodDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitMethod(this,(JCMethodDecl)get());\nbreak;\ncase INITIALIZER:visitor.visitInitializer(this,(JCBlock)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitInitializer(this,(JCBlock)get());\nbreak;\ncase ARGUMENT:JCMethodDecl parentMethod=(JCMethodDecl)up().get();\nvisitor.visitMethodArgument(this,(JCVariableDecl)get(),parentMethod);\nast.traverseChildren(visitor,this);\nvisitor.endVisitMethodArgument(this,(JCVariableDecl)get(),parentMethod);\nbreak;\ncase LOCAL:visitor.visitLocal(this,(JCVariableDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitLocal(this,(JCVariableDecl)get());\nbreak;\ncase STATEMENT:visitor.visitStatement(this,get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitStatement(this,get());\nbreak;\ncase ANNOTATION:switch (up().getKind()) {\ncase TYPE:visitor.visitAnnotationOnType((JCClassDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase FIELD:visitor.visitAnnotationOnField((JCVariableDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase METHOD:visitor.visitAnnotationOnMethod((JCMethodDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase ARGUMENT:JCVariableDecl argument=(JCVariableDecl)up().get();\nJCMethodDecl method=(JCMethodDecl)up().up().get();\nvisitor.visitAnnotationOnMethodArgument(argument,method,this,(JCAnnotation)get());\nbreak;\ncase LOCAL:visitor.visitAnnotationOnLocal((JCVariableDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ndefault:throw new AssertionError(\"Annotion not expected as child of a \" + up().getKind());\n}\nbreak;\ndefault:throw new AssertionError(\"Unexpected kind during node traversal: \" + getKind());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 394,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2632,
        "startLineNumber" : 55,
        "startColumnNumber" : 1,
        "endLineNumber" : 127,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Visits this node and all child nodes depth-first, calling the provided visitor's visit methods.\n */\npublic void traverse(JavacASTVisitor visitor){\nswitch (this.getKind()) {\ncase COMPILATION_UNIT:    visitor.visitCompilationUnit(this,(JCCompilationUnit)get());\n  ast.traverseChildren(visitor,this);\nvisitor.endVisitCompilationUnit(this,(JCCompilationUnit)get());\nbreak;\ncase TYPE:visitor.visitType(this,(JCClassDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitType(this,(JCClassDecl)get());\nbreak;\ncase FIELD:visitor.visitField(this,(JCVariableDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitField(this,(JCVariableDecl)get());\nbreak;\ncase METHOD:visitor.visitMethod(this,(JCMethodDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitMethod(this,(JCMethodDecl)get());\nbreak;\ncase INITIALIZER:visitor.visitInitializer(this,(JCBlock)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitInitializer(this,(JCBlock)get());\nbreak;\ncase ARGUMENT:JCMethodDecl parentMethod=(JCMethodDecl)up().get();\nvisitor.visitMethodArgument(this,(JCVariableDecl)get(),parentMethod);\nast.traverseChildren(visitor,this);\nvisitor.endVisitMethodArgument(this,(JCVariableDecl)get(),parentMethod);\nbreak;\ncase LOCAL:visitor.visitLocal(this,(JCVariableDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitLocal(this,(JCVariableDecl)get());\nbreak;\ncase STATEMENT:visitor.visitStatement(this,get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitStatement(this,get());\nbreak;\ncase ANNOTATION:switch (up().getKind()) {\ncase TYPE:visitor.visitAnnotationOnType((JCClassDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase FIELD:visitor.visitAnnotationOnField((JCVariableDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase METHOD:visitor.visitAnnotationOnMethod((JCMethodDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase ARGUMENT:JCVariableDecl argument=(JCVariableDecl)up().get();\nJCMethodDecl method=(JCMethodDecl)up().up().get();\nvisitor.visitAnnotationOnMethodArgument(argument,method,this,(JCAnnotation)get());\nbreak;\ncase LOCAL:visitor.visitAnnotationOnLocal((JCVariableDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ndefault:throw new AssertionError(\"Annotion not expected as child of a \" + up().getKind());\n}\nbreak;\ndefault:throw new AssertionError(\"Unexpected kind during node traversal: \" + getKind());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 403,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 104,
        "startColumnNumber" : 4,
        "endLineNumber" : 104,
        "endColumnNumber" : 86
      },
      "nodeContext" : "visitor.visitAnnotationOnType((JCClassDecl)up().get(),this,(JCAnnotation)get());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "lombok.javac.JCAnnotation"
  }, {
    "nodeContext" : "(JCAnnotation)get()",
    "nodeType" : "CastExpression",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 107,
      "startColumnNumber" : 69,
      "endLineNumber" : 107,
      "endColumnNumber" : 88
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 107,
        "startColumnNumber" : 4,
        "endLineNumber" : 107,
        "endColumnNumber" : 89
      },
      "nodeContext" : "visitor.visitAnnotationOnField((JCVariableDecl)up().get(),this,(JCAnnotation)get())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 107,
        "startColumnNumber" : 4,
        "endLineNumber" : 107,
        "endColumnNumber" : 90
      },
      "nodeContext" : "visitor.visitAnnotationOnField((JCVariableDecl)up().get(),this,(JCAnnotation)get());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 826,
        "startLineNumber" : 102,
        "startColumnNumber" : 3,
        "endLineNumber" : 122,
        "endColumnNumber" : 4
      },
      "nodeContext" : "switch (up().getKind()) {\ncase TYPE:  visitor.visitAnnotationOnType((JCClassDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase FIELD:visitor.visitAnnotationOnField((JCVariableDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase METHOD:visitor.visitAnnotationOnMethod((JCMethodDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase ARGUMENT:JCVariableDecl argument=(JCVariableDecl)up().get();\nJCMethodDecl method=(JCMethodDecl)up().up().get();\nvisitor.visitAnnotationOnMethodArgument(argument,method,this,(JCAnnotation)get());\nbreak;\ncase LOCAL:visitor.visitAnnotationOnLocal((JCVariableDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ndefault:throw new AssertionError(\"Annotion not expected as child of a \" + up().getKind());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 137,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2469,
        "startLineNumber" : 59,
        "startColumnNumber" : 2,
        "endLineNumber" : 126,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (this.getKind()) {\ncase COMPILATION_UNIT:  visitor.visitCompilationUnit(this,(JCCompilationUnit)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitCompilationUnit(this,(JCCompilationUnit)get());\nbreak;\ncase TYPE:visitor.visitType(this,(JCClassDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitType(this,(JCClassDecl)get());\nbreak;\ncase FIELD:visitor.visitField(this,(JCVariableDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitField(this,(JCVariableDecl)get());\nbreak;\ncase METHOD:visitor.visitMethod(this,(JCMethodDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitMethod(this,(JCMethodDecl)get());\nbreak;\ncase INITIALIZER:visitor.visitInitializer(this,(JCBlock)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitInitializer(this,(JCBlock)get());\nbreak;\ncase ARGUMENT:JCMethodDecl parentMethod=(JCMethodDecl)up().get();\nvisitor.visitMethodArgument(this,(JCVariableDecl)get(),parentMethod);\nast.traverseChildren(visitor,this);\nvisitor.endVisitMethodArgument(this,(JCVariableDecl)get(),parentMethod);\nbreak;\ncase LOCAL:visitor.visitLocal(this,(JCVariableDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitLocal(this,(JCVariableDecl)get());\nbreak;\ncase STATEMENT:visitor.visitStatement(this,get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitStatement(this,get());\nbreak;\ncase ANNOTATION:switch (up().getKind()) {\ncase TYPE:visitor.visitAnnotationOnType((JCClassDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase FIELD:visitor.visitAnnotationOnField((JCVariableDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase METHOD:visitor.visitAnnotationOnMethod((JCMethodDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase ARGUMENT:JCVariableDecl argument=(JCVariableDecl)up().get();\nJCMethodDecl method=(JCMethodDecl)up().up().get();\nvisitor.visitAnnotationOnMethodArgument(argument,method,this,(JCAnnotation)get());\nbreak;\ncase LOCAL:visitor.visitAnnotationOnLocal((JCVariableDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ndefault:throw new AssertionError(\"Annotion not expected as child of a \" + up().getKind());\n}\nbreak;\ndefault:throw new AssertionError(\"Unexpected kind during node traversal: \" + getKind());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 393,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2476,
        "startLineNumber" : 58,
        "startColumnNumber" : 47,
        "endLineNumber" : 127,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (this.getKind()) {\ncase COMPILATION_UNIT:    visitor.visitCompilationUnit(this,(JCCompilationUnit)get());\n  ast.traverseChildren(visitor,this);\nvisitor.endVisitCompilationUnit(this,(JCCompilationUnit)get());\nbreak;\ncase TYPE:visitor.visitType(this,(JCClassDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitType(this,(JCClassDecl)get());\nbreak;\ncase FIELD:visitor.visitField(this,(JCVariableDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitField(this,(JCVariableDecl)get());\nbreak;\ncase METHOD:visitor.visitMethod(this,(JCMethodDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitMethod(this,(JCMethodDecl)get());\nbreak;\ncase INITIALIZER:visitor.visitInitializer(this,(JCBlock)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitInitializer(this,(JCBlock)get());\nbreak;\ncase ARGUMENT:JCMethodDecl parentMethod=(JCMethodDecl)up().get();\nvisitor.visitMethodArgument(this,(JCVariableDecl)get(),parentMethod);\nast.traverseChildren(visitor,this);\nvisitor.endVisitMethodArgument(this,(JCVariableDecl)get(),parentMethod);\nbreak;\ncase LOCAL:visitor.visitLocal(this,(JCVariableDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitLocal(this,(JCVariableDecl)get());\nbreak;\ncase STATEMENT:visitor.visitStatement(this,get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitStatement(this,get());\nbreak;\ncase ANNOTATION:switch (up().getKind()) {\ncase TYPE:visitor.visitAnnotationOnType((JCClassDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase FIELD:visitor.visitAnnotationOnField((JCVariableDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase METHOD:visitor.visitAnnotationOnMethod((JCMethodDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase ARGUMENT:JCVariableDecl argument=(JCVariableDecl)up().get();\nJCMethodDecl method=(JCMethodDecl)up().up().get();\nvisitor.visitAnnotationOnMethodArgument(argument,method,this,(JCAnnotation)get());\nbreak;\ncase LOCAL:visitor.visitAnnotationOnLocal((JCVariableDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ndefault:throw new AssertionError(\"Annotion not expected as child of a \" + up().getKind());\n}\nbreak;\ndefault:throw new AssertionError(\"Unexpected kind during node traversal: \" + getKind());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 394,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2632,
        "startLineNumber" : 55,
        "startColumnNumber" : 1,
        "endLineNumber" : 127,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Visits this node and all child nodes depth-first, calling the provided visitor's visit methods.\n */\npublic void traverse(JavacASTVisitor visitor){\nswitch (this.getKind()) {\ncase COMPILATION_UNIT:    visitor.visitCompilationUnit(this,(JCCompilationUnit)get());\n  ast.traverseChildren(visitor,this);\nvisitor.endVisitCompilationUnit(this,(JCCompilationUnit)get());\nbreak;\ncase TYPE:visitor.visitType(this,(JCClassDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitType(this,(JCClassDecl)get());\nbreak;\ncase FIELD:visitor.visitField(this,(JCVariableDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitField(this,(JCVariableDecl)get());\nbreak;\ncase METHOD:visitor.visitMethod(this,(JCMethodDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitMethod(this,(JCMethodDecl)get());\nbreak;\ncase INITIALIZER:visitor.visitInitializer(this,(JCBlock)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitInitializer(this,(JCBlock)get());\nbreak;\ncase ARGUMENT:JCMethodDecl parentMethod=(JCMethodDecl)up().get();\nvisitor.visitMethodArgument(this,(JCVariableDecl)get(),parentMethod);\nast.traverseChildren(visitor,this);\nvisitor.endVisitMethodArgument(this,(JCVariableDecl)get(),parentMethod);\nbreak;\ncase LOCAL:visitor.visitLocal(this,(JCVariableDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitLocal(this,(JCVariableDecl)get());\nbreak;\ncase STATEMENT:visitor.visitStatement(this,get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitStatement(this,get());\nbreak;\ncase ANNOTATION:switch (up().getKind()) {\ncase TYPE:visitor.visitAnnotationOnType((JCClassDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase FIELD:visitor.visitAnnotationOnField((JCVariableDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase METHOD:visitor.visitAnnotationOnMethod((JCMethodDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase ARGUMENT:JCVariableDecl argument=(JCVariableDecl)up().get();\nJCMethodDecl method=(JCMethodDecl)up().up().get();\nvisitor.visitAnnotationOnMethodArgument(argument,method,this,(JCAnnotation)get());\nbreak;\ncase LOCAL:visitor.visitAnnotationOnLocal((JCVariableDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ndefault:throw new AssertionError(\"Annotion not expected as child of a \" + up().getKind());\n}\nbreak;\ndefault:throw new AssertionError(\"Unexpected kind during node traversal: \" + getKind());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 403,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 107,
        "startColumnNumber" : 4,
        "endLineNumber" : 107,
        "endColumnNumber" : 90
      },
      "nodeContext" : "visitor.visitAnnotationOnField((JCVariableDecl)up().get(),this,(JCAnnotation)get());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "lombok.javac.JCAnnotation"
  }, {
    "nodeContext" : "(JCAnnotation)get()",
    "nodeType" : "CastExpression",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 110,
      "startColumnNumber" : 68,
      "endLineNumber" : 110,
      "endColumnNumber" : 87
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 110,
        "startColumnNumber" : 4,
        "endLineNumber" : 110,
        "endColumnNumber" : 88
      },
      "nodeContext" : "visitor.visitAnnotationOnMethod((JCMethodDecl)up().get(),this,(JCAnnotation)get())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 110,
        "startColumnNumber" : 4,
        "endLineNumber" : 110,
        "endColumnNumber" : 89
      },
      "nodeContext" : "visitor.visitAnnotationOnMethod((JCMethodDecl)up().get(),this,(JCAnnotation)get());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 826,
        "startLineNumber" : 102,
        "startColumnNumber" : 3,
        "endLineNumber" : 122,
        "endColumnNumber" : 4
      },
      "nodeContext" : "switch (up().getKind()) {\ncase TYPE:  visitor.visitAnnotationOnType((JCClassDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase FIELD:visitor.visitAnnotationOnField((JCVariableDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase METHOD:visitor.visitAnnotationOnMethod((JCMethodDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase ARGUMENT:JCVariableDecl argument=(JCVariableDecl)up().get();\nJCMethodDecl method=(JCMethodDecl)up().up().get();\nvisitor.visitAnnotationOnMethodArgument(argument,method,this,(JCAnnotation)get());\nbreak;\ncase LOCAL:visitor.visitAnnotationOnLocal((JCVariableDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ndefault:throw new AssertionError(\"Annotion not expected as child of a \" + up().getKind());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 137,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2469,
        "startLineNumber" : 59,
        "startColumnNumber" : 2,
        "endLineNumber" : 126,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (this.getKind()) {\ncase COMPILATION_UNIT:  visitor.visitCompilationUnit(this,(JCCompilationUnit)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitCompilationUnit(this,(JCCompilationUnit)get());\nbreak;\ncase TYPE:visitor.visitType(this,(JCClassDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitType(this,(JCClassDecl)get());\nbreak;\ncase FIELD:visitor.visitField(this,(JCVariableDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitField(this,(JCVariableDecl)get());\nbreak;\ncase METHOD:visitor.visitMethod(this,(JCMethodDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitMethod(this,(JCMethodDecl)get());\nbreak;\ncase INITIALIZER:visitor.visitInitializer(this,(JCBlock)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitInitializer(this,(JCBlock)get());\nbreak;\ncase ARGUMENT:JCMethodDecl parentMethod=(JCMethodDecl)up().get();\nvisitor.visitMethodArgument(this,(JCVariableDecl)get(),parentMethod);\nast.traverseChildren(visitor,this);\nvisitor.endVisitMethodArgument(this,(JCVariableDecl)get(),parentMethod);\nbreak;\ncase LOCAL:visitor.visitLocal(this,(JCVariableDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitLocal(this,(JCVariableDecl)get());\nbreak;\ncase STATEMENT:visitor.visitStatement(this,get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitStatement(this,get());\nbreak;\ncase ANNOTATION:switch (up().getKind()) {\ncase TYPE:visitor.visitAnnotationOnType((JCClassDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase FIELD:visitor.visitAnnotationOnField((JCVariableDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase METHOD:visitor.visitAnnotationOnMethod((JCMethodDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase ARGUMENT:JCVariableDecl argument=(JCVariableDecl)up().get();\nJCMethodDecl method=(JCMethodDecl)up().up().get();\nvisitor.visitAnnotationOnMethodArgument(argument,method,this,(JCAnnotation)get());\nbreak;\ncase LOCAL:visitor.visitAnnotationOnLocal((JCVariableDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ndefault:throw new AssertionError(\"Annotion not expected as child of a \" + up().getKind());\n}\nbreak;\ndefault:throw new AssertionError(\"Unexpected kind during node traversal: \" + getKind());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 393,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2476,
        "startLineNumber" : 58,
        "startColumnNumber" : 47,
        "endLineNumber" : 127,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (this.getKind()) {\ncase COMPILATION_UNIT:    visitor.visitCompilationUnit(this,(JCCompilationUnit)get());\n  ast.traverseChildren(visitor,this);\nvisitor.endVisitCompilationUnit(this,(JCCompilationUnit)get());\nbreak;\ncase TYPE:visitor.visitType(this,(JCClassDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitType(this,(JCClassDecl)get());\nbreak;\ncase FIELD:visitor.visitField(this,(JCVariableDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitField(this,(JCVariableDecl)get());\nbreak;\ncase METHOD:visitor.visitMethod(this,(JCMethodDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitMethod(this,(JCMethodDecl)get());\nbreak;\ncase INITIALIZER:visitor.visitInitializer(this,(JCBlock)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitInitializer(this,(JCBlock)get());\nbreak;\ncase ARGUMENT:JCMethodDecl parentMethod=(JCMethodDecl)up().get();\nvisitor.visitMethodArgument(this,(JCVariableDecl)get(),parentMethod);\nast.traverseChildren(visitor,this);\nvisitor.endVisitMethodArgument(this,(JCVariableDecl)get(),parentMethod);\nbreak;\ncase LOCAL:visitor.visitLocal(this,(JCVariableDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitLocal(this,(JCVariableDecl)get());\nbreak;\ncase STATEMENT:visitor.visitStatement(this,get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitStatement(this,get());\nbreak;\ncase ANNOTATION:switch (up().getKind()) {\ncase TYPE:visitor.visitAnnotationOnType((JCClassDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase FIELD:visitor.visitAnnotationOnField((JCVariableDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase METHOD:visitor.visitAnnotationOnMethod((JCMethodDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase ARGUMENT:JCVariableDecl argument=(JCVariableDecl)up().get();\nJCMethodDecl method=(JCMethodDecl)up().up().get();\nvisitor.visitAnnotationOnMethodArgument(argument,method,this,(JCAnnotation)get());\nbreak;\ncase LOCAL:visitor.visitAnnotationOnLocal((JCVariableDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ndefault:throw new AssertionError(\"Annotion not expected as child of a \" + up().getKind());\n}\nbreak;\ndefault:throw new AssertionError(\"Unexpected kind during node traversal: \" + getKind());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 394,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2632,
        "startLineNumber" : 55,
        "startColumnNumber" : 1,
        "endLineNumber" : 127,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Visits this node and all child nodes depth-first, calling the provided visitor's visit methods.\n */\npublic void traverse(JavacASTVisitor visitor){\nswitch (this.getKind()) {\ncase COMPILATION_UNIT:    visitor.visitCompilationUnit(this,(JCCompilationUnit)get());\n  ast.traverseChildren(visitor,this);\nvisitor.endVisitCompilationUnit(this,(JCCompilationUnit)get());\nbreak;\ncase TYPE:visitor.visitType(this,(JCClassDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitType(this,(JCClassDecl)get());\nbreak;\ncase FIELD:visitor.visitField(this,(JCVariableDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitField(this,(JCVariableDecl)get());\nbreak;\ncase METHOD:visitor.visitMethod(this,(JCMethodDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitMethod(this,(JCMethodDecl)get());\nbreak;\ncase INITIALIZER:visitor.visitInitializer(this,(JCBlock)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitInitializer(this,(JCBlock)get());\nbreak;\ncase ARGUMENT:JCMethodDecl parentMethod=(JCMethodDecl)up().get();\nvisitor.visitMethodArgument(this,(JCVariableDecl)get(),parentMethod);\nast.traverseChildren(visitor,this);\nvisitor.endVisitMethodArgument(this,(JCVariableDecl)get(),parentMethod);\nbreak;\ncase LOCAL:visitor.visitLocal(this,(JCVariableDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitLocal(this,(JCVariableDecl)get());\nbreak;\ncase STATEMENT:visitor.visitStatement(this,get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitStatement(this,get());\nbreak;\ncase ANNOTATION:switch (up().getKind()) {\ncase TYPE:visitor.visitAnnotationOnType((JCClassDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase FIELD:visitor.visitAnnotationOnField((JCVariableDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase METHOD:visitor.visitAnnotationOnMethod((JCMethodDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase ARGUMENT:JCVariableDecl argument=(JCVariableDecl)up().get();\nJCMethodDecl method=(JCMethodDecl)up().up().get();\nvisitor.visitAnnotationOnMethodArgument(argument,method,this,(JCAnnotation)get());\nbreak;\ncase LOCAL:visitor.visitAnnotationOnLocal((JCVariableDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ndefault:throw new AssertionError(\"Annotion not expected as child of a \" + up().getKind());\n}\nbreak;\ndefault:throw new AssertionError(\"Unexpected kind during node traversal: \" + getKind());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 403,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 110,
        "startColumnNumber" : 4,
        "endLineNumber" : 110,
        "endColumnNumber" : 89
      },
      "nodeContext" : "visitor.visitAnnotationOnMethod((JCMethodDecl)up().get(),this,(JCAnnotation)get());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "lombok.javac.JCAnnotation"
  }, {
    "nodeContext" : "(JCAnnotation)get()",
    "nodeType" : "CastExpression",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 115,
      "startColumnNumber" : 68,
      "endLineNumber" : 115,
      "endColumnNumber" : 87
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 115,
        "startColumnNumber" : 4,
        "endLineNumber" : 115,
        "endColumnNumber" : 88
      },
      "nodeContext" : "visitor.visitAnnotationOnMethodArgument(argument,method,this,(JCAnnotation)get())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 115,
        "startColumnNumber" : 4,
        "endLineNumber" : 115,
        "endColumnNumber" : 89
      },
      "nodeContext" : "visitor.visitAnnotationOnMethodArgument(argument,method,this,(JCAnnotation)get());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 826,
        "startLineNumber" : 102,
        "startColumnNumber" : 3,
        "endLineNumber" : 122,
        "endColumnNumber" : 4
      },
      "nodeContext" : "switch (up().getKind()) {\ncase TYPE:  visitor.visitAnnotationOnType((JCClassDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase FIELD:visitor.visitAnnotationOnField((JCVariableDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase METHOD:visitor.visitAnnotationOnMethod((JCMethodDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase ARGUMENT:JCVariableDecl argument=(JCVariableDecl)up().get();\nJCMethodDecl method=(JCMethodDecl)up().up().get();\nvisitor.visitAnnotationOnMethodArgument(argument,method,this,(JCAnnotation)get());\nbreak;\ncase LOCAL:visitor.visitAnnotationOnLocal((JCVariableDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ndefault:throw new AssertionError(\"Annotion not expected as child of a \" + up().getKind());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 137,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2469,
        "startLineNumber" : 59,
        "startColumnNumber" : 2,
        "endLineNumber" : 126,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (this.getKind()) {\ncase COMPILATION_UNIT:  visitor.visitCompilationUnit(this,(JCCompilationUnit)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitCompilationUnit(this,(JCCompilationUnit)get());\nbreak;\ncase TYPE:visitor.visitType(this,(JCClassDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitType(this,(JCClassDecl)get());\nbreak;\ncase FIELD:visitor.visitField(this,(JCVariableDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitField(this,(JCVariableDecl)get());\nbreak;\ncase METHOD:visitor.visitMethod(this,(JCMethodDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitMethod(this,(JCMethodDecl)get());\nbreak;\ncase INITIALIZER:visitor.visitInitializer(this,(JCBlock)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitInitializer(this,(JCBlock)get());\nbreak;\ncase ARGUMENT:JCMethodDecl parentMethod=(JCMethodDecl)up().get();\nvisitor.visitMethodArgument(this,(JCVariableDecl)get(),parentMethod);\nast.traverseChildren(visitor,this);\nvisitor.endVisitMethodArgument(this,(JCVariableDecl)get(),parentMethod);\nbreak;\ncase LOCAL:visitor.visitLocal(this,(JCVariableDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitLocal(this,(JCVariableDecl)get());\nbreak;\ncase STATEMENT:visitor.visitStatement(this,get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitStatement(this,get());\nbreak;\ncase ANNOTATION:switch (up().getKind()) {\ncase TYPE:visitor.visitAnnotationOnType((JCClassDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase FIELD:visitor.visitAnnotationOnField((JCVariableDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase METHOD:visitor.visitAnnotationOnMethod((JCMethodDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase ARGUMENT:JCVariableDecl argument=(JCVariableDecl)up().get();\nJCMethodDecl method=(JCMethodDecl)up().up().get();\nvisitor.visitAnnotationOnMethodArgument(argument,method,this,(JCAnnotation)get());\nbreak;\ncase LOCAL:visitor.visitAnnotationOnLocal((JCVariableDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ndefault:throw new AssertionError(\"Annotion not expected as child of a \" + up().getKind());\n}\nbreak;\ndefault:throw new AssertionError(\"Unexpected kind during node traversal: \" + getKind());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 393,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2476,
        "startLineNumber" : 58,
        "startColumnNumber" : 47,
        "endLineNumber" : 127,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (this.getKind()) {\ncase COMPILATION_UNIT:    visitor.visitCompilationUnit(this,(JCCompilationUnit)get());\n  ast.traverseChildren(visitor,this);\nvisitor.endVisitCompilationUnit(this,(JCCompilationUnit)get());\nbreak;\ncase TYPE:visitor.visitType(this,(JCClassDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitType(this,(JCClassDecl)get());\nbreak;\ncase FIELD:visitor.visitField(this,(JCVariableDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitField(this,(JCVariableDecl)get());\nbreak;\ncase METHOD:visitor.visitMethod(this,(JCMethodDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitMethod(this,(JCMethodDecl)get());\nbreak;\ncase INITIALIZER:visitor.visitInitializer(this,(JCBlock)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitInitializer(this,(JCBlock)get());\nbreak;\ncase ARGUMENT:JCMethodDecl parentMethod=(JCMethodDecl)up().get();\nvisitor.visitMethodArgument(this,(JCVariableDecl)get(),parentMethod);\nast.traverseChildren(visitor,this);\nvisitor.endVisitMethodArgument(this,(JCVariableDecl)get(),parentMethod);\nbreak;\ncase LOCAL:visitor.visitLocal(this,(JCVariableDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitLocal(this,(JCVariableDecl)get());\nbreak;\ncase STATEMENT:visitor.visitStatement(this,get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitStatement(this,get());\nbreak;\ncase ANNOTATION:switch (up().getKind()) {\ncase TYPE:visitor.visitAnnotationOnType((JCClassDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase FIELD:visitor.visitAnnotationOnField((JCVariableDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase METHOD:visitor.visitAnnotationOnMethod((JCMethodDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase ARGUMENT:JCVariableDecl argument=(JCVariableDecl)up().get();\nJCMethodDecl method=(JCMethodDecl)up().up().get();\nvisitor.visitAnnotationOnMethodArgument(argument,method,this,(JCAnnotation)get());\nbreak;\ncase LOCAL:visitor.visitAnnotationOnLocal((JCVariableDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ndefault:throw new AssertionError(\"Annotion not expected as child of a \" + up().getKind());\n}\nbreak;\ndefault:throw new AssertionError(\"Unexpected kind during node traversal: \" + getKind());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 394,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2632,
        "startLineNumber" : 55,
        "startColumnNumber" : 1,
        "endLineNumber" : 127,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Visits this node and all child nodes depth-first, calling the provided visitor's visit methods.\n */\npublic void traverse(JavacASTVisitor visitor){\nswitch (this.getKind()) {\ncase COMPILATION_UNIT:    visitor.visitCompilationUnit(this,(JCCompilationUnit)get());\n  ast.traverseChildren(visitor,this);\nvisitor.endVisitCompilationUnit(this,(JCCompilationUnit)get());\nbreak;\ncase TYPE:visitor.visitType(this,(JCClassDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitType(this,(JCClassDecl)get());\nbreak;\ncase FIELD:visitor.visitField(this,(JCVariableDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitField(this,(JCVariableDecl)get());\nbreak;\ncase METHOD:visitor.visitMethod(this,(JCMethodDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitMethod(this,(JCMethodDecl)get());\nbreak;\ncase INITIALIZER:visitor.visitInitializer(this,(JCBlock)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitInitializer(this,(JCBlock)get());\nbreak;\ncase ARGUMENT:JCMethodDecl parentMethod=(JCMethodDecl)up().get();\nvisitor.visitMethodArgument(this,(JCVariableDecl)get(),parentMethod);\nast.traverseChildren(visitor,this);\nvisitor.endVisitMethodArgument(this,(JCVariableDecl)get(),parentMethod);\nbreak;\ncase LOCAL:visitor.visitLocal(this,(JCVariableDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitLocal(this,(JCVariableDecl)get());\nbreak;\ncase STATEMENT:visitor.visitStatement(this,get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitStatement(this,get());\nbreak;\ncase ANNOTATION:switch (up().getKind()) {\ncase TYPE:visitor.visitAnnotationOnType((JCClassDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase FIELD:visitor.visitAnnotationOnField((JCVariableDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase METHOD:visitor.visitAnnotationOnMethod((JCMethodDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase ARGUMENT:JCVariableDecl argument=(JCVariableDecl)up().get();\nJCMethodDecl method=(JCMethodDecl)up().up().get();\nvisitor.visitAnnotationOnMethodArgument(argument,method,this,(JCAnnotation)get());\nbreak;\ncase LOCAL:visitor.visitAnnotationOnLocal((JCVariableDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ndefault:throw new AssertionError(\"Annotion not expected as child of a \" + up().getKind());\n}\nbreak;\ndefault:throw new AssertionError(\"Unexpected kind during node traversal: \" + getKind());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 403,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 115,
        "startColumnNumber" : 4,
        "endLineNumber" : 115,
        "endColumnNumber" : 89
      },
      "nodeContext" : "visitor.visitAnnotationOnMethodArgument(argument,method,this,(JCAnnotation)get());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "lombok.javac.JCAnnotation"
  }, {
    "nodeContext" : "(JCAnnotation)get()",
    "nodeType" : "CastExpression",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 118,
      "startColumnNumber" : 69,
      "endLineNumber" : 118,
      "endColumnNumber" : 88
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 118,
        "startColumnNumber" : 4,
        "endLineNumber" : 118,
        "endColumnNumber" : 89
      },
      "nodeContext" : "visitor.visitAnnotationOnLocal((JCVariableDecl)up().get(),this,(JCAnnotation)get())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 118,
        "startColumnNumber" : 4,
        "endLineNumber" : 118,
        "endColumnNumber" : 90
      },
      "nodeContext" : "visitor.visitAnnotationOnLocal((JCVariableDecl)up().get(),this,(JCAnnotation)get());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 826,
        "startLineNumber" : 102,
        "startColumnNumber" : 3,
        "endLineNumber" : 122,
        "endColumnNumber" : 4
      },
      "nodeContext" : "switch (up().getKind()) {\ncase TYPE:  visitor.visitAnnotationOnType((JCClassDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase FIELD:visitor.visitAnnotationOnField((JCVariableDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase METHOD:visitor.visitAnnotationOnMethod((JCMethodDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase ARGUMENT:JCVariableDecl argument=(JCVariableDecl)up().get();\nJCMethodDecl method=(JCMethodDecl)up().up().get();\nvisitor.visitAnnotationOnMethodArgument(argument,method,this,(JCAnnotation)get());\nbreak;\ncase LOCAL:visitor.visitAnnotationOnLocal((JCVariableDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ndefault:throw new AssertionError(\"Annotion not expected as child of a \" + up().getKind());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 137,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2469,
        "startLineNumber" : 59,
        "startColumnNumber" : 2,
        "endLineNumber" : 126,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (this.getKind()) {\ncase COMPILATION_UNIT:  visitor.visitCompilationUnit(this,(JCCompilationUnit)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitCompilationUnit(this,(JCCompilationUnit)get());\nbreak;\ncase TYPE:visitor.visitType(this,(JCClassDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitType(this,(JCClassDecl)get());\nbreak;\ncase FIELD:visitor.visitField(this,(JCVariableDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitField(this,(JCVariableDecl)get());\nbreak;\ncase METHOD:visitor.visitMethod(this,(JCMethodDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitMethod(this,(JCMethodDecl)get());\nbreak;\ncase INITIALIZER:visitor.visitInitializer(this,(JCBlock)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitInitializer(this,(JCBlock)get());\nbreak;\ncase ARGUMENT:JCMethodDecl parentMethod=(JCMethodDecl)up().get();\nvisitor.visitMethodArgument(this,(JCVariableDecl)get(),parentMethod);\nast.traverseChildren(visitor,this);\nvisitor.endVisitMethodArgument(this,(JCVariableDecl)get(),parentMethod);\nbreak;\ncase LOCAL:visitor.visitLocal(this,(JCVariableDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitLocal(this,(JCVariableDecl)get());\nbreak;\ncase STATEMENT:visitor.visitStatement(this,get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitStatement(this,get());\nbreak;\ncase ANNOTATION:switch (up().getKind()) {\ncase TYPE:visitor.visitAnnotationOnType((JCClassDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase FIELD:visitor.visitAnnotationOnField((JCVariableDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase METHOD:visitor.visitAnnotationOnMethod((JCMethodDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase ARGUMENT:JCVariableDecl argument=(JCVariableDecl)up().get();\nJCMethodDecl method=(JCMethodDecl)up().up().get();\nvisitor.visitAnnotationOnMethodArgument(argument,method,this,(JCAnnotation)get());\nbreak;\ncase LOCAL:visitor.visitAnnotationOnLocal((JCVariableDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ndefault:throw new AssertionError(\"Annotion not expected as child of a \" + up().getKind());\n}\nbreak;\ndefault:throw new AssertionError(\"Unexpected kind during node traversal: \" + getKind());\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 393,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2476,
        "startLineNumber" : 58,
        "startColumnNumber" : 47,
        "endLineNumber" : 127,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\nswitch (this.getKind()) {\ncase COMPILATION_UNIT:    visitor.visitCompilationUnit(this,(JCCompilationUnit)get());\n  ast.traverseChildren(visitor,this);\nvisitor.endVisitCompilationUnit(this,(JCCompilationUnit)get());\nbreak;\ncase TYPE:visitor.visitType(this,(JCClassDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitType(this,(JCClassDecl)get());\nbreak;\ncase FIELD:visitor.visitField(this,(JCVariableDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitField(this,(JCVariableDecl)get());\nbreak;\ncase METHOD:visitor.visitMethod(this,(JCMethodDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitMethod(this,(JCMethodDecl)get());\nbreak;\ncase INITIALIZER:visitor.visitInitializer(this,(JCBlock)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitInitializer(this,(JCBlock)get());\nbreak;\ncase ARGUMENT:JCMethodDecl parentMethod=(JCMethodDecl)up().get();\nvisitor.visitMethodArgument(this,(JCVariableDecl)get(),parentMethod);\nast.traverseChildren(visitor,this);\nvisitor.endVisitMethodArgument(this,(JCVariableDecl)get(),parentMethod);\nbreak;\ncase LOCAL:visitor.visitLocal(this,(JCVariableDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitLocal(this,(JCVariableDecl)get());\nbreak;\ncase STATEMENT:visitor.visitStatement(this,get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitStatement(this,get());\nbreak;\ncase ANNOTATION:switch (up().getKind()) {\ncase TYPE:visitor.visitAnnotationOnType((JCClassDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase FIELD:visitor.visitAnnotationOnField((JCVariableDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase METHOD:visitor.visitAnnotationOnMethod((JCMethodDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase ARGUMENT:JCVariableDecl argument=(JCVariableDecl)up().get();\nJCMethodDecl method=(JCMethodDecl)up().up().get();\nvisitor.visitAnnotationOnMethodArgument(argument,method,this,(JCAnnotation)get());\nbreak;\ncase LOCAL:visitor.visitAnnotationOnLocal((JCVariableDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ndefault:throw new AssertionError(\"Annotion not expected as child of a \" + up().getKind());\n}\nbreak;\ndefault:throw new AssertionError(\"Unexpected kind during node traversal: \" + getKind());\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 394,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2632,
        "startLineNumber" : 55,
        "startColumnNumber" : 1,
        "endLineNumber" : 127,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Visits this node and all child nodes depth-first, calling the provided visitor's visit methods.\n */\npublic void traverse(JavacASTVisitor visitor){\nswitch (this.getKind()) {\ncase COMPILATION_UNIT:    visitor.visitCompilationUnit(this,(JCCompilationUnit)get());\n  ast.traverseChildren(visitor,this);\nvisitor.endVisitCompilationUnit(this,(JCCompilationUnit)get());\nbreak;\ncase TYPE:visitor.visitType(this,(JCClassDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitType(this,(JCClassDecl)get());\nbreak;\ncase FIELD:visitor.visitField(this,(JCVariableDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitField(this,(JCVariableDecl)get());\nbreak;\ncase METHOD:visitor.visitMethod(this,(JCMethodDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitMethod(this,(JCMethodDecl)get());\nbreak;\ncase INITIALIZER:visitor.visitInitializer(this,(JCBlock)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitInitializer(this,(JCBlock)get());\nbreak;\ncase ARGUMENT:JCMethodDecl parentMethod=(JCMethodDecl)up().get();\nvisitor.visitMethodArgument(this,(JCVariableDecl)get(),parentMethod);\nast.traverseChildren(visitor,this);\nvisitor.endVisitMethodArgument(this,(JCVariableDecl)get(),parentMethod);\nbreak;\ncase LOCAL:visitor.visitLocal(this,(JCVariableDecl)get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitLocal(this,(JCVariableDecl)get());\nbreak;\ncase STATEMENT:visitor.visitStatement(this,get());\nast.traverseChildren(visitor,this);\nvisitor.endVisitStatement(this,get());\nbreak;\ncase ANNOTATION:switch (up().getKind()) {\ncase TYPE:visitor.visitAnnotationOnType((JCClassDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase FIELD:visitor.visitAnnotationOnField((JCVariableDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase METHOD:visitor.visitAnnotationOnMethod((JCMethodDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ncase ARGUMENT:JCVariableDecl argument=(JCVariableDecl)up().get();\nJCMethodDecl method=(JCMethodDecl)up().up().get();\nvisitor.visitAnnotationOnMethodArgument(argument,method,this,(JCAnnotation)get());\nbreak;\ncase LOCAL:visitor.visitAnnotationOnLocal((JCVariableDecl)up().get(),this,(JCAnnotation)get());\nbreak;\ndefault:throw new AssertionError(\"Annotion not expected as child of a \" + up().getKind());\n}\nbreak;\ndefault:throw new AssertionError(\"Unexpected kind during node traversal: \" + getKind());\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 403,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 118,
        "startColumnNumber" : 4,
        "endLineNumber" : 118,
        "endColumnNumber" : 90
      },
      "nodeContext" : "visitor.visitAnnotationOnLocal((JCVariableDecl)up().get(),this,(JCAnnotation)get());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "lombok.javac.JCAnnotation"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 104,
    "startColumnNumber" : 65,
    "endLineNumber" : 104,
    "endColumnNumber" : 84
  }, {
    "charLength" : 19,
    "startLineNumber" : 107,
    "startColumnNumber" : 69,
    "endLineNumber" : 107,
    "endColumnNumber" : 88
  }, {
    "charLength" : 19,
    "startLineNumber" : 110,
    "startColumnNumber" : 68,
    "endLineNumber" : 110,
    "endColumnNumber" : 87
  }, {
    "charLength" : 19,
    "startLineNumber" : 115,
    "startColumnNumber" : 68,
    "endLineNumber" : 115,
    "endColumnNumber" : 87
  }, {
    "charLength" : 19,
    "startLineNumber" : 118,
    "startColumnNumber" : 69,
    "endLineNumber" : 118,
    "endColumnNumber" : 88
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  } ]
}