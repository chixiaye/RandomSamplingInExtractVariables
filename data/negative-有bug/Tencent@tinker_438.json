{
  "id" : 438,
  "expression" : "new IllegalArgumentException(\"outOffset < 0\")",
  "projectName" : "Tencent@tinker",
  "commitID" : "df9e1d29420d53a650ab73569d828a22e3cfe728",
  "filePath" : "/third-party/aosp-dexutils/src/main/java/com/tencent/tinker/android/dx/util/Hex.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new IllegalArgumentException(\"outOffset < 0\")",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 45,
      "startLineNumber" : 261,
      "startColumnNumber" : 18,
      "endLineNumber" : 261,
      "endColumnNumber" : 63
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 261,
        "startColumnNumber" : 12,
        "endLineNumber" : 261,
        "endColumnNumber" : 64
      },
      "nodeContext" : "throw new IllegalArgumentException(\"outOffset < 0\");\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 260,
        "startColumnNumber" : 27,
        "endLineNumber" : 262,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  throw new IllegalArgumentException(\"outOffset < 0\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 260,
        "startColumnNumber" : 8,
        "endLineNumber" : 262,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (outOffset < 0) {\n  throw new IllegalArgumentException(\"outOffset < 0\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1533,
        "startLineNumber" : 250,
        "startColumnNumber" : 73,
        "endLineNumber" : 301,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int end=offset + length;\n  if (((offset | length | end) < 0) || (end > arr.length)) {\n    throw new IndexOutOfBoundsException(\"arr.length \" + arr.length + \"; \"+ offset+ \"..!\"+ end);\n  }\n  if (outOffset < 0) {\n    throw new IllegalArgumentException(\"outOffset < 0\");\n  }\n  if (length == 0) {\n    return \"\";\n  }\n  StringBuffer sb=new StringBuffer(length * 4 + 6);\n  int col=0;\n  while (length > 0) {\n    if (col == 0) {\n      String astr;\nswitch (addressLength) {\ncase 2:        astr=Hex.u1(outOffset);\n      break;\ncase 4:    astr=Hex.u2(outOffset);\n  break;\ncase 6:astr=Hex.u3(outOffset);\nbreak;\ndefault:astr=Hex.u4(outOffset);\nbreak;\n}\nsb.append(astr);\nsb.append(\": \");\n}\n else if ((col & 1) == 0) {\nsb.append(' ');\n}\nsb.append(Hex.u1(arr[offset]));\noutOffset++;\noffset++;\ncol++;\nif (col == bpl) {\nsb.append('\\n');\ncol=0;\n}\nlength--;\n}\nif (col != 0) {\nsb.append('\\n');\n}\nreturn sb.toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 202,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2370,
        "startLineNumber" : 235,
        "startColumnNumber" : 4,
        "endLineNumber" : 301,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Formats a hex dump of a portion of a  {@code byte[]}. The result is always newline-terminated, unless the passed-in length was zero, in which case the result is always the empty string ( {@code \"\"}).\n * @param arr {@code non-null;} array to format\n * @param offset {@code >= 0;} offset to the part to dump\n * @param length {@code >= 0;} number of bytes to dump\n * @param outOffset {@code >= 0;} first output offset to print\n * @param bpl {@code >= 0;} number of bytes of output per line\n * @param addressLength {@code} {2,4,6,8};} number of characters for each addressheader\n * @return {@code non-null;} a string of the dump\n */\npublic static String dump(byte[] arr,int offset,int length,int outOffset,int bpl,int addressLength){\n  int end=offset + length;\n  if (((offset | length | end) < 0) || (end > arr.length)) {\n    throw new IndexOutOfBoundsException(\"arr.length \" + arr.length + \"; \"+ offset+ \"..!\"+ end);\n  }\n  if (outOffset < 0) {\n    throw new IllegalArgumentException(\"outOffset < 0\");\n  }\n  if (length == 0) {\n    return \"\";\n  }\n  StringBuffer sb=new StringBuffer(length * 4 + 6);\n  int col=0;\n  while (length > 0) {\n    if (col == 0) {\n      String astr;\nswitch (addressLength) {\ncase 2:        astr=Hex.u1(outOffset);\n      break;\ncase 4:    astr=Hex.u2(outOffset);\n  break;\ncase 6:astr=Hex.u3(outOffset);\nbreak;\ndefault:astr=Hex.u4(outOffset);\nbreak;\n}\nsb.append(astr);\nsb.append(\": \");\n}\n else if ((col & 1) == 0) {\nsb.append(' ');\n}\nsb.append(Hex.u1(arr[offset]));\noutOffset++;\noffset++;\ncol++;\nif (col == bpl) {\nsb.append('\\n');\ncol=0;\n}\nlength--;\n}\nif (col != 0) {\nsb.append('\\n');\n}\nreturn sb.toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 229,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 261,
        "startColumnNumber" : 12,
        "endLineNumber" : 261,
        "endColumnNumber" : 64
      },
      "nodeContext" : "throw new IllegalArgumentException(\"outOffset < 0\");\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    },
    "tokenLength" : 4,
    "type" : "java.lang.IllegalArgumentException"
  } ],
  "positionList" : [ {
    "charLength" : 45,
    "startLineNumber" : 261,
    "startColumnNumber" : 18,
    "endLineNumber" : 261,
    "endColumnNumber" : 63
  } ],
  "layoutRelationDataList" : [ ]
}