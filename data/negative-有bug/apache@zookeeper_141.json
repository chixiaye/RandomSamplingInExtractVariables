{
  "id" : 141,
  "expression" : "\"Server connection successful\"",
  "projectName" : "apache@zookeeper",
  "commitID" : "c6639c9842973a7954c8baa412d6825cb833d51f",
  "filePath" : "/src/java/main/org/apache/zookeeper/ClientCnxn.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Server connection successful\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 30,
      "startLineNumber" : 851,
      "startColumnNumber" : 41,
      "endLineNumber" : 851,
      "endColumnNumber" : 71
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 851,
        "startColumnNumber" : 32,
        "endLineNumber" : 851,
        "endColumnNumber" : 72
      },
      "nodeContext" : "LOG.info(\"Server connection successful\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 851,
        "startColumnNumber" : 32,
        "endLineNumber" : 851,
        "endColumnNumber" : 73
      },
      "nodeContext" : "LOG.info(\"Server connection successful\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 254,
        "startLineNumber" : 847,
        "startColumnNumber" : 52,
        "endLineNumber" : 852,
        "endColumnNumber" : 29
      },
      "nodeContext" : "{\n  lastHeard=now;\n  lastSend=now;\n  primeConnection(k);\n  LOG.info(\"Server connection successful\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 278,
        "startLineNumber" : 847,
        "startColumnNumber" : 28,
        "endLineNumber" : 852,
        "endColumnNumber" : 29
      },
      "nodeContext" : "if (sc.finishConnect()) {\n  lastHeard=now;\n  lastSend=now;\n  primeConnection(k);\n  LOG.info(\"Server connection successful\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 334,
        "startLineNumber" : 846,
        "startColumnNumber" : 75,
        "endLineNumber" : 853,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  if (sc.finishConnect()) {\n    lastHeard=now;\n    lastSend=now;\n    primeConnection(k);\n    LOG.info(\"Server connection successful\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 890,
        "startLineNumber" : 846,
        "startColumnNumber" : 24,
        "endLineNumber" : 862,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if ((k.readyOps() & SelectionKey.OP_CONNECT) != 0) {\n  if (sc.finishConnect()) {\n    lastHeard=now;\n    lastSend=now;\n    primeConnection(k);\n    LOG.info(\"Server connection successful\");\n  }\n}\n else if ((k.readyOps() & (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != 0) {\n  if (outgoingQueue.size() > 0) {\n    lastSend=now;\n  }\n  if (doIO()) {\n    lastHeard=now;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 70,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1012,
        "startLineNumber" : 844,
        "startColumnNumber" : 52,
        "endLineNumber" : 863,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  SocketChannel sc=((SocketChannel)k.channel());\n  if ((k.readyOps() & SelectionKey.OP_CONNECT) != 0) {\n    if (sc.finishConnect()) {\n      lastHeard=now;\n      lastSend=now;\n      primeConnection(k);\n      LOG.info(\"Server connection successful\");\n    }\n  }\n else   if ((k.readyOps() & (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != 0) {\n    if (outgoingQueue.size() > 0) {\n      lastSend=now;\n    }\n    if (doIO()) {\n      lastHeard=now;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 83,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1044,
        "startLineNumber" : 844,
        "startColumnNumber" : 20,
        "endLineNumber" : 863,
        "endColumnNumber" : 21
      },
      "nodeContext" : "for (SelectionKey k : selected) {\n  SocketChannel sc=((SocketChannel)k.channel());\n  if ((k.readyOps() & SelectionKey.OP_CONNECT) != 0) {\n    if (sc.finishConnect()) {\n      lastHeard=now;\n      lastSend=now;\n      primeConnection(k);\n      LOG.info(\"Server connection successful\");\n    }\n  }\n else   if ((k.readyOps() & (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != 0) {\n    if (outgoingQueue.size() > 0) {\n      lastSend=now;\n    }\n    if (doIO()) {\n      lastHeard=now;\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 89,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3220,
        "startLineNumber" : 803,
        "startColumnNumber" : 20,
        "endLineNumber" : 872,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (sockKey == null) {\n    if (closing) {\n      break;\n    }\n    startConnect();\n    lastSend=now;\n    lastHeard=now;\n  }\n  int idleRecv=(int)(now - lastHeard);\n  int idleSend=(int)(now - lastSend);\n  int to=readTimeout - idleRecv;\n  if (zooKeeper.state != States.CONNECTED) {\n    to=connectTimeout - idleRecv;\n  }\n  if (to <= 0) {\n    throw new IOException(\"TIMED OUT\");\n  }\n  if (zooKeeper.state == States.CONNECTED) {\n    int timeToNextPing=readTimeout / 2 - idleSend;\n    if (timeToNextPing <= 0) {\n      sendPing();\n      lastSend=now;\n      enableWrite();\n    }\n else {\n      if (timeToNextPing < to) {\n        to=timeToNextPing;\n      }\n    }\n  }\n  selector.select(to);\n  Set<SelectionKey> selected;\nsynchronized (this) {\n    selected=selector.selectedKeys();\n  }\n  now=System.currentTimeMillis();\n  for (  SelectionKey k : selected) {\n    SocketChannel sc=((SocketChannel)k.channel());\n    if ((k.readyOps() & SelectionKey.OP_CONNECT) != 0) {\n      if (sc.finishConnect()) {\n        lastHeard=now;\n        lastSend=now;\n        primeConnection(k);\n        LOG.info(\"Server connection successful\");\n      }\n    }\n else     if ((k.readyOps() & (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != 0) {\n      if (outgoingQueue.size() > 0) {\n        lastSend=now;\n      }\n      if (doIO()) {\n        lastHeard=now;\n      }\n    }\n  }\n  if (zooKeeper.state == States.CONNECTED) {\n    if (outgoingQueue.size() > 0) {\n      enableWrite();\n    }\n else {\n      disableWrite();\n    }\n  }\n  selected.clear();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 260,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4365,
        "startLineNumber" : 803,
        "startColumnNumber" : 16,
        "endLineNumber" : 896,
        "endColumnNumber" : 17
      },
      "nodeContext" : "try {\n  if (sockKey == null) {\n    if (closing) {\n      break;\n    }\n    startConnect();\n    lastSend=now;\n    lastHeard=now;\n  }\n  int idleRecv=(int)(now - lastHeard);\n  int idleSend=(int)(now - lastSend);\n  int to=readTimeout - idleRecv;\n  if (zooKeeper.state != States.CONNECTED) {\n    to=connectTimeout - idleRecv;\n  }\n  if (to <= 0) {\n    throw new IOException(\"TIMED OUT\");\n  }\n  if (zooKeeper.state == States.CONNECTED) {\n    int timeToNextPing=readTimeout / 2 - idleSend;\n    if (timeToNextPing <= 0) {\n      sendPing();\n      lastSend=now;\n      enableWrite();\n    }\n else {\n      if (timeToNextPing < to) {\n        to=timeToNextPing;\n      }\n    }\n  }\n  selector.select(to);\n  Set<SelectionKey> selected;\nsynchronized (this) {\n    selected=selector.selectedKeys();\n  }\n  now=System.currentTimeMillis();\n  for (  SelectionKey k : selected) {\n    SocketChannel sc=((SocketChannel)k.channel());\n    if ((k.readyOps() & SelectionKey.OP_CONNECT) != 0) {\n      if (sc.finishConnect()) {\n        lastHeard=now;\n        lastSend=now;\n        primeConnection(k);\n        LOG.info(\"Server connection successful\");\n      }\n    }\n else     if ((k.readyOps() & (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != 0) {\n      if (outgoingQueue.size() > 0) {\n        lastSend=now;\n      }\n      if (doIO()) {\n        lastHeard=now;\n      }\n    }\n  }\n  if (zooKeeper.state == States.CONNECTED) {\n    if (outgoingQueue.size() > 0) {\n      enableWrite();\n    }\n else {\n      disableWrite();\n    }\n  }\n  selected.clear();\n}\n catch (Exception e) {\n  if (closing) {\n    LOG.info(\"Exception while closing send thread for session 0x\" + Long.toHexString(getSessionId()) + \" : \"+ e.getMessage());\n    break;\n  }\n else {\n    LOG.warn(\"Exception closing session 0x\" + Long.toHexString(getSessionId()) + \" to \"+ sockKey,e);\n    cleanup();\n    if (zooKeeper.state.isAlive()) {\n      eventThread.queueEvent(new WatchedEvent(Event.EventType.None,Event.KeeperState.Disconnected,null));\n    }\n    now=System.currentTimeMillis();\n    lastHeard=now;\n    lastSend=now;\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 343,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 4397,
        "startLineNumber" : 802,
        "startColumnNumber" : 46,
        "endLineNumber" : 897,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  try {\n    if (sockKey == null) {\n      if (closing) {\n        break;\n      }\n      startConnect();\n      lastSend=now;\n      lastHeard=now;\n    }\n    int idleRecv=(int)(now - lastHeard);\n    int idleSend=(int)(now - lastSend);\n    int to=readTimeout - idleRecv;\n    if (zooKeeper.state != States.CONNECTED) {\n      to=connectTimeout - idleRecv;\n    }\n    if (to <= 0) {\n      throw new IOException(\"TIMED OUT\");\n    }\n    if (zooKeeper.state == States.CONNECTED) {\n      int timeToNextPing=readTimeout / 2 - idleSend;\n      if (timeToNextPing <= 0) {\n        sendPing();\n        lastSend=now;\n        enableWrite();\n      }\n else {\n        if (timeToNextPing < to) {\n          to=timeToNextPing;\n        }\n      }\n    }\n    selector.select(to);\n    Set<SelectionKey> selected;\nsynchronized (this) {\n      selected=selector.selectedKeys();\n    }\n    now=System.currentTimeMillis();\n    for (    SelectionKey k : selected) {\n      SocketChannel sc=((SocketChannel)k.channel());\n      if ((k.readyOps() & SelectionKey.OP_CONNECT) != 0) {\n        if (sc.finishConnect()) {\n          lastHeard=now;\n          lastSend=now;\n          primeConnection(k);\n          LOG.info(\"Server connection successful\");\n        }\n      }\n else       if ((k.readyOps() & (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != 0) {\n        if (outgoingQueue.size() > 0) {\n          lastSend=now;\n        }\n        if (doIO()) {\n          lastHeard=now;\n        }\n      }\n    }\n    if (zooKeeper.state == States.CONNECTED) {\n      if (outgoingQueue.size() > 0) {\n        enableWrite();\n      }\n else {\n        disableWrite();\n      }\n    }\n    selected.clear();\n  }\n catch (  Exception e) {\n    if (closing) {\n      LOG.info(\"Exception while closing send thread for session 0x\" + Long.toHexString(getSessionId()) + \" : \"+ e.getMessage());\n      break;\n    }\n else {\n      LOG.warn(\"Exception closing session 0x\" + Long.toHexString(getSessionId()) + \" to \"+ sockKey,e);\n      cleanup();\n      if (zooKeeper.state.isAlive()) {\n        eventThread.queueEvent(new WatchedEvent(Event.EventType.None,Event.KeeperState.Disconnected,null));\n      }\n      now=System.currentTimeMillis();\n      lastHeard=now;\n      lastSend=now;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 344,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4431,
        "startLineNumber" : 802,
        "startColumnNumber" : 12,
        "endLineNumber" : 897,
        "endColumnNumber" : 13
      },
      "nodeContext" : "while (zooKeeper.state.isAlive()) {\n  try {\n    if (sockKey == null) {\n      if (closing) {\n        break;\n      }\n      startConnect();\n      lastSend=now;\n      lastHeard=now;\n    }\n    int idleRecv=(int)(now - lastHeard);\n    int idleSend=(int)(now - lastSend);\n    int to=readTimeout - idleRecv;\n    if (zooKeeper.state != States.CONNECTED) {\n      to=connectTimeout - idleRecv;\n    }\n    if (to <= 0) {\n      throw new IOException(\"TIMED OUT\");\n    }\n    if (zooKeeper.state == States.CONNECTED) {\n      int timeToNextPing=readTimeout / 2 - idleSend;\n      if (timeToNextPing <= 0) {\n        sendPing();\n        lastSend=now;\n        enableWrite();\n      }\n else {\n        if (timeToNextPing < to) {\n          to=timeToNextPing;\n        }\n      }\n    }\n    selector.select(to);\n    Set<SelectionKey> selected;\nsynchronized (this) {\n      selected=selector.selectedKeys();\n    }\n    now=System.currentTimeMillis();\n    for (    SelectionKey k : selected) {\n      SocketChannel sc=((SocketChannel)k.channel());\n      if ((k.readyOps() & SelectionKey.OP_CONNECT) != 0) {\n        if (sc.finishConnect()) {\n          lastHeard=now;\n          lastSend=now;\n          primeConnection(k);\n          LOG.info(\"Server connection successful\");\n        }\n      }\n else       if ((k.readyOps() & (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != 0) {\n        if (outgoingQueue.size() > 0) {\n          lastSend=now;\n        }\n        if (doIO()) {\n          lastHeard=now;\n        }\n      }\n    }\n    if (zooKeeper.state == States.CONNECTED) {\n      if (outgoingQueue.size() > 0) {\n        enableWrite();\n      }\n else {\n        disableWrite();\n      }\n    }\n    selected.clear();\n  }\n catch (  Exception e) {\n    if (closing) {\n      LOG.info(\"Exception while closing send thread for session 0x\" + Long.toHexString(getSessionId()) + \" : \"+ e.getMessage());\n      break;\n    }\n else {\n      LOG.warn(\"Exception closing session 0x\" + Long.toHexString(getSessionId()) + \" to \"+ sockKey,e);\n      cleanup();\n      if (zooKeeper.state.isAlive()) {\n        eventThread.queueEvent(new WatchedEvent(Event.EventType.None,Event.KeeperState.Disconnected,null));\n      }\n      now=System.currentTimeMillis();\n      lastHeard=now;\n      lastSend=now;\n    }\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 350,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4909,
        "startLineNumber" : 798,
        "startColumnNumber" : 26,
        "endLineNumber" : 906,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  long now=System.currentTimeMillis();\n  long lastHeard=now;\n  long lastSend=now;\n  while (zooKeeper.state.isAlive()) {\n    try {\n      if (sockKey == null) {\n        if (closing) {\n          break;\n        }\n        startConnect();\n        lastSend=now;\n        lastHeard=now;\n      }\n      int idleRecv=(int)(now - lastHeard);\n      int idleSend=(int)(now - lastSend);\n      int to=readTimeout - idleRecv;\n      if (zooKeeper.state != States.CONNECTED) {\n        to=connectTimeout - idleRecv;\n      }\n      if (to <= 0) {\n        throw new IOException(\"TIMED OUT\");\n      }\n      if (zooKeeper.state == States.CONNECTED) {\n        int timeToNextPing=readTimeout / 2 - idleSend;\n        if (timeToNextPing <= 0) {\n          sendPing();\n          lastSend=now;\n          enableWrite();\n        }\n else {\n          if (timeToNextPing < to) {\n            to=timeToNextPing;\n          }\n        }\n      }\n      selector.select(to);\n      Set<SelectionKey> selected;\nsynchronized (this) {\n        selected=selector.selectedKeys();\n      }\n      now=System.currentTimeMillis();\n      for (      SelectionKey k : selected) {\n        SocketChannel sc=((SocketChannel)k.channel());\n        if ((k.readyOps() & SelectionKey.OP_CONNECT) != 0) {\n          if (sc.finishConnect()) {\n            lastHeard=now;\n            lastSend=now;\n            primeConnection(k);\n            LOG.info(\"Server connection successful\");\n          }\n        }\n else         if ((k.readyOps() & (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != 0) {\n          if (outgoingQueue.size() > 0) {\n            lastSend=now;\n          }\n          if (doIO()) {\n            lastHeard=now;\n          }\n        }\n      }\n      if (zooKeeper.state == States.CONNECTED) {\n        if (outgoingQueue.size() > 0) {\n          enableWrite();\n        }\n else {\n          disableWrite();\n        }\n      }\n      selected.clear();\n    }\n catch (    Exception e) {\n      if (closing) {\n        LOG.info(\"Exception while closing send thread for session 0x\" + Long.toHexString(getSessionId()) + \" : \"+ e.getMessage());\n        break;\n      }\n else {\n        LOG.warn(\"Exception closing session 0x\" + Long.toHexString(getSessionId()) + \" to \"+ sockKey,e);\n        cleanup();\n        if (zooKeeper.state.isAlive()) {\n          eventThread.queueEvent(new WatchedEvent(Event.EventType.None,Event.KeeperState.Disconnected,null));\n        }\n        now=System.currentTimeMillis();\n        lastHeard=now;\n        lastSend=now;\n      }\n    }\n  }\n  cleanup();\n  try {\n    selector.close();\n  }\n catch (  IOException e) {\n    LOG.warn(\"Ignoring exception during selector close\",e);\n  }\n  ZooTrace.logTraceMessage(LOG,ZooTrace.getTextTraceLevel(),\"SendThread exitedloop.\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 398,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4945,
        "startLineNumber" : 797,
        "startColumnNumber" : 8,
        "endLineNumber" : 906,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void run(){\n  long now=System.currentTimeMillis();\n  long lastHeard=now;\n  long lastSend=now;\n  while (zooKeeper.state.isAlive()) {\n    try {\n      if (sockKey == null) {\n        if (closing) {\n          break;\n        }\n        startConnect();\n        lastSend=now;\n        lastHeard=now;\n      }\n      int idleRecv=(int)(now - lastHeard);\n      int idleSend=(int)(now - lastSend);\n      int to=readTimeout - idleRecv;\n      if (zooKeeper.state != States.CONNECTED) {\n        to=connectTimeout - idleRecv;\n      }\n      if (to <= 0) {\n        throw new IOException(\"TIMED OUT\");\n      }\n      if (zooKeeper.state == States.CONNECTED) {\n        int timeToNextPing=readTimeout / 2 - idleSend;\n        if (timeToNextPing <= 0) {\n          sendPing();\n          lastSend=now;\n          enableWrite();\n        }\n else {\n          if (timeToNextPing < to) {\n            to=timeToNextPing;\n          }\n        }\n      }\n      selector.select(to);\n      Set<SelectionKey> selected;\nsynchronized (this) {\n        selected=selector.selectedKeys();\n      }\n      now=System.currentTimeMillis();\n      for (      SelectionKey k : selected) {\n        SocketChannel sc=((SocketChannel)k.channel());\n        if ((k.readyOps() & SelectionKey.OP_CONNECT) != 0) {\n          if (sc.finishConnect()) {\n            lastHeard=now;\n            lastSend=now;\n            primeConnection(k);\n            LOG.info(\"Server connection successful\");\n          }\n        }\n else         if ((k.readyOps() & (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != 0) {\n          if (outgoingQueue.size() > 0) {\n            lastSend=now;\n          }\n          if (doIO()) {\n            lastHeard=now;\n          }\n        }\n      }\n      if (zooKeeper.state == States.CONNECTED) {\n        if (outgoingQueue.size() > 0) {\n          enableWrite();\n        }\n else {\n          disableWrite();\n        }\n      }\n      selected.clear();\n    }\n catch (    Exception e) {\n      if (closing) {\n        LOG.info(\"Exception while closing send thread for session 0x\" + Long.toHexString(getSessionId()) + \" : \"+ e.getMessage());\n        break;\n      }\n else {\n        LOG.warn(\"Exception closing session 0x\" + Long.toHexString(getSessionId()) + \" to \"+ sockKey,e);\n        cleanup();\n        if (zooKeeper.state.isAlive()) {\n          eventThread.queueEvent(new WatchedEvent(Event.EventType.None,Event.KeeperState.Disconnected,null));\n        }\n        now=System.currentTimeMillis();\n        lastHeard=now;\n        lastSend=now;\n      }\n    }\n  }\n  cleanup();\n  try {\n    selector.close();\n  }\n catch (  IOException e) {\n    LOG.warn(\"Ignoring exception during selector close\",e);\n  }\n  ZooTrace.logTraceMessage(LOG,ZooTrace.getTextTraceLevel(),\"SendThread exitedloop.\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 404,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 851,
        "startColumnNumber" : 32,
        "endLineNumber" : 851,
        "endColumnNumber" : 73
      },
      "nodeContext" : "LOG.info(\"Server connection successful\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 30,
    "startLineNumber" : 851,
    "startColumnNumber" : 41,
    "endLineNumber" : 851,
    "endColumnNumber" : 71
  } ],
  "layoutRelationDataList" : [ ]
}