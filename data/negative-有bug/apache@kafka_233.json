{
  "id" : 233,
  "expression" : "log",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/streams/src/main/java/org/apache/kafka/streams/processor/internals/RecordQueue.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "log",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 197,
      "startColumnNumber" : 12,
      "endLineNumber" : 197,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 197,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 116
      },
      "nodeContext" : "log.trace(\"Source node {} extracted timestamp {} for record {}\",source.name(),timestamp,deserialized)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 197,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 117
      },
      "nodeContext" : "log.trace(\"Source node {} extracted timestamp {} for record {}\",source.name(),timestamp,deserialized);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1740,
        "startLineNumber" : 176,
        "startColumnNumber" : 59,
        "endLineNumber" : 209,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final ConsumerRecord<byte[],byte[]> raw=fifoQueue.pollFirst();\n  final ConsumerRecord<Object,Object> deserialized=recordDeserializer.deserialize(processorContext,raw);\n  if (deserialized == null) {\n    lastCorruptedRecord=raw;\n    continue;\n  }\n  final long timestamp;\n  try {\n    timestamp=timestampExtractor.extract(deserialized,partitionTime);\n  }\n catch (  final StreamsException internalFatalExtractorException) {\n    throw internalFatalExtractorException;\n  }\ncatch (  final Exception fatalUserException) {\n    throw new StreamsException(String.format(\"Fatal user code error in TimestampExtractor callback for record %s.\",deserialized),fatalUserException);\n  }\n  log.trace(\"Source node {} extracted timestamp {} for record {}\",source.name(),timestamp,deserialized);\n  if (timestamp < 0) {\n    log.warn(\"Skipping record due to negative extracted timestamp. topic=[{}] partition=[{}] offset=[{}] extractedTimestamp=[{}] extractor=[{}]\",deserialized.topic(),deserialized.partition(),deserialized.offset(),timestamp,timestampExtractor.getClass().getCanonicalName());\n    droppedRecordsSensor.record();\n    continue;\n  }\n  headRecord=new StampedRecord(deserialized,timestamp);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 132,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1791,
        "startLineNumber" : 176,
        "startColumnNumber" : 8,
        "endLineNumber" : 209,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (headRecord == null && !fifoQueue.isEmpty()) {\n  final ConsumerRecord<byte[],byte[]> raw=fifoQueue.pollFirst();\n  final ConsumerRecord<Object,Object> deserialized=recordDeserializer.deserialize(processorContext,raw);\n  if (deserialized == null) {\n    lastCorruptedRecord=raw;\n    continue;\n  }\n  final long timestamp;\n  try {\n    timestamp=timestampExtractor.extract(deserialized,partitionTime);\n  }\n catch (  final StreamsException internalFatalExtractorException) {\n    throw internalFatalExtractorException;\n  }\ncatch (  final Exception fatalUserException) {\n    throw new StreamsException(String.format(\"Fatal user code error in TimestampExtractor callback for record %s.\",deserialized),fatalUserException);\n  }\n  log.trace(\"Source node {} extracted timestamp {} for record {}\",source.name(),timestamp,deserialized);\n  if (timestamp < 0) {\n    log.warn(\"Skipping record due to negative extracted timestamp. topic=[{}] partition=[{}] offset=[{}] extractedTimestamp=[{}] extractor=[{}]\",deserialized.topic(),deserialized.partition(),deserialized.offset(),timestamp,timestampExtractor.getClass().getCanonicalName());\n    droppedRecordsSensor.record();\n    continue;\n  }\n  headRecord=new StampedRecord(deserialized,timestamp);\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 141,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2197,
        "startLineNumber" : 173,
        "startColumnNumber" : 30,
        "endLineNumber" : 216,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ConsumerRecord<byte[],byte[]> lastCorruptedRecord=null;\n  while (headRecord == null && !fifoQueue.isEmpty()) {\n    final ConsumerRecord<byte[],byte[]> raw=fifoQueue.pollFirst();\n    final ConsumerRecord<Object,Object> deserialized=recordDeserializer.deserialize(processorContext,raw);\n    if (deserialized == null) {\n      lastCorruptedRecord=raw;\n      continue;\n    }\n    final long timestamp;\n    try {\n      timestamp=timestampExtractor.extract(deserialized,partitionTime);\n    }\n catch (    final StreamsException internalFatalExtractorException) {\n      throw internalFatalExtractorException;\n    }\ncatch (    final Exception fatalUserException) {\n      throw new StreamsException(String.format(\"Fatal user code error in TimestampExtractor callback for record %s.\",deserialized),fatalUserException);\n    }\n    log.trace(\"Source node {} extracted timestamp {} for record {}\",source.name(),timestamp,deserialized);\n    if (timestamp < 0) {\n      log.warn(\"Skipping record due to negative extracted timestamp. topic=[{}] partition=[{}] offset=[{}] extractedTimestamp=[{}] extractor=[{}]\",deserialized.topic(),deserialized.partition(),deserialized.offset(),timestamp,timestampExtractor.getClass().getCanonicalName());\n      droppedRecordsSensor.record();\n      continue;\n    }\n    headRecord=new StampedRecord(deserialized,timestamp);\n  }\n  if (headRecord == null && lastCorruptedRecord != null) {\n    headRecord=new CorruptedRecord(lastCorruptedRecord);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 171,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2223,
        "startLineNumber" : 173,
        "startColumnNumber" : 4,
        "endLineNumber" : 216,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void updateHead(){\n  ConsumerRecord<byte[],byte[]> lastCorruptedRecord=null;\n  while (headRecord == null && !fifoQueue.isEmpty()) {\n    final ConsumerRecord<byte[],byte[]> raw=fifoQueue.pollFirst();\n    final ConsumerRecord<Object,Object> deserialized=recordDeserializer.deserialize(processorContext,raw);\n    if (deserialized == null) {\n      lastCorruptedRecord=raw;\n      continue;\n    }\n    final long timestamp;\n    try {\n      timestamp=timestampExtractor.extract(deserialized,partitionTime);\n    }\n catch (    final StreamsException internalFatalExtractorException) {\n      throw internalFatalExtractorException;\n    }\ncatch (    final Exception fatalUserException) {\n      throw new StreamsException(String.format(\"Fatal user code error in TimestampExtractor callback for record %s.\",deserialized),fatalUserException);\n    }\n    log.trace(\"Source node {} extracted timestamp {} for record {}\",source.name(),timestamp,deserialized);\n    if (timestamp < 0) {\n      log.warn(\"Skipping record due to negative extracted timestamp. topic=[{}] partition=[{}] offset=[{}] extractedTimestamp=[{}] extractor=[{}]\",deserialized.topic(),deserialized.partition(),deserialized.offset(),timestamp,timestampExtractor.getClass().getCanonicalName());\n      droppedRecordsSensor.record();\n      continue;\n    }\n    headRecord=new StampedRecord(deserialized,timestamp);\n  }\n  if (headRecord == null && lastCorruptedRecord != null) {\n    headRecord=new CorruptedRecord(lastCorruptedRecord);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 175,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 197,
        "startColumnNumber" : 12,
        "endLineNumber" : 197,
        "endColumnNumber" : 117
      },
      "nodeContext" : "log.trace(\"Source node {} extracted timestamp {} for record {}\",source.name(),timestamp,deserialized);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.kafka.streams.processor.internals.Logger"
  }, {
    "nodeContext" : "log",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 201,
      "startColumnNumber" : 16,
      "endLineNumber" : 201,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 339,
        "startLineNumber" : 201,
        "startColumnNumber" : 16,
        "endLineNumber" : 204,
        "endColumnNumber" : 17
      },
      "nodeContext" : "log.warn(\"Skipping record due to negative extracted timestamp. topic=[{}] partition=[{}] offset=[{}] extractedTimestamp=[{}] extractor=[{}]\",deserialized.topic(),deserialized.partition(),deserialized.offset(),timestamp,timestampExtractor.getClass().getCanonicalName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 340,
        "startLineNumber" : 201,
        "startColumnNumber" : 16,
        "endLineNumber" : 204,
        "endColumnNumber" : 18
      },
      "nodeContext" : "log.warn(\"Skipping record due to negative extracted timestamp. topic=[{}] partition=[{}] offset=[{}] extractedTimestamp=[{}] extractor=[{}]\",deserialized.topic(),deserialized.partition(),deserialized.offset(),timestamp,timestampExtractor.getClass().getCanonicalName());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 20,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 445,
        "startLineNumber" : 200,
        "startColumnNumber" : 31,
        "endLineNumber" : 207,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  log.warn(\"Skipping record due to negative extracted timestamp. topic=[{}] partition=[{}] offset=[{}] extractedTimestamp=[{}] extractor=[{}]\",deserialized.topic(),deserialized.partition(),deserialized.offset(),timestamp,timestampExtractor.getClass().getCanonicalName());\n  droppedRecordsSensor.record();\n  continue;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 26,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 464,
        "startLineNumber" : 200,
        "startColumnNumber" : 12,
        "endLineNumber" : 207,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (timestamp < 0) {\n  log.warn(\"Skipping record due to negative extracted timestamp. topic=[{}] partition=[{}] offset=[{}] extractedTimestamp=[{}] extractor=[{}]\",deserialized.topic(),deserialized.partition(),deserialized.offset(),timestamp,timestampExtractor.getClass().getCanonicalName());\n  droppedRecordsSensor.record();\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 30,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1740,
        "startLineNumber" : 176,
        "startColumnNumber" : 59,
        "endLineNumber" : 209,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final ConsumerRecord<byte[],byte[]> raw=fifoQueue.pollFirst();\n  final ConsumerRecord<Object,Object> deserialized=recordDeserializer.deserialize(processorContext,raw);\n  if (deserialized == null) {\n    lastCorruptedRecord=raw;\n    continue;\n  }\n  final long timestamp;\n  try {\n    timestamp=timestampExtractor.extract(deserialized,partitionTime);\n  }\n catch (  final StreamsException internalFatalExtractorException) {\n    throw internalFatalExtractorException;\n  }\ncatch (  final Exception fatalUserException) {\n    throw new StreamsException(String.format(\"Fatal user code error in TimestampExtractor callback for record %s.\",deserialized),fatalUserException);\n  }\n  log.trace(\"Source node {} extracted timestamp {} for record {}\",source.name(),timestamp,deserialized);\n  if (timestamp < 0) {\n    log.warn(\"Skipping record due to negative extracted timestamp. topic=[{}] partition=[{}] offset=[{}] extractedTimestamp=[{}] extractor=[{}]\",deserialized.topic(),deserialized.partition(),deserialized.offset(),timestamp,timestampExtractor.getClass().getCanonicalName());\n    droppedRecordsSensor.record();\n    continue;\n  }\n  headRecord=new StampedRecord(deserialized,timestamp);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 132,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1791,
        "startLineNumber" : 176,
        "startColumnNumber" : 8,
        "endLineNumber" : 209,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (headRecord == null && !fifoQueue.isEmpty()) {\n  final ConsumerRecord<byte[],byte[]> raw=fifoQueue.pollFirst();\n  final ConsumerRecord<Object,Object> deserialized=recordDeserializer.deserialize(processorContext,raw);\n  if (deserialized == null) {\n    lastCorruptedRecord=raw;\n    continue;\n  }\n  final long timestamp;\n  try {\n    timestamp=timestampExtractor.extract(deserialized,partitionTime);\n  }\n catch (  final StreamsException internalFatalExtractorException) {\n    throw internalFatalExtractorException;\n  }\ncatch (  final Exception fatalUserException) {\n    throw new StreamsException(String.format(\"Fatal user code error in TimestampExtractor callback for record %s.\",deserialized),fatalUserException);\n  }\n  log.trace(\"Source node {} extracted timestamp {} for record {}\",source.name(),timestamp,deserialized);\n  if (timestamp < 0) {\n    log.warn(\"Skipping record due to negative extracted timestamp. topic=[{}] partition=[{}] offset=[{}] extractedTimestamp=[{}] extractor=[{}]\",deserialized.topic(),deserialized.partition(),deserialized.offset(),timestamp,timestampExtractor.getClass().getCanonicalName());\n    droppedRecordsSensor.record();\n    continue;\n  }\n  headRecord=new StampedRecord(deserialized,timestamp);\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 141,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2197,
        "startLineNumber" : 173,
        "startColumnNumber" : 30,
        "endLineNumber" : 216,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ConsumerRecord<byte[],byte[]> lastCorruptedRecord=null;\n  while (headRecord == null && !fifoQueue.isEmpty()) {\n    final ConsumerRecord<byte[],byte[]> raw=fifoQueue.pollFirst();\n    final ConsumerRecord<Object,Object> deserialized=recordDeserializer.deserialize(processorContext,raw);\n    if (deserialized == null) {\n      lastCorruptedRecord=raw;\n      continue;\n    }\n    final long timestamp;\n    try {\n      timestamp=timestampExtractor.extract(deserialized,partitionTime);\n    }\n catch (    final StreamsException internalFatalExtractorException) {\n      throw internalFatalExtractorException;\n    }\ncatch (    final Exception fatalUserException) {\n      throw new StreamsException(String.format(\"Fatal user code error in TimestampExtractor callback for record %s.\",deserialized),fatalUserException);\n    }\n    log.trace(\"Source node {} extracted timestamp {} for record {}\",source.name(),timestamp,deserialized);\n    if (timestamp < 0) {\n      log.warn(\"Skipping record due to negative extracted timestamp. topic=[{}] partition=[{}] offset=[{}] extractedTimestamp=[{}] extractor=[{}]\",deserialized.topic(),deserialized.partition(),deserialized.offset(),timestamp,timestampExtractor.getClass().getCanonicalName());\n      droppedRecordsSensor.record();\n      continue;\n    }\n    headRecord=new StampedRecord(deserialized,timestamp);\n  }\n  if (headRecord == null && lastCorruptedRecord != null) {\n    headRecord=new CorruptedRecord(lastCorruptedRecord);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 171,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2223,
        "startLineNumber" : 173,
        "startColumnNumber" : 4,
        "endLineNumber" : 216,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void updateHead(){\n  ConsumerRecord<byte[],byte[]> lastCorruptedRecord=null;\n  while (headRecord == null && !fifoQueue.isEmpty()) {\n    final ConsumerRecord<byte[],byte[]> raw=fifoQueue.pollFirst();\n    final ConsumerRecord<Object,Object> deserialized=recordDeserializer.deserialize(processorContext,raw);\n    if (deserialized == null) {\n      lastCorruptedRecord=raw;\n      continue;\n    }\n    final long timestamp;\n    try {\n      timestamp=timestampExtractor.extract(deserialized,partitionTime);\n    }\n catch (    final StreamsException internalFatalExtractorException) {\n      throw internalFatalExtractorException;\n    }\ncatch (    final Exception fatalUserException) {\n      throw new StreamsException(String.format(\"Fatal user code error in TimestampExtractor callback for record %s.\",deserialized),fatalUserException);\n    }\n    log.trace(\"Source node {} extracted timestamp {} for record {}\",source.name(),timestamp,deserialized);\n    if (timestamp < 0) {\n      log.warn(\"Skipping record due to negative extracted timestamp. topic=[{}] partition=[{}] offset=[{}] extractedTimestamp=[{}] extractor=[{}]\",deserialized.topic(),deserialized.partition(),deserialized.offset(),timestamp,timestampExtractor.getClass().getCanonicalName());\n      droppedRecordsSensor.record();\n      continue;\n    }\n    headRecord=new StampedRecord(deserialized,timestamp);\n  }\n  if (headRecord == null && lastCorruptedRecord != null) {\n    headRecord=new CorruptedRecord(lastCorruptedRecord);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 175,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 339,
        "startLineNumber" : 201,
        "startColumnNumber" : 16,
        "endLineNumber" : 204,
        "endColumnNumber" : 17
      },
      "nodeContext" : "log.warn(\"Skipping record due to negative extracted timestamp. topic=[{}] partition=[{}] offset=[{}] extractedTimestamp=[{}] extractor=[{}]\",deserialized.topic(),deserialized.partition(),deserialized.offset(),timestamp,timestampExtractor.getClass().getCanonicalName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.kafka.streams.processor.internals.Logger"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 197,
    "startColumnNumber" : 12,
    "endLineNumber" : 197,
    "endColumnNumber" : 15
  }, {
    "charLength" : 3,
    "startLineNumber" : 201,
    "startColumnNumber" : 16,
    "endLineNumber" : 201,
    "endColumnNumber" : 19
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}