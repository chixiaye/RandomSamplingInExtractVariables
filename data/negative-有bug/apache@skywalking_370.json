{
  "id" : 370,
  "expression" : "properties",
  "projectName" : "apache@skywalking",
  "commitID" : "16b51d55baec4f779f312e07081d1397addbcfe9",
  "filePath" : "/oap-server/server-fetcher-plugin/kafka-fetcher-plugin/src/main/java/org/apache/skywalking/oap/server/analyzer/agent/kafka/KafkaFetcherHandlerRegister.java",
  "occurrences" : 6,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "properties",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 74,
      "startColumnNumber" : 8,
      "endLineNumber" : 74,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 74,
        "startColumnNumber" : 8,
        "endLineNumber" : 74,
        "endColumnNumber" : 58
      },
      "nodeContext" : "properties.putAll(config.getKafkaConsumerConfig())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 74,
        "startColumnNumber" : 8,
        "endLineNumber" : 74,
        "endColumnNumber" : 59
      },
      "nodeContext" : "properties.putAll(config.getKafkaConsumerConfig());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3545,
        "startLineNumber" : 70,
        "startColumnNumber" : 94,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.config=config;\n  Properties properties=new Properties();\n  properties.putAll(config.getKafkaConsumerConfig());\n  properties.setProperty(ConsumerConfig.GROUP_ID_CONFIG,config.getGroupId());\n  properties.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG,config.getBootstrapServers());\n  AdminClient adminClient=AdminClient.create(properties);\n  Set<String> missedTopics=adminClient.describeTopics(Lists.newArrayList(config.getTopicNameOfManagements(),config.getTopicNameOfMetrics(),config.getTopicNameOfProfiling(),config.getTopicNameOfTracingSegments(),config.getTopicNameOfMeters())).values().entrySet().stream().map(entry -> {\n    try {\n      entry.getValue().get();\n      return null;\n    }\n catch (    InterruptedException|ExecutionException e) {\n    }\n    return entry.getKey();\n  }\n).filter(Objects::nonNull).collect(Collectors.toSet());\n  if (!missedTopics.isEmpty()) {\n    log.info(\"Topics\" + missedTopics.toString() + \" not exist.\");\n    List<NewTopic> newTopicList=missedTopics.stream().map(topic -> new NewTopic(topic,config.getPartitions(),(short)config.getReplicationFactor())).collect(Collectors.toList());\n    try {\n      adminClient.createTopics(newTopicList).all().get();\n    }\n catch (    Exception e) {\n      throw new ModuleStartException(\"Failed to create Kafka Topics\" + missedTopics + \".\",e);\n    }\n  }\n  if (config.isSharding() && StringUtil.isNotEmpty(config.getConsumePartitions())) {\n    isSharding=true;\n  }\n else {\n    isSharding=false;\n  }\n  if (config.getKafkaHandlerThreadPoolSize() > 0) {\n    threadPoolSize=config.getKafkaHandlerThreadPoolSize();\n  }\n  if (config.getKafkaHandlerThreadPoolQueueSize() > 0) {\n    threadPoolQueueSize=config.getKafkaHandlerThreadPoolQueueSize();\n  }\n  enableKafkaMessageAutoCommit=(boolean)properties.getOrDefault(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG,true);\n  consumer=new KafkaConsumer<>(properties,new StringDeserializer(),new BytesDeserializer());\n  executor=new ThreadPoolExecutor(threadPoolSize,threadPoolSize,60,TimeUnit.SECONDS,new ArrayBlockingQueue(threadPoolQueueSize),new CustomThreadFactory(\"KafkaConsumer\"),new ThreadPoolExecutor.CallerRunsPolicy());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 298,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3635,
        "startLineNumber" : 70,
        "startColumnNumber" : 4,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public KafkaFetcherHandlerRegister(KafkaFetcherConfig config) throws ModuleStartException {\n  this.config=config;\n  Properties properties=new Properties();\n  properties.putAll(config.getKafkaConsumerConfig());\n  properties.setProperty(ConsumerConfig.GROUP_ID_CONFIG,config.getGroupId());\n  properties.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG,config.getBootstrapServers());\n  AdminClient adminClient=AdminClient.create(properties);\n  Set<String> missedTopics=adminClient.describeTopics(Lists.newArrayList(config.getTopicNameOfManagements(),config.getTopicNameOfMetrics(),config.getTopicNameOfProfiling(),config.getTopicNameOfTracingSegments(),config.getTopicNameOfMeters())).values().entrySet().stream().map(entry -> {\n    try {\n      entry.getValue().get();\n      return null;\n    }\n catch (    InterruptedException|ExecutionException e) {\n    }\n    return entry.getKey();\n  }\n).filter(Objects::nonNull).collect(Collectors.toSet());\n  if (!missedTopics.isEmpty()) {\n    log.info(\"Topics\" + missedTopics.toString() + \" not exist.\");\n    List<NewTopic> newTopicList=missedTopics.stream().map(topic -> new NewTopic(topic,config.getPartitions(),(short)config.getReplicationFactor())).collect(Collectors.toList());\n    try {\n      adminClient.createTopics(newTopicList).all().get();\n    }\n catch (    Exception e) {\n      throw new ModuleStartException(\"Failed to create Kafka Topics\" + missedTopics + \".\",e);\n    }\n  }\n  if (config.isSharding() && StringUtil.isNotEmpty(config.getConsumePartitions())) {\n    isSharding=true;\n  }\n else {\n    isSharding=false;\n  }\n  if (config.getKafkaHandlerThreadPoolSize() > 0) {\n    threadPoolSize=config.getKafkaHandlerThreadPoolSize();\n  }\n  if (config.getKafkaHandlerThreadPoolQueueSize() > 0) {\n    threadPoolQueueSize=config.getKafkaHandlerThreadPoolQueueSize();\n  }\n  enableKafkaMessageAutoCommit=(boolean)properties.getOrDefault(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG,true);\n  consumer=new KafkaConsumer<>(properties,new StringDeserializer(),new BytesDeserializer());\n  executor=new ThreadPoolExecutor(threadPoolSize,threadPoolSize,60,TimeUnit.SECONDS,new ArrayBlockingQueue(threadPoolQueueSize),new CustomThreadFactory(\"KafkaConsumer\"),new ThreadPoolExecutor.CallerRunsPolicy());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 307,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 74,
        "startColumnNumber" : 8,
        "endLineNumber" : 74,
        "endColumnNumber" : 59
      },
      "nodeContext" : "properties.putAll(config.getKafkaConsumerConfig());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.Properties"
  }, {
    "nodeContext" : "properties",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 75,
      "startColumnNumber" : 8,
      "endLineNumber" : 75,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 75,
        "startColumnNumber" : 8,
        "endLineNumber" : 75,
        "endColumnNumber" : 83
      },
      "nodeContext" : "properties.setProperty(ConsumerConfig.GROUP_ID_CONFIG,config.getGroupId())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 75,
        "startColumnNumber" : 8,
        "endLineNumber" : 75,
        "endColumnNumber" : 84
      },
      "nodeContext" : "properties.setProperty(ConsumerConfig.GROUP_ID_CONFIG,config.getGroupId());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3545,
        "startLineNumber" : 70,
        "startColumnNumber" : 94,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.config=config;\n  Properties properties=new Properties();\n  properties.putAll(config.getKafkaConsumerConfig());\n  properties.setProperty(ConsumerConfig.GROUP_ID_CONFIG,config.getGroupId());\n  properties.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG,config.getBootstrapServers());\n  AdminClient adminClient=AdminClient.create(properties);\n  Set<String> missedTopics=adminClient.describeTopics(Lists.newArrayList(config.getTopicNameOfManagements(),config.getTopicNameOfMetrics(),config.getTopicNameOfProfiling(),config.getTopicNameOfTracingSegments(),config.getTopicNameOfMeters())).values().entrySet().stream().map(entry -> {\n    try {\n      entry.getValue().get();\n      return null;\n    }\n catch (    InterruptedException|ExecutionException e) {\n    }\n    return entry.getKey();\n  }\n).filter(Objects::nonNull).collect(Collectors.toSet());\n  if (!missedTopics.isEmpty()) {\n    log.info(\"Topics\" + missedTopics.toString() + \" not exist.\");\n    List<NewTopic> newTopicList=missedTopics.stream().map(topic -> new NewTopic(topic,config.getPartitions(),(short)config.getReplicationFactor())).collect(Collectors.toList());\n    try {\n      adminClient.createTopics(newTopicList).all().get();\n    }\n catch (    Exception e) {\n      throw new ModuleStartException(\"Failed to create Kafka Topics\" + missedTopics + \".\",e);\n    }\n  }\n  if (config.isSharding() && StringUtil.isNotEmpty(config.getConsumePartitions())) {\n    isSharding=true;\n  }\n else {\n    isSharding=false;\n  }\n  if (config.getKafkaHandlerThreadPoolSize() > 0) {\n    threadPoolSize=config.getKafkaHandlerThreadPoolSize();\n  }\n  if (config.getKafkaHandlerThreadPoolQueueSize() > 0) {\n    threadPoolQueueSize=config.getKafkaHandlerThreadPoolQueueSize();\n  }\n  enableKafkaMessageAutoCommit=(boolean)properties.getOrDefault(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG,true);\n  consumer=new KafkaConsumer<>(properties,new StringDeserializer(),new BytesDeserializer());\n  executor=new ThreadPoolExecutor(threadPoolSize,threadPoolSize,60,TimeUnit.SECONDS,new ArrayBlockingQueue(threadPoolQueueSize),new CustomThreadFactory(\"KafkaConsumer\"),new ThreadPoolExecutor.CallerRunsPolicy());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 298,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3635,
        "startLineNumber" : 70,
        "startColumnNumber" : 4,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public KafkaFetcherHandlerRegister(KafkaFetcherConfig config) throws ModuleStartException {\n  this.config=config;\n  Properties properties=new Properties();\n  properties.putAll(config.getKafkaConsumerConfig());\n  properties.setProperty(ConsumerConfig.GROUP_ID_CONFIG,config.getGroupId());\n  properties.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG,config.getBootstrapServers());\n  AdminClient adminClient=AdminClient.create(properties);\n  Set<String> missedTopics=adminClient.describeTopics(Lists.newArrayList(config.getTopicNameOfManagements(),config.getTopicNameOfMetrics(),config.getTopicNameOfProfiling(),config.getTopicNameOfTracingSegments(),config.getTopicNameOfMeters())).values().entrySet().stream().map(entry -> {\n    try {\n      entry.getValue().get();\n      return null;\n    }\n catch (    InterruptedException|ExecutionException e) {\n    }\n    return entry.getKey();\n  }\n).filter(Objects::nonNull).collect(Collectors.toSet());\n  if (!missedTopics.isEmpty()) {\n    log.info(\"Topics\" + missedTopics.toString() + \" not exist.\");\n    List<NewTopic> newTopicList=missedTopics.stream().map(topic -> new NewTopic(topic,config.getPartitions(),(short)config.getReplicationFactor())).collect(Collectors.toList());\n    try {\n      adminClient.createTopics(newTopicList).all().get();\n    }\n catch (    Exception e) {\n      throw new ModuleStartException(\"Failed to create Kafka Topics\" + missedTopics + \".\",e);\n    }\n  }\n  if (config.isSharding() && StringUtil.isNotEmpty(config.getConsumePartitions())) {\n    isSharding=true;\n  }\n else {\n    isSharding=false;\n  }\n  if (config.getKafkaHandlerThreadPoolSize() > 0) {\n    threadPoolSize=config.getKafkaHandlerThreadPoolSize();\n  }\n  if (config.getKafkaHandlerThreadPoolQueueSize() > 0) {\n    threadPoolQueueSize=config.getKafkaHandlerThreadPoolQueueSize();\n  }\n  enableKafkaMessageAutoCommit=(boolean)properties.getOrDefault(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG,true);\n  consumer=new KafkaConsumer<>(properties,new StringDeserializer(),new BytesDeserializer());\n  executor=new ThreadPoolExecutor(threadPoolSize,threadPoolSize,60,TimeUnit.SECONDS,new ArrayBlockingQueue(threadPoolQueueSize),new CustomThreadFactory(\"KafkaConsumer\"),new ThreadPoolExecutor.CallerRunsPolicy());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 307,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 75,
        "startColumnNumber" : 8,
        "endLineNumber" : 75,
        "endColumnNumber" : 84
      },
      "nodeContext" : "properties.setProperty(ConsumerConfig.GROUP_ID_CONFIG,config.getGroupId());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.Properties"
  }, {
    "nodeContext" : "properties",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 76,
      "startColumnNumber" : 8,
      "endLineNumber" : 76,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 76,
        "startColumnNumber" : 8,
        "endLineNumber" : 76,
        "endColumnNumber" : 101
      },
      "nodeContext" : "properties.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG,config.getBootstrapServers())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 76,
        "startColumnNumber" : 8,
        "endLineNumber" : 76,
        "endColumnNumber" : 102
      },
      "nodeContext" : "properties.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG,config.getBootstrapServers());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3545,
        "startLineNumber" : 70,
        "startColumnNumber" : 94,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.config=config;\n  Properties properties=new Properties();\n  properties.putAll(config.getKafkaConsumerConfig());\n  properties.setProperty(ConsumerConfig.GROUP_ID_CONFIG,config.getGroupId());\n  properties.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG,config.getBootstrapServers());\n  AdminClient adminClient=AdminClient.create(properties);\n  Set<String> missedTopics=adminClient.describeTopics(Lists.newArrayList(config.getTopicNameOfManagements(),config.getTopicNameOfMetrics(),config.getTopicNameOfProfiling(),config.getTopicNameOfTracingSegments(),config.getTopicNameOfMeters())).values().entrySet().stream().map(entry -> {\n    try {\n      entry.getValue().get();\n      return null;\n    }\n catch (    InterruptedException|ExecutionException e) {\n    }\n    return entry.getKey();\n  }\n).filter(Objects::nonNull).collect(Collectors.toSet());\n  if (!missedTopics.isEmpty()) {\n    log.info(\"Topics\" + missedTopics.toString() + \" not exist.\");\n    List<NewTopic> newTopicList=missedTopics.stream().map(topic -> new NewTopic(topic,config.getPartitions(),(short)config.getReplicationFactor())).collect(Collectors.toList());\n    try {\n      adminClient.createTopics(newTopicList).all().get();\n    }\n catch (    Exception e) {\n      throw new ModuleStartException(\"Failed to create Kafka Topics\" + missedTopics + \".\",e);\n    }\n  }\n  if (config.isSharding() && StringUtil.isNotEmpty(config.getConsumePartitions())) {\n    isSharding=true;\n  }\n else {\n    isSharding=false;\n  }\n  if (config.getKafkaHandlerThreadPoolSize() > 0) {\n    threadPoolSize=config.getKafkaHandlerThreadPoolSize();\n  }\n  if (config.getKafkaHandlerThreadPoolQueueSize() > 0) {\n    threadPoolQueueSize=config.getKafkaHandlerThreadPoolQueueSize();\n  }\n  enableKafkaMessageAutoCommit=(boolean)properties.getOrDefault(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG,true);\n  consumer=new KafkaConsumer<>(properties,new StringDeserializer(),new BytesDeserializer());\n  executor=new ThreadPoolExecutor(threadPoolSize,threadPoolSize,60,TimeUnit.SECONDS,new ArrayBlockingQueue(threadPoolQueueSize),new CustomThreadFactory(\"KafkaConsumer\"),new ThreadPoolExecutor.CallerRunsPolicy());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 298,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3635,
        "startLineNumber" : 70,
        "startColumnNumber" : 4,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public KafkaFetcherHandlerRegister(KafkaFetcherConfig config) throws ModuleStartException {\n  this.config=config;\n  Properties properties=new Properties();\n  properties.putAll(config.getKafkaConsumerConfig());\n  properties.setProperty(ConsumerConfig.GROUP_ID_CONFIG,config.getGroupId());\n  properties.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG,config.getBootstrapServers());\n  AdminClient adminClient=AdminClient.create(properties);\n  Set<String> missedTopics=adminClient.describeTopics(Lists.newArrayList(config.getTopicNameOfManagements(),config.getTopicNameOfMetrics(),config.getTopicNameOfProfiling(),config.getTopicNameOfTracingSegments(),config.getTopicNameOfMeters())).values().entrySet().stream().map(entry -> {\n    try {\n      entry.getValue().get();\n      return null;\n    }\n catch (    InterruptedException|ExecutionException e) {\n    }\n    return entry.getKey();\n  }\n).filter(Objects::nonNull).collect(Collectors.toSet());\n  if (!missedTopics.isEmpty()) {\n    log.info(\"Topics\" + missedTopics.toString() + \" not exist.\");\n    List<NewTopic> newTopicList=missedTopics.stream().map(topic -> new NewTopic(topic,config.getPartitions(),(short)config.getReplicationFactor())).collect(Collectors.toList());\n    try {\n      adminClient.createTopics(newTopicList).all().get();\n    }\n catch (    Exception e) {\n      throw new ModuleStartException(\"Failed to create Kafka Topics\" + missedTopics + \".\",e);\n    }\n  }\n  if (config.isSharding() && StringUtil.isNotEmpty(config.getConsumePartitions())) {\n    isSharding=true;\n  }\n else {\n    isSharding=false;\n  }\n  if (config.getKafkaHandlerThreadPoolSize() > 0) {\n    threadPoolSize=config.getKafkaHandlerThreadPoolSize();\n  }\n  if (config.getKafkaHandlerThreadPoolQueueSize() > 0) {\n    threadPoolQueueSize=config.getKafkaHandlerThreadPoolQueueSize();\n  }\n  enableKafkaMessageAutoCommit=(boolean)properties.getOrDefault(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG,true);\n  consumer=new KafkaConsumer<>(properties,new StringDeserializer(),new BytesDeserializer());\n  executor=new ThreadPoolExecutor(threadPoolSize,threadPoolSize,60,TimeUnit.SECONDS,new ArrayBlockingQueue(threadPoolQueueSize),new CustomThreadFactory(\"KafkaConsumer\"),new ThreadPoolExecutor.CallerRunsPolicy());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 307,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 76,
        "startColumnNumber" : 8,
        "endLineNumber" : 76,
        "endColumnNumber" : 102
      },
      "nodeContext" : "properties.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG,config.getBootstrapServers());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.Properties"
  }, {
    "nodeContext" : "properties",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 78,
      "startColumnNumber" : 53,
      "endLineNumber" : 78,
      "endColumnNumber" : 63
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 78,
        "startColumnNumber" : 34,
        "endLineNumber" : 78,
        "endColumnNumber" : 64
      },
      "nodeContext" : "AdminClient.create(properties)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 78,
        "startColumnNumber" : 20,
        "endLineNumber" : 78,
        "endColumnNumber" : 64
      },
      "nodeContext" : "adminClient=AdminClient.create(properties)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 65
      },
      "nodeContext" : "AdminClient adminClient=AdminClient.create(properties);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3545,
        "startLineNumber" : 70,
        "startColumnNumber" : 94,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.config=config;\n  Properties properties=new Properties();\n  properties.putAll(config.getKafkaConsumerConfig());\n  properties.setProperty(ConsumerConfig.GROUP_ID_CONFIG,config.getGroupId());\n  properties.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG,config.getBootstrapServers());\n  AdminClient adminClient=AdminClient.create(properties);\n  Set<String> missedTopics=adminClient.describeTopics(Lists.newArrayList(config.getTopicNameOfManagements(),config.getTopicNameOfMetrics(),config.getTopicNameOfProfiling(),config.getTopicNameOfTracingSegments(),config.getTopicNameOfMeters())).values().entrySet().stream().map(entry -> {\n    try {\n      entry.getValue().get();\n      return null;\n    }\n catch (    InterruptedException|ExecutionException e) {\n    }\n    return entry.getKey();\n  }\n).filter(Objects::nonNull).collect(Collectors.toSet());\n  if (!missedTopics.isEmpty()) {\n    log.info(\"Topics\" + missedTopics.toString() + \" not exist.\");\n    List<NewTopic> newTopicList=missedTopics.stream().map(topic -> new NewTopic(topic,config.getPartitions(),(short)config.getReplicationFactor())).collect(Collectors.toList());\n    try {\n      adminClient.createTopics(newTopicList).all().get();\n    }\n catch (    Exception e) {\n      throw new ModuleStartException(\"Failed to create Kafka Topics\" + missedTopics + \".\",e);\n    }\n  }\n  if (config.isSharding() && StringUtil.isNotEmpty(config.getConsumePartitions())) {\n    isSharding=true;\n  }\n else {\n    isSharding=false;\n  }\n  if (config.getKafkaHandlerThreadPoolSize() > 0) {\n    threadPoolSize=config.getKafkaHandlerThreadPoolSize();\n  }\n  if (config.getKafkaHandlerThreadPoolQueueSize() > 0) {\n    threadPoolQueueSize=config.getKafkaHandlerThreadPoolQueueSize();\n  }\n  enableKafkaMessageAutoCommit=(boolean)properties.getOrDefault(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG,true);\n  consumer=new KafkaConsumer<>(properties,new StringDeserializer(),new BytesDeserializer());\n  executor=new ThreadPoolExecutor(threadPoolSize,threadPoolSize,60,TimeUnit.SECONDS,new ArrayBlockingQueue(threadPoolQueueSize),new CustomThreadFactory(\"KafkaConsumer\"),new ThreadPoolExecutor.CallerRunsPolicy());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 298,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3635,
        "startLineNumber" : 70,
        "startColumnNumber" : 4,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public KafkaFetcherHandlerRegister(KafkaFetcherConfig config) throws ModuleStartException {\n  this.config=config;\n  Properties properties=new Properties();\n  properties.putAll(config.getKafkaConsumerConfig());\n  properties.setProperty(ConsumerConfig.GROUP_ID_CONFIG,config.getGroupId());\n  properties.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG,config.getBootstrapServers());\n  AdminClient adminClient=AdminClient.create(properties);\n  Set<String> missedTopics=adminClient.describeTopics(Lists.newArrayList(config.getTopicNameOfManagements(),config.getTopicNameOfMetrics(),config.getTopicNameOfProfiling(),config.getTopicNameOfTracingSegments(),config.getTopicNameOfMeters())).values().entrySet().stream().map(entry -> {\n    try {\n      entry.getValue().get();\n      return null;\n    }\n catch (    InterruptedException|ExecutionException e) {\n    }\n    return entry.getKey();\n  }\n).filter(Objects::nonNull).collect(Collectors.toSet());\n  if (!missedTopics.isEmpty()) {\n    log.info(\"Topics\" + missedTopics.toString() + \" not exist.\");\n    List<NewTopic> newTopicList=missedTopics.stream().map(topic -> new NewTopic(topic,config.getPartitions(),(short)config.getReplicationFactor())).collect(Collectors.toList());\n    try {\n      adminClient.createTopics(newTopicList).all().get();\n    }\n catch (    Exception e) {\n      throw new ModuleStartException(\"Failed to create Kafka Topics\" + missedTopics + \".\",e);\n    }\n  }\n  if (config.isSharding() && StringUtil.isNotEmpty(config.getConsumePartitions())) {\n    isSharding=true;\n  }\n else {\n    isSharding=false;\n  }\n  if (config.getKafkaHandlerThreadPoolSize() > 0) {\n    threadPoolSize=config.getKafkaHandlerThreadPoolSize();\n  }\n  if (config.getKafkaHandlerThreadPoolQueueSize() > 0) {\n    threadPoolQueueSize=config.getKafkaHandlerThreadPoolQueueSize();\n  }\n  enableKafkaMessageAutoCommit=(boolean)properties.getOrDefault(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG,true);\n  consumer=new KafkaConsumer<>(properties,new StringDeserializer(),new BytesDeserializer());\n  executor=new ThreadPoolExecutor(threadPoolSize,threadPoolSize,60,TimeUnit.SECONDS,new ArrayBlockingQueue(threadPoolQueueSize),new CustomThreadFactory(\"KafkaConsumer\"),new ThreadPoolExecutor.CallerRunsPolicy());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 307,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 65
      },
      "nodeContext" : "AdminClient adminClient=AdminClient.create(properties);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.Properties"
  }, {
    "nodeContext" : "properties",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 128,
      "startColumnNumber" : 49,
      "endLineNumber" : 128,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 128,
        "startColumnNumber" : 49,
        "endLineNumber" : 129,
        "endColumnNumber" : 59
      },
      "nodeContext" : "properties.getOrDefault(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG,true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 128,
        "startColumnNumber" : 39,
        "endLineNumber" : 129,
        "endColumnNumber" : 59
      },
      "nodeContext" : "(boolean)properties.getOrDefault(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG,true)",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 125,
        "startLineNumber" : 128,
        "startColumnNumber" : 8,
        "endLineNumber" : 129,
        "endColumnNumber" : 59
      },
      "nodeContext" : "enableKafkaMessageAutoCommit=(boolean)properties.getOrDefault(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG,true)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 126,
        "startLineNumber" : 128,
        "startColumnNumber" : 8,
        "endLineNumber" : 129,
        "endColumnNumber" : 60
      },
      "nodeContext" : "enableKafkaMessageAutoCommit=(boolean)properties.getOrDefault(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG,true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3545,
        "startLineNumber" : 70,
        "startColumnNumber" : 94,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.config=config;\n  Properties properties=new Properties();\n  properties.putAll(config.getKafkaConsumerConfig());\n  properties.setProperty(ConsumerConfig.GROUP_ID_CONFIG,config.getGroupId());\n  properties.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG,config.getBootstrapServers());\n  AdminClient adminClient=AdminClient.create(properties);\n  Set<String> missedTopics=adminClient.describeTopics(Lists.newArrayList(config.getTopicNameOfManagements(),config.getTopicNameOfMetrics(),config.getTopicNameOfProfiling(),config.getTopicNameOfTracingSegments(),config.getTopicNameOfMeters())).values().entrySet().stream().map(entry -> {\n    try {\n      entry.getValue().get();\n      return null;\n    }\n catch (    InterruptedException|ExecutionException e) {\n    }\n    return entry.getKey();\n  }\n).filter(Objects::nonNull).collect(Collectors.toSet());\n  if (!missedTopics.isEmpty()) {\n    log.info(\"Topics\" + missedTopics.toString() + \" not exist.\");\n    List<NewTopic> newTopicList=missedTopics.stream().map(topic -> new NewTopic(topic,config.getPartitions(),(short)config.getReplicationFactor())).collect(Collectors.toList());\n    try {\n      adminClient.createTopics(newTopicList).all().get();\n    }\n catch (    Exception e) {\n      throw new ModuleStartException(\"Failed to create Kafka Topics\" + missedTopics + \".\",e);\n    }\n  }\n  if (config.isSharding() && StringUtil.isNotEmpty(config.getConsumePartitions())) {\n    isSharding=true;\n  }\n else {\n    isSharding=false;\n  }\n  if (config.getKafkaHandlerThreadPoolSize() > 0) {\n    threadPoolSize=config.getKafkaHandlerThreadPoolSize();\n  }\n  if (config.getKafkaHandlerThreadPoolQueueSize() > 0) {\n    threadPoolQueueSize=config.getKafkaHandlerThreadPoolQueueSize();\n  }\n  enableKafkaMessageAutoCommit=(boolean)properties.getOrDefault(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG,true);\n  consumer=new KafkaConsumer<>(properties,new StringDeserializer(),new BytesDeserializer());\n  executor=new ThreadPoolExecutor(threadPoolSize,threadPoolSize,60,TimeUnit.SECONDS,new ArrayBlockingQueue(threadPoolQueueSize),new CustomThreadFactory(\"KafkaConsumer\"),new ThreadPoolExecutor.CallerRunsPolicy());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 298,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3635,
        "startLineNumber" : 70,
        "startColumnNumber" : 4,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public KafkaFetcherHandlerRegister(KafkaFetcherConfig config) throws ModuleStartException {\n  this.config=config;\n  Properties properties=new Properties();\n  properties.putAll(config.getKafkaConsumerConfig());\n  properties.setProperty(ConsumerConfig.GROUP_ID_CONFIG,config.getGroupId());\n  properties.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG,config.getBootstrapServers());\n  AdminClient adminClient=AdminClient.create(properties);\n  Set<String> missedTopics=adminClient.describeTopics(Lists.newArrayList(config.getTopicNameOfManagements(),config.getTopicNameOfMetrics(),config.getTopicNameOfProfiling(),config.getTopicNameOfTracingSegments(),config.getTopicNameOfMeters())).values().entrySet().stream().map(entry -> {\n    try {\n      entry.getValue().get();\n      return null;\n    }\n catch (    InterruptedException|ExecutionException e) {\n    }\n    return entry.getKey();\n  }\n).filter(Objects::nonNull).collect(Collectors.toSet());\n  if (!missedTopics.isEmpty()) {\n    log.info(\"Topics\" + missedTopics.toString() + \" not exist.\");\n    List<NewTopic> newTopicList=missedTopics.stream().map(topic -> new NewTopic(topic,config.getPartitions(),(short)config.getReplicationFactor())).collect(Collectors.toList());\n    try {\n      adminClient.createTopics(newTopicList).all().get();\n    }\n catch (    Exception e) {\n      throw new ModuleStartException(\"Failed to create Kafka Topics\" + missedTopics + \".\",e);\n    }\n  }\n  if (config.isSharding() && StringUtil.isNotEmpty(config.getConsumePartitions())) {\n    isSharding=true;\n  }\n else {\n    isSharding=false;\n  }\n  if (config.getKafkaHandlerThreadPoolSize() > 0) {\n    threadPoolSize=config.getKafkaHandlerThreadPoolSize();\n  }\n  if (config.getKafkaHandlerThreadPoolQueueSize() > 0) {\n    threadPoolQueueSize=config.getKafkaHandlerThreadPoolQueueSize();\n  }\n  enableKafkaMessageAutoCommit=(boolean)properties.getOrDefault(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG,true);\n  consumer=new KafkaConsumer<>(properties,new StringDeserializer(),new BytesDeserializer());\n  executor=new ThreadPoolExecutor(threadPoolSize,threadPoolSize,60,TimeUnit.SECONDS,new ArrayBlockingQueue(threadPoolQueueSize),new CustomThreadFactory(\"KafkaConsumer\"),new ThreadPoolExecutor.CallerRunsPolicy());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 307,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 128,
        "startColumnNumber" : 49,
        "endLineNumber" : 129,
        "endColumnNumber" : 59
      },
      "nodeContext" : "properties.getOrDefault(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG,true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.Properties"
  }, {
    "nodeContext" : "properties",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 130,
      "startColumnNumber" : 39,
      "endLineNumber" : 130,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 130,
        "startColumnNumber" : 19,
        "endLineNumber" : 130,
        "endColumnNumber" : 101
      },
      "nodeContext" : "new KafkaConsumer<>(properties,new StringDeserializer(),new BytesDeserializer())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 130,
        "startColumnNumber" : 8,
        "endLineNumber" : 130,
        "endColumnNumber" : 101
      },
      "nodeContext" : "consumer=new KafkaConsumer<>(properties,new StringDeserializer(),new BytesDeserializer())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 130,
        "startColumnNumber" : 8,
        "endLineNumber" : 130,
        "endColumnNumber" : 102
      },
      "nodeContext" : "consumer=new KafkaConsumer<>(properties,new StringDeserializer(),new BytesDeserializer());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3545,
        "startLineNumber" : 70,
        "startColumnNumber" : 94,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  this.config=config;\n  Properties properties=new Properties();\n  properties.putAll(config.getKafkaConsumerConfig());\n  properties.setProperty(ConsumerConfig.GROUP_ID_CONFIG,config.getGroupId());\n  properties.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG,config.getBootstrapServers());\n  AdminClient adminClient=AdminClient.create(properties);\n  Set<String> missedTopics=adminClient.describeTopics(Lists.newArrayList(config.getTopicNameOfManagements(),config.getTopicNameOfMetrics(),config.getTopicNameOfProfiling(),config.getTopicNameOfTracingSegments(),config.getTopicNameOfMeters())).values().entrySet().stream().map(entry -> {\n    try {\n      entry.getValue().get();\n      return null;\n    }\n catch (    InterruptedException|ExecutionException e) {\n    }\n    return entry.getKey();\n  }\n).filter(Objects::nonNull).collect(Collectors.toSet());\n  if (!missedTopics.isEmpty()) {\n    log.info(\"Topics\" + missedTopics.toString() + \" not exist.\");\n    List<NewTopic> newTopicList=missedTopics.stream().map(topic -> new NewTopic(topic,config.getPartitions(),(short)config.getReplicationFactor())).collect(Collectors.toList());\n    try {\n      adminClient.createTopics(newTopicList).all().get();\n    }\n catch (    Exception e) {\n      throw new ModuleStartException(\"Failed to create Kafka Topics\" + missedTopics + \".\",e);\n    }\n  }\n  if (config.isSharding() && StringUtil.isNotEmpty(config.getConsumePartitions())) {\n    isSharding=true;\n  }\n else {\n    isSharding=false;\n  }\n  if (config.getKafkaHandlerThreadPoolSize() > 0) {\n    threadPoolSize=config.getKafkaHandlerThreadPoolSize();\n  }\n  if (config.getKafkaHandlerThreadPoolQueueSize() > 0) {\n    threadPoolQueueSize=config.getKafkaHandlerThreadPoolQueueSize();\n  }\n  enableKafkaMessageAutoCommit=(boolean)properties.getOrDefault(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG,true);\n  consumer=new KafkaConsumer<>(properties,new StringDeserializer(),new BytesDeserializer());\n  executor=new ThreadPoolExecutor(threadPoolSize,threadPoolSize,60,TimeUnit.SECONDS,new ArrayBlockingQueue(threadPoolQueueSize),new CustomThreadFactory(\"KafkaConsumer\"),new ThreadPoolExecutor.CallerRunsPolicy());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 298,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3635,
        "startLineNumber" : 70,
        "startColumnNumber" : 4,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public KafkaFetcherHandlerRegister(KafkaFetcherConfig config) throws ModuleStartException {\n  this.config=config;\n  Properties properties=new Properties();\n  properties.putAll(config.getKafkaConsumerConfig());\n  properties.setProperty(ConsumerConfig.GROUP_ID_CONFIG,config.getGroupId());\n  properties.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG,config.getBootstrapServers());\n  AdminClient adminClient=AdminClient.create(properties);\n  Set<String> missedTopics=adminClient.describeTopics(Lists.newArrayList(config.getTopicNameOfManagements(),config.getTopicNameOfMetrics(),config.getTopicNameOfProfiling(),config.getTopicNameOfTracingSegments(),config.getTopicNameOfMeters())).values().entrySet().stream().map(entry -> {\n    try {\n      entry.getValue().get();\n      return null;\n    }\n catch (    InterruptedException|ExecutionException e) {\n    }\n    return entry.getKey();\n  }\n).filter(Objects::nonNull).collect(Collectors.toSet());\n  if (!missedTopics.isEmpty()) {\n    log.info(\"Topics\" + missedTopics.toString() + \" not exist.\");\n    List<NewTopic> newTopicList=missedTopics.stream().map(topic -> new NewTopic(topic,config.getPartitions(),(short)config.getReplicationFactor())).collect(Collectors.toList());\n    try {\n      adminClient.createTopics(newTopicList).all().get();\n    }\n catch (    Exception e) {\n      throw new ModuleStartException(\"Failed to create Kafka Topics\" + missedTopics + \".\",e);\n    }\n  }\n  if (config.isSharding() && StringUtil.isNotEmpty(config.getConsumePartitions())) {\n    isSharding=true;\n  }\n else {\n    isSharding=false;\n  }\n  if (config.getKafkaHandlerThreadPoolSize() > 0) {\n    threadPoolSize=config.getKafkaHandlerThreadPoolSize();\n  }\n  if (config.getKafkaHandlerThreadPoolQueueSize() > 0) {\n    threadPoolQueueSize=config.getKafkaHandlerThreadPoolQueueSize();\n  }\n  enableKafkaMessageAutoCommit=(boolean)properties.getOrDefault(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG,true);\n  consumer=new KafkaConsumer<>(properties,new StringDeserializer(),new BytesDeserializer());\n  executor=new ThreadPoolExecutor(threadPoolSize,threadPoolSize,60,TimeUnit.SECONDS,new ArrayBlockingQueue(threadPoolQueueSize),new CustomThreadFactory(\"KafkaConsumer\"),new ThreadPoolExecutor.CallerRunsPolicy());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 307,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 130,
        "startColumnNumber" : 8,
        "endLineNumber" : 130,
        "endColumnNumber" : 102
      },
      "nodeContext" : "consumer=new KafkaConsumer<>(properties,new StringDeserializer(),new BytesDeserializer());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.util.Properties"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 74,
    "startColumnNumber" : 8,
    "endLineNumber" : 74,
    "endColumnNumber" : 18
  }, {
    "charLength" : 10,
    "startLineNumber" : 75,
    "startColumnNumber" : 8,
    "endLineNumber" : 75,
    "endColumnNumber" : 18
  }, {
    "charLength" : 10,
    "startLineNumber" : 76,
    "startColumnNumber" : 8,
    "endLineNumber" : 76,
    "endColumnNumber" : 18
  }, {
    "charLength" : 10,
    "startLineNumber" : 78,
    "startColumnNumber" : 53,
    "endLineNumber" : 78,
    "endColumnNumber" : 63
  }, {
    "charLength" : 10,
    "startLineNumber" : 128,
    "startColumnNumber" : 49,
    "endLineNumber" : 128,
    "endColumnNumber" : 59
  }, {
    "charLength" : 10,
    "startLineNumber" : 130,
    "startColumnNumber" : 39,
    "endLineNumber" : 130,
    "endColumnNumber" : 49
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 3
  } ]
}