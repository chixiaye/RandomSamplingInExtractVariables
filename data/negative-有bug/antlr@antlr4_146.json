{
  "id" : 146,
  "expression" : "\" [@6,8:8='*',<6>,1:8], [@7,9:9=' ',<7>,1:9], [@8,10:11='91',<2>,1:10],\"",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/tool-testsuite/test/org/antlr/v4/test/tool/TestUnbufferedCharStream.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\" [@6,8:8='*',<6>,1:8], [@7,9:9=' ',<7>,1:9], [@8,10:11='91',<2>,1:10],\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 72,
      "startLineNumber" : 308,
      "startColumnNumber" : 3,
      "endLineNumber" : 308,
      "endColumnNumber" : 75
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 526,
        "startLineNumber" : 306,
        "startColumnNumber" : 3,
        "endLineNumber" : 312,
        "endColumnNumber" : 57
      },
      "nodeContext" : "\"[[@0,0:0='x',<1>,1:0], [@1,1:1=' ',<7>,1:1], [@2,2:2='=',<4>,1:2],\" + \" [@3,3:3=' ',<7>,1:3], [@4,4:6='302',<2>,1:4], [@5,7:7=' ',<7>,1:7],\" + \" [@6,8:8='*',<6>,1:8], [@7,9:9=' ',<7>,1:9], [@8,10:11='91',<2>,1:10],\"+ \" [@9,12:12=' ',<7>,1:12], [@10,13:13='+',<5>,1:13], [@11,14:14=' ',<7>,1:14],\"+ \" [@12,15:22='20234234',<2>,1:15], [@13,23:23=' ',<7>,1:23],\"+ \" [@14,24:24='*',<6>,1:24], [@15,25:25=' ',<7>,1:25], [@16,26:26='0',<2>,1:26],\"+ \" [@17,27:27=';',<3>,1:27], [@18,28:27='',<-1>,1:28]]\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 542,
        "startLineNumber" : 305,
        "startColumnNumber" : 2,
        "endLineNumber" : 312,
        "endColumnNumber" : 57
      },
      "nodeContext" : "expecting=\"[[@0,0:0='x',<1>,1:0], [@1,1:1=' ',<7>,1:1], [@2,2:2='=',<4>,1:2],\" + \" [@3,3:3=' ',<7>,1:3], [@4,4:6='302',<2>,1:4], [@5,7:7=' ',<7>,1:7],\" + \" [@6,8:8='*',<6>,1:8], [@7,9:9=' ',<7>,1:9], [@8,10:11='91',<2>,1:10],\"+ \" [@9,12:12=' ',<7>,1:12], [@10,13:13='+',<5>,1:13], [@11,14:14=' ',<7>,1:14],\"+ \" [@12,15:22='20234234',<2>,1:15], [@13,23:23=' ',<7>,1:23],\"+ \" [@14,24:24='*',<6>,1:24], [@15,25:25=' ',<7>,1:25], [@16,26:26='0',<2>,1:26],\"+ \" [@17,27:27=';',<3>,1:27], [@18,28:27='',<-1>,1:28]]\"",
      "nodeType" : "Assignment",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 543,
        "startLineNumber" : 305,
        "startColumnNumber" : 2,
        "endLineNumber" : 312,
        "endColumnNumber" : 58
      },
      "nodeContext" : "expecting=\"[[@0,0:0='x',<1>,1:0], [@1,1:1=' ',<7>,1:1], [@2,2:2='=',<4>,1:2],\" + \" [@3,3:3=' ',<7>,1:3], [@4,4:6='302',<2>,1:4], [@5,7:7=' ',<7>,1:7],\" + \" [@6,8:8='*',<6>,1:8], [@7,9:9=' ',<7>,1:9], [@8,10:11='91',<2>,1:10],\"+ \" [@9,12:12=' ',<7>,1:12], [@10,13:13='+',<5>,1:13], [@11,14:14=' ',<7>,1:14],\"+ \" [@12,15:22='20234234',<2>,1:15], [@13,23:23=' ',<7>,1:23],\"+ \" [@14,24:24='*',<6>,1:24], [@15,25:25=' ',<7>,1:25], [@16,26:26='0',<2>,1:26],\"+ \" [@17,27:27=';',<3>,1:27], [@18,28:27='',<-1>,1:28]]\";\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1413,
        "startLineNumber" : 284,
        "startColumnNumber" : 56,
        "endLineNumber" : 314,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  LexerGrammar g=new LexerGrammar(\"lexer grammar t;\\n\" + \"ID : 'a'..'z'+;\\n\" + \"INT : '0'..'9'+;\\n\"+ \"SEMI : ';';\\n\"+ \"ASSIGN : '=';\\n\"+ \"PLUS : '+';\\n\"+ \"MULT : '*';\\n\"+ \"WS : ' '+;\\n\");\n  TestingUnbufferedCharStream input=createStream(\"x = 302 * 91 + 20234234 * 0;\");\n  LexerInterpreter lexEngine=g.createLexerInterpreter(input);\n  lexEngine.setTokenFactory(new CommonTokenFactory(true));\n  CommonTokenStream tokens=new CommonTokenStream(lexEngine);\n  String result=tokens.LT(1).getText();\n  String expecting=\"x\";\n  assertEquals(expecting,result);\n  tokens.fill();\n  expecting=\"[[@0,0:0='x',<1>,1:0], [@1,1:1=' ',<7>,1:1], [@2,2:2='=',<4>,1:2],\" + \" [@3,3:3=' ',<7>,1:3], [@4,4:6='302',<2>,1:4], [@5,7:7=' ',<7>,1:7],\" + \" [@6,8:8='*',<6>,1:8], [@7,9:9=' ',<7>,1:9], [@8,10:11='91',<2>,1:10],\"+ \" [@9,12:12=' ',<7>,1:12], [@10,13:13='+',<5>,1:13], [@11,14:14=' ',<7>,1:14],\"+ \" [@12,15:22='20234234',<2>,1:15], [@13,23:23=' ',<7>,1:23],\"+ \" [@14,24:24='*',<6>,1:24], [@15,25:25=' ',<7>,1:25], [@16,26:26='0',<2>,1:26],\"+ \" [@17,27:27=';',<3>,1:27], [@18,28:27='',<-1>,1:28]]\";\n  assertEquals(expecting,tokens.getTokens().toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 98,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1465,
        "startLineNumber" : 284,
        "startColumnNumber" : 4,
        "endLineNumber" : 314,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testAFewTokens() throws Exception {\n  LexerGrammar g=new LexerGrammar(\"lexer grammar t;\\n\" + \"ID : 'a'..'z'+;\\n\" + \"INT : '0'..'9'+;\\n\"+ \"SEMI : ';';\\n\"+ \"ASSIGN : '=';\\n\"+ \"PLUS : '+';\\n\"+ \"MULT : '*';\\n\"+ \"WS : ' '+;\\n\");\n  TestingUnbufferedCharStream input=createStream(\"x = 302 * 91 + 20234234 * 0;\");\n  LexerInterpreter lexEngine=g.createLexerInterpreter(input);\n  lexEngine.setTokenFactory(new CommonTokenFactory(true));\n  CommonTokenStream tokens=new CommonTokenStream(lexEngine);\n  String result=tokens.LT(1).getText();\n  String expecting=\"x\";\n  assertEquals(expecting,result);\n  tokens.fill();\n  expecting=\"[[@0,0:0='x',<1>,1:0], [@1,1:1=' ',<7>,1:1], [@2,2:2='=',<4>,1:2],\" + \" [@3,3:3=' ',<7>,1:3], [@4,4:6='302',<2>,1:4], [@5,7:7=' ',<7>,1:7],\" + \" [@6,8:8='*',<6>,1:8], [@7,9:9=' ',<7>,1:9], [@8,10:11='91',<2>,1:10],\"+ \" [@9,12:12=' ',<7>,1:12], [@10,13:13='+',<5>,1:13], [@11,14:14=' ',<7>,1:14],\"+ \" [@12,15:22='20234234',<2>,1:15], [@13,23:23=' ',<7>,1:23],\"+ \" [@14,24:24='*',<6>,1:24], [@15,25:25=' ',<7>,1:25], [@16,26:26='0',<2>,1:26],\"+ \" [@17,27:27=';',<3>,1:27], [@18,28:27='',<-1>,1:28]]\";\n  assertEquals(expecting,tokens.getTokens().toString());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 106,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 526,
        "startLineNumber" : 306,
        "startColumnNumber" : 3,
        "endLineNumber" : 312,
        "endColumnNumber" : 57
      },
      "nodeContext" : "\"[[@0,0:0='x',<1>,1:0], [@1,1:1=' ',<7>,1:1], [@2,2:2='=',<4>,1:2],\" + \" [@3,3:3=' ',<7>,1:3], [@4,4:6='302',<2>,1:4], [@5,7:7=' ',<7>,1:7],\" + \" [@6,8:8='*',<6>,1:8], [@7,9:9=' ',<7>,1:9], [@8,10:11='91',<2>,1:10],\"+ \" [@9,12:12=' ',<7>,1:12], [@10,13:13='+',<5>,1:13], [@11,14:14=' ',<7>,1:14],\"+ \" [@12,15:22='20234234',<2>,1:15], [@13,23:23=' ',<7>,1:23],\"+ \" [@14,24:24='*',<6>,1:24], [@15,25:25=' ',<7>,1:25], [@16,26:26='0',<2>,1:26],\"+ \" [@17,27:27=';',<3>,1:27], [@18,28:27='',<-1>,1:28]]\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 2
    },
    "tokenLength" : 20,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 72,
    "startLineNumber" : 308,
    "startColumnNumber" : 3,
    "endLineNumber" : 308,
    "endColumnNumber" : 75
  } ],
  "layoutRelationDataList" : [ ]
}