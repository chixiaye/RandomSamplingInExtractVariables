{
  "id" : 196,
  "expression" : "entry.getName().endsWith(\".class\")",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/tools/android/java/com/google/devtools/build/android/dexer/DexConversionEnqueuer.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "entry.getName().endsWith(\".class\")",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 34,
      "startLineNumber" : 92,
      "startColumnNumber" : 36,
      "endLineNumber" : 92,
      "endColumnNumber" : 70
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 92,
        "startColumnNumber" : 12,
        "endLineNumber" : 92,
        "endColumnNumber" : 70
      },
      "nodeContext" : "!entry.isDirectory() && entry.getName().endsWith(\".class\")",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 412,
        "startLineNumber" : 92,
        "startColumnNumber" : 8,
        "endLineNumber" : 100,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!entry.isDirectory() && entry.getName().endsWith(\".class\")) {\n  files.put(toDex(entry,content));\n}\n else {\n  if (entry.getCompressedSize() != 0) {\n    entry.setCompressedSize(-1L);\n  }\n  files.put(immediateFuture(new ZipEntryContent(entry,content)));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 46,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1498,
        "startLineNumber" : 74,
        "startColumnNumber" : 40,
        "endLineNumber" : 101,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  ZipEntry entry=entries.nextElement();\n  checkArgument(entry.getSize() >= 0,\"Cannot process entry with unknown size: %s\",entry);\n  checkArgument(entry.getSize() <= Integer.MAX_VALUE,\"Entry too large: %s\",entry);\n  byte[] content;\n  if (entry.getSize() == 0L) {\n    content=EMPTY;\n  }\n else {\n    try (InputStream entryStream=in.getInputStream(entry)){\n      content=new byte[(int)entry.getSize()];\n      ByteStreams.readFully(entryStream,content);\n      checkState(entryStream.read() == -1,\"Too many bytes in jar entry %s, expected %s\",entry,entry.getSize());\n    }\n   }\n  if (!entry.isDirectory() && entry.getName().endsWith(\".class\")) {\n    files.put(toDex(entry,content));\n  }\n else {\n    if (entry.getCompressedSize() != 0) {\n      entry.setCompressedSize(-1L);\n    }\n    files.put(immediateFuture(new ZipEntryContent(entry,content)));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 138,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1532,
        "startLineNumber" : 74,
        "startColumnNumber" : 6,
        "endLineNumber" : 101,
        "endColumnNumber" : 7
      },
      "nodeContext" : "while (entries.hasMoreElements()) {\n  ZipEntry entry=entries.nextElement();\n  checkArgument(entry.getSize() >= 0,\"Cannot process entry with unknown size: %s\",entry);\n  checkArgument(entry.getSize() <= Integer.MAX_VALUE,\"Entry too large: %s\",entry);\n  byte[] content;\n  if (entry.getSize() == 0L) {\n    content=EMPTY;\n  }\n else {\n    try (InputStream entryStream=in.getInputStream(entry)){\n      content=new byte[(int)entry.getSize()];\n      ByteStreams.readFully(entryStream,content);\n      checkState(entryStream.read() == -1,\"Too many bytes in jar entry %s, expected %s\",entry,entry.getSize());\n    }\n   }\n  if (!entry.isDirectory() && entry.getName().endsWith(\".class\")) {\n    files.put(toDex(entry,content));\n  }\n else {\n    if (entry.getCompressedSize() != 0) {\n      entry.setCompressedSize(-1L);\n    }\n    files.put(immediateFuture(new ZipEntryContent(entry,content)));\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 142,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1608,
        "startLineNumber" : 72,
        "startColumnNumber" : 8,
        "endLineNumber" : 102,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Enumeration<? extends ZipEntry> entries=in.entries();\n  while (entries.hasMoreElements()) {\n    ZipEntry entry=entries.nextElement();\n    checkArgument(entry.getSize() >= 0,\"Cannot process entry with unknown size: %s\",entry);\n    checkArgument(entry.getSize() <= Integer.MAX_VALUE,\"Entry too large: %s\",entry);\n    byte[] content;\n    if (entry.getSize() == 0L) {\n      content=EMPTY;\n    }\n else {\n      try (InputStream entryStream=in.getInputStream(entry)){\n        content=new byte[(int)entry.getSize()];\n        ByteStreams.readFully(entryStream,content);\n        checkState(entryStream.read() == -1,\"Too many bytes in jar entry %s, expected %s\",entry,entry.getSize());\n      }\n     }\n    if (!entry.isDirectory() && entry.getName().endsWith(\".class\")) {\n      files.put(toDex(entry,content));\n    }\n else {\n      if (entry.getCompressedSize() != 0) {\n        entry.setCompressedSize(-1L);\n      }\n      files.put(immediateFuture(new ZipEntryContent(entry,content)));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 155,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1809,
        "startLineNumber" : 72,
        "startColumnNumber" : 4,
        "endLineNumber" : 105,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  Enumeration<? extends ZipEntry> entries=in.entries();\n  while (entries.hasMoreElements()) {\n    ZipEntry entry=entries.nextElement();\n    checkArgument(entry.getSize() >= 0,\"Cannot process entry with unknown size: %s\",entry);\n    checkArgument(entry.getSize() <= Integer.MAX_VALUE,\"Entry too large: %s\",entry);\n    byte[] content;\n    if (entry.getSize() == 0L) {\n      content=EMPTY;\n    }\n else {\n      try (InputStream entryStream=in.getInputStream(entry)){\n        content=new byte[(int)entry.getSize()];\n        ByteStreams.readFully(entryStream,content);\n        checkState(entryStream.read() == -1,\"Too many bytes in jar entry %s, expected %s\",entry,entry.getSize());\n      }\n     }\n    if (!entry.isDirectory() && entry.getName().endsWith(\".class\")) {\n      files.put(toDex(entry,content));\n    }\n else {\n      if (entry.getCompressedSize() != 0) {\n        entry.setCompressedSize(-1L);\n      }\n      files.put(immediateFuture(new ZipEntryContent(entry,content)));\n    }\n  }\n}\n  finally {\n  files.put(immediateFuture((ZipEntryContent)null));\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 167,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1836,
        "startLineNumber" : 71,
        "startColumnNumber" : 62,
        "endLineNumber" : 107,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  try {\n    Enumeration<? extends ZipEntry> entries=in.entries();\n    while (entries.hasMoreElements()) {\n      ZipEntry entry=entries.nextElement();\n      checkArgument(entry.getSize() >= 0,\"Cannot process entry with unknown size: %s\",entry);\n      checkArgument(entry.getSize() <= Integer.MAX_VALUE,\"Entry too large: %s\",entry);\n      byte[] content;\n      if (entry.getSize() == 0L) {\n        content=EMPTY;\n      }\n else {\n        try (InputStream entryStream=in.getInputStream(entry)){\n          content=new byte[(int)entry.getSize()];\n          ByteStreams.readFully(entryStream,content);\n          checkState(entryStream.read() == -1,\"Too many bytes in jar entry %s, expected %s\",entry,entry.getSize());\n        }\n       }\n      if (!entry.isDirectory() && entry.getName().endsWith(\".class\")) {\n        files.put(toDex(entry,content));\n      }\n else {\n        if (entry.getCompressedSize() != 0) {\n          entry.setCompressedSize(-1L);\n        }\n        files.put(immediateFuture(new ZipEntryContent(entry,content)));\n      }\n    }\n  }\n  finally {\n    files.put(immediateFuture((ZipEntryContent)null));\n  }\n  return null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 170,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1908,
        "startLineNumber" : 70,
        "startColumnNumber" : 2,
        "endLineNumber" : 107,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Void call() throws InterruptedException, IOException {\n  try {\n    Enumeration<? extends ZipEntry> entries=in.entries();\n    while (entries.hasMoreElements()) {\n      ZipEntry entry=entries.nextElement();\n      checkArgument(entry.getSize() >= 0,\"Cannot process entry with unknown size: %s\",entry);\n      checkArgument(entry.getSize() <= Integer.MAX_VALUE,\"Entry too large: %s\",entry);\n      byte[] content;\n      if (entry.getSize() == 0L) {\n        content=EMPTY;\n      }\n else {\n        try (InputStream entryStream=in.getInputStream(entry)){\n          content=new byte[(int)entry.getSize()];\n          ByteStreams.readFully(entryStream,content);\n          checkState(entryStream.read() == -1,\"Too many bytes in jar entry %s, expected %s\",entry,entry.getSize());\n        }\n       }\n      if (!entry.isDirectory() && entry.getName().endsWith(\".class\")) {\n        files.put(toDex(entry,content));\n      }\n else {\n        if (entry.getCompressedSize() != 0) {\n          entry.setCompressedSize(-1L);\n        }\n        files.put(immediateFuture(new ZipEntryContent(entry,content)));\n      }\n    }\n  }\n  finally {\n    files.put(immediateFuture((ZipEntryContent)null));\n  }\n  return null;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 181,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 92,
        "startColumnNumber" : 12,
        "endLineNumber" : 92,
        "endColumnNumber" : 70
      },
      "nodeContext" : "!entry.isDirectory() && entry.getName().endsWith(\".class\")",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 34,
    "startLineNumber" : 92,
    "startColumnNumber" : 36,
    "endLineNumber" : 92,
    "endColumnNumber" : 70
  } ],
  "layoutRelationDataList" : [ ]
}