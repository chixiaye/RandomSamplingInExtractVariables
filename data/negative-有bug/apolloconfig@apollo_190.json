{
  "id" : 190,
  "expression" : "privilService.hasPrivilege(namespace.getId(),newApp.getOwnerName(),PrivilegeService.PrivilType.REVIEW)",
  "projectName" : "apolloconfig@apollo",
  "commitID" : "7b7d753f78e444f9cf97b0f238f7e33f585cb277",
  "filePath" : "/apollo-biz/src/test/java/com/ctrip/framework/apollo/biz/service/PrivilegeServiceTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "privilService.hasPrivilege(namespace.getId(),newApp.getOwnerName(),PrivilegeService.PrivilType.REVIEW)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 112,
      "startLineNumber" : 82,
      "startColumnNumber" : 23,
      "endLineNumber" : 83,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 14,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 132,
        "startLineNumber" : 82,
        "startColumnNumber" : 4,
        "endLineNumber" : 83,
        "endColumnNumber" : 44
      },
      "nodeContext" : "Assert.assertFalse(privilService.hasPrivilege(namespace.getId(),newApp.getOwnerName(),PrivilegeService.PrivilType.REVIEW))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 133,
        "startLineNumber" : 82,
        "startColumnNumber" : 4,
        "endLineNumber" : 83,
        "endColumnNumber" : 45
      },
      "nodeContext" : "Assert.assertFalse(privilService.hasPrivilege(namespace.getId(),newApp.getOwnerName(),PrivilegeService.PrivilType.REVIEW));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1841,
        "startLineNumber" : 62,
        "startColumnNumber" : 35,
        "endLineNumber" : 96,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  App app=new App();\n  app.setAppId(String.valueOf(System.currentTimeMillis()));\n  app.setName(\"new app \" + System.currentTimeMillis());\n  String owner=\"owner \" + System.currentTimeMillis();\n  app.setOwnerName(owner);\n  app.setOwnerEmail(\"owner \" + System.currentTimeMillis() + \"@ctrip.com\");\n  app.setDataChangeCreatedBy(owner);\n  app.setDataChangeLastModifiedBy(owner);\n  app.setDataChangeCreatedTime(new Date());\n  App newApp=adminService.createNewApp(app);\n  List<Cluster> clusters=clusterService.findClusters(newApp.getAppId());\n  List<Namespace> namespaces=namespaceService.findNamespaces(newApp.getAppId(),clusters.get(0).getName());\n  Namespace namespace=namespaces.get(0);\n  privilService.addPrivilege(namespace.getId(),newApp.getOwnerName(),PrivilegeService.PrivilType.EDIT);\n  Assert.assertTrue(privilService.hasPrivilege(namespace.getId(),newApp.getOwnerName(),PrivilegeService.PrivilType.EDIT));\n  Assert.assertFalse(privilService.hasPrivilege(namespace.getId(),newApp.getOwnerName(),PrivilegeService.PrivilType.REVIEW));\n  Assert.assertFalse(privilService.hasPrivilege(namespace.getId(),newApp.getOwnerName(),PrivilegeService.PrivilType.RELEASE));\n  privilService.addPrivilege(namespace.getId(),\"nobody\",PrivilegeService.PrivilType.EDIT);\n  Assert.assertTrue(privilService.hasPrivilege(namespace.getId(),\"nobody\",PrivilegeService.PrivilType.EDIT));\n  Assert.assertTrue(privilService.hasPrivilege(namespace.getId(),newApp.getOwnerName(),PrivilegeService.PrivilType.EDIT));\n  privilService.addPrivilege(namespace.getId(),\"nobody\",PrivilegeService.PrivilType.RELEASE);\n  Assert.assertTrue(privilService.hasPrivilege(namespace.getId(),\"nobody\",PrivilegeService.PrivilType.RELEASE));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 267,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1882,
        "startLineNumber" : 61,
        "startColumnNumber" : 2,
        "endLineNumber" : 96,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testCheckPrivilege(){\n  App app=new App();\n  app.setAppId(String.valueOf(System.currentTimeMillis()));\n  app.setName(\"new app \" + System.currentTimeMillis());\n  String owner=\"owner \" + System.currentTimeMillis();\n  app.setOwnerName(owner);\n  app.setOwnerEmail(\"owner \" + System.currentTimeMillis() + \"@ctrip.com\");\n  app.setDataChangeCreatedBy(owner);\n  app.setDataChangeLastModifiedBy(owner);\n  app.setDataChangeCreatedTime(new Date());\n  App newApp=adminService.createNewApp(app);\n  List<Cluster> clusters=clusterService.findClusters(newApp.getAppId());\n  List<Namespace> namespaces=namespaceService.findNamespaces(newApp.getAppId(),clusters.get(0).getName());\n  Namespace namespace=namespaces.get(0);\n  privilService.addPrivilege(namespace.getId(),newApp.getOwnerName(),PrivilegeService.PrivilType.EDIT);\n  Assert.assertTrue(privilService.hasPrivilege(namespace.getId(),newApp.getOwnerName(),PrivilegeService.PrivilType.EDIT));\n  Assert.assertFalse(privilService.hasPrivilege(namespace.getId(),newApp.getOwnerName(),PrivilegeService.PrivilType.REVIEW));\n  Assert.assertFalse(privilService.hasPrivilege(namespace.getId(),newApp.getOwnerName(),PrivilegeService.PrivilType.RELEASE));\n  privilService.addPrivilege(namespace.getId(),\"nobody\",PrivilegeService.PrivilType.EDIT);\n  Assert.assertTrue(privilService.hasPrivilege(namespace.getId(),\"nobody\",PrivilegeService.PrivilType.EDIT));\n  Assert.assertTrue(privilService.hasPrivilege(namespace.getId(),newApp.getOwnerName(),PrivilegeService.PrivilType.EDIT));\n  privilService.addPrivilege(namespace.getId(),\"nobody\",PrivilegeService.PrivilType.RELEASE);\n  Assert.assertTrue(privilService.hasPrivilege(namespace.getId(),\"nobody\",PrivilegeService.PrivilType.RELEASE));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 273,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 133,
        "startLineNumber" : 82,
        "startColumnNumber" : 4,
        "endLineNumber" : 83,
        "endColumnNumber" : 45
      },
      "nodeContext" : "Assert.assertFalse(privilService.hasPrivilege(namespace.getId(),newApp.getOwnerName(),PrivilegeService.PrivilType.REVIEW));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    },
    "tokenLength" : 9,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 112,
    "startLineNumber" : 82,
    "startColumnNumber" : 23,
    "endLineNumber" : 83,
    "endColumnNumber" : 43
  } ],
  "layoutRelationDataList" : [ ]
}