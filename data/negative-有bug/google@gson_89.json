{
  "id" : 89,
  "expression" : "field.getGenericType()",
  "projectName" : "google@gson",
  "commitID" : "c3d0f200b352f411b9ebe45c3bf49d4328b2c51f",
  "filePath" : "/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "field.getGenericType()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 117,
      "startColumnNumber" : 66,
      "endLineNumber" : 117,
      "endColumnNumber" : 88
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 117,
        "startColumnNumber" : 25,
        "endLineNumber" : 117,
        "endColumnNumber" : 89
      },
      "nodeContext" : "$Gson$Types.resolve(type.getType(),raw,field.getGenericType())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 117,
        "startColumnNumber" : 13,
        "endLineNumber" : 117,
        "endColumnNumber" : 89
      },
      "nodeContext" : "fieldType=$Gson$Types.resolve(type.getType(),raw,field.getGenericType())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 117,
        "startColumnNumber" : 8,
        "endLineNumber" : 117,
        "endColumnNumber" : 90
      },
      "nodeContext" : "Type fieldType=$Gson$Types.resolve(type.getType(),raw,field.getGenericType());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 714,
        "startLineNumber" : 110,
        "startColumnNumber" : 33,
        "endLineNumber" : 125,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  boolean serialize=excludeField(field,true);\n  boolean deserialize=excludeField(field,false);\n  if (!serialize && !deserialize) {\n    continue;\n  }\n  field.setAccessible(true);\n  Type fieldType=$Gson$Types.resolve(type.getType(),raw,field.getGenericType());\n  BoundField boundField=createBoundField(context,field,getFieldName(field),TypeToken.get(fieldType),serialize,deserialize);\n  BoundField previous=result.put(boundField.name,boundField);\n  if (previous != null) {\n    throw new IllegalArgumentException(declaredType + \" declares multiple JSON fields named \" + previous.name);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 90,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 741,
        "startLineNumber" : 110,
        "startColumnNumber" : 6,
        "endLineNumber" : 125,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (Field field : fields) {\n  boolean serialize=excludeField(field,true);\n  boolean deserialize=excludeField(field,false);\n  if (!serialize && !deserialize) {\n    continue;\n  }\n  field.setAccessible(true);\n  Type fieldType=$Gson$Types.resolve(type.getType(),raw,field.getGenericType());\n  BoundField boundField=createBoundField(context,field,getFieldName(field),TypeToken.get(fieldType),serialize,deserialize);\n  BoundField previous=result.put(boundField.name,boundField);\n  if (previous != null) {\n    throw new IllegalArgumentException(declaredType + \" declares multiple JSON fields named \" + previous.name);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 96,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 932,
        "startLineNumber" : 108,
        "startColumnNumber" : 32,
        "endLineNumber" : 128,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Field[] fields=raw.getDeclaredFields();\n  for (  Field field : fields) {\n    boolean serialize=excludeField(field,true);\n    boolean deserialize=excludeField(field,false);\n    if (!serialize && !deserialize) {\n      continue;\n    }\n    field.setAccessible(true);\n    Type fieldType=$Gson$Types.resolve(type.getType(),raw,field.getGenericType());\n    BoundField boundField=createBoundField(context,field,getFieldName(field),TypeToken.get(fieldType),serialize,deserialize);\n    BoundField previous=result.put(boundField.name,boundField);\n    if (previous != null) {\n      throw new IllegalArgumentException(declaredType + \" declares multiple JSON fields named \" + previous.name);\n    }\n  }\n  type=TypeToken.get($Gson$Types.resolve(type.getType(),raw,raw.getGenericSuperclass()));\n  raw=type.getRawType();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 129,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 960,
        "startLineNumber" : 108,
        "startColumnNumber" : 4,
        "endLineNumber" : 128,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (raw != Object.class) {\n  Field[] fields=raw.getDeclaredFields();\n  for (  Field field : fields) {\n    boolean serialize=excludeField(field,true);\n    boolean deserialize=excludeField(field,false);\n    if (!serialize && !deserialize) {\n      continue;\n    }\n    field.setAccessible(true);\n    Type fieldType=$Gson$Types.resolve(type.getType(),raw,field.getGenericType());\n    BoundField boundField=createBoundField(context,field,getFieldName(field),TypeToken.get(fieldType),serialize,deserialize);\n    BoundField previous=result.put(boundField.name,boundField);\n    if (previous != null) {\n      throw new IllegalArgumentException(declaredType + \" declares multiple JSON fields named \" + previous.name);\n    }\n  }\n  type=TypeToken.get($Gson$Types.resolve(type.getType(),raw,raw.getGenericSuperclass()));\n  raw=type.getRawType();\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 135,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1164,
        "startLineNumber" : 101,
        "startColumnNumber" : 96,
        "endLineNumber" : 130,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Map<String,BoundField> result=new LinkedHashMap<String,BoundField>();\n  if (raw.isInterface()) {\n    return result;\n  }\n  Type declaredType=type.getType();\n  while (raw != Object.class) {\n    Field[] fields=raw.getDeclaredFields();\n    for (    Field field : fields) {\n      boolean serialize=excludeField(field,true);\n      boolean deserialize=excludeField(field,false);\n      if (!serialize && !deserialize) {\n        continue;\n      }\n      field.setAccessible(true);\n      Type fieldType=$Gson$Types.resolve(type.getType(),raw,field.getGenericType());\n      BoundField boundField=createBoundField(context,field,getFieldName(field),TypeToken.get(fieldType),serialize,deserialize);\n      BoundField previous=result.put(boundField.name,boundField);\n      if (previous != null) {\n        throw new IllegalArgumentException(declaredType + \" declares multiple JSON fields named \" + previous.name);\n      }\n    }\n    type=TypeToken.get($Gson$Types.resolve(type.getType(),raw,raw.getGenericSuperclass()));\n    raw=type.getRawType();\n  }\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 171,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1258,
        "startLineNumber" : 101,
        "startColumnNumber" : 2,
        "endLineNumber" : 130,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private Map<String,BoundField> getBoundFields(Gson context,TypeToken<?> type,Class<?> raw){\n  Map<String,BoundField> result=new LinkedHashMap<String,BoundField>();\n  if (raw.isInterface()) {\n    return result;\n  }\n  Type declaredType=type.getType();\n  while (raw != Object.class) {\n    Field[] fields=raw.getDeclaredFields();\n    for (    Field field : fields) {\n      boolean serialize=excludeField(field,true);\n      boolean deserialize=excludeField(field,false);\n      if (!serialize && !deserialize) {\n        continue;\n      }\n      field.setAccessible(true);\n      Type fieldType=$Gson$Types.resolve(type.getType(),raw,field.getGenericType());\n      BoundField boundField=createBoundField(context,field,getFieldName(field),TypeToken.get(fieldType),serialize,deserialize);\n      BoundField previous=result.put(boundField.name,boundField);\n      if (previous != null) {\n        throw new IllegalArgumentException(declaredType + \" declares multiple JSON fields named \" + previous.name);\n      }\n    }\n    type=TypeToken.get($Gson$Types.resolve(type.getType(),raw,raw.getGenericSuperclass()));\n    raw=type.getRawType();\n  }\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 197,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 117,
        "startColumnNumber" : 8,
        "endLineNumber" : 117,
        "endColumnNumber" : 90
      },
      "nodeContext" : "Type fieldType=$Gson$Types.resolve(type.getType(),raw,field.getGenericType());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "java.lang.reflect.Type"
  } ],
  "positionList" : [ {
    "charLength" : 22,
    "startLineNumber" : 117,
    "startColumnNumber" : 66,
    "endLineNumber" : 117,
    "endColumnNumber" : 88
  } ],
  "layoutRelationDataList" : [ ]
}