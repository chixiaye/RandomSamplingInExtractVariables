{
  "id" : 212,
  "expression" : "\"import 'dart:io';\\n\"",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/runtime-testsuite/test/org/antlr/v4/test/runtime/dart/BaseDartTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"import 'dart:io';\\n\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 405,
      "startColumnNumber" : 3,
      "endLineNumber" : 405,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 493,
        "startLineNumber" : 405,
        "startColumnNumber" : 3,
        "endLineNumber" : 418,
        "endColumnNumber" : 8
      },
      "nodeContext" : "\"import 'dart:io';\\n\" + \"\\n\" + \"import 'package:antlr4/antlr4.dart';\\n\"+ \"\\n\"+ \"import '<lexerName>.dart';\\n\"+ \"\\n\"+ \"void main(List\\\\<String> args) async {\\n\"+ \"  CharStream input = await InputStream.fromPath(args[0]);\\n\"+ \"  <lexerName> lex = <lexerName>(input);\\n\"+ \"  CommonTokenStream tokens = CommonTokenStream(lex);\\n\"+ \"  tokens.fill();\\n\"+ \"  for (Object t in tokens.getTokens()!)\\n\"+ \"    print(t);\\n\"+ \"\\n\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 609,
        "startLineNumber" : 405,
        "startColumnNumber" : 3,
        "endLineNumber" : 420,
        "endColumnNumber" : 9
      },
      "nodeContext" : "\"import 'dart:io';\\n\" + \"\\n\" + \"import 'package:antlr4/antlr4.dart';\\n\"+ \"\\n\"+ \"import '<lexerName>.dart';\\n\"+ \"\\n\"+ \"void main(List\\\\<String> args) async {\\n\"+ \"  CharStream input = await InputStream.fromPath(args[0]);\\n\"+ \"  <lexerName> lex = <lexerName>(input);\\n\"+ \"  CommonTokenStream tokens = CommonTokenStream(lex);\\n\"+ \"  tokens.fill();\\n\"+ \"  for (Object t in tokens.getTokens()!)\\n\"+ \"    print(t);\\n\"+ \"\\n\" + (showDFA ? \"stdout.write(lex.interpreter!.getDFA(Lexer.DEFAULT_MODE).toLexerString());\\n\" : \"\") + \"}\\n\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 22,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 626,
        "startLineNumber" : 404,
        "startColumnNumber" : 20,
        "endLineNumber" : 421,
        "endColumnNumber" : 3
      },
      "nodeContext" : "new ST(\"import 'dart:io';\\n\" + \"\\n\" + \"import 'package:antlr4/antlr4.dart';\\n\"+ \"\\n\"+ \"import '<lexerName>.dart';\\n\"+ \"\\n\"+ \"void main(List\\\\<String> args) async {\\n\"+ \"  CharStream input = await InputStream.fromPath(args[0]);\\n\"+ \"  <lexerName> lex = <lexerName>(input);\\n\"+ \"  CommonTokenStream tokens = CommonTokenStream(lex);\\n\"+ \"  tokens.fill();\\n\"+ \"  for (Object t in tokens.getTokens()!)\\n\"+ \"    print(t);\\n\"+ \"\\n\" + (showDFA ? \"stdout.write(lex.interpreter!.getDFA(Lexer.DEFAULT_MODE).toLexerString());\\n\" : \"\") + \"}\\n\")",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 25,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 641,
        "startLineNumber" : 404,
        "startColumnNumber" : 5,
        "endLineNumber" : 421,
        "endColumnNumber" : 3
      },
      "nodeContext" : "outputFileST=new ST(\"import 'dart:io';\\n\" + \"\\n\" + \"import 'package:antlr4/antlr4.dart';\\n\"+ \"\\n\"+ \"import '<lexerName>.dart';\\n\"+ \"\\n\"+ \"void main(List\\\\<String> args) async {\\n\"+ \"  CharStream input = await InputStream.fromPath(args[0]);\\n\"+ \"  <lexerName> lex = <lexerName>(input);\\n\"+ \"  CommonTokenStream tokens = CommonTokenStream(lex);\\n\"+ \"  tokens.fill();\\n\"+ \"  for (Object t in tokens.getTokens()!)\\n\"+ \"    print(t);\\n\"+ \"\\n\" + (showDFA ? \"stdout.write(lex.interpreter!.getDFA(Lexer.DEFAULT_MODE).toLexerString());\\n\" : \"\") + \"}\\n\")",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 27,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 645,
        "startLineNumber" : 404,
        "startColumnNumber" : 2,
        "endLineNumber" : 421,
        "endColumnNumber" : 4
      },
      "nodeContext" : "ST outputFileST=new ST(\"import 'dart:io';\\n\" + \"\\n\" + \"import 'package:antlr4/antlr4.dart';\\n\"+ \"\\n\"+ \"import '<lexerName>.dart';\\n\"+ \"\\n\"+ \"void main(List\\\\<String> args) async {\\n\"+ \"  CharStream input = await InputStream.fromPath(args[0]);\\n\"+ \"  <lexerName> lex = <lexerName>(input);\\n\"+ \"  CommonTokenStream tokens = CommonTokenStream(lex);\\n\"+ \"  tokens.fill();\\n\"+ \"  for (Object t in tokens.getTokens()!)\\n\"+ \"    print(t);\\n\"+ \"\\n\" + (showDFA ? \"stdout.write(lex.interpreter!.getDFA(Lexer.DEFAULT_MODE).toLexerString());\\n\" : \"\") + \"}\\n\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 30,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 769,
        "startLineNumber" : 403,
        "startColumnNumber" : 70,
        "endLineNumber" : 425,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  ST outputFileST=new ST(\"import 'dart:io';\\n\" + \"\\n\" + \"import 'package:antlr4/antlr4.dart';\\n\"+ \"\\n\"+ \"import '<lexerName>.dart';\\n\"+ \"\\n\"+ \"void main(List\\\\<String> args) async {\\n\"+ \"  CharStream input = await InputStream.fromPath(args[0]);\\n\"+ \"  <lexerName> lex = <lexerName>(input);\\n\"+ \"  CommonTokenStream tokens = CommonTokenStream(lex);\\n\"+ \"  tokens.fill();\\n\"+ \"  for (Object t in tokens.getTokens()!)\\n\"+ \"    print(t);\\n\"+ \"\\n\" + (showDFA ? \"stdout.write(lex.interpreter!.getDFA(Lexer.DEFAULT_MODE).toLexerString());\\n\" : \"\") + \"}\\n\");\n  outputFileST.add(\"lexerName\",lexerName);\n  writeFile(getTempDirPath(),\"Test.dart\",outputFileST.render());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 46,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 838,
        "startLineNumber" : 403,
        "startColumnNumber" : 1,
        "endLineNumber" : 425,
        "endColumnNumber" : 2
      },
      "nodeContext" : "protected void writeLexerTestFile(String lexerName,boolean showDFA){\n  ST outputFileST=new ST(\"import 'dart:io';\\n\" + \"\\n\" + \"import 'package:antlr4/antlr4.dart';\\n\"+ \"\\n\"+ \"import '<lexerName>.dart';\\n\"+ \"\\n\"+ \"void main(List\\\\<String> args) async {\\n\"+ \"  CharStream input = await InputStream.fromPath(args[0]);\\n\"+ \"  <lexerName> lex = <lexerName>(input);\\n\"+ \"  CommonTokenStream tokens = CommonTokenStream(lex);\\n\"+ \"  tokens.fill();\\n\"+ \"  for (Object t in tokens.getTokens()!)\\n\"+ \"    print(t);\\n\"+ \"\\n\" + (showDFA ? \"stdout.write(lex.interpreter!.getDFA(Lexer.DEFAULT_MODE).toLexerString());\\n\" : \"\") + \"}\\n\");\n  outputFileST.add(\"lexerName\",lexerName);\n  writeFile(getTempDirPath(),\"Test.dart\",outputFileST.render());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 57,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 493,
        "startLineNumber" : 405,
        "startColumnNumber" : 3,
        "endLineNumber" : 418,
        "endColumnNumber" : 8
      },
      "nodeContext" : "\"import 'dart:io';\\n\" + \"\\n\" + \"import 'package:antlr4/antlr4.dart';\\n\"+ \"\\n\"+ \"import '<lexerName>.dart';\\n\"+ \"\\n\"+ \"void main(List\\\\<String> args) async {\\n\"+ \"  CharStream input = await InputStream.fromPath(args[0]);\\n\"+ \"  <lexerName> lex = <lexerName>(input);\\n\"+ \"  CommonTokenStream tokens = CommonTokenStream(lex);\\n\"+ \"  tokens.fill();\\n\"+ \"  for (Object t in tokens.getTokens()!)\\n\"+ \"    print(t);\\n\"+ \"\\n\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 2
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 405,
    "startColumnNumber" : 3,
    "endLineNumber" : 405,
    "endColumnNumber" : 24
  } ],
  "layoutRelationDataList" : [ ]
}