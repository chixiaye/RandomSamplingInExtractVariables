{
  "id" : 301,
  "expression" : "DescriptorMatcher.matchMethodDescriptors(\"I\",\"I\")",
  "projectName" : "java-decompiler@jd-gui",
  "commitID" : "fbc5b14d66b37b88bf1dc18386b530e874550240",
  "filePath" : "/services/src/test/java/org/jd/gui/util/matcher/DescriptorMatcherTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "DescriptorMatcher.matchMethodDescriptors(\"I\",\"I\")",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 50,
      "startLineNumber" : 42,
      "startColumnNumber" : 27,
      "endLineNumber" : 42,
      "endColumnNumber" : 77
    },
    "astNodeNumber" : 5,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 42,
        "startColumnNumber" : 8,
        "endLineNumber" : 42,
        "endColumnNumber" : 78
      },
      "nodeContext" : "Assert.assertFalse(DescriptorMatcher.matchMethodDescriptors(\"I\",\"I\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 42,
        "startColumnNumber" : 8,
        "endLineNumber" : 42,
        "endColumnNumber" : 79
      },
      "nodeContext" : "Assert.assertFalse(DescriptorMatcher.matchMethodDescriptors(\"I\",\"I\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3618,
        "startLineNumber" : 41,
        "startColumnNumber" : 45,
        "endLineNumber" : 83,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Assert.assertFalse(DescriptorMatcher.matchMethodDescriptors(\"I\",\"I\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"()I\",\"()I\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"(*)?\",\"()I\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"()I\",\"(*)?\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"(I)I\",\"(I)I\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"(*)?\",\"(I)I\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"(I)I\",\"(*)?\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"(IJ)I\",\"(IJ)I\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"(*)?\",\"(IJ)I\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"(IJ)I\",\"(*)?\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"(Ltest/Test;)Ltest/Test;\",\"(Ltest/Test;)Ltest/Test;\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"(*)?\",\"(Ltest/Test;)Ltest/Test;\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"(Ltest/Test;)Ltest/Test;\",\"(*)?\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"([[Ltest/Test;[[Ltest/Test;)Ltest/Test;\",\"([[L*/Test;[[L*/Test;)L*/Test;\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"([[L*/Test;[[L*/Test;)L*/Test;\",\"([[Ltest/Test;[[Ltest/Test;)Ltest/Test;\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"(Ltest/Test;Ltest/Test;)Ltest/Test;\",\"(Ltest/Test;Ltest/Test;)Ltest/Test;\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"(*)?\",\"(Ltest/Test;Ltest/Test;)Ltest/Test;\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"(Ltest/Test;Ltest/Test;)Ltest/Test;\",\"(*)?\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"([[Ltest/Test;[[Ltest/Test;)Ltest/Test;\",\"([[Ltest/Test;[[Ltest/Test;)Ltest/Test;\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"(*)?\",\"([[Ltest/Test;[[Ltest/Test;)Ltest/Test;\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"([[Ltest/Test;[[Ltest/Test;)Ltest/Test;\",\"(*)?\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"([[L*/Test;[[L*/Test;)L*/Test;\",\"([[Ltest/Test;[[Ltest/Test;)Ltest/Test;\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"([[Ltest/Test;[[Ltest/Test;)Ltest/Test;\",\"([[L*/Test;[[L*/Test;)L*/Test;\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"(L*/Test;)L*/Test;\",\"(L*/Test;)L*/Test;\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"(*)?\",\"(L*/Test;)L*/Test;\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"(L*/Test;)L*/Test;\",\"(*)?\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"(L*/Test;L*/Test;)L*/Test;\",\"(L*/Test;L*/Test;)L*/Test;\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"(*)?\",\"(L*/Test;L*/Test;)L*/Test;\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"(Ltest/Test;Ltest/Test;)Ltest/Test;\",\"(*)?\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"([[L*/Test;[[L*/Test;)L*/Test;\",\"([[L*/Test;[[L*/Test;)L*/Test;\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"(*)?\",\"([[L*/Test;[[L*/Test;)L*/Test;\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"([[L*/Test;[[L*/Test;)L*/Test;\",\"(*)?\"));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 289,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3659,
        "startLineNumber" : 41,
        "startColumnNumber" : 4,
        "endLineNumber" : 83,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void testMatchMethodDescriptors(){\n  Assert.assertFalse(DescriptorMatcher.matchMethodDescriptors(\"I\",\"I\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"()I\",\"()I\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"(*)?\",\"()I\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"()I\",\"(*)?\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"(I)I\",\"(I)I\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"(*)?\",\"(I)I\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"(I)I\",\"(*)?\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"(IJ)I\",\"(IJ)I\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"(*)?\",\"(IJ)I\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"(IJ)I\",\"(*)?\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"(Ltest/Test;)Ltest/Test;\",\"(Ltest/Test;)Ltest/Test;\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"(*)?\",\"(Ltest/Test;)Ltest/Test;\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"(Ltest/Test;)Ltest/Test;\",\"(*)?\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"([[Ltest/Test;[[Ltest/Test;)Ltest/Test;\",\"([[L*/Test;[[L*/Test;)L*/Test;\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"([[L*/Test;[[L*/Test;)L*/Test;\",\"([[Ltest/Test;[[Ltest/Test;)Ltest/Test;\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"(Ltest/Test;Ltest/Test;)Ltest/Test;\",\"(Ltest/Test;Ltest/Test;)Ltest/Test;\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"(*)?\",\"(Ltest/Test;Ltest/Test;)Ltest/Test;\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"(Ltest/Test;Ltest/Test;)Ltest/Test;\",\"(*)?\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"([[Ltest/Test;[[Ltest/Test;)Ltest/Test;\",\"([[Ltest/Test;[[Ltest/Test;)Ltest/Test;\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"(*)?\",\"([[Ltest/Test;[[Ltest/Test;)Ltest/Test;\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"([[Ltest/Test;[[Ltest/Test;)Ltest/Test;\",\"(*)?\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"([[L*/Test;[[L*/Test;)L*/Test;\",\"([[Ltest/Test;[[Ltest/Test;)Ltest/Test;\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"([[Ltest/Test;[[Ltest/Test;)Ltest/Test;\",\"([[L*/Test;[[L*/Test;)L*/Test;\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"(L*/Test;)L*/Test;\",\"(L*/Test;)L*/Test;\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"(*)?\",\"(L*/Test;)L*/Test;\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"(L*/Test;)L*/Test;\",\"(*)?\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"(L*/Test;L*/Test;)L*/Test;\",\"(L*/Test;L*/Test;)L*/Test;\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"(*)?\",\"(L*/Test;L*/Test;)L*/Test;\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"(Ltest/Test;Ltest/Test;)Ltest/Test;\",\"(*)?\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"([[L*/Test;[[L*/Test;)L*/Test;\",\"([[L*/Test;[[L*/Test;)L*/Test;\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"(*)?\",\"([[L*/Test;[[L*/Test;)L*/Test;\"));\n  Assert.assertTrue(DescriptorMatcher.matchMethodDescriptors(\"([[L*/Test;[[L*/Test;)L*/Test;\",\"(*)?\"));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 293,
      "astHeight" : 6
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 42,
        "startColumnNumber" : 8,
        "endLineNumber" : 42,
        "endColumnNumber" : 79
      },
      "nodeContext" : "Assert.assertFalse(DescriptorMatcher.matchMethodDescriptors(\"I\",\"I\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 4,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 50,
    "startLineNumber" : 42,
    "startColumnNumber" : 27,
    "endLineNumber" : 42,
    "endColumnNumber" : 77
  } ],
  "layoutRelationDataList" : [ ]
}