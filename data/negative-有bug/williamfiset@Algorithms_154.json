{
  "id" : 154,
  "expression" : "pq2.contains(pq2.peek())",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/test/java/com/williamfiset/algorithms/datastructures/priorityqueue/BinaryHeapQuickRemovalsTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "pq2.contains(pq2.peek())",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 24,
      "startLineNumber" : 202,
      "startColumnNumber" : 47,
      "endLineNumber" : 202,
      "endColumnNumber" : 71
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 202,
        "startColumnNumber" : 8,
        "endLineNumber" : 202,
        "endColumnNumber" : 72
      },
      "nodeContext" : "assertEquals(pq1.contains(pq1.peek()),pq2.contains(pq2.peek()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 202,
        "startColumnNumber" : 8,
        "endLineNumber" : 202,
        "endColumnNumber" : 73
      },
      "nodeContext" : "assertEquals(pq1.contains(pq1.peek()),pq2.contains(pq2.peek()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 442,
        "startLineNumber" : 197,
        "startColumnNumber" : 29,
        "endLineNumber" : 211,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  assertTrue(pq2.isMinHeap(0));\n  assertEquals(pq1.size(),pq2.size());\n  assertEquals(pq1.peek(),pq2.peek());\n  assertEquals(pq1.contains(pq1.peek()),pq2.contains(pq2.peek()));\n  Integer v1=pq1.poll();\n  Integer v2=pq2.poll();\n  assertEquals(v1,v2);\n  assertEquals(pq1.peek(),pq2.peek());\n  assertEquals(pq1.size(),pq2.size());\n  assertTrue(pq2.isMinHeap(0));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 87,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 465,
        "startLineNumber" : 197,
        "startColumnNumber" : 6,
        "endLineNumber" : 211,
        "endColumnNumber" : 7
      },
      "nodeContext" : "while (!pq1.isEmpty()) {\n  assertTrue(pq2.isMinHeap(0));\n  assertEquals(pq1.size(),pq2.size());\n  assertEquals(pq1.peek(),pq2.peek());\n  assertEquals(pq1.contains(pq1.peek()),pq2.contains(pq2.peek()));\n  Integer v1=pq1.poll();\n  Integer v2=pq2.poll();\n  assertEquals(v1,v2);\n  assertEquals(pq1.peek(),pq2.peek());\n  assertEquals(pq1.size(),pq2.size());\n  assertTrue(pq2.isMinHeap(0));\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 92,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 835,
        "startLineNumber" : 184,
        "startColumnNumber" : 36,
        "endLineNumber" : 212,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int sz=i;\n  List<Integer> randNums=genRandList(sz);\n  PriorityQueue<Integer> pq1=new PriorityQueue<>();\n  BinaryHeapQuickRemovals<Integer> pq2=new BinaryHeapQuickRemovals<>();\n  for (  Integer value : randNums) {\n    pq1.offer(value);\n    pq2.add(value);\n  }\n  while (!pq1.isEmpty()) {\n    assertTrue(pq2.isMinHeap(0));\n    assertEquals(pq1.size(),pq2.size());\n    assertEquals(pq1.peek(),pq2.peek());\n    assertEquals(pq1.contains(pq1.peek()),pq2.contains(pq2.peek()));\n    Integer v1=pq1.poll();\n    Integer v2=pq2.poll();\n    assertEquals(v1,v2);\n    assertEquals(pq1.peek(),pq2.peek());\n    assertEquals(pq1.size(),pq2.size());\n    assertTrue(pq2.isMinHeap(0));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 150,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 867,
        "startLineNumber" : 184,
        "startColumnNumber" : 4,
        "endLineNumber" : 212,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < LOOPS; i++) {\n  int sz=i;\n  List<Integer> randNums=genRandList(sz);\n  PriorityQueue<Integer> pq1=new PriorityQueue<>();\n  BinaryHeapQuickRemovals<Integer> pq2=new BinaryHeapQuickRemovals<>();\n  for (  Integer value : randNums) {\n    pq1.offer(value);\n    pq2.add(value);\n  }\n  while (!pq1.isEmpty()) {\n    assertTrue(pq2.isMinHeap(0));\n    assertEquals(pq1.size(),pq2.size());\n    assertEquals(pq1.peek(),pq2.peek());\n    assertEquals(pq1.contains(pq1.peek()),pq2.contains(pq2.peek()));\n    Integer v1=pq1.poll();\n    Integer v2=pq2.poll();\n    assertEquals(v1,v2);\n    assertEquals(pq1.peek(),pq2.peek());\n    assertEquals(pq1.size(),pq2.size());\n    assertTrue(pq2.isMinHeap(0));\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 161,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 878,
        "startLineNumber" : 182,
        "startColumnNumber" : 38,
        "endLineNumber" : 213,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (int i=0; i < LOOPS; i++) {\n    int sz=i;\n    List<Integer> randNums=genRandList(sz);\n    PriorityQueue<Integer> pq1=new PriorityQueue<>();\n    BinaryHeapQuickRemovals<Integer> pq2=new BinaryHeapQuickRemovals<>();\n    for (    Integer value : randNums) {\n      pq1.offer(value);\n      pq2.add(value);\n    }\n    while (!pq1.isEmpty()) {\n      assertTrue(pq2.isMinHeap(0));\n      assertEquals(pq1.size(),pq2.size());\n      assertEquals(pq1.peek(),pq2.peek());\n      assertEquals(pq1.contains(pq1.peek()),pq2.contains(pq2.peek()));\n      Integer v1=pq1.poll();\n      Integer v2=pq2.poll();\n      assertEquals(v1,v2);\n      assertEquals(pq1.peek(),pq2.peek());\n      assertEquals(pq1.size(),pq2.size());\n      assertTrue(pq2.isMinHeap(0));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 162,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 922,
        "startLineNumber" : 181,
        "startColumnNumber" : 2,
        "endLineNumber" : 213,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testRandomizedPolling(){\n  for (int i=0; i < LOOPS; i++) {\n    int sz=i;\n    List<Integer> randNums=genRandList(sz);\n    PriorityQueue<Integer> pq1=new PriorityQueue<>();\n    BinaryHeapQuickRemovals<Integer> pq2=new BinaryHeapQuickRemovals<>();\n    for (    Integer value : randNums) {\n      pq1.offer(value);\n      pq2.add(value);\n    }\n    while (!pq1.isEmpty()) {\n      assertTrue(pq2.isMinHeap(0));\n      assertEquals(pq1.size(),pq2.size());\n      assertEquals(pq1.peek(),pq2.peek());\n      assertEquals(pq1.contains(pq1.peek()),pq2.contains(pq2.peek()));\n      Integer v1=pq1.poll();\n      Integer v2=pq2.poll();\n      assertEquals(v1,v2);\n      assertEquals(pq1.peek(),pq2.peek());\n      assertEquals(pq1.size(),pq2.size());\n      assertTrue(pq2.isMinHeap(0));\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 168,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 202,
        "startColumnNumber" : 8,
        "endLineNumber" : 202,
        "endColumnNumber" : 73
      },
      "nodeContext" : "assertEquals(pq1.contains(pq1.peek()),pq2.contains(pq2.peek()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 24,
    "startLineNumber" : 202,
    "startColumnNumber" : 47,
    "endLineNumber" : 202,
    "endColumnNumber" : 71
  } ],
  "layoutRelationDataList" : [ ]
}