{
  "id" : 498,
  "expression" : "url",
  "projectName" : "TeamNewPipe@NewPipe",
  "commitID" : "d7574973e97fa7a3a21aa59967311f6091941830",
  "filePath" : "/app/src/main/java/us/shandian/giga/get/DownloadMissionRecover.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "url",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 167,
      "startColumnNumber" : 16,
      "endLineNumber" : 167,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 167,
        "startColumnNumber" : 8,
        "endLineNumber" : 167,
        "endColumnNumber" : 20
      },
      "nodeContext" : "resolve(url)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 167,
        "startColumnNumber" : 8,
        "endLineNumber" : 167,
        "endColumnNumber" : 21
      },
      "nodeContext" : "resolve(url);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1857,
        "startLineNumber" : 123,
        "startColumnNumber" : 84,
        "endLineNumber" : 168,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String url=null;\nswitch (mRecovery.kind) {\ncase 'a':    for (    AudioStream audio : mExtractor.getAudioStreams()) {\n      if (audio.average_bitrate == mRecovery.desiredBitrate && audio.getFormat() == mRecovery.format) {\n        url=audio.getUrl();\n        break;\n      }\n    }\n  break;\ncase 'v':List<VideoStream> videoStreams;\nif (mRecovery.desired2) videoStreams=mExtractor.getVideoOnlyStreams();\n else videoStreams=mExtractor.getVideoStreams();\nfor (VideoStream video : videoStreams) {\nif (video.resolution.equals(mRecovery.desired) && video.getFormat() == mRecovery.format) {\nurl=video.getUrl();\nbreak;\n}\n}\nbreak;\ncase 's':for (SubtitlesStream subtitles : mExtractor.getSubtitles(mRecovery.format)) {\nString tag=subtitles.getLanguageTag();\nif (tag.equals(mRecovery.desired) && subtitles.isAutoGenerated() == mRecovery.desired2) {\nurl=subtitles.getURL();\nbreak;\n}\n}\nbreak;\ndefault:throw new RuntimeException(\"Unknown stream type\");\n}\nresolve(url);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 162,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1937,
        "startLineNumber" : 123,
        "startColumnNumber" : 4,
        "endLineNumber" : 168,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void resolveStream() throws IOException, ExtractionException, HttpError {\n  String url=null;\nswitch (mRecovery.kind) {\ncase 'a':    for (    AudioStream audio : mExtractor.getAudioStreams()) {\n      if (audio.average_bitrate == mRecovery.desiredBitrate && audio.getFormat() == mRecovery.format) {\n        url=audio.getUrl();\n        break;\n      }\n    }\n  break;\ncase 'v':List<VideoStream> videoStreams;\nif (mRecovery.desired2) videoStreams=mExtractor.getVideoOnlyStreams();\n else videoStreams=mExtractor.getVideoStreams();\nfor (VideoStream video : videoStreams) {\nif (video.resolution.equals(mRecovery.desired) && video.getFormat() == mRecovery.format) {\nurl=video.getUrl();\nbreak;\n}\n}\nbreak;\ncase 's':for (SubtitlesStream subtitles : mExtractor.getSubtitles(mRecovery.format)) {\nString tag=subtitles.getLanguageTag();\nif (tag.equals(mRecovery.desired) && subtitles.isAutoGenerated() == mRecovery.desired2) {\nurl=subtitles.getURL();\nbreak;\n}\n}\nbreak;\ndefault:throw new RuntimeException(\"Unknown stream type\");\n}\nresolve(url);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 172,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 167,
        "startColumnNumber" : 8,
        "endLineNumber" : 167,
        "endColumnNumber" : 21
      },
      "nodeContext" : "resolve(url);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 167,
    "startColumnNumber" : 16,
    "endLineNumber" : 167,
    "endColumnNumber" : 19
  } ],
  "layoutRelationDataList" : [ ]
}