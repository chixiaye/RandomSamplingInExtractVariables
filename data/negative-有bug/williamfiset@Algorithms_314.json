{
  "id" : 314,
  "expression" : "divisor",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/math/EulerTotientFunction.java",
  "occurrences" : 6,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "divisor",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 20,
      "startColumnNumber" : 18,
      "endLineNumber" : 20,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 20,
        "startColumnNumber" : 10,
        "endLineNumber" : 20,
        "endColumnNumber" : 26
      },
      "nodeContext" : "isPrime(divisor)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 20,
        "startColumnNumber" : 6,
        "endLineNumber" : 23,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (isPrime(divisor)) {\n  factors.add(divisor);\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 369,
        "startLineNumber" : 18,
        "startColumnNumber" : 36,
        "endLineNumber" : 31,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long divisor=divisorQueue.remove();\n  if (isPrime(divisor)) {\n    factors.add(divisor);\n    continue;\n  }\n  long next_divisor=pollardRho(divisor);\n  if (next_divisor == divisor) {\n    divisorQueue.add(divisor);\n  }\n else {\n    divisorQueue.add(next_divisor);\n    divisorQueue.add(divisor / next_divisor);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 49,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 401,
        "startLineNumber" : 18,
        "startColumnNumber" : 4,
        "endLineNumber" : 31,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (!divisorQueue.isEmpty()) {\n  long divisor=divisorQueue.remove();\n  if (isPrime(divisor)) {\n    factors.add(divisor);\n    continue;\n  }\n  long next_divisor=pollardRho(divisor);\n  if (next_divisor == divisor) {\n    divisorQueue.add(divisor);\n  }\n else {\n    divisorQueue.add(next_divisor);\n    divisorQueue.add(divisor / next_divisor);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 54,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 666,
        "startLineNumber" : 12,
        "startColumnNumber" : 60,
        "endLineNumber" : 33,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ArrayList<Long> factors=new ArrayList<Long>();\n  if (n <= 0)   throw new IllegalArgumentException();\n else   if (n == 1)   return factors;\n  PriorityQueue<Long> divisorQueue=new PriorityQueue<Long>();\n  divisorQueue.add(n);\n  while (!divisorQueue.isEmpty()) {\n    long divisor=divisorQueue.remove();\n    if (isPrime(divisor)) {\n      factors.add(divisor);\n      continue;\n    }\n    long next_divisor=pollardRho(divisor);\n    if (next_divisor == divisor) {\n      divisorQueue.add(divisor);\n    }\n else {\n      divisorQueue.add(next_divisor);\n      divisorQueue.add(divisor / next_divisor);\n    }\n  }\n  return factors;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 104,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 724,
        "startLineNumber" : 12,
        "startColumnNumber" : 2,
        "endLineNumber" : 33,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static ArrayList<Long> primeFactorization(long n){\n  ArrayList<Long> factors=new ArrayList<Long>();\n  if (n <= 0)   throw new IllegalArgumentException();\n else   if (n == 1)   return factors;\n  PriorityQueue<Long> divisorQueue=new PriorityQueue<Long>();\n  divisorQueue.add(n);\n  while (!divisorQueue.isEmpty()) {\n    long divisor=divisorQueue.remove();\n    if (isPrime(divisor)) {\n      factors.add(divisor);\n      continue;\n    }\n    long next_divisor=pollardRho(divisor);\n    if (next_divisor == divisor) {\n      divisorQueue.add(divisor);\n    }\n else {\n      divisorQueue.add(next_divisor);\n      divisorQueue.add(divisor / next_divisor);\n    }\n  }\n  return factors;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 116,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 20,
        "startColumnNumber" : 10,
        "endLineNumber" : 20,
        "endColumnNumber" : 26
      },
      "nodeContext" : "isPrime(divisor)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "long"
  }, {
    "nodeContext" : "divisor",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 21,
      "startColumnNumber" : 20,
      "endLineNumber" : 21,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 21,
        "startColumnNumber" : 8,
        "endLineNumber" : 21,
        "endColumnNumber" : 28
      },
      "nodeContext" : "factors.add(divisor)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 21,
        "startColumnNumber" : 8,
        "endLineNumber" : 21,
        "endColumnNumber" : 29
      },
      "nodeContext" : "factors.add(divisor);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 20,
        "startColumnNumber" : 28,
        "endLineNumber" : 23,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  factors.add(divisor);\n  continue;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 20,
        "startColumnNumber" : 6,
        "endLineNumber" : 23,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (isPrime(divisor)) {\n  factors.add(divisor);\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 369,
        "startLineNumber" : 18,
        "startColumnNumber" : 36,
        "endLineNumber" : 31,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long divisor=divisorQueue.remove();\n  if (isPrime(divisor)) {\n    factors.add(divisor);\n    continue;\n  }\n  long next_divisor=pollardRho(divisor);\n  if (next_divisor == divisor) {\n    divisorQueue.add(divisor);\n  }\n else {\n    divisorQueue.add(next_divisor);\n    divisorQueue.add(divisor / next_divisor);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 49,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 401,
        "startLineNumber" : 18,
        "startColumnNumber" : 4,
        "endLineNumber" : 31,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (!divisorQueue.isEmpty()) {\n  long divisor=divisorQueue.remove();\n  if (isPrime(divisor)) {\n    factors.add(divisor);\n    continue;\n  }\n  long next_divisor=pollardRho(divisor);\n  if (next_divisor == divisor) {\n    divisorQueue.add(divisor);\n  }\n else {\n    divisorQueue.add(next_divisor);\n    divisorQueue.add(divisor / next_divisor);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 54,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 666,
        "startLineNumber" : 12,
        "startColumnNumber" : 60,
        "endLineNumber" : 33,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ArrayList<Long> factors=new ArrayList<Long>();\n  if (n <= 0)   throw new IllegalArgumentException();\n else   if (n == 1)   return factors;\n  PriorityQueue<Long> divisorQueue=new PriorityQueue<Long>();\n  divisorQueue.add(n);\n  while (!divisorQueue.isEmpty()) {\n    long divisor=divisorQueue.remove();\n    if (isPrime(divisor)) {\n      factors.add(divisor);\n      continue;\n    }\n    long next_divisor=pollardRho(divisor);\n    if (next_divisor == divisor) {\n      divisorQueue.add(divisor);\n    }\n else {\n      divisorQueue.add(next_divisor);\n      divisorQueue.add(divisor / next_divisor);\n    }\n  }\n  return factors;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 104,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 724,
        "startLineNumber" : 12,
        "startColumnNumber" : 2,
        "endLineNumber" : 33,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static ArrayList<Long> primeFactorization(long n){\n  ArrayList<Long> factors=new ArrayList<Long>();\n  if (n <= 0)   throw new IllegalArgumentException();\n else   if (n == 1)   return factors;\n  PriorityQueue<Long> divisorQueue=new PriorityQueue<Long>();\n  divisorQueue.add(n);\n  while (!divisorQueue.isEmpty()) {\n    long divisor=divisorQueue.remove();\n    if (isPrime(divisor)) {\n      factors.add(divisor);\n      continue;\n    }\n    long next_divisor=pollardRho(divisor);\n    if (next_divisor == divisor) {\n      divisorQueue.add(divisor);\n    }\n else {\n      divisorQueue.add(next_divisor);\n      divisorQueue.add(divisor / next_divisor);\n    }\n  }\n  return factors;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 116,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 21,
        "startColumnNumber" : 8,
        "endLineNumber" : 21,
        "endColumnNumber" : 29
      },
      "nodeContext" : "factors.add(divisor);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "long"
  }, {
    "nodeContext" : "divisor",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 24,
      "startColumnNumber" : 37,
      "endLineNumber" : 24,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 24,
        "startColumnNumber" : 26,
        "endLineNumber" : 24,
        "endColumnNumber" : 45
      },
      "nodeContext" : "pollardRho(divisor)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 24,
        "startColumnNumber" : 11,
        "endLineNumber" : 24,
        "endColumnNumber" : 45
      },
      "nodeContext" : "next_divisor=pollardRho(divisor)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 24,
        "startColumnNumber" : 6,
        "endLineNumber" : 24,
        "endColumnNumber" : 46
      },
      "nodeContext" : "long next_divisor=pollardRho(divisor);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 369,
        "startLineNumber" : 18,
        "startColumnNumber" : 36,
        "endLineNumber" : 31,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long divisor=divisorQueue.remove();\n  if (isPrime(divisor)) {\n    factors.add(divisor);\n    continue;\n  }\n  long next_divisor=pollardRho(divisor);\n  if (next_divisor == divisor) {\n    divisorQueue.add(divisor);\n  }\n else {\n    divisorQueue.add(next_divisor);\n    divisorQueue.add(divisor / next_divisor);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 49,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 401,
        "startLineNumber" : 18,
        "startColumnNumber" : 4,
        "endLineNumber" : 31,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (!divisorQueue.isEmpty()) {\n  long divisor=divisorQueue.remove();\n  if (isPrime(divisor)) {\n    factors.add(divisor);\n    continue;\n  }\n  long next_divisor=pollardRho(divisor);\n  if (next_divisor == divisor) {\n    divisorQueue.add(divisor);\n  }\n else {\n    divisorQueue.add(next_divisor);\n    divisorQueue.add(divisor / next_divisor);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 54,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 666,
        "startLineNumber" : 12,
        "startColumnNumber" : 60,
        "endLineNumber" : 33,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ArrayList<Long> factors=new ArrayList<Long>();\n  if (n <= 0)   throw new IllegalArgumentException();\n else   if (n == 1)   return factors;\n  PriorityQueue<Long> divisorQueue=new PriorityQueue<Long>();\n  divisorQueue.add(n);\n  while (!divisorQueue.isEmpty()) {\n    long divisor=divisorQueue.remove();\n    if (isPrime(divisor)) {\n      factors.add(divisor);\n      continue;\n    }\n    long next_divisor=pollardRho(divisor);\n    if (next_divisor == divisor) {\n      divisorQueue.add(divisor);\n    }\n else {\n      divisorQueue.add(next_divisor);\n      divisorQueue.add(divisor / next_divisor);\n    }\n  }\n  return factors;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 104,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 724,
        "startLineNumber" : 12,
        "startColumnNumber" : 2,
        "endLineNumber" : 33,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static ArrayList<Long> primeFactorization(long n){\n  ArrayList<Long> factors=new ArrayList<Long>();\n  if (n <= 0)   throw new IllegalArgumentException();\n else   if (n == 1)   return factors;\n  PriorityQueue<Long> divisorQueue=new PriorityQueue<Long>();\n  divisorQueue.add(n);\n  while (!divisorQueue.isEmpty()) {\n    long divisor=divisorQueue.remove();\n    if (isPrime(divisor)) {\n      factors.add(divisor);\n      continue;\n    }\n    long next_divisor=pollardRho(divisor);\n    if (next_divisor == divisor) {\n      divisorQueue.add(divisor);\n    }\n else {\n      divisorQueue.add(next_divisor);\n      divisorQueue.add(divisor / next_divisor);\n    }\n  }\n  return factors;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 116,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 24,
        "startColumnNumber" : 6,
        "endLineNumber" : 24,
        "endColumnNumber" : 46
      },
      "nodeContext" : "long next_divisor=pollardRho(divisor);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "long"
  }, {
    "nodeContext" : "divisor",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 25,
      "startColumnNumber" : 26,
      "endLineNumber" : 25,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 25,
        "startColumnNumber" : 10,
        "endLineNumber" : 25,
        "endColumnNumber" : 33
      },
      "nodeContext" : "next_divisor == divisor",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 178,
        "startLineNumber" : 25,
        "startColumnNumber" : 6,
        "endLineNumber" : 30,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (next_divisor == divisor) {\n  divisorQueue.add(divisor);\n}\n else {\n  divisorQueue.add(next_divisor);\n  divisorQueue.add(divisor / next_divisor);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 369,
        "startLineNumber" : 18,
        "startColumnNumber" : 36,
        "endLineNumber" : 31,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long divisor=divisorQueue.remove();\n  if (isPrime(divisor)) {\n    factors.add(divisor);\n    continue;\n  }\n  long next_divisor=pollardRho(divisor);\n  if (next_divisor == divisor) {\n    divisorQueue.add(divisor);\n  }\n else {\n    divisorQueue.add(next_divisor);\n    divisorQueue.add(divisor / next_divisor);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 49,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 401,
        "startLineNumber" : 18,
        "startColumnNumber" : 4,
        "endLineNumber" : 31,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (!divisorQueue.isEmpty()) {\n  long divisor=divisorQueue.remove();\n  if (isPrime(divisor)) {\n    factors.add(divisor);\n    continue;\n  }\n  long next_divisor=pollardRho(divisor);\n  if (next_divisor == divisor) {\n    divisorQueue.add(divisor);\n  }\n else {\n    divisorQueue.add(next_divisor);\n    divisorQueue.add(divisor / next_divisor);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 54,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 666,
        "startLineNumber" : 12,
        "startColumnNumber" : 60,
        "endLineNumber" : 33,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ArrayList<Long> factors=new ArrayList<Long>();\n  if (n <= 0)   throw new IllegalArgumentException();\n else   if (n == 1)   return factors;\n  PriorityQueue<Long> divisorQueue=new PriorityQueue<Long>();\n  divisorQueue.add(n);\n  while (!divisorQueue.isEmpty()) {\n    long divisor=divisorQueue.remove();\n    if (isPrime(divisor)) {\n      factors.add(divisor);\n      continue;\n    }\n    long next_divisor=pollardRho(divisor);\n    if (next_divisor == divisor) {\n      divisorQueue.add(divisor);\n    }\n else {\n      divisorQueue.add(next_divisor);\n      divisorQueue.add(divisor / next_divisor);\n    }\n  }\n  return factors;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 104,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 724,
        "startLineNumber" : 12,
        "startColumnNumber" : 2,
        "endLineNumber" : 33,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static ArrayList<Long> primeFactorization(long n){\n  ArrayList<Long> factors=new ArrayList<Long>();\n  if (n <= 0)   throw new IllegalArgumentException();\n else   if (n == 1)   return factors;\n  PriorityQueue<Long> divisorQueue=new PriorityQueue<Long>();\n  divisorQueue.add(n);\n  while (!divisorQueue.isEmpty()) {\n    long divisor=divisorQueue.remove();\n    if (isPrime(divisor)) {\n      factors.add(divisor);\n      continue;\n    }\n    long next_divisor=pollardRho(divisor);\n    if (next_divisor == divisor) {\n      divisorQueue.add(divisor);\n    }\n else {\n      divisorQueue.add(next_divisor);\n      divisorQueue.add(divisor / next_divisor);\n    }\n  }\n  return factors;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 116,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 25,
        "startColumnNumber" : 10,
        "endLineNumber" : 25,
        "endColumnNumber" : 33
      },
      "nodeContext" : "next_divisor == divisor",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "long"
  }, {
    "nodeContext" : "divisor",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 26,
      "startColumnNumber" : 25,
      "endLineNumber" : 26,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 26,
        "startColumnNumber" : 8,
        "endLineNumber" : 26,
        "endColumnNumber" : 33
      },
      "nodeContext" : "divisorQueue.add(divisor)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 26,
        "startColumnNumber" : 8,
        "endLineNumber" : 26,
        "endColumnNumber" : 34
      },
      "nodeContext" : "divisorQueue.add(divisor);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 25,
        "startColumnNumber" : 35,
        "endLineNumber" : 27,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  divisorQueue.add(divisor);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 178,
        "startLineNumber" : 25,
        "startColumnNumber" : 6,
        "endLineNumber" : 30,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (next_divisor == divisor) {\n  divisorQueue.add(divisor);\n}\n else {\n  divisorQueue.add(next_divisor);\n  divisorQueue.add(divisor / next_divisor);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 369,
        "startLineNumber" : 18,
        "startColumnNumber" : 36,
        "endLineNumber" : 31,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long divisor=divisorQueue.remove();\n  if (isPrime(divisor)) {\n    factors.add(divisor);\n    continue;\n  }\n  long next_divisor=pollardRho(divisor);\n  if (next_divisor == divisor) {\n    divisorQueue.add(divisor);\n  }\n else {\n    divisorQueue.add(next_divisor);\n    divisorQueue.add(divisor / next_divisor);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 49,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 401,
        "startLineNumber" : 18,
        "startColumnNumber" : 4,
        "endLineNumber" : 31,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (!divisorQueue.isEmpty()) {\n  long divisor=divisorQueue.remove();\n  if (isPrime(divisor)) {\n    factors.add(divisor);\n    continue;\n  }\n  long next_divisor=pollardRho(divisor);\n  if (next_divisor == divisor) {\n    divisorQueue.add(divisor);\n  }\n else {\n    divisorQueue.add(next_divisor);\n    divisorQueue.add(divisor / next_divisor);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 54,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 666,
        "startLineNumber" : 12,
        "startColumnNumber" : 60,
        "endLineNumber" : 33,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ArrayList<Long> factors=new ArrayList<Long>();\n  if (n <= 0)   throw new IllegalArgumentException();\n else   if (n == 1)   return factors;\n  PriorityQueue<Long> divisorQueue=new PriorityQueue<Long>();\n  divisorQueue.add(n);\n  while (!divisorQueue.isEmpty()) {\n    long divisor=divisorQueue.remove();\n    if (isPrime(divisor)) {\n      factors.add(divisor);\n      continue;\n    }\n    long next_divisor=pollardRho(divisor);\n    if (next_divisor == divisor) {\n      divisorQueue.add(divisor);\n    }\n else {\n      divisorQueue.add(next_divisor);\n      divisorQueue.add(divisor / next_divisor);\n    }\n  }\n  return factors;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 104,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 724,
        "startLineNumber" : 12,
        "startColumnNumber" : 2,
        "endLineNumber" : 33,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static ArrayList<Long> primeFactorization(long n){\n  ArrayList<Long> factors=new ArrayList<Long>();\n  if (n <= 0)   throw new IllegalArgumentException();\n else   if (n == 1)   return factors;\n  PriorityQueue<Long> divisorQueue=new PriorityQueue<Long>();\n  divisorQueue.add(n);\n  while (!divisorQueue.isEmpty()) {\n    long divisor=divisorQueue.remove();\n    if (isPrime(divisor)) {\n      factors.add(divisor);\n      continue;\n    }\n    long next_divisor=pollardRho(divisor);\n    if (next_divisor == divisor) {\n      divisorQueue.add(divisor);\n    }\n else {\n      divisorQueue.add(next_divisor);\n      divisorQueue.add(divisor / next_divisor);\n    }\n  }\n  return factors;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 116,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 26,
        "startColumnNumber" : 8,
        "endLineNumber" : 26,
        "endColumnNumber" : 34
      },
      "nodeContext" : "divisorQueue.add(divisor);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "long"
  }, {
    "nodeContext" : "divisor",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 29,
      "startColumnNumber" : 25,
      "endLineNumber" : 29,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 29,
        "startColumnNumber" : 25,
        "endLineNumber" : 29,
        "endColumnNumber" : 47
      },
      "nodeContext" : "divisor / next_divisor",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 29,
        "startColumnNumber" : 8,
        "endLineNumber" : 29,
        "endColumnNumber" : 48
      },
      "nodeContext" : "divisorQueue.add(divisor / next_divisor)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 29,
        "startColumnNumber" : 8,
        "endLineNumber" : 29,
        "endColumnNumber" : 49
      },
      "nodeContext" : "divisorQueue.add(divisor / next_divisor);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 27,
        "startColumnNumber" : 13,
        "endLineNumber" : 30,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  divisorQueue.add(next_divisor);\n  divisorQueue.add(divisor / next_divisor);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 178,
        "startLineNumber" : 25,
        "startColumnNumber" : 6,
        "endLineNumber" : 30,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (next_divisor == divisor) {\n  divisorQueue.add(divisor);\n}\n else {\n  divisorQueue.add(next_divisor);\n  divisorQueue.add(divisor / next_divisor);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 369,
        "startLineNumber" : 18,
        "startColumnNumber" : 36,
        "endLineNumber" : 31,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long divisor=divisorQueue.remove();\n  if (isPrime(divisor)) {\n    factors.add(divisor);\n    continue;\n  }\n  long next_divisor=pollardRho(divisor);\n  if (next_divisor == divisor) {\n    divisorQueue.add(divisor);\n  }\n else {\n    divisorQueue.add(next_divisor);\n    divisorQueue.add(divisor / next_divisor);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 49,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 401,
        "startLineNumber" : 18,
        "startColumnNumber" : 4,
        "endLineNumber" : 31,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (!divisorQueue.isEmpty()) {\n  long divisor=divisorQueue.remove();\n  if (isPrime(divisor)) {\n    factors.add(divisor);\n    continue;\n  }\n  long next_divisor=pollardRho(divisor);\n  if (next_divisor == divisor) {\n    divisorQueue.add(divisor);\n  }\n else {\n    divisorQueue.add(next_divisor);\n    divisorQueue.add(divisor / next_divisor);\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 54,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 666,
        "startLineNumber" : 12,
        "startColumnNumber" : 60,
        "endLineNumber" : 33,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ArrayList<Long> factors=new ArrayList<Long>();\n  if (n <= 0)   throw new IllegalArgumentException();\n else   if (n == 1)   return factors;\n  PriorityQueue<Long> divisorQueue=new PriorityQueue<Long>();\n  divisorQueue.add(n);\n  while (!divisorQueue.isEmpty()) {\n    long divisor=divisorQueue.remove();\n    if (isPrime(divisor)) {\n      factors.add(divisor);\n      continue;\n    }\n    long next_divisor=pollardRho(divisor);\n    if (next_divisor == divisor) {\n      divisorQueue.add(divisor);\n    }\n else {\n      divisorQueue.add(next_divisor);\n      divisorQueue.add(divisor / next_divisor);\n    }\n  }\n  return factors;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 104,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 724,
        "startLineNumber" : 12,
        "startColumnNumber" : 2,
        "endLineNumber" : 33,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static ArrayList<Long> primeFactorization(long n){\n  ArrayList<Long> factors=new ArrayList<Long>();\n  if (n <= 0)   throw new IllegalArgumentException();\n else   if (n == 1)   return factors;\n  PriorityQueue<Long> divisorQueue=new PriorityQueue<Long>();\n  divisorQueue.add(n);\n  while (!divisorQueue.isEmpty()) {\n    long divisor=divisorQueue.remove();\n    if (isPrime(divisor)) {\n      factors.add(divisor);\n      continue;\n    }\n    long next_divisor=pollardRho(divisor);\n    if (next_divisor == divisor) {\n      divisorQueue.add(divisor);\n    }\n else {\n      divisorQueue.add(next_divisor);\n      divisorQueue.add(divisor / next_divisor);\n    }\n  }\n  return factors;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 116,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 29,
        "startColumnNumber" : 8,
        "endLineNumber" : 29,
        "endColumnNumber" : 49
      },
      "nodeContext" : "divisorQueue.add(divisor / next_divisor);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "long"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 20,
    "startColumnNumber" : 18,
    "endLineNumber" : 20,
    "endColumnNumber" : 25
  }, {
    "charLength" : 7,
    "startLineNumber" : 21,
    "startColumnNumber" : 20,
    "endLineNumber" : 21,
    "endColumnNumber" : 27
  }, {
    "charLength" : 7,
    "startLineNumber" : 24,
    "startColumnNumber" : 37,
    "endLineNumber" : 24,
    "endColumnNumber" : 44
  }, {
    "charLength" : 7,
    "startLineNumber" : 25,
    "startColumnNumber" : 26,
    "endLineNumber" : 25,
    "endColumnNumber" : 33
  }, {
    "charLength" : 7,
    "startLineNumber" : 26,
    "startColumnNumber" : 25,
    "endLineNumber" : 26,
    "endColumnNumber" : 32
  }, {
    "charLength" : 7,
    "startLineNumber" : 29,
    "startColumnNumber" : 25,
    "endLineNumber" : 29,
    "endColumnNumber" : 32
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 4
  } ]
}