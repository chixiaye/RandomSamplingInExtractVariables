{
  "id" : 207,
  "expression" : "Mockito",
  "projectName" : "GoogleContainerTools@jib",
  "commitID" : "a0742fd277b5490a0965dba4443f5864f1250199",
  "filePath" : "/jib-core/src/integration-test/java/com/google/cloud/tools/jib/registry/BlobPullerIntegrationTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Mockito",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 74,
      "startColumnNumber" : 49,
      "endLineNumber" : 74,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 74,
        "startColumnNumber" : 49,
        "endLineNumber" : 74,
        "endColumnNumber" : 81
      },
      "nodeContext" : "Mockito.mock(OutputStream.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 74,
        "startColumnNumber" : 6,
        "endLineNumber" : 74,
        "endColumnNumber" : 82
      },
      "nodeContext" : "registryClient.pullBlob(nonexistentDigest,Mockito.mock(OutputStream.class))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 74,
        "startColumnNumber" : 6,
        "endLineNumber" : 74,
        "endColumnNumber" : 83
      },
      "nodeContext" : "registryClient.pullBlob(nonexistentDigest,Mockito.mock(OutputStream.class));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 364,
        "startLineNumber" : 69,
        "startColumnNumber" : 8,
        "endLineNumber" : 77,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  RegistryClient registryClient=RegistryClient.factory(BUILD_LOGGER,\"localhost:5000\",\"busybox\").setAllowInsecureRegistries(true).newRegistryClient();\n  registryClient.pullBlob(nonexistentDigest,Mockito.mock(OutputStream.class));\n  Assert.fail(\"Trying to pull nonexistent blob should have errored\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 33,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 590,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 82,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  RegistryClient registryClient=RegistryClient.factory(BUILD_LOGGER,\"localhost:5000\",\"busybox\").setAllowInsecureRegistries(true).newRegistryClient();\n  registryClient.pullBlob(nonexistentDigest,Mockito.mock(OutputStream.class));\n  Assert.fail(\"Trying to pull nonexistent blob should have errored\");\n}\n catch (RegistryErrorException ex) {\n  Assert.assertThat(ex.getMessage(),CoreMatchers.containsString(\"pull BLOB for localhost:5000/busybox with digest \" + nonexistentDigest));\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 53,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 758,
        "startLineNumber" : 64,
        "startColumnNumber" : 92,
        "endLineNumber" : 83,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  DescriptorDigest nonexistentDigest=DescriptorDigest.fromHash(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\");\n  try {\n    RegistryClient registryClient=RegistryClient.factory(BUILD_LOGGER,\"localhost:5000\",\"busybox\").setAllowInsecureRegistries(true).newRegistryClient();\n    registryClient.pullBlob(nonexistentDigest,Mockito.mock(OutputStream.class));\n    Assert.fail(\"Trying to pull nonexistent blob should have errored\");\n  }\n catch (  RegistryErrorException ex) {\n    Assert.assertThat(ex.getMessage(),CoreMatchers.containsString(\"pull BLOB for localhost:5000/busybox with digest \" + nonexistentDigest));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 63,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 856,
        "startLineNumber" : 63,
        "startColumnNumber" : 2,
        "endLineNumber" : 83,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testPull_unknownBlob() throws RegistryException, IOException, DigestException {\n  DescriptorDigest nonexistentDigest=DescriptorDigest.fromHash(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\");\n  try {\n    RegistryClient registryClient=RegistryClient.factory(BUILD_LOGGER,\"localhost:5000\",\"busybox\").setAllowInsecureRegistries(true).newRegistryClient();\n    registryClient.pullBlob(nonexistentDigest,Mockito.mock(OutputStream.class));\n    Assert.fail(\"Trying to pull nonexistent blob should have errored\");\n  }\n catch (  RegistryErrorException ex) {\n    Assert.assertThat(ex.getMessage(),CoreMatchers.containsString(\"pull BLOB for localhost:5000/busybox with digest \" + nonexistentDigest));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 75,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 74,
        "startColumnNumber" : 6,
        "endLineNumber" : 74,
        "endColumnNumber" : 83
      },
      "nodeContext" : "registryClient.pullBlob(nonexistentDigest,Mockito.mock(OutputStream.class));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 74,
    "startColumnNumber" : 49,
    "endLineNumber" : 74,
    "endColumnNumber" : 56
  } ],
  "layoutRelationDataList" : [ ]
}