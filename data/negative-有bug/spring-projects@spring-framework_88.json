{
  "id" : 88,
  "expression" : "defaultBean",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-webmvc/src/test/java/org/springframework/web/servlet/handler/PathMatchingUrlHandlerMappingTests.java",
  "occurrences" : 15,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "defaultBean",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 89,
      "startColumnNumber" : 75,
      "endLineNumber" : 89,
      "endColumnNumber" : 86
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 89,
        "startColumnNumber" : 55,
        "endLineNumber" : 89,
        "endColumnNumber" : 86
      },
      "nodeContext" : "hec.getHandler() == defaultBean",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 89,
        "startColumnNumber" : 40,
        "endLineNumber" : 89,
        "endColumnNumber" : 86
      },
      "nodeContext" : "hec != null && hec.getHandler() == defaultBean",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 89,
        "startColumnNumber" : 2,
        "endLineNumber" : 89,
        "endColumnNumber" : 87
      },
      "nodeContext" : "assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 89,
        "startColumnNumber" : 2,
        "endLineNumber" : 89,
        "endColumnNumber" : 88
      },
      "nodeContext" : "assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7163,
        "startLineNumber" : 72,
        "startColumnNumber" : 51,
        "endLineNumber" : 224,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Object bean=wac.getBean(\"mainController\");\n  Object defaultBean=wac.getBean(\"starController\");\n  MockHttpServletRequest req=new MockHttpServletRequest(\"GET\",\"/pathmatchingTest.html\");\n  HandlerExecutionChain hec=getHandler(req);\n  assertTrue(\"Handler is null\",hec != null);\n  assertTrue(\"Handler is correct bean\",hec.getHandler() == bean);\n  assertEquals(\"/pathmatchingTest.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"welcome.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"welcome.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingAA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  assertEquals(\"pathmatchingAA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"/pathmatchingA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administratort/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/bla.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.xml\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.gif\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testlastbit\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/bla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/test.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer2/notmatching/notmatching\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/shortpattern/testing/toolong\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/pathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/XpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/show12.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show123.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show1.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-test-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-tst-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/anotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/stillAnotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/outofpattern*ye\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test't est/path'm atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test%26t%20est/path%26m%20atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 930,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7220,
        "startLineNumber" : 71,
        "startColumnNumber" : 1,
        "endLineNumber" : 224,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void actualPathMatching() throws Exception {\n  Object bean=wac.getBean(\"mainController\");\n  Object defaultBean=wac.getBean(\"starController\");\n  MockHttpServletRequest req=new MockHttpServletRequest(\"GET\",\"/pathmatchingTest.html\");\n  HandlerExecutionChain hec=getHandler(req);\n  assertTrue(\"Handler is null\",hec != null);\n  assertTrue(\"Handler is correct bean\",hec.getHandler() == bean);\n  assertEquals(\"/pathmatchingTest.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"welcome.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"welcome.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingAA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  assertEquals(\"pathmatchingAA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"/pathmatchingA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administratort/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/bla.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.xml\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.gif\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testlastbit\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/bla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/test.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer2/notmatching/notmatching\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/shortpattern/testing/toolong\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/pathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/XpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/show12.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show123.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show1.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-test-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-tst-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/anotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/stillAnotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/outofpattern*ye\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test't est/path'm atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test%26t%20est/path%26m%20atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 938,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 89,
        "startColumnNumber" : 2,
        "endLineNumber" : 89,
        "endColumnNumber" : 88
      },
      "nodeContext" : "assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object"
  }, {
    "nodeContext" : "defaultBean",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 101,
      "startColumnNumber" : 75,
      "endLineNumber" : 101,
      "endColumnNumber" : 86
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 101,
        "startColumnNumber" : 55,
        "endLineNumber" : 101,
        "endColumnNumber" : 86
      },
      "nodeContext" : "hec.getHandler() == defaultBean",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 101,
        "startColumnNumber" : 40,
        "endLineNumber" : 101,
        "endColumnNumber" : 86
      },
      "nodeContext" : "hec != null && hec.getHandler() == defaultBean",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 101,
        "startColumnNumber" : 2,
        "endLineNumber" : 101,
        "endColumnNumber" : 87
      },
      "nodeContext" : "assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 101,
        "startColumnNumber" : 2,
        "endLineNumber" : 101,
        "endColumnNumber" : 88
      },
      "nodeContext" : "assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7163,
        "startLineNumber" : 72,
        "startColumnNumber" : 51,
        "endLineNumber" : 224,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Object bean=wac.getBean(\"mainController\");\n  Object defaultBean=wac.getBean(\"starController\");\n  MockHttpServletRequest req=new MockHttpServletRequest(\"GET\",\"/pathmatchingTest.html\");\n  HandlerExecutionChain hec=getHandler(req);\n  assertTrue(\"Handler is null\",hec != null);\n  assertTrue(\"Handler is correct bean\",hec.getHandler() == bean);\n  assertEquals(\"/pathmatchingTest.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"welcome.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"welcome.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingAA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  assertEquals(\"pathmatchingAA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"/pathmatchingA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administratort/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/bla.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.xml\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.gif\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testlastbit\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/bla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/test.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer2/notmatching/notmatching\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/shortpattern/testing/toolong\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/pathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/XpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/show12.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show123.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show1.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-test-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-tst-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/anotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/stillAnotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/outofpattern*ye\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test't est/path'm atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test%26t%20est/path%26m%20atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 930,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7220,
        "startLineNumber" : 71,
        "startColumnNumber" : 1,
        "endLineNumber" : 224,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void actualPathMatching() throws Exception {\n  Object bean=wac.getBean(\"mainController\");\n  Object defaultBean=wac.getBean(\"starController\");\n  MockHttpServletRequest req=new MockHttpServletRequest(\"GET\",\"/pathmatchingTest.html\");\n  HandlerExecutionChain hec=getHandler(req);\n  assertTrue(\"Handler is null\",hec != null);\n  assertTrue(\"Handler is correct bean\",hec.getHandler() == bean);\n  assertEquals(\"/pathmatchingTest.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"welcome.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"welcome.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingAA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  assertEquals(\"pathmatchingAA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"/pathmatchingA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administratort/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/bla.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.xml\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.gif\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testlastbit\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/bla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/test.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer2/notmatching/notmatching\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/shortpattern/testing/toolong\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/pathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/XpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/show12.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show123.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show1.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-test-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-tst-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/anotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/stillAnotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/outofpattern*ye\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test't est/path'm atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test%26t%20est/path%26m%20atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 938,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 101,
        "startColumnNumber" : 2,
        "endLineNumber" : 101,
        "endColumnNumber" : 88
      },
      "nodeContext" : "assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object"
  }, {
    "nodeContext" : "defaultBean",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 117,
      "startColumnNumber" : 75,
      "endLineNumber" : 117,
      "endColumnNumber" : 86
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 117,
        "startColumnNumber" : 55,
        "endLineNumber" : 117,
        "endColumnNumber" : 86
      },
      "nodeContext" : "hec.getHandler() == defaultBean",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 117,
        "startColumnNumber" : 40,
        "endLineNumber" : 117,
        "endColumnNumber" : 86
      },
      "nodeContext" : "hec != null && hec.getHandler() == defaultBean",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 117,
        "startColumnNumber" : 2,
        "endLineNumber" : 117,
        "endColumnNumber" : 87
      },
      "nodeContext" : "assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 117,
        "startColumnNumber" : 2,
        "endLineNumber" : 117,
        "endColumnNumber" : 88
      },
      "nodeContext" : "assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7163,
        "startLineNumber" : 72,
        "startColumnNumber" : 51,
        "endLineNumber" : 224,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Object bean=wac.getBean(\"mainController\");\n  Object defaultBean=wac.getBean(\"starController\");\n  MockHttpServletRequest req=new MockHttpServletRequest(\"GET\",\"/pathmatchingTest.html\");\n  HandlerExecutionChain hec=getHandler(req);\n  assertTrue(\"Handler is null\",hec != null);\n  assertTrue(\"Handler is correct bean\",hec.getHandler() == bean);\n  assertEquals(\"/pathmatchingTest.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"welcome.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"welcome.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingAA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  assertEquals(\"pathmatchingAA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"/pathmatchingA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administratort/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/bla.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.xml\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.gif\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testlastbit\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/bla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/test.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer2/notmatching/notmatching\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/shortpattern/testing/toolong\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/pathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/XpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/show12.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show123.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show1.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-test-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-tst-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/anotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/stillAnotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/outofpattern*ye\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test't est/path'm atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test%26t%20est/path%26m%20atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 930,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7220,
        "startLineNumber" : 71,
        "startColumnNumber" : 1,
        "endLineNumber" : 224,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void actualPathMatching() throws Exception {\n  Object bean=wac.getBean(\"mainController\");\n  Object defaultBean=wac.getBean(\"starController\");\n  MockHttpServletRequest req=new MockHttpServletRequest(\"GET\",\"/pathmatchingTest.html\");\n  HandlerExecutionChain hec=getHandler(req);\n  assertTrue(\"Handler is null\",hec != null);\n  assertTrue(\"Handler is correct bean\",hec.getHandler() == bean);\n  assertEquals(\"/pathmatchingTest.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"welcome.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"welcome.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingAA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  assertEquals(\"pathmatchingAA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"/pathmatchingA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administratort/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/bla.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.xml\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.gif\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testlastbit\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/bla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/test.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer2/notmatching/notmatching\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/shortpattern/testing/toolong\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/pathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/XpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/show12.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show123.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show1.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-test-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-tst-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/anotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/stillAnotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/outofpattern*ye\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test't est/path'm atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test%26t%20est/path%26m%20atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 938,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 117,
        "startColumnNumber" : 2,
        "endLineNumber" : 117,
        "endColumnNumber" : 88
      },
      "nodeContext" : "assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object"
  }, {
    "nodeContext" : "defaultBean",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 132,
      "startColumnNumber" : 75,
      "endLineNumber" : 132,
      "endColumnNumber" : 86
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 132,
        "startColumnNumber" : 55,
        "endLineNumber" : 132,
        "endColumnNumber" : 86
      },
      "nodeContext" : "hec.getHandler() == defaultBean",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 132,
        "startColumnNumber" : 40,
        "endLineNumber" : 132,
        "endColumnNumber" : 86
      },
      "nodeContext" : "hec != null && hec.getHandler() == defaultBean",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 132,
        "startColumnNumber" : 2,
        "endLineNumber" : 132,
        "endColumnNumber" : 87
      },
      "nodeContext" : "assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 132,
        "startColumnNumber" : 2,
        "endLineNumber" : 132,
        "endColumnNumber" : 88
      },
      "nodeContext" : "assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7163,
        "startLineNumber" : 72,
        "startColumnNumber" : 51,
        "endLineNumber" : 224,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Object bean=wac.getBean(\"mainController\");\n  Object defaultBean=wac.getBean(\"starController\");\n  MockHttpServletRequest req=new MockHttpServletRequest(\"GET\",\"/pathmatchingTest.html\");\n  HandlerExecutionChain hec=getHandler(req);\n  assertTrue(\"Handler is null\",hec != null);\n  assertTrue(\"Handler is correct bean\",hec.getHandler() == bean);\n  assertEquals(\"/pathmatchingTest.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"welcome.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"welcome.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingAA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  assertEquals(\"pathmatchingAA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"/pathmatchingA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administratort/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/bla.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.xml\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.gif\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testlastbit\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/bla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/test.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer2/notmatching/notmatching\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/shortpattern/testing/toolong\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/pathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/XpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/show12.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show123.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show1.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-test-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-tst-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/anotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/stillAnotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/outofpattern*ye\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test't est/path'm atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test%26t%20est/path%26m%20atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 930,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7220,
        "startLineNumber" : 71,
        "startColumnNumber" : 1,
        "endLineNumber" : 224,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void actualPathMatching() throws Exception {\n  Object bean=wac.getBean(\"mainController\");\n  Object defaultBean=wac.getBean(\"starController\");\n  MockHttpServletRequest req=new MockHttpServletRequest(\"GET\",\"/pathmatchingTest.html\");\n  HandlerExecutionChain hec=getHandler(req);\n  assertTrue(\"Handler is null\",hec != null);\n  assertTrue(\"Handler is correct bean\",hec.getHandler() == bean);\n  assertEquals(\"/pathmatchingTest.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"welcome.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"welcome.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingAA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  assertEquals(\"pathmatchingAA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"/pathmatchingA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administratort/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/bla.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.xml\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.gif\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testlastbit\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/bla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/test.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer2/notmatching/notmatching\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/shortpattern/testing/toolong\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/pathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/XpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/show12.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show123.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show1.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-test-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-tst-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/anotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/stillAnotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/outofpattern*ye\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test't est/path'm atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test%26t%20est/path%26m%20atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 938,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 132,
        "startColumnNumber" : 2,
        "endLineNumber" : 132,
        "endColumnNumber" : 88
      },
      "nodeContext" : "assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object"
  }, {
    "nodeContext" : "defaultBean",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 142,
      "startColumnNumber" : 75,
      "endLineNumber" : 142,
      "endColumnNumber" : 86
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 142,
        "startColumnNumber" : 55,
        "endLineNumber" : 142,
        "endColumnNumber" : 86
      },
      "nodeContext" : "hec.getHandler() == defaultBean",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 142,
        "startColumnNumber" : 40,
        "endLineNumber" : 142,
        "endColumnNumber" : 86
      },
      "nodeContext" : "hec != null && hec.getHandler() == defaultBean",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 142,
        "startColumnNumber" : 2,
        "endLineNumber" : 142,
        "endColumnNumber" : 87
      },
      "nodeContext" : "assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 142,
        "startColumnNumber" : 2,
        "endLineNumber" : 142,
        "endColumnNumber" : 88
      },
      "nodeContext" : "assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7163,
        "startLineNumber" : 72,
        "startColumnNumber" : 51,
        "endLineNumber" : 224,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Object bean=wac.getBean(\"mainController\");\n  Object defaultBean=wac.getBean(\"starController\");\n  MockHttpServletRequest req=new MockHttpServletRequest(\"GET\",\"/pathmatchingTest.html\");\n  HandlerExecutionChain hec=getHandler(req);\n  assertTrue(\"Handler is null\",hec != null);\n  assertTrue(\"Handler is correct bean\",hec.getHandler() == bean);\n  assertEquals(\"/pathmatchingTest.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"welcome.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"welcome.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingAA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  assertEquals(\"pathmatchingAA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"/pathmatchingA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administratort/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/bla.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.xml\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.gif\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testlastbit\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/bla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/test.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer2/notmatching/notmatching\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/shortpattern/testing/toolong\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/pathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/XpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/show12.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show123.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show1.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-test-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-tst-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/anotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/stillAnotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/outofpattern*ye\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test't est/path'm atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test%26t%20est/path%26m%20atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 930,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7220,
        "startLineNumber" : 71,
        "startColumnNumber" : 1,
        "endLineNumber" : 224,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void actualPathMatching() throws Exception {\n  Object bean=wac.getBean(\"mainController\");\n  Object defaultBean=wac.getBean(\"starController\");\n  MockHttpServletRequest req=new MockHttpServletRequest(\"GET\",\"/pathmatchingTest.html\");\n  HandlerExecutionChain hec=getHandler(req);\n  assertTrue(\"Handler is null\",hec != null);\n  assertTrue(\"Handler is correct bean\",hec.getHandler() == bean);\n  assertEquals(\"/pathmatchingTest.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"welcome.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"welcome.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingAA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  assertEquals(\"pathmatchingAA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"/pathmatchingA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administratort/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/bla.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.xml\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.gif\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testlastbit\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/bla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/test.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer2/notmatching/notmatching\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/shortpattern/testing/toolong\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/pathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/XpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/show12.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show123.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show1.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-test-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-tst-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/anotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/stillAnotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/outofpattern*ye\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test't est/path'm atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test%26t%20est/path%26m%20atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 938,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 142,
        "startColumnNumber" : 2,
        "endLineNumber" : 142,
        "endColumnNumber" : 88
      },
      "nodeContext" : "assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object"
  }, {
    "nodeContext" : "defaultBean",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 154,
      "startColumnNumber" : 75,
      "endLineNumber" : 154,
      "endColumnNumber" : 86
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 154,
        "startColumnNumber" : 55,
        "endLineNumber" : 154,
        "endColumnNumber" : 86
      },
      "nodeContext" : "hec.getHandler() == defaultBean",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 154,
        "startColumnNumber" : 40,
        "endLineNumber" : 154,
        "endColumnNumber" : 86
      },
      "nodeContext" : "hec != null && hec.getHandler() == defaultBean",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 154,
        "startColumnNumber" : 2,
        "endLineNumber" : 154,
        "endColumnNumber" : 87
      },
      "nodeContext" : "assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 154,
        "startColumnNumber" : 2,
        "endLineNumber" : 154,
        "endColumnNumber" : 88
      },
      "nodeContext" : "assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7163,
        "startLineNumber" : 72,
        "startColumnNumber" : 51,
        "endLineNumber" : 224,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Object bean=wac.getBean(\"mainController\");\n  Object defaultBean=wac.getBean(\"starController\");\n  MockHttpServletRequest req=new MockHttpServletRequest(\"GET\",\"/pathmatchingTest.html\");\n  HandlerExecutionChain hec=getHandler(req);\n  assertTrue(\"Handler is null\",hec != null);\n  assertTrue(\"Handler is correct bean\",hec.getHandler() == bean);\n  assertEquals(\"/pathmatchingTest.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"welcome.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"welcome.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingAA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  assertEquals(\"pathmatchingAA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"/pathmatchingA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administratort/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/bla.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.xml\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.gif\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testlastbit\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/bla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/test.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer2/notmatching/notmatching\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/shortpattern/testing/toolong\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/pathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/XpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/show12.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show123.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show1.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-test-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-tst-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/anotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/stillAnotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/outofpattern*ye\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test't est/path'm atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test%26t%20est/path%26m%20atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 930,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7220,
        "startLineNumber" : 71,
        "startColumnNumber" : 1,
        "endLineNumber" : 224,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void actualPathMatching() throws Exception {\n  Object bean=wac.getBean(\"mainController\");\n  Object defaultBean=wac.getBean(\"starController\");\n  MockHttpServletRequest req=new MockHttpServletRequest(\"GET\",\"/pathmatchingTest.html\");\n  HandlerExecutionChain hec=getHandler(req);\n  assertTrue(\"Handler is null\",hec != null);\n  assertTrue(\"Handler is correct bean\",hec.getHandler() == bean);\n  assertEquals(\"/pathmatchingTest.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"welcome.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"welcome.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingAA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  assertEquals(\"pathmatchingAA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"/pathmatchingA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administratort/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/bla.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.xml\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.gif\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testlastbit\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/bla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/test.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer2/notmatching/notmatching\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/shortpattern/testing/toolong\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/pathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/XpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/show12.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show123.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show1.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-test-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-tst-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/anotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/stillAnotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/outofpattern*ye\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test't est/path'm atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test%26t%20est/path%26m%20atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 938,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 154,
        "startColumnNumber" : 2,
        "endLineNumber" : 154,
        "endColumnNumber" : 88
      },
      "nodeContext" : "assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object"
  }, {
    "nodeContext" : "defaultBean",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 158,
      "startColumnNumber" : 75,
      "endLineNumber" : 158,
      "endColumnNumber" : 86
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 158,
        "startColumnNumber" : 55,
        "endLineNumber" : 158,
        "endColumnNumber" : 86
      },
      "nodeContext" : "hec.getHandler() == defaultBean",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 158,
        "startColumnNumber" : 40,
        "endLineNumber" : 158,
        "endColumnNumber" : 86
      },
      "nodeContext" : "hec != null && hec.getHandler() == defaultBean",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 158,
        "startColumnNumber" : 2,
        "endLineNumber" : 158,
        "endColumnNumber" : 87
      },
      "nodeContext" : "assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 158,
        "startColumnNumber" : 2,
        "endLineNumber" : 158,
        "endColumnNumber" : 88
      },
      "nodeContext" : "assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7163,
        "startLineNumber" : 72,
        "startColumnNumber" : 51,
        "endLineNumber" : 224,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Object bean=wac.getBean(\"mainController\");\n  Object defaultBean=wac.getBean(\"starController\");\n  MockHttpServletRequest req=new MockHttpServletRequest(\"GET\",\"/pathmatchingTest.html\");\n  HandlerExecutionChain hec=getHandler(req);\n  assertTrue(\"Handler is null\",hec != null);\n  assertTrue(\"Handler is correct bean\",hec.getHandler() == bean);\n  assertEquals(\"/pathmatchingTest.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"welcome.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"welcome.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingAA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  assertEquals(\"pathmatchingAA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"/pathmatchingA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administratort/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/bla.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.xml\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.gif\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testlastbit\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/bla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/test.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer2/notmatching/notmatching\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/shortpattern/testing/toolong\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/pathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/XpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/show12.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show123.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show1.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-test-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-tst-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/anotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/stillAnotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/outofpattern*ye\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test't est/path'm atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test%26t%20est/path%26m%20atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 930,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7220,
        "startLineNumber" : 71,
        "startColumnNumber" : 1,
        "endLineNumber" : 224,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void actualPathMatching() throws Exception {\n  Object bean=wac.getBean(\"mainController\");\n  Object defaultBean=wac.getBean(\"starController\");\n  MockHttpServletRequest req=new MockHttpServletRequest(\"GET\",\"/pathmatchingTest.html\");\n  HandlerExecutionChain hec=getHandler(req);\n  assertTrue(\"Handler is null\",hec != null);\n  assertTrue(\"Handler is correct bean\",hec.getHandler() == bean);\n  assertEquals(\"/pathmatchingTest.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"welcome.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"welcome.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingAA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  assertEquals(\"pathmatchingAA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"/pathmatchingA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administratort/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/bla.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.xml\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.gif\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testlastbit\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/bla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/test.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer2/notmatching/notmatching\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/shortpattern/testing/toolong\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/pathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/XpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/show12.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show123.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show1.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-test-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-tst-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/anotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/stillAnotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/outofpattern*ye\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test't est/path'm atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test%26t%20est/path%26m%20atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 938,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 158,
        "startColumnNumber" : 2,
        "endLineNumber" : 158,
        "endColumnNumber" : 88
      },
      "nodeContext" : "assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object"
  }, {
    "nodeContext" : "defaultBean",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 170,
      "startColumnNumber" : 75,
      "endLineNumber" : 170,
      "endColumnNumber" : 86
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 170,
        "startColumnNumber" : 55,
        "endLineNumber" : 170,
        "endColumnNumber" : 86
      },
      "nodeContext" : "hec.getHandler() == defaultBean",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 170,
        "startColumnNumber" : 40,
        "endLineNumber" : 170,
        "endColumnNumber" : 86
      },
      "nodeContext" : "hec != null && hec.getHandler() == defaultBean",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 170,
        "startColumnNumber" : 2,
        "endLineNumber" : 170,
        "endColumnNumber" : 87
      },
      "nodeContext" : "assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 170,
        "startColumnNumber" : 2,
        "endLineNumber" : 170,
        "endColumnNumber" : 88
      },
      "nodeContext" : "assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7163,
        "startLineNumber" : 72,
        "startColumnNumber" : 51,
        "endLineNumber" : 224,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Object bean=wac.getBean(\"mainController\");\n  Object defaultBean=wac.getBean(\"starController\");\n  MockHttpServletRequest req=new MockHttpServletRequest(\"GET\",\"/pathmatchingTest.html\");\n  HandlerExecutionChain hec=getHandler(req);\n  assertTrue(\"Handler is null\",hec != null);\n  assertTrue(\"Handler is correct bean\",hec.getHandler() == bean);\n  assertEquals(\"/pathmatchingTest.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"welcome.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"welcome.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingAA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  assertEquals(\"pathmatchingAA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"/pathmatchingA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administratort/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/bla.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.xml\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.gif\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testlastbit\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/bla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/test.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer2/notmatching/notmatching\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/shortpattern/testing/toolong\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/pathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/XpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/show12.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show123.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show1.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-test-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-tst-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/anotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/stillAnotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/outofpattern*ye\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test't est/path'm atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test%26t%20est/path%26m%20atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 930,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7220,
        "startLineNumber" : 71,
        "startColumnNumber" : 1,
        "endLineNumber" : 224,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void actualPathMatching() throws Exception {\n  Object bean=wac.getBean(\"mainController\");\n  Object defaultBean=wac.getBean(\"starController\");\n  MockHttpServletRequest req=new MockHttpServletRequest(\"GET\",\"/pathmatchingTest.html\");\n  HandlerExecutionChain hec=getHandler(req);\n  assertTrue(\"Handler is null\",hec != null);\n  assertTrue(\"Handler is correct bean\",hec.getHandler() == bean);\n  assertEquals(\"/pathmatchingTest.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"welcome.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"welcome.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingAA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  assertEquals(\"pathmatchingAA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"/pathmatchingA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administratort/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/bla.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.xml\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.gif\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testlastbit\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/bla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/test.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer2/notmatching/notmatching\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/shortpattern/testing/toolong\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/pathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/XpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/show12.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show123.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show1.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-test-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-tst-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/anotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/stillAnotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/outofpattern*ye\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test't est/path'm atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test%26t%20est/path%26m%20atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 938,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 170,
        "startColumnNumber" : 2,
        "endLineNumber" : 170,
        "endColumnNumber" : 88
      },
      "nodeContext" : "assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object"
  }, {
    "nodeContext" : "defaultBean",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 174,
      "startColumnNumber" : 75,
      "endLineNumber" : 174,
      "endColumnNumber" : 86
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 174,
        "startColumnNumber" : 55,
        "endLineNumber" : 174,
        "endColumnNumber" : 86
      },
      "nodeContext" : "hec.getHandler() == defaultBean",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 174,
        "startColumnNumber" : 40,
        "endLineNumber" : 174,
        "endColumnNumber" : 86
      },
      "nodeContext" : "hec != null && hec.getHandler() == defaultBean",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 174,
        "startColumnNumber" : 2,
        "endLineNumber" : 174,
        "endColumnNumber" : 87
      },
      "nodeContext" : "assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 174,
        "startColumnNumber" : 2,
        "endLineNumber" : 174,
        "endColumnNumber" : 88
      },
      "nodeContext" : "assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7163,
        "startLineNumber" : 72,
        "startColumnNumber" : 51,
        "endLineNumber" : 224,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Object bean=wac.getBean(\"mainController\");\n  Object defaultBean=wac.getBean(\"starController\");\n  MockHttpServletRequest req=new MockHttpServletRequest(\"GET\",\"/pathmatchingTest.html\");\n  HandlerExecutionChain hec=getHandler(req);\n  assertTrue(\"Handler is null\",hec != null);\n  assertTrue(\"Handler is correct bean\",hec.getHandler() == bean);\n  assertEquals(\"/pathmatchingTest.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"welcome.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"welcome.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingAA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  assertEquals(\"pathmatchingAA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"/pathmatchingA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administratort/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/bla.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.xml\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.gif\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testlastbit\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/bla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/test.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer2/notmatching/notmatching\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/shortpattern/testing/toolong\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/pathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/XpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/show12.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show123.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show1.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-test-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-tst-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/anotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/stillAnotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/outofpattern*ye\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test't est/path'm atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test%26t%20est/path%26m%20atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 930,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7220,
        "startLineNumber" : 71,
        "startColumnNumber" : 1,
        "endLineNumber" : 224,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void actualPathMatching() throws Exception {\n  Object bean=wac.getBean(\"mainController\");\n  Object defaultBean=wac.getBean(\"starController\");\n  MockHttpServletRequest req=new MockHttpServletRequest(\"GET\",\"/pathmatchingTest.html\");\n  HandlerExecutionChain hec=getHandler(req);\n  assertTrue(\"Handler is null\",hec != null);\n  assertTrue(\"Handler is correct bean\",hec.getHandler() == bean);\n  assertEquals(\"/pathmatchingTest.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"welcome.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"welcome.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingAA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  assertEquals(\"pathmatchingAA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"/pathmatchingA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administratort/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/bla.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.xml\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.gif\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testlastbit\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/bla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/test.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer2/notmatching/notmatching\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/shortpattern/testing/toolong\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/pathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/XpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/show12.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show123.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show1.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-test-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-tst-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/anotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/stillAnotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/outofpattern*ye\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test't est/path'm atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test%26t%20est/path%26m%20atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 938,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 174,
        "startColumnNumber" : 2,
        "endLineNumber" : 174,
        "endColumnNumber" : 88
      },
      "nodeContext" : "assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object"
  }, {
    "nodeContext" : "defaultBean",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 194,
      "startColumnNumber" : 75,
      "endLineNumber" : 194,
      "endColumnNumber" : 86
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 194,
        "startColumnNumber" : 55,
        "endLineNumber" : 194,
        "endColumnNumber" : 86
      },
      "nodeContext" : "hec.getHandler() == defaultBean",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 194,
        "startColumnNumber" : 40,
        "endLineNumber" : 194,
        "endColumnNumber" : 86
      },
      "nodeContext" : "hec != null && hec.getHandler() == defaultBean",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 194,
        "startColumnNumber" : 2,
        "endLineNumber" : 194,
        "endColumnNumber" : 87
      },
      "nodeContext" : "assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 194,
        "startColumnNumber" : 2,
        "endLineNumber" : 194,
        "endColumnNumber" : 88
      },
      "nodeContext" : "assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7163,
        "startLineNumber" : 72,
        "startColumnNumber" : 51,
        "endLineNumber" : 224,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Object bean=wac.getBean(\"mainController\");\n  Object defaultBean=wac.getBean(\"starController\");\n  MockHttpServletRequest req=new MockHttpServletRequest(\"GET\",\"/pathmatchingTest.html\");\n  HandlerExecutionChain hec=getHandler(req);\n  assertTrue(\"Handler is null\",hec != null);\n  assertTrue(\"Handler is correct bean\",hec.getHandler() == bean);\n  assertEquals(\"/pathmatchingTest.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"welcome.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"welcome.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingAA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  assertEquals(\"pathmatchingAA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"/pathmatchingA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administratort/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/bla.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.xml\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.gif\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testlastbit\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/bla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/test.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer2/notmatching/notmatching\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/shortpattern/testing/toolong\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/pathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/XpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/show12.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show123.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show1.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-test-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-tst-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/anotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/stillAnotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/outofpattern*ye\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test't est/path'm atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test%26t%20est/path%26m%20atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 930,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7220,
        "startLineNumber" : 71,
        "startColumnNumber" : 1,
        "endLineNumber" : 224,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void actualPathMatching() throws Exception {\n  Object bean=wac.getBean(\"mainController\");\n  Object defaultBean=wac.getBean(\"starController\");\n  MockHttpServletRequest req=new MockHttpServletRequest(\"GET\",\"/pathmatchingTest.html\");\n  HandlerExecutionChain hec=getHandler(req);\n  assertTrue(\"Handler is null\",hec != null);\n  assertTrue(\"Handler is correct bean\",hec.getHandler() == bean);\n  assertEquals(\"/pathmatchingTest.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"welcome.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"welcome.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingAA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  assertEquals(\"pathmatchingAA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"/pathmatchingA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administratort/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/bla.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.xml\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.gif\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testlastbit\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/bla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/test.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer2/notmatching/notmatching\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/shortpattern/testing/toolong\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/pathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/XpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/show12.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show123.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show1.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-test-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-tst-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/anotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/stillAnotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/outofpattern*ye\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test't est/path'm atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test%26t%20est/path%26m%20atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 938,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 194,
        "startColumnNumber" : 2,
        "endLineNumber" : 194,
        "endColumnNumber" : 88
      },
      "nodeContext" : "assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object"
  }, {
    "nodeContext" : "defaultBean",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 202,
      "startColumnNumber" : 75,
      "endLineNumber" : 202,
      "endColumnNumber" : 86
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 202,
        "startColumnNumber" : 55,
        "endLineNumber" : 202,
        "endColumnNumber" : 86
      },
      "nodeContext" : "hec.getHandler() == defaultBean",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 202,
        "startColumnNumber" : 40,
        "endLineNumber" : 202,
        "endColumnNumber" : 86
      },
      "nodeContext" : "hec != null && hec.getHandler() == defaultBean",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 202,
        "startColumnNumber" : 2,
        "endLineNumber" : 202,
        "endColumnNumber" : 87
      },
      "nodeContext" : "assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 202,
        "startColumnNumber" : 2,
        "endLineNumber" : 202,
        "endColumnNumber" : 88
      },
      "nodeContext" : "assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7163,
        "startLineNumber" : 72,
        "startColumnNumber" : 51,
        "endLineNumber" : 224,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Object bean=wac.getBean(\"mainController\");\n  Object defaultBean=wac.getBean(\"starController\");\n  MockHttpServletRequest req=new MockHttpServletRequest(\"GET\",\"/pathmatchingTest.html\");\n  HandlerExecutionChain hec=getHandler(req);\n  assertTrue(\"Handler is null\",hec != null);\n  assertTrue(\"Handler is correct bean\",hec.getHandler() == bean);\n  assertEquals(\"/pathmatchingTest.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"welcome.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"welcome.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingAA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  assertEquals(\"pathmatchingAA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"/pathmatchingA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administratort/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/bla.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.xml\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.gif\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testlastbit\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/bla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/test.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer2/notmatching/notmatching\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/shortpattern/testing/toolong\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/pathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/XpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/show12.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show123.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show1.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-test-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-tst-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/anotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/stillAnotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/outofpattern*ye\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test't est/path'm atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test%26t%20est/path%26m%20atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 930,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7220,
        "startLineNumber" : 71,
        "startColumnNumber" : 1,
        "endLineNumber" : 224,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void actualPathMatching() throws Exception {\n  Object bean=wac.getBean(\"mainController\");\n  Object defaultBean=wac.getBean(\"starController\");\n  MockHttpServletRequest req=new MockHttpServletRequest(\"GET\",\"/pathmatchingTest.html\");\n  HandlerExecutionChain hec=getHandler(req);\n  assertTrue(\"Handler is null\",hec != null);\n  assertTrue(\"Handler is correct bean\",hec.getHandler() == bean);\n  assertEquals(\"/pathmatchingTest.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"welcome.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"welcome.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingAA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  assertEquals(\"pathmatchingAA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"/pathmatchingA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administratort/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/bla.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.xml\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.gif\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testlastbit\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/bla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/test.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer2/notmatching/notmatching\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/shortpattern/testing/toolong\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/pathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/XpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/show12.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show123.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show1.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-test-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-tst-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/anotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/stillAnotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/outofpattern*ye\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test't est/path'm atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test%26t%20est/path%26m%20atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 938,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 202,
        "startColumnNumber" : 2,
        "endLineNumber" : 202,
        "endColumnNumber" : 88
      },
      "nodeContext" : "assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object"
  }, {
    "nodeContext" : "defaultBean",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 210,
      "startColumnNumber" : 75,
      "endLineNumber" : 210,
      "endColumnNumber" : 86
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 210,
        "startColumnNumber" : 55,
        "endLineNumber" : 210,
        "endColumnNumber" : 86
      },
      "nodeContext" : "hec.getHandler() == defaultBean",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 210,
        "startColumnNumber" : 40,
        "endLineNumber" : 210,
        "endColumnNumber" : 86
      },
      "nodeContext" : "hec != null && hec.getHandler() == defaultBean",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 210,
        "startColumnNumber" : 2,
        "endLineNumber" : 210,
        "endColumnNumber" : 87
      },
      "nodeContext" : "assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 210,
        "startColumnNumber" : 2,
        "endLineNumber" : 210,
        "endColumnNumber" : 88
      },
      "nodeContext" : "assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7163,
        "startLineNumber" : 72,
        "startColumnNumber" : 51,
        "endLineNumber" : 224,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Object bean=wac.getBean(\"mainController\");\n  Object defaultBean=wac.getBean(\"starController\");\n  MockHttpServletRequest req=new MockHttpServletRequest(\"GET\",\"/pathmatchingTest.html\");\n  HandlerExecutionChain hec=getHandler(req);\n  assertTrue(\"Handler is null\",hec != null);\n  assertTrue(\"Handler is correct bean\",hec.getHandler() == bean);\n  assertEquals(\"/pathmatchingTest.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"welcome.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"welcome.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingAA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  assertEquals(\"pathmatchingAA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"/pathmatchingA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administratort/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/bla.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.xml\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.gif\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testlastbit\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/bla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/test.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer2/notmatching/notmatching\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/shortpattern/testing/toolong\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/pathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/XpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/show12.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show123.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show1.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-test-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-tst-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/anotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/stillAnotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/outofpattern*ye\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test't est/path'm atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test%26t%20est/path%26m%20atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 930,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7220,
        "startLineNumber" : 71,
        "startColumnNumber" : 1,
        "endLineNumber" : 224,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void actualPathMatching() throws Exception {\n  Object bean=wac.getBean(\"mainController\");\n  Object defaultBean=wac.getBean(\"starController\");\n  MockHttpServletRequest req=new MockHttpServletRequest(\"GET\",\"/pathmatchingTest.html\");\n  HandlerExecutionChain hec=getHandler(req);\n  assertTrue(\"Handler is null\",hec != null);\n  assertTrue(\"Handler is correct bean\",hec.getHandler() == bean);\n  assertEquals(\"/pathmatchingTest.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"welcome.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"welcome.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingAA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  assertEquals(\"pathmatchingAA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"/pathmatchingA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administratort/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/bla.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.xml\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.gif\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testlastbit\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/bla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/test.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer2/notmatching/notmatching\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/shortpattern/testing/toolong\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/pathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/XpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/show12.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show123.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show1.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-test-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-tst-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/anotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/stillAnotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/outofpattern*ye\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test't est/path'm atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test%26t%20est/path%26m%20atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 938,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 210,
        "startColumnNumber" : 2,
        "endLineNumber" : 210,
        "endColumnNumber" : 88
      },
      "nodeContext" : "assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object"
  }, {
    "nodeContext" : "defaultBean",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 215,
      "startColumnNumber" : 75,
      "endLineNumber" : 215,
      "endColumnNumber" : 86
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 215,
        "startColumnNumber" : 55,
        "endLineNumber" : 215,
        "endColumnNumber" : 86
      },
      "nodeContext" : "hec.getHandler() == defaultBean",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 215,
        "startColumnNumber" : 40,
        "endLineNumber" : 215,
        "endColumnNumber" : 86
      },
      "nodeContext" : "hec != null && hec.getHandler() == defaultBean",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 215,
        "startColumnNumber" : 2,
        "endLineNumber" : 215,
        "endColumnNumber" : 87
      },
      "nodeContext" : "assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 215,
        "startColumnNumber" : 2,
        "endLineNumber" : 215,
        "endColumnNumber" : 88
      },
      "nodeContext" : "assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7163,
        "startLineNumber" : 72,
        "startColumnNumber" : 51,
        "endLineNumber" : 224,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Object bean=wac.getBean(\"mainController\");\n  Object defaultBean=wac.getBean(\"starController\");\n  MockHttpServletRequest req=new MockHttpServletRequest(\"GET\",\"/pathmatchingTest.html\");\n  HandlerExecutionChain hec=getHandler(req);\n  assertTrue(\"Handler is null\",hec != null);\n  assertTrue(\"Handler is correct bean\",hec.getHandler() == bean);\n  assertEquals(\"/pathmatchingTest.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"welcome.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"welcome.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingAA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  assertEquals(\"pathmatchingAA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"/pathmatchingA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administratort/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/bla.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.xml\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.gif\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testlastbit\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/bla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/test.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer2/notmatching/notmatching\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/shortpattern/testing/toolong\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/pathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/XpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/show12.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show123.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show1.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-test-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-tst-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/anotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/stillAnotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/outofpattern*ye\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test't est/path'm atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test%26t%20est/path%26m%20atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 930,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7220,
        "startLineNumber" : 71,
        "startColumnNumber" : 1,
        "endLineNumber" : 224,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void actualPathMatching() throws Exception {\n  Object bean=wac.getBean(\"mainController\");\n  Object defaultBean=wac.getBean(\"starController\");\n  MockHttpServletRequest req=new MockHttpServletRequest(\"GET\",\"/pathmatchingTest.html\");\n  HandlerExecutionChain hec=getHandler(req);\n  assertTrue(\"Handler is null\",hec != null);\n  assertTrue(\"Handler is correct bean\",hec.getHandler() == bean);\n  assertEquals(\"/pathmatchingTest.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"welcome.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"welcome.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingAA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  assertEquals(\"pathmatchingAA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"/pathmatchingA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administratort/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/bla.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.xml\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.gif\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testlastbit\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/bla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/test.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer2/notmatching/notmatching\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/shortpattern/testing/toolong\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/pathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/XpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/show12.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show123.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show1.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-test-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-tst-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/anotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/stillAnotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/outofpattern*ye\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test't est/path'm atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test%26t%20est/path%26m%20atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 938,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 215,
        "startColumnNumber" : 2,
        "endLineNumber" : 215,
        "endColumnNumber" : 88
      },
      "nodeContext" : "assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object"
  }, {
    "nodeContext" : "defaultBean",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 219,
      "startColumnNumber" : 75,
      "endLineNumber" : 219,
      "endColumnNumber" : 86
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 219,
        "startColumnNumber" : 55,
        "endLineNumber" : 219,
        "endColumnNumber" : 86
      },
      "nodeContext" : "hec.getHandler() == defaultBean",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 219,
        "startColumnNumber" : 40,
        "endLineNumber" : 219,
        "endColumnNumber" : 86
      },
      "nodeContext" : "hec != null && hec.getHandler() == defaultBean",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 219,
        "startColumnNumber" : 2,
        "endLineNumber" : 219,
        "endColumnNumber" : 87
      },
      "nodeContext" : "assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 219,
        "startColumnNumber" : 2,
        "endLineNumber" : 219,
        "endColumnNumber" : 88
      },
      "nodeContext" : "assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7163,
        "startLineNumber" : 72,
        "startColumnNumber" : 51,
        "endLineNumber" : 224,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Object bean=wac.getBean(\"mainController\");\n  Object defaultBean=wac.getBean(\"starController\");\n  MockHttpServletRequest req=new MockHttpServletRequest(\"GET\",\"/pathmatchingTest.html\");\n  HandlerExecutionChain hec=getHandler(req);\n  assertTrue(\"Handler is null\",hec != null);\n  assertTrue(\"Handler is correct bean\",hec.getHandler() == bean);\n  assertEquals(\"/pathmatchingTest.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"welcome.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"welcome.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingAA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  assertEquals(\"pathmatchingAA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"/pathmatchingA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administratort/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/bla.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.xml\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.gif\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testlastbit\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/bla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/test.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer2/notmatching/notmatching\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/shortpattern/testing/toolong\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/pathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/XpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/show12.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show123.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show1.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-test-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-tst-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/anotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/stillAnotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/outofpattern*ye\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test't est/path'm atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test%26t%20est/path%26m%20atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 930,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7220,
        "startLineNumber" : 71,
        "startColumnNumber" : 1,
        "endLineNumber" : 224,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void actualPathMatching() throws Exception {\n  Object bean=wac.getBean(\"mainController\");\n  Object defaultBean=wac.getBean(\"starController\");\n  MockHttpServletRequest req=new MockHttpServletRequest(\"GET\",\"/pathmatchingTest.html\");\n  HandlerExecutionChain hec=getHandler(req);\n  assertTrue(\"Handler is null\",hec != null);\n  assertTrue(\"Handler is correct bean\",hec.getHandler() == bean);\n  assertEquals(\"/pathmatchingTest.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"welcome.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"welcome.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingAA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  assertEquals(\"pathmatchingAA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"/pathmatchingA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administratort/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/bla.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.xml\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.gif\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testlastbit\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/bla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/test.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer2/notmatching/notmatching\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/shortpattern/testing/toolong\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/pathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/XpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/show12.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show123.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show1.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-test-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-tst-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/anotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/stillAnotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/outofpattern*ye\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test't est/path'm atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test%26t%20est/path%26m%20atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 938,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 219,
        "startColumnNumber" : 2,
        "endLineNumber" : 219,
        "endColumnNumber" : 88
      },
      "nodeContext" : "assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object"
  }, {
    "nodeContext" : "defaultBean",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 223,
      "startColumnNumber" : 75,
      "endLineNumber" : 223,
      "endColumnNumber" : 86
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 223,
        "startColumnNumber" : 55,
        "endLineNumber" : 223,
        "endColumnNumber" : 86
      },
      "nodeContext" : "hec.getHandler() == defaultBean",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 223,
        "startColumnNumber" : 40,
        "endLineNumber" : 223,
        "endColumnNumber" : 86
      },
      "nodeContext" : "hec != null && hec.getHandler() == defaultBean",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 85,
        "startLineNumber" : 223,
        "startColumnNumber" : 2,
        "endLineNumber" : 223,
        "endColumnNumber" : 87
      },
      "nodeContext" : "assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 223,
        "startColumnNumber" : 2,
        "endLineNumber" : 223,
        "endColumnNumber" : 88
      },
      "nodeContext" : "assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7163,
        "startLineNumber" : 72,
        "startColumnNumber" : 51,
        "endLineNumber" : 224,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Object bean=wac.getBean(\"mainController\");\n  Object defaultBean=wac.getBean(\"starController\");\n  MockHttpServletRequest req=new MockHttpServletRequest(\"GET\",\"/pathmatchingTest.html\");\n  HandlerExecutionChain hec=getHandler(req);\n  assertTrue(\"Handler is null\",hec != null);\n  assertTrue(\"Handler is correct bean\",hec.getHandler() == bean);\n  assertEquals(\"/pathmatchingTest.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"welcome.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"welcome.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingAA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  assertEquals(\"pathmatchingAA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"/pathmatchingA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administratort/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/bla.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.xml\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.gif\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testlastbit\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/bla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/test.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer2/notmatching/notmatching\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/shortpattern/testing/toolong\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/pathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/XpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/show12.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show123.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show1.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-test-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-tst-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/anotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/stillAnotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/outofpattern*ye\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test't est/path'm atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test%26t%20est/path%26m%20atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 930,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7220,
        "startLineNumber" : 71,
        "startColumnNumber" : 1,
        "endLineNumber" : 224,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void actualPathMatching() throws Exception {\n  Object bean=wac.getBean(\"mainController\");\n  Object defaultBean=wac.getBean(\"starController\");\n  MockHttpServletRequest req=new MockHttpServletRequest(\"GET\",\"/pathmatchingTest.html\");\n  HandlerExecutionChain hec=getHandler(req);\n  assertTrue(\"Handler is null\",hec != null);\n  assertTrue(\"Handler is correct bean\",hec.getHandler() == bean);\n  assertEquals(\"/pathmatchingTest.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"welcome.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"welcome.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingAA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  assertEquals(\"pathmatchingAA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/pathmatchingA.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  assertEquals(\"/pathmatchingA.html\",req.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administratort/pathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/bla.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.xml\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/another/bla.gif\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testlastbit\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/test/testla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/bla\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer/test.jsp\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/administrator/testing/longer2/notmatching/notmatching\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/shortpattern/testing/toolong\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/pathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/XpathXXmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/XXpathmatching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/show12.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show123.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/show1.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-test-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/reallyGood-tst-is-this.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpeg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/testing/test.jpg\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/anotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == bean);\n  req=new MockHttpServletRequest(\"GET\",\"/stillAnotherTest\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/outofpattern*ye\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test't est/path'm atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n  req=new MockHttpServletRequest(\"GET\",\"/test%26t%20est/path%26m%20atching.html\");\n  hec=getHandler(req);\n  assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 938,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 223,
        "startColumnNumber" : 2,
        "endLineNumber" : 223,
        "endColumnNumber" : 88
      },
      "nodeContext" : "assertTrue(\"Handler is correct bean\",hec != null && hec.getHandler() == defaultBean);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.Object"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 89,
    "startColumnNumber" : 75,
    "endLineNumber" : 89,
    "endColumnNumber" : 86
  }, {
    "charLength" : 11,
    "startLineNumber" : 101,
    "startColumnNumber" : 75,
    "endLineNumber" : 101,
    "endColumnNumber" : 86
  }, {
    "charLength" : 11,
    "startLineNumber" : 117,
    "startColumnNumber" : 75,
    "endLineNumber" : 117,
    "endColumnNumber" : 86
  }, {
    "charLength" : 11,
    "startLineNumber" : 132,
    "startColumnNumber" : 75,
    "endLineNumber" : 132,
    "endColumnNumber" : 86
  }, {
    "charLength" : 11,
    "startLineNumber" : 142,
    "startColumnNumber" : 75,
    "endLineNumber" : 142,
    "endColumnNumber" : 86
  }, {
    "charLength" : 11,
    "startLineNumber" : 154,
    "startColumnNumber" : 75,
    "endLineNumber" : 154,
    "endColumnNumber" : 86
  }, {
    "charLength" : 11,
    "startLineNumber" : 158,
    "startColumnNumber" : 75,
    "endLineNumber" : 158,
    "endColumnNumber" : 86
  }, {
    "charLength" : 11,
    "startLineNumber" : 170,
    "startColumnNumber" : 75,
    "endLineNumber" : 170,
    "endColumnNumber" : 86
  }, {
    "charLength" : 11,
    "startLineNumber" : 174,
    "startColumnNumber" : 75,
    "endLineNumber" : 174,
    "endColumnNumber" : 86
  }, {
    "charLength" : 11,
    "startLineNumber" : 194,
    "startColumnNumber" : 75,
    "endLineNumber" : 194,
    "endColumnNumber" : 86
  }, {
    "charLength" : 11,
    "startLineNumber" : 202,
    "startColumnNumber" : 75,
    "endLineNumber" : 202,
    "endColumnNumber" : 86
  }, {
    "charLength" : 11,
    "startLineNumber" : 210,
    "startColumnNumber" : 75,
    "endLineNumber" : 210,
    "endColumnNumber" : 86
  }, {
    "charLength" : 11,
    "startLineNumber" : 215,
    "startColumnNumber" : 75,
    "endLineNumber" : 215,
    "endColumnNumber" : 86
  }, {
    "charLength" : 11,
    "startLineNumber" : 219,
    "startColumnNumber" : 75,
    "endLineNumber" : 219,
    "endColumnNumber" : 86
  }, {
    "charLength" : 11,
    "startLineNumber" : 223,
    "startColumnNumber" : 75,
    "endLineNumber" : 223,
    "endColumnNumber" : 86
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 13,
    "layout" : 4
  } ]
}