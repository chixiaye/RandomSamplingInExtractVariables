{
  "id" : 213,
  "expression" : "builder",
  "projectName" : "signalapp@Signal-Android",
  "commitID" : "7e91132e7ed62a58b5f347de252ab1eda3f43b90",
  "filePath" : "/libsignal/service/src/main/java/org/whispersystems/signalservice/api/groupsv2/GroupChangeReconstruct.java",
  "occurrences" : 20,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "builder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 32,
      "startColumnNumber" : 6,
      "endLineNumber" : 32,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 32,
        "startColumnNumber" : 6,
        "endLineNumber" : 32,
        "endColumnNumber" : 84
      },
      "nodeContext" : "builder.setNewTitle(DecryptedString.newBuilder().setValue(toState.getTitle()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 32,
        "startColumnNumber" : 6,
        "endLineNumber" : 32,
        "endColumnNumber" : 85
      },
      "nodeContext" : "builder.setNewTitle(DecryptedString.newBuilder().setValue(toState.getTitle()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 31,
        "startColumnNumber" : 58,
        "endLineNumber" : 33,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  builder.setNewTitle(DecryptedString.newBuilder().setValue(toState.getTitle()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 147,
        "startLineNumber" : 31,
        "startColumnNumber" : 4,
        "endLineNumber" : 33,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!fromState.getTitle().equals(toState.getTitle())) {\n  builder.setNewTitle(DecryptedString.newBuilder().setValue(toState.getTitle()));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6770,
        "startLineNumber" : 27,
        "startColumnNumber" : 110,
        "endLineNumber" : 145,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  DecryptedGroupChange.Builder builder=DecryptedGroupChange.newBuilder().setRevision(toState.getRevision());\n  if (!fromState.getTitle().equals(toState.getTitle())) {\n    builder.setNewTitle(DecryptedString.newBuilder().setValue(toState.getTitle()));\n  }\n  if (!fromState.getDescription().equals(toState.getDescription())) {\n    builder.setNewDescription(DecryptedString.newBuilder().setValue(toState.getDescription()));\n  }\n  if (!fromState.getIsAnnouncementGroup().equals(toState.getIsAnnouncementGroup())) {\n    builder.setNewIsAnnouncementGroup(toState.getIsAnnouncementGroup());\n  }\n  if (!fromState.getAvatar().equals(toState.getAvatar())) {\n    builder.setNewAvatar(DecryptedString.newBuilder().setValue(toState.getAvatar()));\n  }\n  if (!fromState.getDisappearingMessagesTimer().equals(toState.getDisappearingMessagesTimer())) {\n    builder.setNewTimer(toState.getDisappearingMessagesTimer());\n  }\n  if (!fromState.getAccessControl().getAttributes().equals(toState.getAccessControl().getAttributes())) {\n    builder.setNewAttributeAccess(toState.getAccessControl().getAttributes());\n  }\n  if (!fromState.getAccessControl().getMembers().equals(toState.getAccessControl().getMembers())) {\n    builder.setNewMemberAccess(toState.getAccessControl().getMembers());\n  }\n  Set<ByteString> fromStateMemberUuids=membersToSetOfUuids(fromState.getMembersList());\n  Set<ByteString> toStateMemberUuids=membersToSetOfUuids(toState.getMembersList());\n  Set<ByteString> pendingMembersListA=pendingMembersToSetOfUuids(fromState.getPendingMembersList());\n  Set<ByteString> pendingMembersListB=pendingMembersToSetOfUuids(toState.getPendingMembersList());\n  Set<ByteString> requestingMembersListA=requestingMembersToSetOfUuids(fromState.getRequestingMembersList());\n  Set<ByteString> requestingMembersListB=requestingMembersToSetOfUuids(toState.getRequestingMembersList());\n  Set<ByteString> removedPendingMemberUuids=subtract(pendingMembersListA,pendingMembersListB);\n  Set<ByteString> removedRequestingMemberUuids=subtract(requestingMembersListA,requestingMembersListB);\n  Set<ByteString> newPendingMemberUuids=subtract(pendingMembersListB,pendingMembersListA);\n  Set<ByteString> newRequestingMemberUuids=subtract(requestingMembersListB,requestingMembersListA);\n  Set<ByteString> removedMemberUuids=subtract(fromStateMemberUuids,toStateMemberUuids);\n  Set<ByteString> newMemberUuids=subtract(toStateMemberUuids,fromStateMemberUuids);\n  Set<ByteString> addedByInvitationUuids=intersect(newMemberUuids,removedPendingMemberUuids);\n  Set<ByteString> addedByRequestApprovalUuids=intersect(newMemberUuids,removedRequestingMemberUuids);\n  Set<DecryptedMember> addedMembersByInvitation=intersectByUUID(toState.getMembersList(),addedByInvitationUuids);\n  Set<DecryptedMember> addedMembersByRequestApproval=intersectByUUID(toState.getMembersList(),addedByRequestApprovalUuids);\n  Set<DecryptedMember> addedMembers=intersectByUUID(toState.getMembersList(),subtract(newMemberUuids,addedByInvitationUuids,addedByRequestApprovalUuids));\n  Set<DecryptedPendingMember> uninvitedMembers=intersectPendingByUUID(fromState.getPendingMembersList(),subtract(removedPendingMemberUuids,addedByInvitationUuids));\n  Set<DecryptedRequestingMember> rejectedRequestMembers=intersectRequestingByUUID(fromState.getRequestingMembersList(),subtract(removedRequestingMemberUuids,addedByRequestApprovalUuids));\n  for (  DecryptedMember member : intersectByUUID(fromState.getMembersList(),removedMemberUuids)) {\n    builder.addDeleteMembers(member.getUuid());\n  }\n  for (  DecryptedMember member : addedMembers) {\n    builder.addNewMembers(member);\n  }\n  for (  DecryptedMember member : addedMembersByInvitation) {\n    builder.addPromotePendingMembers(member);\n  }\n  for (  DecryptedPendingMember uninvitedMember : uninvitedMembers) {\n    builder.addDeletePendingMembers(DecryptedPendingMemberRemoval.newBuilder().setUuid(uninvitedMember.getUuid()).setUuidCipherText(uninvitedMember.getUuidCipherText()));\n  }\n  for (  DecryptedPendingMember invitedMember : intersectPendingByUUID(toState.getPendingMembersList(),newPendingMemberUuids)) {\n    builder.addNewPendingMembers(invitedMember);\n  }\n  Set<ByteString> consistentMemberUuids=intersect(fromStateMemberUuids,toStateMemberUuids);\n  Set<DecryptedMember> changedMembers=intersectByUUID(subtract(toState.getMembersList(),fromState.getMembersList()),consistentMemberUuids);\n  Map<ByteString,DecryptedMember> membersUuidMap=uuidMap(fromState.getMembersList());\n  for (  DecryptedMember newState : changedMembers) {\n    DecryptedMember oldState=membersUuidMap.get(newState.getUuid());\n    if (oldState.getRole() != newState.getRole()) {\n      builder.addModifyMemberRoles(DecryptedModifyMemberRole.newBuilder().setUuid(newState.getUuid()).setRole(newState.getRole()));\n    }\n    if (!oldState.getProfileKey().equals(newState.getProfileKey())) {\n      builder.addModifiedProfileKeys(newState);\n    }\n  }\n  if (!fromState.getAccessControl().getAddFromInviteLink().equals(toState.getAccessControl().getAddFromInviteLink())) {\n    builder.setNewInviteLinkAccess(toState.getAccessControl().getAddFromInviteLink());\n  }\n  for (  DecryptedRequestingMember requestingMember : intersectRequestingByUUID(toState.getRequestingMembersList(),newRequestingMemberUuids)) {\n    builder.addNewRequestingMembers(requestingMember);\n  }\n  for (  DecryptedRequestingMember requestingMember : rejectedRequestMembers) {\n    builder.addDeleteRequestingMembers(requestingMember.getUuid());\n  }\n  for (  DecryptedMember member : addedMembersByRequestApproval) {\n    builder.addPromoteRequestingMembers(DecryptedApproveMember.newBuilder().setUuid(member.getUuid()).setRole(member.getRole()));\n  }\n  if (!fromState.getInviteLinkPassword().equals(toState.getInviteLinkPassword())) {\n    builder.setNewInviteLinkPassword(toState.getInviteLinkPassword());\n  }\n  return builder.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 714,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7048,
        "startLineNumber" : 24,
        "startColumnNumber" : 2,
        "endLineNumber" : 145,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Given a  {@param fromState} and a {@param toState} creates a {@link DecryptedGroupChange} that would take the {@param fromState} to the {@param toState}.\n */\npublic static DecryptedGroupChange reconstructGroupChange(DecryptedGroup fromState,DecryptedGroup toState){\n  DecryptedGroupChange.Builder builder=DecryptedGroupChange.newBuilder().setRevision(toState.getRevision());\n  if (!fromState.getTitle().equals(toState.getTitle())) {\n    builder.setNewTitle(DecryptedString.newBuilder().setValue(toState.getTitle()));\n  }\n  if (!fromState.getDescription().equals(toState.getDescription())) {\n    builder.setNewDescription(DecryptedString.newBuilder().setValue(toState.getDescription()));\n  }\n  if (!fromState.getIsAnnouncementGroup().equals(toState.getIsAnnouncementGroup())) {\n    builder.setNewIsAnnouncementGroup(toState.getIsAnnouncementGroup());\n  }\n  if (!fromState.getAvatar().equals(toState.getAvatar())) {\n    builder.setNewAvatar(DecryptedString.newBuilder().setValue(toState.getAvatar()));\n  }\n  if (!fromState.getDisappearingMessagesTimer().equals(toState.getDisappearingMessagesTimer())) {\n    builder.setNewTimer(toState.getDisappearingMessagesTimer());\n  }\n  if (!fromState.getAccessControl().getAttributes().equals(toState.getAccessControl().getAttributes())) {\n    builder.setNewAttributeAccess(toState.getAccessControl().getAttributes());\n  }\n  if (!fromState.getAccessControl().getMembers().equals(toState.getAccessControl().getMembers())) {\n    builder.setNewMemberAccess(toState.getAccessControl().getMembers());\n  }\n  Set<ByteString> fromStateMemberUuids=membersToSetOfUuids(fromState.getMembersList());\n  Set<ByteString> toStateMemberUuids=membersToSetOfUuids(toState.getMembersList());\n  Set<ByteString> pendingMembersListA=pendingMembersToSetOfUuids(fromState.getPendingMembersList());\n  Set<ByteString> pendingMembersListB=pendingMembersToSetOfUuids(toState.getPendingMembersList());\n  Set<ByteString> requestingMembersListA=requestingMembersToSetOfUuids(fromState.getRequestingMembersList());\n  Set<ByteString> requestingMembersListB=requestingMembersToSetOfUuids(toState.getRequestingMembersList());\n  Set<ByteString> removedPendingMemberUuids=subtract(pendingMembersListA,pendingMembersListB);\n  Set<ByteString> removedRequestingMemberUuids=subtract(requestingMembersListA,requestingMembersListB);\n  Set<ByteString> newPendingMemberUuids=subtract(pendingMembersListB,pendingMembersListA);\n  Set<ByteString> newRequestingMemberUuids=subtract(requestingMembersListB,requestingMembersListA);\n  Set<ByteString> removedMemberUuids=subtract(fromStateMemberUuids,toStateMemberUuids);\n  Set<ByteString> newMemberUuids=subtract(toStateMemberUuids,fromStateMemberUuids);\n  Set<ByteString> addedByInvitationUuids=intersect(newMemberUuids,removedPendingMemberUuids);\n  Set<ByteString> addedByRequestApprovalUuids=intersect(newMemberUuids,removedRequestingMemberUuids);\n  Set<DecryptedMember> addedMembersByInvitation=intersectByUUID(toState.getMembersList(),addedByInvitationUuids);\n  Set<DecryptedMember> addedMembersByRequestApproval=intersectByUUID(toState.getMembersList(),addedByRequestApprovalUuids);\n  Set<DecryptedMember> addedMembers=intersectByUUID(toState.getMembersList(),subtract(newMemberUuids,addedByInvitationUuids,addedByRequestApprovalUuids));\n  Set<DecryptedPendingMember> uninvitedMembers=intersectPendingByUUID(fromState.getPendingMembersList(),subtract(removedPendingMemberUuids,addedByInvitationUuids));\n  Set<DecryptedRequestingMember> rejectedRequestMembers=intersectRequestingByUUID(fromState.getRequestingMembersList(),subtract(removedRequestingMemberUuids,addedByRequestApprovalUuids));\n  for (  DecryptedMember member : intersectByUUID(fromState.getMembersList(),removedMemberUuids)) {\n    builder.addDeleteMembers(member.getUuid());\n  }\n  for (  DecryptedMember member : addedMembers) {\n    builder.addNewMembers(member);\n  }\n  for (  DecryptedMember member : addedMembersByInvitation) {\n    builder.addPromotePendingMembers(member);\n  }\n  for (  DecryptedPendingMember uninvitedMember : uninvitedMembers) {\n    builder.addDeletePendingMembers(DecryptedPendingMemberRemoval.newBuilder().setUuid(uninvitedMember.getUuid()).setUuidCipherText(uninvitedMember.getUuidCipherText()));\n  }\n  for (  DecryptedPendingMember invitedMember : intersectPendingByUUID(toState.getPendingMembersList(),newPendingMemberUuids)) {\n    builder.addNewPendingMembers(invitedMember);\n  }\n  Set<ByteString> consistentMemberUuids=intersect(fromStateMemberUuids,toStateMemberUuids);\n  Set<DecryptedMember> changedMembers=intersectByUUID(subtract(toState.getMembersList(),fromState.getMembersList()),consistentMemberUuids);\n  Map<ByteString,DecryptedMember> membersUuidMap=uuidMap(fromState.getMembersList());\n  for (  DecryptedMember newState : changedMembers) {\n    DecryptedMember oldState=membersUuidMap.get(newState.getUuid());\n    if (oldState.getRole() != newState.getRole()) {\n      builder.addModifyMemberRoles(DecryptedModifyMemberRole.newBuilder().setUuid(newState.getUuid()).setRole(newState.getRole()));\n    }\n    if (!oldState.getProfileKey().equals(newState.getProfileKey())) {\n      builder.addModifiedProfileKeys(newState);\n    }\n  }\n  if (!fromState.getAccessControl().getAddFromInviteLink().equals(toState.getAccessControl().getAddFromInviteLink())) {\n    builder.setNewInviteLinkAccess(toState.getAccessControl().getAddFromInviteLink());\n  }\n  for (  DecryptedRequestingMember requestingMember : intersectRequestingByUUID(toState.getRequestingMembersList(),newRequestingMemberUuids)) {\n    builder.addNewRequestingMembers(requestingMember);\n  }\n  for (  DecryptedRequestingMember requestingMember : rejectedRequestMembers) {\n    builder.addDeleteRequestingMembers(requestingMember.getUuid());\n  }\n  for (  DecryptedMember member : addedMembersByRequestApproval) {\n    builder.addPromoteRequestingMembers(DecryptedApproveMember.newBuilder().setUuid(member.getUuid()).setRole(member.getRole()));\n  }\n  if (!fromState.getInviteLinkPassword().equals(toState.getInviteLinkPassword())) {\n    builder.setNewInviteLinkPassword(toState.getInviteLinkPassword());\n  }\n  return builder.build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 729,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 32,
        "startColumnNumber" : 6,
        "endLineNumber" : 32,
        "endColumnNumber" : 85
      },
      "nodeContext" : "builder.setNewTitle(DecryptedString.newBuilder().setValue(toState.getTitle()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "DecryptedGroupChange.Builder"
  }, {
    "nodeContext" : "builder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 36,
      "startColumnNumber" : 6,
      "endLineNumber" : 36,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 36,
        "startColumnNumber" : 6,
        "endLineNumber" : 36,
        "endColumnNumber" : 96
      },
      "nodeContext" : "builder.setNewDescription(DecryptedString.newBuilder().setValue(toState.getDescription()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 36,
        "startColumnNumber" : 6,
        "endLineNumber" : 36,
        "endColumnNumber" : 97
      },
      "nodeContext" : "builder.setNewDescription(DecryptedString.newBuilder().setValue(toState.getDescription()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 35,
        "startColumnNumber" : 70,
        "endLineNumber" : 37,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  builder.setNewDescription(DecryptedString.newBuilder().setValue(toState.getDescription()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 171,
        "startLineNumber" : 35,
        "startColumnNumber" : 4,
        "endLineNumber" : 37,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!fromState.getDescription().equals(toState.getDescription())) {\n  builder.setNewDescription(DecryptedString.newBuilder().setValue(toState.getDescription()));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6770,
        "startLineNumber" : 27,
        "startColumnNumber" : 110,
        "endLineNumber" : 145,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  DecryptedGroupChange.Builder builder=DecryptedGroupChange.newBuilder().setRevision(toState.getRevision());\n  if (!fromState.getTitle().equals(toState.getTitle())) {\n    builder.setNewTitle(DecryptedString.newBuilder().setValue(toState.getTitle()));\n  }\n  if (!fromState.getDescription().equals(toState.getDescription())) {\n    builder.setNewDescription(DecryptedString.newBuilder().setValue(toState.getDescription()));\n  }\n  if (!fromState.getIsAnnouncementGroup().equals(toState.getIsAnnouncementGroup())) {\n    builder.setNewIsAnnouncementGroup(toState.getIsAnnouncementGroup());\n  }\n  if (!fromState.getAvatar().equals(toState.getAvatar())) {\n    builder.setNewAvatar(DecryptedString.newBuilder().setValue(toState.getAvatar()));\n  }\n  if (!fromState.getDisappearingMessagesTimer().equals(toState.getDisappearingMessagesTimer())) {\n    builder.setNewTimer(toState.getDisappearingMessagesTimer());\n  }\n  if (!fromState.getAccessControl().getAttributes().equals(toState.getAccessControl().getAttributes())) {\n    builder.setNewAttributeAccess(toState.getAccessControl().getAttributes());\n  }\n  if (!fromState.getAccessControl().getMembers().equals(toState.getAccessControl().getMembers())) {\n    builder.setNewMemberAccess(toState.getAccessControl().getMembers());\n  }\n  Set<ByteString> fromStateMemberUuids=membersToSetOfUuids(fromState.getMembersList());\n  Set<ByteString> toStateMemberUuids=membersToSetOfUuids(toState.getMembersList());\n  Set<ByteString> pendingMembersListA=pendingMembersToSetOfUuids(fromState.getPendingMembersList());\n  Set<ByteString> pendingMembersListB=pendingMembersToSetOfUuids(toState.getPendingMembersList());\n  Set<ByteString> requestingMembersListA=requestingMembersToSetOfUuids(fromState.getRequestingMembersList());\n  Set<ByteString> requestingMembersListB=requestingMembersToSetOfUuids(toState.getRequestingMembersList());\n  Set<ByteString> removedPendingMemberUuids=subtract(pendingMembersListA,pendingMembersListB);\n  Set<ByteString> removedRequestingMemberUuids=subtract(requestingMembersListA,requestingMembersListB);\n  Set<ByteString> newPendingMemberUuids=subtract(pendingMembersListB,pendingMembersListA);\n  Set<ByteString> newRequestingMemberUuids=subtract(requestingMembersListB,requestingMembersListA);\n  Set<ByteString> removedMemberUuids=subtract(fromStateMemberUuids,toStateMemberUuids);\n  Set<ByteString> newMemberUuids=subtract(toStateMemberUuids,fromStateMemberUuids);\n  Set<ByteString> addedByInvitationUuids=intersect(newMemberUuids,removedPendingMemberUuids);\n  Set<ByteString> addedByRequestApprovalUuids=intersect(newMemberUuids,removedRequestingMemberUuids);\n  Set<DecryptedMember> addedMembersByInvitation=intersectByUUID(toState.getMembersList(),addedByInvitationUuids);\n  Set<DecryptedMember> addedMembersByRequestApproval=intersectByUUID(toState.getMembersList(),addedByRequestApprovalUuids);\n  Set<DecryptedMember> addedMembers=intersectByUUID(toState.getMembersList(),subtract(newMemberUuids,addedByInvitationUuids,addedByRequestApprovalUuids));\n  Set<DecryptedPendingMember> uninvitedMembers=intersectPendingByUUID(fromState.getPendingMembersList(),subtract(removedPendingMemberUuids,addedByInvitationUuids));\n  Set<DecryptedRequestingMember> rejectedRequestMembers=intersectRequestingByUUID(fromState.getRequestingMembersList(),subtract(removedRequestingMemberUuids,addedByRequestApprovalUuids));\n  for (  DecryptedMember member : intersectByUUID(fromState.getMembersList(),removedMemberUuids)) {\n    builder.addDeleteMembers(member.getUuid());\n  }\n  for (  DecryptedMember member : addedMembers) {\n    builder.addNewMembers(member);\n  }\n  for (  DecryptedMember member : addedMembersByInvitation) {\n    builder.addPromotePendingMembers(member);\n  }\n  for (  DecryptedPendingMember uninvitedMember : uninvitedMembers) {\n    builder.addDeletePendingMembers(DecryptedPendingMemberRemoval.newBuilder().setUuid(uninvitedMember.getUuid()).setUuidCipherText(uninvitedMember.getUuidCipherText()));\n  }\n  for (  DecryptedPendingMember invitedMember : intersectPendingByUUID(toState.getPendingMembersList(),newPendingMemberUuids)) {\n    builder.addNewPendingMembers(invitedMember);\n  }\n  Set<ByteString> consistentMemberUuids=intersect(fromStateMemberUuids,toStateMemberUuids);\n  Set<DecryptedMember> changedMembers=intersectByUUID(subtract(toState.getMembersList(),fromState.getMembersList()),consistentMemberUuids);\n  Map<ByteString,DecryptedMember> membersUuidMap=uuidMap(fromState.getMembersList());\n  for (  DecryptedMember newState : changedMembers) {\n    DecryptedMember oldState=membersUuidMap.get(newState.getUuid());\n    if (oldState.getRole() != newState.getRole()) {\n      builder.addModifyMemberRoles(DecryptedModifyMemberRole.newBuilder().setUuid(newState.getUuid()).setRole(newState.getRole()));\n    }\n    if (!oldState.getProfileKey().equals(newState.getProfileKey())) {\n      builder.addModifiedProfileKeys(newState);\n    }\n  }\n  if (!fromState.getAccessControl().getAddFromInviteLink().equals(toState.getAccessControl().getAddFromInviteLink())) {\n    builder.setNewInviteLinkAccess(toState.getAccessControl().getAddFromInviteLink());\n  }\n  for (  DecryptedRequestingMember requestingMember : intersectRequestingByUUID(toState.getRequestingMembersList(),newRequestingMemberUuids)) {\n    builder.addNewRequestingMembers(requestingMember);\n  }\n  for (  DecryptedRequestingMember requestingMember : rejectedRequestMembers) {\n    builder.addDeleteRequestingMembers(requestingMember.getUuid());\n  }\n  for (  DecryptedMember member : addedMembersByRequestApproval) {\n    builder.addPromoteRequestingMembers(DecryptedApproveMember.newBuilder().setUuid(member.getUuid()).setRole(member.getRole()));\n  }\n  if (!fromState.getInviteLinkPassword().equals(toState.getInviteLinkPassword())) {\n    builder.setNewInviteLinkPassword(toState.getInviteLinkPassword());\n  }\n  return builder.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 714,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7048,
        "startLineNumber" : 24,
        "startColumnNumber" : 2,
        "endLineNumber" : 145,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Given a  {@param fromState} and a {@param toState} creates a {@link DecryptedGroupChange} that would take the {@param fromState} to the {@param toState}.\n */\npublic static DecryptedGroupChange reconstructGroupChange(DecryptedGroup fromState,DecryptedGroup toState){\n  DecryptedGroupChange.Builder builder=DecryptedGroupChange.newBuilder().setRevision(toState.getRevision());\n  if (!fromState.getTitle().equals(toState.getTitle())) {\n    builder.setNewTitle(DecryptedString.newBuilder().setValue(toState.getTitle()));\n  }\n  if (!fromState.getDescription().equals(toState.getDescription())) {\n    builder.setNewDescription(DecryptedString.newBuilder().setValue(toState.getDescription()));\n  }\n  if (!fromState.getIsAnnouncementGroup().equals(toState.getIsAnnouncementGroup())) {\n    builder.setNewIsAnnouncementGroup(toState.getIsAnnouncementGroup());\n  }\n  if (!fromState.getAvatar().equals(toState.getAvatar())) {\n    builder.setNewAvatar(DecryptedString.newBuilder().setValue(toState.getAvatar()));\n  }\n  if (!fromState.getDisappearingMessagesTimer().equals(toState.getDisappearingMessagesTimer())) {\n    builder.setNewTimer(toState.getDisappearingMessagesTimer());\n  }\n  if (!fromState.getAccessControl().getAttributes().equals(toState.getAccessControl().getAttributes())) {\n    builder.setNewAttributeAccess(toState.getAccessControl().getAttributes());\n  }\n  if (!fromState.getAccessControl().getMembers().equals(toState.getAccessControl().getMembers())) {\n    builder.setNewMemberAccess(toState.getAccessControl().getMembers());\n  }\n  Set<ByteString> fromStateMemberUuids=membersToSetOfUuids(fromState.getMembersList());\n  Set<ByteString> toStateMemberUuids=membersToSetOfUuids(toState.getMembersList());\n  Set<ByteString> pendingMembersListA=pendingMembersToSetOfUuids(fromState.getPendingMembersList());\n  Set<ByteString> pendingMembersListB=pendingMembersToSetOfUuids(toState.getPendingMembersList());\n  Set<ByteString> requestingMembersListA=requestingMembersToSetOfUuids(fromState.getRequestingMembersList());\n  Set<ByteString> requestingMembersListB=requestingMembersToSetOfUuids(toState.getRequestingMembersList());\n  Set<ByteString> removedPendingMemberUuids=subtract(pendingMembersListA,pendingMembersListB);\n  Set<ByteString> removedRequestingMemberUuids=subtract(requestingMembersListA,requestingMembersListB);\n  Set<ByteString> newPendingMemberUuids=subtract(pendingMembersListB,pendingMembersListA);\n  Set<ByteString> newRequestingMemberUuids=subtract(requestingMembersListB,requestingMembersListA);\n  Set<ByteString> removedMemberUuids=subtract(fromStateMemberUuids,toStateMemberUuids);\n  Set<ByteString> newMemberUuids=subtract(toStateMemberUuids,fromStateMemberUuids);\n  Set<ByteString> addedByInvitationUuids=intersect(newMemberUuids,removedPendingMemberUuids);\n  Set<ByteString> addedByRequestApprovalUuids=intersect(newMemberUuids,removedRequestingMemberUuids);\n  Set<DecryptedMember> addedMembersByInvitation=intersectByUUID(toState.getMembersList(),addedByInvitationUuids);\n  Set<DecryptedMember> addedMembersByRequestApproval=intersectByUUID(toState.getMembersList(),addedByRequestApprovalUuids);\n  Set<DecryptedMember> addedMembers=intersectByUUID(toState.getMembersList(),subtract(newMemberUuids,addedByInvitationUuids,addedByRequestApprovalUuids));\n  Set<DecryptedPendingMember> uninvitedMembers=intersectPendingByUUID(fromState.getPendingMembersList(),subtract(removedPendingMemberUuids,addedByInvitationUuids));\n  Set<DecryptedRequestingMember> rejectedRequestMembers=intersectRequestingByUUID(fromState.getRequestingMembersList(),subtract(removedRequestingMemberUuids,addedByRequestApprovalUuids));\n  for (  DecryptedMember member : intersectByUUID(fromState.getMembersList(),removedMemberUuids)) {\n    builder.addDeleteMembers(member.getUuid());\n  }\n  for (  DecryptedMember member : addedMembers) {\n    builder.addNewMembers(member);\n  }\n  for (  DecryptedMember member : addedMembersByInvitation) {\n    builder.addPromotePendingMembers(member);\n  }\n  for (  DecryptedPendingMember uninvitedMember : uninvitedMembers) {\n    builder.addDeletePendingMembers(DecryptedPendingMemberRemoval.newBuilder().setUuid(uninvitedMember.getUuid()).setUuidCipherText(uninvitedMember.getUuidCipherText()));\n  }\n  for (  DecryptedPendingMember invitedMember : intersectPendingByUUID(toState.getPendingMembersList(),newPendingMemberUuids)) {\n    builder.addNewPendingMembers(invitedMember);\n  }\n  Set<ByteString> consistentMemberUuids=intersect(fromStateMemberUuids,toStateMemberUuids);\n  Set<DecryptedMember> changedMembers=intersectByUUID(subtract(toState.getMembersList(),fromState.getMembersList()),consistentMemberUuids);\n  Map<ByteString,DecryptedMember> membersUuidMap=uuidMap(fromState.getMembersList());\n  for (  DecryptedMember newState : changedMembers) {\n    DecryptedMember oldState=membersUuidMap.get(newState.getUuid());\n    if (oldState.getRole() != newState.getRole()) {\n      builder.addModifyMemberRoles(DecryptedModifyMemberRole.newBuilder().setUuid(newState.getUuid()).setRole(newState.getRole()));\n    }\n    if (!oldState.getProfileKey().equals(newState.getProfileKey())) {\n      builder.addModifiedProfileKeys(newState);\n    }\n  }\n  if (!fromState.getAccessControl().getAddFromInviteLink().equals(toState.getAccessControl().getAddFromInviteLink())) {\n    builder.setNewInviteLinkAccess(toState.getAccessControl().getAddFromInviteLink());\n  }\n  for (  DecryptedRequestingMember requestingMember : intersectRequestingByUUID(toState.getRequestingMembersList(),newRequestingMemberUuids)) {\n    builder.addNewRequestingMembers(requestingMember);\n  }\n  for (  DecryptedRequestingMember requestingMember : rejectedRequestMembers) {\n    builder.addDeleteRequestingMembers(requestingMember.getUuid());\n  }\n  for (  DecryptedMember member : addedMembersByRequestApproval) {\n    builder.addPromoteRequestingMembers(DecryptedApproveMember.newBuilder().setUuid(member.getUuid()).setRole(member.getRole()));\n  }\n  if (!fromState.getInviteLinkPassword().equals(toState.getInviteLinkPassword())) {\n    builder.setNewInviteLinkPassword(toState.getInviteLinkPassword());\n  }\n  return builder.build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 729,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 36,
        "startColumnNumber" : 6,
        "endLineNumber" : 36,
        "endColumnNumber" : 97
      },
      "nodeContext" : "builder.setNewDescription(DecryptedString.newBuilder().setValue(toState.getDescription()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "DecryptedGroupChange.Builder"
  }, {
    "nodeContext" : "builder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 40,
      "startColumnNumber" : 6,
      "endLineNumber" : 40,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 40,
        "startColumnNumber" : 6,
        "endLineNumber" : 40,
        "endColumnNumber" : 73
      },
      "nodeContext" : "builder.setNewIsAnnouncementGroup(toState.getIsAnnouncementGroup())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 40,
        "startColumnNumber" : 6,
        "endLineNumber" : 40,
        "endColumnNumber" : 74
      },
      "nodeContext" : "builder.setNewIsAnnouncementGroup(toState.getIsAnnouncementGroup());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 39,
        "startColumnNumber" : 86,
        "endLineNumber" : 41,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  builder.setNewIsAnnouncementGroup(toState.getIsAnnouncementGroup());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 164,
        "startLineNumber" : 39,
        "startColumnNumber" : 4,
        "endLineNumber" : 41,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!fromState.getIsAnnouncementGroup().equals(toState.getIsAnnouncementGroup())) {\n  builder.setNewIsAnnouncementGroup(toState.getIsAnnouncementGroup());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6770,
        "startLineNumber" : 27,
        "startColumnNumber" : 110,
        "endLineNumber" : 145,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  DecryptedGroupChange.Builder builder=DecryptedGroupChange.newBuilder().setRevision(toState.getRevision());\n  if (!fromState.getTitle().equals(toState.getTitle())) {\n    builder.setNewTitle(DecryptedString.newBuilder().setValue(toState.getTitle()));\n  }\n  if (!fromState.getDescription().equals(toState.getDescription())) {\n    builder.setNewDescription(DecryptedString.newBuilder().setValue(toState.getDescription()));\n  }\n  if (!fromState.getIsAnnouncementGroup().equals(toState.getIsAnnouncementGroup())) {\n    builder.setNewIsAnnouncementGroup(toState.getIsAnnouncementGroup());\n  }\n  if (!fromState.getAvatar().equals(toState.getAvatar())) {\n    builder.setNewAvatar(DecryptedString.newBuilder().setValue(toState.getAvatar()));\n  }\n  if (!fromState.getDisappearingMessagesTimer().equals(toState.getDisappearingMessagesTimer())) {\n    builder.setNewTimer(toState.getDisappearingMessagesTimer());\n  }\n  if (!fromState.getAccessControl().getAttributes().equals(toState.getAccessControl().getAttributes())) {\n    builder.setNewAttributeAccess(toState.getAccessControl().getAttributes());\n  }\n  if (!fromState.getAccessControl().getMembers().equals(toState.getAccessControl().getMembers())) {\n    builder.setNewMemberAccess(toState.getAccessControl().getMembers());\n  }\n  Set<ByteString> fromStateMemberUuids=membersToSetOfUuids(fromState.getMembersList());\n  Set<ByteString> toStateMemberUuids=membersToSetOfUuids(toState.getMembersList());\n  Set<ByteString> pendingMembersListA=pendingMembersToSetOfUuids(fromState.getPendingMembersList());\n  Set<ByteString> pendingMembersListB=pendingMembersToSetOfUuids(toState.getPendingMembersList());\n  Set<ByteString> requestingMembersListA=requestingMembersToSetOfUuids(fromState.getRequestingMembersList());\n  Set<ByteString> requestingMembersListB=requestingMembersToSetOfUuids(toState.getRequestingMembersList());\n  Set<ByteString> removedPendingMemberUuids=subtract(pendingMembersListA,pendingMembersListB);\n  Set<ByteString> removedRequestingMemberUuids=subtract(requestingMembersListA,requestingMembersListB);\n  Set<ByteString> newPendingMemberUuids=subtract(pendingMembersListB,pendingMembersListA);\n  Set<ByteString> newRequestingMemberUuids=subtract(requestingMembersListB,requestingMembersListA);\n  Set<ByteString> removedMemberUuids=subtract(fromStateMemberUuids,toStateMemberUuids);\n  Set<ByteString> newMemberUuids=subtract(toStateMemberUuids,fromStateMemberUuids);\n  Set<ByteString> addedByInvitationUuids=intersect(newMemberUuids,removedPendingMemberUuids);\n  Set<ByteString> addedByRequestApprovalUuids=intersect(newMemberUuids,removedRequestingMemberUuids);\n  Set<DecryptedMember> addedMembersByInvitation=intersectByUUID(toState.getMembersList(),addedByInvitationUuids);\n  Set<DecryptedMember> addedMembersByRequestApproval=intersectByUUID(toState.getMembersList(),addedByRequestApprovalUuids);\n  Set<DecryptedMember> addedMembers=intersectByUUID(toState.getMembersList(),subtract(newMemberUuids,addedByInvitationUuids,addedByRequestApprovalUuids));\n  Set<DecryptedPendingMember> uninvitedMembers=intersectPendingByUUID(fromState.getPendingMembersList(),subtract(removedPendingMemberUuids,addedByInvitationUuids));\n  Set<DecryptedRequestingMember> rejectedRequestMembers=intersectRequestingByUUID(fromState.getRequestingMembersList(),subtract(removedRequestingMemberUuids,addedByRequestApprovalUuids));\n  for (  DecryptedMember member : intersectByUUID(fromState.getMembersList(),removedMemberUuids)) {\n    builder.addDeleteMembers(member.getUuid());\n  }\n  for (  DecryptedMember member : addedMembers) {\n    builder.addNewMembers(member);\n  }\n  for (  DecryptedMember member : addedMembersByInvitation) {\n    builder.addPromotePendingMembers(member);\n  }\n  for (  DecryptedPendingMember uninvitedMember : uninvitedMembers) {\n    builder.addDeletePendingMembers(DecryptedPendingMemberRemoval.newBuilder().setUuid(uninvitedMember.getUuid()).setUuidCipherText(uninvitedMember.getUuidCipherText()));\n  }\n  for (  DecryptedPendingMember invitedMember : intersectPendingByUUID(toState.getPendingMembersList(),newPendingMemberUuids)) {\n    builder.addNewPendingMembers(invitedMember);\n  }\n  Set<ByteString> consistentMemberUuids=intersect(fromStateMemberUuids,toStateMemberUuids);\n  Set<DecryptedMember> changedMembers=intersectByUUID(subtract(toState.getMembersList(),fromState.getMembersList()),consistentMemberUuids);\n  Map<ByteString,DecryptedMember> membersUuidMap=uuidMap(fromState.getMembersList());\n  for (  DecryptedMember newState : changedMembers) {\n    DecryptedMember oldState=membersUuidMap.get(newState.getUuid());\n    if (oldState.getRole() != newState.getRole()) {\n      builder.addModifyMemberRoles(DecryptedModifyMemberRole.newBuilder().setUuid(newState.getUuid()).setRole(newState.getRole()));\n    }\n    if (!oldState.getProfileKey().equals(newState.getProfileKey())) {\n      builder.addModifiedProfileKeys(newState);\n    }\n  }\n  if (!fromState.getAccessControl().getAddFromInviteLink().equals(toState.getAccessControl().getAddFromInviteLink())) {\n    builder.setNewInviteLinkAccess(toState.getAccessControl().getAddFromInviteLink());\n  }\n  for (  DecryptedRequestingMember requestingMember : intersectRequestingByUUID(toState.getRequestingMembersList(),newRequestingMemberUuids)) {\n    builder.addNewRequestingMembers(requestingMember);\n  }\n  for (  DecryptedRequestingMember requestingMember : rejectedRequestMembers) {\n    builder.addDeleteRequestingMembers(requestingMember.getUuid());\n  }\n  for (  DecryptedMember member : addedMembersByRequestApproval) {\n    builder.addPromoteRequestingMembers(DecryptedApproveMember.newBuilder().setUuid(member.getUuid()).setRole(member.getRole()));\n  }\n  if (!fromState.getInviteLinkPassword().equals(toState.getInviteLinkPassword())) {\n    builder.setNewInviteLinkPassword(toState.getInviteLinkPassword());\n  }\n  return builder.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 714,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7048,
        "startLineNumber" : 24,
        "startColumnNumber" : 2,
        "endLineNumber" : 145,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Given a  {@param fromState} and a {@param toState} creates a {@link DecryptedGroupChange} that would take the {@param fromState} to the {@param toState}.\n */\npublic static DecryptedGroupChange reconstructGroupChange(DecryptedGroup fromState,DecryptedGroup toState){\n  DecryptedGroupChange.Builder builder=DecryptedGroupChange.newBuilder().setRevision(toState.getRevision());\n  if (!fromState.getTitle().equals(toState.getTitle())) {\n    builder.setNewTitle(DecryptedString.newBuilder().setValue(toState.getTitle()));\n  }\n  if (!fromState.getDescription().equals(toState.getDescription())) {\n    builder.setNewDescription(DecryptedString.newBuilder().setValue(toState.getDescription()));\n  }\n  if (!fromState.getIsAnnouncementGroup().equals(toState.getIsAnnouncementGroup())) {\n    builder.setNewIsAnnouncementGroup(toState.getIsAnnouncementGroup());\n  }\n  if (!fromState.getAvatar().equals(toState.getAvatar())) {\n    builder.setNewAvatar(DecryptedString.newBuilder().setValue(toState.getAvatar()));\n  }\n  if (!fromState.getDisappearingMessagesTimer().equals(toState.getDisappearingMessagesTimer())) {\n    builder.setNewTimer(toState.getDisappearingMessagesTimer());\n  }\n  if (!fromState.getAccessControl().getAttributes().equals(toState.getAccessControl().getAttributes())) {\n    builder.setNewAttributeAccess(toState.getAccessControl().getAttributes());\n  }\n  if (!fromState.getAccessControl().getMembers().equals(toState.getAccessControl().getMembers())) {\n    builder.setNewMemberAccess(toState.getAccessControl().getMembers());\n  }\n  Set<ByteString> fromStateMemberUuids=membersToSetOfUuids(fromState.getMembersList());\n  Set<ByteString> toStateMemberUuids=membersToSetOfUuids(toState.getMembersList());\n  Set<ByteString> pendingMembersListA=pendingMembersToSetOfUuids(fromState.getPendingMembersList());\n  Set<ByteString> pendingMembersListB=pendingMembersToSetOfUuids(toState.getPendingMembersList());\n  Set<ByteString> requestingMembersListA=requestingMembersToSetOfUuids(fromState.getRequestingMembersList());\n  Set<ByteString> requestingMembersListB=requestingMembersToSetOfUuids(toState.getRequestingMembersList());\n  Set<ByteString> removedPendingMemberUuids=subtract(pendingMembersListA,pendingMembersListB);\n  Set<ByteString> removedRequestingMemberUuids=subtract(requestingMembersListA,requestingMembersListB);\n  Set<ByteString> newPendingMemberUuids=subtract(pendingMembersListB,pendingMembersListA);\n  Set<ByteString> newRequestingMemberUuids=subtract(requestingMembersListB,requestingMembersListA);\n  Set<ByteString> removedMemberUuids=subtract(fromStateMemberUuids,toStateMemberUuids);\n  Set<ByteString> newMemberUuids=subtract(toStateMemberUuids,fromStateMemberUuids);\n  Set<ByteString> addedByInvitationUuids=intersect(newMemberUuids,removedPendingMemberUuids);\n  Set<ByteString> addedByRequestApprovalUuids=intersect(newMemberUuids,removedRequestingMemberUuids);\n  Set<DecryptedMember> addedMembersByInvitation=intersectByUUID(toState.getMembersList(),addedByInvitationUuids);\n  Set<DecryptedMember> addedMembersByRequestApproval=intersectByUUID(toState.getMembersList(),addedByRequestApprovalUuids);\n  Set<DecryptedMember> addedMembers=intersectByUUID(toState.getMembersList(),subtract(newMemberUuids,addedByInvitationUuids,addedByRequestApprovalUuids));\n  Set<DecryptedPendingMember> uninvitedMembers=intersectPendingByUUID(fromState.getPendingMembersList(),subtract(removedPendingMemberUuids,addedByInvitationUuids));\n  Set<DecryptedRequestingMember> rejectedRequestMembers=intersectRequestingByUUID(fromState.getRequestingMembersList(),subtract(removedRequestingMemberUuids,addedByRequestApprovalUuids));\n  for (  DecryptedMember member : intersectByUUID(fromState.getMembersList(),removedMemberUuids)) {\n    builder.addDeleteMembers(member.getUuid());\n  }\n  for (  DecryptedMember member : addedMembers) {\n    builder.addNewMembers(member);\n  }\n  for (  DecryptedMember member : addedMembersByInvitation) {\n    builder.addPromotePendingMembers(member);\n  }\n  for (  DecryptedPendingMember uninvitedMember : uninvitedMembers) {\n    builder.addDeletePendingMembers(DecryptedPendingMemberRemoval.newBuilder().setUuid(uninvitedMember.getUuid()).setUuidCipherText(uninvitedMember.getUuidCipherText()));\n  }\n  for (  DecryptedPendingMember invitedMember : intersectPendingByUUID(toState.getPendingMembersList(),newPendingMemberUuids)) {\n    builder.addNewPendingMembers(invitedMember);\n  }\n  Set<ByteString> consistentMemberUuids=intersect(fromStateMemberUuids,toStateMemberUuids);\n  Set<DecryptedMember> changedMembers=intersectByUUID(subtract(toState.getMembersList(),fromState.getMembersList()),consistentMemberUuids);\n  Map<ByteString,DecryptedMember> membersUuidMap=uuidMap(fromState.getMembersList());\n  for (  DecryptedMember newState : changedMembers) {\n    DecryptedMember oldState=membersUuidMap.get(newState.getUuid());\n    if (oldState.getRole() != newState.getRole()) {\n      builder.addModifyMemberRoles(DecryptedModifyMemberRole.newBuilder().setUuid(newState.getUuid()).setRole(newState.getRole()));\n    }\n    if (!oldState.getProfileKey().equals(newState.getProfileKey())) {\n      builder.addModifiedProfileKeys(newState);\n    }\n  }\n  if (!fromState.getAccessControl().getAddFromInviteLink().equals(toState.getAccessControl().getAddFromInviteLink())) {\n    builder.setNewInviteLinkAccess(toState.getAccessControl().getAddFromInviteLink());\n  }\n  for (  DecryptedRequestingMember requestingMember : intersectRequestingByUUID(toState.getRequestingMembersList(),newRequestingMemberUuids)) {\n    builder.addNewRequestingMembers(requestingMember);\n  }\n  for (  DecryptedRequestingMember requestingMember : rejectedRequestMembers) {\n    builder.addDeleteRequestingMembers(requestingMember.getUuid());\n  }\n  for (  DecryptedMember member : addedMembersByRequestApproval) {\n    builder.addPromoteRequestingMembers(DecryptedApproveMember.newBuilder().setUuid(member.getUuid()).setRole(member.getRole()));\n  }\n  if (!fromState.getInviteLinkPassword().equals(toState.getInviteLinkPassword())) {\n    builder.setNewInviteLinkPassword(toState.getInviteLinkPassword());\n  }\n  return builder.build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 729,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 40,
        "startColumnNumber" : 6,
        "endLineNumber" : 40,
        "endColumnNumber" : 74
      },
      "nodeContext" : "builder.setNewIsAnnouncementGroup(toState.getIsAnnouncementGroup());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "DecryptedGroupChange.Builder"
  }, {
    "nodeContext" : "builder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 44,
      "startColumnNumber" : 6,
      "endLineNumber" : 44,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 44,
        "startColumnNumber" : 6,
        "endLineNumber" : 44,
        "endColumnNumber" : 86
      },
      "nodeContext" : "builder.setNewAvatar(DecryptedString.newBuilder().setValue(toState.getAvatar()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 44,
        "startColumnNumber" : 6,
        "endLineNumber" : 44,
        "endColumnNumber" : 87
      },
      "nodeContext" : "builder.setNewAvatar(DecryptedString.newBuilder().setValue(toState.getAvatar()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 43,
        "startColumnNumber" : 60,
        "endLineNumber" : 45,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  builder.setNewAvatar(DecryptedString.newBuilder().setValue(toState.getAvatar()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 151,
        "startLineNumber" : 43,
        "startColumnNumber" : 4,
        "endLineNumber" : 45,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!fromState.getAvatar().equals(toState.getAvatar())) {\n  builder.setNewAvatar(DecryptedString.newBuilder().setValue(toState.getAvatar()));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6770,
        "startLineNumber" : 27,
        "startColumnNumber" : 110,
        "endLineNumber" : 145,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  DecryptedGroupChange.Builder builder=DecryptedGroupChange.newBuilder().setRevision(toState.getRevision());\n  if (!fromState.getTitle().equals(toState.getTitle())) {\n    builder.setNewTitle(DecryptedString.newBuilder().setValue(toState.getTitle()));\n  }\n  if (!fromState.getDescription().equals(toState.getDescription())) {\n    builder.setNewDescription(DecryptedString.newBuilder().setValue(toState.getDescription()));\n  }\n  if (!fromState.getIsAnnouncementGroup().equals(toState.getIsAnnouncementGroup())) {\n    builder.setNewIsAnnouncementGroup(toState.getIsAnnouncementGroup());\n  }\n  if (!fromState.getAvatar().equals(toState.getAvatar())) {\n    builder.setNewAvatar(DecryptedString.newBuilder().setValue(toState.getAvatar()));\n  }\n  if (!fromState.getDisappearingMessagesTimer().equals(toState.getDisappearingMessagesTimer())) {\n    builder.setNewTimer(toState.getDisappearingMessagesTimer());\n  }\n  if (!fromState.getAccessControl().getAttributes().equals(toState.getAccessControl().getAttributes())) {\n    builder.setNewAttributeAccess(toState.getAccessControl().getAttributes());\n  }\n  if (!fromState.getAccessControl().getMembers().equals(toState.getAccessControl().getMembers())) {\n    builder.setNewMemberAccess(toState.getAccessControl().getMembers());\n  }\n  Set<ByteString> fromStateMemberUuids=membersToSetOfUuids(fromState.getMembersList());\n  Set<ByteString> toStateMemberUuids=membersToSetOfUuids(toState.getMembersList());\n  Set<ByteString> pendingMembersListA=pendingMembersToSetOfUuids(fromState.getPendingMembersList());\n  Set<ByteString> pendingMembersListB=pendingMembersToSetOfUuids(toState.getPendingMembersList());\n  Set<ByteString> requestingMembersListA=requestingMembersToSetOfUuids(fromState.getRequestingMembersList());\n  Set<ByteString> requestingMembersListB=requestingMembersToSetOfUuids(toState.getRequestingMembersList());\n  Set<ByteString> removedPendingMemberUuids=subtract(pendingMembersListA,pendingMembersListB);\n  Set<ByteString> removedRequestingMemberUuids=subtract(requestingMembersListA,requestingMembersListB);\n  Set<ByteString> newPendingMemberUuids=subtract(pendingMembersListB,pendingMembersListA);\n  Set<ByteString> newRequestingMemberUuids=subtract(requestingMembersListB,requestingMembersListA);\n  Set<ByteString> removedMemberUuids=subtract(fromStateMemberUuids,toStateMemberUuids);\n  Set<ByteString> newMemberUuids=subtract(toStateMemberUuids,fromStateMemberUuids);\n  Set<ByteString> addedByInvitationUuids=intersect(newMemberUuids,removedPendingMemberUuids);\n  Set<ByteString> addedByRequestApprovalUuids=intersect(newMemberUuids,removedRequestingMemberUuids);\n  Set<DecryptedMember> addedMembersByInvitation=intersectByUUID(toState.getMembersList(),addedByInvitationUuids);\n  Set<DecryptedMember> addedMembersByRequestApproval=intersectByUUID(toState.getMembersList(),addedByRequestApprovalUuids);\n  Set<DecryptedMember> addedMembers=intersectByUUID(toState.getMembersList(),subtract(newMemberUuids,addedByInvitationUuids,addedByRequestApprovalUuids));\n  Set<DecryptedPendingMember> uninvitedMembers=intersectPendingByUUID(fromState.getPendingMembersList(),subtract(removedPendingMemberUuids,addedByInvitationUuids));\n  Set<DecryptedRequestingMember> rejectedRequestMembers=intersectRequestingByUUID(fromState.getRequestingMembersList(),subtract(removedRequestingMemberUuids,addedByRequestApprovalUuids));\n  for (  DecryptedMember member : intersectByUUID(fromState.getMembersList(),removedMemberUuids)) {\n    builder.addDeleteMembers(member.getUuid());\n  }\n  for (  DecryptedMember member : addedMembers) {\n    builder.addNewMembers(member);\n  }\n  for (  DecryptedMember member : addedMembersByInvitation) {\n    builder.addPromotePendingMembers(member);\n  }\n  for (  DecryptedPendingMember uninvitedMember : uninvitedMembers) {\n    builder.addDeletePendingMembers(DecryptedPendingMemberRemoval.newBuilder().setUuid(uninvitedMember.getUuid()).setUuidCipherText(uninvitedMember.getUuidCipherText()));\n  }\n  for (  DecryptedPendingMember invitedMember : intersectPendingByUUID(toState.getPendingMembersList(),newPendingMemberUuids)) {\n    builder.addNewPendingMembers(invitedMember);\n  }\n  Set<ByteString> consistentMemberUuids=intersect(fromStateMemberUuids,toStateMemberUuids);\n  Set<DecryptedMember> changedMembers=intersectByUUID(subtract(toState.getMembersList(),fromState.getMembersList()),consistentMemberUuids);\n  Map<ByteString,DecryptedMember> membersUuidMap=uuidMap(fromState.getMembersList());\n  for (  DecryptedMember newState : changedMembers) {\n    DecryptedMember oldState=membersUuidMap.get(newState.getUuid());\n    if (oldState.getRole() != newState.getRole()) {\n      builder.addModifyMemberRoles(DecryptedModifyMemberRole.newBuilder().setUuid(newState.getUuid()).setRole(newState.getRole()));\n    }\n    if (!oldState.getProfileKey().equals(newState.getProfileKey())) {\n      builder.addModifiedProfileKeys(newState);\n    }\n  }\n  if (!fromState.getAccessControl().getAddFromInviteLink().equals(toState.getAccessControl().getAddFromInviteLink())) {\n    builder.setNewInviteLinkAccess(toState.getAccessControl().getAddFromInviteLink());\n  }\n  for (  DecryptedRequestingMember requestingMember : intersectRequestingByUUID(toState.getRequestingMembersList(),newRequestingMemberUuids)) {\n    builder.addNewRequestingMembers(requestingMember);\n  }\n  for (  DecryptedRequestingMember requestingMember : rejectedRequestMembers) {\n    builder.addDeleteRequestingMembers(requestingMember.getUuid());\n  }\n  for (  DecryptedMember member : addedMembersByRequestApproval) {\n    builder.addPromoteRequestingMembers(DecryptedApproveMember.newBuilder().setUuid(member.getUuid()).setRole(member.getRole()));\n  }\n  if (!fromState.getInviteLinkPassword().equals(toState.getInviteLinkPassword())) {\n    builder.setNewInviteLinkPassword(toState.getInviteLinkPassword());\n  }\n  return builder.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 714,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7048,
        "startLineNumber" : 24,
        "startColumnNumber" : 2,
        "endLineNumber" : 145,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Given a  {@param fromState} and a {@param toState} creates a {@link DecryptedGroupChange} that would take the {@param fromState} to the {@param toState}.\n */\npublic static DecryptedGroupChange reconstructGroupChange(DecryptedGroup fromState,DecryptedGroup toState){\n  DecryptedGroupChange.Builder builder=DecryptedGroupChange.newBuilder().setRevision(toState.getRevision());\n  if (!fromState.getTitle().equals(toState.getTitle())) {\n    builder.setNewTitle(DecryptedString.newBuilder().setValue(toState.getTitle()));\n  }\n  if (!fromState.getDescription().equals(toState.getDescription())) {\n    builder.setNewDescription(DecryptedString.newBuilder().setValue(toState.getDescription()));\n  }\n  if (!fromState.getIsAnnouncementGroup().equals(toState.getIsAnnouncementGroup())) {\n    builder.setNewIsAnnouncementGroup(toState.getIsAnnouncementGroup());\n  }\n  if (!fromState.getAvatar().equals(toState.getAvatar())) {\n    builder.setNewAvatar(DecryptedString.newBuilder().setValue(toState.getAvatar()));\n  }\n  if (!fromState.getDisappearingMessagesTimer().equals(toState.getDisappearingMessagesTimer())) {\n    builder.setNewTimer(toState.getDisappearingMessagesTimer());\n  }\n  if (!fromState.getAccessControl().getAttributes().equals(toState.getAccessControl().getAttributes())) {\n    builder.setNewAttributeAccess(toState.getAccessControl().getAttributes());\n  }\n  if (!fromState.getAccessControl().getMembers().equals(toState.getAccessControl().getMembers())) {\n    builder.setNewMemberAccess(toState.getAccessControl().getMembers());\n  }\n  Set<ByteString> fromStateMemberUuids=membersToSetOfUuids(fromState.getMembersList());\n  Set<ByteString> toStateMemberUuids=membersToSetOfUuids(toState.getMembersList());\n  Set<ByteString> pendingMembersListA=pendingMembersToSetOfUuids(fromState.getPendingMembersList());\n  Set<ByteString> pendingMembersListB=pendingMembersToSetOfUuids(toState.getPendingMembersList());\n  Set<ByteString> requestingMembersListA=requestingMembersToSetOfUuids(fromState.getRequestingMembersList());\n  Set<ByteString> requestingMembersListB=requestingMembersToSetOfUuids(toState.getRequestingMembersList());\n  Set<ByteString> removedPendingMemberUuids=subtract(pendingMembersListA,pendingMembersListB);\n  Set<ByteString> removedRequestingMemberUuids=subtract(requestingMembersListA,requestingMembersListB);\n  Set<ByteString> newPendingMemberUuids=subtract(pendingMembersListB,pendingMembersListA);\n  Set<ByteString> newRequestingMemberUuids=subtract(requestingMembersListB,requestingMembersListA);\n  Set<ByteString> removedMemberUuids=subtract(fromStateMemberUuids,toStateMemberUuids);\n  Set<ByteString> newMemberUuids=subtract(toStateMemberUuids,fromStateMemberUuids);\n  Set<ByteString> addedByInvitationUuids=intersect(newMemberUuids,removedPendingMemberUuids);\n  Set<ByteString> addedByRequestApprovalUuids=intersect(newMemberUuids,removedRequestingMemberUuids);\n  Set<DecryptedMember> addedMembersByInvitation=intersectByUUID(toState.getMembersList(),addedByInvitationUuids);\n  Set<DecryptedMember> addedMembersByRequestApproval=intersectByUUID(toState.getMembersList(),addedByRequestApprovalUuids);\n  Set<DecryptedMember> addedMembers=intersectByUUID(toState.getMembersList(),subtract(newMemberUuids,addedByInvitationUuids,addedByRequestApprovalUuids));\n  Set<DecryptedPendingMember> uninvitedMembers=intersectPendingByUUID(fromState.getPendingMembersList(),subtract(removedPendingMemberUuids,addedByInvitationUuids));\n  Set<DecryptedRequestingMember> rejectedRequestMembers=intersectRequestingByUUID(fromState.getRequestingMembersList(),subtract(removedRequestingMemberUuids,addedByRequestApprovalUuids));\n  for (  DecryptedMember member : intersectByUUID(fromState.getMembersList(),removedMemberUuids)) {\n    builder.addDeleteMembers(member.getUuid());\n  }\n  for (  DecryptedMember member : addedMembers) {\n    builder.addNewMembers(member);\n  }\n  for (  DecryptedMember member : addedMembersByInvitation) {\n    builder.addPromotePendingMembers(member);\n  }\n  for (  DecryptedPendingMember uninvitedMember : uninvitedMembers) {\n    builder.addDeletePendingMembers(DecryptedPendingMemberRemoval.newBuilder().setUuid(uninvitedMember.getUuid()).setUuidCipherText(uninvitedMember.getUuidCipherText()));\n  }\n  for (  DecryptedPendingMember invitedMember : intersectPendingByUUID(toState.getPendingMembersList(),newPendingMemberUuids)) {\n    builder.addNewPendingMembers(invitedMember);\n  }\n  Set<ByteString> consistentMemberUuids=intersect(fromStateMemberUuids,toStateMemberUuids);\n  Set<DecryptedMember> changedMembers=intersectByUUID(subtract(toState.getMembersList(),fromState.getMembersList()),consistentMemberUuids);\n  Map<ByteString,DecryptedMember> membersUuidMap=uuidMap(fromState.getMembersList());\n  for (  DecryptedMember newState : changedMembers) {\n    DecryptedMember oldState=membersUuidMap.get(newState.getUuid());\n    if (oldState.getRole() != newState.getRole()) {\n      builder.addModifyMemberRoles(DecryptedModifyMemberRole.newBuilder().setUuid(newState.getUuid()).setRole(newState.getRole()));\n    }\n    if (!oldState.getProfileKey().equals(newState.getProfileKey())) {\n      builder.addModifiedProfileKeys(newState);\n    }\n  }\n  if (!fromState.getAccessControl().getAddFromInviteLink().equals(toState.getAccessControl().getAddFromInviteLink())) {\n    builder.setNewInviteLinkAccess(toState.getAccessControl().getAddFromInviteLink());\n  }\n  for (  DecryptedRequestingMember requestingMember : intersectRequestingByUUID(toState.getRequestingMembersList(),newRequestingMemberUuids)) {\n    builder.addNewRequestingMembers(requestingMember);\n  }\n  for (  DecryptedRequestingMember requestingMember : rejectedRequestMembers) {\n    builder.addDeleteRequestingMembers(requestingMember.getUuid());\n  }\n  for (  DecryptedMember member : addedMembersByRequestApproval) {\n    builder.addPromoteRequestingMembers(DecryptedApproveMember.newBuilder().setUuid(member.getUuid()).setRole(member.getRole()));\n  }\n  if (!fromState.getInviteLinkPassword().equals(toState.getInviteLinkPassword())) {\n    builder.setNewInviteLinkPassword(toState.getInviteLinkPassword());\n  }\n  return builder.build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 729,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 44,
        "startColumnNumber" : 6,
        "endLineNumber" : 44,
        "endColumnNumber" : 87
      },
      "nodeContext" : "builder.setNewAvatar(DecryptedString.newBuilder().setValue(toState.getAvatar()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "DecryptedGroupChange.Builder"
  }, {
    "nodeContext" : "builder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 48,
      "startColumnNumber" : 6,
      "endLineNumber" : 48,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 48,
        "startColumnNumber" : 6,
        "endLineNumber" : 48,
        "endColumnNumber" : 65
      },
      "nodeContext" : "builder.setNewTimer(toState.getDisappearingMessagesTimer())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 48,
        "startColumnNumber" : 6,
        "endLineNumber" : 48,
        "endColumnNumber" : 66
      },
      "nodeContext" : "builder.setNewTimer(toState.getDisappearingMessagesTimer());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 47,
        "startColumnNumber" : 98,
        "endLineNumber" : 49,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  builder.setNewTimer(toState.getDisappearingMessagesTimer());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 168,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 49,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!fromState.getDisappearingMessagesTimer().equals(toState.getDisappearingMessagesTimer())) {\n  builder.setNewTimer(toState.getDisappearingMessagesTimer());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6770,
        "startLineNumber" : 27,
        "startColumnNumber" : 110,
        "endLineNumber" : 145,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  DecryptedGroupChange.Builder builder=DecryptedGroupChange.newBuilder().setRevision(toState.getRevision());\n  if (!fromState.getTitle().equals(toState.getTitle())) {\n    builder.setNewTitle(DecryptedString.newBuilder().setValue(toState.getTitle()));\n  }\n  if (!fromState.getDescription().equals(toState.getDescription())) {\n    builder.setNewDescription(DecryptedString.newBuilder().setValue(toState.getDescription()));\n  }\n  if (!fromState.getIsAnnouncementGroup().equals(toState.getIsAnnouncementGroup())) {\n    builder.setNewIsAnnouncementGroup(toState.getIsAnnouncementGroup());\n  }\n  if (!fromState.getAvatar().equals(toState.getAvatar())) {\n    builder.setNewAvatar(DecryptedString.newBuilder().setValue(toState.getAvatar()));\n  }\n  if (!fromState.getDisappearingMessagesTimer().equals(toState.getDisappearingMessagesTimer())) {\n    builder.setNewTimer(toState.getDisappearingMessagesTimer());\n  }\n  if (!fromState.getAccessControl().getAttributes().equals(toState.getAccessControl().getAttributes())) {\n    builder.setNewAttributeAccess(toState.getAccessControl().getAttributes());\n  }\n  if (!fromState.getAccessControl().getMembers().equals(toState.getAccessControl().getMembers())) {\n    builder.setNewMemberAccess(toState.getAccessControl().getMembers());\n  }\n  Set<ByteString> fromStateMemberUuids=membersToSetOfUuids(fromState.getMembersList());\n  Set<ByteString> toStateMemberUuids=membersToSetOfUuids(toState.getMembersList());\n  Set<ByteString> pendingMembersListA=pendingMembersToSetOfUuids(fromState.getPendingMembersList());\n  Set<ByteString> pendingMembersListB=pendingMembersToSetOfUuids(toState.getPendingMembersList());\n  Set<ByteString> requestingMembersListA=requestingMembersToSetOfUuids(fromState.getRequestingMembersList());\n  Set<ByteString> requestingMembersListB=requestingMembersToSetOfUuids(toState.getRequestingMembersList());\n  Set<ByteString> removedPendingMemberUuids=subtract(pendingMembersListA,pendingMembersListB);\n  Set<ByteString> removedRequestingMemberUuids=subtract(requestingMembersListA,requestingMembersListB);\n  Set<ByteString> newPendingMemberUuids=subtract(pendingMembersListB,pendingMembersListA);\n  Set<ByteString> newRequestingMemberUuids=subtract(requestingMembersListB,requestingMembersListA);\n  Set<ByteString> removedMemberUuids=subtract(fromStateMemberUuids,toStateMemberUuids);\n  Set<ByteString> newMemberUuids=subtract(toStateMemberUuids,fromStateMemberUuids);\n  Set<ByteString> addedByInvitationUuids=intersect(newMemberUuids,removedPendingMemberUuids);\n  Set<ByteString> addedByRequestApprovalUuids=intersect(newMemberUuids,removedRequestingMemberUuids);\n  Set<DecryptedMember> addedMembersByInvitation=intersectByUUID(toState.getMembersList(),addedByInvitationUuids);\n  Set<DecryptedMember> addedMembersByRequestApproval=intersectByUUID(toState.getMembersList(),addedByRequestApprovalUuids);\n  Set<DecryptedMember> addedMembers=intersectByUUID(toState.getMembersList(),subtract(newMemberUuids,addedByInvitationUuids,addedByRequestApprovalUuids));\n  Set<DecryptedPendingMember> uninvitedMembers=intersectPendingByUUID(fromState.getPendingMembersList(),subtract(removedPendingMemberUuids,addedByInvitationUuids));\n  Set<DecryptedRequestingMember> rejectedRequestMembers=intersectRequestingByUUID(fromState.getRequestingMembersList(),subtract(removedRequestingMemberUuids,addedByRequestApprovalUuids));\n  for (  DecryptedMember member : intersectByUUID(fromState.getMembersList(),removedMemberUuids)) {\n    builder.addDeleteMembers(member.getUuid());\n  }\n  for (  DecryptedMember member : addedMembers) {\n    builder.addNewMembers(member);\n  }\n  for (  DecryptedMember member : addedMembersByInvitation) {\n    builder.addPromotePendingMembers(member);\n  }\n  for (  DecryptedPendingMember uninvitedMember : uninvitedMembers) {\n    builder.addDeletePendingMembers(DecryptedPendingMemberRemoval.newBuilder().setUuid(uninvitedMember.getUuid()).setUuidCipherText(uninvitedMember.getUuidCipherText()));\n  }\n  for (  DecryptedPendingMember invitedMember : intersectPendingByUUID(toState.getPendingMembersList(),newPendingMemberUuids)) {\n    builder.addNewPendingMembers(invitedMember);\n  }\n  Set<ByteString> consistentMemberUuids=intersect(fromStateMemberUuids,toStateMemberUuids);\n  Set<DecryptedMember> changedMembers=intersectByUUID(subtract(toState.getMembersList(),fromState.getMembersList()),consistentMemberUuids);\n  Map<ByteString,DecryptedMember> membersUuidMap=uuidMap(fromState.getMembersList());\n  for (  DecryptedMember newState : changedMembers) {\n    DecryptedMember oldState=membersUuidMap.get(newState.getUuid());\n    if (oldState.getRole() != newState.getRole()) {\n      builder.addModifyMemberRoles(DecryptedModifyMemberRole.newBuilder().setUuid(newState.getUuid()).setRole(newState.getRole()));\n    }\n    if (!oldState.getProfileKey().equals(newState.getProfileKey())) {\n      builder.addModifiedProfileKeys(newState);\n    }\n  }\n  if (!fromState.getAccessControl().getAddFromInviteLink().equals(toState.getAccessControl().getAddFromInviteLink())) {\n    builder.setNewInviteLinkAccess(toState.getAccessControl().getAddFromInviteLink());\n  }\n  for (  DecryptedRequestingMember requestingMember : intersectRequestingByUUID(toState.getRequestingMembersList(),newRequestingMemberUuids)) {\n    builder.addNewRequestingMembers(requestingMember);\n  }\n  for (  DecryptedRequestingMember requestingMember : rejectedRequestMembers) {\n    builder.addDeleteRequestingMembers(requestingMember.getUuid());\n  }\n  for (  DecryptedMember member : addedMembersByRequestApproval) {\n    builder.addPromoteRequestingMembers(DecryptedApproveMember.newBuilder().setUuid(member.getUuid()).setRole(member.getRole()));\n  }\n  if (!fromState.getInviteLinkPassword().equals(toState.getInviteLinkPassword())) {\n    builder.setNewInviteLinkPassword(toState.getInviteLinkPassword());\n  }\n  return builder.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 714,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7048,
        "startLineNumber" : 24,
        "startColumnNumber" : 2,
        "endLineNumber" : 145,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Given a  {@param fromState} and a {@param toState} creates a {@link DecryptedGroupChange} that would take the {@param fromState} to the {@param toState}.\n */\npublic static DecryptedGroupChange reconstructGroupChange(DecryptedGroup fromState,DecryptedGroup toState){\n  DecryptedGroupChange.Builder builder=DecryptedGroupChange.newBuilder().setRevision(toState.getRevision());\n  if (!fromState.getTitle().equals(toState.getTitle())) {\n    builder.setNewTitle(DecryptedString.newBuilder().setValue(toState.getTitle()));\n  }\n  if (!fromState.getDescription().equals(toState.getDescription())) {\n    builder.setNewDescription(DecryptedString.newBuilder().setValue(toState.getDescription()));\n  }\n  if (!fromState.getIsAnnouncementGroup().equals(toState.getIsAnnouncementGroup())) {\n    builder.setNewIsAnnouncementGroup(toState.getIsAnnouncementGroup());\n  }\n  if (!fromState.getAvatar().equals(toState.getAvatar())) {\n    builder.setNewAvatar(DecryptedString.newBuilder().setValue(toState.getAvatar()));\n  }\n  if (!fromState.getDisappearingMessagesTimer().equals(toState.getDisappearingMessagesTimer())) {\n    builder.setNewTimer(toState.getDisappearingMessagesTimer());\n  }\n  if (!fromState.getAccessControl().getAttributes().equals(toState.getAccessControl().getAttributes())) {\n    builder.setNewAttributeAccess(toState.getAccessControl().getAttributes());\n  }\n  if (!fromState.getAccessControl().getMembers().equals(toState.getAccessControl().getMembers())) {\n    builder.setNewMemberAccess(toState.getAccessControl().getMembers());\n  }\n  Set<ByteString> fromStateMemberUuids=membersToSetOfUuids(fromState.getMembersList());\n  Set<ByteString> toStateMemberUuids=membersToSetOfUuids(toState.getMembersList());\n  Set<ByteString> pendingMembersListA=pendingMembersToSetOfUuids(fromState.getPendingMembersList());\n  Set<ByteString> pendingMembersListB=pendingMembersToSetOfUuids(toState.getPendingMembersList());\n  Set<ByteString> requestingMembersListA=requestingMembersToSetOfUuids(fromState.getRequestingMembersList());\n  Set<ByteString> requestingMembersListB=requestingMembersToSetOfUuids(toState.getRequestingMembersList());\n  Set<ByteString> removedPendingMemberUuids=subtract(pendingMembersListA,pendingMembersListB);\n  Set<ByteString> removedRequestingMemberUuids=subtract(requestingMembersListA,requestingMembersListB);\n  Set<ByteString> newPendingMemberUuids=subtract(pendingMembersListB,pendingMembersListA);\n  Set<ByteString> newRequestingMemberUuids=subtract(requestingMembersListB,requestingMembersListA);\n  Set<ByteString> removedMemberUuids=subtract(fromStateMemberUuids,toStateMemberUuids);\n  Set<ByteString> newMemberUuids=subtract(toStateMemberUuids,fromStateMemberUuids);\n  Set<ByteString> addedByInvitationUuids=intersect(newMemberUuids,removedPendingMemberUuids);\n  Set<ByteString> addedByRequestApprovalUuids=intersect(newMemberUuids,removedRequestingMemberUuids);\n  Set<DecryptedMember> addedMembersByInvitation=intersectByUUID(toState.getMembersList(),addedByInvitationUuids);\n  Set<DecryptedMember> addedMembersByRequestApproval=intersectByUUID(toState.getMembersList(),addedByRequestApprovalUuids);\n  Set<DecryptedMember> addedMembers=intersectByUUID(toState.getMembersList(),subtract(newMemberUuids,addedByInvitationUuids,addedByRequestApprovalUuids));\n  Set<DecryptedPendingMember> uninvitedMembers=intersectPendingByUUID(fromState.getPendingMembersList(),subtract(removedPendingMemberUuids,addedByInvitationUuids));\n  Set<DecryptedRequestingMember> rejectedRequestMembers=intersectRequestingByUUID(fromState.getRequestingMembersList(),subtract(removedRequestingMemberUuids,addedByRequestApprovalUuids));\n  for (  DecryptedMember member : intersectByUUID(fromState.getMembersList(),removedMemberUuids)) {\n    builder.addDeleteMembers(member.getUuid());\n  }\n  for (  DecryptedMember member : addedMembers) {\n    builder.addNewMembers(member);\n  }\n  for (  DecryptedMember member : addedMembersByInvitation) {\n    builder.addPromotePendingMembers(member);\n  }\n  for (  DecryptedPendingMember uninvitedMember : uninvitedMembers) {\n    builder.addDeletePendingMembers(DecryptedPendingMemberRemoval.newBuilder().setUuid(uninvitedMember.getUuid()).setUuidCipherText(uninvitedMember.getUuidCipherText()));\n  }\n  for (  DecryptedPendingMember invitedMember : intersectPendingByUUID(toState.getPendingMembersList(),newPendingMemberUuids)) {\n    builder.addNewPendingMembers(invitedMember);\n  }\n  Set<ByteString> consistentMemberUuids=intersect(fromStateMemberUuids,toStateMemberUuids);\n  Set<DecryptedMember> changedMembers=intersectByUUID(subtract(toState.getMembersList(),fromState.getMembersList()),consistentMemberUuids);\n  Map<ByteString,DecryptedMember> membersUuidMap=uuidMap(fromState.getMembersList());\n  for (  DecryptedMember newState : changedMembers) {\n    DecryptedMember oldState=membersUuidMap.get(newState.getUuid());\n    if (oldState.getRole() != newState.getRole()) {\n      builder.addModifyMemberRoles(DecryptedModifyMemberRole.newBuilder().setUuid(newState.getUuid()).setRole(newState.getRole()));\n    }\n    if (!oldState.getProfileKey().equals(newState.getProfileKey())) {\n      builder.addModifiedProfileKeys(newState);\n    }\n  }\n  if (!fromState.getAccessControl().getAddFromInviteLink().equals(toState.getAccessControl().getAddFromInviteLink())) {\n    builder.setNewInviteLinkAccess(toState.getAccessControl().getAddFromInviteLink());\n  }\n  for (  DecryptedRequestingMember requestingMember : intersectRequestingByUUID(toState.getRequestingMembersList(),newRequestingMemberUuids)) {\n    builder.addNewRequestingMembers(requestingMember);\n  }\n  for (  DecryptedRequestingMember requestingMember : rejectedRequestMembers) {\n    builder.addDeleteRequestingMembers(requestingMember.getUuid());\n  }\n  for (  DecryptedMember member : addedMembersByRequestApproval) {\n    builder.addPromoteRequestingMembers(DecryptedApproveMember.newBuilder().setUuid(member.getUuid()).setRole(member.getRole()));\n  }\n  if (!fromState.getInviteLinkPassword().equals(toState.getInviteLinkPassword())) {\n    builder.setNewInviteLinkPassword(toState.getInviteLinkPassword());\n  }\n  return builder.build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 729,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 48,
        "startColumnNumber" : 6,
        "endLineNumber" : 48,
        "endColumnNumber" : 66
      },
      "nodeContext" : "builder.setNewTimer(toState.getDisappearingMessagesTimer());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "DecryptedGroupChange.Builder"
  }, {
    "nodeContext" : "builder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 52,
      "startColumnNumber" : 6,
      "endLineNumber" : 52,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 52,
        "startColumnNumber" : 6,
        "endLineNumber" : 52,
        "endColumnNumber" : 79
      },
      "nodeContext" : "builder.setNewAttributeAccess(toState.getAccessControl().getAttributes())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 52,
        "startColumnNumber" : 6,
        "endLineNumber" : 52,
        "endColumnNumber" : 80
      },
      "nodeContext" : "builder.setNewAttributeAccess(toState.getAccessControl().getAttributes());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 51,
        "startColumnNumber" : 106,
        "endLineNumber" : 53,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  builder.setNewAttributeAccess(toState.getAccessControl().getAttributes());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 190,
        "startLineNumber" : 51,
        "startColumnNumber" : 4,
        "endLineNumber" : 53,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!fromState.getAccessControl().getAttributes().equals(toState.getAccessControl().getAttributes())) {\n  builder.setNewAttributeAccess(toState.getAccessControl().getAttributes());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 24,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6770,
        "startLineNumber" : 27,
        "startColumnNumber" : 110,
        "endLineNumber" : 145,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  DecryptedGroupChange.Builder builder=DecryptedGroupChange.newBuilder().setRevision(toState.getRevision());\n  if (!fromState.getTitle().equals(toState.getTitle())) {\n    builder.setNewTitle(DecryptedString.newBuilder().setValue(toState.getTitle()));\n  }\n  if (!fromState.getDescription().equals(toState.getDescription())) {\n    builder.setNewDescription(DecryptedString.newBuilder().setValue(toState.getDescription()));\n  }\n  if (!fromState.getIsAnnouncementGroup().equals(toState.getIsAnnouncementGroup())) {\n    builder.setNewIsAnnouncementGroup(toState.getIsAnnouncementGroup());\n  }\n  if (!fromState.getAvatar().equals(toState.getAvatar())) {\n    builder.setNewAvatar(DecryptedString.newBuilder().setValue(toState.getAvatar()));\n  }\n  if (!fromState.getDisappearingMessagesTimer().equals(toState.getDisappearingMessagesTimer())) {\n    builder.setNewTimer(toState.getDisappearingMessagesTimer());\n  }\n  if (!fromState.getAccessControl().getAttributes().equals(toState.getAccessControl().getAttributes())) {\n    builder.setNewAttributeAccess(toState.getAccessControl().getAttributes());\n  }\n  if (!fromState.getAccessControl().getMembers().equals(toState.getAccessControl().getMembers())) {\n    builder.setNewMemberAccess(toState.getAccessControl().getMembers());\n  }\n  Set<ByteString> fromStateMemberUuids=membersToSetOfUuids(fromState.getMembersList());\n  Set<ByteString> toStateMemberUuids=membersToSetOfUuids(toState.getMembersList());\n  Set<ByteString> pendingMembersListA=pendingMembersToSetOfUuids(fromState.getPendingMembersList());\n  Set<ByteString> pendingMembersListB=pendingMembersToSetOfUuids(toState.getPendingMembersList());\n  Set<ByteString> requestingMembersListA=requestingMembersToSetOfUuids(fromState.getRequestingMembersList());\n  Set<ByteString> requestingMembersListB=requestingMembersToSetOfUuids(toState.getRequestingMembersList());\n  Set<ByteString> removedPendingMemberUuids=subtract(pendingMembersListA,pendingMembersListB);\n  Set<ByteString> removedRequestingMemberUuids=subtract(requestingMembersListA,requestingMembersListB);\n  Set<ByteString> newPendingMemberUuids=subtract(pendingMembersListB,pendingMembersListA);\n  Set<ByteString> newRequestingMemberUuids=subtract(requestingMembersListB,requestingMembersListA);\n  Set<ByteString> removedMemberUuids=subtract(fromStateMemberUuids,toStateMemberUuids);\n  Set<ByteString> newMemberUuids=subtract(toStateMemberUuids,fromStateMemberUuids);\n  Set<ByteString> addedByInvitationUuids=intersect(newMemberUuids,removedPendingMemberUuids);\n  Set<ByteString> addedByRequestApprovalUuids=intersect(newMemberUuids,removedRequestingMemberUuids);\n  Set<DecryptedMember> addedMembersByInvitation=intersectByUUID(toState.getMembersList(),addedByInvitationUuids);\n  Set<DecryptedMember> addedMembersByRequestApproval=intersectByUUID(toState.getMembersList(),addedByRequestApprovalUuids);\n  Set<DecryptedMember> addedMembers=intersectByUUID(toState.getMembersList(),subtract(newMemberUuids,addedByInvitationUuids,addedByRequestApprovalUuids));\n  Set<DecryptedPendingMember> uninvitedMembers=intersectPendingByUUID(fromState.getPendingMembersList(),subtract(removedPendingMemberUuids,addedByInvitationUuids));\n  Set<DecryptedRequestingMember> rejectedRequestMembers=intersectRequestingByUUID(fromState.getRequestingMembersList(),subtract(removedRequestingMemberUuids,addedByRequestApprovalUuids));\n  for (  DecryptedMember member : intersectByUUID(fromState.getMembersList(),removedMemberUuids)) {\n    builder.addDeleteMembers(member.getUuid());\n  }\n  for (  DecryptedMember member : addedMembers) {\n    builder.addNewMembers(member);\n  }\n  for (  DecryptedMember member : addedMembersByInvitation) {\n    builder.addPromotePendingMembers(member);\n  }\n  for (  DecryptedPendingMember uninvitedMember : uninvitedMembers) {\n    builder.addDeletePendingMembers(DecryptedPendingMemberRemoval.newBuilder().setUuid(uninvitedMember.getUuid()).setUuidCipherText(uninvitedMember.getUuidCipherText()));\n  }\n  for (  DecryptedPendingMember invitedMember : intersectPendingByUUID(toState.getPendingMembersList(),newPendingMemberUuids)) {\n    builder.addNewPendingMembers(invitedMember);\n  }\n  Set<ByteString> consistentMemberUuids=intersect(fromStateMemberUuids,toStateMemberUuids);\n  Set<DecryptedMember> changedMembers=intersectByUUID(subtract(toState.getMembersList(),fromState.getMembersList()),consistentMemberUuids);\n  Map<ByteString,DecryptedMember> membersUuidMap=uuidMap(fromState.getMembersList());\n  for (  DecryptedMember newState : changedMembers) {\n    DecryptedMember oldState=membersUuidMap.get(newState.getUuid());\n    if (oldState.getRole() != newState.getRole()) {\n      builder.addModifyMemberRoles(DecryptedModifyMemberRole.newBuilder().setUuid(newState.getUuid()).setRole(newState.getRole()));\n    }\n    if (!oldState.getProfileKey().equals(newState.getProfileKey())) {\n      builder.addModifiedProfileKeys(newState);\n    }\n  }\n  if (!fromState.getAccessControl().getAddFromInviteLink().equals(toState.getAccessControl().getAddFromInviteLink())) {\n    builder.setNewInviteLinkAccess(toState.getAccessControl().getAddFromInviteLink());\n  }\n  for (  DecryptedRequestingMember requestingMember : intersectRequestingByUUID(toState.getRequestingMembersList(),newRequestingMemberUuids)) {\n    builder.addNewRequestingMembers(requestingMember);\n  }\n  for (  DecryptedRequestingMember requestingMember : rejectedRequestMembers) {\n    builder.addDeleteRequestingMembers(requestingMember.getUuid());\n  }\n  for (  DecryptedMember member : addedMembersByRequestApproval) {\n    builder.addPromoteRequestingMembers(DecryptedApproveMember.newBuilder().setUuid(member.getUuid()).setRole(member.getRole()));\n  }\n  if (!fromState.getInviteLinkPassword().equals(toState.getInviteLinkPassword())) {\n    builder.setNewInviteLinkPassword(toState.getInviteLinkPassword());\n  }\n  return builder.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 714,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7048,
        "startLineNumber" : 24,
        "startColumnNumber" : 2,
        "endLineNumber" : 145,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Given a  {@param fromState} and a {@param toState} creates a {@link DecryptedGroupChange} that would take the {@param fromState} to the {@param toState}.\n */\npublic static DecryptedGroupChange reconstructGroupChange(DecryptedGroup fromState,DecryptedGroup toState){\n  DecryptedGroupChange.Builder builder=DecryptedGroupChange.newBuilder().setRevision(toState.getRevision());\n  if (!fromState.getTitle().equals(toState.getTitle())) {\n    builder.setNewTitle(DecryptedString.newBuilder().setValue(toState.getTitle()));\n  }\n  if (!fromState.getDescription().equals(toState.getDescription())) {\n    builder.setNewDescription(DecryptedString.newBuilder().setValue(toState.getDescription()));\n  }\n  if (!fromState.getIsAnnouncementGroup().equals(toState.getIsAnnouncementGroup())) {\n    builder.setNewIsAnnouncementGroup(toState.getIsAnnouncementGroup());\n  }\n  if (!fromState.getAvatar().equals(toState.getAvatar())) {\n    builder.setNewAvatar(DecryptedString.newBuilder().setValue(toState.getAvatar()));\n  }\n  if (!fromState.getDisappearingMessagesTimer().equals(toState.getDisappearingMessagesTimer())) {\n    builder.setNewTimer(toState.getDisappearingMessagesTimer());\n  }\n  if (!fromState.getAccessControl().getAttributes().equals(toState.getAccessControl().getAttributes())) {\n    builder.setNewAttributeAccess(toState.getAccessControl().getAttributes());\n  }\n  if (!fromState.getAccessControl().getMembers().equals(toState.getAccessControl().getMembers())) {\n    builder.setNewMemberAccess(toState.getAccessControl().getMembers());\n  }\n  Set<ByteString> fromStateMemberUuids=membersToSetOfUuids(fromState.getMembersList());\n  Set<ByteString> toStateMemberUuids=membersToSetOfUuids(toState.getMembersList());\n  Set<ByteString> pendingMembersListA=pendingMembersToSetOfUuids(fromState.getPendingMembersList());\n  Set<ByteString> pendingMembersListB=pendingMembersToSetOfUuids(toState.getPendingMembersList());\n  Set<ByteString> requestingMembersListA=requestingMembersToSetOfUuids(fromState.getRequestingMembersList());\n  Set<ByteString> requestingMembersListB=requestingMembersToSetOfUuids(toState.getRequestingMembersList());\n  Set<ByteString> removedPendingMemberUuids=subtract(pendingMembersListA,pendingMembersListB);\n  Set<ByteString> removedRequestingMemberUuids=subtract(requestingMembersListA,requestingMembersListB);\n  Set<ByteString> newPendingMemberUuids=subtract(pendingMembersListB,pendingMembersListA);\n  Set<ByteString> newRequestingMemberUuids=subtract(requestingMembersListB,requestingMembersListA);\n  Set<ByteString> removedMemberUuids=subtract(fromStateMemberUuids,toStateMemberUuids);\n  Set<ByteString> newMemberUuids=subtract(toStateMemberUuids,fromStateMemberUuids);\n  Set<ByteString> addedByInvitationUuids=intersect(newMemberUuids,removedPendingMemberUuids);\n  Set<ByteString> addedByRequestApprovalUuids=intersect(newMemberUuids,removedRequestingMemberUuids);\n  Set<DecryptedMember> addedMembersByInvitation=intersectByUUID(toState.getMembersList(),addedByInvitationUuids);\n  Set<DecryptedMember> addedMembersByRequestApproval=intersectByUUID(toState.getMembersList(),addedByRequestApprovalUuids);\n  Set<DecryptedMember> addedMembers=intersectByUUID(toState.getMembersList(),subtract(newMemberUuids,addedByInvitationUuids,addedByRequestApprovalUuids));\n  Set<DecryptedPendingMember> uninvitedMembers=intersectPendingByUUID(fromState.getPendingMembersList(),subtract(removedPendingMemberUuids,addedByInvitationUuids));\n  Set<DecryptedRequestingMember> rejectedRequestMembers=intersectRequestingByUUID(fromState.getRequestingMembersList(),subtract(removedRequestingMemberUuids,addedByRequestApprovalUuids));\n  for (  DecryptedMember member : intersectByUUID(fromState.getMembersList(),removedMemberUuids)) {\n    builder.addDeleteMembers(member.getUuid());\n  }\n  for (  DecryptedMember member : addedMembers) {\n    builder.addNewMembers(member);\n  }\n  for (  DecryptedMember member : addedMembersByInvitation) {\n    builder.addPromotePendingMembers(member);\n  }\n  for (  DecryptedPendingMember uninvitedMember : uninvitedMembers) {\n    builder.addDeletePendingMembers(DecryptedPendingMemberRemoval.newBuilder().setUuid(uninvitedMember.getUuid()).setUuidCipherText(uninvitedMember.getUuidCipherText()));\n  }\n  for (  DecryptedPendingMember invitedMember : intersectPendingByUUID(toState.getPendingMembersList(),newPendingMemberUuids)) {\n    builder.addNewPendingMembers(invitedMember);\n  }\n  Set<ByteString> consistentMemberUuids=intersect(fromStateMemberUuids,toStateMemberUuids);\n  Set<DecryptedMember> changedMembers=intersectByUUID(subtract(toState.getMembersList(),fromState.getMembersList()),consistentMemberUuids);\n  Map<ByteString,DecryptedMember> membersUuidMap=uuidMap(fromState.getMembersList());\n  for (  DecryptedMember newState : changedMembers) {\n    DecryptedMember oldState=membersUuidMap.get(newState.getUuid());\n    if (oldState.getRole() != newState.getRole()) {\n      builder.addModifyMemberRoles(DecryptedModifyMemberRole.newBuilder().setUuid(newState.getUuid()).setRole(newState.getRole()));\n    }\n    if (!oldState.getProfileKey().equals(newState.getProfileKey())) {\n      builder.addModifiedProfileKeys(newState);\n    }\n  }\n  if (!fromState.getAccessControl().getAddFromInviteLink().equals(toState.getAccessControl().getAddFromInviteLink())) {\n    builder.setNewInviteLinkAccess(toState.getAccessControl().getAddFromInviteLink());\n  }\n  for (  DecryptedRequestingMember requestingMember : intersectRequestingByUUID(toState.getRequestingMembersList(),newRequestingMemberUuids)) {\n    builder.addNewRequestingMembers(requestingMember);\n  }\n  for (  DecryptedRequestingMember requestingMember : rejectedRequestMembers) {\n    builder.addDeleteRequestingMembers(requestingMember.getUuid());\n  }\n  for (  DecryptedMember member : addedMembersByRequestApproval) {\n    builder.addPromoteRequestingMembers(DecryptedApproveMember.newBuilder().setUuid(member.getUuid()).setRole(member.getRole()));\n  }\n  if (!fromState.getInviteLinkPassword().equals(toState.getInviteLinkPassword())) {\n    builder.setNewInviteLinkPassword(toState.getInviteLinkPassword());\n  }\n  return builder.build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 729,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 52,
        "startColumnNumber" : 6,
        "endLineNumber" : 52,
        "endColumnNumber" : 80
      },
      "nodeContext" : "builder.setNewAttributeAccess(toState.getAccessControl().getAttributes());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "DecryptedGroupChange.Builder"
  }, {
    "nodeContext" : "builder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 56,
      "startColumnNumber" : 6,
      "endLineNumber" : 56,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 56,
        "startColumnNumber" : 6,
        "endLineNumber" : 56,
        "endColumnNumber" : 73
      },
      "nodeContext" : "builder.setNewMemberAccess(toState.getAccessControl().getMembers())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 56,
        "startColumnNumber" : 6,
        "endLineNumber" : 56,
        "endColumnNumber" : 74
      },
      "nodeContext" : "builder.setNewMemberAccess(toState.getAccessControl().getMembers());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 55,
        "startColumnNumber" : 100,
        "endLineNumber" : 57,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  builder.setNewMemberAccess(toState.getAccessControl().getMembers());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 178,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 57,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!fromState.getAccessControl().getMembers().equals(toState.getAccessControl().getMembers())) {\n  builder.setNewMemberAccess(toState.getAccessControl().getMembers());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 24,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6770,
        "startLineNumber" : 27,
        "startColumnNumber" : 110,
        "endLineNumber" : 145,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  DecryptedGroupChange.Builder builder=DecryptedGroupChange.newBuilder().setRevision(toState.getRevision());\n  if (!fromState.getTitle().equals(toState.getTitle())) {\n    builder.setNewTitle(DecryptedString.newBuilder().setValue(toState.getTitle()));\n  }\n  if (!fromState.getDescription().equals(toState.getDescription())) {\n    builder.setNewDescription(DecryptedString.newBuilder().setValue(toState.getDescription()));\n  }\n  if (!fromState.getIsAnnouncementGroup().equals(toState.getIsAnnouncementGroup())) {\n    builder.setNewIsAnnouncementGroup(toState.getIsAnnouncementGroup());\n  }\n  if (!fromState.getAvatar().equals(toState.getAvatar())) {\n    builder.setNewAvatar(DecryptedString.newBuilder().setValue(toState.getAvatar()));\n  }\n  if (!fromState.getDisappearingMessagesTimer().equals(toState.getDisappearingMessagesTimer())) {\n    builder.setNewTimer(toState.getDisappearingMessagesTimer());\n  }\n  if (!fromState.getAccessControl().getAttributes().equals(toState.getAccessControl().getAttributes())) {\n    builder.setNewAttributeAccess(toState.getAccessControl().getAttributes());\n  }\n  if (!fromState.getAccessControl().getMembers().equals(toState.getAccessControl().getMembers())) {\n    builder.setNewMemberAccess(toState.getAccessControl().getMembers());\n  }\n  Set<ByteString> fromStateMemberUuids=membersToSetOfUuids(fromState.getMembersList());\n  Set<ByteString> toStateMemberUuids=membersToSetOfUuids(toState.getMembersList());\n  Set<ByteString> pendingMembersListA=pendingMembersToSetOfUuids(fromState.getPendingMembersList());\n  Set<ByteString> pendingMembersListB=pendingMembersToSetOfUuids(toState.getPendingMembersList());\n  Set<ByteString> requestingMembersListA=requestingMembersToSetOfUuids(fromState.getRequestingMembersList());\n  Set<ByteString> requestingMembersListB=requestingMembersToSetOfUuids(toState.getRequestingMembersList());\n  Set<ByteString> removedPendingMemberUuids=subtract(pendingMembersListA,pendingMembersListB);\n  Set<ByteString> removedRequestingMemberUuids=subtract(requestingMembersListA,requestingMembersListB);\n  Set<ByteString> newPendingMemberUuids=subtract(pendingMembersListB,pendingMembersListA);\n  Set<ByteString> newRequestingMemberUuids=subtract(requestingMembersListB,requestingMembersListA);\n  Set<ByteString> removedMemberUuids=subtract(fromStateMemberUuids,toStateMemberUuids);\n  Set<ByteString> newMemberUuids=subtract(toStateMemberUuids,fromStateMemberUuids);\n  Set<ByteString> addedByInvitationUuids=intersect(newMemberUuids,removedPendingMemberUuids);\n  Set<ByteString> addedByRequestApprovalUuids=intersect(newMemberUuids,removedRequestingMemberUuids);\n  Set<DecryptedMember> addedMembersByInvitation=intersectByUUID(toState.getMembersList(),addedByInvitationUuids);\n  Set<DecryptedMember> addedMembersByRequestApproval=intersectByUUID(toState.getMembersList(),addedByRequestApprovalUuids);\n  Set<DecryptedMember> addedMembers=intersectByUUID(toState.getMembersList(),subtract(newMemberUuids,addedByInvitationUuids,addedByRequestApprovalUuids));\n  Set<DecryptedPendingMember> uninvitedMembers=intersectPendingByUUID(fromState.getPendingMembersList(),subtract(removedPendingMemberUuids,addedByInvitationUuids));\n  Set<DecryptedRequestingMember> rejectedRequestMembers=intersectRequestingByUUID(fromState.getRequestingMembersList(),subtract(removedRequestingMemberUuids,addedByRequestApprovalUuids));\n  for (  DecryptedMember member : intersectByUUID(fromState.getMembersList(),removedMemberUuids)) {\n    builder.addDeleteMembers(member.getUuid());\n  }\n  for (  DecryptedMember member : addedMembers) {\n    builder.addNewMembers(member);\n  }\n  for (  DecryptedMember member : addedMembersByInvitation) {\n    builder.addPromotePendingMembers(member);\n  }\n  for (  DecryptedPendingMember uninvitedMember : uninvitedMembers) {\n    builder.addDeletePendingMembers(DecryptedPendingMemberRemoval.newBuilder().setUuid(uninvitedMember.getUuid()).setUuidCipherText(uninvitedMember.getUuidCipherText()));\n  }\n  for (  DecryptedPendingMember invitedMember : intersectPendingByUUID(toState.getPendingMembersList(),newPendingMemberUuids)) {\n    builder.addNewPendingMembers(invitedMember);\n  }\n  Set<ByteString> consistentMemberUuids=intersect(fromStateMemberUuids,toStateMemberUuids);\n  Set<DecryptedMember> changedMembers=intersectByUUID(subtract(toState.getMembersList(),fromState.getMembersList()),consistentMemberUuids);\n  Map<ByteString,DecryptedMember> membersUuidMap=uuidMap(fromState.getMembersList());\n  for (  DecryptedMember newState : changedMembers) {\n    DecryptedMember oldState=membersUuidMap.get(newState.getUuid());\n    if (oldState.getRole() != newState.getRole()) {\n      builder.addModifyMemberRoles(DecryptedModifyMemberRole.newBuilder().setUuid(newState.getUuid()).setRole(newState.getRole()));\n    }\n    if (!oldState.getProfileKey().equals(newState.getProfileKey())) {\n      builder.addModifiedProfileKeys(newState);\n    }\n  }\n  if (!fromState.getAccessControl().getAddFromInviteLink().equals(toState.getAccessControl().getAddFromInviteLink())) {\n    builder.setNewInviteLinkAccess(toState.getAccessControl().getAddFromInviteLink());\n  }\n  for (  DecryptedRequestingMember requestingMember : intersectRequestingByUUID(toState.getRequestingMembersList(),newRequestingMemberUuids)) {\n    builder.addNewRequestingMembers(requestingMember);\n  }\n  for (  DecryptedRequestingMember requestingMember : rejectedRequestMembers) {\n    builder.addDeleteRequestingMembers(requestingMember.getUuid());\n  }\n  for (  DecryptedMember member : addedMembersByRequestApproval) {\n    builder.addPromoteRequestingMembers(DecryptedApproveMember.newBuilder().setUuid(member.getUuid()).setRole(member.getRole()));\n  }\n  if (!fromState.getInviteLinkPassword().equals(toState.getInviteLinkPassword())) {\n    builder.setNewInviteLinkPassword(toState.getInviteLinkPassword());\n  }\n  return builder.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 714,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7048,
        "startLineNumber" : 24,
        "startColumnNumber" : 2,
        "endLineNumber" : 145,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Given a  {@param fromState} and a {@param toState} creates a {@link DecryptedGroupChange} that would take the {@param fromState} to the {@param toState}.\n */\npublic static DecryptedGroupChange reconstructGroupChange(DecryptedGroup fromState,DecryptedGroup toState){\n  DecryptedGroupChange.Builder builder=DecryptedGroupChange.newBuilder().setRevision(toState.getRevision());\n  if (!fromState.getTitle().equals(toState.getTitle())) {\n    builder.setNewTitle(DecryptedString.newBuilder().setValue(toState.getTitle()));\n  }\n  if (!fromState.getDescription().equals(toState.getDescription())) {\n    builder.setNewDescription(DecryptedString.newBuilder().setValue(toState.getDescription()));\n  }\n  if (!fromState.getIsAnnouncementGroup().equals(toState.getIsAnnouncementGroup())) {\n    builder.setNewIsAnnouncementGroup(toState.getIsAnnouncementGroup());\n  }\n  if (!fromState.getAvatar().equals(toState.getAvatar())) {\n    builder.setNewAvatar(DecryptedString.newBuilder().setValue(toState.getAvatar()));\n  }\n  if (!fromState.getDisappearingMessagesTimer().equals(toState.getDisappearingMessagesTimer())) {\n    builder.setNewTimer(toState.getDisappearingMessagesTimer());\n  }\n  if (!fromState.getAccessControl().getAttributes().equals(toState.getAccessControl().getAttributes())) {\n    builder.setNewAttributeAccess(toState.getAccessControl().getAttributes());\n  }\n  if (!fromState.getAccessControl().getMembers().equals(toState.getAccessControl().getMembers())) {\n    builder.setNewMemberAccess(toState.getAccessControl().getMembers());\n  }\n  Set<ByteString> fromStateMemberUuids=membersToSetOfUuids(fromState.getMembersList());\n  Set<ByteString> toStateMemberUuids=membersToSetOfUuids(toState.getMembersList());\n  Set<ByteString> pendingMembersListA=pendingMembersToSetOfUuids(fromState.getPendingMembersList());\n  Set<ByteString> pendingMembersListB=pendingMembersToSetOfUuids(toState.getPendingMembersList());\n  Set<ByteString> requestingMembersListA=requestingMembersToSetOfUuids(fromState.getRequestingMembersList());\n  Set<ByteString> requestingMembersListB=requestingMembersToSetOfUuids(toState.getRequestingMembersList());\n  Set<ByteString> removedPendingMemberUuids=subtract(pendingMembersListA,pendingMembersListB);\n  Set<ByteString> removedRequestingMemberUuids=subtract(requestingMembersListA,requestingMembersListB);\n  Set<ByteString> newPendingMemberUuids=subtract(pendingMembersListB,pendingMembersListA);\n  Set<ByteString> newRequestingMemberUuids=subtract(requestingMembersListB,requestingMembersListA);\n  Set<ByteString> removedMemberUuids=subtract(fromStateMemberUuids,toStateMemberUuids);\n  Set<ByteString> newMemberUuids=subtract(toStateMemberUuids,fromStateMemberUuids);\n  Set<ByteString> addedByInvitationUuids=intersect(newMemberUuids,removedPendingMemberUuids);\n  Set<ByteString> addedByRequestApprovalUuids=intersect(newMemberUuids,removedRequestingMemberUuids);\n  Set<DecryptedMember> addedMembersByInvitation=intersectByUUID(toState.getMembersList(),addedByInvitationUuids);\n  Set<DecryptedMember> addedMembersByRequestApproval=intersectByUUID(toState.getMembersList(),addedByRequestApprovalUuids);\n  Set<DecryptedMember> addedMembers=intersectByUUID(toState.getMembersList(),subtract(newMemberUuids,addedByInvitationUuids,addedByRequestApprovalUuids));\n  Set<DecryptedPendingMember> uninvitedMembers=intersectPendingByUUID(fromState.getPendingMembersList(),subtract(removedPendingMemberUuids,addedByInvitationUuids));\n  Set<DecryptedRequestingMember> rejectedRequestMembers=intersectRequestingByUUID(fromState.getRequestingMembersList(),subtract(removedRequestingMemberUuids,addedByRequestApprovalUuids));\n  for (  DecryptedMember member : intersectByUUID(fromState.getMembersList(),removedMemberUuids)) {\n    builder.addDeleteMembers(member.getUuid());\n  }\n  for (  DecryptedMember member : addedMembers) {\n    builder.addNewMembers(member);\n  }\n  for (  DecryptedMember member : addedMembersByInvitation) {\n    builder.addPromotePendingMembers(member);\n  }\n  for (  DecryptedPendingMember uninvitedMember : uninvitedMembers) {\n    builder.addDeletePendingMembers(DecryptedPendingMemberRemoval.newBuilder().setUuid(uninvitedMember.getUuid()).setUuidCipherText(uninvitedMember.getUuidCipherText()));\n  }\n  for (  DecryptedPendingMember invitedMember : intersectPendingByUUID(toState.getPendingMembersList(),newPendingMemberUuids)) {\n    builder.addNewPendingMembers(invitedMember);\n  }\n  Set<ByteString> consistentMemberUuids=intersect(fromStateMemberUuids,toStateMemberUuids);\n  Set<DecryptedMember> changedMembers=intersectByUUID(subtract(toState.getMembersList(),fromState.getMembersList()),consistentMemberUuids);\n  Map<ByteString,DecryptedMember> membersUuidMap=uuidMap(fromState.getMembersList());\n  for (  DecryptedMember newState : changedMembers) {\n    DecryptedMember oldState=membersUuidMap.get(newState.getUuid());\n    if (oldState.getRole() != newState.getRole()) {\n      builder.addModifyMemberRoles(DecryptedModifyMemberRole.newBuilder().setUuid(newState.getUuid()).setRole(newState.getRole()));\n    }\n    if (!oldState.getProfileKey().equals(newState.getProfileKey())) {\n      builder.addModifiedProfileKeys(newState);\n    }\n  }\n  if (!fromState.getAccessControl().getAddFromInviteLink().equals(toState.getAccessControl().getAddFromInviteLink())) {\n    builder.setNewInviteLinkAccess(toState.getAccessControl().getAddFromInviteLink());\n  }\n  for (  DecryptedRequestingMember requestingMember : intersectRequestingByUUID(toState.getRequestingMembersList(),newRequestingMemberUuids)) {\n    builder.addNewRequestingMembers(requestingMember);\n  }\n  for (  DecryptedRequestingMember requestingMember : rejectedRequestMembers) {\n    builder.addDeleteRequestingMembers(requestingMember.getUuid());\n  }\n  for (  DecryptedMember member : addedMembersByRequestApproval) {\n    builder.addPromoteRequestingMembers(DecryptedApproveMember.newBuilder().setUuid(member.getUuid()).setRole(member.getRole()));\n  }\n  if (!fromState.getInviteLinkPassword().equals(toState.getInviteLinkPassword())) {\n    builder.setNewInviteLinkPassword(toState.getInviteLinkPassword());\n  }\n  return builder.build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 729,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 56,
        "startColumnNumber" : 6,
        "endLineNumber" : 56,
        "endColumnNumber" : 74
      },
      "nodeContext" : "builder.setNewMemberAccess(toState.getAccessControl().getMembers());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "DecryptedGroupChange.Builder"
  }, {
    "nodeContext" : "builder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 84,
      "startColumnNumber" : 6,
      "endLineNumber" : 84,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 84,
        "startColumnNumber" : 6,
        "endLineNumber" : 84,
        "endColumnNumber" : 48
      },
      "nodeContext" : "builder.addDeleteMembers(member.getUuid())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 84,
        "startColumnNumber" : 6,
        "endLineNumber" : 84,
        "endColumnNumber" : 49
      },
      "nodeContext" : "builder.addDeleteMembers(member.getUuid());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 83,
        "startColumnNumber" : 99,
        "endLineNumber" : 85,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  builder.addDeleteMembers(member.getUuid());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 152,
        "startLineNumber" : 83,
        "startColumnNumber" : 4,
        "endLineNumber" : 85,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (DecryptedMember member : intersectByUUID(fromState.getMembersList(),removedMemberUuids)) {\n  builder.addDeleteMembers(member.getUuid());\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6770,
        "startLineNumber" : 27,
        "startColumnNumber" : 110,
        "endLineNumber" : 145,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  DecryptedGroupChange.Builder builder=DecryptedGroupChange.newBuilder().setRevision(toState.getRevision());\n  if (!fromState.getTitle().equals(toState.getTitle())) {\n    builder.setNewTitle(DecryptedString.newBuilder().setValue(toState.getTitle()));\n  }\n  if (!fromState.getDescription().equals(toState.getDescription())) {\n    builder.setNewDescription(DecryptedString.newBuilder().setValue(toState.getDescription()));\n  }\n  if (!fromState.getIsAnnouncementGroup().equals(toState.getIsAnnouncementGroup())) {\n    builder.setNewIsAnnouncementGroup(toState.getIsAnnouncementGroup());\n  }\n  if (!fromState.getAvatar().equals(toState.getAvatar())) {\n    builder.setNewAvatar(DecryptedString.newBuilder().setValue(toState.getAvatar()));\n  }\n  if (!fromState.getDisappearingMessagesTimer().equals(toState.getDisappearingMessagesTimer())) {\n    builder.setNewTimer(toState.getDisappearingMessagesTimer());\n  }\n  if (!fromState.getAccessControl().getAttributes().equals(toState.getAccessControl().getAttributes())) {\n    builder.setNewAttributeAccess(toState.getAccessControl().getAttributes());\n  }\n  if (!fromState.getAccessControl().getMembers().equals(toState.getAccessControl().getMembers())) {\n    builder.setNewMemberAccess(toState.getAccessControl().getMembers());\n  }\n  Set<ByteString> fromStateMemberUuids=membersToSetOfUuids(fromState.getMembersList());\n  Set<ByteString> toStateMemberUuids=membersToSetOfUuids(toState.getMembersList());\n  Set<ByteString> pendingMembersListA=pendingMembersToSetOfUuids(fromState.getPendingMembersList());\n  Set<ByteString> pendingMembersListB=pendingMembersToSetOfUuids(toState.getPendingMembersList());\n  Set<ByteString> requestingMembersListA=requestingMembersToSetOfUuids(fromState.getRequestingMembersList());\n  Set<ByteString> requestingMembersListB=requestingMembersToSetOfUuids(toState.getRequestingMembersList());\n  Set<ByteString> removedPendingMemberUuids=subtract(pendingMembersListA,pendingMembersListB);\n  Set<ByteString> removedRequestingMemberUuids=subtract(requestingMembersListA,requestingMembersListB);\n  Set<ByteString> newPendingMemberUuids=subtract(pendingMembersListB,pendingMembersListA);\n  Set<ByteString> newRequestingMemberUuids=subtract(requestingMembersListB,requestingMembersListA);\n  Set<ByteString> removedMemberUuids=subtract(fromStateMemberUuids,toStateMemberUuids);\n  Set<ByteString> newMemberUuids=subtract(toStateMemberUuids,fromStateMemberUuids);\n  Set<ByteString> addedByInvitationUuids=intersect(newMemberUuids,removedPendingMemberUuids);\n  Set<ByteString> addedByRequestApprovalUuids=intersect(newMemberUuids,removedRequestingMemberUuids);\n  Set<DecryptedMember> addedMembersByInvitation=intersectByUUID(toState.getMembersList(),addedByInvitationUuids);\n  Set<DecryptedMember> addedMembersByRequestApproval=intersectByUUID(toState.getMembersList(),addedByRequestApprovalUuids);\n  Set<DecryptedMember> addedMembers=intersectByUUID(toState.getMembersList(),subtract(newMemberUuids,addedByInvitationUuids,addedByRequestApprovalUuids));\n  Set<DecryptedPendingMember> uninvitedMembers=intersectPendingByUUID(fromState.getPendingMembersList(),subtract(removedPendingMemberUuids,addedByInvitationUuids));\n  Set<DecryptedRequestingMember> rejectedRequestMembers=intersectRequestingByUUID(fromState.getRequestingMembersList(),subtract(removedRequestingMemberUuids,addedByRequestApprovalUuids));\n  for (  DecryptedMember member : intersectByUUID(fromState.getMembersList(),removedMemberUuids)) {\n    builder.addDeleteMembers(member.getUuid());\n  }\n  for (  DecryptedMember member : addedMembers) {\n    builder.addNewMembers(member);\n  }\n  for (  DecryptedMember member : addedMembersByInvitation) {\n    builder.addPromotePendingMembers(member);\n  }\n  for (  DecryptedPendingMember uninvitedMember : uninvitedMembers) {\n    builder.addDeletePendingMembers(DecryptedPendingMemberRemoval.newBuilder().setUuid(uninvitedMember.getUuid()).setUuidCipherText(uninvitedMember.getUuidCipherText()));\n  }\n  for (  DecryptedPendingMember invitedMember : intersectPendingByUUID(toState.getPendingMembersList(),newPendingMemberUuids)) {\n    builder.addNewPendingMembers(invitedMember);\n  }\n  Set<ByteString> consistentMemberUuids=intersect(fromStateMemberUuids,toStateMemberUuids);\n  Set<DecryptedMember> changedMembers=intersectByUUID(subtract(toState.getMembersList(),fromState.getMembersList()),consistentMemberUuids);\n  Map<ByteString,DecryptedMember> membersUuidMap=uuidMap(fromState.getMembersList());\n  for (  DecryptedMember newState : changedMembers) {\n    DecryptedMember oldState=membersUuidMap.get(newState.getUuid());\n    if (oldState.getRole() != newState.getRole()) {\n      builder.addModifyMemberRoles(DecryptedModifyMemberRole.newBuilder().setUuid(newState.getUuid()).setRole(newState.getRole()));\n    }\n    if (!oldState.getProfileKey().equals(newState.getProfileKey())) {\n      builder.addModifiedProfileKeys(newState);\n    }\n  }\n  if (!fromState.getAccessControl().getAddFromInviteLink().equals(toState.getAccessControl().getAddFromInviteLink())) {\n    builder.setNewInviteLinkAccess(toState.getAccessControl().getAddFromInviteLink());\n  }\n  for (  DecryptedRequestingMember requestingMember : intersectRequestingByUUID(toState.getRequestingMembersList(),newRequestingMemberUuids)) {\n    builder.addNewRequestingMembers(requestingMember);\n  }\n  for (  DecryptedRequestingMember requestingMember : rejectedRequestMembers) {\n    builder.addDeleteRequestingMembers(requestingMember.getUuid());\n  }\n  for (  DecryptedMember member : addedMembersByRequestApproval) {\n    builder.addPromoteRequestingMembers(DecryptedApproveMember.newBuilder().setUuid(member.getUuid()).setRole(member.getRole()));\n  }\n  if (!fromState.getInviteLinkPassword().equals(toState.getInviteLinkPassword())) {\n    builder.setNewInviteLinkPassword(toState.getInviteLinkPassword());\n  }\n  return builder.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 714,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7048,
        "startLineNumber" : 24,
        "startColumnNumber" : 2,
        "endLineNumber" : 145,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Given a  {@param fromState} and a {@param toState} creates a {@link DecryptedGroupChange} that would take the {@param fromState} to the {@param toState}.\n */\npublic static DecryptedGroupChange reconstructGroupChange(DecryptedGroup fromState,DecryptedGroup toState){\n  DecryptedGroupChange.Builder builder=DecryptedGroupChange.newBuilder().setRevision(toState.getRevision());\n  if (!fromState.getTitle().equals(toState.getTitle())) {\n    builder.setNewTitle(DecryptedString.newBuilder().setValue(toState.getTitle()));\n  }\n  if (!fromState.getDescription().equals(toState.getDescription())) {\n    builder.setNewDescription(DecryptedString.newBuilder().setValue(toState.getDescription()));\n  }\n  if (!fromState.getIsAnnouncementGroup().equals(toState.getIsAnnouncementGroup())) {\n    builder.setNewIsAnnouncementGroup(toState.getIsAnnouncementGroup());\n  }\n  if (!fromState.getAvatar().equals(toState.getAvatar())) {\n    builder.setNewAvatar(DecryptedString.newBuilder().setValue(toState.getAvatar()));\n  }\n  if (!fromState.getDisappearingMessagesTimer().equals(toState.getDisappearingMessagesTimer())) {\n    builder.setNewTimer(toState.getDisappearingMessagesTimer());\n  }\n  if (!fromState.getAccessControl().getAttributes().equals(toState.getAccessControl().getAttributes())) {\n    builder.setNewAttributeAccess(toState.getAccessControl().getAttributes());\n  }\n  if (!fromState.getAccessControl().getMembers().equals(toState.getAccessControl().getMembers())) {\n    builder.setNewMemberAccess(toState.getAccessControl().getMembers());\n  }\n  Set<ByteString> fromStateMemberUuids=membersToSetOfUuids(fromState.getMembersList());\n  Set<ByteString> toStateMemberUuids=membersToSetOfUuids(toState.getMembersList());\n  Set<ByteString> pendingMembersListA=pendingMembersToSetOfUuids(fromState.getPendingMembersList());\n  Set<ByteString> pendingMembersListB=pendingMembersToSetOfUuids(toState.getPendingMembersList());\n  Set<ByteString> requestingMembersListA=requestingMembersToSetOfUuids(fromState.getRequestingMembersList());\n  Set<ByteString> requestingMembersListB=requestingMembersToSetOfUuids(toState.getRequestingMembersList());\n  Set<ByteString> removedPendingMemberUuids=subtract(pendingMembersListA,pendingMembersListB);\n  Set<ByteString> removedRequestingMemberUuids=subtract(requestingMembersListA,requestingMembersListB);\n  Set<ByteString> newPendingMemberUuids=subtract(pendingMembersListB,pendingMembersListA);\n  Set<ByteString> newRequestingMemberUuids=subtract(requestingMembersListB,requestingMembersListA);\n  Set<ByteString> removedMemberUuids=subtract(fromStateMemberUuids,toStateMemberUuids);\n  Set<ByteString> newMemberUuids=subtract(toStateMemberUuids,fromStateMemberUuids);\n  Set<ByteString> addedByInvitationUuids=intersect(newMemberUuids,removedPendingMemberUuids);\n  Set<ByteString> addedByRequestApprovalUuids=intersect(newMemberUuids,removedRequestingMemberUuids);\n  Set<DecryptedMember> addedMembersByInvitation=intersectByUUID(toState.getMembersList(),addedByInvitationUuids);\n  Set<DecryptedMember> addedMembersByRequestApproval=intersectByUUID(toState.getMembersList(),addedByRequestApprovalUuids);\n  Set<DecryptedMember> addedMembers=intersectByUUID(toState.getMembersList(),subtract(newMemberUuids,addedByInvitationUuids,addedByRequestApprovalUuids));\n  Set<DecryptedPendingMember> uninvitedMembers=intersectPendingByUUID(fromState.getPendingMembersList(),subtract(removedPendingMemberUuids,addedByInvitationUuids));\n  Set<DecryptedRequestingMember> rejectedRequestMembers=intersectRequestingByUUID(fromState.getRequestingMembersList(),subtract(removedRequestingMemberUuids,addedByRequestApprovalUuids));\n  for (  DecryptedMember member : intersectByUUID(fromState.getMembersList(),removedMemberUuids)) {\n    builder.addDeleteMembers(member.getUuid());\n  }\n  for (  DecryptedMember member : addedMembers) {\n    builder.addNewMembers(member);\n  }\n  for (  DecryptedMember member : addedMembersByInvitation) {\n    builder.addPromotePendingMembers(member);\n  }\n  for (  DecryptedPendingMember uninvitedMember : uninvitedMembers) {\n    builder.addDeletePendingMembers(DecryptedPendingMemberRemoval.newBuilder().setUuid(uninvitedMember.getUuid()).setUuidCipherText(uninvitedMember.getUuidCipherText()));\n  }\n  for (  DecryptedPendingMember invitedMember : intersectPendingByUUID(toState.getPendingMembersList(),newPendingMemberUuids)) {\n    builder.addNewPendingMembers(invitedMember);\n  }\n  Set<ByteString> consistentMemberUuids=intersect(fromStateMemberUuids,toStateMemberUuids);\n  Set<DecryptedMember> changedMembers=intersectByUUID(subtract(toState.getMembersList(),fromState.getMembersList()),consistentMemberUuids);\n  Map<ByteString,DecryptedMember> membersUuidMap=uuidMap(fromState.getMembersList());\n  for (  DecryptedMember newState : changedMembers) {\n    DecryptedMember oldState=membersUuidMap.get(newState.getUuid());\n    if (oldState.getRole() != newState.getRole()) {\n      builder.addModifyMemberRoles(DecryptedModifyMemberRole.newBuilder().setUuid(newState.getUuid()).setRole(newState.getRole()));\n    }\n    if (!oldState.getProfileKey().equals(newState.getProfileKey())) {\n      builder.addModifiedProfileKeys(newState);\n    }\n  }\n  if (!fromState.getAccessControl().getAddFromInviteLink().equals(toState.getAccessControl().getAddFromInviteLink())) {\n    builder.setNewInviteLinkAccess(toState.getAccessControl().getAddFromInviteLink());\n  }\n  for (  DecryptedRequestingMember requestingMember : intersectRequestingByUUID(toState.getRequestingMembersList(),newRequestingMemberUuids)) {\n    builder.addNewRequestingMembers(requestingMember);\n  }\n  for (  DecryptedRequestingMember requestingMember : rejectedRequestMembers) {\n    builder.addDeleteRequestingMembers(requestingMember.getUuid());\n  }\n  for (  DecryptedMember member : addedMembersByRequestApproval) {\n    builder.addPromoteRequestingMembers(DecryptedApproveMember.newBuilder().setUuid(member.getUuid()).setRole(member.getRole()));\n  }\n  if (!fromState.getInviteLinkPassword().equals(toState.getInviteLinkPassword())) {\n    builder.setNewInviteLinkPassword(toState.getInviteLinkPassword());\n  }\n  return builder.build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 729,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 84,
        "startColumnNumber" : 6,
        "endLineNumber" : 84,
        "endColumnNumber" : 49
      },
      "nodeContext" : "builder.addDeleteMembers(member.getUuid());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "DecryptedGroupChange.Builder"
  }, {
    "nodeContext" : "builder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 88,
      "startColumnNumber" : 6,
      "endLineNumber" : 88,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 88,
        "startColumnNumber" : 6,
        "endLineNumber" : 88,
        "endColumnNumber" : 35
      },
      "nodeContext" : "builder.addNewMembers(member)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 88,
        "startColumnNumber" : 6,
        "endLineNumber" : 88,
        "endColumnNumber" : 36
      },
      "nodeContext" : "builder.addNewMembers(member);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 87,
        "startColumnNumber" : 48,
        "endLineNumber" : 89,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  builder.addNewMembers(member);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 87,
        "startColumnNumber" : 4,
        "endLineNumber" : 89,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (DecryptedMember member : addedMembers) {\n  builder.addNewMembers(member);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6770,
        "startLineNumber" : 27,
        "startColumnNumber" : 110,
        "endLineNumber" : 145,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  DecryptedGroupChange.Builder builder=DecryptedGroupChange.newBuilder().setRevision(toState.getRevision());\n  if (!fromState.getTitle().equals(toState.getTitle())) {\n    builder.setNewTitle(DecryptedString.newBuilder().setValue(toState.getTitle()));\n  }\n  if (!fromState.getDescription().equals(toState.getDescription())) {\n    builder.setNewDescription(DecryptedString.newBuilder().setValue(toState.getDescription()));\n  }\n  if (!fromState.getIsAnnouncementGroup().equals(toState.getIsAnnouncementGroup())) {\n    builder.setNewIsAnnouncementGroup(toState.getIsAnnouncementGroup());\n  }\n  if (!fromState.getAvatar().equals(toState.getAvatar())) {\n    builder.setNewAvatar(DecryptedString.newBuilder().setValue(toState.getAvatar()));\n  }\n  if (!fromState.getDisappearingMessagesTimer().equals(toState.getDisappearingMessagesTimer())) {\n    builder.setNewTimer(toState.getDisappearingMessagesTimer());\n  }\n  if (!fromState.getAccessControl().getAttributes().equals(toState.getAccessControl().getAttributes())) {\n    builder.setNewAttributeAccess(toState.getAccessControl().getAttributes());\n  }\n  if (!fromState.getAccessControl().getMembers().equals(toState.getAccessControl().getMembers())) {\n    builder.setNewMemberAccess(toState.getAccessControl().getMembers());\n  }\n  Set<ByteString> fromStateMemberUuids=membersToSetOfUuids(fromState.getMembersList());\n  Set<ByteString> toStateMemberUuids=membersToSetOfUuids(toState.getMembersList());\n  Set<ByteString> pendingMembersListA=pendingMembersToSetOfUuids(fromState.getPendingMembersList());\n  Set<ByteString> pendingMembersListB=pendingMembersToSetOfUuids(toState.getPendingMembersList());\n  Set<ByteString> requestingMembersListA=requestingMembersToSetOfUuids(fromState.getRequestingMembersList());\n  Set<ByteString> requestingMembersListB=requestingMembersToSetOfUuids(toState.getRequestingMembersList());\n  Set<ByteString> removedPendingMemberUuids=subtract(pendingMembersListA,pendingMembersListB);\n  Set<ByteString> removedRequestingMemberUuids=subtract(requestingMembersListA,requestingMembersListB);\n  Set<ByteString> newPendingMemberUuids=subtract(pendingMembersListB,pendingMembersListA);\n  Set<ByteString> newRequestingMemberUuids=subtract(requestingMembersListB,requestingMembersListA);\n  Set<ByteString> removedMemberUuids=subtract(fromStateMemberUuids,toStateMemberUuids);\n  Set<ByteString> newMemberUuids=subtract(toStateMemberUuids,fromStateMemberUuids);\n  Set<ByteString> addedByInvitationUuids=intersect(newMemberUuids,removedPendingMemberUuids);\n  Set<ByteString> addedByRequestApprovalUuids=intersect(newMemberUuids,removedRequestingMemberUuids);\n  Set<DecryptedMember> addedMembersByInvitation=intersectByUUID(toState.getMembersList(),addedByInvitationUuids);\n  Set<DecryptedMember> addedMembersByRequestApproval=intersectByUUID(toState.getMembersList(),addedByRequestApprovalUuids);\n  Set<DecryptedMember> addedMembers=intersectByUUID(toState.getMembersList(),subtract(newMemberUuids,addedByInvitationUuids,addedByRequestApprovalUuids));\n  Set<DecryptedPendingMember> uninvitedMembers=intersectPendingByUUID(fromState.getPendingMembersList(),subtract(removedPendingMemberUuids,addedByInvitationUuids));\n  Set<DecryptedRequestingMember> rejectedRequestMembers=intersectRequestingByUUID(fromState.getRequestingMembersList(),subtract(removedRequestingMemberUuids,addedByRequestApprovalUuids));\n  for (  DecryptedMember member : intersectByUUID(fromState.getMembersList(),removedMemberUuids)) {\n    builder.addDeleteMembers(member.getUuid());\n  }\n  for (  DecryptedMember member : addedMembers) {\n    builder.addNewMembers(member);\n  }\n  for (  DecryptedMember member : addedMembersByInvitation) {\n    builder.addPromotePendingMembers(member);\n  }\n  for (  DecryptedPendingMember uninvitedMember : uninvitedMembers) {\n    builder.addDeletePendingMembers(DecryptedPendingMemberRemoval.newBuilder().setUuid(uninvitedMember.getUuid()).setUuidCipherText(uninvitedMember.getUuidCipherText()));\n  }\n  for (  DecryptedPendingMember invitedMember : intersectPendingByUUID(toState.getPendingMembersList(),newPendingMemberUuids)) {\n    builder.addNewPendingMembers(invitedMember);\n  }\n  Set<ByteString> consistentMemberUuids=intersect(fromStateMemberUuids,toStateMemberUuids);\n  Set<DecryptedMember> changedMembers=intersectByUUID(subtract(toState.getMembersList(),fromState.getMembersList()),consistentMemberUuids);\n  Map<ByteString,DecryptedMember> membersUuidMap=uuidMap(fromState.getMembersList());\n  for (  DecryptedMember newState : changedMembers) {\n    DecryptedMember oldState=membersUuidMap.get(newState.getUuid());\n    if (oldState.getRole() != newState.getRole()) {\n      builder.addModifyMemberRoles(DecryptedModifyMemberRole.newBuilder().setUuid(newState.getUuid()).setRole(newState.getRole()));\n    }\n    if (!oldState.getProfileKey().equals(newState.getProfileKey())) {\n      builder.addModifiedProfileKeys(newState);\n    }\n  }\n  if (!fromState.getAccessControl().getAddFromInviteLink().equals(toState.getAccessControl().getAddFromInviteLink())) {\n    builder.setNewInviteLinkAccess(toState.getAccessControl().getAddFromInviteLink());\n  }\n  for (  DecryptedRequestingMember requestingMember : intersectRequestingByUUID(toState.getRequestingMembersList(),newRequestingMemberUuids)) {\n    builder.addNewRequestingMembers(requestingMember);\n  }\n  for (  DecryptedRequestingMember requestingMember : rejectedRequestMembers) {\n    builder.addDeleteRequestingMembers(requestingMember.getUuid());\n  }\n  for (  DecryptedMember member : addedMembersByRequestApproval) {\n    builder.addPromoteRequestingMembers(DecryptedApproveMember.newBuilder().setUuid(member.getUuid()).setRole(member.getRole()));\n  }\n  if (!fromState.getInviteLinkPassword().equals(toState.getInviteLinkPassword())) {\n    builder.setNewInviteLinkPassword(toState.getInviteLinkPassword());\n  }\n  return builder.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 714,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7048,
        "startLineNumber" : 24,
        "startColumnNumber" : 2,
        "endLineNumber" : 145,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Given a  {@param fromState} and a {@param toState} creates a {@link DecryptedGroupChange} that would take the {@param fromState} to the {@param toState}.\n */\npublic static DecryptedGroupChange reconstructGroupChange(DecryptedGroup fromState,DecryptedGroup toState){\n  DecryptedGroupChange.Builder builder=DecryptedGroupChange.newBuilder().setRevision(toState.getRevision());\n  if (!fromState.getTitle().equals(toState.getTitle())) {\n    builder.setNewTitle(DecryptedString.newBuilder().setValue(toState.getTitle()));\n  }\n  if (!fromState.getDescription().equals(toState.getDescription())) {\n    builder.setNewDescription(DecryptedString.newBuilder().setValue(toState.getDescription()));\n  }\n  if (!fromState.getIsAnnouncementGroup().equals(toState.getIsAnnouncementGroup())) {\n    builder.setNewIsAnnouncementGroup(toState.getIsAnnouncementGroup());\n  }\n  if (!fromState.getAvatar().equals(toState.getAvatar())) {\n    builder.setNewAvatar(DecryptedString.newBuilder().setValue(toState.getAvatar()));\n  }\n  if (!fromState.getDisappearingMessagesTimer().equals(toState.getDisappearingMessagesTimer())) {\n    builder.setNewTimer(toState.getDisappearingMessagesTimer());\n  }\n  if (!fromState.getAccessControl().getAttributes().equals(toState.getAccessControl().getAttributes())) {\n    builder.setNewAttributeAccess(toState.getAccessControl().getAttributes());\n  }\n  if (!fromState.getAccessControl().getMembers().equals(toState.getAccessControl().getMembers())) {\n    builder.setNewMemberAccess(toState.getAccessControl().getMembers());\n  }\n  Set<ByteString> fromStateMemberUuids=membersToSetOfUuids(fromState.getMembersList());\n  Set<ByteString> toStateMemberUuids=membersToSetOfUuids(toState.getMembersList());\n  Set<ByteString> pendingMembersListA=pendingMembersToSetOfUuids(fromState.getPendingMembersList());\n  Set<ByteString> pendingMembersListB=pendingMembersToSetOfUuids(toState.getPendingMembersList());\n  Set<ByteString> requestingMembersListA=requestingMembersToSetOfUuids(fromState.getRequestingMembersList());\n  Set<ByteString> requestingMembersListB=requestingMembersToSetOfUuids(toState.getRequestingMembersList());\n  Set<ByteString> removedPendingMemberUuids=subtract(pendingMembersListA,pendingMembersListB);\n  Set<ByteString> removedRequestingMemberUuids=subtract(requestingMembersListA,requestingMembersListB);\n  Set<ByteString> newPendingMemberUuids=subtract(pendingMembersListB,pendingMembersListA);\n  Set<ByteString> newRequestingMemberUuids=subtract(requestingMembersListB,requestingMembersListA);\n  Set<ByteString> removedMemberUuids=subtract(fromStateMemberUuids,toStateMemberUuids);\n  Set<ByteString> newMemberUuids=subtract(toStateMemberUuids,fromStateMemberUuids);\n  Set<ByteString> addedByInvitationUuids=intersect(newMemberUuids,removedPendingMemberUuids);\n  Set<ByteString> addedByRequestApprovalUuids=intersect(newMemberUuids,removedRequestingMemberUuids);\n  Set<DecryptedMember> addedMembersByInvitation=intersectByUUID(toState.getMembersList(),addedByInvitationUuids);\n  Set<DecryptedMember> addedMembersByRequestApproval=intersectByUUID(toState.getMembersList(),addedByRequestApprovalUuids);\n  Set<DecryptedMember> addedMembers=intersectByUUID(toState.getMembersList(),subtract(newMemberUuids,addedByInvitationUuids,addedByRequestApprovalUuids));\n  Set<DecryptedPendingMember> uninvitedMembers=intersectPendingByUUID(fromState.getPendingMembersList(),subtract(removedPendingMemberUuids,addedByInvitationUuids));\n  Set<DecryptedRequestingMember> rejectedRequestMembers=intersectRequestingByUUID(fromState.getRequestingMembersList(),subtract(removedRequestingMemberUuids,addedByRequestApprovalUuids));\n  for (  DecryptedMember member : intersectByUUID(fromState.getMembersList(),removedMemberUuids)) {\n    builder.addDeleteMembers(member.getUuid());\n  }\n  for (  DecryptedMember member : addedMembers) {\n    builder.addNewMembers(member);\n  }\n  for (  DecryptedMember member : addedMembersByInvitation) {\n    builder.addPromotePendingMembers(member);\n  }\n  for (  DecryptedPendingMember uninvitedMember : uninvitedMembers) {\n    builder.addDeletePendingMembers(DecryptedPendingMemberRemoval.newBuilder().setUuid(uninvitedMember.getUuid()).setUuidCipherText(uninvitedMember.getUuidCipherText()));\n  }\n  for (  DecryptedPendingMember invitedMember : intersectPendingByUUID(toState.getPendingMembersList(),newPendingMemberUuids)) {\n    builder.addNewPendingMembers(invitedMember);\n  }\n  Set<ByteString> consistentMemberUuids=intersect(fromStateMemberUuids,toStateMemberUuids);\n  Set<DecryptedMember> changedMembers=intersectByUUID(subtract(toState.getMembersList(),fromState.getMembersList()),consistentMemberUuids);\n  Map<ByteString,DecryptedMember> membersUuidMap=uuidMap(fromState.getMembersList());\n  for (  DecryptedMember newState : changedMembers) {\n    DecryptedMember oldState=membersUuidMap.get(newState.getUuid());\n    if (oldState.getRole() != newState.getRole()) {\n      builder.addModifyMemberRoles(DecryptedModifyMemberRole.newBuilder().setUuid(newState.getUuid()).setRole(newState.getRole()));\n    }\n    if (!oldState.getProfileKey().equals(newState.getProfileKey())) {\n      builder.addModifiedProfileKeys(newState);\n    }\n  }\n  if (!fromState.getAccessControl().getAddFromInviteLink().equals(toState.getAccessControl().getAddFromInviteLink())) {\n    builder.setNewInviteLinkAccess(toState.getAccessControl().getAddFromInviteLink());\n  }\n  for (  DecryptedRequestingMember requestingMember : intersectRequestingByUUID(toState.getRequestingMembersList(),newRequestingMemberUuids)) {\n    builder.addNewRequestingMembers(requestingMember);\n  }\n  for (  DecryptedRequestingMember requestingMember : rejectedRequestMembers) {\n    builder.addDeleteRequestingMembers(requestingMember.getUuid());\n  }\n  for (  DecryptedMember member : addedMembersByRequestApproval) {\n    builder.addPromoteRequestingMembers(DecryptedApproveMember.newBuilder().setUuid(member.getUuid()).setRole(member.getRole()));\n  }\n  if (!fromState.getInviteLinkPassword().equals(toState.getInviteLinkPassword())) {\n    builder.setNewInviteLinkPassword(toState.getInviteLinkPassword());\n  }\n  return builder.build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 729,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 88,
        "startColumnNumber" : 6,
        "endLineNumber" : 88,
        "endColumnNumber" : 36
      },
      "nodeContext" : "builder.addNewMembers(member);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "DecryptedGroupChange.Builder"
  }, {
    "nodeContext" : "builder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 92,
      "startColumnNumber" : 6,
      "endLineNumber" : 92,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 92,
        "startColumnNumber" : 6,
        "endLineNumber" : 92,
        "endColumnNumber" : 46
      },
      "nodeContext" : "builder.addPromotePendingMembers(member)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 92,
        "startColumnNumber" : 6,
        "endLineNumber" : 92,
        "endColumnNumber" : 47
      },
      "nodeContext" : "builder.addPromotePendingMembers(member);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 91,
        "startColumnNumber" : 60,
        "endLineNumber" : 93,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  builder.addPromotePendingMembers(member);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 111,
        "startLineNumber" : 91,
        "startColumnNumber" : 4,
        "endLineNumber" : 93,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (DecryptedMember member : addedMembersByInvitation) {\n  builder.addPromotePendingMembers(member);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6770,
        "startLineNumber" : 27,
        "startColumnNumber" : 110,
        "endLineNumber" : 145,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  DecryptedGroupChange.Builder builder=DecryptedGroupChange.newBuilder().setRevision(toState.getRevision());\n  if (!fromState.getTitle().equals(toState.getTitle())) {\n    builder.setNewTitle(DecryptedString.newBuilder().setValue(toState.getTitle()));\n  }\n  if (!fromState.getDescription().equals(toState.getDescription())) {\n    builder.setNewDescription(DecryptedString.newBuilder().setValue(toState.getDescription()));\n  }\n  if (!fromState.getIsAnnouncementGroup().equals(toState.getIsAnnouncementGroup())) {\n    builder.setNewIsAnnouncementGroup(toState.getIsAnnouncementGroup());\n  }\n  if (!fromState.getAvatar().equals(toState.getAvatar())) {\n    builder.setNewAvatar(DecryptedString.newBuilder().setValue(toState.getAvatar()));\n  }\n  if (!fromState.getDisappearingMessagesTimer().equals(toState.getDisappearingMessagesTimer())) {\n    builder.setNewTimer(toState.getDisappearingMessagesTimer());\n  }\n  if (!fromState.getAccessControl().getAttributes().equals(toState.getAccessControl().getAttributes())) {\n    builder.setNewAttributeAccess(toState.getAccessControl().getAttributes());\n  }\n  if (!fromState.getAccessControl().getMembers().equals(toState.getAccessControl().getMembers())) {\n    builder.setNewMemberAccess(toState.getAccessControl().getMembers());\n  }\n  Set<ByteString> fromStateMemberUuids=membersToSetOfUuids(fromState.getMembersList());\n  Set<ByteString> toStateMemberUuids=membersToSetOfUuids(toState.getMembersList());\n  Set<ByteString> pendingMembersListA=pendingMembersToSetOfUuids(fromState.getPendingMembersList());\n  Set<ByteString> pendingMembersListB=pendingMembersToSetOfUuids(toState.getPendingMembersList());\n  Set<ByteString> requestingMembersListA=requestingMembersToSetOfUuids(fromState.getRequestingMembersList());\n  Set<ByteString> requestingMembersListB=requestingMembersToSetOfUuids(toState.getRequestingMembersList());\n  Set<ByteString> removedPendingMemberUuids=subtract(pendingMembersListA,pendingMembersListB);\n  Set<ByteString> removedRequestingMemberUuids=subtract(requestingMembersListA,requestingMembersListB);\n  Set<ByteString> newPendingMemberUuids=subtract(pendingMembersListB,pendingMembersListA);\n  Set<ByteString> newRequestingMemberUuids=subtract(requestingMembersListB,requestingMembersListA);\n  Set<ByteString> removedMemberUuids=subtract(fromStateMemberUuids,toStateMemberUuids);\n  Set<ByteString> newMemberUuids=subtract(toStateMemberUuids,fromStateMemberUuids);\n  Set<ByteString> addedByInvitationUuids=intersect(newMemberUuids,removedPendingMemberUuids);\n  Set<ByteString> addedByRequestApprovalUuids=intersect(newMemberUuids,removedRequestingMemberUuids);\n  Set<DecryptedMember> addedMembersByInvitation=intersectByUUID(toState.getMembersList(),addedByInvitationUuids);\n  Set<DecryptedMember> addedMembersByRequestApproval=intersectByUUID(toState.getMembersList(),addedByRequestApprovalUuids);\n  Set<DecryptedMember> addedMembers=intersectByUUID(toState.getMembersList(),subtract(newMemberUuids,addedByInvitationUuids,addedByRequestApprovalUuids));\n  Set<DecryptedPendingMember> uninvitedMembers=intersectPendingByUUID(fromState.getPendingMembersList(),subtract(removedPendingMemberUuids,addedByInvitationUuids));\n  Set<DecryptedRequestingMember> rejectedRequestMembers=intersectRequestingByUUID(fromState.getRequestingMembersList(),subtract(removedRequestingMemberUuids,addedByRequestApprovalUuids));\n  for (  DecryptedMember member : intersectByUUID(fromState.getMembersList(),removedMemberUuids)) {\n    builder.addDeleteMembers(member.getUuid());\n  }\n  for (  DecryptedMember member : addedMembers) {\n    builder.addNewMembers(member);\n  }\n  for (  DecryptedMember member : addedMembersByInvitation) {\n    builder.addPromotePendingMembers(member);\n  }\n  for (  DecryptedPendingMember uninvitedMember : uninvitedMembers) {\n    builder.addDeletePendingMembers(DecryptedPendingMemberRemoval.newBuilder().setUuid(uninvitedMember.getUuid()).setUuidCipherText(uninvitedMember.getUuidCipherText()));\n  }\n  for (  DecryptedPendingMember invitedMember : intersectPendingByUUID(toState.getPendingMembersList(),newPendingMemberUuids)) {\n    builder.addNewPendingMembers(invitedMember);\n  }\n  Set<ByteString> consistentMemberUuids=intersect(fromStateMemberUuids,toStateMemberUuids);\n  Set<DecryptedMember> changedMembers=intersectByUUID(subtract(toState.getMembersList(),fromState.getMembersList()),consistentMemberUuids);\n  Map<ByteString,DecryptedMember> membersUuidMap=uuidMap(fromState.getMembersList());\n  for (  DecryptedMember newState : changedMembers) {\n    DecryptedMember oldState=membersUuidMap.get(newState.getUuid());\n    if (oldState.getRole() != newState.getRole()) {\n      builder.addModifyMemberRoles(DecryptedModifyMemberRole.newBuilder().setUuid(newState.getUuid()).setRole(newState.getRole()));\n    }\n    if (!oldState.getProfileKey().equals(newState.getProfileKey())) {\n      builder.addModifiedProfileKeys(newState);\n    }\n  }\n  if (!fromState.getAccessControl().getAddFromInviteLink().equals(toState.getAccessControl().getAddFromInviteLink())) {\n    builder.setNewInviteLinkAccess(toState.getAccessControl().getAddFromInviteLink());\n  }\n  for (  DecryptedRequestingMember requestingMember : intersectRequestingByUUID(toState.getRequestingMembersList(),newRequestingMemberUuids)) {\n    builder.addNewRequestingMembers(requestingMember);\n  }\n  for (  DecryptedRequestingMember requestingMember : rejectedRequestMembers) {\n    builder.addDeleteRequestingMembers(requestingMember.getUuid());\n  }\n  for (  DecryptedMember member : addedMembersByRequestApproval) {\n    builder.addPromoteRequestingMembers(DecryptedApproveMember.newBuilder().setUuid(member.getUuid()).setRole(member.getRole()));\n  }\n  if (!fromState.getInviteLinkPassword().equals(toState.getInviteLinkPassword())) {\n    builder.setNewInviteLinkPassword(toState.getInviteLinkPassword());\n  }\n  return builder.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 714,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7048,
        "startLineNumber" : 24,
        "startColumnNumber" : 2,
        "endLineNumber" : 145,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Given a  {@param fromState} and a {@param toState} creates a {@link DecryptedGroupChange} that would take the {@param fromState} to the {@param toState}.\n */\npublic static DecryptedGroupChange reconstructGroupChange(DecryptedGroup fromState,DecryptedGroup toState){\n  DecryptedGroupChange.Builder builder=DecryptedGroupChange.newBuilder().setRevision(toState.getRevision());\n  if (!fromState.getTitle().equals(toState.getTitle())) {\n    builder.setNewTitle(DecryptedString.newBuilder().setValue(toState.getTitle()));\n  }\n  if (!fromState.getDescription().equals(toState.getDescription())) {\n    builder.setNewDescription(DecryptedString.newBuilder().setValue(toState.getDescription()));\n  }\n  if (!fromState.getIsAnnouncementGroup().equals(toState.getIsAnnouncementGroup())) {\n    builder.setNewIsAnnouncementGroup(toState.getIsAnnouncementGroup());\n  }\n  if (!fromState.getAvatar().equals(toState.getAvatar())) {\n    builder.setNewAvatar(DecryptedString.newBuilder().setValue(toState.getAvatar()));\n  }\n  if (!fromState.getDisappearingMessagesTimer().equals(toState.getDisappearingMessagesTimer())) {\n    builder.setNewTimer(toState.getDisappearingMessagesTimer());\n  }\n  if (!fromState.getAccessControl().getAttributes().equals(toState.getAccessControl().getAttributes())) {\n    builder.setNewAttributeAccess(toState.getAccessControl().getAttributes());\n  }\n  if (!fromState.getAccessControl().getMembers().equals(toState.getAccessControl().getMembers())) {\n    builder.setNewMemberAccess(toState.getAccessControl().getMembers());\n  }\n  Set<ByteString> fromStateMemberUuids=membersToSetOfUuids(fromState.getMembersList());\n  Set<ByteString> toStateMemberUuids=membersToSetOfUuids(toState.getMembersList());\n  Set<ByteString> pendingMembersListA=pendingMembersToSetOfUuids(fromState.getPendingMembersList());\n  Set<ByteString> pendingMembersListB=pendingMembersToSetOfUuids(toState.getPendingMembersList());\n  Set<ByteString> requestingMembersListA=requestingMembersToSetOfUuids(fromState.getRequestingMembersList());\n  Set<ByteString> requestingMembersListB=requestingMembersToSetOfUuids(toState.getRequestingMembersList());\n  Set<ByteString> removedPendingMemberUuids=subtract(pendingMembersListA,pendingMembersListB);\n  Set<ByteString> removedRequestingMemberUuids=subtract(requestingMembersListA,requestingMembersListB);\n  Set<ByteString> newPendingMemberUuids=subtract(pendingMembersListB,pendingMembersListA);\n  Set<ByteString> newRequestingMemberUuids=subtract(requestingMembersListB,requestingMembersListA);\n  Set<ByteString> removedMemberUuids=subtract(fromStateMemberUuids,toStateMemberUuids);\n  Set<ByteString> newMemberUuids=subtract(toStateMemberUuids,fromStateMemberUuids);\n  Set<ByteString> addedByInvitationUuids=intersect(newMemberUuids,removedPendingMemberUuids);\n  Set<ByteString> addedByRequestApprovalUuids=intersect(newMemberUuids,removedRequestingMemberUuids);\n  Set<DecryptedMember> addedMembersByInvitation=intersectByUUID(toState.getMembersList(),addedByInvitationUuids);\n  Set<DecryptedMember> addedMembersByRequestApproval=intersectByUUID(toState.getMembersList(),addedByRequestApprovalUuids);\n  Set<DecryptedMember> addedMembers=intersectByUUID(toState.getMembersList(),subtract(newMemberUuids,addedByInvitationUuids,addedByRequestApprovalUuids));\n  Set<DecryptedPendingMember> uninvitedMembers=intersectPendingByUUID(fromState.getPendingMembersList(),subtract(removedPendingMemberUuids,addedByInvitationUuids));\n  Set<DecryptedRequestingMember> rejectedRequestMembers=intersectRequestingByUUID(fromState.getRequestingMembersList(),subtract(removedRequestingMemberUuids,addedByRequestApprovalUuids));\n  for (  DecryptedMember member : intersectByUUID(fromState.getMembersList(),removedMemberUuids)) {\n    builder.addDeleteMembers(member.getUuid());\n  }\n  for (  DecryptedMember member : addedMembers) {\n    builder.addNewMembers(member);\n  }\n  for (  DecryptedMember member : addedMembersByInvitation) {\n    builder.addPromotePendingMembers(member);\n  }\n  for (  DecryptedPendingMember uninvitedMember : uninvitedMembers) {\n    builder.addDeletePendingMembers(DecryptedPendingMemberRemoval.newBuilder().setUuid(uninvitedMember.getUuid()).setUuidCipherText(uninvitedMember.getUuidCipherText()));\n  }\n  for (  DecryptedPendingMember invitedMember : intersectPendingByUUID(toState.getPendingMembersList(),newPendingMemberUuids)) {\n    builder.addNewPendingMembers(invitedMember);\n  }\n  Set<ByteString> consistentMemberUuids=intersect(fromStateMemberUuids,toStateMemberUuids);\n  Set<DecryptedMember> changedMembers=intersectByUUID(subtract(toState.getMembersList(),fromState.getMembersList()),consistentMemberUuids);\n  Map<ByteString,DecryptedMember> membersUuidMap=uuidMap(fromState.getMembersList());\n  for (  DecryptedMember newState : changedMembers) {\n    DecryptedMember oldState=membersUuidMap.get(newState.getUuid());\n    if (oldState.getRole() != newState.getRole()) {\n      builder.addModifyMemberRoles(DecryptedModifyMemberRole.newBuilder().setUuid(newState.getUuid()).setRole(newState.getRole()));\n    }\n    if (!oldState.getProfileKey().equals(newState.getProfileKey())) {\n      builder.addModifiedProfileKeys(newState);\n    }\n  }\n  if (!fromState.getAccessControl().getAddFromInviteLink().equals(toState.getAccessControl().getAddFromInviteLink())) {\n    builder.setNewInviteLinkAccess(toState.getAccessControl().getAddFromInviteLink());\n  }\n  for (  DecryptedRequestingMember requestingMember : intersectRequestingByUUID(toState.getRequestingMembersList(),newRequestingMemberUuids)) {\n    builder.addNewRequestingMembers(requestingMember);\n  }\n  for (  DecryptedRequestingMember requestingMember : rejectedRequestMembers) {\n    builder.addDeleteRequestingMembers(requestingMember.getUuid());\n  }\n  for (  DecryptedMember member : addedMembersByRequestApproval) {\n    builder.addPromoteRequestingMembers(DecryptedApproveMember.newBuilder().setUuid(member.getUuid()).setRole(member.getRole()));\n  }\n  if (!fromState.getInviteLinkPassword().equals(toState.getInviteLinkPassword())) {\n    builder.setNewInviteLinkPassword(toState.getInviteLinkPassword());\n  }\n  return builder.build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 729,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 92,
        "startColumnNumber" : 6,
        "endLineNumber" : 92,
        "endColumnNumber" : 47
      },
      "nodeContext" : "builder.addPromotePendingMembers(member);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "DecryptedGroupChange.Builder"
  }, {
    "nodeContext" : "builder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 96,
      "startColumnNumber" : 6,
      "endLineNumber" : 96,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 301,
        "startLineNumber" : 96,
        "startColumnNumber" : 6,
        "endLineNumber" : 98,
        "endColumnNumber" : 123
      },
      "nodeContext" : "builder.addDeletePendingMembers(DecryptedPendingMemberRemoval.newBuilder().setUuid(uninvitedMember.getUuid()).setUuidCipherText(uninvitedMember.getUuidCipherText()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 302,
        "startLineNumber" : 96,
        "startColumnNumber" : 6,
        "endLineNumber" : 98,
        "endColumnNumber" : 124
      },
      "nodeContext" : "builder.addDeletePendingMembers(DecryptedPendingMemberRemoval.newBuilder().setUuid(uninvitedMember.getUuid()).setUuidCipherText(uninvitedMember.getUuidCipherText()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 316,
        "startLineNumber" : 95,
        "startColumnNumber" : 68,
        "endLineNumber" : 99,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  builder.addDeletePendingMembers(DecryptedPendingMemberRemoval.newBuilder().setUuid(uninvitedMember.getUuid()).setUuidCipherText(uninvitedMember.getUuidCipherText()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 380,
        "startLineNumber" : 95,
        "startColumnNumber" : 4,
        "endLineNumber" : 99,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (DecryptedPendingMember uninvitedMember : uninvitedMembers) {\n  builder.addDeletePendingMembers(DecryptedPendingMemberRemoval.newBuilder().setUuid(uninvitedMember.getUuid()).setUuidCipherText(uninvitedMember.getUuidCipherText()));\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 24,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6770,
        "startLineNumber" : 27,
        "startColumnNumber" : 110,
        "endLineNumber" : 145,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  DecryptedGroupChange.Builder builder=DecryptedGroupChange.newBuilder().setRevision(toState.getRevision());\n  if (!fromState.getTitle().equals(toState.getTitle())) {\n    builder.setNewTitle(DecryptedString.newBuilder().setValue(toState.getTitle()));\n  }\n  if (!fromState.getDescription().equals(toState.getDescription())) {\n    builder.setNewDescription(DecryptedString.newBuilder().setValue(toState.getDescription()));\n  }\n  if (!fromState.getIsAnnouncementGroup().equals(toState.getIsAnnouncementGroup())) {\n    builder.setNewIsAnnouncementGroup(toState.getIsAnnouncementGroup());\n  }\n  if (!fromState.getAvatar().equals(toState.getAvatar())) {\n    builder.setNewAvatar(DecryptedString.newBuilder().setValue(toState.getAvatar()));\n  }\n  if (!fromState.getDisappearingMessagesTimer().equals(toState.getDisappearingMessagesTimer())) {\n    builder.setNewTimer(toState.getDisappearingMessagesTimer());\n  }\n  if (!fromState.getAccessControl().getAttributes().equals(toState.getAccessControl().getAttributes())) {\n    builder.setNewAttributeAccess(toState.getAccessControl().getAttributes());\n  }\n  if (!fromState.getAccessControl().getMembers().equals(toState.getAccessControl().getMembers())) {\n    builder.setNewMemberAccess(toState.getAccessControl().getMembers());\n  }\n  Set<ByteString> fromStateMemberUuids=membersToSetOfUuids(fromState.getMembersList());\n  Set<ByteString> toStateMemberUuids=membersToSetOfUuids(toState.getMembersList());\n  Set<ByteString> pendingMembersListA=pendingMembersToSetOfUuids(fromState.getPendingMembersList());\n  Set<ByteString> pendingMembersListB=pendingMembersToSetOfUuids(toState.getPendingMembersList());\n  Set<ByteString> requestingMembersListA=requestingMembersToSetOfUuids(fromState.getRequestingMembersList());\n  Set<ByteString> requestingMembersListB=requestingMembersToSetOfUuids(toState.getRequestingMembersList());\n  Set<ByteString> removedPendingMemberUuids=subtract(pendingMembersListA,pendingMembersListB);\n  Set<ByteString> removedRequestingMemberUuids=subtract(requestingMembersListA,requestingMembersListB);\n  Set<ByteString> newPendingMemberUuids=subtract(pendingMembersListB,pendingMembersListA);\n  Set<ByteString> newRequestingMemberUuids=subtract(requestingMembersListB,requestingMembersListA);\n  Set<ByteString> removedMemberUuids=subtract(fromStateMemberUuids,toStateMemberUuids);\n  Set<ByteString> newMemberUuids=subtract(toStateMemberUuids,fromStateMemberUuids);\n  Set<ByteString> addedByInvitationUuids=intersect(newMemberUuids,removedPendingMemberUuids);\n  Set<ByteString> addedByRequestApprovalUuids=intersect(newMemberUuids,removedRequestingMemberUuids);\n  Set<DecryptedMember> addedMembersByInvitation=intersectByUUID(toState.getMembersList(),addedByInvitationUuids);\n  Set<DecryptedMember> addedMembersByRequestApproval=intersectByUUID(toState.getMembersList(),addedByRequestApprovalUuids);\n  Set<DecryptedMember> addedMembers=intersectByUUID(toState.getMembersList(),subtract(newMemberUuids,addedByInvitationUuids,addedByRequestApprovalUuids));\n  Set<DecryptedPendingMember> uninvitedMembers=intersectPendingByUUID(fromState.getPendingMembersList(),subtract(removedPendingMemberUuids,addedByInvitationUuids));\n  Set<DecryptedRequestingMember> rejectedRequestMembers=intersectRequestingByUUID(fromState.getRequestingMembersList(),subtract(removedRequestingMemberUuids,addedByRequestApprovalUuids));\n  for (  DecryptedMember member : intersectByUUID(fromState.getMembersList(),removedMemberUuids)) {\n    builder.addDeleteMembers(member.getUuid());\n  }\n  for (  DecryptedMember member : addedMembers) {\n    builder.addNewMembers(member);\n  }\n  for (  DecryptedMember member : addedMembersByInvitation) {\n    builder.addPromotePendingMembers(member);\n  }\n  for (  DecryptedPendingMember uninvitedMember : uninvitedMembers) {\n    builder.addDeletePendingMembers(DecryptedPendingMemberRemoval.newBuilder().setUuid(uninvitedMember.getUuid()).setUuidCipherText(uninvitedMember.getUuidCipherText()));\n  }\n  for (  DecryptedPendingMember invitedMember : intersectPendingByUUID(toState.getPendingMembersList(),newPendingMemberUuids)) {\n    builder.addNewPendingMembers(invitedMember);\n  }\n  Set<ByteString> consistentMemberUuids=intersect(fromStateMemberUuids,toStateMemberUuids);\n  Set<DecryptedMember> changedMembers=intersectByUUID(subtract(toState.getMembersList(),fromState.getMembersList()),consistentMemberUuids);\n  Map<ByteString,DecryptedMember> membersUuidMap=uuidMap(fromState.getMembersList());\n  for (  DecryptedMember newState : changedMembers) {\n    DecryptedMember oldState=membersUuidMap.get(newState.getUuid());\n    if (oldState.getRole() != newState.getRole()) {\n      builder.addModifyMemberRoles(DecryptedModifyMemberRole.newBuilder().setUuid(newState.getUuid()).setRole(newState.getRole()));\n    }\n    if (!oldState.getProfileKey().equals(newState.getProfileKey())) {\n      builder.addModifiedProfileKeys(newState);\n    }\n  }\n  if (!fromState.getAccessControl().getAddFromInviteLink().equals(toState.getAccessControl().getAddFromInviteLink())) {\n    builder.setNewInviteLinkAccess(toState.getAccessControl().getAddFromInviteLink());\n  }\n  for (  DecryptedRequestingMember requestingMember : intersectRequestingByUUID(toState.getRequestingMembersList(),newRequestingMemberUuids)) {\n    builder.addNewRequestingMembers(requestingMember);\n  }\n  for (  DecryptedRequestingMember requestingMember : rejectedRequestMembers) {\n    builder.addDeleteRequestingMembers(requestingMember.getUuid());\n  }\n  for (  DecryptedMember member : addedMembersByRequestApproval) {\n    builder.addPromoteRequestingMembers(DecryptedApproveMember.newBuilder().setUuid(member.getUuid()).setRole(member.getRole()));\n  }\n  if (!fromState.getInviteLinkPassword().equals(toState.getInviteLinkPassword())) {\n    builder.setNewInviteLinkPassword(toState.getInviteLinkPassword());\n  }\n  return builder.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 714,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7048,
        "startLineNumber" : 24,
        "startColumnNumber" : 2,
        "endLineNumber" : 145,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Given a  {@param fromState} and a {@param toState} creates a {@link DecryptedGroupChange} that would take the {@param fromState} to the {@param toState}.\n */\npublic static DecryptedGroupChange reconstructGroupChange(DecryptedGroup fromState,DecryptedGroup toState){\n  DecryptedGroupChange.Builder builder=DecryptedGroupChange.newBuilder().setRevision(toState.getRevision());\n  if (!fromState.getTitle().equals(toState.getTitle())) {\n    builder.setNewTitle(DecryptedString.newBuilder().setValue(toState.getTitle()));\n  }\n  if (!fromState.getDescription().equals(toState.getDescription())) {\n    builder.setNewDescription(DecryptedString.newBuilder().setValue(toState.getDescription()));\n  }\n  if (!fromState.getIsAnnouncementGroup().equals(toState.getIsAnnouncementGroup())) {\n    builder.setNewIsAnnouncementGroup(toState.getIsAnnouncementGroup());\n  }\n  if (!fromState.getAvatar().equals(toState.getAvatar())) {\n    builder.setNewAvatar(DecryptedString.newBuilder().setValue(toState.getAvatar()));\n  }\n  if (!fromState.getDisappearingMessagesTimer().equals(toState.getDisappearingMessagesTimer())) {\n    builder.setNewTimer(toState.getDisappearingMessagesTimer());\n  }\n  if (!fromState.getAccessControl().getAttributes().equals(toState.getAccessControl().getAttributes())) {\n    builder.setNewAttributeAccess(toState.getAccessControl().getAttributes());\n  }\n  if (!fromState.getAccessControl().getMembers().equals(toState.getAccessControl().getMembers())) {\n    builder.setNewMemberAccess(toState.getAccessControl().getMembers());\n  }\n  Set<ByteString> fromStateMemberUuids=membersToSetOfUuids(fromState.getMembersList());\n  Set<ByteString> toStateMemberUuids=membersToSetOfUuids(toState.getMembersList());\n  Set<ByteString> pendingMembersListA=pendingMembersToSetOfUuids(fromState.getPendingMembersList());\n  Set<ByteString> pendingMembersListB=pendingMembersToSetOfUuids(toState.getPendingMembersList());\n  Set<ByteString> requestingMembersListA=requestingMembersToSetOfUuids(fromState.getRequestingMembersList());\n  Set<ByteString> requestingMembersListB=requestingMembersToSetOfUuids(toState.getRequestingMembersList());\n  Set<ByteString> removedPendingMemberUuids=subtract(pendingMembersListA,pendingMembersListB);\n  Set<ByteString> removedRequestingMemberUuids=subtract(requestingMembersListA,requestingMembersListB);\n  Set<ByteString> newPendingMemberUuids=subtract(pendingMembersListB,pendingMembersListA);\n  Set<ByteString> newRequestingMemberUuids=subtract(requestingMembersListB,requestingMembersListA);\n  Set<ByteString> removedMemberUuids=subtract(fromStateMemberUuids,toStateMemberUuids);\n  Set<ByteString> newMemberUuids=subtract(toStateMemberUuids,fromStateMemberUuids);\n  Set<ByteString> addedByInvitationUuids=intersect(newMemberUuids,removedPendingMemberUuids);\n  Set<ByteString> addedByRequestApprovalUuids=intersect(newMemberUuids,removedRequestingMemberUuids);\n  Set<DecryptedMember> addedMembersByInvitation=intersectByUUID(toState.getMembersList(),addedByInvitationUuids);\n  Set<DecryptedMember> addedMembersByRequestApproval=intersectByUUID(toState.getMembersList(),addedByRequestApprovalUuids);\n  Set<DecryptedMember> addedMembers=intersectByUUID(toState.getMembersList(),subtract(newMemberUuids,addedByInvitationUuids,addedByRequestApprovalUuids));\n  Set<DecryptedPendingMember> uninvitedMembers=intersectPendingByUUID(fromState.getPendingMembersList(),subtract(removedPendingMemberUuids,addedByInvitationUuids));\n  Set<DecryptedRequestingMember> rejectedRequestMembers=intersectRequestingByUUID(fromState.getRequestingMembersList(),subtract(removedRequestingMemberUuids,addedByRequestApprovalUuids));\n  for (  DecryptedMember member : intersectByUUID(fromState.getMembersList(),removedMemberUuids)) {\n    builder.addDeleteMembers(member.getUuid());\n  }\n  for (  DecryptedMember member : addedMembers) {\n    builder.addNewMembers(member);\n  }\n  for (  DecryptedMember member : addedMembersByInvitation) {\n    builder.addPromotePendingMembers(member);\n  }\n  for (  DecryptedPendingMember uninvitedMember : uninvitedMembers) {\n    builder.addDeletePendingMembers(DecryptedPendingMemberRemoval.newBuilder().setUuid(uninvitedMember.getUuid()).setUuidCipherText(uninvitedMember.getUuidCipherText()));\n  }\n  for (  DecryptedPendingMember invitedMember : intersectPendingByUUID(toState.getPendingMembersList(),newPendingMemberUuids)) {\n    builder.addNewPendingMembers(invitedMember);\n  }\n  Set<ByteString> consistentMemberUuids=intersect(fromStateMemberUuids,toStateMemberUuids);\n  Set<DecryptedMember> changedMembers=intersectByUUID(subtract(toState.getMembersList(),fromState.getMembersList()),consistentMemberUuids);\n  Map<ByteString,DecryptedMember> membersUuidMap=uuidMap(fromState.getMembersList());\n  for (  DecryptedMember newState : changedMembers) {\n    DecryptedMember oldState=membersUuidMap.get(newState.getUuid());\n    if (oldState.getRole() != newState.getRole()) {\n      builder.addModifyMemberRoles(DecryptedModifyMemberRole.newBuilder().setUuid(newState.getUuid()).setRole(newState.getRole()));\n    }\n    if (!oldState.getProfileKey().equals(newState.getProfileKey())) {\n      builder.addModifiedProfileKeys(newState);\n    }\n  }\n  if (!fromState.getAccessControl().getAddFromInviteLink().equals(toState.getAccessControl().getAddFromInviteLink())) {\n    builder.setNewInviteLinkAccess(toState.getAccessControl().getAddFromInviteLink());\n  }\n  for (  DecryptedRequestingMember requestingMember : intersectRequestingByUUID(toState.getRequestingMembersList(),newRequestingMemberUuids)) {\n    builder.addNewRequestingMembers(requestingMember);\n  }\n  for (  DecryptedRequestingMember requestingMember : rejectedRequestMembers) {\n    builder.addDeleteRequestingMembers(requestingMember.getUuid());\n  }\n  for (  DecryptedMember member : addedMembersByRequestApproval) {\n    builder.addPromoteRequestingMembers(DecryptedApproveMember.newBuilder().setUuid(member.getUuid()).setRole(member.getRole()));\n  }\n  if (!fromState.getInviteLinkPassword().equals(toState.getInviteLinkPassword())) {\n    builder.setNewInviteLinkPassword(toState.getInviteLinkPassword());\n  }\n  return builder.build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 729,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 301,
        "startLineNumber" : 96,
        "startColumnNumber" : 6,
        "endLineNumber" : 98,
        "endColumnNumber" : 123
      },
      "nodeContext" : "builder.addDeletePendingMembers(DecryptedPendingMemberRemoval.newBuilder().setUuid(uninvitedMember.getUuid()).setUuidCipherText(uninvitedMember.getUuidCipherText()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "DecryptedGroupChange.Builder"
  }, {
    "nodeContext" : "builder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 102,
      "startColumnNumber" : 6,
      "endLineNumber" : 102,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 102,
        "startColumnNumber" : 6,
        "endLineNumber" : 102,
        "endColumnNumber" : 49
      },
      "nodeContext" : "builder.addNewPendingMembers(invitedMember)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 102,
        "startColumnNumber" : 6,
        "endLineNumber" : 102,
        "endColumnNumber" : 50
      },
      "nodeContext" : "builder.addNewPendingMembers(invitedMember);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 101,
        "startColumnNumber" : 128,
        "endLineNumber" : 103,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  builder.addNewPendingMembers(invitedMember);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 182,
        "startLineNumber" : 101,
        "startColumnNumber" : 4,
        "endLineNumber" : 103,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (DecryptedPendingMember invitedMember : intersectPendingByUUID(toState.getPendingMembersList(),newPendingMemberUuids)) {\n  builder.addNewPendingMembers(invitedMember);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6770,
        "startLineNumber" : 27,
        "startColumnNumber" : 110,
        "endLineNumber" : 145,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  DecryptedGroupChange.Builder builder=DecryptedGroupChange.newBuilder().setRevision(toState.getRevision());\n  if (!fromState.getTitle().equals(toState.getTitle())) {\n    builder.setNewTitle(DecryptedString.newBuilder().setValue(toState.getTitle()));\n  }\n  if (!fromState.getDescription().equals(toState.getDescription())) {\n    builder.setNewDescription(DecryptedString.newBuilder().setValue(toState.getDescription()));\n  }\n  if (!fromState.getIsAnnouncementGroup().equals(toState.getIsAnnouncementGroup())) {\n    builder.setNewIsAnnouncementGroup(toState.getIsAnnouncementGroup());\n  }\n  if (!fromState.getAvatar().equals(toState.getAvatar())) {\n    builder.setNewAvatar(DecryptedString.newBuilder().setValue(toState.getAvatar()));\n  }\n  if (!fromState.getDisappearingMessagesTimer().equals(toState.getDisappearingMessagesTimer())) {\n    builder.setNewTimer(toState.getDisappearingMessagesTimer());\n  }\n  if (!fromState.getAccessControl().getAttributes().equals(toState.getAccessControl().getAttributes())) {\n    builder.setNewAttributeAccess(toState.getAccessControl().getAttributes());\n  }\n  if (!fromState.getAccessControl().getMembers().equals(toState.getAccessControl().getMembers())) {\n    builder.setNewMemberAccess(toState.getAccessControl().getMembers());\n  }\n  Set<ByteString> fromStateMemberUuids=membersToSetOfUuids(fromState.getMembersList());\n  Set<ByteString> toStateMemberUuids=membersToSetOfUuids(toState.getMembersList());\n  Set<ByteString> pendingMembersListA=pendingMembersToSetOfUuids(fromState.getPendingMembersList());\n  Set<ByteString> pendingMembersListB=pendingMembersToSetOfUuids(toState.getPendingMembersList());\n  Set<ByteString> requestingMembersListA=requestingMembersToSetOfUuids(fromState.getRequestingMembersList());\n  Set<ByteString> requestingMembersListB=requestingMembersToSetOfUuids(toState.getRequestingMembersList());\n  Set<ByteString> removedPendingMemberUuids=subtract(pendingMembersListA,pendingMembersListB);\n  Set<ByteString> removedRequestingMemberUuids=subtract(requestingMembersListA,requestingMembersListB);\n  Set<ByteString> newPendingMemberUuids=subtract(pendingMembersListB,pendingMembersListA);\n  Set<ByteString> newRequestingMemberUuids=subtract(requestingMembersListB,requestingMembersListA);\n  Set<ByteString> removedMemberUuids=subtract(fromStateMemberUuids,toStateMemberUuids);\n  Set<ByteString> newMemberUuids=subtract(toStateMemberUuids,fromStateMemberUuids);\n  Set<ByteString> addedByInvitationUuids=intersect(newMemberUuids,removedPendingMemberUuids);\n  Set<ByteString> addedByRequestApprovalUuids=intersect(newMemberUuids,removedRequestingMemberUuids);\n  Set<DecryptedMember> addedMembersByInvitation=intersectByUUID(toState.getMembersList(),addedByInvitationUuids);\n  Set<DecryptedMember> addedMembersByRequestApproval=intersectByUUID(toState.getMembersList(),addedByRequestApprovalUuids);\n  Set<DecryptedMember> addedMembers=intersectByUUID(toState.getMembersList(),subtract(newMemberUuids,addedByInvitationUuids,addedByRequestApprovalUuids));\n  Set<DecryptedPendingMember> uninvitedMembers=intersectPendingByUUID(fromState.getPendingMembersList(),subtract(removedPendingMemberUuids,addedByInvitationUuids));\n  Set<DecryptedRequestingMember> rejectedRequestMembers=intersectRequestingByUUID(fromState.getRequestingMembersList(),subtract(removedRequestingMemberUuids,addedByRequestApprovalUuids));\n  for (  DecryptedMember member : intersectByUUID(fromState.getMembersList(),removedMemberUuids)) {\n    builder.addDeleteMembers(member.getUuid());\n  }\n  for (  DecryptedMember member : addedMembers) {\n    builder.addNewMembers(member);\n  }\n  for (  DecryptedMember member : addedMembersByInvitation) {\n    builder.addPromotePendingMembers(member);\n  }\n  for (  DecryptedPendingMember uninvitedMember : uninvitedMembers) {\n    builder.addDeletePendingMembers(DecryptedPendingMemberRemoval.newBuilder().setUuid(uninvitedMember.getUuid()).setUuidCipherText(uninvitedMember.getUuidCipherText()));\n  }\n  for (  DecryptedPendingMember invitedMember : intersectPendingByUUID(toState.getPendingMembersList(),newPendingMemberUuids)) {\n    builder.addNewPendingMembers(invitedMember);\n  }\n  Set<ByteString> consistentMemberUuids=intersect(fromStateMemberUuids,toStateMemberUuids);\n  Set<DecryptedMember> changedMembers=intersectByUUID(subtract(toState.getMembersList(),fromState.getMembersList()),consistentMemberUuids);\n  Map<ByteString,DecryptedMember> membersUuidMap=uuidMap(fromState.getMembersList());\n  for (  DecryptedMember newState : changedMembers) {\n    DecryptedMember oldState=membersUuidMap.get(newState.getUuid());\n    if (oldState.getRole() != newState.getRole()) {\n      builder.addModifyMemberRoles(DecryptedModifyMemberRole.newBuilder().setUuid(newState.getUuid()).setRole(newState.getRole()));\n    }\n    if (!oldState.getProfileKey().equals(newState.getProfileKey())) {\n      builder.addModifiedProfileKeys(newState);\n    }\n  }\n  if (!fromState.getAccessControl().getAddFromInviteLink().equals(toState.getAccessControl().getAddFromInviteLink())) {\n    builder.setNewInviteLinkAccess(toState.getAccessControl().getAddFromInviteLink());\n  }\n  for (  DecryptedRequestingMember requestingMember : intersectRequestingByUUID(toState.getRequestingMembersList(),newRequestingMemberUuids)) {\n    builder.addNewRequestingMembers(requestingMember);\n  }\n  for (  DecryptedRequestingMember requestingMember : rejectedRequestMembers) {\n    builder.addDeleteRequestingMembers(requestingMember.getUuid());\n  }\n  for (  DecryptedMember member : addedMembersByRequestApproval) {\n    builder.addPromoteRequestingMembers(DecryptedApproveMember.newBuilder().setUuid(member.getUuid()).setRole(member.getRole()));\n  }\n  if (!fromState.getInviteLinkPassword().equals(toState.getInviteLinkPassword())) {\n    builder.setNewInviteLinkPassword(toState.getInviteLinkPassword());\n  }\n  return builder.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 714,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7048,
        "startLineNumber" : 24,
        "startColumnNumber" : 2,
        "endLineNumber" : 145,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Given a  {@param fromState} and a {@param toState} creates a {@link DecryptedGroupChange} that would take the {@param fromState} to the {@param toState}.\n */\npublic static DecryptedGroupChange reconstructGroupChange(DecryptedGroup fromState,DecryptedGroup toState){\n  DecryptedGroupChange.Builder builder=DecryptedGroupChange.newBuilder().setRevision(toState.getRevision());\n  if (!fromState.getTitle().equals(toState.getTitle())) {\n    builder.setNewTitle(DecryptedString.newBuilder().setValue(toState.getTitle()));\n  }\n  if (!fromState.getDescription().equals(toState.getDescription())) {\n    builder.setNewDescription(DecryptedString.newBuilder().setValue(toState.getDescription()));\n  }\n  if (!fromState.getIsAnnouncementGroup().equals(toState.getIsAnnouncementGroup())) {\n    builder.setNewIsAnnouncementGroup(toState.getIsAnnouncementGroup());\n  }\n  if (!fromState.getAvatar().equals(toState.getAvatar())) {\n    builder.setNewAvatar(DecryptedString.newBuilder().setValue(toState.getAvatar()));\n  }\n  if (!fromState.getDisappearingMessagesTimer().equals(toState.getDisappearingMessagesTimer())) {\n    builder.setNewTimer(toState.getDisappearingMessagesTimer());\n  }\n  if (!fromState.getAccessControl().getAttributes().equals(toState.getAccessControl().getAttributes())) {\n    builder.setNewAttributeAccess(toState.getAccessControl().getAttributes());\n  }\n  if (!fromState.getAccessControl().getMembers().equals(toState.getAccessControl().getMembers())) {\n    builder.setNewMemberAccess(toState.getAccessControl().getMembers());\n  }\n  Set<ByteString> fromStateMemberUuids=membersToSetOfUuids(fromState.getMembersList());\n  Set<ByteString> toStateMemberUuids=membersToSetOfUuids(toState.getMembersList());\n  Set<ByteString> pendingMembersListA=pendingMembersToSetOfUuids(fromState.getPendingMembersList());\n  Set<ByteString> pendingMembersListB=pendingMembersToSetOfUuids(toState.getPendingMembersList());\n  Set<ByteString> requestingMembersListA=requestingMembersToSetOfUuids(fromState.getRequestingMembersList());\n  Set<ByteString> requestingMembersListB=requestingMembersToSetOfUuids(toState.getRequestingMembersList());\n  Set<ByteString> removedPendingMemberUuids=subtract(pendingMembersListA,pendingMembersListB);\n  Set<ByteString> removedRequestingMemberUuids=subtract(requestingMembersListA,requestingMembersListB);\n  Set<ByteString> newPendingMemberUuids=subtract(pendingMembersListB,pendingMembersListA);\n  Set<ByteString> newRequestingMemberUuids=subtract(requestingMembersListB,requestingMembersListA);\n  Set<ByteString> removedMemberUuids=subtract(fromStateMemberUuids,toStateMemberUuids);\n  Set<ByteString> newMemberUuids=subtract(toStateMemberUuids,fromStateMemberUuids);\n  Set<ByteString> addedByInvitationUuids=intersect(newMemberUuids,removedPendingMemberUuids);\n  Set<ByteString> addedByRequestApprovalUuids=intersect(newMemberUuids,removedRequestingMemberUuids);\n  Set<DecryptedMember> addedMembersByInvitation=intersectByUUID(toState.getMembersList(),addedByInvitationUuids);\n  Set<DecryptedMember> addedMembersByRequestApproval=intersectByUUID(toState.getMembersList(),addedByRequestApprovalUuids);\n  Set<DecryptedMember> addedMembers=intersectByUUID(toState.getMembersList(),subtract(newMemberUuids,addedByInvitationUuids,addedByRequestApprovalUuids));\n  Set<DecryptedPendingMember> uninvitedMembers=intersectPendingByUUID(fromState.getPendingMembersList(),subtract(removedPendingMemberUuids,addedByInvitationUuids));\n  Set<DecryptedRequestingMember> rejectedRequestMembers=intersectRequestingByUUID(fromState.getRequestingMembersList(),subtract(removedRequestingMemberUuids,addedByRequestApprovalUuids));\n  for (  DecryptedMember member : intersectByUUID(fromState.getMembersList(),removedMemberUuids)) {\n    builder.addDeleteMembers(member.getUuid());\n  }\n  for (  DecryptedMember member : addedMembers) {\n    builder.addNewMembers(member);\n  }\n  for (  DecryptedMember member : addedMembersByInvitation) {\n    builder.addPromotePendingMembers(member);\n  }\n  for (  DecryptedPendingMember uninvitedMember : uninvitedMembers) {\n    builder.addDeletePendingMembers(DecryptedPendingMemberRemoval.newBuilder().setUuid(uninvitedMember.getUuid()).setUuidCipherText(uninvitedMember.getUuidCipherText()));\n  }\n  for (  DecryptedPendingMember invitedMember : intersectPendingByUUID(toState.getPendingMembersList(),newPendingMemberUuids)) {\n    builder.addNewPendingMembers(invitedMember);\n  }\n  Set<ByteString> consistentMemberUuids=intersect(fromStateMemberUuids,toStateMemberUuids);\n  Set<DecryptedMember> changedMembers=intersectByUUID(subtract(toState.getMembersList(),fromState.getMembersList()),consistentMemberUuids);\n  Map<ByteString,DecryptedMember> membersUuidMap=uuidMap(fromState.getMembersList());\n  for (  DecryptedMember newState : changedMembers) {\n    DecryptedMember oldState=membersUuidMap.get(newState.getUuid());\n    if (oldState.getRole() != newState.getRole()) {\n      builder.addModifyMemberRoles(DecryptedModifyMemberRole.newBuilder().setUuid(newState.getUuid()).setRole(newState.getRole()));\n    }\n    if (!oldState.getProfileKey().equals(newState.getProfileKey())) {\n      builder.addModifiedProfileKeys(newState);\n    }\n  }\n  if (!fromState.getAccessControl().getAddFromInviteLink().equals(toState.getAccessControl().getAddFromInviteLink())) {\n    builder.setNewInviteLinkAccess(toState.getAccessControl().getAddFromInviteLink());\n  }\n  for (  DecryptedRequestingMember requestingMember : intersectRequestingByUUID(toState.getRequestingMembersList(),newRequestingMemberUuids)) {\n    builder.addNewRequestingMembers(requestingMember);\n  }\n  for (  DecryptedRequestingMember requestingMember : rejectedRequestMembers) {\n    builder.addDeleteRequestingMembers(requestingMember.getUuid());\n  }\n  for (  DecryptedMember member : addedMembersByRequestApproval) {\n    builder.addPromoteRequestingMembers(DecryptedApproveMember.newBuilder().setUuid(member.getUuid()).setRole(member.getRole()));\n  }\n  if (!fromState.getInviteLinkPassword().equals(toState.getInviteLinkPassword())) {\n    builder.setNewInviteLinkPassword(toState.getInviteLinkPassword());\n  }\n  return builder.build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 729,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 102,
        "startColumnNumber" : 6,
        "endLineNumber" : 102,
        "endColumnNumber" : 50
      },
      "nodeContext" : "builder.addNewPendingMembers(invitedMember);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "DecryptedGroupChange.Builder"
  }, {
    "nodeContext" : "builder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 112,
      "startColumnNumber" : 8,
      "endLineNumber" : 112,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 250,
        "startLineNumber" : 112,
        "startColumnNumber" : 8,
        "endLineNumber" : 114,
        "endColumnNumber" : 91
      },
      "nodeContext" : "builder.addModifyMemberRoles(DecryptedModifyMemberRole.newBuilder().setUuid(newState.getUuid()).setRole(newState.getRole()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 251,
        "startLineNumber" : 112,
        "startColumnNumber" : 8,
        "endLineNumber" : 114,
        "endColumnNumber" : 92
      },
      "nodeContext" : "builder.addModifyMemberRoles(DecryptedModifyMemberRole.newBuilder().setUuid(newState.getUuid()).setRole(newState.getRole()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 269,
        "startLineNumber" : 111,
        "startColumnNumber" : 52,
        "endLineNumber" : 115,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  builder.addModifyMemberRoles(DecryptedModifyMemberRole.newBuilder().setUuid(newState.getUuid()).setRole(newState.getRole()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 315,
        "startLineNumber" : 111,
        "startColumnNumber" : 6,
        "endLineNumber" : 115,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (oldState.getRole() != newState.getRole()) {\n  builder.addModifyMemberRoles(DecryptedModifyMemberRole.newBuilder().setUuid(newState.getUuid()).setRole(newState.getRole()));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 26,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 533,
        "startLineNumber" : 109,
        "startColumnNumber" : 52,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DecryptedMember oldState=membersUuidMap.get(newState.getUuid());\n  if (oldState.getRole() != newState.getRole()) {\n    builder.addModifyMemberRoles(DecryptedModifyMemberRole.newBuilder().setUuid(newState.getUuid()).setRole(newState.getRole()));\n  }\n  if (!oldState.getProfileKey().equals(newState.getProfileKey())) {\n    builder.addModifiedProfileKeys(newState);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 54,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 581,
        "startLineNumber" : 109,
        "startColumnNumber" : 4,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (DecryptedMember newState : changedMembers) {\n  DecryptedMember oldState=membersUuidMap.get(newState.getUuid());\n  if (oldState.getRole() != newState.getRole()) {\n    builder.addModifyMemberRoles(DecryptedModifyMemberRole.newBuilder().setUuid(newState.getUuid()).setRole(newState.getRole()));\n  }\n  if (!oldState.getProfileKey().equals(newState.getProfileKey())) {\n    builder.addModifiedProfileKeys(newState);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 60,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6770,
        "startLineNumber" : 27,
        "startColumnNumber" : 110,
        "endLineNumber" : 145,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  DecryptedGroupChange.Builder builder=DecryptedGroupChange.newBuilder().setRevision(toState.getRevision());\n  if (!fromState.getTitle().equals(toState.getTitle())) {\n    builder.setNewTitle(DecryptedString.newBuilder().setValue(toState.getTitle()));\n  }\n  if (!fromState.getDescription().equals(toState.getDescription())) {\n    builder.setNewDescription(DecryptedString.newBuilder().setValue(toState.getDescription()));\n  }\n  if (!fromState.getIsAnnouncementGroup().equals(toState.getIsAnnouncementGroup())) {\n    builder.setNewIsAnnouncementGroup(toState.getIsAnnouncementGroup());\n  }\n  if (!fromState.getAvatar().equals(toState.getAvatar())) {\n    builder.setNewAvatar(DecryptedString.newBuilder().setValue(toState.getAvatar()));\n  }\n  if (!fromState.getDisappearingMessagesTimer().equals(toState.getDisappearingMessagesTimer())) {\n    builder.setNewTimer(toState.getDisappearingMessagesTimer());\n  }\n  if (!fromState.getAccessControl().getAttributes().equals(toState.getAccessControl().getAttributes())) {\n    builder.setNewAttributeAccess(toState.getAccessControl().getAttributes());\n  }\n  if (!fromState.getAccessControl().getMembers().equals(toState.getAccessControl().getMembers())) {\n    builder.setNewMemberAccess(toState.getAccessControl().getMembers());\n  }\n  Set<ByteString> fromStateMemberUuids=membersToSetOfUuids(fromState.getMembersList());\n  Set<ByteString> toStateMemberUuids=membersToSetOfUuids(toState.getMembersList());\n  Set<ByteString> pendingMembersListA=pendingMembersToSetOfUuids(fromState.getPendingMembersList());\n  Set<ByteString> pendingMembersListB=pendingMembersToSetOfUuids(toState.getPendingMembersList());\n  Set<ByteString> requestingMembersListA=requestingMembersToSetOfUuids(fromState.getRequestingMembersList());\n  Set<ByteString> requestingMembersListB=requestingMembersToSetOfUuids(toState.getRequestingMembersList());\n  Set<ByteString> removedPendingMemberUuids=subtract(pendingMembersListA,pendingMembersListB);\n  Set<ByteString> removedRequestingMemberUuids=subtract(requestingMembersListA,requestingMembersListB);\n  Set<ByteString> newPendingMemberUuids=subtract(pendingMembersListB,pendingMembersListA);\n  Set<ByteString> newRequestingMemberUuids=subtract(requestingMembersListB,requestingMembersListA);\n  Set<ByteString> removedMemberUuids=subtract(fromStateMemberUuids,toStateMemberUuids);\n  Set<ByteString> newMemberUuids=subtract(toStateMemberUuids,fromStateMemberUuids);\n  Set<ByteString> addedByInvitationUuids=intersect(newMemberUuids,removedPendingMemberUuids);\n  Set<ByteString> addedByRequestApprovalUuids=intersect(newMemberUuids,removedRequestingMemberUuids);\n  Set<DecryptedMember> addedMembersByInvitation=intersectByUUID(toState.getMembersList(),addedByInvitationUuids);\n  Set<DecryptedMember> addedMembersByRequestApproval=intersectByUUID(toState.getMembersList(),addedByRequestApprovalUuids);\n  Set<DecryptedMember> addedMembers=intersectByUUID(toState.getMembersList(),subtract(newMemberUuids,addedByInvitationUuids,addedByRequestApprovalUuids));\n  Set<DecryptedPendingMember> uninvitedMembers=intersectPendingByUUID(fromState.getPendingMembersList(),subtract(removedPendingMemberUuids,addedByInvitationUuids));\n  Set<DecryptedRequestingMember> rejectedRequestMembers=intersectRequestingByUUID(fromState.getRequestingMembersList(),subtract(removedRequestingMemberUuids,addedByRequestApprovalUuids));\n  for (  DecryptedMember member : intersectByUUID(fromState.getMembersList(),removedMemberUuids)) {\n    builder.addDeleteMembers(member.getUuid());\n  }\n  for (  DecryptedMember member : addedMembers) {\n    builder.addNewMembers(member);\n  }\n  for (  DecryptedMember member : addedMembersByInvitation) {\n    builder.addPromotePendingMembers(member);\n  }\n  for (  DecryptedPendingMember uninvitedMember : uninvitedMembers) {\n    builder.addDeletePendingMembers(DecryptedPendingMemberRemoval.newBuilder().setUuid(uninvitedMember.getUuid()).setUuidCipherText(uninvitedMember.getUuidCipherText()));\n  }\n  for (  DecryptedPendingMember invitedMember : intersectPendingByUUID(toState.getPendingMembersList(),newPendingMemberUuids)) {\n    builder.addNewPendingMembers(invitedMember);\n  }\n  Set<ByteString> consistentMemberUuids=intersect(fromStateMemberUuids,toStateMemberUuids);\n  Set<DecryptedMember> changedMembers=intersectByUUID(subtract(toState.getMembersList(),fromState.getMembersList()),consistentMemberUuids);\n  Map<ByteString,DecryptedMember> membersUuidMap=uuidMap(fromState.getMembersList());\n  for (  DecryptedMember newState : changedMembers) {\n    DecryptedMember oldState=membersUuidMap.get(newState.getUuid());\n    if (oldState.getRole() != newState.getRole()) {\n      builder.addModifyMemberRoles(DecryptedModifyMemberRole.newBuilder().setUuid(newState.getUuid()).setRole(newState.getRole()));\n    }\n    if (!oldState.getProfileKey().equals(newState.getProfileKey())) {\n      builder.addModifiedProfileKeys(newState);\n    }\n  }\n  if (!fromState.getAccessControl().getAddFromInviteLink().equals(toState.getAccessControl().getAddFromInviteLink())) {\n    builder.setNewInviteLinkAccess(toState.getAccessControl().getAddFromInviteLink());\n  }\n  for (  DecryptedRequestingMember requestingMember : intersectRequestingByUUID(toState.getRequestingMembersList(),newRequestingMemberUuids)) {\n    builder.addNewRequestingMembers(requestingMember);\n  }\n  for (  DecryptedRequestingMember requestingMember : rejectedRequestMembers) {\n    builder.addDeleteRequestingMembers(requestingMember.getUuid());\n  }\n  for (  DecryptedMember member : addedMembersByRequestApproval) {\n    builder.addPromoteRequestingMembers(DecryptedApproveMember.newBuilder().setUuid(member.getUuid()).setRole(member.getRole()));\n  }\n  if (!fromState.getInviteLinkPassword().equals(toState.getInviteLinkPassword())) {\n    builder.setNewInviteLinkPassword(toState.getInviteLinkPassword());\n  }\n  return builder.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 714,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7048,
        "startLineNumber" : 24,
        "startColumnNumber" : 2,
        "endLineNumber" : 145,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Given a  {@param fromState} and a {@param toState} creates a {@link DecryptedGroupChange} that would take the {@param fromState} to the {@param toState}.\n */\npublic static DecryptedGroupChange reconstructGroupChange(DecryptedGroup fromState,DecryptedGroup toState){\n  DecryptedGroupChange.Builder builder=DecryptedGroupChange.newBuilder().setRevision(toState.getRevision());\n  if (!fromState.getTitle().equals(toState.getTitle())) {\n    builder.setNewTitle(DecryptedString.newBuilder().setValue(toState.getTitle()));\n  }\n  if (!fromState.getDescription().equals(toState.getDescription())) {\n    builder.setNewDescription(DecryptedString.newBuilder().setValue(toState.getDescription()));\n  }\n  if (!fromState.getIsAnnouncementGroup().equals(toState.getIsAnnouncementGroup())) {\n    builder.setNewIsAnnouncementGroup(toState.getIsAnnouncementGroup());\n  }\n  if (!fromState.getAvatar().equals(toState.getAvatar())) {\n    builder.setNewAvatar(DecryptedString.newBuilder().setValue(toState.getAvatar()));\n  }\n  if (!fromState.getDisappearingMessagesTimer().equals(toState.getDisappearingMessagesTimer())) {\n    builder.setNewTimer(toState.getDisappearingMessagesTimer());\n  }\n  if (!fromState.getAccessControl().getAttributes().equals(toState.getAccessControl().getAttributes())) {\n    builder.setNewAttributeAccess(toState.getAccessControl().getAttributes());\n  }\n  if (!fromState.getAccessControl().getMembers().equals(toState.getAccessControl().getMembers())) {\n    builder.setNewMemberAccess(toState.getAccessControl().getMembers());\n  }\n  Set<ByteString> fromStateMemberUuids=membersToSetOfUuids(fromState.getMembersList());\n  Set<ByteString> toStateMemberUuids=membersToSetOfUuids(toState.getMembersList());\n  Set<ByteString> pendingMembersListA=pendingMembersToSetOfUuids(fromState.getPendingMembersList());\n  Set<ByteString> pendingMembersListB=pendingMembersToSetOfUuids(toState.getPendingMembersList());\n  Set<ByteString> requestingMembersListA=requestingMembersToSetOfUuids(fromState.getRequestingMembersList());\n  Set<ByteString> requestingMembersListB=requestingMembersToSetOfUuids(toState.getRequestingMembersList());\n  Set<ByteString> removedPendingMemberUuids=subtract(pendingMembersListA,pendingMembersListB);\n  Set<ByteString> removedRequestingMemberUuids=subtract(requestingMembersListA,requestingMembersListB);\n  Set<ByteString> newPendingMemberUuids=subtract(pendingMembersListB,pendingMembersListA);\n  Set<ByteString> newRequestingMemberUuids=subtract(requestingMembersListB,requestingMembersListA);\n  Set<ByteString> removedMemberUuids=subtract(fromStateMemberUuids,toStateMemberUuids);\n  Set<ByteString> newMemberUuids=subtract(toStateMemberUuids,fromStateMemberUuids);\n  Set<ByteString> addedByInvitationUuids=intersect(newMemberUuids,removedPendingMemberUuids);\n  Set<ByteString> addedByRequestApprovalUuids=intersect(newMemberUuids,removedRequestingMemberUuids);\n  Set<DecryptedMember> addedMembersByInvitation=intersectByUUID(toState.getMembersList(),addedByInvitationUuids);\n  Set<DecryptedMember> addedMembersByRequestApproval=intersectByUUID(toState.getMembersList(),addedByRequestApprovalUuids);\n  Set<DecryptedMember> addedMembers=intersectByUUID(toState.getMembersList(),subtract(newMemberUuids,addedByInvitationUuids,addedByRequestApprovalUuids));\n  Set<DecryptedPendingMember> uninvitedMembers=intersectPendingByUUID(fromState.getPendingMembersList(),subtract(removedPendingMemberUuids,addedByInvitationUuids));\n  Set<DecryptedRequestingMember> rejectedRequestMembers=intersectRequestingByUUID(fromState.getRequestingMembersList(),subtract(removedRequestingMemberUuids,addedByRequestApprovalUuids));\n  for (  DecryptedMember member : intersectByUUID(fromState.getMembersList(),removedMemberUuids)) {\n    builder.addDeleteMembers(member.getUuid());\n  }\n  for (  DecryptedMember member : addedMembers) {\n    builder.addNewMembers(member);\n  }\n  for (  DecryptedMember member : addedMembersByInvitation) {\n    builder.addPromotePendingMembers(member);\n  }\n  for (  DecryptedPendingMember uninvitedMember : uninvitedMembers) {\n    builder.addDeletePendingMembers(DecryptedPendingMemberRemoval.newBuilder().setUuid(uninvitedMember.getUuid()).setUuidCipherText(uninvitedMember.getUuidCipherText()));\n  }\n  for (  DecryptedPendingMember invitedMember : intersectPendingByUUID(toState.getPendingMembersList(),newPendingMemberUuids)) {\n    builder.addNewPendingMembers(invitedMember);\n  }\n  Set<ByteString> consistentMemberUuids=intersect(fromStateMemberUuids,toStateMemberUuids);\n  Set<DecryptedMember> changedMembers=intersectByUUID(subtract(toState.getMembersList(),fromState.getMembersList()),consistentMemberUuids);\n  Map<ByteString,DecryptedMember> membersUuidMap=uuidMap(fromState.getMembersList());\n  for (  DecryptedMember newState : changedMembers) {\n    DecryptedMember oldState=membersUuidMap.get(newState.getUuid());\n    if (oldState.getRole() != newState.getRole()) {\n      builder.addModifyMemberRoles(DecryptedModifyMemberRole.newBuilder().setUuid(newState.getUuid()).setRole(newState.getRole()));\n    }\n    if (!oldState.getProfileKey().equals(newState.getProfileKey())) {\n      builder.addModifiedProfileKeys(newState);\n    }\n  }\n  if (!fromState.getAccessControl().getAddFromInviteLink().equals(toState.getAccessControl().getAddFromInviteLink())) {\n    builder.setNewInviteLinkAccess(toState.getAccessControl().getAddFromInviteLink());\n  }\n  for (  DecryptedRequestingMember requestingMember : intersectRequestingByUUID(toState.getRequestingMembersList(),newRequestingMemberUuids)) {\n    builder.addNewRequestingMembers(requestingMember);\n  }\n  for (  DecryptedRequestingMember requestingMember : rejectedRequestMembers) {\n    builder.addDeleteRequestingMembers(requestingMember.getUuid());\n  }\n  for (  DecryptedMember member : addedMembersByRequestApproval) {\n    builder.addPromoteRequestingMembers(DecryptedApproveMember.newBuilder().setUuid(member.getUuid()).setRole(member.getRole()));\n  }\n  if (!fromState.getInviteLinkPassword().equals(toState.getInviteLinkPassword())) {\n    builder.setNewInviteLinkPassword(toState.getInviteLinkPassword());\n  }\n  return builder.build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 729,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 250,
        "startLineNumber" : 112,
        "startColumnNumber" : 8,
        "endLineNumber" : 114,
        "endColumnNumber" : 91
      },
      "nodeContext" : "builder.addModifyMemberRoles(DecryptedModifyMemberRole.newBuilder().setUuid(newState.getUuid()).setRole(newState.getRole()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "DecryptedGroupChange.Builder"
  }, {
    "nodeContext" : "builder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 118,
      "startColumnNumber" : 8,
      "endLineNumber" : 118,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 118,
        "startColumnNumber" : 8,
        "endLineNumber" : 118,
        "endColumnNumber" : 48
      },
      "nodeContext" : "builder.addModifiedProfileKeys(newState)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 118,
        "startColumnNumber" : 8,
        "endLineNumber" : 118,
        "endColumnNumber" : 49
      },
      "nodeContext" : "builder.addModifiedProfileKeys(newState);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 117,
        "startColumnNumber" : 70,
        "endLineNumber" : 119,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  builder.addModifiedProfileKeys(newState);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 123,
        "startLineNumber" : 117,
        "startColumnNumber" : 6,
        "endLineNumber" : 119,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (!oldState.getProfileKey().equals(newState.getProfileKey())) {\n  builder.addModifiedProfileKeys(newState);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 533,
        "startLineNumber" : 109,
        "startColumnNumber" : 52,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  DecryptedMember oldState=membersUuidMap.get(newState.getUuid());\n  if (oldState.getRole() != newState.getRole()) {\n    builder.addModifyMemberRoles(DecryptedModifyMemberRole.newBuilder().setUuid(newState.getUuid()).setRole(newState.getRole()));\n  }\n  if (!oldState.getProfileKey().equals(newState.getProfileKey())) {\n    builder.addModifiedProfileKeys(newState);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 54,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 581,
        "startLineNumber" : 109,
        "startColumnNumber" : 4,
        "endLineNumber" : 120,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (DecryptedMember newState : changedMembers) {\n  DecryptedMember oldState=membersUuidMap.get(newState.getUuid());\n  if (oldState.getRole() != newState.getRole()) {\n    builder.addModifyMemberRoles(DecryptedModifyMemberRole.newBuilder().setUuid(newState.getUuid()).setRole(newState.getRole()));\n  }\n  if (!oldState.getProfileKey().equals(newState.getProfileKey())) {\n    builder.addModifiedProfileKeys(newState);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 60,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6770,
        "startLineNumber" : 27,
        "startColumnNumber" : 110,
        "endLineNumber" : 145,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  DecryptedGroupChange.Builder builder=DecryptedGroupChange.newBuilder().setRevision(toState.getRevision());\n  if (!fromState.getTitle().equals(toState.getTitle())) {\n    builder.setNewTitle(DecryptedString.newBuilder().setValue(toState.getTitle()));\n  }\n  if (!fromState.getDescription().equals(toState.getDescription())) {\n    builder.setNewDescription(DecryptedString.newBuilder().setValue(toState.getDescription()));\n  }\n  if (!fromState.getIsAnnouncementGroup().equals(toState.getIsAnnouncementGroup())) {\n    builder.setNewIsAnnouncementGroup(toState.getIsAnnouncementGroup());\n  }\n  if (!fromState.getAvatar().equals(toState.getAvatar())) {\n    builder.setNewAvatar(DecryptedString.newBuilder().setValue(toState.getAvatar()));\n  }\n  if (!fromState.getDisappearingMessagesTimer().equals(toState.getDisappearingMessagesTimer())) {\n    builder.setNewTimer(toState.getDisappearingMessagesTimer());\n  }\n  if (!fromState.getAccessControl().getAttributes().equals(toState.getAccessControl().getAttributes())) {\n    builder.setNewAttributeAccess(toState.getAccessControl().getAttributes());\n  }\n  if (!fromState.getAccessControl().getMembers().equals(toState.getAccessControl().getMembers())) {\n    builder.setNewMemberAccess(toState.getAccessControl().getMembers());\n  }\n  Set<ByteString> fromStateMemberUuids=membersToSetOfUuids(fromState.getMembersList());\n  Set<ByteString> toStateMemberUuids=membersToSetOfUuids(toState.getMembersList());\n  Set<ByteString> pendingMembersListA=pendingMembersToSetOfUuids(fromState.getPendingMembersList());\n  Set<ByteString> pendingMembersListB=pendingMembersToSetOfUuids(toState.getPendingMembersList());\n  Set<ByteString> requestingMembersListA=requestingMembersToSetOfUuids(fromState.getRequestingMembersList());\n  Set<ByteString> requestingMembersListB=requestingMembersToSetOfUuids(toState.getRequestingMembersList());\n  Set<ByteString> removedPendingMemberUuids=subtract(pendingMembersListA,pendingMembersListB);\n  Set<ByteString> removedRequestingMemberUuids=subtract(requestingMembersListA,requestingMembersListB);\n  Set<ByteString> newPendingMemberUuids=subtract(pendingMembersListB,pendingMembersListA);\n  Set<ByteString> newRequestingMemberUuids=subtract(requestingMembersListB,requestingMembersListA);\n  Set<ByteString> removedMemberUuids=subtract(fromStateMemberUuids,toStateMemberUuids);\n  Set<ByteString> newMemberUuids=subtract(toStateMemberUuids,fromStateMemberUuids);\n  Set<ByteString> addedByInvitationUuids=intersect(newMemberUuids,removedPendingMemberUuids);\n  Set<ByteString> addedByRequestApprovalUuids=intersect(newMemberUuids,removedRequestingMemberUuids);\n  Set<DecryptedMember> addedMembersByInvitation=intersectByUUID(toState.getMembersList(),addedByInvitationUuids);\n  Set<DecryptedMember> addedMembersByRequestApproval=intersectByUUID(toState.getMembersList(),addedByRequestApprovalUuids);\n  Set<DecryptedMember> addedMembers=intersectByUUID(toState.getMembersList(),subtract(newMemberUuids,addedByInvitationUuids,addedByRequestApprovalUuids));\n  Set<DecryptedPendingMember> uninvitedMembers=intersectPendingByUUID(fromState.getPendingMembersList(),subtract(removedPendingMemberUuids,addedByInvitationUuids));\n  Set<DecryptedRequestingMember> rejectedRequestMembers=intersectRequestingByUUID(fromState.getRequestingMembersList(),subtract(removedRequestingMemberUuids,addedByRequestApprovalUuids));\n  for (  DecryptedMember member : intersectByUUID(fromState.getMembersList(),removedMemberUuids)) {\n    builder.addDeleteMembers(member.getUuid());\n  }\n  for (  DecryptedMember member : addedMembers) {\n    builder.addNewMembers(member);\n  }\n  for (  DecryptedMember member : addedMembersByInvitation) {\n    builder.addPromotePendingMembers(member);\n  }\n  for (  DecryptedPendingMember uninvitedMember : uninvitedMembers) {\n    builder.addDeletePendingMembers(DecryptedPendingMemberRemoval.newBuilder().setUuid(uninvitedMember.getUuid()).setUuidCipherText(uninvitedMember.getUuidCipherText()));\n  }\n  for (  DecryptedPendingMember invitedMember : intersectPendingByUUID(toState.getPendingMembersList(),newPendingMemberUuids)) {\n    builder.addNewPendingMembers(invitedMember);\n  }\n  Set<ByteString> consistentMemberUuids=intersect(fromStateMemberUuids,toStateMemberUuids);\n  Set<DecryptedMember> changedMembers=intersectByUUID(subtract(toState.getMembersList(),fromState.getMembersList()),consistentMemberUuids);\n  Map<ByteString,DecryptedMember> membersUuidMap=uuidMap(fromState.getMembersList());\n  for (  DecryptedMember newState : changedMembers) {\n    DecryptedMember oldState=membersUuidMap.get(newState.getUuid());\n    if (oldState.getRole() != newState.getRole()) {\n      builder.addModifyMemberRoles(DecryptedModifyMemberRole.newBuilder().setUuid(newState.getUuid()).setRole(newState.getRole()));\n    }\n    if (!oldState.getProfileKey().equals(newState.getProfileKey())) {\n      builder.addModifiedProfileKeys(newState);\n    }\n  }\n  if (!fromState.getAccessControl().getAddFromInviteLink().equals(toState.getAccessControl().getAddFromInviteLink())) {\n    builder.setNewInviteLinkAccess(toState.getAccessControl().getAddFromInviteLink());\n  }\n  for (  DecryptedRequestingMember requestingMember : intersectRequestingByUUID(toState.getRequestingMembersList(),newRequestingMemberUuids)) {\n    builder.addNewRequestingMembers(requestingMember);\n  }\n  for (  DecryptedRequestingMember requestingMember : rejectedRequestMembers) {\n    builder.addDeleteRequestingMembers(requestingMember.getUuid());\n  }\n  for (  DecryptedMember member : addedMembersByRequestApproval) {\n    builder.addPromoteRequestingMembers(DecryptedApproveMember.newBuilder().setUuid(member.getUuid()).setRole(member.getRole()));\n  }\n  if (!fromState.getInviteLinkPassword().equals(toState.getInviteLinkPassword())) {\n    builder.setNewInviteLinkPassword(toState.getInviteLinkPassword());\n  }\n  return builder.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 714,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7048,
        "startLineNumber" : 24,
        "startColumnNumber" : 2,
        "endLineNumber" : 145,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Given a  {@param fromState} and a {@param toState} creates a {@link DecryptedGroupChange} that would take the {@param fromState} to the {@param toState}.\n */\npublic static DecryptedGroupChange reconstructGroupChange(DecryptedGroup fromState,DecryptedGroup toState){\n  DecryptedGroupChange.Builder builder=DecryptedGroupChange.newBuilder().setRevision(toState.getRevision());\n  if (!fromState.getTitle().equals(toState.getTitle())) {\n    builder.setNewTitle(DecryptedString.newBuilder().setValue(toState.getTitle()));\n  }\n  if (!fromState.getDescription().equals(toState.getDescription())) {\n    builder.setNewDescription(DecryptedString.newBuilder().setValue(toState.getDescription()));\n  }\n  if (!fromState.getIsAnnouncementGroup().equals(toState.getIsAnnouncementGroup())) {\n    builder.setNewIsAnnouncementGroup(toState.getIsAnnouncementGroup());\n  }\n  if (!fromState.getAvatar().equals(toState.getAvatar())) {\n    builder.setNewAvatar(DecryptedString.newBuilder().setValue(toState.getAvatar()));\n  }\n  if (!fromState.getDisappearingMessagesTimer().equals(toState.getDisappearingMessagesTimer())) {\n    builder.setNewTimer(toState.getDisappearingMessagesTimer());\n  }\n  if (!fromState.getAccessControl().getAttributes().equals(toState.getAccessControl().getAttributes())) {\n    builder.setNewAttributeAccess(toState.getAccessControl().getAttributes());\n  }\n  if (!fromState.getAccessControl().getMembers().equals(toState.getAccessControl().getMembers())) {\n    builder.setNewMemberAccess(toState.getAccessControl().getMembers());\n  }\n  Set<ByteString> fromStateMemberUuids=membersToSetOfUuids(fromState.getMembersList());\n  Set<ByteString> toStateMemberUuids=membersToSetOfUuids(toState.getMembersList());\n  Set<ByteString> pendingMembersListA=pendingMembersToSetOfUuids(fromState.getPendingMembersList());\n  Set<ByteString> pendingMembersListB=pendingMembersToSetOfUuids(toState.getPendingMembersList());\n  Set<ByteString> requestingMembersListA=requestingMembersToSetOfUuids(fromState.getRequestingMembersList());\n  Set<ByteString> requestingMembersListB=requestingMembersToSetOfUuids(toState.getRequestingMembersList());\n  Set<ByteString> removedPendingMemberUuids=subtract(pendingMembersListA,pendingMembersListB);\n  Set<ByteString> removedRequestingMemberUuids=subtract(requestingMembersListA,requestingMembersListB);\n  Set<ByteString> newPendingMemberUuids=subtract(pendingMembersListB,pendingMembersListA);\n  Set<ByteString> newRequestingMemberUuids=subtract(requestingMembersListB,requestingMembersListA);\n  Set<ByteString> removedMemberUuids=subtract(fromStateMemberUuids,toStateMemberUuids);\n  Set<ByteString> newMemberUuids=subtract(toStateMemberUuids,fromStateMemberUuids);\n  Set<ByteString> addedByInvitationUuids=intersect(newMemberUuids,removedPendingMemberUuids);\n  Set<ByteString> addedByRequestApprovalUuids=intersect(newMemberUuids,removedRequestingMemberUuids);\n  Set<DecryptedMember> addedMembersByInvitation=intersectByUUID(toState.getMembersList(),addedByInvitationUuids);\n  Set<DecryptedMember> addedMembersByRequestApproval=intersectByUUID(toState.getMembersList(),addedByRequestApprovalUuids);\n  Set<DecryptedMember> addedMembers=intersectByUUID(toState.getMembersList(),subtract(newMemberUuids,addedByInvitationUuids,addedByRequestApprovalUuids));\n  Set<DecryptedPendingMember> uninvitedMembers=intersectPendingByUUID(fromState.getPendingMembersList(),subtract(removedPendingMemberUuids,addedByInvitationUuids));\n  Set<DecryptedRequestingMember> rejectedRequestMembers=intersectRequestingByUUID(fromState.getRequestingMembersList(),subtract(removedRequestingMemberUuids,addedByRequestApprovalUuids));\n  for (  DecryptedMember member : intersectByUUID(fromState.getMembersList(),removedMemberUuids)) {\n    builder.addDeleteMembers(member.getUuid());\n  }\n  for (  DecryptedMember member : addedMembers) {\n    builder.addNewMembers(member);\n  }\n  for (  DecryptedMember member : addedMembersByInvitation) {\n    builder.addPromotePendingMembers(member);\n  }\n  for (  DecryptedPendingMember uninvitedMember : uninvitedMembers) {\n    builder.addDeletePendingMembers(DecryptedPendingMemberRemoval.newBuilder().setUuid(uninvitedMember.getUuid()).setUuidCipherText(uninvitedMember.getUuidCipherText()));\n  }\n  for (  DecryptedPendingMember invitedMember : intersectPendingByUUID(toState.getPendingMembersList(),newPendingMemberUuids)) {\n    builder.addNewPendingMembers(invitedMember);\n  }\n  Set<ByteString> consistentMemberUuids=intersect(fromStateMemberUuids,toStateMemberUuids);\n  Set<DecryptedMember> changedMembers=intersectByUUID(subtract(toState.getMembersList(),fromState.getMembersList()),consistentMemberUuids);\n  Map<ByteString,DecryptedMember> membersUuidMap=uuidMap(fromState.getMembersList());\n  for (  DecryptedMember newState : changedMembers) {\n    DecryptedMember oldState=membersUuidMap.get(newState.getUuid());\n    if (oldState.getRole() != newState.getRole()) {\n      builder.addModifyMemberRoles(DecryptedModifyMemberRole.newBuilder().setUuid(newState.getUuid()).setRole(newState.getRole()));\n    }\n    if (!oldState.getProfileKey().equals(newState.getProfileKey())) {\n      builder.addModifiedProfileKeys(newState);\n    }\n  }\n  if (!fromState.getAccessControl().getAddFromInviteLink().equals(toState.getAccessControl().getAddFromInviteLink())) {\n    builder.setNewInviteLinkAccess(toState.getAccessControl().getAddFromInviteLink());\n  }\n  for (  DecryptedRequestingMember requestingMember : intersectRequestingByUUID(toState.getRequestingMembersList(),newRequestingMemberUuids)) {\n    builder.addNewRequestingMembers(requestingMember);\n  }\n  for (  DecryptedRequestingMember requestingMember : rejectedRequestMembers) {\n    builder.addDeleteRequestingMembers(requestingMember.getUuid());\n  }\n  for (  DecryptedMember member : addedMembersByRequestApproval) {\n    builder.addPromoteRequestingMembers(DecryptedApproveMember.newBuilder().setUuid(member.getUuid()).setRole(member.getRole()));\n  }\n  if (!fromState.getInviteLinkPassword().equals(toState.getInviteLinkPassword())) {\n    builder.setNewInviteLinkPassword(toState.getInviteLinkPassword());\n  }\n  return builder.build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 729,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 118,
        "startColumnNumber" : 8,
        "endLineNumber" : 118,
        "endColumnNumber" : 49
      },
      "nodeContext" : "builder.addModifiedProfileKeys(newState);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "DecryptedGroupChange.Builder"
  }, {
    "nodeContext" : "builder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 123,
      "startColumnNumber" : 6,
      "endLineNumber" : 123,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 123,
        "startColumnNumber" : 6,
        "endLineNumber" : 123,
        "endColumnNumber" : 87
      },
      "nodeContext" : "builder.setNewInviteLinkAccess(toState.getAccessControl().getAddFromInviteLink())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 123,
        "startColumnNumber" : 6,
        "endLineNumber" : 123,
        "endColumnNumber" : 88
      },
      "nodeContext" : "builder.setNewInviteLinkAccess(toState.getAccessControl().getAddFromInviteLink());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 122,
        "startColumnNumber" : 120,
        "endLineNumber" : 124,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  builder.setNewInviteLinkAccess(toState.getAccessControl().getAddFromInviteLink());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 212,
        "startLineNumber" : 122,
        "startColumnNumber" : 4,
        "endLineNumber" : 124,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!fromState.getAccessControl().getAddFromInviteLink().equals(toState.getAccessControl().getAddFromInviteLink())) {\n  builder.setNewInviteLinkAccess(toState.getAccessControl().getAddFromInviteLink());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 24,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6770,
        "startLineNumber" : 27,
        "startColumnNumber" : 110,
        "endLineNumber" : 145,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  DecryptedGroupChange.Builder builder=DecryptedGroupChange.newBuilder().setRevision(toState.getRevision());\n  if (!fromState.getTitle().equals(toState.getTitle())) {\n    builder.setNewTitle(DecryptedString.newBuilder().setValue(toState.getTitle()));\n  }\n  if (!fromState.getDescription().equals(toState.getDescription())) {\n    builder.setNewDescription(DecryptedString.newBuilder().setValue(toState.getDescription()));\n  }\n  if (!fromState.getIsAnnouncementGroup().equals(toState.getIsAnnouncementGroup())) {\n    builder.setNewIsAnnouncementGroup(toState.getIsAnnouncementGroup());\n  }\n  if (!fromState.getAvatar().equals(toState.getAvatar())) {\n    builder.setNewAvatar(DecryptedString.newBuilder().setValue(toState.getAvatar()));\n  }\n  if (!fromState.getDisappearingMessagesTimer().equals(toState.getDisappearingMessagesTimer())) {\n    builder.setNewTimer(toState.getDisappearingMessagesTimer());\n  }\n  if (!fromState.getAccessControl().getAttributes().equals(toState.getAccessControl().getAttributes())) {\n    builder.setNewAttributeAccess(toState.getAccessControl().getAttributes());\n  }\n  if (!fromState.getAccessControl().getMembers().equals(toState.getAccessControl().getMembers())) {\n    builder.setNewMemberAccess(toState.getAccessControl().getMembers());\n  }\n  Set<ByteString> fromStateMemberUuids=membersToSetOfUuids(fromState.getMembersList());\n  Set<ByteString> toStateMemberUuids=membersToSetOfUuids(toState.getMembersList());\n  Set<ByteString> pendingMembersListA=pendingMembersToSetOfUuids(fromState.getPendingMembersList());\n  Set<ByteString> pendingMembersListB=pendingMembersToSetOfUuids(toState.getPendingMembersList());\n  Set<ByteString> requestingMembersListA=requestingMembersToSetOfUuids(fromState.getRequestingMembersList());\n  Set<ByteString> requestingMembersListB=requestingMembersToSetOfUuids(toState.getRequestingMembersList());\n  Set<ByteString> removedPendingMemberUuids=subtract(pendingMembersListA,pendingMembersListB);\n  Set<ByteString> removedRequestingMemberUuids=subtract(requestingMembersListA,requestingMembersListB);\n  Set<ByteString> newPendingMemberUuids=subtract(pendingMembersListB,pendingMembersListA);\n  Set<ByteString> newRequestingMemberUuids=subtract(requestingMembersListB,requestingMembersListA);\n  Set<ByteString> removedMemberUuids=subtract(fromStateMemberUuids,toStateMemberUuids);\n  Set<ByteString> newMemberUuids=subtract(toStateMemberUuids,fromStateMemberUuids);\n  Set<ByteString> addedByInvitationUuids=intersect(newMemberUuids,removedPendingMemberUuids);\n  Set<ByteString> addedByRequestApprovalUuids=intersect(newMemberUuids,removedRequestingMemberUuids);\n  Set<DecryptedMember> addedMembersByInvitation=intersectByUUID(toState.getMembersList(),addedByInvitationUuids);\n  Set<DecryptedMember> addedMembersByRequestApproval=intersectByUUID(toState.getMembersList(),addedByRequestApprovalUuids);\n  Set<DecryptedMember> addedMembers=intersectByUUID(toState.getMembersList(),subtract(newMemberUuids,addedByInvitationUuids,addedByRequestApprovalUuids));\n  Set<DecryptedPendingMember> uninvitedMembers=intersectPendingByUUID(fromState.getPendingMembersList(),subtract(removedPendingMemberUuids,addedByInvitationUuids));\n  Set<DecryptedRequestingMember> rejectedRequestMembers=intersectRequestingByUUID(fromState.getRequestingMembersList(),subtract(removedRequestingMemberUuids,addedByRequestApprovalUuids));\n  for (  DecryptedMember member : intersectByUUID(fromState.getMembersList(),removedMemberUuids)) {\n    builder.addDeleteMembers(member.getUuid());\n  }\n  for (  DecryptedMember member : addedMembers) {\n    builder.addNewMembers(member);\n  }\n  for (  DecryptedMember member : addedMembersByInvitation) {\n    builder.addPromotePendingMembers(member);\n  }\n  for (  DecryptedPendingMember uninvitedMember : uninvitedMembers) {\n    builder.addDeletePendingMembers(DecryptedPendingMemberRemoval.newBuilder().setUuid(uninvitedMember.getUuid()).setUuidCipherText(uninvitedMember.getUuidCipherText()));\n  }\n  for (  DecryptedPendingMember invitedMember : intersectPendingByUUID(toState.getPendingMembersList(),newPendingMemberUuids)) {\n    builder.addNewPendingMembers(invitedMember);\n  }\n  Set<ByteString> consistentMemberUuids=intersect(fromStateMemberUuids,toStateMemberUuids);\n  Set<DecryptedMember> changedMembers=intersectByUUID(subtract(toState.getMembersList(),fromState.getMembersList()),consistentMemberUuids);\n  Map<ByteString,DecryptedMember> membersUuidMap=uuidMap(fromState.getMembersList());\n  for (  DecryptedMember newState : changedMembers) {\n    DecryptedMember oldState=membersUuidMap.get(newState.getUuid());\n    if (oldState.getRole() != newState.getRole()) {\n      builder.addModifyMemberRoles(DecryptedModifyMemberRole.newBuilder().setUuid(newState.getUuid()).setRole(newState.getRole()));\n    }\n    if (!oldState.getProfileKey().equals(newState.getProfileKey())) {\n      builder.addModifiedProfileKeys(newState);\n    }\n  }\n  if (!fromState.getAccessControl().getAddFromInviteLink().equals(toState.getAccessControl().getAddFromInviteLink())) {\n    builder.setNewInviteLinkAccess(toState.getAccessControl().getAddFromInviteLink());\n  }\n  for (  DecryptedRequestingMember requestingMember : intersectRequestingByUUID(toState.getRequestingMembersList(),newRequestingMemberUuids)) {\n    builder.addNewRequestingMembers(requestingMember);\n  }\n  for (  DecryptedRequestingMember requestingMember : rejectedRequestMembers) {\n    builder.addDeleteRequestingMembers(requestingMember.getUuid());\n  }\n  for (  DecryptedMember member : addedMembersByRequestApproval) {\n    builder.addPromoteRequestingMembers(DecryptedApproveMember.newBuilder().setUuid(member.getUuid()).setRole(member.getRole()));\n  }\n  if (!fromState.getInviteLinkPassword().equals(toState.getInviteLinkPassword())) {\n    builder.setNewInviteLinkPassword(toState.getInviteLinkPassword());\n  }\n  return builder.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 714,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7048,
        "startLineNumber" : 24,
        "startColumnNumber" : 2,
        "endLineNumber" : 145,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Given a  {@param fromState} and a {@param toState} creates a {@link DecryptedGroupChange} that would take the {@param fromState} to the {@param toState}.\n */\npublic static DecryptedGroupChange reconstructGroupChange(DecryptedGroup fromState,DecryptedGroup toState){\n  DecryptedGroupChange.Builder builder=DecryptedGroupChange.newBuilder().setRevision(toState.getRevision());\n  if (!fromState.getTitle().equals(toState.getTitle())) {\n    builder.setNewTitle(DecryptedString.newBuilder().setValue(toState.getTitle()));\n  }\n  if (!fromState.getDescription().equals(toState.getDescription())) {\n    builder.setNewDescription(DecryptedString.newBuilder().setValue(toState.getDescription()));\n  }\n  if (!fromState.getIsAnnouncementGroup().equals(toState.getIsAnnouncementGroup())) {\n    builder.setNewIsAnnouncementGroup(toState.getIsAnnouncementGroup());\n  }\n  if (!fromState.getAvatar().equals(toState.getAvatar())) {\n    builder.setNewAvatar(DecryptedString.newBuilder().setValue(toState.getAvatar()));\n  }\n  if (!fromState.getDisappearingMessagesTimer().equals(toState.getDisappearingMessagesTimer())) {\n    builder.setNewTimer(toState.getDisappearingMessagesTimer());\n  }\n  if (!fromState.getAccessControl().getAttributes().equals(toState.getAccessControl().getAttributes())) {\n    builder.setNewAttributeAccess(toState.getAccessControl().getAttributes());\n  }\n  if (!fromState.getAccessControl().getMembers().equals(toState.getAccessControl().getMembers())) {\n    builder.setNewMemberAccess(toState.getAccessControl().getMembers());\n  }\n  Set<ByteString> fromStateMemberUuids=membersToSetOfUuids(fromState.getMembersList());\n  Set<ByteString> toStateMemberUuids=membersToSetOfUuids(toState.getMembersList());\n  Set<ByteString> pendingMembersListA=pendingMembersToSetOfUuids(fromState.getPendingMembersList());\n  Set<ByteString> pendingMembersListB=pendingMembersToSetOfUuids(toState.getPendingMembersList());\n  Set<ByteString> requestingMembersListA=requestingMembersToSetOfUuids(fromState.getRequestingMembersList());\n  Set<ByteString> requestingMembersListB=requestingMembersToSetOfUuids(toState.getRequestingMembersList());\n  Set<ByteString> removedPendingMemberUuids=subtract(pendingMembersListA,pendingMembersListB);\n  Set<ByteString> removedRequestingMemberUuids=subtract(requestingMembersListA,requestingMembersListB);\n  Set<ByteString> newPendingMemberUuids=subtract(pendingMembersListB,pendingMembersListA);\n  Set<ByteString> newRequestingMemberUuids=subtract(requestingMembersListB,requestingMembersListA);\n  Set<ByteString> removedMemberUuids=subtract(fromStateMemberUuids,toStateMemberUuids);\n  Set<ByteString> newMemberUuids=subtract(toStateMemberUuids,fromStateMemberUuids);\n  Set<ByteString> addedByInvitationUuids=intersect(newMemberUuids,removedPendingMemberUuids);\n  Set<ByteString> addedByRequestApprovalUuids=intersect(newMemberUuids,removedRequestingMemberUuids);\n  Set<DecryptedMember> addedMembersByInvitation=intersectByUUID(toState.getMembersList(),addedByInvitationUuids);\n  Set<DecryptedMember> addedMembersByRequestApproval=intersectByUUID(toState.getMembersList(),addedByRequestApprovalUuids);\n  Set<DecryptedMember> addedMembers=intersectByUUID(toState.getMembersList(),subtract(newMemberUuids,addedByInvitationUuids,addedByRequestApprovalUuids));\n  Set<DecryptedPendingMember> uninvitedMembers=intersectPendingByUUID(fromState.getPendingMembersList(),subtract(removedPendingMemberUuids,addedByInvitationUuids));\n  Set<DecryptedRequestingMember> rejectedRequestMembers=intersectRequestingByUUID(fromState.getRequestingMembersList(),subtract(removedRequestingMemberUuids,addedByRequestApprovalUuids));\n  for (  DecryptedMember member : intersectByUUID(fromState.getMembersList(),removedMemberUuids)) {\n    builder.addDeleteMembers(member.getUuid());\n  }\n  for (  DecryptedMember member : addedMembers) {\n    builder.addNewMembers(member);\n  }\n  for (  DecryptedMember member : addedMembersByInvitation) {\n    builder.addPromotePendingMembers(member);\n  }\n  for (  DecryptedPendingMember uninvitedMember : uninvitedMembers) {\n    builder.addDeletePendingMembers(DecryptedPendingMemberRemoval.newBuilder().setUuid(uninvitedMember.getUuid()).setUuidCipherText(uninvitedMember.getUuidCipherText()));\n  }\n  for (  DecryptedPendingMember invitedMember : intersectPendingByUUID(toState.getPendingMembersList(),newPendingMemberUuids)) {\n    builder.addNewPendingMembers(invitedMember);\n  }\n  Set<ByteString> consistentMemberUuids=intersect(fromStateMemberUuids,toStateMemberUuids);\n  Set<DecryptedMember> changedMembers=intersectByUUID(subtract(toState.getMembersList(),fromState.getMembersList()),consistentMemberUuids);\n  Map<ByteString,DecryptedMember> membersUuidMap=uuidMap(fromState.getMembersList());\n  for (  DecryptedMember newState : changedMembers) {\n    DecryptedMember oldState=membersUuidMap.get(newState.getUuid());\n    if (oldState.getRole() != newState.getRole()) {\n      builder.addModifyMemberRoles(DecryptedModifyMemberRole.newBuilder().setUuid(newState.getUuid()).setRole(newState.getRole()));\n    }\n    if (!oldState.getProfileKey().equals(newState.getProfileKey())) {\n      builder.addModifiedProfileKeys(newState);\n    }\n  }\n  if (!fromState.getAccessControl().getAddFromInviteLink().equals(toState.getAccessControl().getAddFromInviteLink())) {\n    builder.setNewInviteLinkAccess(toState.getAccessControl().getAddFromInviteLink());\n  }\n  for (  DecryptedRequestingMember requestingMember : intersectRequestingByUUID(toState.getRequestingMembersList(),newRequestingMemberUuids)) {\n    builder.addNewRequestingMembers(requestingMember);\n  }\n  for (  DecryptedRequestingMember requestingMember : rejectedRequestMembers) {\n    builder.addDeleteRequestingMembers(requestingMember.getUuid());\n  }\n  for (  DecryptedMember member : addedMembersByRequestApproval) {\n    builder.addPromoteRequestingMembers(DecryptedApproveMember.newBuilder().setUuid(member.getUuid()).setRole(member.getRole()));\n  }\n  if (!fromState.getInviteLinkPassword().equals(toState.getInviteLinkPassword())) {\n    builder.setNewInviteLinkPassword(toState.getInviteLinkPassword());\n  }\n  return builder.build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 729,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 123,
        "startColumnNumber" : 6,
        "endLineNumber" : 123,
        "endColumnNumber" : 88
      },
      "nodeContext" : "builder.setNewInviteLinkAccess(toState.getAccessControl().getAddFromInviteLink());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "DecryptedGroupChange.Builder"
  }, {
    "nodeContext" : "builder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 127,
      "startColumnNumber" : 6,
      "endLineNumber" : 127,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 127,
        "startColumnNumber" : 6,
        "endLineNumber" : 127,
        "endColumnNumber" : 55
      },
      "nodeContext" : "builder.addNewRequestingMembers(requestingMember)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 127,
        "startColumnNumber" : 6,
        "endLineNumber" : 127,
        "endColumnNumber" : 56
      },
      "nodeContext" : "builder.addNewRequestingMembers(requestingMember);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 126,
        "startColumnNumber" : 143,
        "endLineNumber" : 128,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  builder.addNewRequestingMembers(requestingMember);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 203,
        "startLineNumber" : 126,
        "startColumnNumber" : 4,
        "endLineNumber" : 128,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (DecryptedRequestingMember requestingMember : intersectRequestingByUUID(toState.getRequestingMembersList(),newRequestingMemberUuids)) {\n  builder.addNewRequestingMembers(requestingMember);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6770,
        "startLineNumber" : 27,
        "startColumnNumber" : 110,
        "endLineNumber" : 145,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  DecryptedGroupChange.Builder builder=DecryptedGroupChange.newBuilder().setRevision(toState.getRevision());\n  if (!fromState.getTitle().equals(toState.getTitle())) {\n    builder.setNewTitle(DecryptedString.newBuilder().setValue(toState.getTitle()));\n  }\n  if (!fromState.getDescription().equals(toState.getDescription())) {\n    builder.setNewDescription(DecryptedString.newBuilder().setValue(toState.getDescription()));\n  }\n  if (!fromState.getIsAnnouncementGroup().equals(toState.getIsAnnouncementGroup())) {\n    builder.setNewIsAnnouncementGroup(toState.getIsAnnouncementGroup());\n  }\n  if (!fromState.getAvatar().equals(toState.getAvatar())) {\n    builder.setNewAvatar(DecryptedString.newBuilder().setValue(toState.getAvatar()));\n  }\n  if (!fromState.getDisappearingMessagesTimer().equals(toState.getDisappearingMessagesTimer())) {\n    builder.setNewTimer(toState.getDisappearingMessagesTimer());\n  }\n  if (!fromState.getAccessControl().getAttributes().equals(toState.getAccessControl().getAttributes())) {\n    builder.setNewAttributeAccess(toState.getAccessControl().getAttributes());\n  }\n  if (!fromState.getAccessControl().getMembers().equals(toState.getAccessControl().getMembers())) {\n    builder.setNewMemberAccess(toState.getAccessControl().getMembers());\n  }\n  Set<ByteString> fromStateMemberUuids=membersToSetOfUuids(fromState.getMembersList());\n  Set<ByteString> toStateMemberUuids=membersToSetOfUuids(toState.getMembersList());\n  Set<ByteString> pendingMembersListA=pendingMembersToSetOfUuids(fromState.getPendingMembersList());\n  Set<ByteString> pendingMembersListB=pendingMembersToSetOfUuids(toState.getPendingMembersList());\n  Set<ByteString> requestingMembersListA=requestingMembersToSetOfUuids(fromState.getRequestingMembersList());\n  Set<ByteString> requestingMembersListB=requestingMembersToSetOfUuids(toState.getRequestingMembersList());\n  Set<ByteString> removedPendingMemberUuids=subtract(pendingMembersListA,pendingMembersListB);\n  Set<ByteString> removedRequestingMemberUuids=subtract(requestingMembersListA,requestingMembersListB);\n  Set<ByteString> newPendingMemberUuids=subtract(pendingMembersListB,pendingMembersListA);\n  Set<ByteString> newRequestingMemberUuids=subtract(requestingMembersListB,requestingMembersListA);\n  Set<ByteString> removedMemberUuids=subtract(fromStateMemberUuids,toStateMemberUuids);\n  Set<ByteString> newMemberUuids=subtract(toStateMemberUuids,fromStateMemberUuids);\n  Set<ByteString> addedByInvitationUuids=intersect(newMemberUuids,removedPendingMemberUuids);\n  Set<ByteString> addedByRequestApprovalUuids=intersect(newMemberUuids,removedRequestingMemberUuids);\n  Set<DecryptedMember> addedMembersByInvitation=intersectByUUID(toState.getMembersList(),addedByInvitationUuids);\n  Set<DecryptedMember> addedMembersByRequestApproval=intersectByUUID(toState.getMembersList(),addedByRequestApprovalUuids);\n  Set<DecryptedMember> addedMembers=intersectByUUID(toState.getMembersList(),subtract(newMemberUuids,addedByInvitationUuids,addedByRequestApprovalUuids));\n  Set<DecryptedPendingMember> uninvitedMembers=intersectPendingByUUID(fromState.getPendingMembersList(),subtract(removedPendingMemberUuids,addedByInvitationUuids));\n  Set<DecryptedRequestingMember> rejectedRequestMembers=intersectRequestingByUUID(fromState.getRequestingMembersList(),subtract(removedRequestingMemberUuids,addedByRequestApprovalUuids));\n  for (  DecryptedMember member : intersectByUUID(fromState.getMembersList(),removedMemberUuids)) {\n    builder.addDeleteMembers(member.getUuid());\n  }\n  for (  DecryptedMember member : addedMembers) {\n    builder.addNewMembers(member);\n  }\n  for (  DecryptedMember member : addedMembersByInvitation) {\n    builder.addPromotePendingMembers(member);\n  }\n  for (  DecryptedPendingMember uninvitedMember : uninvitedMembers) {\n    builder.addDeletePendingMembers(DecryptedPendingMemberRemoval.newBuilder().setUuid(uninvitedMember.getUuid()).setUuidCipherText(uninvitedMember.getUuidCipherText()));\n  }\n  for (  DecryptedPendingMember invitedMember : intersectPendingByUUID(toState.getPendingMembersList(),newPendingMemberUuids)) {\n    builder.addNewPendingMembers(invitedMember);\n  }\n  Set<ByteString> consistentMemberUuids=intersect(fromStateMemberUuids,toStateMemberUuids);\n  Set<DecryptedMember> changedMembers=intersectByUUID(subtract(toState.getMembersList(),fromState.getMembersList()),consistentMemberUuids);\n  Map<ByteString,DecryptedMember> membersUuidMap=uuidMap(fromState.getMembersList());\n  for (  DecryptedMember newState : changedMembers) {\n    DecryptedMember oldState=membersUuidMap.get(newState.getUuid());\n    if (oldState.getRole() != newState.getRole()) {\n      builder.addModifyMemberRoles(DecryptedModifyMemberRole.newBuilder().setUuid(newState.getUuid()).setRole(newState.getRole()));\n    }\n    if (!oldState.getProfileKey().equals(newState.getProfileKey())) {\n      builder.addModifiedProfileKeys(newState);\n    }\n  }\n  if (!fromState.getAccessControl().getAddFromInviteLink().equals(toState.getAccessControl().getAddFromInviteLink())) {\n    builder.setNewInviteLinkAccess(toState.getAccessControl().getAddFromInviteLink());\n  }\n  for (  DecryptedRequestingMember requestingMember : intersectRequestingByUUID(toState.getRequestingMembersList(),newRequestingMemberUuids)) {\n    builder.addNewRequestingMembers(requestingMember);\n  }\n  for (  DecryptedRequestingMember requestingMember : rejectedRequestMembers) {\n    builder.addDeleteRequestingMembers(requestingMember.getUuid());\n  }\n  for (  DecryptedMember member : addedMembersByRequestApproval) {\n    builder.addPromoteRequestingMembers(DecryptedApproveMember.newBuilder().setUuid(member.getUuid()).setRole(member.getRole()));\n  }\n  if (!fromState.getInviteLinkPassword().equals(toState.getInviteLinkPassword())) {\n    builder.setNewInviteLinkPassword(toState.getInviteLinkPassword());\n  }\n  return builder.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 714,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7048,
        "startLineNumber" : 24,
        "startColumnNumber" : 2,
        "endLineNumber" : 145,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Given a  {@param fromState} and a {@param toState} creates a {@link DecryptedGroupChange} that would take the {@param fromState} to the {@param toState}.\n */\npublic static DecryptedGroupChange reconstructGroupChange(DecryptedGroup fromState,DecryptedGroup toState){\n  DecryptedGroupChange.Builder builder=DecryptedGroupChange.newBuilder().setRevision(toState.getRevision());\n  if (!fromState.getTitle().equals(toState.getTitle())) {\n    builder.setNewTitle(DecryptedString.newBuilder().setValue(toState.getTitle()));\n  }\n  if (!fromState.getDescription().equals(toState.getDescription())) {\n    builder.setNewDescription(DecryptedString.newBuilder().setValue(toState.getDescription()));\n  }\n  if (!fromState.getIsAnnouncementGroup().equals(toState.getIsAnnouncementGroup())) {\n    builder.setNewIsAnnouncementGroup(toState.getIsAnnouncementGroup());\n  }\n  if (!fromState.getAvatar().equals(toState.getAvatar())) {\n    builder.setNewAvatar(DecryptedString.newBuilder().setValue(toState.getAvatar()));\n  }\n  if (!fromState.getDisappearingMessagesTimer().equals(toState.getDisappearingMessagesTimer())) {\n    builder.setNewTimer(toState.getDisappearingMessagesTimer());\n  }\n  if (!fromState.getAccessControl().getAttributes().equals(toState.getAccessControl().getAttributes())) {\n    builder.setNewAttributeAccess(toState.getAccessControl().getAttributes());\n  }\n  if (!fromState.getAccessControl().getMembers().equals(toState.getAccessControl().getMembers())) {\n    builder.setNewMemberAccess(toState.getAccessControl().getMembers());\n  }\n  Set<ByteString> fromStateMemberUuids=membersToSetOfUuids(fromState.getMembersList());\n  Set<ByteString> toStateMemberUuids=membersToSetOfUuids(toState.getMembersList());\n  Set<ByteString> pendingMembersListA=pendingMembersToSetOfUuids(fromState.getPendingMembersList());\n  Set<ByteString> pendingMembersListB=pendingMembersToSetOfUuids(toState.getPendingMembersList());\n  Set<ByteString> requestingMembersListA=requestingMembersToSetOfUuids(fromState.getRequestingMembersList());\n  Set<ByteString> requestingMembersListB=requestingMembersToSetOfUuids(toState.getRequestingMembersList());\n  Set<ByteString> removedPendingMemberUuids=subtract(pendingMembersListA,pendingMembersListB);\n  Set<ByteString> removedRequestingMemberUuids=subtract(requestingMembersListA,requestingMembersListB);\n  Set<ByteString> newPendingMemberUuids=subtract(pendingMembersListB,pendingMembersListA);\n  Set<ByteString> newRequestingMemberUuids=subtract(requestingMembersListB,requestingMembersListA);\n  Set<ByteString> removedMemberUuids=subtract(fromStateMemberUuids,toStateMemberUuids);\n  Set<ByteString> newMemberUuids=subtract(toStateMemberUuids,fromStateMemberUuids);\n  Set<ByteString> addedByInvitationUuids=intersect(newMemberUuids,removedPendingMemberUuids);\n  Set<ByteString> addedByRequestApprovalUuids=intersect(newMemberUuids,removedRequestingMemberUuids);\n  Set<DecryptedMember> addedMembersByInvitation=intersectByUUID(toState.getMembersList(),addedByInvitationUuids);\n  Set<DecryptedMember> addedMembersByRequestApproval=intersectByUUID(toState.getMembersList(),addedByRequestApprovalUuids);\n  Set<DecryptedMember> addedMembers=intersectByUUID(toState.getMembersList(),subtract(newMemberUuids,addedByInvitationUuids,addedByRequestApprovalUuids));\n  Set<DecryptedPendingMember> uninvitedMembers=intersectPendingByUUID(fromState.getPendingMembersList(),subtract(removedPendingMemberUuids,addedByInvitationUuids));\n  Set<DecryptedRequestingMember> rejectedRequestMembers=intersectRequestingByUUID(fromState.getRequestingMembersList(),subtract(removedRequestingMemberUuids,addedByRequestApprovalUuids));\n  for (  DecryptedMember member : intersectByUUID(fromState.getMembersList(),removedMemberUuids)) {\n    builder.addDeleteMembers(member.getUuid());\n  }\n  for (  DecryptedMember member : addedMembers) {\n    builder.addNewMembers(member);\n  }\n  for (  DecryptedMember member : addedMembersByInvitation) {\n    builder.addPromotePendingMembers(member);\n  }\n  for (  DecryptedPendingMember uninvitedMember : uninvitedMembers) {\n    builder.addDeletePendingMembers(DecryptedPendingMemberRemoval.newBuilder().setUuid(uninvitedMember.getUuid()).setUuidCipherText(uninvitedMember.getUuidCipherText()));\n  }\n  for (  DecryptedPendingMember invitedMember : intersectPendingByUUID(toState.getPendingMembersList(),newPendingMemberUuids)) {\n    builder.addNewPendingMembers(invitedMember);\n  }\n  Set<ByteString> consistentMemberUuids=intersect(fromStateMemberUuids,toStateMemberUuids);\n  Set<DecryptedMember> changedMembers=intersectByUUID(subtract(toState.getMembersList(),fromState.getMembersList()),consistentMemberUuids);\n  Map<ByteString,DecryptedMember> membersUuidMap=uuidMap(fromState.getMembersList());\n  for (  DecryptedMember newState : changedMembers) {\n    DecryptedMember oldState=membersUuidMap.get(newState.getUuid());\n    if (oldState.getRole() != newState.getRole()) {\n      builder.addModifyMemberRoles(DecryptedModifyMemberRole.newBuilder().setUuid(newState.getUuid()).setRole(newState.getRole()));\n    }\n    if (!oldState.getProfileKey().equals(newState.getProfileKey())) {\n      builder.addModifiedProfileKeys(newState);\n    }\n  }\n  if (!fromState.getAccessControl().getAddFromInviteLink().equals(toState.getAccessControl().getAddFromInviteLink())) {\n    builder.setNewInviteLinkAccess(toState.getAccessControl().getAddFromInviteLink());\n  }\n  for (  DecryptedRequestingMember requestingMember : intersectRequestingByUUID(toState.getRequestingMembersList(),newRequestingMemberUuids)) {\n    builder.addNewRequestingMembers(requestingMember);\n  }\n  for (  DecryptedRequestingMember requestingMember : rejectedRequestMembers) {\n    builder.addDeleteRequestingMembers(requestingMember.getUuid());\n  }\n  for (  DecryptedMember member : addedMembersByRequestApproval) {\n    builder.addPromoteRequestingMembers(DecryptedApproveMember.newBuilder().setUuid(member.getUuid()).setRole(member.getRole()));\n  }\n  if (!fromState.getInviteLinkPassword().equals(toState.getInviteLinkPassword())) {\n    builder.setNewInviteLinkPassword(toState.getInviteLinkPassword());\n  }\n  return builder.build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 729,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 127,
        "startColumnNumber" : 6,
        "endLineNumber" : 127,
        "endColumnNumber" : 56
      },
      "nodeContext" : "builder.addNewRequestingMembers(requestingMember);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "DecryptedGroupChange.Builder"
  }, {
    "nodeContext" : "builder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 131,
      "startColumnNumber" : 6,
      "endLineNumber" : 131,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 131,
        "startColumnNumber" : 6,
        "endLineNumber" : 131,
        "endColumnNumber" : 68
      },
      "nodeContext" : "builder.addDeleteRequestingMembers(requestingMember.getUuid())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 131,
        "startColumnNumber" : 6,
        "endLineNumber" : 131,
        "endColumnNumber" : 69
      },
      "nodeContext" : "builder.addDeleteRequestingMembers(requestingMember.getUuid());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 130,
        "startColumnNumber" : 78,
        "endLineNumber" : 132,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  builder.addDeleteRequestingMembers(requestingMember.getUuid());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 151,
        "startLineNumber" : 130,
        "startColumnNumber" : 4,
        "endLineNumber" : 132,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (DecryptedRequestingMember requestingMember : rejectedRequestMembers) {\n  builder.addDeleteRequestingMembers(requestingMember.getUuid());\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6770,
        "startLineNumber" : 27,
        "startColumnNumber" : 110,
        "endLineNumber" : 145,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  DecryptedGroupChange.Builder builder=DecryptedGroupChange.newBuilder().setRevision(toState.getRevision());\n  if (!fromState.getTitle().equals(toState.getTitle())) {\n    builder.setNewTitle(DecryptedString.newBuilder().setValue(toState.getTitle()));\n  }\n  if (!fromState.getDescription().equals(toState.getDescription())) {\n    builder.setNewDescription(DecryptedString.newBuilder().setValue(toState.getDescription()));\n  }\n  if (!fromState.getIsAnnouncementGroup().equals(toState.getIsAnnouncementGroup())) {\n    builder.setNewIsAnnouncementGroup(toState.getIsAnnouncementGroup());\n  }\n  if (!fromState.getAvatar().equals(toState.getAvatar())) {\n    builder.setNewAvatar(DecryptedString.newBuilder().setValue(toState.getAvatar()));\n  }\n  if (!fromState.getDisappearingMessagesTimer().equals(toState.getDisappearingMessagesTimer())) {\n    builder.setNewTimer(toState.getDisappearingMessagesTimer());\n  }\n  if (!fromState.getAccessControl().getAttributes().equals(toState.getAccessControl().getAttributes())) {\n    builder.setNewAttributeAccess(toState.getAccessControl().getAttributes());\n  }\n  if (!fromState.getAccessControl().getMembers().equals(toState.getAccessControl().getMembers())) {\n    builder.setNewMemberAccess(toState.getAccessControl().getMembers());\n  }\n  Set<ByteString> fromStateMemberUuids=membersToSetOfUuids(fromState.getMembersList());\n  Set<ByteString> toStateMemberUuids=membersToSetOfUuids(toState.getMembersList());\n  Set<ByteString> pendingMembersListA=pendingMembersToSetOfUuids(fromState.getPendingMembersList());\n  Set<ByteString> pendingMembersListB=pendingMembersToSetOfUuids(toState.getPendingMembersList());\n  Set<ByteString> requestingMembersListA=requestingMembersToSetOfUuids(fromState.getRequestingMembersList());\n  Set<ByteString> requestingMembersListB=requestingMembersToSetOfUuids(toState.getRequestingMembersList());\n  Set<ByteString> removedPendingMemberUuids=subtract(pendingMembersListA,pendingMembersListB);\n  Set<ByteString> removedRequestingMemberUuids=subtract(requestingMembersListA,requestingMembersListB);\n  Set<ByteString> newPendingMemberUuids=subtract(pendingMembersListB,pendingMembersListA);\n  Set<ByteString> newRequestingMemberUuids=subtract(requestingMembersListB,requestingMembersListA);\n  Set<ByteString> removedMemberUuids=subtract(fromStateMemberUuids,toStateMemberUuids);\n  Set<ByteString> newMemberUuids=subtract(toStateMemberUuids,fromStateMemberUuids);\n  Set<ByteString> addedByInvitationUuids=intersect(newMemberUuids,removedPendingMemberUuids);\n  Set<ByteString> addedByRequestApprovalUuids=intersect(newMemberUuids,removedRequestingMemberUuids);\n  Set<DecryptedMember> addedMembersByInvitation=intersectByUUID(toState.getMembersList(),addedByInvitationUuids);\n  Set<DecryptedMember> addedMembersByRequestApproval=intersectByUUID(toState.getMembersList(),addedByRequestApprovalUuids);\n  Set<DecryptedMember> addedMembers=intersectByUUID(toState.getMembersList(),subtract(newMemberUuids,addedByInvitationUuids,addedByRequestApprovalUuids));\n  Set<DecryptedPendingMember> uninvitedMembers=intersectPendingByUUID(fromState.getPendingMembersList(),subtract(removedPendingMemberUuids,addedByInvitationUuids));\n  Set<DecryptedRequestingMember> rejectedRequestMembers=intersectRequestingByUUID(fromState.getRequestingMembersList(),subtract(removedRequestingMemberUuids,addedByRequestApprovalUuids));\n  for (  DecryptedMember member : intersectByUUID(fromState.getMembersList(),removedMemberUuids)) {\n    builder.addDeleteMembers(member.getUuid());\n  }\n  for (  DecryptedMember member : addedMembers) {\n    builder.addNewMembers(member);\n  }\n  for (  DecryptedMember member : addedMembersByInvitation) {\n    builder.addPromotePendingMembers(member);\n  }\n  for (  DecryptedPendingMember uninvitedMember : uninvitedMembers) {\n    builder.addDeletePendingMembers(DecryptedPendingMemberRemoval.newBuilder().setUuid(uninvitedMember.getUuid()).setUuidCipherText(uninvitedMember.getUuidCipherText()));\n  }\n  for (  DecryptedPendingMember invitedMember : intersectPendingByUUID(toState.getPendingMembersList(),newPendingMemberUuids)) {\n    builder.addNewPendingMembers(invitedMember);\n  }\n  Set<ByteString> consistentMemberUuids=intersect(fromStateMemberUuids,toStateMemberUuids);\n  Set<DecryptedMember> changedMembers=intersectByUUID(subtract(toState.getMembersList(),fromState.getMembersList()),consistentMemberUuids);\n  Map<ByteString,DecryptedMember> membersUuidMap=uuidMap(fromState.getMembersList());\n  for (  DecryptedMember newState : changedMembers) {\n    DecryptedMember oldState=membersUuidMap.get(newState.getUuid());\n    if (oldState.getRole() != newState.getRole()) {\n      builder.addModifyMemberRoles(DecryptedModifyMemberRole.newBuilder().setUuid(newState.getUuid()).setRole(newState.getRole()));\n    }\n    if (!oldState.getProfileKey().equals(newState.getProfileKey())) {\n      builder.addModifiedProfileKeys(newState);\n    }\n  }\n  if (!fromState.getAccessControl().getAddFromInviteLink().equals(toState.getAccessControl().getAddFromInviteLink())) {\n    builder.setNewInviteLinkAccess(toState.getAccessControl().getAddFromInviteLink());\n  }\n  for (  DecryptedRequestingMember requestingMember : intersectRequestingByUUID(toState.getRequestingMembersList(),newRequestingMemberUuids)) {\n    builder.addNewRequestingMembers(requestingMember);\n  }\n  for (  DecryptedRequestingMember requestingMember : rejectedRequestMembers) {\n    builder.addDeleteRequestingMembers(requestingMember.getUuid());\n  }\n  for (  DecryptedMember member : addedMembersByRequestApproval) {\n    builder.addPromoteRequestingMembers(DecryptedApproveMember.newBuilder().setUuid(member.getUuid()).setRole(member.getRole()));\n  }\n  if (!fromState.getInviteLinkPassword().equals(toState.getInviteLinkPassword())) {\n    builder.setNewInviteLinkPassword(toState.getInviteLinkPassword());\n  }\n  return builder.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 714,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7048,
        "startLineNumber" : 24,
        "startColumnNumber" : 2,
        "endLineNumber" : 145,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Given a  {@param fromState} and a {@param toState} creates a {@link DecryptedGroupChange} that would take the {@param fromState} to the {@param toState}.\n */\npublic static DecryptedGroupChange reconstructGroupChange(DecryptedGroup fromState,DecryptedGroup toState){\n  DecryptedGroupChange.Builder builder=DecryptedGroupChange.newBuilder().setRevision(toState.getRevision());\n  if (!fromState.getTitle().equals(toState.getTitle())) {\n    builder.setNewTitle(DecryptedString.newBuilder().setValue(toState.getTitle()));\n  }\n  if (!fromState.getDescription().equals(toState.getDescription())) {\n    builder.setNewDescription(DecryptedString.newBuilder().setValue(toState.getDescription()));\n  }\n  if (!fromState.getIsAnnouncementGroup().equals(toState.getIsAnnouncementGroup())) {\n    builder.setNewIsAnnouncementGroup(toState.getIsAnnouncementGroup());\n  }\n  if (!fromState.getAvatar().equals(toState.getAvatar())) {\n    builder.setNewAvatar(DecryptedString.newBuilder().setValue(toState.getAvatar()));\n  }\n  if (!fromState.getDisappearingMessagesTimer().equals(toState.getDisappearingMessagesTimer())) {\n    builder.setNewTimer(toState.getDisappearingMessagesTimer());\n  }\n  if (!fromState.getAccessControl().getAttributes().equals(toState.getAccessControl().getAttributes())) {\n    builder.setNewAttributeAccess(toState.getAccessControl().getAttributes());\n  }\n  if (!fromState.getAccessControl().getMembers().equals(toState.getAccessControl().getMembers())) {\n    builder.setNewMemberAccess(toState.getAccessControl().getMembers());\n  }\n  Set<ByteString> fromStateMemberUuids=membersToSetOfUuids(fromState.getMembersList());\n  Set<ByteString> toStateMemberUuids=membersToSetOfUuids(toState.getMembersList());\n  Set<ByteString> pendingMembersListA=pendingMembersToSetOfUuids(fromState.getPendingMembersList());\n  Set<ByteString> pendingMembersListB=pendingMembersToSetOfUuids(toState.getPendingMembersList());\n  Set<ByteString> requestingMembersListA=requestingMembersToSetOfUuids(fromState.getRequestingMembersList());\n  Set<ByteString> requestingMembersListB=requestingMembersToSetOfUuids(toState.getRequestingMembersList());\n  Set<ByteString> removedPendingMemberUuids=subtract(pendingMembersListA,pendingMembersListB);\n  Set<ByteString> removedRequestingMemberUuids=subtract(requestingMembersListA,requestingMembersListB);\n  Set<ByteString> newPendingMemberUuids=subtract(pendingMembersListB,pendingMembersListA);\n  Set<ByteString> newRequestingMemberUuids=subtract(requestingMembersListB,requestingMembersListA);\n  Set<ByteString> removedMemberUuids=subtract(fromStateMemberUuids,toStateMemberUuids);\n  Set<ByteString> newMemberUuids=subtract(toStateMemberUuids,fromStateMemberUuids);\n  Set<ByteString> addedByInvitationUuids=intersect(newMemberUuids,removedPendingMemberUuids);\n  Set<ByteString> addedByRequestApprovalUuids=intersect(newMemberUuids,removedRequestingMemberUuids);\n  Set<DecryptedMember> addedMembersByInvitation=intersectByUUID(toState.getMembersList(),addedByInvitationUuids);\n  Set<DecryptedMember> addedMembersByRequestApproval=intersectByUUID(toState.getMembersList(),addedByRequestApprovalUuids);\n  Set<DecryptedMember> addedMembers=intersectByUUID(toState.getMembersList(),subtract(newMemberUuids,addedByInvitationUuids,addedByRequestApprovalUuids));\n  Set<DecryptedPendingMember> uninvitedMembers=intersectPendingByUUID(fromState.getPendingMembersList(),subtract(removedPendingMemberUuids,addedByInvitationUuids));\n  Set<DecryptedRequestingMember> rejectedRequestMembers=intersectRequestingByUUID(fromState.getRequestingMembersList(),subtract(removedRequestingMemberUuids,addedByRequestApprovalUuids));\n  for (  DecryptedMember member : intersectByUUID(fromState.getMembersList(),removedMemberUuids)) {\n    builder.addDeleteMembers(member.getUuid());\n  }\n  for (  DecryptedMember member : addedMembers) {\n    builder.addNewMembers(member);\n  }\n  for (  DecryptedMember member : addedMembersByInvitation) {\n    builder.addPromotePendingMembers(member);\n  }\n  for (  DecryptedPendingMember uninvitedMember : uninvitedMembers) {\n    builder.addDeletePendingMembers(DecryptedPendingMemberRemoval.newBuilder().setUuid(uninvitedMember.getUuid()).setUuidCipherText(uninvitedMember.getUuidCipherText()));\n  }\n  for (  DecryptedPendingMember invitedMember : intersectPendingByUUID(toState.getPendingMembersList(),newPendingMemberUuids)) {\n    builder.addNewPendingMembers(invitedMember);\n  }\n  Set<ByteString> consistentMemberUuids=intersect(fromStateMemberUuids,toStateMemberUuids);\n  Set<DecryptedMember> changedMembers=intersectByUUID(subtract(toState.getMembersList(),fromState.getMembersList()),consistentMemberUuids);\n  Map<ByteString,DecryptedMember> membersUuidMap=uuidMap(fromState.getMembersList());\n  for (  DecryptedMember newState : changedMembers) {\n    DecryptedMember oldState=membersUuidMap.get(newState.getUuid());\n    if (oldState.getRole() != newState.getRole()) {\n      builder.addModifyMemberRoles(DecryptedModifyMemberRole.newBuilder().setUuid(newState.getUuid()).setRole(newState.getRole()));\n    }\n    if (!oldState.getProfileKey().equals(newState.getProfileKey())) {\n      builder.addModifiedProfileKeys(newState);\n    }\n  }\n  if (!fromState.getAccessControl().getAddFromInviteLink().equals(toState.getAccessControl().getAddFromInviteLink())) {\n    builder.setNewInviteLinkAccess(toState.getAccessControl().getAddFromInviteLink());\n  }\n  for (  DecryptedRequestingMember requestingMember : intersectRequestingByUUID(toState.getRequestingMembersList(),newRequestingMemberUuids)) {\n    builder.addNewRequestingMembers(requestingMember);\n  }\n  for (  DecryptedRequestingMember requestingMember : rejectedRequestMembers) {\n    builder.addDeleteRequestingMembers(requestingMember.getUuid());\n  }\n  for (  DecryptedMember member : addedMembersByRequestApproval) {\n    builder.addPromoteRequestingMembers(DecryptedApproveMember.newBuilder().setUuid(member.getUuid()).setRole(member.getRole()));\n  }\n  if (!fromState.getInviteLinkPassword().equals(toState.getInviteLinkPassword())) {\n    builder.setNewInviteLinkPassword(toState.getInviteLinkPassword());\n  }\n  return builder.build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 729,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 131,
        "startColumnNumber" : 6,
        "endLineNumber" : 131,
        "endColumnNumber" : 69
      },
      "nodeContext" : "builder.addDeleteRequestingMembers(requestingMember.getUuid());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "DecryptedGroupChange.Builder"
  }, {
    "nodeContext" : "builder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 135,
      "startColumnNumber" : 6,
      "endLineNumber" : 135,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 254,
        "startLineNumber" : 135,
        "startColumnNumber" : 6,
        "endLineNumber" : 137,
        "endColumnNumber" : 91
      },
      "nodeContext" : "builder.addPromoteRequestingMembers(DecryptedApproveMember.newBuilder().setUuid(member.getUuid()).setRole(member.getRole()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 255,
        "startLineNumber" : 135,
        "startColumnNumber" : 6,
        "endLineNumber" : 137,
        "endColumnNumber" : 92
      },
      "nodeContext" : "builder.addPromoteRequestingMembers(DecryptedApproveMember.newBuilder().setUuid(member.getUuid()).setRole(member.getRole()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 269,
        "startLineNumber" : 134,
        "startColumnNumber" : 65,
        "endLineNumber" : 138,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  builder.addPromoteRequestingMembers(DecryptedApproveMember.newBuilder().setUuid(member.getUuid()).setRole(member.getRole()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 330,
        "startLineNumber" : 134,
        "startColumnNumber" : 4,
        "endLineNumber" : 138,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (DecryptedMember member : addedMembersByRequestApproval) {\n  builder.addPromoteRequestingMembers(DecryptedApproveMember.newBuilder().setUuid(member.getUuid()).setRole(member.getRole()));\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 24,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6770,
        "startLineNumber" : 27,
        "startColumnNumber" : 110,
        "endLineNumber" : 145,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  DecryptedGroupChange.Builder builder=DecryptedGroupChange.newBuilder().setRevision(toState.getRevision());\n  if (!fromState.getTitle().equals(toState.getTitle())) {\n    builder.setNewTitle(DecryptedString.newBuilder().setValue(toState.getTitle()));\n  }\n  if (!fromState.getDescription().equals(toState.getDescription())) {\n    builder.setNewDescription(DecryptedString.newBuilder().setValue(toState.getDescription()));\n  }\n  if (!fromState.getIsAnnouncementGroup().equals(toState.getIsAnnouncementGroup())) {\n    builder.setNewIsAnnouncementGroup(toState.getIsAnnouncementGroup());\n  }\n  if (!fromState.getAvatar().equals(toState.getAvatar())) {\n    builder.setNewAvatar(DecryptedString.newBuilder().setValue(toState.getAvatar()));\n  }\n  if (!fromState.getDisappearingMessagesTimer().equals(toState.getDisappearingMessagesTimer())) {\n    builder.setNewTimer(toState.getDisappearingMessagesTimer());\n  }\n  if (!fromState.getAccessControl().getAttributes().equals(toState.getAccessControl().getAttributes())) {\n    builder.setNewAttributeAccess(toState.getAccessControl().getAttributes());\n  }\n  if (!fromState.getAccessControl().getMembers().equals(toState.getAccessControl().getMembers())) {\n    builder.setNewMemberAccess(toState.getAccessControl().getMembers());\n  }\n  Set<ByteString> fromStateMemberUuids=membersToSetOfUuids(fromState.getMembersList());\n  Set<ByteString> toStateMemberUuids=membersToSetOfUuids(toState.getMembersList());\n  Set<ByteString> pendingMembersListA=pendingMembersToSetOfUuids(fromState.getPendingMembersList());\n  Set<ByteString> pendingMembersListB=pendingMembersToSetOfUuids(toState.getPendingMembersList());\n  Set<ByteString> requestingMembersListA=requestingMembersToSetOfUuids(fromState.getRequestingMembersList());\n  Set<ByteString> requestingMembersListB=requestingMembersToSetOfUuids(toState.getRequestingMembersList());\n  Set<ByteString> removedPendingMemberUuids=subtract(pendingMembersListA,pendingMembersListB);\n  Set<ByteString> removedRequestingMemberUuids=subtract(requestingMembersListA,requestingMembersListB);\n  Set<ByteString> newPendingMemberUuids=subtract(pendingMembersListB,pendingMembersListA);\n  Set<ByteString> newRequestingMemberUuids=subtract(requestingMembersListB,requestingMembersListA);\n  Set<ByteString> removedMemberUuids=subtract(fromStateMemberUuids,toStateMemberUuids);\n  Set<ByteString> newMemberUuids=subtract(toStateMemberUuids,fromStateMemberUuids);\n  Set<ByteString> addedByInvitationUuids=intersect(newMemberUuids,removedPendingMemberUuids);\n  Set<ByteString> addedByRequestApprovalUuids=intersect(newMemberUuids,removedRequestingMemberUuids);\n  Set<DecryptedMember> addedMembersByInvitation=intersectByUUID(toState.getMembersList(),addedByInvitationUuids);\n  Set<DecryptedMember> addedMembersByRequestApproval=intersectByUUID(toState.getMembersList(),addedByRequestApprovalUuids);\n  Set<DecryptedMember> addedMembers=intersectByUUID(toState.getMembersList(),subtract(newMemberUuids,addedByInvitationUuids,addedByRequestApprovalUuids));\n  Set<DecryptedPendingMember> uninvitedMembers=intersectPendingByUUID(fromState.getPendingMembersList(),subtract(removedPendingMemberUuids,addedByInvitationUuids));\n  Set<DecryptedRequestingMember> rejectedRequestMembers=intersectRequestingByUUID(fromState.getRequestingMembersList(),subtract(removedRequestingMemberUuids,addedByRequestApprovalUuids));\n  for (  DecryptedMember member : intersectByUUID(fromState.getMembersList(),removedMemberUuids)) {\n    builder.addDeleteMembers(member.getUuid());\n  }\n  for (  DecryptedMember member : addedMembers) {\n    builder.addNewMembers(member);\n  }\n  for (  DecryptedMember member : addedMembersByInvitation) {\n    builder.addPromotePendingMembers(member);\n  }\n  for (  DecryptedPendingMember uninvitedMember : uninvitedMembers) {\n    builder.addDeletePendingMembers(DecryptedPendingMemberRemoval.newBuilder().setUuid(uninvitedMember.getUuid()).setUuidCipherText(uninvitedMember.getUuidCipherText()));\n  }\n  for (  DecryptedPendingMember invitedMember : intersectPendingByUUID(toState.getPendingMembersList(),newPendingMemberUuids)) {\n    builder.addNewPendingMembers(invitedMember);\n  }\n  Set<ByteString> consistentMemberUuids=intersect(fromStateMemberUuids,toStateMemberUuids);\n  Set<DecryptedMember> changedMembers=intersectByUUID(subtract(toState.getMembersList(),fromState.getMembersList()),consistentMemberUuids);\n  Map<ByteString,DecryptedMember> membersUuidMap=uuidMap(fromState.getMembersList());\n  for (  DecryptedMember newState : changedMembers) {\n    DecryptedMember oldState=membersUuidMap.get(newState.getUuid());\n    if (oldState.getRole() != newState.getRole()) {\n      builder.addModifyMemberRoles(DecryptedModifyMemberRole.newBuilder().setUuid(newState.getUuid()).setRole(newState.getRole()));\n    }\n    if (!oldState.getProfileKey().equals(newState.getProfileKey())) {\n      builder.addModifiedProfileKeys(newState);\n    }\n  }\n  if (!fromState.getAccessControl().getAddFromInviteLink().equals(toState.getAccessControl().getAddFromInviteLink())) {\n    builder.setNewInviteLinkAccess(toState.getAccessControl().getAddFromInviteLink());\n  }\n  for (  DecryptedRequestingMember requestingMember : intersectRequestingByUUID(toState.getRequestingMembersList(),newRequestingMemberUuids)) {\n    builder.addNewRequestingMembers(requestingMember);\n  }\n  for (  DecryptedRequestingMember requestingMember : rejectedRequestMembers) {\n    builder.addDeleteRequestingMembers(requestingMember.getUuid());\n  }\n  for (  DecryptedMember member : addedMembersByRequestApproval) {\n    builder.addPromoteRequestingMembers(DecryptedApproveMember.newBuilder().setUuid(member.getUuid()).setRole(member.getRole()));\n  }\n  if (!fromState.getInviteLinkPassword().equals(toState.getInviteLinkPassword())) {\n    builder.setNewInviteLinkPassword(toState.getInviteLinkPassword());\n  }\n  return builder.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 714,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7048,
        "startLineNumber" : 24,
        "startColumnNumber" : 2,
        "endLineNumber" : 145,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Given a  {@param fromState} and a {@param toState} creates a {@link DecryptedGroupChange} that would take the {@param fromState} to the {@param toState}.\n */\npublic static DecryptedGroupChange reconstructGroupChange(DecryptedGroup fromState,DecryptedGroup toState){\n  DecryptedGroupChange.Builder builder=DecryptedGroupChange.newBuilder().setRevision(toState.getRevision());\n  if (!fromState.getTitle().equals(toState.getTitle())) {\n    builder.setNewTitle(DecryptedString.newBuilder().setValue(toState.getTitle()));\n  }\n  if (!fromState.getDescription().equals(toState.getDescription())) {\n    builder.setNewDescription(DecryptedString.newBuilder().setValue(toState.getDescription()));\n  }\n  if (!fromState.getIsAnnouncementGroup().equals(toState.getIsAnnouncementGroup())) {\n    builder.setNewIsAnnouncementGroup(toState.getIsAnnouncementGroup());\n  }\n  if (!fromState.getAvatar().equals(toState.getAvatar())) {\n    builder.setNewAvatar(DecryptedString.newBuilder().setValue(toState.getAvatar()));\n  }\n  if (!fromState.getDisappearingMessagesTimer().equals(toState.getDisappearingMessagesTimer())) {\n    builder.setNewTimer(toState.getDisappearingMessagesTimer());\n  }\n  if (!fromState.getAccessControl().getAttributes().equals(toState.getAccessControl().getAttributes())) {\n    builder.setNewAttributeAccess(toState.getAccessControl().getAttributes());\n  }\n  if (!fromState.getAccessControl().getMembers().equals(toState.getAccessControl().getMembers())) {\n    builder.setNewMemberAccess(toState.getAccessControl().getMembers());\n  }\n  Set<ByteString> fromStateMemberUuids=membersToSetOfUuids(fromState.getMembersList());\n  Set<ByteString> toStateMemberUuids=membersToSetOfUuids(toState.getMembersList());\n  Set<ByteString> pendingMembersListA=pendingMembersToSetOfUuids(fromState.getPendingMembersList());\n  Set<ByteString> pendingMembersListB=pendingMembersToSetOfUuids(toState.getPendingMembersList());\n  Set<ByteString> requestingMembersListA=requestingMembersToSetOfUuids(fromState.getRequestingMembersList());\n  Set<ByteString> requestingMembersListB=requestingMembersToSetOfUuids(toState.getRequestingMembersList());\n  Set<ByteString> removedPendingMemberUuids=subtract(pendingMembersListA,pendingMembersListB);\n  Set<ByteString> removedRequestingMemberUuids=subtract(requestingMembersListA,requestingMembersListB);\n  Set<ByteString> newPendingMemberUuids=subtract(pendingMembersListB,pendingMembersListA);\n  Set<ByteString> newRequestingMemberUuids=subtract(requestingMembersListB,requestingMembersListA);\n  Set<ByteString> removedMemberUuids=subtract(fromStateMemberUuids,toStateMemberUuids);\n  Set<ByteString> newMemberUuids=subtract(toStateMemberUuids,fromStateMemberUuids);\n  Set<ByteString> addedByInvitationUuids=intersect(newMemberUuids,removedPendingMemberUuids);\n  Set<ByteString> addedByRequestApprovalUuids=intersect(newMemberUuids,removedRequestingMemberUuids);\n  Set<DecryptedMember> addedMembersByInvitation=intersectByUUID(toState.getMembersList(),addedByInvitationUuids);\n  Set<DecryptedMember> addedMembersByRequestApproval=intersectByUUID(toState.getMembersList(),addedByRequestApprovalUuids);\n  Set<DecryptedMember> addedMembers=intersectByUUID(toState.getMembersList(),subtract(newMemberUuids,addedByInvitationUuids,addedByRequestApprovalUuids));\n  Set<DecryptedPendingMember> uninvitedMembers=intersectPendingByUUID(fromState.getPendingMembersList(),subtract(removedPendingMemberUuids,addedByInvitationUuids));\n  Set<DecryptedRequestingMember> rejectedRequestMembers=intersectRequestingByUUID(fromState.getRequestingMembersList(),subtract(removedRequestingMemberUuids,addedByRequestApprovalUuids));\n  for (  DecryptedMember member : intersectByUUID(fromState.getMembersList(),removedMemberUuids)) {\n    builder.addDeleteMembers(member.getUuid());\n  }\n  for (  DecryptedMember member : addedMembers) {\n    builder.addNewMembers(member);\n  }\n  for (  DecryptedMember member : addedMembersByInvitation) {\n    builder.addPromotePendingMembers(member);\n  }\n  for (  DecryptedPendingMember uninvitedMember : uninvitedMembers) {\n    builder.addDeletePendingMembers(DecryptedPendingMemberRemoval.newBuilder().setUuid(uninvitedMember.getUuid()).setUuidCipherText(uninvitedMember.getUuidCipherText()));\n  }\n  for (  DecryptedPendingMember invitedMember : intersectPendingByUUID(toState.getPendingMembersList(),newPendingMemberUuids)) {\n    builder.addNewPendingMembers(invitedMember);\n  }\n  Set<ByteString> consistentMemberUuids=intersect(fromStateMemberUuids,toStateMemberUuids);\n  Set<DecryptedMember> changedMembers=intersectByUUID(subtract(toState.getMembersList(),fromState.getMembersList()),consistentMemberUuids);\n  Map<ByteString,DecryptedMember> membersUuidMap=uuidMap(fromState.getMembersList());\n  for (  DecryptedMember newState : changedMembers) {\n    DecryptedMember oldState=membersUuidMap.get(newState.getUuid());\n    if (oldState.getRole() != newState.getRole()) {\n      builder.addModifyMemberRoles(DecryptedModifyMemberRole.newBuilder().setUuid(newState.getUuid()).setRole(newState.getRole()));\n    }\n    if (!oldState.getProfileKey().equals(newState.getProfileKey())) {\n      builder.addModifiedProfileKeys(newState);\n    }\n  }\n  if (!fromState.getAccessControl().getAddFromInviteLink().equals(toState.getAccessControl().getAddFromInviteLink())) {\n    builder.setNewInviteLinkAccess(toState.getAccessControl().getAddFromInviteLink());\n  }\n  for (  DecryptedRequestingMember requestingMember : intersectRequestingByUUID(toState.getRequestingMembersList(),newRequestingMemberUuids)) {\n    builder.addNewRequestingMembers(requestingMember);\n  }\n  for (  DecryptedRequestingMember requestingMember : rejectedRequestMembers) {\n    builder.addDeleteRequestingMembers(requestingMember.getUuid());\n  }\n  for (  DecryptedMember member : addedMembersByRequestApproval) {\n    builder.addPromoteRequestingMembers(DecryptedApproveMember.newBuilder().setUuid(member.getUuid()).setRole(member.getRole()));\n  }\n  if (!fromState.getInviteLinkPassword().equals(toState.getInviteLinkPassword())) {\n    builder.setNewInviteLinkPassword(toState.getInviteLinkPassword());\n  }\n  return builder.build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 729,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 254,
        "startLineNumber" : 135,
        "startColumnNumber" : 6,
        "endLineNumber" : 137,
        "endColumnNumber" : 91
      },
      "nodeContext" : "builder.addPromoteRequestingMembers(DecryptedApproveMember.newBuilder().setUuid(member.getUuid()).setRole(member.getRole()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "DecryptedGroupChange.Builder"
  }, {
    "nodeContext" : "builder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 141,
      "startColumnNumber" : 6,
      "endLineNumber" : 141,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 141,
        "startColumnNumber" : 6,
        "endLineNumber" : 141,
        "endColumnNumber" : 71
      },
      "nodeContext" : "builder.setNewInviteLinkPassword(toState.getInviteLinkPassword())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 141,
        "startColumnNumber" : 6,
        "endLineNumber" : 141,
        "endColumnNumber" : 72
      },
      "nodeContext" : "builder.setNewInviteLinkPassword(toState.getInviteLinkPassword());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 140,
        "startColumnNumber" : 84,
        "endLineNumber" : 142,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  builder.setNewInviteLinkPassword(toState.getInviteLinkPassword());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 160,
        "startLineNumber" : 140,
        "startColumnNumber" : 4,
        "endLineNumber" : 142,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!fromState.getInviteLinkPassword().equals(toState.getInviteLinkPassword())) {\n  builder.setNewInviteLinkPassword(toState.getInviteLinkPassword());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6770,
        "startLineNumber" : 27,
        "startColumnNumber" : 110,
        "endLineNumber" : 145,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  DecryptedGroupChange.Builder builder=DecryptedGroupChange.newBuilder().setRevision(toState.getRevision());\n  if (!fromState.getTitle().equals(toState.getTitle())) {\n    builder.setNewTitle(DecryptedString.newBuilder().setValue(toState.getTitle()));\n  }\n  if (!fromState.getDescription().equals(toState.getDescription())) {\n    builder.setNewDescription(DecryptedString.newBuilder().setValue(toState.getDescription()));\n  }\n  if (!fromState.getIsAnnouncementGroup().equals(toState.getIsAnnouncementGroup())) {\n    builder.setNewIsAnnouncementGroup(toState.getIsAnnouncementGroup());\n  }\n  if (!fromState.getAvatar().equals(toState.getAvatar())) {\n    builder.setNewAvatar(DecryptedString.newBuilder().setValue(toState.getAvatar()));\n  }\n  if (!fromState.getDisappearingMessagesTimer().equals(toState.getDisappearingMessagesTimer())) {\n    builder.setNewTimer(toState.getDisappearingMessagesTimer());\n  }\n  if (!fromState.getAccessControl().getAttributes().equals(toState.getAccessControl().getAttributes())) {\n    builder.setNewAttributeAccess(toState.getAccessControl().getAttributes());\n  }\n  if (!fromState.getAccessControl().getMembers().equals(toState.getAccessControl().getMembers())) {\n    builder.setNewMemberAccess(toState.getAccessControl().getMembers());\n  }\n  Set<ByteString> fromStateMemberUuids=membersToSetOfUuids(fromState.getMembersList());\n  Set<ByteString> toStateMemberUuids=membersToSetOfUuids(toState.getMembersList());\n  Set<ByteString> pendingMembersListA=pendingMembersToSetOfUuids(fromState.getPendingMembersList());\n  Set<ByteString> pendingMembersListB=pendingMembersToSetOfUuids(toState.getPendingMembersList());\n  Set<ByteString> requestingMembersListA=requestingMembersToSetOfUuids(fromState.getRequestingMembersList());\n  Set<ByteString> requestingMembersListB=requestingMembersToSetOfUuids(toState.getRequestingMembersList());\n  Set<ByteString> removedPendingMemberUuids=subtract(pendingMembersListA,pendingMembersListB);\n  Set<ByteString> removedRequestingMemberUuids=subtract(requestingMembersListA,requestingMembersListB);\n  Set<ByteString> newPendingMemberUuids=subtract(pendingMembersListB,pendingMembersListA);\n  Set<ByteString> newRequestingMemberUuids=subtract(requestingMembersListB,requestingMembersListA);\n  Set<ByteString> removedMemberUuids=subtract(fromStateMemberUuids,toStateMemberUuids);\n  Set<ByteString> newMemberUuids=subtract(toStateMemberUuids,fromStateMemberUuids);\n  Set<ByteString> addedByInvitationUuids=intersect(newMemberUuids,removedPendingMemberUuids);\n  Set<ByteString> addedByRequestApprovalUuids=intersect(newMemberUuids,removedRequestingMemberUuids);\n  Set<DecryptedMember> addedMembersByInvitation=intersectByUUID(toState.getMembersList(),addedByInvitationUuids);\n  Set<DecryptedMember> addedMembersByRequestApproval=intersectByUUID(toState.getMembersList(),addedByRequestApprovalUuids);\n  Set<DecryptedMember> addedMembers=intersectByUUID(toState.getMembersList(),subtract(newMemberUuids,addedByInvitationUuids,addedByRequestApprovalUuids));\n  Set<DecryptedPendingMember> uninvitedMembers=intersectPendingByUUID(fromState.getPendingMembersList(),subtract(removedPendingMemberUuids,addedByInvitationUuids));\n  Set<DecryptedRequestingMember> rejectedRequestMembers=intersectRequestingByUUID(fromState.getRequestingMembersList(),subtract(removedRequestingMemberUuids,addedByRequestApprovalUuids));\n  for (  DecryptedMember member : intersectByUUID(fromState.getMembersList(),removedMemberUuids)) {\n    builder.addDeleteMembers(member.getUuid());\n  }\n  for (  DecryptedMember member : addedMembers) {\n    builder.addNewMembers(member);\n  }\n  for (  DecryptedMember member : addedMembersByInvitation) {\n    builder.addPromotePendingMembers(member);\n  }\n  for (  DecryptedPendingMember uninvitedMember : uninvitedMembers) {\n    builder.addDeletePendingMembers(DecryptedPendingMemberRemoval.newBuilder().setUuid(uninvitedMember.getUuid()).setUuidCipherText(uninvitedMember.getUuidCipherText()));\n  }\n  for (  DecryptedPendingMember invitedMember : intersectPendingByUUID(toState.getPendingMembersList(),newPendingMemberUuids)) {\n    builder.addNewPendingMembers(invitedMember);\n  }\n  Set<ByteString> consistentMemberUuids=intersect(fromStateMemberUuids,toStateMemberUuids);\n  Set<DecryptedMember> changedMembers=intersectByUUID(subtract(toState.getMembersList(),fromState.getMembersList()),consistentMemberUuids);\n  Map<ByteString,DecryptedMember> membersUuidMap=uuidMap(fromState.getMembersList());\n  for (  DecryptedMember newState : changedMembers) {\n    DecryptedMember oldState=membersUuidMap.get(newState.getUuid());\n    if (oldState.getRole() != newState.getRole()) {\n      builder.addModifyMemberRoles(DecryptedModifyMemberRole.newBuilder().setUuid(newState.getUuid()).setRole(newState.getRole()));\n    }\n    if (!oldState.getProfileKey().equals(newState.getProfileKey())) {\n      builder.addModifiedProfileKeys(newState);\n    }\n  }\n  if (!fromState.getAccessControl().getAddFromInviteLink().equals(toState.getAccessControl().getAddFromInviteLink())) {\n    builder.setNewInviteLinkAccess(toState.getAccessControl().getAddFromInviteLink());\n  }\n  for (  DecryptedRequestingMember requestingMember : intersectRequestingByUUID(toState.getRequestingMembersList(),newRequestingMemberUuids)) {\n    builder.addNewRequestingMembers(requestingMember);\n  }\n  for (  DecryptedRequestingMember requestingMember : rejectedRequestMembers) {\n    builder.addDeleteRequestingMembers(requestingMember.getUuid());\n  }\n  for (  DecryptedMember member : addedMembersByRequestApproval) {\n    builder.addPromoteRequestingMembers(DecryptedApproveMember.newBuilder().setUuid(member.getUuid()).setRole(member.getRole()));\n  }\n  if (!fromState.getInviteLinkPassword().equals(toState.getInviteLinkPassword())) {\n    builder.setNewInviteLinkPassword(toState.getInviteLinkPassword());\n  }\n  return builder.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 714,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7048,
        "startLineNumber" : 24,
        "startColumnNumber" : 2,
        "endLineNumber" : 145,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Given a  {@param fromState} and a {@param toState} creates a {@link DecryptedGroupChange} that would take the {@param fromState} to the {@param toState}.\n */\npublic static DecryptedGroupChange reconstructGroupChange(DecryptedGroup fromState,DecryptedGroup toState){\n  DecryptedGroupChange.Builder builder=DecryptedGroupChange.newBuilder().setRevision(toState.getRevision());\n  if (!fromState.getTitle().equals(toState.getTitle())) {\n    builder.setNewTitle(DecryptedString.newBuilder().setValue(toState.getTitle()));\n  }\n  if (!fromState.getDescription().equals(toState.getDescription())) {\n    builder.setNewDescription(DecryptedString.newBuilder().setValue(toState.getDescription()));\n  }\n  if (!fromState.getIsAnnouncementGroup().equals(toState.getIsAnnouncementGroup())) {\n    builder.setNewIsAnnouncementGroup(toState.getIsAnnouncementGroup());\n  }\n  if (!fromState.getAvatar().equals(toState.getAvatar())) {\n    builder.setNewAvatar(DecryptedString.newBuilder().setValue(toState.getAvatar()));\n  }\n  if (!fromState.getDisappearingMessagesTimer().equals(toState.getDisappearingMessagesTimer())) {\n    builder.setNewTimer(toState.getDisappearingMessagesTimer());\n  }\n  if (!fromState.getAccessControl().getAttributes().equals(toState.getAccessControl().getAttributes())) {\n    builder.setNewAttributeAccess(toState.getAccessControl().getAttributes());\n  }\n  if (!fromState.getAccessControl().getMembers().equals(toState.getAccessControl().getMembers())) {\n    builder.setNewMemberAccess(toState.getAccessControl().getMembers());\n  }\n  Set<ByteString> fromStateMemberUuids=membersToSetOfUuids(fromState.getMembersList());\n  Set<ByteString> toStateMemberUuids=membersToSetOfUuids(toState.getMembersList());\n  Set<ByteString> pendingMembersListA=pendingMembersToSetOfUuids(fromState.getPendingMembersList());\n  Set<ByteString> pendingMembersListB=pendingMembersToSetOfUuids(toState.getPendingMembersList());\n  Set<ByteString> requestingMembersListA=requestingMembersToSetOfUuids(fromState.getRequestingMembersList());\n  Set<ByteString> requestingMembersListB=requestingMembersToSetOfUuids(toState.getRequestingMembersList());\n  Set<ByteString> removedPendingMemberUuids=subtract(pendingMembersListA,pendingMembersListB);\n  Set<ByteString> removedRequestingMemberUuids=subtract(requestingMembersListA,requestingMembersListB);\n  Set<ByteString> newPendingMemberUuids=subtract(pendingMembersListB,pendingMembersListA);\n  Set<ByteString> newRequestingMemberUuids=subtract(requestingMembersListB,requestingMembersListA);\n  Set<ByteString> removedMemberUuids=subtract(fromStateMemberUuids,toStateMemberUuids);\n  Set<ByteString> newMemberUuids=subtract(toStateMemberUuids,fromStateMemberUuids);\n  Set<ByteString> addedByInvitationUuids=intersect(newMemberUuids,removedPendingMemberUuids);\n  Set<ByteString> addedByRequestApprovalUuids=intersect(newMemberUuids,removedRequestingMemberUuids);\n  Set<DecryptedMember> addedMembersByInvitation=intersectByUUID(toState.getMembersList(),addedByInvitationUuids);\n  Set<DecryptedMember> addedMembersByRequestApproval=intersectByUUID(toState.getMembersList(),addedByRequestApprovalUuids);\n  Set<DecryptedMember> addedMembers=intersectByUUID(toState.getMembersList(),subtract(newMemberUuids,addedByInvitationUuids,addedByRequestApprovalUuids));\n  Set<DecryptedPendingMember> uninvitedMembers=intersectPendingByUUID(fromState.getPendingMembersList(),subtract(removedPendingMemberUuids,addedByInvitationUuids));\n  Set<DecryptedRequestingMember> rejectedRequestMembers=intersectRequestingByUUID(fromState.getRequestingMembersList(),subtract(removedRequestingMemberUuids,addedByRequestApprovalUuids));\n  for (  DecryptedMember member : intersectByUUID(fromState.getMembersList(),removedMemberUuids)) {\n    builder.addDeleteMembers(member.getUuid());\n  }\n  for (  DecryptedMember member : addedMembers) {\n    builder.addNewMembers(member);\n  }\n  for (  DecryptedMember member : addedMembersByInvitation) {\n    builder.addPromotePendingMembers(member);\n  }\n  for (  DecryptedPendingMember uninvitedMember : uninvitedMembers) {\n    builder.addDeletePendingMembers(DecryptedPendingMemberRemoval.newBuilder().setUuid(uninvitedMember.getUuid()).setUuidCipherText(uninvitedMember.getUuidCipherText()));\n  }\n  for (  DecryptedPendingMember invitedMember : intersectPendingByUUID(toState.getPendingMembersList(),newPendingMemberUuids)) {\n    builder.addNewPendingMembers(invitedMember);\n  }\n  Set<ByteString> consistentMemberUuids=intersect(fromStateMemberUuids,toStateMemberUuids);\n  Set<DecryptedMember> changedMembers=intersectByUUID(subtract(toState.getMembersList(),fromState.getMembersList()),consistentMemberUuids);\n  Map<ByteString,DecryptedMember> membersUuidMap=uuidMap(fromState.getMembersList());\n  for (  DecryptedMember newState : changedMembers) {\n    DecryptedMember oldState=membersUuidMap.get(newState.getUuid());\n    if (oldState.getRole() != newState.getRole()) {\n      builder.addModifyMemberRoles(DecryptedModifyMemberRole.newBuilder().setUuid(newState.getUuid()).setRole(newState.getRole()));\n    }\n    if (!oldState.getProfileKey().equals(newState.getProfileKey())) {\n      builder.addModifiedProfileKeys(newState);\n    }\n  }\n  if (!fromState.getAccessControl().getAddFromInviteLink().equals(toState.getAccessControl().getAddFromInviteLink())) {\n    builder.setNewInviteLinkAccess(toState.getAccessControl().getAddFromInviteLink());\n  }\n  for (  DecryptedRequestingMember requestingMember : intersectRequestingByUUID(toState.getRequestingMembersList(),newRequestingMemberUuids)) {\n    builder.addNewRequestingMembers(requestingMember);\n  }\n  for (  DecryptedRequestingMember requestingMember : rejectedRequestMembers) {\n    builder.addDeleteRequestingMembers(requestingMember.getUuid());\n  }\n  for (  DecryptedMember member : addedMembersByRequestApproval) {\n    builder.addPromoteRequestingMembers(DecryptedApproveMember.newBuilder().setUuid(member.getUuid()).setRole(member.getRole()));\n  }\n  if (!fromState.getInviteLinkPassword().equals(toState.getInviteLinkPassword())) {\n    builder.setNewInviteLinkPassword(toState.getInviteLinkPassword());\n  }\n  return builder.build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 729,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 141,
        "startColumnNumber" : 6,
        "endLineNumber" : 141,
        "endColumnNumber" : 72
      },
      "nodeContext" : "builder.setNewInviteLinkPassword(toState.getInviteLinkPassword());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "DecryptedGroupChange.Builder"
  }, {
    "nodeContext" : "builder",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 144,
      "startColumnNumber" : 11,
      "endLineNumber" : 144,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 144,
        "startColumnNumber" : 11,
        "endLineNumber" : 144,
        "endColumnNumber" : 26
      },
      "nodeContext" : "builder.build()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 144,
        "startColumnNumber" : 4,
        "endLineNumber" : 144,
        "endColumnNumber" : 27
      },
      "nodeContext" : "return builder.build();\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6770,
        "startLineNumber" : 27,
        "startColumnNumber" : 110,
        "endLineNumber" : 145,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  DecryptedGroupChange.Builder builder=DecryptedGroupChange.newBuilder().setRevision(toState.getRevision());\n  if (!fromState.getTitle().equals(toState.getTitle())) {\n    builder.setNewTitle(DecryptedString.newBuilder().setValue(toState.getTitle()));\n  }\n  if (!fromState.getDescription().equals(toState.getDescription())) {\n    builder.setNewDescription(DecryptedString.newBuilder().setValue(toState.getDescription()));\n  }\n  if (!fromState.getIsAnnouncementGroup().equals(toState.getIsAnnouncementGroup())) {\n    builder.setNewIsAnnouncementGroup(toState.getIsAnnouncementGroup());\n  }\n  if (!fromState.getAvatar().equals(toState.getAvatar())) {\n    builder.setNewAvatar(DecryptedString.newBuilder().setValue(toState.getAvatar()));\n  }\n  if (!fromState.getDisappearingMessagesTimer().equals(toState.getDisappearingMessagesTimer())) {\n    builder.setNewTimer(toState.getDisappearingMessagesTimer());\n  }\n  if (!fromState.getAccessControl().getAttributes().equals(toState.getAccessControl().getAttributes())) {\n    builder.setNewAttributeAccess(toState.getAccessControl().getAttributes());\n  }\n  if (!fromState.getAccessControl().getMembers().equals(toState.getAccessControl().getMembers())) {\n    builder.setNewMemberAccess(toState.getAccessControl().getMembers());\n  }\n  Set<ByteString> fromStateMemberUuids=membersToSetOfUuids(fromState.getMembersList());\n  Set<ByteString> toStateMemberUuids=membersToSetOfUuids(toState.getMembersList());\n  Set<ByteString> pendingMembersListA=pendingMembersToSetOfUuids(fromState.getPendingMembersList());\n  Set<ByteString> pendingMembersListB=pendingMembersToSetOfUuids(toState.getPendingMembersList());\n  Set<ByteString> requestingMembersListA=requestingMembersToSetOfUuids(fromState.getRequestingMembersList());\n  Set<ByteString> requestingMembersListB=requestingMembersToSetOfUuids(toState.getRequestingMembersList());\n  Set<ByteString> removedPendingMemberUuids=subtract(pendingMembersListA,pendingMembersListB);\n  Set<ByteString> removedRequestingMemberUuids=subtract(requestingMembersListA,requestingMembersListB);\n  Set<ByteString> newPendingMemberUuids=subtract(pendingMembersListB,pendingMembersListA);\n  Set<ByteString> newRequestingMemberUuids=subtract(requestingMembersListB,requestingMembersListA);\n  Set<ByteString> removedMemberUuids=subtract(fromStateMemberUuids,toStateMemberUuids);\n  Set<ByteString> newMemberUuids=subtract(toStateMemberUuids,fromStateMemberUuids);\n  Set<ByteString> addedByInvitationUuids=intersect(newMemberUuids,removedPendingMemberUuids);\n  Set<ByteString> addedByRequestApprovalUuids=intersect(newMemberUuids,removedRequestingMemberUuids);\n  Set<DecryptedMember> addedMembersByInvitation=intersectByUUID(toState.getMembersList(),addedByInvitationUuids);\n  Set<DecryptedMember> addedMembersByRequestApproval=intersectByUUID(toState.getMembersList(),addedByRequestApprovalUuids);\n  Set<DecryptedMember> addedMembers=intersectByUUID(toState.getMembersList(),subtract(newMemberUuids,addedByInvitationUuids,addedByRequestApprovalUuids));\n  Set<DecryptedPendingMember> uninvitedMembers=intersectPendingByUUID(fromState.getPendingMembersList(),subtract(removedPendingMemberUuids,addedByInvitationUuids));\n  Set<DecryptedRequestingMember> rejectedRequestMembers=intersectRequestingByUUID(fromState.getRequestingMembersList(),subtract(removedRequestingMemberUuids,addedByRequestApprovalUuids));\n  for (  DecryptedMember member : intersectByUUID(fromState.getMembersList(),removedMemberUuids)) {\n    builder.addDeleteMembers(member.getUuid());\n  }\n  for (  DecryptedMember member : addedMembers) {\n    builder.addNewMembers(member);\n  }\n  for (  DecryptedMember member : addedMembersByInvitation) {\n    builder.addPromotePendingMembers(member);\n  }\n  for (  DecryptedPendingMember uninvitedMember : uninvitedMembers) {\n    builder.addDeletePendingMembers(DecryptedPendingMemberRemoval.newBuilder().setUuid(uninvitedMember.getUuid()).setUuidCipherText(uninvitedMember.getUuidCipherText()));\n  }\n  for (  DecryptedPendingMember invitedMember : intersectPendingByUUID(toState.getPendingMembersList(),newPendingMemberUuids)) {\n    builder.addNewPendingMembers(invitedMember);\n  }\n  Set<ByteString> consistentMemberUuids=intersect(fromStateMemberUuids,toStateMemberUuids);\n  Set<DecryptedMember> changedMembers=intersectByUUID(subtract(toState.getMembersList(),fromState.getMembersList()),consistentMemberUuids);\n  Map<ByteString,DecryptedMember> membersUuidMap=uuidMap(fromState.getMembersList());\n  for (  DecryptedMember newState : changedMembers) {\n    DecryptedMember oldState=membersUuidMap.get(newState.getUuid());\n    if (oldState.getRole() != newState.getRole()) {\n      builder.addModifyMemberRoles(DecryptedModifyMemberRole.newBuilder().setUuid(newState.getUuid()).setRole(newState.getRole()));\n    }\n    if (!oldState.getProfileKey().equals(newState.getProfileKey())) {\n      builder.addModifiedProfileKeys(newState);\n    }\n  }\n  if (!fromState.getAccessControl().getAddFromInviteLink().equals(toState.getAccessControl().getAddFromInviteLink())) {\n    builder.setNewInviteLinkAccess(toState.getAccessControl().getAddFromInviteLink());\n  }\n  for (  DecryptedRequestingMember requestingMember : intersectRequestingByUUID(toState.getRequestingMembersList(),newRequestingMemberUuids)) {\n    builder.addNewRequestingMembers(requestingMember);\n  }\n  for (  DecryptedRequestingMember requestingMember : rejectedRequestMembers) {\n    builder.addDeleteRequestingMembers(requestingMember.getUuid());\n  }\n  for (  DecryptedMember member : addedMembersByRequestApproval) {\n    builder.addPromoteRequestingMembers(DecryptedApproveMember.newBuilder().setUuid(member.getUuid()).setRole(member.getRole()));\n  }\n  if (!fromState.getInviteLinkPassword().equals(toState.getInviteLinkPassword())) {\n    builder.setNewInviteLinkPassword(toState.getInviteLinkPassword());\n  }\n  return builder.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 714,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7048,
        "startLineNumber" : 24,
        "startColumnNumber" : 2,
        "endLineNumber" : 145,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Given a  {@param fromState} and a {@param toState} creates a {@link DecryptedGroupChange} that would take the {@param fromState} to the {@param toState}.\n */\npublic static DecryptedGroupChange reconstructGroupChange(DecryptedGroup fromState,DecryptedGroup toState){\n  DecryptedGroupChange.Builder builder=DecryptedGroupChange.newBuilder().setRevision(toState.getRevision());\n  if (!fromState.getTitle().equals(toState.getTitle())) {\n    builder.setNewTitle(DecryptedString.newBuilder().setValue(toState.getTitle()));\n  }\n  if (!fromState.getDescription().equals(toState.getDescription())) {\n    builder.setNewDescription(DecryptedString.newBuilder().setValue(toState.getDescription()));\n  }\n  if (!fromState.getIsAnnouncementGroup().equals(toState.getIsAnnouncementGroup())) {\n    builder.setNewIsAnnouncementGroup(toState.getIsAnnouncementGroup());\n  }\n  if (!fromState.getAvatar().equals(toState.getAvatar())) {\n    builder.setNewAvatar(DecryptedString.newBuilder().setValue(toState.getAvatar()));\n  }\n  if (!fromState.getDisappearingMessagesTimer().equals(toState.getDisappearingMessagesTimer())) {\n    builder.setNewTimer(toState.getDisappearingMessagesTimer());\n  }\n  if (!fromState.getAccessControl().getAttributes().equals(toState.getAccessControl().getAttributes())) {\n    builder.setNewAttributeAccess(toState.getAccessControl().getAttributes());\n  }\n  if (!fromState.getAccessControl().getMembers().equals(toState.getAccessControl().getMembers())) {\n    builder.setNewMemberAccess(toState.getAccessControl().getMembers());\n  }\n  Set<ByteString> fromStateMemberUuids=membersToSetOfUuids(fromState.getMembersList());\n  Set<ByteString> toStateMemberUuids=membersToSetOfUuids(toState.getMembersList());\n  Set<ByteString> pendingMembersListA=pendingMembersToSetOfUuids(fromState.getPendingMembersList());\n  Set<ByteString> pendingMembersListB=pendingMembersToSetOfUuids(toState.getPendingMembersList());\n  Set<ByteString> requestingMembersListA=requestingMembersToSetOfUuids(fromState.getRequestingMembersList());\n  Set<ByteString> requestingMembersListB=requestingMembersToSetOfUuids(toState.getRequestingMembersList());\n  Set<ByteString> removedPendingMemberUuids=subtract(pendingMembersListA,pendingMembersListB);\n  Set<ByteString> removedRequestingMemberUuids=subtract(requestingMembersListA,requestingMembersListB);\n  Set<ByteString> newPendingMemberUuids=subtract(pendingMembersListB,pendingMembersListA);\n  Set<ByteString> newRequestingMemberUuids=subtract(requestingMembersListB,requestingMembersListA);\n  Set<ByteString> removedMemberUuids=subtract(fromStateMemberUuids,toStateMemberUuids);\n  Set<ByteString> newMemberUuids=subtract(toStateMemberUuids,fromStateMemberUuids);\n  Set<ByteString> addedByInvitationUuids=intersect(newMemberUuids,removedPendingMemberUuids);\n  Set<ByteString> addedByRequestApprovalUuids=intersect(newMemberUuids,removedRequestingMemberUuids);\n  Set<DecryptedMember> addedMembersByInvitation=intersectByUUID(toState.getMembersList(),addedByInvitationUuids);\n  Set<DecryptedMember> addedMembersByRequestApproval=intersectByUUID(toState.getMembersList(),addedByRequestApprovalUuids);\n  Set<DecryptedMember> addedMembers=intersectByUUID(toState.getMembersList(),subtract(newMemberUuids,addedByInvitationUuids,addedByRequestApprovalUuids));\n  Set<DecryptedPendingMember> uninvitedMembers=intersectPendingByUUID(fromState.getPendingMembersList(),subtract(removedPendingMemberUuids,addedByInvitationUuids));\n  Set<DecryptedRequestingMember> rejectedRequestMembers=intersectRequestingByUUID(fromState.getRequestingMembersList(),subtract(removedRequestingMemberUuids,addedByRequestApprovalUuids));\n  for (  DecryptedMember member : intersectByUUID(fromState.getMembersList(),removedMemberUuids)) {\n    builder.addDeleteMembers(member.getUuid());\n  }\n  for (  DecryptedMember member : addedMembers) {\n    builder.addNewMembers(member);\n  }\n  for (  DecryptedMember member : addedMembersByInvitation) {\n    builder.addPromotePendingMembers(member);\n  }\n  for (  DecryptedPendingMember uninvitedMember : uninvitedMembers) {\n    builder.addDeletePendingMembers(DecryptedPendingMemberRemoval.newBuilder().setUuid(uninvitedMember.getUuid()).setUuidCipherText(uninvitedMember.getUuidCipherText()));\n  }\n  for (  DecryptedPendingMember invitedMember : intersectPendingByUUID(toState.getPendingMembersList(),newPendingMemberUuids)) {\n    builder.addNewPendingMembers(invitedMember);\n  }\n  Set<ByteString> consistentMemberUuids=intersect(fromStateMemberUuids,toStateMemberUuids);\n  Set<DecryptedMember> changedMembers=intersectByUUID(subtract(toState.getMembersList(),fromState.getMembersList()),consistentMemberUuids);\n  Map<ByteString,DecryptedMember> membersUuidMap=uuidMap(fromState.getMembersList());\n  for (  DecryptedMember newState : changedMembers) {\n    DecryptedMember oldState=membersUuidMap.get(newState.getUuid());\n    if (oldState.getRole() != newState.getRole()) {\n      builder.addModifyMemberRoles(DecryptedModifyMemberRole.newBuilder().setUuid(newState.getUuid()).setRole(newState.getRole()));\n    }\n    if (!oldState.getProfileKey().equals(newState.getProfileKey())) {\n      builder.addModifiedProfileKeys(newState);\n    }\n  }\n  if (!fromState.getAccessControl().getAddFromInviteLink().equals(toState.getAccessControl().getAddFromInviteLink())) {\n    builder.setNewInviteLinkAccess(toState.getAccessControl().getAddFromInviteLink());\n  }\n  for (  DecryptedRequestingMember requestingMember : intersectRequestingByUUID(toState.getRequestingMembersList(),newRequestingMemberUuids)) {\n    builder.addNewRequestingMembers(requestingMember);\n  }\n  for (  DecryptedRequestingMember requestingMember : rejectedRequestMembers) {\n    builder.addDeleteRequestingMembers(requestingMember.getUuid());\n  }\n  for (  DecryptedMember member : addedMembersByRequestApproval) {\n    builder.addPromoteRequestingMembers(DecryptedApproveMember.newBuilder().setUuid(member.getUuid()).setRole(member.getRole()));\n  }\n  if (!fromState.getInviteLinkPassword().equals(toState.getInviteLinkPassword())) {\n    builder.setNewInviteLinkPassword(toState.getInviteLinkPassword());\n  }\n  return builder.build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 729,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 144,
        "startColumnNumber" : 4,
        "endLineNumber" : 144,
        "endColumnNumber" : 27
      },
      "nodeContext" : "return builder.build();\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "DecryptedGroupChange.Builder"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 32,
    "startColumnNumber" : 6,
    "endLineNumber" : 32,
    "endColumnNumber" : 13
  }, {
    "charLength" : 7,
    "startLineNumber" : 36,
    "startColumnNumber" : 6,
    "endLineNumber" : 36,
    "endColumnNumber" : 13
  }, {
    "charLength" : 7,
    "startLineNumber" : 40,
    "startColumnNumber" : 6,
    "endLineNumber" : 40,
    "endColumnNumber" : 13
  }, {
    "charLength" : 7,
    "startLineNumber" : 44,
    "startColumnNumber" : 6,
    "endLineNumber" : 44,
    "endColumnNumber" : 13
  }, {
    "charLength" : 7,
    "startLineNumber" : 48,
    "startColumnNumber" : 6,
    "endLineNumber" : 48,
    "endColumnNumber" : 13
  }, {
    "charLength" : 7,
    "startLineNumber" : 52,
    "startColumnNumber" : 6,
    "endLineNumber" : 52,
    "endColumnNumber" : 13
  }, {
    "charLength" : 7,
    "startLineNumber" : 56,
    "startColumnNumber" : 6,
    "endLineNumber" : 56,
    "endColumnNumber" : 13
  }, {
    "charLength" : 7,
    "startLineNumber" : 84,
    "startColumnNumber" : 6,
    "endLineNumber" : 84,
    "endColumnNumber" : 13
  }, {
    "charLength" : 7,
    "startLineNumber" : 88,
    "startColumnNumber" : 6,
    "endLineNumber" : 88,
    "endColumnNumber" : 13
  }, {
    "charLength" : 7,
    "startLineNumber" : 92,
    "startColumnNumber" : 6,
    "endLineNumber" : 92,
    "endColumnNumber" : 13
  }, {
    "charLength" : 7,
    "startLineNumber" : 96,
    "startColumnNumber" : 6,
    "endLineNumber" : 96,
    "endColumnNumber" : 13
  }, {
    "charLength" : 7,
    "startLineNumber" : 102,
    "startColumnNumber" : 6,
    "endLineNumber" : 102,
    "endColumnNumber" : 13
  }, {
    "charLength" : 7,
    "startLineNumber" : 112,
    "startColumnNumber" : 8,
    "endLineNumber" : 112,
    "endColumnNumber" : 15
  }, {
    "charLength" : 7,
    "startLineNumber" : 118,
    "startColumnNumber" : 8,
    "endLineNumber" : 118,
    "endColumnNumber" : 15
  }, {
    "charLength" : 7,
    "startLineNumber" : 123,
    "startColumnNumber" : 6,
    "endLineNumber" : 123,
    "endColumnNumber" : 13
  }, {
    "charLength" : 7,
    "startLineNumber" : 127,
    "startColumnNumber" : 6,
    "endLineNumber" : 127,
    "endColumnNumber" : 13
  }, {
    "charLength" : 7,
    "startLineNumber" : 131,
    "startColumnNumber" : 6,
    "endLineNumber" : 131,
    "endColumnNumber" : 13
  }, {
    "charLength" : 7,
    "startLineNumber" : 135,
    "startColumnNumber" : 6,
    "endLineNumber" : 135,
    "endColumnNumber" : 13
  }, {
    "charLength" : 7,
    "startLineNumber" : 141,
    "startColumnNumber" : 6,
    "endLineNumber" : 141,
    "endColumnNumber" : 13
  }, {
    "charLength" : 7,
    "startLineNumber" : 144,
    "startColumnNumber" : 11,
    "endLineNumber" : 144,
    "endColumnNumber" : 18
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 13,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 18,
    "layout" : 2
  } ]
}