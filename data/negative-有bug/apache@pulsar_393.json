{
  "id" : 393,
  "expression" : "MessageId.latest",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-functions/worker/src/test/java/org/apache/pulsar/functions/worker/FunctionAssignmentTailerTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "MessageId.latest",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 98,
      "startColumnNumber" : 54,
      "endLineNumber" : 98,
      "endColumnNumber" : 70
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 98,
        "startColumnNumber" : 54,
        "endLineNumber" : 98,
        "endColumnNumber" : 81
      },
      "nodeContext" : "MessageId.latest.toString()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 150,
        "startLineNumber" : 98,
        "startColumnNumber" : 31,
        "endLineNumber" : 99,
        "endColumnNumber" : 98
      },
      "nodeContext" : "new MessageImpl(\"foo\",MessageId.latest.toString(),new HashMap<>(),Unpooled.copiedBuffer(assignment1.toByteArray()),null,metadata)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 21,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 155,
        "startLineNumber" : 98,
        "startColumnNumber" : 27,
        "endLineNumber" : 99,
        "endColumnNumber" : 99
      },
      "nodeContext" : "spy(new MessageImpl(\"foo\",MessageId.latest.toString(),new HashMap<>(),Unpooled.copiedBuffer(assignment1.toByteArray()),null,metadata))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 166,
        "startLineNumber" : 98,
        "startColumnNumber" : 16,
        "endLineNumber" : 99,
        "endColumnNumber" : 99
      },
      "nodeContext" : "message1=spy(new MessageImpl(\"foo\",MessageId.latest.toString(),new HashMap<>(),Unpooled.copiedBuffer(assignment1.toByteArray()),null,metadata))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 175,
        "startLineNumber" : 98,
        "startColumnNumber" : 8,
        "endLineNumber" : 99,
        "endColumnNumber" : 100
      },
      "nodeContext" : "Message message1=spy(new MessageImpl(\"foo\",MessageId.latest.toString(),new HashMap<>(),Unpooled.copiedBuffer(assignment1.toByteArray()),null,metadata));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 28,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5399,
        "startLineNumber" : 66,
        "startColumnNumber" : 53,
        "endLineNumber" : 174,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  WorkerConfig workerConfig=new WorkerConfig();\n  workerConfig.setWorkerId(\"worker-1\");\n  workerConfig.setFunctionRuntimeFactoryClassName(ThreadRuntimeFactory.class.getName());\n  workerConfig.setFunctionRuntimeFactoryConfigs(ObjectMapperFactory.getThreadLocal().convertValue(new ThreadRuntimeFactoryConfig().setThreadGroupName(\"test\"),Map.class));\n  workerConfig.setPulsarServiceUrl(\"pulsar://localhost:6650\");\n  workerConfig.setStateStorageServiceUrl(\"foo\");\n  workerConfig.setFunctionAssignmentTopicName(\"assignments\");\n  Function.FunctionMetaData function1=Function.FunctionMetaData.newBuilder().setFunctionDetails(Function.FunctionDetails.newBuilder().setTenant(\"test-tenant\").setNamespace(\"test-namespace\").setName(\"func-1\")).build();\n  Function.FunctionMetaData function2=Function.FunctionMetaData.newBuilder().setFunctionDetails(Function.FunctionDetails.newBuilder().setTenant(\"test-tenant\").setNamespace(\"test-namespace\").setName(\"func-2\")).build();\n  Function.Assignment assignment1=Function.Assignment.newBuilder().setWorkerId(\"worker-1\").setInstance(Function.Instance.newBuilder().setFunctionMetaData(function1).setInstanceId(0).build()).build();\n  Function.Assignment assignment2=Function.Assignment.newBuilder().setWorkerId(\"worker-1\").setInstance(Function.Instance.newBuilder().setFunctionMetaData(function2).setInstanceId(0).build()).build();\n  ArrayBlockingQueue<Message<byte[]>> messageList=new ArrayBlockingQueue<>(2);\n  MessageMetadata metadata=new MessageMetadata();\n  Message message1=spy(new MessageImpl(\"foo\",MessageId.latest.toString(),new HashMap<>(),Unpooled.copiedBuffer(assignment1.toByteArray()),null,metadata));\n  doReturn(FunctionCommon.getFullyQualifiedInstanceId(assignment1.getInstance())).when(message1).getKey();\n  Message message2=spy(new MessageImpl(\"foo\",MessageId.latest.toString(),new HashMap<>(),Unpooled.copiedBuffer(assignment2.toByteArray()),null,metadata));\n  doReturn(FunctionCommon.getFullyQualifiedInstanceId(assignment2.getInstance())).when(message2).getKey();\n  PulsarClient pulsarClient=mock(PulsarClient.class);\n  Reader<byte[]> reader=mock(Reader.class);\n  when(reader.readNext(anyInt(),any())).thenAnswer(new Answer<Message<byte[]>>(){\n    @Override public Message<byte[]> answer(    InvocationOnMock invocationOnMock) throws Throwable {\n      return messageList.poll(10,TimeUnit.SECONDS);\n    }\n  }\n);\n  when(reader.readNextAsync()).thenAnswer(new Answer<CompletableFuture<Message<byte[]>>>(){\n    @Override public CompletableFuture<Message<byte[]>> answer(    InvocationOnMock invocationOnMock) throws Throwable {\n      return new CompletableFuture<>();\n    }\n  }\n);\n  when(reader.hasMessageAvailable()).thenAnswer(new Answer<Boolean>(){\n    @Override public Boolean answer(    InvocationOnMock invocationOnMock) throws Throwable {\n      return !messageList.isEmpty();\n    }\n  }\n);\n  ReaderBuilder readerBuilder=mock(ReaderBuilder.class);\n  doReturn(readerBuilder).when(pulsarClient).newReader();\n  doReturn(readerBuilder).when(readerBuilder).topic(anyString());\n  doReturn(readerBuilder).when(readerBuilder).readerName(anyString());\n  doReturn(readerBuilder).when(readerBuilder).subscriptionRolePrefix(anyString());\n  doReturn(readerBuilder).when(readerBuilder).startMessageId(any());\n  doReturn(readerBuilder).when(readerBuilder).startMessageId(any());\n  doReturn(readerBuilder).when(readerBuilder).readCompacted(anyBoolean());\n  doReturn(reader).when(readerBuilder).create();\n  PulsarWorkerService workerService=mock(PulsarWorkerService.class);\n  doReturn(pulsarClient).when(workerService).getClient();\n  doReturn(mock(PulsarAdmin.class)).when(workerService).getFunctionAdmin();\n  ErrorNotifier errorNotifier=spy(ErrorNotifier.getDefaultImpl());\n  FunctionRuntimeManager functionRuntimeManager=mock(FunctionRuntimeManager.class);\n  FunctionAssignmentTailer functionAssignmentTailer=spy(new FunctionAssignmentTailer(functionRuntimeManager,readerBuilder,workerConfig,errorNotifier));\n  functionAssignmentTailer.start();\n  verify(errorNotifier,times(0)).triggerError(any());\n  messageList.add(message1);\n  verify(errorNotifier,times(0)).triggerError(any());\n  doThrow(new RuntimeException(\"test\")).when(functionRuntimeManager).processAssignmentMessage(any());\n  messageList.add(message2);\n  try {\n    errorNotifier.waitForError();\n  }\n catch (  Exception e) {\n    assertEquals(e.getCause().getMessage(),\"test\");\n  }\n  verify(errorNotifier,times(1)).triggerError(any());\n  functionAssignmentTailer.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 690,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5475,
        "startLineNumber" : 65,
        "startColumnNumber" : 4,
        "endLineNumber" : 174,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test(timeOut=10000) public void testErrorNotifier() throws Exception {\n  WorkerConfig workerConfig=new WorkerConfig();\n  workerConfig.setWorkerId(\"worker-1\");\n  workerConfig.setFunctionRuntimeFactoryClassName(ThreadRuntimeFactory.class.getName());\n  workerConfig.setFunctionRuntimeFactoryConfigs(ObjectMapperFactory.getThreadLocal().convertValue(new ThreadRuntimeFactoryConfig().setThreadGroupName(\"test\"),Map.class));\n  workerConfig.setPulsarServiceUrl(\"pulsar://localhost:6650\");\n  workerConfig.setStateStorageServiceUrl(\"foo\");\n  workerConfig.setFunctionAssignmentTopicName(\"assignments\");\n  Function.FunctionMetaData function1=Function.FunctionMetaData.newBuilder().setFunctionDetails(Function.FunctionDetails.newBuilder().setTenant(\"test-tenant\").setNamespace(\"test-namespace\").setName(\"func-1\")).build();\n  Function.FunctionMetaData function2=Function.FunctionMetaData.newBuilder().setFunctionDetails(Function.FunctionDetails.newBuilder().setTenant(\"test-tenant\").setNamespace(\"test-namespace\").setName(\"func-2\")).build();\n  Function.Assignment assignment1=Function.Assignment.newBuilder().setWorkerId(\"worker-1\").setInstance(Function.Instance.newBuilder().setFunctionMetaData(function1).setInstanceId(0).build()).build();\n  Function.Assignment assignment2=Function.Assignment.newBuilder().setWorkerId(\"worker-1\").setInstance(Function.Instance.newBuilder().setFunctionMetaData(function2).setInstanceId(0).build()).build();\n  ArrayBlockingQueue<Message<byte[]>> messageList=new ArrayBlockingQueue<>(2);\n  MessageMetadata metadata=new MessageMetadata();\n  Message message1=spy(new MessageImpl(\"foo\",MessageId.latest.toString(),new HashMap<>(),Unpooled.copiedBuffer(assignment1.toByteArray()),null,metadata));\n  doReturn(FunctionCommon.getFullyQualifiedInstanceId(assignment1.getInstance())).when(message1).getKey();\n  Message message2=spy(new MessageImpl(\"foo\",MessageId.latest.toString(),new HashMap<>(),Unpooled.copiedBuffer(assignment2.toByteArray()),null,metadata));\n  doReturn(FunctionCommon.getFullyQualifiedInstanceId(assignment2.getInstance())).when(message2).getKey();\n  PulsarClient pulsarClient=mock(PulsarClient.class);\n  Reader<byte[]> reader=mock(Reader.class);\n  when(reader.readNext(anyInt(),any())).thenAnswer(new Answer<Message<byte[]>>(){\n    @Override public Message<byte[]> answer(    InvocationOnMock invocationOnMock) throws Throwable {\n      return messageList.poll(10,TimeUnit.SECONDS);\n    }\n  }\n);\n  when(reader.readNextAsync()).thenAnswer(new Answer<CompletableFuture<Message<byte[]>>>(){\n    @Override public CompletableFuture<Message<byte[]>> answer(    InvocationOnMock invocationOnMock) throws Throwable {\n      return new CompletableFuture<>();\n    }\n  }\n);\n  when(reader.hasMessageAvailable()).thenAnswer(new Answer<Boolean>(){\n    @Override public Boolean answer(    InvocationOnMock invocationOnMock) throws Throwable {\n      return !messageList.isEmpty();\n    }\n  }\n);\n  ReaderBuilder readerBuilder=mock(ReaderBuilder.class);\n  doReturn(readerBuilder).when(pulsarClient).newReader();\n  doReturn(readerBuilder).when(readerBuilder).topic(anyString());\n  doReturn(readerBuilder).when(readerBuilder).readerName(anyString());\n  doReturn(readerBuilder).when(readerBuilder).subscriptionRolePrefix(anyString());\n  doReturn(readerBuilder).when(readerBuilder).startMessageId(any());\n  doReturn(readerBuilder).when(readerBuilder).startMessageId(any());\n  doReturn(readerBuilder).when(readerBuilder).readCompacted(anyBoolean());\n  doReturn(reader).when(readerBuilder).create();\n  PulsarWorkerService workerService=mock(PulsarWorkerService.class);\n  doReturn(pulsarClient).when(workerService).getClient();\n  doReturn(mock(PulsarAdmin.class)).when(workerService).getFunctionAdmin();\n  ErrorNotifier errorNotifier=spy(ErrorNotifier.getDefaultImpl());\n  FunctionRuntimeManager functionRuntimeManager=mock(FunctionRuntimeManager.class);\n  FunctionAssignmentTailer functionAssignmentTailer=spy(new FunctionAssignmentTailer(functionRuntimeManager,readerBuilder,workerConfig,errorNotifier));\n  functionAssignmentTailer.start();\n  verify(errorNotifier,times(0)).triggerError(any());\n  messageList.add(message1);\n  verify(errorNotifier,times(0)).triggerError(any());\n  doThrow(new RuntimeException(\"test\")).when(functionRuntimeManager).processAssignmentMessage(any());\n  messageList.add(message2);\n  try {\n    errorNotifier.waitForError();\n  }\n catch (  Exception e) {\n    assertEquals(e.getCause().getMessage(),\"test\");\n  }\n  verify(errorNotifier,times(1)).triggerError(any());\n  functionAssignmentTailer.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 701,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 98,
        "startColumnNumber" : 54,
        "endLineNumber" : 98,
        "endColumnNumber" : 81
      },
      "nodeContext" : "MessageId.latest.toString()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "org.apache.pulsar.client.api.MessageId"
  }, {
    "nodeContext" : "MessageId.latest",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 102,
      "startColumnNumber" : 54,
      "endLineNumber" : 102,
      "endColumnNumber" : 70
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 102,
        "startColumnNumber" : 54,
        "endLineNumber" : 102,
        "endColumnNumber" : 81
      },
      "nodeContext" : "MessageId.latest.toString()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 150,
        "startLineNumber" : 102,
        "startColumnNumber" : 31,
        "endLineNumber" : 103,
        "endColumnNumber" : 98
      },
      "nodeContext" : "new MessageImpl(\"foo\",MessageId.latest.toString(),new HashMap<>(),Unpooled.copiedBuffer(assignment2.toByteArray()),null,metadata)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 21,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 155,
        "startLineNumber" : 102,
        "startColumnNumber" : 27,
        "endLineNumber" : 103,
        "endColumnNumber" : 99
      },
      "nodeContext" : "spy(new MessageImpl(\"foo\",MessageId.latest.toString(),new HashMap<>(),Unpooled.copiedBuffer(assignment2.toByteArray()),null,metadata))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 166,
        "startLineNumber" : 102,
        "startColumnNumber" : 16,
        "endLineNumber" : 103,
        "endColumnNumber" : 99
      },
      "nodeContext" : "message2=spy(new MessageImpl(\"foo\",MessageId.latest.toString(),new HashMap<>(),Unpooled.copiedBuffer(assignment2.toByteArray()),null,metadata))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 175,
        "startLineNumber" : 102,
        "startColumnNumber" : 8,
        "endLineNumber" : 103,
        "endColumnNumber" : 100
      },
      "nodeContext" : "Message message2=spy(new MessageImpl(\"foo\",MessageId.latest.toString(),new HashMap<>(),Unpooled.copiedBuffer(assignment2.toByteArray()),null,metadata));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 28,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5399,
        "startLineNumber" : 66,
        "startColumnNumber" : 53,
        "endLineNumber" : 174,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  WorkerConfig workerConfig=new WorkerConfig();\n  workerConfig.setWorkerId(\"worker-1\");\n  workerConfig.setFunctionRuntimeFactoryClassName(ThreadRuntimeFactory.class.getName());\n  workerConfig.setFunctionRuntimeFactoryConfigs(ObjectMapperFactory.getThreadLocal().convertValue(new ThreadRuntimeFactoryConfig().setThreadGroupName(\"test\"),Map.class));\n  workerConfig.setPulsarServiceUrl(\"pulsar://localhost:6650\");\n  workerConfig.setStateStorageServiceUrl(\"foo\");\n  workerConfig.setFunctionAssignmentTopicName(\"assignments\");\n  Function.FunctionMetaData function1=Function.FunctionMetaData.newBuilder().setFunctionDetails(Function.FunctionDetails.newBuilder().setTenant(\"test-tenant\").setNamespace(\"test-namespace\").setName(\"func-1\")).build();\n  Function.FunctionMetaData function2=Function.FunctionMetaData.newBuilder().setFunctionDetails(Function.FunctionDetails.newBuilder().setTenant(\"test-tenant\").setNamespace(\"test-namespace\").setName(\"func-2\")).build();\n  Function.Assignment assignment1=Function.Assignment.newBuilder().setWorkerId(\"worker-1\").setInstance(Function.Instance.newBuilder().setFunctionMetaData(function1).setInstanceId(0).build()).build();\n  Function.Assignment assignment2=Function.Assignment.newBuilder().setWorkerId(\"worker-1\").setInstance(Function.Instance.newBuilder().setFunctionMetaData(function2).setInstanceId(0).build()).build();\n  ArrayBlockingQueue<Message<byte[]>> messageList=new ArrayBlockingQueue<>(2);\n  MessageMetadata metadata=new MessageMetadata();\n  Message message1=spy(new MessageImpl(\"foo\",MessageId.latest.toString(),new HashMap<>(),Unpooled.copiedBuffer(assignment1.toByteArray()),null,metadata));\n  doReturn(FunctionCommon.getFullyQualifiedInstanceId(assignment1.getInstance())).when(message1).getKey();\n  Message message2=spy(new MessageImpl(\"foo\",MessageId.latest.toString(),new HashMap<>(),Unpooled.copiedBuffer(assignment2.toByteArray()),null,metadata));\n  doReturn(FunctionCommon.getFullyQualifiedInstanceId(assignment2.getInstance())).when(message2).getKey();\n  PulsarClient pulsarClient=mock(PulsarClient.class);\n  Reader<byte[]> reader=mock(Reader.class);\n  when(reader.readNext(anyInt(),any())).thenAnswer(new Answer<Message<byte[]>>(){\n    @Override public Message<byte[]> answer(    InvocationOnMock invocationOnMock) throws Throwable {\n      return messageList.poll(10,TimeUnit.SECONDS);\n    }\n  }\n);\n  when(reader.readNextAsync()).thenAnswer(new Answer<CompletableFuture<Message<byte[]>>>(){\n    @Override public CompletableFuture<Message<byte[]>> answer(    InvocationOnMock invocationOnMock) throws Throwable {\n      return new CompletableFuture<>();\n    }\n  }\n);\n  when(reader.hasMessageAvailable()).thenAnswer(new Answer<Boolean>(){\n    @Override public Boolean answer(    InvocationOnMock invocationOnMock) throws Throwable {\n      return !messageList.isEmpty();\n    }\n  }\n);\n  ReaderBuilder readerBuilder=mock(ReaderBuilder.class);\n  doReturn(readerBuilder).when(pulsarClient).newReader();\n  doReturn(readerBuilder).when(readerBuilder).topic(anyString());\n  doReturn(readerBuilder).when(readerBuilder).readerName(anyString());\n  doReturn(readerBuilder).when(readerBuilder).subscriptionRolePrefix(anyString());\n  doReturn(readerBuilder).when(readerBuilder).startMessageId(any());\n  doReturn(readerBuilder).when(readerBuilder).startMessageId(any());\n  doReturn(readerBuilder).when(readerBuilder).readCompacted(anyBoolean());\n  doReturn(reader).when(readerBuilder).create();\n  PulsarWorkerService workerService=mock(PulsarWorkerService.class);\n  doReturn(pulsarClient).when(workerService).getClient();\n  doReturn(mock(PulsarAdmin.class)).when(workerService).getFunctionAdmin();\n  ErrorNotifier errorNotifier=spy(ErrorNotifier.getDefaultImpl());\n  FunctionRuntimeManager functionRuntimeManager=mock(FunctionRuntimeManager.class);\n  FunctionAssignmentTailer functionAssignmentTailer=spy(new FunctionAssignmentTailer(functionRuntimeManager,readerBuilder,workerConfig,errorNotifier));\n  functionAssignmentTailer.start();\n  verify(errorNotifier,times(0)).triggerError(any());\n  messageList.add(message1);\n  verify(errorNotifier,times(0)).triggerError(any());\n  doThrow(new RuntimeException(\"test\")).when(functionRuntimeManager).processAssignmentMessage(any());\n  messageList.add(message2);\n  try {\n    errorNotifier.waitForError();\n  }\n catch (  Exception e) {\n    assertEquals(e.getCause().getMessage(),\"test\");\n  }\n  verify(errorNotifier,times(1)).triggerError(any());\n  functionAssignmentTailer.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 690,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5475,
        "startLineNumber" : 65,
        "startColumnNumber" : 4,
        "endLineNumber" : 174,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test(timeOut=10000) public void testErrorNotifier() throws Exception {\n  WorkerConfig workerConfig=new WorkerConfig();\n  workerConfig.setWorkerId(\"worker-1\");\n  workerConfig.setFunctionRuntimeFactoryClassName(ThreadRuntimeFactory.class.getName());\n  workerConfig.setFunctionRuntimeFactoryConfigs(ObjectMapperFactory.getThreadLocal().convertValue(new ThreadRuntimeFactoryConfig().setThreadGroupName(\"test\"),Map.class));\n  workerConfig.setPulsarServiceUrl(\"pulsar://localhost:6650\");\n  workerConfig.setStateStorageServiceUrl(\"foo\");\n  workerConfig.setFunctionAssignmentTopicName(\"assignments\");\n  Function.FunctionMetaData function1=Function.FunctionMetaData.newBuilder().setFunctionDetails(Function.FunctionDetails.newBuilder().setTenant(\"test-tenant\").setNamespace(\"test-namespace\").setName(\"func-1\")).build();\n  Function.FunctionMetaData function2=Function.FunctionMetaData.newBuilder().setFunctionDetails(Function.FunctionDetails.newBuilder().setTenant(\"test-tenant\").setNamespace(\"test-namespace\").setName(\"func-2\")).build();\n  Function.Assignment assignment1=Function.Assignment.newBuilder().setWorkerId(\"worker-1\").setInstance(Function.Instance.newBuilder().setFunctionMetaData(function1).setInstanceId(0).build()).build();\n  Function.Assignment assignment2=Function.Assignment.newBuilder().setWorkerId(\"worker-1\").setInstance(Function.Instance.newBuilder().setFunctionMetaData(function2).setInstanceId(0).build()).build();\n  ArrayBlockingQueue<Message<byte[]>> messageList=new ArrayBlockingQueue<>(2);\n  MessageMetadata metadata=new MessageMetadata();\n  Message message1=spy(new MessageImpl(\"foo\",MessageId.latest.toString(),new HashMap<>(),Unpooled.copiedBuffer(assignment1.toByteArray()),null,metadata));\n  doReturn(FunctionCommon.getFullyQualifiedInstanceId(assignment1.getInstance())).when(message1).getKey();\n  Message message2=spy(new MessageImpl(\"foo\",MessageId.latest.toString(),new HashMap<>(),Unpooled.copiedBuffer(assignment2.toByteArray()),null,metadata));\n  doReturn(FunctionCommon.getFullyQualifiedInstanceId(assignment2.getInstance())).when(message2).getKey();\n  PulsarClient pulsarClient=mock(PulsarClient.class);\n  Reader<byte[]> reader=mock(Reader.class);\n  when(reader.readNext(anyInt(),any())).thenAnswer(new Answer<Message<byte[]>>(){\n    @Override public Message<byte[]> answer(    InvocationOnMock invocationOnMock) throws Throwable {\n      return messageList.poll(10,TimeUnit.SECONDS);\n    }\n  }\n);\n  when(reader.readNextAsync()).thenAnswer(new Answer<CompletableFuture<Message<byte[]>>>(){\n    @Override public CompletableFuture<Message<byte[]>> answer(    InvocationOnMock invocationOnMock) throws Throwable {\n      return new CompletableFuture<>();\n    }\n  }\n);\n  when(reader.hasMessageAvailable()).thenAnswer(new Answer<Boolean>(){\n    @Override public Boolean answer(    InvocationOnMock invocationOnMock) throws Throwable {\n      return !messageList.isEmpty();\n    }\n  }\n);\n  ReaderBuilder readerBuilder=mock(ReaderBuilder.class);\n  doReturn(readerBuilder).when(pulsarClient).newReader();\n  doReturn(readerBuilder).when(readerBuilder).topic(anyString());\n  doReturn(readerBuilder).when(readerBuilder).readerName(anyString());\n  doReturn(readerBuilder).when(readerBuilder).subscriptionRolePrefix(anyString());\n  doReturn(readerBuilder).when(readerBuilder).startMessageId(any());\n  doReturn(readerBuilder).when(readerBuilder).startMessageId(any());\n  doReturn(readerBuilder).when(readerBuilder).readCompacted(anyBoolean());\n  doReturn(reader).when(readerBuilder).create();\n  PulsarWorkerService workerService=mock(PulsarWorkerService.class);\n  doReturn(pulsarClient).when(workerService).getClient();\n  doReturn(mock(PulsarAdmin.class)).when(workerService).getFunctionAdmin();\n  ErrorNotifier errorNotifier=spy(ErrorNotifier.getDefaultImpl());\n  FunctionRuntimeManager functionRuntimeManager=mock(FunctionRuntimeManager.class);\n  FunctionAssignmentTailer functionAssignmentTailer=spy(new FunctionAssignmentTailer(functionRuntimeManager,readerBuilder,workerConfig,errorNotifier));\n  functionAssignmentTailer.start();\n  verify(errorNotifier,times(0)).triggerError(any());\n  messageList.add(message1);\n  verify(errorNotifier,times(0)).triggerError(any());\n  doThrow(new RuntimeException(\"test\")).when(functionRuntimeManager).processAssignmentMessage(any());\n  messageList.add(message2);\n  try {\n    errorNotifier.waitForError();\n  }\n catch (  Exception e) {\n    assertEquals(e.getCause().getMessage(),\"test\");\n  }\n  verify(errorNotifier,times(1)).triggerError(any());\n  functionAssignmentTailer.close();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 701,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 102,
        "startColumnNumber" : 54,
        "endLineNumber" : 102,
        "endColumnNumber" : 81
      },
      "nodeContext" : "MessageId.latest.toString()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "org.apache.pulsar.client.api.MessageId"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 98,
    "startColumnNumber" : 54,
    "endLineNumber" : 98,
    "endColumnNumber" : 70
  }, {
    "charLength" : 16,
    "startLineNumber" : 102,
    "startColumnNumber" : 54,
    "endLineNumber" : 102,
    "endColumnNumber" : 70
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  } ]
}