{
  "id" : 327,
  "expression" : "widest + 4",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/datastructures/utils/TreePrinter.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "widest + 4",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 65,
      "startColumnNumber" : 57,
      "endLineNumber" : 65,
      "endColumnNumber" : 67
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 65,
        "startColumnNumber" : 56,
        "endLineNumber" : 65,
        "endColumnNumber" : 68
      },
      "nodeContext" : "(widest + 4)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 65,
        "startColumnNumber" : 19,
        "endLineNumber" : 65,
        "endColumnNumber" : 68
      },
      "nodeContext" : "lines.get(lines.size() - 1).size() * (widest + 4)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 65,
        "startColumnNumber" : 8,
        "endLineNumber" : 65,
        "endColumnNumber" : 68
      },
      "nodeContext" : "perpiece=lines.get(lines.size() - 1).size() * (widest + 4)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 65,
        "startColumnNumber" : 4,
        "endLineNumber" : 65,
        "endColumnNumber" : 69
      },
      "nodeContext" : "int perpiece=lines.get(lines.size() - 1).size() * (widest + 4);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 19,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2593,
        "startLineNumber" : 23,
        "startColumnNumber" : 58,
        "endLineNumber" : 119,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  StringBuilder sb=new StringBuilder();\n  List<List<String>> lines=new ArrayList<List<String>>();\n  List<PrintableNode> level=new ArrayList<PrintableNode>();\n  List<PrintableNode> next=new ArrayList<PrintableNode>();\n  level.add(root);\n  int nn=1;\n  int widest=0;\n  while (nn != 0) {\n    nn=0;\n    List<String> line=new ArrayList<String>();\n    for (    PrintableNode n : level) {\n      if (n == null) {\n        line.add(null);\n        next.add(null);\n        next.add(null);\n      }\n else {\n        String aa=n.getText();\n        line.add(aa);\n        if (aa.length() > widest)         widest=aa.length();\n        next.add(n.getLeft());\n        next.add(n.getRight());\n        if (n.getLeft() != null)         nn++;\n        if (n.getRight() != null)         nn++;\n      }\n    }\n    if (widest % 2 == 1)     widest++;\n    lines.add(line);\n    List<PrintableNode> tmp=level;\n    level=next;\n    next=tmp;\n    next.clear();\n  }\n  int perpiece=lines.get(lines.size() - 1).size() * (widest + 4);\n  for (int i=0; i < lines.size(); i++) {\n    List<String> line=lines.get(i);\n    int hpw=(int)Math.floor(perpiece / 2f) - 1;\n    if (i > 0) {\n      for (int j=0; j < line.size(); j++) {\n        char c=' ';\n        if (j % 2 == 1) {\n          if (line.get(j - 1) != null) {\n            c=(line.get(j) != null) ? '#' : '#';\n          }\n else {\n            if (j < line.size() && line.get(j) != null)             c='#';\n          }\n        }\n        sb.append(c);\n        if (line.get(j) == null) {\n          for (int k=0; k < perpiece - 1; k++) {\n            sb.append(' ');\n          }\n        }\n else {\n          for (int k=0; k < hpw; k++) {\n            sb.append(j % 2 == 0 ? \" \" : \"#\");\n          }\n          sb.append(j % 2 == 0 ? \"#\" : \"#\");\n          for (int k=0; k < hpw; k++) {\n            sb.append(j % 2 == 0 ? \"#\" : \" \");\n          }\n        }\n      }\n      sb.append('\\n');\n    }\n    for (int j=0; j < line.size(); j++) {\n      String f=line.get(j);\n      if (f == null)       f=\"\";\n      int gap1=(int)Math.ceil(perpiece / 2f - f.length() / 2f);\n      int gap2=(int)Math.floor(perpiece / 2f - f.length() / 2f);\n      for (int k=0; k < gap1; k++) {\n        sb.append(' ');\n      }\n      sb.append(f);\n      for (int k=0; k < gap2; k++) {\n        sb.append(' ');\n      }\n    }\n    sb.append('\\n');\n    perpiece/=2;\n  }\n  return sb.toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 563,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2649,
        "startLineNumber" : 23,
        "startColumnNumber" : 2,
        "endLineNumber" : 119,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static String getTreeDisplay(PrintableNode root){\n  StringBuilder sb=new StringBuilder();\n  List<List<String>> lines=new ArrayList<List<String>>();\n  List<PrintableNode> level=new ArrayList<PrintableNode>();\n  List<PrintableNode> next=new ArrayList<PrintableNode>();\n  level.add(root);\n  int nn=1;\n  int widest=0;\n  while (nn != 0) {\n    nn=0;\n    List<String> line=new ArrayList<String>();\n    for (    PrintableNode n : level) {\n      if (n == null) {\n        line.add(null);\n        next.add(null);\n        next.add(null);\n      }\n else {\n        String aa=n.getText();\n        line.add(aa);\n        if (aa.length() > widest)         widest=aa.length();\n        next.add(n.getLeft());\n        next.add(n.getRight());\n        if (n.getLeft() != null)         nn++;\n        if (n.getRight() != null)         nn++;\n      }\n    }\n    if (widest % 2 == 1)     widest++;\n    lines.add(line);\n    List<PrintableNode> tmp=level;\n    level=next;\n    next=tmp;\n    next.clear();\n  }\n  int perpiece=lines.get(lines.size() - 1).size() * (widest + 4);\n  for (int i=0; i < lines.size(); i++) {\n    List<String> line=lines.get(i);\n    int hpw=(int)Math.floor(perpiece / 2f) - 1;\n    if (i > 0) {\n      for (int j=0; j < line.size(); j++) {\n        char c=' ';\n        if (j % 2 == 1) {\n          if (line.get(j - 1) != null) {\n            c=(line.get(j) != null) ? '#' : '#';\n          }\n else {\n            if (j < line.size() && line.get(j) != null)             c='#';\n          }\n        }\n        sb.append(c);\n        if (line.get(j) == null) {\n          for (int k=0; k < perpiece - 1; k++) {\n            sb.append(' ');\n          }\n        }\n else {\n          for (int k=0; k < hpw; k++) {\n            sb.append(j % 2 == 0 ? \" \" : \"#\");\n          }\n          sb.append(j % 2 == 0 ? \"#\" : \"#\");\n          for (int k=0; k < hpw; k++) {\n            sb.append(j % 2 == 0 ? \"#\" : \" \");\n          }\n        }\n      }\n      sb.append('\\n');\n    }\n    for (int j=0; j < line.size(); j++) {\n      String f=line.get(j);\n      if (f == null)       f=\"\";\n      int gap1=(int)Math.ceil(perpiece / 2f - f.length() / 2f);\n      int gap2=(int)Math.floor(perpiece / 2f - f.length() / 2f);\n      for (int k=0; k < gap1; k++) {\n        sb.append(' ');\n      }\n      sb.append(f);\n      for (int k=0; k < gap2; k++) {\n        sb.append(' ');\n      }\n    }\n    sb.append('\\n');\n    perpiece/=2;\n  }\n  return sb.toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 573,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 65,
        "startColumnNumber" : 4,
        "endLineNumber" : 65,
        "endColumnNumber" : 69
      },
      "nodeContext" : "int perpiece=lines.get(lines.size() - 1).size() * (widest + 4);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 19,
      "astHeight" : 8
    },
    "tokenLength" : 3,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 65,
    "startColumnNumber" : 57,
    "endLineNumber" : 65,
    "endColumnNumber" : 67
  } ],
  "layoutRelationDataList" : [ ]
}