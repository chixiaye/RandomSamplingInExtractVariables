{
  "id" : 1,
  "expression" : "i <= AL",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/dp/EditDistance.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "i <= AL",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 20,
      "startColumnNumber" : 20,
      "endLineNumber" : 20,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 496,
        "startLineNumber" : 20,
        "startColumnNumber" : 4,
        "endLineNumber" : 37,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i <= AL; i++) {\n  for (int j=(i == 0 ? 1 : 0); j <= BL; j++) {\n    int min=Integer.MAX_VALUE;\n    if (i > 0 && j > 0)     min=arr[i - 1][j - 1] + (a.charAt(i - 1) == b.charAt(j - 1) ? 0 : substitutionCost);\n    if (i > 0)     min=Math.min(min,arr[i - 1][j] + deletionCost);\n    if (j > 0)     min=Math.min(min,arr[i][j - 1] + insertionCost);\n    arr[i][j]=min;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 123,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 624,
        "startLineNumber" : 15,
        "startColumnNumber" : 85,
        "endLineNumber" : 40,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final int AL=a.length(), BL=b.length();\n  int[][] arr=new int[AL + 1][BL + 1];\n  for (int i=0; i <= AL; i++) {\n    for (int j=(i == 0 ? 1 : 0); j <= BL; j++) {\n      int min=Integer.MAX_VALUE;\n      if (i > 0 && j > 0)       min=arr[i - 1][j - 1] + (a.charAt(i - 1) == b.charAt(j - 1) ? 0 : substitutionCost);\n      if (i > 0)       min=Math.min(min,arr[i - 1][j] + deletionCost);\n      if (j > 0)       min=Math.min(min,arr[i][j - 1] + insertionCost);\n      arr[i][j]=min;\n    }\n  }\n  return arr[AL][BL];\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 161,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 741,
        "startLineNumber" : 14,
        "startColumnNumber" : 2,
        "endLineNumber" : 40,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static int editDistance(String a,String b,int insertionCost,int deletionCost,int substitutionCost){\n  final int AL=a.length(), BL=b.length();\n  int[][] arr=new int[AL + 1][BL + 1];\n  for (int i=0; i <= AL; i++) {\n    for (int j=(i == 0 ? 1 : 0); j <= BL; j++) {\n      int min=Integer.MAX_VALUE;\n      if (i > 0 && j > 0)       min=arr[i - 1][j - 1] + (a.charAt(i - 1) == b.charAt(j - 1) ? 0 : substitutionCost);\n      if (i > 0)       min=Math.min(min,arr[i - 1][j] + deletionCost);\n      if (j > 0)       min=Math.min(min,arr[i][j - 1] + insertionCost);\n      arr[i][j]=min;\n    }\n  }\n  return arr[AL][BL];\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 183,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 496,
        "startLineNumber" : 20,
        "startColumnNumber" : 4,
        "endLineNumber" : 37,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i <= AL; i++) {\n  for (int j=(i == 0 ? 1 : 0); j <= BL; j++) {\n    int min=Integer.MAX_VALUE;\n    if (i > 0 && j > 0)     min=arr[i - 1][j - 1] + (a.charAt(i - 1) == b.charAt(j - 1) ? 0 : substitutionCost);\n    if (i > 0)     min=Math.min(min,arr[i - 1][j] + deletionCost);\n    if (j > 0)     min=Math.min(min,arr[i][j - 1] + insertionCost);\n    arr[i][j]=min;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 123,
      "astHeight" : 14
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 20,
    "startColumnNumber" : 20,
    "endLineNumber" : 20,
    "endColumnNumber" : 27
  } ],
  "layoutRelationDataList" : [ ]
}