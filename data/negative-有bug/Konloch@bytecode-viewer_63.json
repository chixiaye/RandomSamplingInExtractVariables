{
  "id" : 63,
  "expression" : "tempDirectory",
  "projectName" : "Konloch@bytecode-viewer",
  "commitID" : "9ab8ec7f8c061fb1d9b1db3e901034d162a211ff",
  "filePath" : "/src/main/java/the/bytecode/club/bytecodeviewer/decompilers/impl/JDGUIDecompiler.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "tempDirectory",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 60,
      "startColumnNumber" : 12,
      "endLineNumber" : 60,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 60,
        "startColumnNumber" : 12,
        "endLineNumber" : 60,
        "endColumnNumber" : 33
      },
      "nodeContext" : "tempDirectory.mkdir()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 60,
        "startColumnNumber" : 12,
        "endLineNumber" : 60,
        "endColumnNumber" : 34
      },
      "nodeContext" : "tempDirectory.mkdir();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2387,
        "startLineNumber" : 58,
        "startColumnNumber" : 12,
        "endLineNumber" : 114,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final File tempDirectory=new File(Constants.tempDirectory + fs + MiscUtils.randomString(32)+ fs);\n  tempDirectory.mkdir();\n  final File tempClass=new File(tempDirectory.getAbsolutePath() + fs + cn.name+ \".class\");\n  final File tempJava=new File(tempDirectory.getAbsolutePath() + fs + cn.name+ \".java\");\n  if (cn.name.contains(\"/\")) {\n    String[] raw=cn.name.split(\"/\");\n    String path=tempDirectory.getAbsolutePath() + fs;\n    for (int i=0; i < raw.length - 1; i++) {\n      path+=raw[i] + fs;\n      File f=new File(path);\n      f.mkdir();\n    }\n  }\n  try {\n    final FileOutputStream fos=new FileOutputStream(tempClass);\n    fos.write(b);\n    fos.close();\n  }\n catch (  final IOException e) {\n    BytecodeViewer.handleException(e);\n  }\n  String pathToClass=tempClass.getAbsolutePath().replace('/',File.separatorChar).replace('\\\\',File.separatorChar);\n  String directoryPath=JDGUIClassFileUtil.ExtractDirectoryPath(pathToClass);\n  String internalPath=JDGUIClassFileUtil.ExtractInternalPath(directoryPath,pathToClass);\n  CommonPreferences preferences=new CommonPreferences(){\n    @Override public boolean isShowLineNumbers(){\n      return false;\n    }\n    @Override public boolean isMergeEmptyLines(){\n      return true;\n    }\n  }\n;\n  DirectoryLoader loader=new DirectoryLoader(new File(directoryPath));\n  PrintStream ps=new PrintStream(tempJava.getAbsolutePath());\n  PlainTextPrinter printer=new PlainTextPrinter(preferences,ps);\n  org.jd.core.v1.api.Decompiler decompiler=new ClassFileToJavaSourceDecompiler();\n  decompiler.decompile(loader,printer,internalPath,preferences.getPreferences());\n  String decompiledSource;\n  decompiledSource=DiskReader.loadAsString(tempJava.getAbsolutePath());\n  return decompiledSource;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 304,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2657,
        "startLineNumber" : 58,
        "startColumnNumber" : 8,
        "endLineNumber" : 121,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  final File tempDirectory=new File(Constants.tempDirectory + fs + MiscUtils.randomString(32)+ fs);\n  tempDirectory.mkdir();\n  final File tempClass=new File(tempDirectory.getAbsolutePath() + fs + cn.name+ \".class\");\n  final File tempJava=new File(tempDirectory.getAbsolutePath() + fs + cn.name+ \".java\");\n  if (cn.name.contains(\"/\")) {\n    String[] raw=cn.name.split(\"/\");\n    String path=tempDirectory.getAbsolutePath() + fs;\n    for (int i=0; i < raw.length - 1; i++) {\n      path+=raw[i] + fs;\n      File f=new File(path);\n      f.mkdir();\n    }\n  }\n  try {\n    final FileOutputStream fos=new FileOutputStream(tempClass);\n    fos.write(b);\n    fos.close();\n  }\n catch (  final IOException e) {\n    BytecodeViewer.handleException(e);\n  }\n  String pathToClass=tempClass.getAbsolutePath().replace('/',File.separatorChar).replace('\\\\',File.separatorChar);\n  String directoryPath=JDGUIClassFileUtil.ExtractDirectoryPath(pathToClass);\n  String internalPath=JDGUIClassFileUtil.ExtractInternalPath(directoryPath,pathToClass);\n  CommonPreferences preferences=new CommonPreferences(){\n    @Override public boolean isShowLineNumbers(){\n      return false;\n    }\n    @Override public boolean isMergeEmptyLines(){\n      return true;\n    }\n  }\n;\n  DirectoryLoader loader=new DirectoryLoader(new File(directoryPath));\n  PrintStream ps=new PrintStream(tempJava.getAbsolutePath());\n  PlainTextPrinter printer=new PlainTextPrinter(preferences,ps);\n  org.jd.core.v1.api.Decompiler decompiler=new ClassFileToJavaSourceDecompiler();\n  decompiler.decompile(loader,printer,internalPath,preferences.getPreferences());\n  String decompiledSource;\n  decompiledSource=DiskReader.loadAsString(tempJava.getAbsolutePath());\n  return decompiledSource;\n}\n catch (Exception e) {\n  StringWriter sw=new StringWriter();\n  e.printStackTrace(new PrintWriter(sw));\n  e.printStackTrace();\n  exception=\"Bytecode Viewer Version: \" + VERSION + nl+ nl+ sw;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 340,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2899,
        "startLineNumber" : 56,
        "startColumnNumber" : 61,
        "endLineNumber" : 126,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String exception;\n  try {\n    final File tempDirectory=new File(Constants.tempDirectory + fs + MiscUtils.randomString(32)+ fs);\n    tempDirectory.mkdir();\n    final File tempClass=new File(tempDirectory.getAbsolutePath() + fs + cn.name+ \".class\");\n    final File tempJava=new File(tempDirectory.getAbsolutePath() + fs + cn.name+ \".java\");\n    if (cn.name.contains(\"/\")) {\n      String[] raw=cn.name.split(\"/\");\n      String path=tempDirectory.getAbsolutePath() + fs;\n      for (int i=0; i < raw.length - 1; i++) {\n        path+=raw[i] + fs;\n        File f=new File(path);\n        f.mkdir();\n      }\n    }\n    try {\n      final FileOutputStream fos=new FileOutputStream(tempClass);\n      fos.write(b);\n      fos.close();\n    }\n catch (    final IOException e) {\n      BytecodeViewer.handleException(e);\n    }\n    String pathToClass=tempClass.getAbsolutePath().replace('/',File.separatorChar).replace('\\\\',File.separatorChar);\n    String directoryPath=JDGUIClassFileUtil.ExtractDirectoryPath(pathToClass);\n    String internalPath=JDGUIClassFileUtil.ExtractInternalPath(directoryPath,pathToClass);\n    CommonPreferences preferences=new CommonPreferences(){\n      @Override public boolean isShowLineNumbers(){\n        return false;\n      }\n      @Override public boolean isMergeEmptyLines(){\n        return true;\n      }\n    }\n;\n    DirectoryLoader loader=new DirectoryLoader(new File(directoryPath));\n    PrintStream ps=new PrintStream(tempJava.getAbsolutePath());\n    PlainTextPrinter printer=new PlainTextPrinter(preferences,ps);\n    org.jd.core.v1.api.Decompiler decompiler=new ClassFileToJavaSourceDecompiler();\n    decompiler.decompile(loader,printer,internalPath,preferences.getPreferences());\n    String decompiledSource;\n    decompiledSource=DiskReader.loadAsString(tempJava.getAbsolutePath());\n    return decompiledSource;\n  }\n catch (  Exception e) {\n    StringWriter sw=new StringWriter();\n    e.printStackTrace(new PrintWriter(sw));\n    e.printStackTrace();\n    exception=\"Bytecode Viewer Version: \" + VERSION + nl+ nl+ sw;\n  }\n  return JDGUI + \" \" + ERROR+ \"! \"+ ExceptionUI.SEND_STACKTRACE_TO+ nl+ nl+ TranslatedStrings.SUGGESTED_FIX_DECOMPILER_ERROR+ nl+ nl+ exception;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 363,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2970,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 126,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public String decompileClassNode(ClassNode cn,byte[] b){\n  String exception;\n  try {\n    final File tempDirectory=new File(Constants.tempDirectory + fs + MiscUtils.randomString(32)+ fs);\n    tempDirectory.mkdir();\n    final File tempClass=new File(tempDirectory.getAbsolutePath() + fs + cn.name+ \".class\");\n    final File tempJava=new File(tempDirectory.getAbsolutePath() + fs + cn.name+ \".java\");\n    if (cn.name.contains(\"/\")) {\n      String[] raw=cn.name.split(\"/\");\n      String path=tempDirectory.getAbsolutePath() + fs;\n      for (int i=0; i < raw.length - 1; i++) {\n        path+=raw[i] + fs;\n        File f=new File(path);\n        f.mkdir();\n      }\n    }\n    try {\n      final FileOutputStream fos=new FileOutputStream(tempClass);\n      fos.write(b);\n      fos.close();\n    }\n catch (    final IOException e) {\n      BytecodeViewer.handleException(e);\n    }\n    String pathToClass=tempClass.getAbsolutePath().replace('/',File.separatorChar).replace('\\\\',File.separatorChar);\n    String directoryPath=JDGUIClassFileUtil.ExtractDirectoryPath(pathToClass);\n    String internalPath=JDGUIClassFileUtil.ExtractInternalPath(directoryPath,pathToClass);\n    CommonPreferences preferences=new CommonPreferences(){\n      @Override public boolean isShowLineNumbers(){\n        return false;\n      }\n      @Override public boolean isMergeEmptyLines(){\n        return true;\n      }\n    }\n;\n    DirectoryLoader loader=new DirectoryLoader(new File(directoryPath));\n    PrintStream ps=new PrintStream(tempJava.getAbsolutePath());\n    PlainTextPrinter printer=new PlainTextPrinter(preferences,ps);\n    org.jd.core.v1.api.Decompiler decompiler=new ClassFileToJavaSourceDecompiler();\n    decompiler.decompile(loader,printer,internalPath,preferences.getPreferences());\n    String decompiledSource;\n    decompiledSource=DiskReader.loadAsString(tempJava.getAbsolutePath());\n    return decompiledSource;\n  }\n catch (  Exception e) {\n    StringWriter sw=new StringWriter();\n    e.printStackTrace(new PrintWriter(sw));\n    e.printStackTrace();\n    exception=\"Bytecode Viewer Version: \" + VERSION + nl+ nl+ sw;\n  }\n  return JDGUI + \" \" + ERROR+ \"! \"+ ExceptionUI.SEND_STACKTRACE_TO+ nl+ nl+ TranslatedStrings.SUGGESTED_FIX_DECOMPILER_ERROR+ nl+ nl+ exception;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 379,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 60,
        "startColumnNumber" : 12,
        "endLineNumber" : 60,
        "endColumnNumber" : 34
      },
      "nodeContext" : "tempDirectory.mkdir();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.io.File"
  }, {
    "nodeContext" : "tempDirectory",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 62,
      "startColumnNumber" : 44,
      "endLineNumber" : 62,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 62,
        "startColumnNumber" : 44,
        "endLineNumber" : 62,
        "endColumnNumber" : 75
      },
      "nodeContext" : "tempDirectory.getAbsolutePath()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 62,
        "startColumnNumber" : 44,
        "endLineNumber" : 62,
        "endColumnNumber" : 101
      },
      "nodeContext" : "tempDirectory.getAbsolutePath() + fs + cn.name+ \".class\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 62,
        "startColumnNumber" : 35,
        "endLineNumber" : 62,
        "endColumnNumber" : 102
      },
      "nodeContext" : "new File(tempDirectory.getAbsolutePath() + fs + cn.name+ \".class\")",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 62,
        "startColumnNumber" : 23,
        "endLineNumber" : 62,
        "endColumnNumber" : 102
      },
      "nodeContext" : "tempClass=new File(tempDirectory.getAbsolutePath() + fs + cn.name+ \".class\")",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 62,
        "startColumnNumber" : 12,
        "endLineNumber" : 62,
        "endColumnNumber" : 103
      },
      "nodeContext" : "final File tempClass=new File(tempDirectory.getAbsolutePath() + fs + cn.name+ \".class\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2387,
        "startLineNumber" : 58,
        "startColumnNumber" : 12,
        "endLineNumber" : 114,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final File tempDirectory=new File(Constants.tempDirectory + fs + MiscUtils.randomString(32)+ fs);\n  tempDirectory.mkdir();\n  final File tempClass=new File(tempDirectory.getAbsolutePath() + fs + cn.name+ \".class\");\n  final File tempJava=new File(tempDirectory.getAbsolutePath() + fs + cn.name+ \".java\");\n  if (cn.name.contains(\"/\")) {\n    String[] raw=cn.name.split(\"/\");\n    String path=tempDirectory.getAbsolutePath() + fs;\n    for (int i=0; i < raw.length - 1; i++) {\n      path+=raw[i] + fs;\n      File f=new File(path);\n      f.mkdir();\n    }\n  }\n  try {\n    final FileOutputStream fos=new FileOutputStream(tempClass);\n    fos.write(b);\n    fos.close();\n  }\n catch (  final IOException e) {\n    BytecodeViewer.handleException(e);\n  }\n  String pathToClass=tempClass.getAbsolutePath().replace('/',File.separatorChar).replace('\\\\',File.separatorChar);\n  String directoryPath=JDGUIClassFileUtil.ExtractDirectoryPath(pathToClass);\n  String internalPath=JDGUIClassFileUtil.ExtractInternalPath(directoryPath,pathToClass);\n  CommonPreferences preferences=new CommonPreferences(){\n    @Override public boolean isShowLineNumbers(){\n      return false;\n    }\n    @Override public boolean isMergeEmptyLines(){\n      return true;\n    }\n  }\n;\n  DirectoryLoader loader=new DirectoryLoader(new File(directoryPath));\n  PrintStream ps=new PrintStream(tempJava.getAbsolutePath());\n  PlainTextPrinter printer=new PlainTextPrinter(preferences,ps);\n  org.jd.core.v1.api.Decompiler decompiler=new ClassFileToJavaSourceDecompiler();\n  decompiler.decompile(loader,printer,internalPath,preferences.getPreferences());\n  String decompiledSource;\n  decompiledSource=DiskReader.loadAsString(tempJava.getAbsolutePath());\n  return decompiledSource;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 304,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2657,
        "startLineNumber" : 58,
        "startColumnNumber" : 8,
        "endLineNumber" : 121,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  final File tempDirectory=new File(Constants.tempDirectory + fs + MiscUtils.randomString(32)+ fs);\n  tempDirectory.mkdir();\n  final File tempClass=new File(tempDirectory.getAbsolutePath() + fs + cn.name+ \".class\");\n  final File tempJava=new File(tempDirectory.getAbsolutePath() + fs + cn.name+ \".java\");\n  if (cn.name.contains(\"/\")) {\n    String[] raw=cn.name.split(\"/\");\n    String path=tempDirectory.getAbsolutePath() + fs;\n    for (int i=0; i < raw.length - 1; i++) {\n      path+=raw[i] + fs;\n      File f=new File(path);\n      f.mkdir();\n    }\n  }\n  try {\n    final FileOutputStream fos=new FileOutputStream(tempClass);\n    fos.write(b);\n    fos.close();\n  }\n catch (  final IOException e) {\n    BytecodeViewer.handleException(e);\n  }\n  String pathToClass=tempClass.getAbsolutePath().replace('/',File.separatorChar).replace('\\\\',File.separatorChar);\n  String directoryPath=JDGUIClassFileUtil.ExtractDirectoryPath(pathToClass);\n  String internalPath=JDGUIClassFileUtil.ExtractInternalPath(directoryPath,pathToClass);\n  CommonPreferences preferences=new CommonPreferences(){\n    @Override public boolean isShowLineNumbers(){\n      return false;\n    }\n    @Override public boolean isMergeEmptyLines(){\n      return true;\n    }\n  }\n;\n  DirectoryLoader loader=new DirectoryLoader(new File(directoryPath));\n  PrintStream ps=new PrintStream(tempJava.getAbsolutePath());\n  PlainTextPrinter printer=new PlainTextPrinter(preferences,ps);\n  org.jd.core.v1.api.Decompiler decompiler=new ClassFileToJavaSourceDecompiler();\n  decompiler.decompile(loader,printer,internalPath,preferences.getPreferences());\n  String decompiledSource;\n  decompiledSource=DiskReader.loadAsString(tempJava.getAbsolutePath());\n  return decompiledSource;\n}\n catch (Exception e) {\n  StringWriter sw=new StringWriter();\n  e.printStackTrace(new PrintWriter(sw));\n  e.printStackTrace();\n  exception=\"Bytecode Viewer Version: \" + VERSION + nl+ nl+ sw;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 340,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2899,
        "startLineNumber" : 56,
        "startColumnNumber" : 61,
        "endLineNumber" : 126,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String exception;\n  try {\n    final File tempDirectory=new File(Constants.tempDirectory + fs + MiscUtils.randomString(32)+ fs);\n    tempDirectory.mkdir();\n    final File tempClass=new File(tempDirectory.getAbsolutePath() + fs + cn.name+ \".class\");\n    final File tempJava=new File(tempDirectory.getAbsolutePath() + fs + cn.name+ \".java\");\n    if (cn.name.contains(\"/\")) {\n      String[] raw=cn.name.split(\"/\");\n      String path=tempDirectory.getAbsolutePath() + fs;\n      for (int i=0; i < raw.length - 1; i++) {\n        path+=raw[i] + fs;\n        File f=new File(path);\n        f.mkdir();\n      }\n    }\n    try {\n      final FileOutputStream fos=new FileOutputStream(tempClass);\n      fos.write(b);\n      fos.close();\n    }\n catch (    final IOException e) {\n      BytecodeViewer.handleException(e);\n    }\n    String pathToClass=tempClass.getAbsolutePath().replace('/',File.separatorChar).replace('\\\\',File.separatorChar);\n    String directoryPath=JDGUIClassFileUtil.ExtractDirectoryPath(pathToClass);\n    String internalPath=JDGUIClassFileUtil.ExtractInternalPath(directoryPath,pathToClass);\n    CommonPreferences preferences=new CommonPreferences(){\n      @Override public boolean isShowLineNumbers(){\n        return false;\n      }\n      @Override public boolean isMergeEmptyLines(){\n        return true;\n      }\n    }\n;\n    DirectoryLoader loader=new DirectoryLoader(new File(directoryPath));\n    PrintStream ps=new PrintStream(tempJava.getAbsolutePath());\n    PlainTextPrinter printer=new PlainTextPrinter(preferences,ps);\n    org.jd.core.v1.api.Decompiler decompiler=new ClassFileToJavaSourceDecompiler();\n    decompiler.decompile(loader,printer,internalPath,preferences.getPreferences());\n    String decompiledSource;\n    decompiledSource=DiskReader.loadAsString(tempJava.getAbsolutePath());\n    return decompiledSource;\n  }\n catch (  Exception e) {\n    StringWriter sw=new StringWriter();\n    e.printStackTrace(new PrintWriter(sw));\n    e.printStackTrace();\n    exception=\"Bytecode Viewer Version: \" + VERSION + nl+ nl+ sw;\n  }\n  return JDGUI + \" \" + ERROR+ \"! \"+ ExceptionUI.SEND_STACKTRACE_TO+ nl+ nl+ TranslatedStrings.SUGGESTED_FIX_DECOMPILER_ERROR+ nl+ nl+ exception;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 363,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2970,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 126,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public String decompileClassNode(ClassNode cn,byte[] b){\n  String exception;\n  try {\n    final File tempDirectory=new File(Constants.tempDirectory + fs + MiscUtils.randomString(32)+ fs);\n    tempDirectory.mkdir();\n    final File tempClass=new File(tempDirectory.getAbsolutePath() + fs + cn.name+ \".class\");\n    final File tempJava=new File(tempDirectory.getAbsolutePath() + fs + cn.name+ \".java\");\n    if (cn.name.contains(\"/\")) {\n      String[] raw=cn.name.split(\"/\");\n      String path=tempDirectory.getAbsolutePath() + fs;\n      for (int i=0; i < raw.length - 1; i++) {\n        path+=raw[i] + fs;\n        File f=new File(path);\n        f.mkdir();\n      }\n    }\n    try {\n      final FileOutputStream fos=new FileOutputStream(tempClass);\n      fos.write(b);\n      fos.close();\n    }\n catch (    final IOException e) {\n      BytecodeViewer.handleException(e);\n    }\n    String pathToClass=tempClass.getAbsolutePath().replace('/',File.separatorChar).replace('\\\\',File.separatorChar);\n    String directoryPath=JDGUIClassFileUtil.ExtractDirectoryPath(pathToClass);\n    String internalPath=JDGUIClassFileUtil.ExtractInternalPath(directoryPath,pathToClass);\n    CommonPreferences preferences=new CommonPreferences(){\n      @Override public boolean isShowLineNumbers(){\n        return false;\n      }\n      @Override public boolean isMergeEmptyLines(){\n        return true;\n      }\n    }\n;\n    DirectoryLoader loader=new DirectoryLoader(new File(directoryPath));\n    PrintStream ps=new PrintStream(tempJava.getAbsolutePath());\n    PlainTextPrinter printer=new PlainTextPrinter(preferences,ps);\n    org.jd.core.v1.api.Decompiler decompiler=new ClassFileToJavaSourceDecompiler();\n    decompiler.decompile(loader,printer,internalPath,preferences.getPreferences());\n    String decompiledSource;\n    decompiledSource=DiskReader.loadAsString(tempJava.getAbsolutePath());\n    return decompiledSource;\n  }\n catch (  Exception e) {\n    StringWriter sw=new StringWriter();\n    e.printStackTrace(new PrintWriter(sw));\n    e.printStackTrace();\n    exception=\"Bytecode Viewer Version: \" + VERSION + nl+ nl+ sw;\n  }\n  return JDGUI + \" \" + ERROR+ \"! \"+ ExceptionUI.SEND_STACKTRACE_TO+ nl+ nl+ TranslatedStrings.SUGGESTED_FIX_DECOMPILER_ERROR+ nl+ nl+ exception;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 379,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 62,
        "startColumnNumber" : 12,
        "endLineNumber" : 62,
        "endColumnNumber" : 103
      },
      "nodeContext" : "final File tempClass=new File(tempDirectory.getAbsolutePath() + fs + cn.name+ \".class\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.io.File"
  }, {
    "nodeContext" : "tempDirectory",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 63,
      "startColumnNumber" : 43,
      "endLineNumber" : 63,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 63,
        "startColumnNumber" : 43,
        "endLineNumber" : 63,
        "endColumnNumber" : 74
      },
      "nodeContext" : "tempDirectory.getAbsolutePath()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 63,
        "startColumnNumber" : 43,
        "endLineNumber" : 63,
        "endColumnNumber" : 99
      },
      "nodeContext" : "tempDirectory.getAbsolutePath() + fs + cn.name+ \".java\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 63,
        "startColumnNumber" : 34,
        "endLineNumber" : 63,
        "endColumnNumber" : 100
      },
      "nodeContext" : "new File(tempDirectory.getAbsolutePath() + fs + cn.name+ \".java\")",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 63,
        "startColumnNumber" : 23,
        "endLineNumber" : 63,
        "endColumnNumber" : 100
      },
      "nodeContext" : "tempJava=new File(tempDirectory.getAbsolutePath() + fs + cn.name+ \".java\")",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 63,
        "startColumnNumber" : 12,
        "endLineNumber" : 63,
        "endColumnNumber" : 101
      },
      "nodeContext" : "final File tempJava=new File(tempDirectory.getAbsolutePath() + fs + cn.name+ \".java\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2387,
        "startLineNumber" : 58,
        "startColumnNumber" : 12,
        "endLineNumber" : 114,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final File tempDirectory=new File(Constants.tempDirectory + fs + MiscUtils.randomString(32)+ fs);\n  tempDirectory.mkdir();\n  final File tempClass=new File(tempDirectory.getAbsolutePath() + fs + cn.name+ \".class\");\n  final File tempJava=new File(tempDirectory.getAbsolutePath() + fs + cn.name+ \".java\");\n  if (cn.name.contains(\"/\")) {\n    String[] raw=cn.name.split(\"/\");\n    String path=tempDirectory.getAbsolutePath() + fs;\n    for (int i=0; i < raw.length - 1; i++) {\n      path+=raw[i] + fs;\n      File f=new File(path);\n      f.mkdir();\n    }\n  }\n  try {\n    final FileOutputStream fos=new FileOutputStream(tempClass);\n    fos.write(b);\n    fos.close();\n  }\n catch (  final IOException e) {\n    BytecodeViewer.handleException(e);\n  }\n  String pathToClass=tempClass.getAbsolutePath().replace('/',File.separatorChar).replace('\\\\',File.separatorChar);\n  String directoryPath=JDGUIClassFileUtil.ExtractDirectoryPath(pathToClass);\n  String internalPath=JDGUIClassFileUtil.ExtractInternalPath(directoryPath,pathToClass);\n  CommonPreferences preferences=new CommonPreferences(){\n    @Override public boolean isShowLineNumbers(){\n      return false;\n    }\n    @Override public boolean isMergeEmptyLines(){\n      return true;\n    }\n  }\n;\n  DirectoryLoader loader=new DirectoryLoader(new File(directoryPath));\n  PrintStream ps=new PrintStream(tempJava.getAbsolutePath());\n  PlainTextPrinter printer=new PlainTextPrinter(preferences,ps);\n  org.jd.core.v1.api.Decompiler decompiler=new ClassFileToJavaSourceDecompiler();\n  decompiler.decompile(loader,printer,internalPath,preferences.getPreferences());\n  String decompiledSource;\n  decompiledSource=DiskReader.loadAsString(tempJava.getAbsolutePath());\n  return decompiledSource;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 304,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2657,
        "startLineNumber" : 58,
        "startColumnNumber" : 8,
        "endLineNumber" : 121,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  final File tempDirectory=new File(Constants.tempDirectory + fs + MiscUtils.randomString(32)+ fs);\n  tempDirectory.mkdir();\n  final File tempClass=new File(tempDirectory.getAbsolutePath() + fs + cn.name+ \".class\");\n  final File tempJava=new File(tempDirectory.getAbsolutePath() + fs + cn.name+ \".java\");\n  if (cn.name.contains(\"/\")) {\n    String[] raw=cn.name.split(\"/\");\n    String path=tempDirectory.getAbsolutePath() + fs;\n    for (int i=0; i < raw.length - 1; i++) {\n      path+=raw[i] + fs;\n      File f=new File(path);\n      f.mkdir();\n    }\n  }\n  try {\n    final FileOutputStream fos=new FileOutputStream(tempClass);\n    fos.write(b);\n    fos.close();\n  }\n catch (  final IOException e) {\n    BytecodeViewer.handleException(e);\n  }\n  String pathToClass=tempClass.getAbsolutePath().replace('/',File.separatorChar).replace('\\\\',File.separatorChar);\n  String directoryPath=JDGUIClassFileUtil.ExtractDirectoryPath(pathToClass);\n  String internalPath=JDGUIClassFileUtil.ExtractInternalPath(directoryPath,pathToClass);\n  CommonPreferences preferences=new CommonPreferences(){\n    @Override public boolean isShowLineNumbers(){\n      return false;\n    }\n    @Override public boolean isMergeEmptyLines(){\n      return true;\n    }\n  }\n;\n  DirectoryLoader loader=new DirectoryLoader(new File(directoryPath));\n  PrintStream ps=new PrintStream(tempJava.getAbsolutePath());\n  PlainTextPrinter printer=new PlainTextPrinter(preferences,ps);\n  org.jd.core.v1.api.Decompiler decompiler=new ClassFileToJavaSourceDecompiler();\n  decompiler.decompile(loader,printer,internalPath,preferences.getPreferences());\n  String decompiledSource;\n  decompiledSource=DiskReader.loadAsString(tempJava.getAbsolutePath());\n  return decompiledSource;\n}\n catch (Exception e) {\n  StringWriter sw=new StringWriter();\n  e.printStackTrace(new PrintWriter(sw));\n  e.printStackTrace();\n  exception=\"Bytecode Viewer Version: \" + VERSION + nl+ nl+ sw;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 340,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2899,
        "startLineNumber" : 56,
        "startColumnNumber" : 61,
        "endLineNumber" : 126,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String exception;\n  try {\n    final File tempDirectory=new File(Constants.tempDirectory + fs + MiscUtils.randomString(32)+ fs);\n    tempDirectory.mkdir();\n    final File tempClass=new File(tempDirectory.getAbsolutePath() + fs + cn.name+ \".class\");\n    final File tempJava=new File(tempDirectory.getAbsolutePath() + fs + cn.name+ \".java\");\n    if (cn.name.contains(\"/\")) {\n      String[] raw=cn.name.split(\"/\");\n      String path=tempDirectory.getAbsolutePath() + fs;\n      for (int i=0; i < raw.length - 1; i++) {\n        path+=raw[i] + fs;\n        File f=new File(path);\n        f.mkdir();\n      }\n    }\n    try {\n      final FileOutputStream fos=new FileOutputStream(tempClass);\n      fos.write(b);\n      fos.close();\n    }\n catch (    final IOException e) {\n      BytecodeViewer.handleException(e);\n    }\n    String pathToClass=tempClass.getAbsolutePath().replace('/',File.separatorChar).replace('\\\\',File.separatorChar);\n    String directoryPath=JDGUIClassFileUtil.ExtractDirectoryPath(pathToClass);\n    String internalPath=JDGUIClassFileUtil.ExtractInternalPath(directoryPath,pathToClass);\n    CommonPreferences preferences=new CommonPreferences(){\n      @Override public boolean isShowLineNumbers(){\n        return false;\n      }\n      @Override public boolean isMergeEmptyLines(){\n        return true;\n      }\n    }\n;\n    DirectoryLoader loader=new DirectoryLoader(new File(directoryPath));\n    PrintStream ps=new PrintStream(tempJava.getAbsolutePath());\n    PlainTextPrinter printer=new PlainTextPrinter(preferences,ps);\n    org.jd.core.v1.api.Decompiler decompiler=new ClassFileToJavaSourceDecompiler();\n    decompiler.decompile(loader,printer,internalPath,preferences.getPreferences());\n    String decompiledSource;\n    decompiledSource=DiskReader.loadAsString(tempJava.getAbsolutePath());\n    return decompiledSource;\n  }\n catch (  Exception e) {\n    StringWriter sw=new StringWriter();\n    e.printStackTrace(new PrintWriter(sw));\n    e.printStackTrace();\n    exception=\"Bytecode Viewer Version: \" + VERSION + nl+ nl+ sw;\n  }\n  return JDGUI + \" \" + ERROR+ \"! \"+ ExceptionUI.SEND_STACKTRACE_TO+ nl+ nl+ TranslatedStrings.SUGGESTED_FIX_DECOMPILER_ERROR+ nl+ nl+ exception;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 363,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2970,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 126,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public String decompileClassNode(ClassNode cn,byte[] b){\n  String exception;\n  try {\n    final File tempDirectory=new File(Constants.tempDirectory + fs + MiscUtils.randomString(32)+ fs);\n    tempDirectory.mkdir();\n    final File tempClass=new File(tempDirectory.getAbsolutePath() + fs + cn.name+ \".class\");\n    final File tempJava=new File(tempDirectory.getAbsolutePath() + fs + cn.name+ \".java\");\n    if (cn.name.contains(\"/\")) {\n      String[] raw=cn.name.split(\"/\");\n      String path=tempDirectory.getAbsolutePath() + fs;\n      for (int i=0; i < raw.length - 1; i++) {\n        path+=raw[i] + fs;\n        File f=new File(path);\n        f.mkdir();\n      }\n    }\n    try {\n      final FileOutputStream fos=new FileOutputStream(tempClass);\n      fos.write(b);\n      fos.close();\n    }\n catch (    final IOException e) {\n      BytecodeViewer.handleException(e);\n    }\n    String pathToClass=tempClass.getAbsolutePath().replace('/',File.separatorChar).replace('\\\\',File.separatorChar);\n    String directoryPath=JDGUIClassFileUtil.ExtractDirectoryPath(pathToClass);\n    String internalPath=JDGUIClassFileUtil.ExtractInternalPath(directoryPath,pathToClass);\n    CommonPreferences preferences=new CommonPreferences(){\n      @Override public boolean isShowLineNumbers(){\n        return false;\n      }\n      @Override public boolean isMergeEmptyLines(){\n        return true;\n      }\n    }\n;\n    DirectoryLoader loader=new DirectoryLoader(new File(directoryPath));\n    PrintStream ps=new PrintStream(tempJava.getAbsolutePath());\n    PlainTextPrinter printer=new PlainTextPrinter(preferences,ps);\n    org.jd.core.v1.api.Decompiler decompiler=new ClassFileToJavaSourceDecompiler();\n    decompiler.decompile(loader,printer,internalPath,preferences.getPreferences());\n    String decompiledSource;\n    decompiledSource=DiskReader.loadAsString(tempJava.getAbsolutePath());\n    return decompiledSource;\n  }\n catch (  Exception e) {\n    StringWriter sw=new StringWriter();\n    e.printStackTrace(new PrintWriter(sw));\n    e.printStackTrace();\n    exception=\"Bytecode Viewer Version: \" + VERSION + nl+ nl+ sw;\n  }\n  return JDGUI + \" \" + ERROR+ \"! \"+ ExceptionUI.SEND_STACKTRACE_TO+ nl+ nl+ TranslatedStrings.SUGGESTED_FIX_DECOMPILER_ERROR+ nl+ nl+ exception;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 379,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 63,
        "startColumnNumber" : 12,
        "endLineNumber" : 63,
        "endColumnNumber" : 101
      },
      "nodeContext" : "final File tempJava=new File(tempDirectory.getAbsolutePath() + fs + cn.name+ \".java\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.io.File"
  }, {
    "nodeContext" : "tempDirectory",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 67,
      "startColumnNumber" : 30,
      "endLineNumber" : 67,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 67,
        "startColumnNumber" : 30,
        "endLineNumber" : 67,
        "endColumnNumber" : 61
      },
      "nodeContext" : "tempDirectory.getAbsolutePath()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 67,
        "startColumnNumber" : 30,
        "endLineNumber" : 67,
        "endColumnNumber" : 66
      },
      "nodeContext" : "tempDirectory.getAbsolutePath() + fs",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 67,
        "startColumnNumber" : 23,
        "endLineNumber" : 67,
        "endColumnNumber" : 66
      },
      "nodeContext" : "path=tempDirectory.getAbsolutePath() + fs",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 67,
        "startColumnNumber" : 16,
        "endLineNumber" : 67,
        "endColumnNumber" : 67
      },
      "nodeContext" : "String path=tempDirectory.getAbsolutePath() + fs;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 328,
        "startLineNumber" : 65,
        "startColumnNumber" : 39,
        "endLineNumber" : 73,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  String[] raw=cn.name.split(\"/\");\n  String path=tempDirectory.getAbsolutePath() + fs;\n  for (int i=0; i < raw.length - 1; i++) {\n    path+=raw[i] + fs;\n    File f=new File(path);\n    f.mkdir();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 61,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 355,
        "startLineNumber" : 65,
        "startColumnNumber" : 12,
        "endLineNumber" : 73,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (cn.name.contains(\"/\")) {\n  String[] raw=cn.name.split(\"/\");\n  String path=tempDirectory.getAbsolutePath() + fs;\n  for (int i=0; i < raw.length - 1; i++) {\n    path+=raw[i] + fs;\n    File f=new File(path);\n    f.mkdir();\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 68,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2387,
        "startLineNumber" : 58,
        "startColumnNumber" : 12,
        "endLineNumber" : 114,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final File tempDirectory=new File(Constants.tempDirectory + fs + MiscUtils.randomString(32)+ fs);\n  tempDirectory.mkdir();\n  final File tempClass=new File(tempDirectory.getAbsolutePath() + fs + cn.name+ \".class\");\n  final File tempJava=new File(tempDirectory.getAbsolutePath() + fs + cn.name+ \".java\");\n  if (cn.name.contains(\"/\")) {\n    String[] raw=cn.name.split(\"/\");\n    String path=tempDirectory.getAbsolutePath() + fs;\n    for (int i=0; i < raw.length - 1; i++) {\n      path+=raw[i] + fs;\n      File f=new File(path);\n      f.mkdir();\n    }\n  }\n  try {\n    final FileOutputStream fos=new FileOutputStream(tempClass);\n    fos.write(b);\n    fos.close();\n  }\n catch (  final IOException e) {\n    BytecodeViewer.handleException(e);\n  }\n  String pathToClass=tempClass.getAbsolutePath().replace('/',File.separatorChar).replace('\\\\',File.separatorChar);\n  String directoryPath=JDGUIClassFileUtil.ExtractDirectoryPath(pathToClass);\n  String internalPath=JDGUIClassFileUtil.ExtractInternalPath(directoryPath,pathToClass);\n  CommonPreferences preferences=new CommonPreferences(){\n    @Override public boolean isShowLineNumbers(){\n      return false;\n    }\n    @Override public boolean isMergeEmptyLines(){\n      return true;\n    }\n  }\n;\n  DirectoryLoader loader=new DirectoryLoader(new File(directoryPath));\n  PrintStream ps=new PrintStream(tempJava.getAbsolutePath());\n  PlainTextPrinter printer=new PlainTextPrinter(preferences,ps);\n  org.jd.core.v1.api.Decompiler decompiler=new ClassFileToJavaSourceDecompiler();\n  decompiler.decompile(loader,printer,internalPath,preferences.getPreferences());\n  String decompiledSource;\n  decompiledSource=DiskReader.loadAsString(tempJava.getAbsolutePath());\n  return decompiledSource;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 304,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2657,
        "startLineNumber" : 58,
        "startColumnNumber" : 8,
        "endLineNumber" : 121,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  final File tempDirectory=new File(Constants.tempDirectory + fs + MiscUtils.randomString(32)+ fs);\n  tempDirectory.mkdir();\n  final File tempClass=new File(tempDirectory.getAbsolutePath() + fs + cn.name+ \".class\");\n  final File tempJava=new File(tempDirectory.getAbsolutePath() + fs + cn.name+ \".java\");\n  if (cn.name.contains(\"/\")) {\n    String[] raw=cn.name.split(\"/\");\n    String path=tempDirectory.getAbsolutePath() + fs;\n    for (int i=0; i < raw.length - 1; i++) {\n      path+=raw[i] + fs;\n      File f=new File(path);\n      f.mkdir();\n    }\n  }\n  try {\n    final FileOutputStream fos=new FileOutputStream(tempClass);\n    fos.write(b);\n    fos.close();\n  }\n catch (  final IOException e) {\n    BytecodeViewer.handleException(e);\n  }\n  String pathToClass=tempClass.getAbsolutePath().replace('/',File.separatorChar).replace('\\\\',File.separatorChar);\n  String directoryPath=JDGUIClassFileUtil.ExtractDirectoryPath(pathToClass);\n  String internalPath=JDGUIClassFileUtil.ExtractInternalPath(directoryPath,pathToClass);\n  CommonPreferences preferences=new CommonPreferences(){\n    @Override public boolean isShowLineNumbers(){\n      return false;\n    }\n    @Override public boolean isMergeEmptyLines(){\n      return true;\n    }\n  }\n;\n  DirectoryLoader loader=new DirectoryLoader(new File(directoryPath));\n  PrintStream ps=new PrintStream(tempJava.getAbsolutePath());\n  PlainTextPrinter printer=new PlainTextPrinter(preferences,ps);\n  org.jd.core.v1.api.Decompiler decompiler=new ClassFileToJavaSourceDecompiler();\n  decompiler.decompile(loader,printer,internalPath,preferences.getPreferences());\n  String decompiledSource;\n  decompiledSource=DiskReader.loadAsString(tempJava.getAbsolutePath());\n  return decompiledSource;\n}\n catch (Exception e) {\n  StringWriter sw=new StringWriter();\n  e.printStackTrace(new PrintWriter(sw));\n  e.printStackTrace();\n  exception=\"Bytecode Viewer Version: \" + VERSION + nl+ nl+ sw;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 340,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2899,
        "startLineNumber" : 56,
        "startColumnNumber" : 61,
        "endLineNumber" : 126,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String exception;\n  try {\n    final File tempDirectory=new File(Constants.tempDirectory + fs + MiscUtils.randomString(32)+ fs);\n    tempDirectory.mkdir();\n    final File tempClass=new File(tempDirectory.getAbsolutePath() + fs + cn.name+ \".class\");\n    final File tempJava=new File(tempDirectory.getAbsolutePath() + fs + cn.name+ \".java\");\n    if (cn.name.contains(\"/\")) {\n      String[] raw=cn.name.split(\"/\");\n      String path=tempDirectory.getAbsolutePath() + fs;\n      for (int i=0; i < raw.length - 1; i++) {\n        path+=raw[i] + fs;\n        File f=new File(path);\n        f.mkdir();\n      }\n    }\n    try {\n      final FileOutputStream fos=new FileOutputStream(tempClass);\n      fos.write(b);\n      fos.close();\n    }\n catch (    final IOException e) {\n      BytecodeViewer.handleException(e);\n    }\n    String pathToClass=tempClass.getAbsolutePath().replace('/',File.separatorChar).replace('\\\\',File.separatorChar);\n    String directoryPath=JDGUIClassFileUtil.ExtractDirectoryPath(pathToClass);\n    String internalPath=JDGUIClassFileUtil.ExtractInternalPath(directoryPath,pathToClass);\n    CommonPreferences preferences=new CommonPreferences(){\n      @Override public boolean isShowLineNumbers(){\n        return false;\n      }\n      @Override public boolean isMergeEmptyLines(){\n        return true;\n      }\n    }\n;\n    DirectoryLoader loader=new DirectoryLoader(new File(directoryPath));\n    PrintStream ps=new PrintStream(tempJava.getAbsolutePath());\n    PlainTextPrinter printer=new PlainTextPrinter(preferences,ps);\n    org.jd.core.v1.api.Decompiler decompiler=new ClassFileToJavaSourceDecompiler();\n    decompiler.decompile(loader,printer,internalPath,preferences.getPreferences());\n    String decompiledSource;\n    decompiledSource=DiskReader.loadAsString(tempJava.getAbsolutePath());\n    return decompiledSource;\n  }\n catch (  Exception e) {\n    StringWriter sw=new StringWriter();\n    e.printStackTrace(new PrintWriter(sw));\n    e.printStackTrace();\n    exception=\"Bytecode Viewer Version: \" + VERSION + nl+ nl+ sw;\n  }\n  return JDGUI + \" \" + ERROR+ \"! \"+ ExceptionUI.SEND_STACKTRACE_TO+ nl+ nl+ TranslatedStrings.SUGGESTED_FIX_DECOMPILER_ERROR+ nl+ nl+ exception;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 363,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2970,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 126,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public String decompileClassNode(ClassNode cn,byte[] b){\n  String exception;\n  try {\n    final File tempDirectory=new File(Constants.tempDirectory + fs + MiscUtils.randomString(32)+ fs);\n    tempDirectory.mkdir();\n    final File tempClass=new File(tempDirectory.getAbsolutePath() + fs + cn.name+ \".class\");\n    final File tempJava=new File(tempDirectory.getAbsolutePath() + fs + cn.name+ \".java\");\n    if (cn.name.contains(\"/\")) {\n      String[] raw=cn.name.split(\"/\");\n      String path=tempDirectory.getAbsolutePath() + fs;\n      for (int i=0; i < raw.length - 1; i++) {\n        path+=raw[i] + fs;\n        File f=new File(path);\n        f.mkdir();\n      }\n    }\n    try {\n      final FileOutputStream fos=new FileOutputStream(tempClass);\n      fos.write(b);\n      fos.close();\n    }\n catch (    final IOException e) {\n      BytecodeViewer.handleException(e);\n    }\n    String pathToClass=tempClass.getAbsolutePath().replace('/',File.separatorChar).replace('\\\\',File.separatorChar);\n    String directoryPath=JDGUIClassFileUtil.ExtractDirectoryPath(pathToClass);\n    String internalPath=JDGUIClassFileUtil.ExtractInternalPath(directoryPath,pathToClass);\n    CommonPreferences preferences=new CommonPreferences(){\n      @Override public boolean isShowLineNumbers(){\n        return false;\n      }\n      @Override public boolean isMergeEmptyLines(){\n        return true;\n      }\n    }\n;\n    DirectoryLoader loader=new DirectoryLoader(new File(directoryPath));\n    PrintStream ps=new PrintStream(tempJava.getAbsolutePath());\n    PlainTextPrinter printer=new PlainTextPrinter(preferences,ps);\n    org.jd.core.v1.api.Decompiler decompiler=new ClassFileToJavaSourceDecompiler();\n    decompiler.decompile(loader,printer,internalPath,preferences.getPreferences());\n    String decompiledSource;\n    decompiledSource=DiskReader.loadAsString(tempJava.getAbsolutePath());\n    return decompiledSource;\n  }\n catch (  Exception e) {\n    StringWriter sw=new StringWriter();\n    e.printStackTrace(new PrintWriter(sw));\n    e.printStackTrace();\n    exception=\"Bytecode Viewer Version: \" + VERSION + nl+ nl+ sw;\n  }\n  return JDGUI + \" \" + ERROR+ \"! \"+ ExceptionUI.SEND_STACKTRACE_TO+ nl+ nl+ TranslatedStrings.SUGGESTED_FIX_DECOMPILER_ERROR+ nl+ nl+ exception;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 379,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 67,
        "startColumnNumber" : 16,
        "endLineNumber" : 67,
        "endColumnNumber" : 67
      },
      "nodeContext" : "String path=tempDirectory.getAbsolutePath() + fs;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.io.File"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 60,
    "startColumnNumber" : 12,
    "endLineNumber" : 60,
    "endColumnNumber" : 25
  }, {
    "charLength" : 13,
    "startLineNumber" : 62,
    "startColumnNumber" : 44,
    "endLineNumber" : 62,
    "endColumnNumber" : 57
  }, {
    "charLength" : 13,
    "startLineNumber" : 63,
    "startColumnNumber" : 43,
    "endLineNumber" : 63,
    "endColumnNumber" : 56
  }, {
    "charLength" : 13,
    "startLineNumber" : 67,
    "startColumnNumber" : 30,
    "endLineNumber" : 67,
    "endColumnNumber" : 43
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 6
  } ]
}