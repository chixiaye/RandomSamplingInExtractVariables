{
  "id" : 60,
  "expression" : "extractValue(valueLiteral,Duration.class).toMillis()",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-table/flink-table-planner/src/main/java/org/apache/flink/table/planner/expressions/converter/ExpressionConverter.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "extractValue(valueLiteral,Duration.class).toMillis()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 53,
      "startLineNumber" : 144,
      "startColumnNumber" : 43,
      "endLineNumber" : 144,
      "endColumnNumber" : 96
    },
    "astNodeNumber" : 8,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 144,
        "startColumnNumber" : 24,
        "endLineNumber" : 144,
        "endColumnNumber" : 97
      },
      "nodeContext" : "BigDecimal.valueOf(extractValue(valueLiteral,Duration.class).toMillis())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 144,
        "startColumnNumber" : 16,
        "endLineNumber" : 144,
        "endColumnNumber" : 97
      },
      "nodeContext" : "value=BigDecimal.valueOf(extractValue(valueLiteral,Duration.class).toMillis())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 13,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 144,
        "startColumnNumber" : 16,
        "endLineNumber" : 144,
        "endColumnNumber" : 98
      },
      "nodeContext" : "value=BigDecimal.valueOf(extractValue(valueLiteral,Duration.class).toMillis());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3022,
        "startLineNumber" : 117,
        "startColumnNumber" : 8,
        "endLineNumber" : 182,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (type.getTypeRoot()) {\ncase DECIMAL:case TINYINT:case SMALLINT:case INTEGER:case BIGINT:case FLOAT:case DOUBLE:  value=extractValue(valueLiteral,BigDecimal.class);\nbreak;\ncase VARCHAR:case CHAR:value=extractValue(valueLiteral,String.class);\nbreak;\ncase BINARY:case VARBINARY:value=new ByteString(extractValue(valueLiteral,byte[].class));\nbreak;\ncase INTERVAL_YEAR_MONTH:value=BigDecimal.valueOf(extractValue(valueLiteral,Period.class).toTotalMonths());\nbreak;\ncase INTERVAL_DAY_TIME:value=BigDecimal.valueOf(extractValue(valueLiteral,Duration.class).toMillis());\nbreak;\ncase DATE:value=DateString.fromDaysSinceEpoch((int)extractValue(valueLiteral,LocalDate.class).toEpochDay());\nbreak;\ncase TIME_WITHOUT_TIME_ZONE:TimeType timeType=(TimeType)type;\nint precision=timeType.getPrecision();\nrelDataType=typeFactory.createSqlType(SqlTypeName.TIME,Math.min(precision,3));\nvalue=TimeString.fromMillisOfDay(extractValue(valueLiteral,LocalTime.class).get(ChronoField.MILLI_OF_DAY));\nbreak;\ncase TIMESTAMP_WITHOUT_TIME_ZONE:LocalDateTime datetime=extractValue(valueLiteral,LocalDateTime.class);\nvalue=fromLocalDateTime(datetime);\nbreak;\ncase TIMESTAMP_WITH_LOCAL_TIME_ZONE:Instant instant=extractValue(valueLiteral,Instant.class);\nvalue=fromLocalDateTime(instant.atOffset(ZoneOffset.UTC).toLocalDateTime());\nbreak;\ndefault:value=extractValue(valueLiteral,Object.class);\nif (value instanceof TimePointUnit) {\nvalue=commonToCalcite((TimePointUnit)value);\n}\n else if (value instanceof TimeIntervalUnit) {\nvalue=commonToCalcite((TimeIntervalUnit)value);\n}\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 251,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3963,
        "startLineNumber" : 105,
        "startColumnNumber" : 62,
        "endLineNumber" : 193,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  LogicalType type=fromDataTypeToLogicalType(valueLiteral.getOutputDataType());\n  RexBuilder rexBuilder=relBuilder.getRexBuilder();\n  FlinkTypeFactory typeFactory=(FlinkTypeFactory)relBuilder.getTypeFactory();\n  RelDataType relDataType=typeFactory.createFieldTypeFromLogicalType(type);\n  if (valueLiteral.isNull()) {\n    return rexBuilder.makeNullLiteral(relDataType);\n  }\n  Object value=null;\nswitch (type.getTypeRoot()) {\ncase DECIMAL:case TINYINT:case SMALLINT:case INTEGER:case BIGINT:case FLOAT:case DOUBLE:    value=extractValue(valueLiteral,BigDecimal.class);\n  break;\ncase VARCHAR:case CHAR:value=extractValue(valueLiteral,String.class);\nbreak;\ncase BINARY:case VARBINARY:value=new ByteString(extractValue(valueLiteral,byte[].class));\nbreak;\ncase INTERVAL_YEAR_MONTH:value=BigDecimal.valueOf(extractValue(valueLiteral,Period.class).toTotalMonths());\nbreak;\ncase INTERVAL_DAY_TIME:value=BigDecimal.valueOf(extractValue(valueLiteral,Duration.class).toMillis());\nbreak;\ncase DATE:value=DateString.fromDaysSinceEpoch((int)extractValue(valueLiteral,LocalDate.class).toEpochDay());\nbreak;\ncase TIME_WITHOUT_TIME_ZONE:TimeType timeType=(TimeType)type;\nint precision=timeType.getPrecision();\nrelDataType=typeFactory.createSqlType(SqlTypeName.TIME,Math.min(precision,3));\nvalue=TimeString.fromMillisOfDay(extractValue(valueLiteral,LocalTime.class).get(ChronoField.MILLI_OF_DAY));\nbreak;\ncase TIMESTAMP_WITHOUT_TIME_ZONE:LocalDateTime datetime=extractValue(valueLiteral,LocalDateTime.class);\nvalue=fromLocalDateTime(datetime);\nbreak;\ncase TIMESTAMP_WITH_LOCAL_TIME_ZONE:Instant instant=extractValue(valueLiteral,Instant.class);\nvalue=fromLocalDateTime(instant.atOffset(ZoneOffset.UTC).toLocalDateTime());\nbreak;\ndefault:value=extractValue(valueLiteral,Object.class);\nif (value instanceof TimePointUnit) {\nvalue=commonToCalcite((TimePointUnit)value);\n}\n else if (value instanceof TimeIntervalUnit) {\nvalue=commonToCalcite((TimeIntervalUnit)value);\n}\nbreak;\n}\nreturn rexBuilder.makeLiteral(value,relDataType,true);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 313,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4035,
        "startLineNumber" : 104,
        "startColumnNumber" : 4,
        "endLineNumber" : 193,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public RexNode visit(ValueLiteralExpression valueLiteral){\n  LogicalType type=fromDataTypeToLogicalType(valueLiteral.getOutputDataType());\n  RexBuilder rexBuilder=relBuilder.getRexBuilder();\n  FlinkTypeFactory typeFactory=(FlinkTypeFactory)relBuilder.getTypeFactory();\n  RelDataType relDataType=typeFactory.createFieldTypeFromLogicalType(type);\n  if (valueLiteral.isNull()) {\n    return rexBuilder.makeNullLiteral(relDataType);\n  }\n  Object value=null;\nswitch (type.getTypeRoot()) {\ncase DECIMAL:case TINYINT:case SMALLINT:case INTEGER:case BIGINT:case FLOAT:case DOUBLE:    value=extractValue(valueLiteral,BigDecimal.class);\n  break;\ncase VARCHAR:case CHAR:value=extractValue(valueLiteral,String.class);\nbreak;\ncase BINARY:case VARBINARY:value=new ByteString(extractValue(valueLiteral,byte[].class));\nbreak;\ncase INTERVAL_YEAR_MONTH:value=BigDecimal.valueOf(extractValue(valueLiteral,Period.class).toTotalMonths());\nbreak;\ncase INTERVAL_DAY_TIME:value=BigDecimal.valueOf(extractValue(valueLiteral,Duration.class).toMillis());\nbreak;\ncase DATE:value=DateString.fromDaysSinceEpoch((int)extractValue(valueLiteral,LocalDate.class).toEpochDay());\nbreak;\ncase TIME_WITHOUT_TIME_ZONE:TimeType timeType=(TimeType)type;\nint precision=timeType.getPrecision();\nrelDataType=typeFactory.createSqlType(SqlTypeName.TIME,Math.min(precision,3));\nvalue=TimeString.fromMillisOfDay(extractValue(valueLiteral,LocalTime.class).get(ChronoField.MILLI_OF_DAY));\nbreak;\ncase TIMESTAMP_WITHOUT_TIME_ZONE:LocalDateTime datetime=extractValue(valueLiteral,LocalDateTime.class);\nvalue=fromLocalDateTime(datetime);\nbreak;\ncase TIMESTAMP_WITH_LOCAL_TIME_ZONE:Instant instant=extractValue(valueLiteral,Instant.class);\nvalue=fromLocalDateTime(instant.atOffset(ZoneOffset.UTC).toLocalDateTime());\nbreak;\ndefault:value=extractValue(valueLiteral,Object.class);\nif (value instanceof TimePointUnit) {\nvalue=commonToCalcite((TimePointUnit)value);\n}\n else if (value instanceof TimeIntervalUnit) {\nvalue=commonToCalcite((TimeIntervalUnit)value);\n}\nbreak;\n}\nreturn rexBuilder.makeLiteral(value,relDataType,true);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 324,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 144,
        "startColumnNumber" : 16,
        "endLineNumber" : 144,
        "endColumnNumber" : 98
      },
      "nodeContext" : "value=BigDecimal.valueOf(extractValue(valueLiteral,Duration.class).toMillis());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 8
    },
    "tokenLength" : 4,
    "type" : "long"
  } ],
  "positionList" : [ {
    "charLength" : 53,
    "startLineNumber" : 144,
    "startColumnNumber" : 43,
    "endLineNumber" : 144,
    "endColumnNumber" : 96
  } ],
  "layoutRelationDataList" : [ ]
}