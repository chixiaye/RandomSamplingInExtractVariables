{
  "id" : 468,
  "expression" : "!parameter.isNamedTypeSignature()",
  "projectName" : "prestodb@presto",
  "commitID" : "eff77883d0d24dc6022ecde252612d1430c9fbac",
  "filePath" : "/presto-iceberg/src/main/java/com/facebook/presto/iceberg/TypeConverter.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "!parameter.isNamedTypeSignature()",
    "nodeType" : "PrefixExpression",
    "nodePosition" : {
      "charLength" : 33,
      "startLineNumber" : 290,
      "startColumnNumber" : 20,
      "endLineNumber" : 290,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 189,
        "startLineNumber" : 290,
        "startColumnNumber" : 16,
        "endLineNumber" : 292,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (!parameter.isNamedTypeSignature()) {\n  throw new IllegalArgumentException(format(\"Expected all parameters to be named type, but got %s\",parameter));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 621,
        "startLineNumber" : 289,
        "startColumnNumber" : 93,
        "endLineNumber" : 298,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (!parameter.isNamedTypeSignature()) {\n    throw new IllegalArgumentException(format(\"Expected all parameters to be named type, but got %s\",parameter));\n  }\n  NamedTypeSignature namedTypeSignature=parameter.getNamedTypeSignature();\n  if (!namedTypeSignature.getName().isPresent()) {\n    throw new PrestoException(NOT_SUPPORTED,format(\"Anonymous row type is not supported in Hive. Please give each field a name: %s\",type));\n  }\n  fieldNames.add(namedTypeSignature.getName().get());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 49,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 702,
        "startLineNumber" : 289,
        "startColumnNumber" : 12,
        "endLineNumber" : 298,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (TypeSignatureParameter parameter : type.getTypeSignature().getParameters()) {\n  if (!parameter.isNamedTypeSignature()) {\n    throw new IllegalArgumentException(format(\"Expected all parameters to be named type, but got %s\",parameter));\n  }\n  NamedTypeSignature namedTypeSignature=parameter.getNamedTypeSignature();\n  if (!namedTypeSignature.getName().isPresent()) {\n    throw new PrestoException(NOT_SUPPORTED,format(\"Anonymous row type is not supported in Hive. Please give each field a name: %s\",type));\n  }\n  fieldNames.add(namedTypeSignature.getName().get());\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 59,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1051,
        "startLineNumber" : 287,
        "startColumnNumber" : 29,
        "endLineNumber" : 304,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ImmutableList.Builder<String> fieldNames=ImmutableList.builder();\n  for (  TypeSignatureParameter parameter : type.getTypeSignature().getParameters()) {\n    if (!parameter.isNamedTypeSignature()) {\n      throw new IllegalArgumentException(format(\"Expected all parameters to be named type, but got %s\",parameter));\n    }\n    NamedTypeSignature namedTypeSignature=parameter.getNamedTypeSignature();\n    if (!namedTypeSignature.getName().isPresent()) {\n      throw new PrestoException(NOT_SUPPORTED,format(\"Anonymous row type is not supported in Hive. Please give each field a name: %s\",type));\n    }\n    fieldNames.add(namedTypeSignature.getName().get());\n  }\n  return getStructTypeInfo(fieldNames.build(),type.getTypeParameters().stream().map(TypeConverter::toHiveTypeInfo).collect(toList()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 93,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1072,
        "startLineNumber" : 287,
        "startColumnNumber" : 8,
        "endLineNumber" : 304,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (isRowType(type)) {\n  ImmutableList.Builder<String> fieldNames=ImmutableList.builder();\n  for (  TypeSignatureParameter parameter : type.getTypeSignature().getParameters()) {\n    if (!parameter.isNamedTypeSignature()) {\n      throw new IllegalArgumentException(format(\"Expected all parameters to be named type, but got %s\",parameter));\n    }\n    NamedTypeSignature namedTypeSignature=parameter.getNamedTypeSignature();\n    if (!namedTypeSignature.getName().isPresent()) {\n      throw new PrestoException(NOT_SUPPORTED,format(\"Anonymous row type is not supported in Hive. Please give each field a name: %s\",type));\n    }\n    fieldNames.add(namedTypeSignature.getName().get());\n  }\n  return getStructTypeInfo(fieldNames.build(),type.getTypeParameters().stream().map(TypeConverter::toHiveTypeInfo).collect(toList()));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 97,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3746,
        "startLineNumber" : 224,
        "startColumnNumber" : 4,
        "endLineNumber" : 306,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (BOOLEAN.equals(type)) {\n    return HIVE_BOOLEAN.getTypeInfo();\n  }\n  if (BIGINT.equals(type)) {\n    return HIVE_LONG.getTypeInfo();\n  }\n  if (INTEGER.equals(type)) {\n    return HIVE_INT.getTypeInfo();\n  }\n  if (SMALLINT.equals(type)) {\n    return HIVE_SHORT.getTypeInfo();\n  }\n  if (TINYINT.equals(type)) {\n    return HIVE_BYTE.getTypeInfo();\n  }\n  if (REAL.equals(type)) {\n    return HIVE_FLOAT.getTypeInfo();\n  }\n  if (DOUBLE.equals(type)) {\n    return HIVE_DOUBLE.getTypeInfo();\n  }\n  if (type instanceof VarcharType) {\n    VarcharType varcharType=(VarcharType)type;\n    if (varcharType.isUnbounded()) {\n      return HIVE_STRING.getTypeInfo();\n    }\n    if (varcharType.getLengthSafe() <= HiveVarchar.MAX_VARCHAR_LENGTH) {\n      return getVarcharTypeInfo(varcharType.getLengthSafe());\n    }\n    throw new PrestoException(NOT_SUPPORTED,format(\"Unsupported Hive type: %s. Supported VARCHAR types: VARCHAR(<=%d), VARCHAR.\",type,HiveVarchar.MAX_VARCHAR_LENGTH));\n  }\n  if (type instanceof CharType) {\n    CharType charType=(CharType)type;\n    int charLength=charType.getLength();\n    if (charLength <= HiveChar.MAX_CHAR_LENGTH) {\n      return getCharTypeInfo(charLength);\n    }\n    throw new PrestoException(NOT_SUPPORTED,format(\"Unsupported Hive type: %s. Supported CHAR types: CHAR(<=%d).\",type,HiveChar.MAX_CHAR_LENGTH));\n  }\n  if (VARBINARY.equals(type)) {\n    return HIVE_BINARY.getTypeInfo();\n  }\n  if (DATE.equals(type)) {\n    return HIVE_DATE.getTypeInfo();\n  }\n  if (TIMESTAMP.equals(type)) {\n    return HIVE_TIMESTAMP.getTypeInfo();\n  }\n  if (type instanceof DecimalType) {\n    DecimalType decimalType=(DecimalType)type;\n    return new DecimalTypeInfo(decimalType.getPrecision(),decimalType.getScale());\n  }\n  if (isArrayType(type)) {\n    TypeInfo elementType=toHiveTypeInfo(type.getTypeParameters().get(0));\n    return getListTypeInfo(elementType);\n  }\n  if (isMapType(type)) {\n    TypeInfo keyType=toHiveTypeInfo(type.getTypeParameters().get(0));\n    TypeInfo valueType=toHiveTypeInfo(type.getTypeParameters().get(1));\n    return getMapTypeInfo(keyType,valueType);\n  }\n  if (isRowType(type)) {\n    ImmutableList.Builder<String> fieldNames=ImmutableList.builder();\n    for (    TypeSignatureParameter parameter : type.getTypeSignature().getParameters()) {\n      if (!parameter.isNamedTypeSignature()) {\n        throw new IllegalArgumentException(format(\"Expected all parameters to be named type, but got %s\",parameter));\n      }\n      NamedTypeSignature namedTypeSignature=parameter.getNamedTypeSignature();\n      if (!namedTypeSignature.getName().isPresent()) {\n        throw new PrestoException(NOT_SUPPORTED,format(\"Anonymous row type is not supported in Hive. Please give each field a name: %s\",type));\n      }\n      fieldNames.add(namedTypeSignature.getName().get());\n    }\n    return getStructTypeInfo(fieldNames.build(),type.getTypeParameters().stream().map(TypeConverter::toHiveTypeInfo).collect(toList()));\n  }\n  throw new PrestoException(NOT_SUPPORTED,format(\"Unsupported Hive type: %s\",type));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 386,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3800,
        "startLineNumber" : 223,
        "startColumnNumber" : 4,
        "endLineNumber" : 306,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private static TypeInfo toHiveTypeInfo(Type type){\n  if (BOOLEAN.equals(type)) {\n    return HIVE_BOOLEAN.getTypeInfo();\n  }\n  if (BIGINT.equals(type)) {\n    return HIVE_LONG.getTypeInfo();\n  }\n  if (INTEGER.equals(type)) {\n    return HIVE_INT.getTypeInfo();\n  }\n  if (SMALLINT.equals(type)) {\n    return HIVE_SHORT.getTypeInfo();\n  }\n  if (TINYINT.equals(type)) {\n    return HIVE_BYTE.getTypeInfo();\n  }\n  if (REAL.equals(type)) {\n    return HIVE_FLOAT.getTypeInfo();\n  }\n  if (DOUBLE.equals(type)) {\n    return HIVE_DOUBLE.getTypeInfo();\n  }\n  if (type instanceof VarcharType) {\n    VarcharType varcharType=(VarcharType)type;\n    if (varcharType.isUnbounded()) {\n      return HIVE_STRING.getTypeInfo();\n    }\n    if (varcharType.getLengthSafe() <= HiveVarchar.MAX_VARCHAR_LENGTH) {\n      return getVarcharTypeInfo(varcharType.getLengthSafe());\n    }\n    throw new PrestoException(NOT_SUPPORTED,format(\"Unsupported Hive type: %s. Supported VARCHAR types: VARCHAR(<=%d), VARCHAR.\",type,HiveVarchar.MAX_VARCHAR_LENGTH));\n  }\n  if (type instanceof CharType) {\n    CharType charType=(CharType)type;\n    int charLength=charType.getLength();\n    if (charLength <= HiveChar.MAX_CHAR_LENGTH) {\n      return getCharTypeInfo(charLength);\n    }\n    throw new PrestoException(NOT_SUPPORTED,format(\"Unsupported Hive type: %s. Supported CHAR types: CHAR(<=%d).\",type,HiveChar.MAX_CHAR_LENGTH));\n  }\n  if (VARBINARY.equals(type)) {\n    return HIVE_BINARY.getTypeInfo();\n  }\n  if (DATE.equals(type)) {\n    return HIVE_DATE.getTypeInfo();\n  }\n  if (TIMESTAMP.equals(type)) {\n    return HIVE_TIMESTAMP.getTypeInfo();\n  }\n  if (type instanceof DecimalType) {\n    DecimalType decimalType=(DecimalType)type;\n    return new DecimalTypeInfo(decimalType.getPrecision(),decimalType.getScale());\n  }\n  if (isArrayType(type)) {\n    TypeInfo elementType=toHiveTypeInfo(type.getTypeParameters().get(0));\n    return getListTypeInfo(elementType);\n  }\n  if (isMapType(type)) {\n    TypeInfo keyType=toHiveTypeInfo(type.getTypeParameters().get(0));\n    TypeInfo valueType=toHiveTypeInfo(type.getTypeParameters().get(1));\n    return getMapTypeInfo(keyType,valueType);\n  }\n  if (isRowType(type)) {\n    ImmutableList.Builder<String> fieldNames=ImmutableList.builder();\n    for (    TypeSignatureParameter parameter : type.getTypeSignature().getParameters()) {\n      if (!parameter.isNamedTypeSignature()) {\n        throw new IllegalArgumentException(format(\"Expected all parameters to be named type, but got %s\",parameter));\n      }\n      NamedTypeSignature namedTypeSignature=parameter.getNamedTypeSignature();\n      if (!namedTypeSignature.getName().isPresent()) {\n        throw new PrestoException(NOT_SUPPORTED,format(\"Anonymous row type is not supported in Hive. Please give each field a name: %s\",type));\n      }\n      fieldNames.add(namedTypeSignature.getName().get());\n    }\n    return getStructTypeInfo(fieldNames.build(),type.getTypeParameters().stream().map(TypeConverter::toHiveTypeInfo).collect(toList()));\n  }\n  throw new PrestoException(NOT_SUPPORTED,format(\"Unsupported Hive type: %s\",type));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 396,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 189,
        "startLineNumber" : 290,
        "startColumnNumber" : 16,
        "endLineNumber" : 292,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (!parameter.isNamedTypeSignature()) {\n  throw new IllegalArgumentException(format(\"Expected all parameters to be named type, but got %s\",parameter));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 33,
    "startLineNumber" : 290,
    "startColumnNumber" : 20,
    "endLineNumber" : 290,
    "endColumnNumber" : 53
  } ],
  "layoutRelationDataList" : [ ]
}