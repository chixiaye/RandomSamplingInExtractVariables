{
  "id" : 14,
  "expression" : "withSettings().name(name).defaultAnswer(RETURNS_DEFAULTS)",
  "projectName" : "mockito@mockito",
  "commitID" : "7f036eb9ed79444adcec3a6c635870222b109e50",
  "filePath" : "/src/main/java/org/mockito/Mockito.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "withSettings().name(name).defaultAnswer(RETURNS_DEFAULTS)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 57,
      "startLineNumber" : 1882,
      "startColumnNumber" : 33,
      "endLineNumber" : 1882,
      "endColumnNumber" : 90
    },
    "astNodeNumber" : 8,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 1882,
        "startColumnNumber" : 15,
        "endLineNumber" : 1882,
        "endColumnNumber" : 91
      },
      "nodeContext" : "mock(classToMock,withSettings().name(name).defaultAnswer(RETURNS_DEFAULTS))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 1882,
        "startColumnNumber" : 8,
        "endLineNumber" : 1882,
        "endColumnNumber" : 92
      },
      "nodeContext" : "return mock(classToMock,withSettings().name(name).defaultAnswer(RETURNS_DEFAULTS));\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 1881,
        "startColumnNumber" : 64,
        "endLineNumber" : 1883,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  return mock(classToMock,withSettings().name(name).defaultAnswer(RETURNS_DEFAULTS));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 967,
        "startLineNumber" : 1865,
        "startColumnNumber" : 4,
        "endLineNumber" : 1883,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Specifies mock name. Naming mocks can be helpful for debugging - the name is used in all verification errors. <p> Beware that naming mocks is not a solution for complex code which uses too many mocks or collaborators. <b>If you have too many mocks then refactor the code</b> so that it's easy to test/debug without necessity of naming mocks. <p> <b>If you use <code>&#064;Mock</code> annotation then you've got naming mocks for free!</b> <code>&#064;Mock</code> uses field name as mock name.  {@link Mock Read more.}<p> See examples in javadoc for  {@link Mockito} class\n * @param classToMock class or interface to mock\n * @param name of the mock\n * @return mock object\n */\n@CheckReturnValue public static <T>T mock(Class<T> classToMock,String name){\n  return mock(classToMock,withSettings().name(name).defaultAnswer(RETURNS_DEFAULTS));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 35,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 1882,
        "startColumnNumber" : 8,
        "endLineNumber" : 1882,
        "endColumnNumber" : 92
      },
      "nodeContext" : "return mock(classToMock,withSettings().name(name).defaultAnswer(RETURNS_DEFAULTS));\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    },
    "tokenLength" : 6,
    "type" : "org.mockito.MockSettings"
  } ],
  "positionList" : [ {
    "charLength" : 57,
    "startLineNumber" : 1882,
    "startColumnNumber" : 33,
    "endLineNumber" : 1882,
    "endColumnNumber" : 90
  } ],
  "layoutRelationDataList" : [ ]
}