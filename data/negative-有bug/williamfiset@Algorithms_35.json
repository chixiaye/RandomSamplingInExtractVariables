{
  "id" : 35,
  "expression" : "edges",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/graphtheory/Kahns.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "edges",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 34,
      "startColumnNumber" : 20,
      "endLineNumber" : 34,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 34,
        "startColumnNumber" : 6,
        "endLineNumber" : 36,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int to : edges) {\n  inDegree[to]++;\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 33,
        "startColumnNumber" : 34,
        "endLineNumber" : 37,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  for (  int to : edges) {\n    inDegree[to]++;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 33,
        "startColumnNumber" : 4,
        "endLineNumber" : 37,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (List<Integer> edges : g) {\n  for (  int to : edges) {\n    inDegree[to]++;\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 21,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 917,
        "startLineNumber" : 28,
        "startColumnNumber" : 44,
        "endLineNumber" : 66,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int n=g.size();\n  int[] inDegree=new int[n];\n  for (  List<Integer> edges : g) {\n    for (    int to : edges) {\n      inDegree[to]++;\n    }\n  }\n  Queue<Integer> q=new ArrayDeque<>();\n  for (int i=0; i < n; i++) {\n    if (inDegree[i] == 0) {\n      q.offer(i);\n    }\n  }\n  int index=0;\n  int[] order=new int[n];\n  while (!q.isEmpty()) {\n    int at=q.poll();\n    order[index++]=at;\n    for (    int to : g.get(at)) {\n      inDegree[to]--;\n      if (inDegree[to] == 0) {\n        q.offer(to);\n      }\n    }\n  }\n  System.out.println(\"inDegree: \" + java.util.Arrays.toString(inDegree));\n  if (index != n) {\n    throw new IllegalArgumentException(\"Graph is not acyclic! Detected a cycle.\");\n  }\n  return order;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 166,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 959,
        "startLineNumber" : 28,
        "startColumnNumber" : 2,
        "endLineNumber" : 66,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public int[] kahns(List<List<Integer>> g){\n  int n=g.size();\n  int[] inDegree=new int[n];\n  for (  List<Integer> edges : g) {\n    for (    int to : edges) {\n      inDegree[to]++;\n    }\n  }\n  Queue<Integer> q=new ArrayDeque<>();\n  for (int i=0; i < n; i++) {\n    if (inDegree[i] == 0) {\n      q.offer(i);\n    }\n  }\n  int index=0;\n  int[] order=new int[n];\n  while (!q.isEmpty()) {\n    int at=q.poll();\n    order[index++]=at;\n    for (    int to : g.get(at)) {\n      inDegree[to]--;\n      if (inDegree[to] == 0) {\n        q.offer(to);\n      }\n    }\n  }\n  System.out.println(\"inDegree: \" + java.util.Arrays.toString(inDegree));\n  if (index != n) {\n    throw new IllegalArgumentException(\"Graph is not acyclic! Detected a cycle.\");\n  }\n  return order;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 182,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 34,
        "startColumnNumber" : 6,
        "endLineNumber" : 36,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int to : edges) {\n  inDegree[to]++;\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.util.List<java.lang.Integer>"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 34,
    "startColumnNumber" : 20,
    "endLineNumber" : 34,
    "endColumnNumber" : 25
  } ],
  "layoutRelationDataList" : [ ]
}