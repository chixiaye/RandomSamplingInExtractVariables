{
  "id" : 293,
  "expression" : "client.newConsumer(Schema.STRING).topic(topics).subscriptionName(\"my-sub\").subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribe()",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/tests/integration/src/test/java/org/apache/pulsar/tests/integration/semantics/SemanticsTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "client.newConsumer(Schema.STRING).topic(topics).subscriptionName(\"my-sub\").subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribe()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 220,
      "startLineNumber" : 212,
      "startColumnNumber" : 45,
      "endLineNumber" : 216,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 19,
    "astHeight" : 7,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationExpression,fragments]",
      "nodePosition" : {
        "charLength" : 231,
        "startLineNumber" : 212,
        "startColumnNumber" : 34,
        "endLineNumber" : 216,
        "endColumnNumber" : 28
      },
      "nodeContext" : "consumer=client.newConsumer(Schema.STRING).topic(topics).subscriptionName(\"my-sub\").subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribe()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 21,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,resources]",
      "nodePosition" : {
        "charLength" : 248,
        "startLineNumber" : 212,
        "startColumnNumber" : 17,
        "endLineNumber" : 216,
        "endColumnNumber" : 28
      },
      "nodeContext" : "Consumer<String> consumer=client.newConsumer(Schema.STRING).topic(topics).subscriptionName(\"my-sub\").subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribe()",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 27,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1032,
        "startLineNumber" : 212,
        "startColumnNumber" : 12,
        "endLineNumber" : 233,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try (Consumer<String> consumer=client.newConsumer(Schema.STRING).topic(topics).subscriptionName(\"my-sub\").subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribe()){\n  for (int i=0; i < numTopics * numMessages; i++) {\n    Message<String> m=consumer.receive();\n    int topicIdx;\n    if (numTopics > 1) {\n      String topic=((TopicMessageIdImpl)m.getMessageId()).getTopicPartitionName();\n      String[] topicParts=StringUtils.split(topic,'-');\n      topicIdx=Integer.parseInt(topicParts[topicParts.length - 1]);\n    }\n else {\n      topicIdx=0;\n    }\n    int topicSeq=topicCounters.get(topicIdx).getAndIncrement();\n    assertEquals(\"sip-topic-\" + topicIdx + \"-message-\"+ topicSeq,m.getValue());\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 128,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1771,
        "startLineNumber" : 192,
        "startColumnNumber" : 22,
        "endLineNumber" : 234,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (int t=0; t < numTopics; t++) {\n    try (Producer<String> producer=client.newProducer(Schema.STRING).topic(topicName + \"-\" + t).create()){\n      for (int i=0; i < numMessages; i++) {\n        producer.send(\"sip-topic-\" + t + \"-message-\"+ i);\n      }\n    }\n   }\n  String[] topics=new String[numTopics];\n  Map<Integer,AtomicInteger> topicCounters=new HashMap<>(numTopics);\n  for (int i=0; i < numTopics; i++) {\n    topics[i]=topicName + \"-\" + i;\n    topicCounters.put(i,new AtomicInteger(0));\n  }\n  try (Consumer<String> consumer=client.newConsumer(Schema.STRING).topic(topics).subscriptionName(\"my-sub\").subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribe()){\n    for (int i=0; i < numTopics * numMessages; i++) {\n      Message<String> m=consumer.receive();\n      int topicIdx;\n      if (numTopics > 1) {\n        String topic=((TopicMessageIdImpl)m.getMessageId()).getTopicPartitionName();\n        String[] topicParts=StringUtils.split(topic,'-');\n        topicIdx=Integer.parseInt(topicParts[topicParts.length - 1]);\n      }\n else {\n        topicIdx=0;\n      }\n      int topicSeq=topicCounters.get(topicIdx).getAndIncrement();\n      assertEquals(\"sip-topic-\" + topicIdx + \"-message-\"+ topicSeq,m.getValue());\n    }\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 244,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1907,
        "startLineNumber" : 190,
        "startColumnNumber" : 8,
        "endLineNumber" : 234,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try (PulsarClient client=PulsarClient.builder().serviceUrl(pulsarCluster.getPlainTextServiceUrl()).build()){\n  for (int t=0; t < numTopics; t++) {\n    try (Producer<String> producer=client.newProducer(Schema.STRING).topic(topicName + \"-\" + t).create()){\n      for (int i=0; i < numMessages; i++) {\n        producer.send(\"sip-topic-\" + t + \"-message-\"+ i);\n      }\n    }\n   }\n  String[] topics=new String[numTopics];\n  Map<Integer,AtomicInteger> topicCounters=new HashMap<>(numTopics);\n  for (int i=0; i < numTopics; i++) {\n    topics[i]=topicName + \"-\" + i;\n    topicCounters.put(i,new AtomicInteger(0));\n  }\n  try (Consumer<String> consumer=client.newConsumer(Schema.STRING).topic(topics).subscriptionName(\"my-sub\").subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribe()){\n    for (int i=0; i < numTopics * numMessages; i++) {\n      Message<String> m=consumer.receive();\n      int topicIdx;\n      if (numTopics > 1) {\n        String topic=((TopicMessageIdImpl)m.getMessageId()).getTopicPartitionName();\n        String[] topicParts=StringUtils.split(topic,'-');\n        topicIdx=Integer.parseInt(topicParts[topicParts.length - 1]);\n      }\n else {\n        topicIdx=0;\n      }\n      int topicSeq=topicCounters.get(topicIdx).getAndIncrement();\n      assertEquals(\"sip-topic-\" + topicIdx + \"-message-\"+ topicSeq,m.getValue());\n    }\n  }\n }\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 260,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2040,
        "startLineNumber" : 185,
        "startColumnNumber" : 81,
        "endLineNumber" : 235,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String topicName=generateTopicName(\"test-subscription-initial-pos\",true);\n  int numMessages=10;\n  try (PulsarClient client=PulsarClient.builder().serviceUrl(pulsarCluster.getPlainTextServiceUrl()).build()){\n    for (int t=0; t < numTopics; t++) {\n      try (Producer<String> producer=client.newProducer(Schema.STRING).topic(topicName + \"-\" + t).create()){\n        for (int i=0; i < numMessages; i++) {\n          producer.send(\"sip-topic-\" + t + \"-message-\"+ i);\n        }\n      }\n     }\n    String[] topics=new String[numTopics];\n    Map<Integer,AtomicInteger> topicCounters=new HashMap<>(numTopics);\n    for (int i=0; i < numTopics; i++) {\n      topics[i]=topicName + \"-\" + i;\n      topicCounters.put(i,new AtomicInteger(0));\n    }\n    try (Consumer<String> consumer=client.newConsumer(Schema.STRING).topic(topics).subscriptionName(\"my-sub\").subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribe()){\n      for (int i=0; i < numTopics * numMessages; i++) {\n        Message<String> m=consumer.receive();\n        int topicIdx;\n        if (numTopics > 1) {\n          String topic=((TopicMessageIdImpl)m.getMessageId()).getTopicPartitionName();\n          String[] topicParts=StringUtils.split(topic,'-');\n          topicIdx=Integer.parseInt(topicParts[topicParts.length - 1]);\n        }\n else {\n          topicIdx=0;\n        }\n        int topicSeq=topicCounters.get(topicIdx).getAndIncrement();\n        assertEquals(\"sip-topic-\" + topicIdx + \"-message-\"+ topicSeq,m.getValue());\n      }\n    }\n   }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 275,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2117,
        "startLineNumber" : 185,
        "startColumnNumber" : 4,
        "endLineNumber" : 235,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void testSubscriptionInitialPosition(int numTopics) throws Exception {\n  String topicName=generateTopicName(\"test-subscription-initial-pos\",true);\n  int numMessages=10;\n  try (PulsarClient client=PulsarClient.builder().serviceUrl(pulsarCluster.getPlainTextServiceUrl()).build()){\n    for (int t=0; t < numTopics; t++) {\n      try (Producer<String> producer=client.newProducer(Schema.STRING).topic(topicName + \"-\" + t).create()){\n        for (int i=0; i < numMessages; i++) {\n          producer.send(\"sip-topic-\" + t + \"-message-\"+ i);\n        }\n      }\n     }\n    String[] topics=new String[numTopics];\n    Map<Integer,AtomicInteger> topicCounters=new HashMap<>(numTopics);\n    for (int i=0; i < numTopics; i++) {\n      topics[i]=topicName + \"-\" + i;\n      topicCounters.put(i,new AtomicInteger(0));\n    }\n    try (Consumer<String> consumer=client.newConsumer(Schema.STRING).topic(topics).subscriptionName(\"my-sub\").subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribe()){\n      for (int i=0; i < numTopics * numMessages; i++) {\n        Message<String> m=consumer.receive();\n        int topicIdx;\n        if (numTopics > 1) {\n          String topic=((TopicMessageIdImpl)m.getMessageId()).getTopicPartitionName();\n          String[] topicParts=StringUtils.split(topic,'-');\n          topicIdx=Integer.parseInt(topicParts[topicParts.length - 1]);\n        }\n else {\n          topicIdx=0;\n        }\n        int topicSeq=topicCounters.get(topicIdx).getAndIncrement();\n        assertEquals(\"sip-topic-\" + topicIdx + \"-message-\"+ topicSeq,m.getValue());\n      }\n    }\n   }\n }\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 284,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,resources]",
      "nodePosition" : {
        "charLength" : 248,
        "startLineNumber" : 212,
        "startColumnNumber" : 17,
        "endLineNumber" : 216,
        "endColumnNumber" : 28
      },
      "nodeContext" : "Consumer<String> consumer=client.newConsumer(Schema.STRING).topic(topics).subscriptionName(\"my-sub\").subscriptionInitialPosition(SubscriptionInitialPosition.Earliest).subscribe()",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 27,
      "astHeight" : 9
    },
    "tokenLength" : 12,
    "type" : "org.apache.pulsar.client.api.Consumer<java.lang.String>"
  } ],
  "positionList" : [ {
    "charLength" : 220,
    "startLineNumber" : 212,
    "startColumnNumber" : 45,
    "endLineNumber" : 216,
    "endColumnNumber" : 28
  } ],
  "layoutRelationDataList" : [ ]
}