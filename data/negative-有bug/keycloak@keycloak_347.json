{
  "id" : 347,
  "expression" : "\"Cannot start managed Karaf container\"",
  "projectName" : "keycloak@keycloak",
  "commitID" : "aacae9b9acb0fbedc49d4f88c9fbd7aa11922dce",
  "filePath" : "/testsuite/integration-arquillian/util/src/main/java/org/keycloak/testsuite/utils/arquillian/fuse/CustomFuseContainer.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Cannot start managed Karaf container\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 38,
      "startLineNumber" : 148,
      "startColumnNumber" : 45,
      "endLineNumber" : 148,
      "endColumnNumber" : 83
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 148,
        "startColumnNumber" : 22,
        "endLineNumber" : 148,
        "endColumnNumber" : 88
      },
      "nodeContext" : "new LifecycleException(\"Cannot start managed Karaf container\",ex)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 148,
        "startColumnNumber" : 16,
        "endLineNumber" : 148,
        "endColumnNumber" : 89
      },
      "nodeContext" : "throw new LifecycleException(\"Cannot start managed Karaf container\",ex);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 147,
        "startColumnNumber" : 37,
        "endLineNumber" : 149,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  throw new LifecycleException(\"Cannot start managed Karaf container\",ex);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 128,
        "startLineNumber" : 147,
        "startColumnNumber" : 14,
        "endLineNumber" : 149,
        "endColumnNumber" : 13
      },
      "nodeContext" : "catch (IOException ex) {\n  throw new LifecycleException(\"Cannot start managed Karaf container\",ex);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 444,
        "startLineNumber" : 141,
        "startColumnNumber" : 12,
        "endLineNumber" : 149,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  ProcessBuilder processBuilder=new ProcessBuilder(cmd);\n  processBuilder.directory(karafHomeDir);\n  processBuilder.redirectErrorStream(true);\n  process=processBuilder.start();\n  new Thread(new ConsoleConsumer()).start();\n}\n catch (IOException ex) {\n  throw new LifecycleException(\"Cannot start managed Karaf container\",ex);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 48,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 4366,
        "startLineNumber" : 67,
        "startColumnNumber" : 33,
        "endLineNumber" : 159,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String karafHome=config.getKarafHome();\n  if (karafHome == null)   throw new IllegalStateException(\"karafHome cannot be null\");\n  File karafHomeDir=new File(karafHome).getAbsoluteFile();\n  if (!karafHomeDir.isDirectory())   throw new IllegalStateException(\"Not a valid Karaf home dir: \" + karafHomeDir);\n  String java=System.getProperty(\"java.home\") + File.separator + \"bin\"+ File.separator+ \"java\";\n  log.infof(\"Using java: %s\",java);\n  List<String> cmd=new ArrayList<>();\n  cmd.add(java);\n  String javaArgs=config.getJavaVmArguments();\n  if (!javaArgs.contains(\"-Xmx\")) {\n    javaArgs=KarafManagedContainerConfiguration.DEFAULT_JAVAVM_ARGUMENTS + \" \" + javaArgs;\n  }\n  cmd.addAll(Arrays.asList(javaArgs.split(\"\\\\s\")));\n  cmd.add(\"-Dkaraf.home=\" + karafHomeDir);\n  cmd.add(\"-Dkaraf.base=\" + karafHomeDir);\n  cmd.add(\"-Dkaraf.etc=\" + karafHomeDir + \"/etc\");\n  cmd.add(\"-Dkaraf.data=\" + karafHomeDir + \"/data\");\n  cmd.add(\"-Dkaraf.instances=\" + karafHomeDir + \"/instances\");\n  cmd.add(\"-Dkaraf.restart.jvm.supported=true\");\n  cmd.add(\"-Dkaraf.startLocalConsole=false\");\n  cmd.add(\"-Dkaraf.startRemoteShell=true\");\n  cmd.add(\"-Djava.io.tmpdir=\" + new File(karafHomeDir,\"data/tmp\"));\n  cmd.add(\"-Djava.util.logging.config.file=\" + new File(karafHomeDir,\"etc/java.util.logging.properties\"));\n  cmd.add(\"-Djava.endorsed.dirs=\" + new File(karafHomeDir,\"lib/endorsed\"));\n  StringBuilder classPath=new StringBuilder();\n  boolean fuse7=new File(karafHomeDir,\"lib/boot/\").exists();\n  if (fuse7) {\n    log.info(\"Adding karaf4 libraries to classpath.\");\n    String[] libDirs={\"lib/boot/\",\"lib/ext/\"};\n    for (    String libDir : libDirs) {\n      File karafLibBootDir=new File(karafHomeDir,libDir);\n      String[] libs=karafLibBootDir.list((      File dir,      String name) -> name.endsWith(\".jar\"));\n      for (      String lib : libs) {\n        String separator=classPath.length() > 0 ? File.pathSeparator : \"\";\n        classPath.append(separator).append(new File(karafLibBootDir,lib));\n      }\n    }\n  }\n else {\n    log.info(\"Adding karaf3 libraries to classpath.\");\n    File karafLibDir=new File(karafHomeDir,\"lib\");\n    String[] libs=karafLibDir.list((    File dir,    String name) -> name.startsWith(\"karaf\"));\n    for (    String lib : libs) {\n      String separator=classPath.length() > 0 ? File.pathSeparator : \"\";\n      classPath.append(separator).append(new File(karafHomeDir,\"lib/\" + lib));\n    }\n  }\n  cmd.add(\"-classpath\");\n  cmd.add(classPath.toString());\n  cmd.add(\"org.apache.karaf.main.Main\");\n  StringBuffer cmdstr=new StringBuffer();\n  for (  String tok : cmd) {\n    cmdstr.append(tok).append(\" \");\n  }\n  log.debugv(\"Starting Karaf with: {0}\",cmdstr);\n  try {\n    ProcessBuilder processBuilder=new ProcessBuilder(cmd);\n    processBuilder.directory(karafHomeDir);\n    processBuilder.redirectErrorStream(true);\n    process=processBuilder.start();\n    new Thread(new ConsoleConsumer()).start();\n  }\n catch (  IOException ex) {\n    throw new LifecycleException(\"Cannot start managed Karaf container\",ex);\n  }\n  try {\n    log.debug(\"Geting the MBeanServerConnection\");\n    mbeanServer=getMBeanServerConnection(120,TimeUnit.SECONDS);\n  }\n catch (  TimeoutException ex) {\n    destroyKarafProcess();\n    throw new LifecycleException(\"Cannot obtain MBean server connection\",ex);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 514,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4391,
        "startLineNumber" : 67,
        "startColumnNumber" : 8,
        "endLineNumber" : 159,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (mbeanServer == null) {\n  String karafHome=config.getKarafHome();\n  if (karafHome == null)   throw new IllegalStateException(\"karafHome cannot be null\");\n  File karafHomeDir=new File(karafHome).getAbsoluteFile();\n  if (!karafHomeDir.isDirectory())   throw new IllegalStateException(\"Not a valid Karaf home dir: \" + karafHomeDir);\n  String java=System.getProperty(\"java.home\") + File.separator + \"bin\"+ File.separator+ \"java\";\n  log.infof(\"Using java: %s\",java);\n  List<String> cmd=new ArrayList<>();\n  cmd.add(java);\n  String javaArgs=config.getJavaVmArguments();\n  if (!javaArgs.contains(\"-Xmx\")) {\n    javaArgs=KarafManagedContainerConfiguration.DEFAULT_JAVAVM_ARGUMENTS + \" \" + javaArgs;\n  }\n  cmd.addAll(Arrays.asList(javaArgs.split(\"\\\\s\")));\n  cmd.add(\"-Dkaraf.home=\" + karafHomeDir);\n  cmd.add(\"-Dkaraf.base=\" + karafHomeDir);\n  cmd.add(\"-Dkaraf.etc=\" + karafHomeDir + \"/etc\");\n  cmd.add(\"-Dkaraf.data=\" + karafHomeDir + \"/data\");\n  cmd.add(\"-Dkaraf.instances=\" + karafHomeDir + \"/instances\");\n  cmd.add(\"-Dkaraf.restart.jvm.supported=true\");\n  cmd.add(\"-Dkaraf.startLocalConsole=false\");\n  cmd.add(\"-Dkaraf.startRemoteShell=true\");\n  cmd.add(\"-Djava.io.tmpdir=\" + new File(karafHomeDir,\"data/tmp\"));\n  cmd.add(\"-Djava.util.logging.config.file=\" + new File(karafHomeDir,\"etc/java.util.logging.properties\"));\n  cmd.add(\"-Djava.endorsed.dirs=\" + new File(karafHomeDir,\"lib/endorsed\"));\n  StringBuilder classPath=new StringBuilder();\n  boolean fuse7=new File(karafHomeDir,\"lib/boot/\").exists();\n  if (fuse7) {\n    log.info(\"Adding karaf4 libraries to classpath.\");\n    String[] libDirs={\"lib/boot/\",\"lib/ext/\"};\n    for (    String libDir : libDirs) {\n      File karafLibBootDir=new File(karafHomeDir,libDir);\n      String[] libs=karafLibBootDir.list((      File dir,      String name) -> name.endsWith(\".jar\"));\n      for (      String lib : libs) {\n        String separator=classPath.length() > 0 ? File.pathSeparator : \"\";\n        classPath.append(separator).append(new File(karafLibBootDir,lib));\n      }\n    }\n  }\n else {\n    log.info(\"Adding karaf3 libraries to classpath.\");\n    File karafLibDir=new File(karafHomeDir,\"lib\");\n    String[] libs=karafLibDir.list((    File dir,    String name) -> name.startsWith(\"karaf\"));\n    for (    String lib : libs) {\n      String separator=classPath.length() > 0 ? File.pathSeparator : \"\";\n      classPath.append(separator).append(new File(karafHomeDir,\"lib/\" + lib));\n    }\n  }\n  cmd.add(\"-classpath\");\n  cmd.add(classPath.toString());\n  cmd.add(\"org.apache.karaf.main.Main\");\n  StringBuffer cmdstr=new StringBuffer();\n  for (  String tok : cmd) {\n    cmdstr.append(tok).append(\" \");\n  }\n  log.debugv(\"Starting Karaf with: {0}\",cmdstr);\n  try {\n    ProcessBuilder processBuilder=new ProcessBuilder(cmd);\n    processBuilder.directory(karafHomeDir);\n    processBuilder.redirectErrorStream(true);\n    process=processBuilder.start();\n    new Thread(new ConsoleConsumer()).start();\n  }\n catch (  IOException ex) {\n    throw new LifecycleException(\"Cannot start managed Karaf container\",ex);\n  }\n  try {\n    log.debug(\"Geting the MBeanServerConnection\");\n    mbeanServer=getMBeanServerConnection(120,TimeUnit.SECONDS);\n  }\n catch (  TimeoutException ex) {\n    destroyKarafProcess();\n    throw new LifecycleException(\"Cannot obtain MBean server connection\",ex);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 518,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6965,
        "startLineNumber" : 50,
        "startColumnNumber" : 50,
        "endLineNumber" : 197,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  MBeanServerConnection mbeanServer=null;\n  try {\n    mbeanServer=getMBeanServerConnection(500,TimeUnit.MILLISECONDS);\n  }\n catch (  TimeoutException ignore) {\n  }\n  if (mbeanServer != null && !config.isAllowConnectingToRunningServer()) {\n    throw new LifecycleException(\"The server is already running! Managed containers does not support connecting to running server instances due to the \" + \"possible harmful effect of connecting to the wrong server. Please stop server before running or change to another type of container.\\n\" + \"To disable this check and allow Arquillian to connect to a running server, set allowConnectingToRunningServer to true in the container configuration\");\n  }\n  if (mbeanServer == null) {\n    String karafHome=config.getKarafHome();\n    if (karafHome == null)     throw new IllegalStateException(\"karafHome cannot be null\");\n    File karafHomeDir=new File(karafHome).getAbsoluteFile();\n    if (!karafHomeDir.isDirectory())     throw new IllegalStateException(\"Not a valid Karaf home dir: \" + karafHomeDir);\n    String java=System.getProperty(\"java.home\") + File.separator + \"bin\"+ File.separator+ \"java\";\n    log.infof(\"Using java: %s\",java);\n    List<String> cmd=new ArrayList<>();\n    cmd.add(java);\n    String javaArgs=config.getJavaVmArguments();\n    if (!javaArgs.contains(\"-Xmx\")) {\n      javaArgs=KarafManagedContainerConfiguration.DEFAULT_JAVAVM_ARGUMENTS + \" \" + javaArgs;\n    }\n    cmd.addAll(Arrays.asList(javaArgs.split(\"\\\\s\")));\n    cmd.add(\"-Dkaraf.home=\" + karafHomeDir);\n    cmd.add(\"-Dkaraf.base=\" + karafHomeDir);\n    cmd.add(\"-Dkaraf.etc=\" + karafHomeDir + \"/etc\");\n    cmd.add(\"-Dkaraf.data=\" + karafHomeDir + \"/data\");\n    cmd.add(\"-Dkaraf.instances=\" + karafHomeDir + \"/instances\");\n    cmd.add(\"-Dkaraf.restart.jvm.supported=true\");\n    cmd.add(\"-Dkaraf.startLocalConsole=false\");\n    cmd.add(\"-Dkaraf.startRemoteShell=true\");\n    cmd.add(\"-Djava.io.tmpdir=\" + new File(karafHomeDir,\"data/tmp\"));\n    cmd.add(\"-Djava.util.logging.config.file=\" + new File(karafHomeDir,\"etc/java.util.logging.properties\"));\n    cmd.add(\"-Djava.endorsed.dirs=\" + new File(karafHomeDir,\"lib/endorsed\"));\n    StringBuilder classPath=new StringBuilder();\n    boolean fuse7=new File(karafHomeDir,\"lib/boot/\").exists();\n    if (fuse7) {\n      log.info(\"Adding karaf4 libraries to classpath.\");\n      String[] libDirs={\"lib/boot/\",\"lib/ext/\"};\n      for (      String libDir : libDirs) {\n        File karafLibBootDir=new File(karafHomeDir,libDir);\n        String[] libs=karafLibBootDir.list((        File dir,        String name) -> name.endsWith(\".jar\"));\n        for (        String lib : libs) {\n          String separator=classPath.length() > 0 ? File.pathSeparator : \"\";\n          classPath.append(separator).append(new File(karafLibBootDir,lib));\n        }\n      }\n    }\n else {\n      log.info(\"Adding karaf3 libraries to classpath.\");\n      File karafLibDir=new File(karafHomeDir,\"lib\");\n      String[] libs=karafLibDir.list((      File dir,      String name) -> name.startsWith(\"karaf\"));\n      for (      String lib : libs) {\n        String separator=classPath.length() > 0 ? File.pathSeparator : \"\";\n        classPath.append(separator).append(new File(karafHomeDir,\"lib/\" + lib));\n      }\n    }\n    cmd.add(\"-classpath\");\n    cmd.add(classPath.toString());\n    cmd.add(\"org.apache.karaf.main.Main\");\n    StringBuffer cmdstr=new StringBuffer();\n    for (    String tok : cmd) {\n      cmdstr.append(tok).append(\" \");\n    }\n    log.debugv(\"Starting Karaf with: {0}\",cmdstr);\n    try {\n      ProcessBuilder processBuilder=new ProcessBuilder(cmd);\n      processBuilder.directory(karafHomeDir);\n      processBuilder.redirectErrorStream(true);\n      process=processBuilder.start();\n      new Thread(new ConsoleConsumer()).start();\n    }\n catch (    IOException ex) {\n      throw new LifecycleException(\"Cannot start managed Karaf container\",ex);\n    }\n    try {\n      log.debug(\"Geting the MBeanServerConnection\");\n      mbeanServer=getMBeanServerConnection(120,TimeUnit.SECONDS);\n    }\n catch (    TimeoutException ex) {\n      destroyKarafProcess();\n      throw new LifecycleException(\"Cannot obtain MBean server connection\",ex);\n    }\n  }\n  mbeanServerInstance.set(mbeanServer);\n  try {\n    ObjectName oname=ObjectNameFactory.create(\"osgi.core:type=framework,*\");\n    frameworkMBean=getMBeanProxy(mbeanServer,oname,FrameworkMBean.class,30,TimeUnit.SECONDS);\n    oname=ObjectNameFactory.create(\"osgi.core:type=bundleState,*\");\n    bundleStateMBean=getMBeanProxy(mbeanServer,oname,BundleStateMBean.class,30,TimeUnit.SECONDS);\n    oname=ObjectNameFactory.create(\"osgi.core:type=serviceState,*\");\n    serviceStateMBean=getMBeanProxy(mbeanServer,oname,ServiceStateMBean.class,30,TimeUnit.SECONDS);\n    installArquillianBundle();\n    awaitArquillianBundleActive(30,TimeUnit.SECONDS);\n    Integer beginningStartLevel=config.getKarafBeginningStartLevel();\n    if (beginningStartLevel != null)     awaitBeginningStartLevel(beginningStartLevel,30,TimeUnit.SECONDS);\n    awaitBootstrapCompleteServices();\n  }\n catch (  RuntimeException rte) {\n    destroyKarafProcess();\n    throw rte;\n  }\ncatch (  IOException|InterruptedException|TimeoutException|LifecycleException ex) {\n    destroyKarafProcess();\n    throw new LifecycleException(\"Cannot start Karaf container\",ex);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 698,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7025,
        "startLineNumber" : 49,
        "startColumnNumber" : 4,
        "endLineNumber" : 197,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void start() throws LifecycleException {\n  MBeanServerConnection mbeanServer=null;\n  try {\n    mbeanServer=getMBeanServerConnection(500,TimeUnit.MILLISECONDS);\n  }\n catch (  TimeoutException ignore) {\n  }\n  if (mbeanServer != null && !config.isAllowConnectingToRunningServer()) {\n    throw new LifecycleException(\"The server is already running! Managed containers does not support connecting to running server instances due to the \" + \"possible harmful effect of connecting to the wrong server. Please stop server before running or change to another type of container.\\n\" + \"To disable this check and allow Arquillian to connect to a running server, set allowConnectingToRunningServer to true in the container configuration\");\n  }\n  if (mbeanServer == null) {\n    String karafHome=config.getKarafHome();\n    if (karafHome == null)     throw new IllegalStateException(\"karafHome cannot be null\");\n    File karafHomeDir=new File(karafHome).getAbsoluteFile();\n    if (!karafHomeDir.isDirectory())     throw new IllegalStateException(\"Not a valid Karaf home dir: \" + karafHomeDir);\n    String java=System.getProperty(\"java.home\") + File.separator + \"bin\"+ File.separator+ \"java\";\n    log.infof(\"Using java: %s\",java);\n    List<String> cmd=new ArrayList<>();\n    cmd.add(java);\n    String javaArgs=config.getJavaVmArguments();\n    if (!javaArgs.contains(\"-Xmx\")) {\n      javaArgs=KarafManagedContainerConfiguration.DEFAULT_JAVAVM_ARGUMENTS + \" \" + javaArgs;\n    }\n    cmd.addAll(Arrays.asList(javaArgs.split(\"\\\\s\")));\n    cmd.add(\"-Dkaraf.home=\" + karafHomeDir);\n    cmd.add(\"-Dkaraf.base=\" + karafHomeDir);\n    cmd.add(\"-Dkaraf.etc=\" + karafHomeDir + \"/etc\");\n    cmd.add(\"-Dkaraf.data=\" + karafHomeDir + \"/data\");\n    cmd.add(\"-Dkaraf.instances=\" + karafHomeDir + \"/instances\");\n    cmd.add(\"-Dkaraf.restart.jvm.supported=true\");\n    cmd.add(\"-Dkaraf.startLocalConsole=false\");\n    cmd.add(\"-Dkaraf.startRemoteShell=true\");\n    cmd.add(\"-Djava.io.tmpdir=\" + new File(karafHomeDir,\"data/tmp\"));\n    cmd.add(\"-Djava.util.logging.config.file=\" + new File(karafHomeDir,\"etc/java.util.logging.properties\"));\n    cmd.add(\"-Djava.endorsed.dirs=\" + new File(karafHomeDir,\"lib/endorsed\"));\n    StringBuilder classPath=new StringBuilder();\n    boolean fuse7=new File(karafHomeDir,\"lib/boot/\").exists();\n    if (fuse7) {\n      log.info(\"Adding karaf4 libraries to classpath.\");\n      String[] libDirs={\"lib/boot/\",\"lib/ext/\"};\n      for (      String libDir : libDirs) {\n        File karafLibBootDir=new File(karafHomeDir,libDir);\n        String[] libs=karafLibBootDir.list((        File dir,        String name) -> name.endsWith(\".jar\"));\n        for (        String lib : libs) {\n          String separator=classPath.length() > 0 ? File.pathSeparator : \"\";\n          classPath.append(separator).append(new File(karafLibBootDir,lib));\n        }\n      }\n    }\n else {\n      log.info(\"Adding karaf3 libraries to classpath.\");\n      File karafLibDir=new File(karafHomeDir,\"lib\");\n      String[] libs=karafLibDir.list((      File dir,      String name) -> name.startsWith(\"karaf\"));\n      for (      String lib : libs) {\n        String separator=classPath.length() > 0 ? File.pathSeparator : \"\";\n        classPath.append(separator).append(new File(karafHomeDir,\"lib/\" + lib));\n      }\n    }\n    cmd.add(\"-classpath\");\n    cmd.add(classPath.toString());\n    cmd.add(\"org.apache.karaf.main.Main\");\n    StringBuffer cmdstr=new StringBuffer();\n    for (    String tok : cmd) {\n      cmdstr.append(tok).append(\" \");\n    }\n    log.debugv(\"Starting Karaf with: {0}\",cmdstr);\n    try {\n      ProcessBuilder processBuilder=new ProcessBuilder(cmd);\n      processBuilder.directory(karafHomeDir);\n      processBuilder.redirectErrorStream(true);\n      process=processBuilder.start();\n      new Thread(new ConsoleConsumer()).start();\n    }\n catch (    IOException ex) {\n      throw new LifecycleException(\"Cannot start managed Karaf container\",ex);\n    }\n    try {\n      log.debug(\"Geting the MBeanServerConnection\");\n      mbeanServer=getMBeanServerConnection(120,TimeUnit.SECONDS);\n    }\n catch (    TimeoutException ex) {\n      destroyKarafProcess();\n      throw new LifecycleException(\"Cannot obtain MBean server connection\",ex);\n    }\n  }\n  mbeanServerInstance.set(mbeanServer);\n  try {\n    ObjectName oname=ObjectNameFactory.create(\"osgi.core:type=framework,*\");\n    frameworkMBean=getMBeanProxy(mbeanServer,oname,FrameworkMBean.class,30,TimeUnit.SECONDS);\n    oname=ObjectNameFactory.create(\"osgi.core:type=bundleState,*\");\n    bundleStateMBean=getMBeanProxy(mbeanServer,oname,BundleStateMBean.class,30,TimeUnit.SECONDS);\n    oname=ObjectNameFactory.create(\"osgi.core:type=serviceState,*\");\n    serviceStateMBean=getMBeanProxy(mbeanServer,oname,ServiceStateMBean.class,30,TimeUnit.SECONDS);\n    installArquillianBundle();\n    awaitArquillianBundleActive(30,TimeUnit.SECONDS);\n    Integer beginningStartLevel=config.getKarafBeginningStartLevel();\n    if (beginningStartLevel != null)     awaitBeginningStartLevel(beginningStartLevel,30,TimeUnit.SECONDS);\n    awaitBootstrapCompleteServices();\n  }\n catch (  RuntimeException rte) {\n    destroyKarafProcess();\n    throw rte;\n  }\ncatch (  IOException|InterruptedException|TimeoutException|LifecycleException ex) {\n    destroyKarafProcess();\n    throw new LifecycleException(\"Cannot start Karaf container\",ex);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 706,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 148,
        "startColumnNumber" : 16,
        "endLineNumber" : 148,
        "endColumnNumber" : 89
      },
      "nodeContext" : "throw new LifecycleException(\"Cannot start managed Karaf container\",ex);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 5,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 38,
    "startLineNumber" : 148,
    "startColumnNumber" : 45,
    "endLineNumber" : 148,
    "endColumnNumber" : 83
  } ],
  "layoutRelationDataList" : [ ]
}