{
  "id" : 59,
  "expression" : "new ArrayList<BatchResult>()",
  "projectName" : "mybatis@mybatis-3",
  "commitID" : "a84ece4f08bb04fa6a5babd800113fe7338a9880",
  "filePath" : "/src/main/java/org/apache/ibatis/executor/BatchExecutor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new ArrayList<BatchResult>()",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 28,
      "startLineNumber" : 73,
      "startColumnNumber" : 34,
      "endLineNumber" : 73,
      "endColumnNumber" : 62
    },
    "astNodeNumber" : 6,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 73,
        "startColumnNumber" : 24,
        "endLineNumber" : 73,
        "endColumnNumber" : 62
      },
      "nodeContext" : "results=new ArrayList<BatchResult>()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 73,
        "startColumnNumber" : 6,
        "endLineNumber" : 73,
        "endColumnNumber" : 63
      },
      "nodeContext" : "List<BatchResult> results=new ArrayList<BatchResult>();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1465,
        "startLineNumber" : 72,
        "startColumnNumber" : 8,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<BatchResult> results=new ArrayList<BatchResult>();\n  if (isRollback) {\n    return Collections.EMPTY_LIST;\n  }\n else {\n    for (int i=0, n=statementList.size(); i < n; i++) {\n      Statement stmt=statementList.get(i);\n      BatchResult batchResult=batchResultList.get(i);\n      try {\n        batchResult.setUpdateCounts(stmt.executeBatch());\n        MappedStatement ms=batchResult.getMappedStatement();\n        Object parameter=batchResult.getParameterObject();\n        KeyGenerator keyGenerator=ms.getKeyGenerator();\n        if (keyGenerator instanceof Jdbc3KeyGenerator) {\n          keyGenerator.processAfter(this,ms,stmt,parameter);\n        }\n      }\n catch (      BatchUpdateException e) {\n        StringBuffer message=new StringBuffer();\n        message.append(batchResult.getMappedStatement().getId()).append(\" (batch index #\").append(i + 1).append(\")\").append(\" failed.\");\n        if (i > 0) {\n          message.append(\" \").append(i).append(\" prior sub executor(s) completed successfully, but will be rolled back.\");\n        }\n        throw new BatchExecutorException(message.toString(),e,results,batchResult);\n      }\n      results.add(batchResult);\n    }\n    return results;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 175,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1660,
        "startLineNumber" : 72,
        "startColumnNumber" : 4,
        "endLineNumber" : 113,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  List<BatchResult> results=new ArrayList<BatchResult>();\n  if (isRollback) {\n    return Collections.EMPTY_LIST;\n  }\n else {\n    for (int i=0, n=statementList.size(); i < n; i++) {\n      Statement stmt=statementList.get(i);\n      BatchResult batchResult=batchResultList.get(i);\n      try {\n        batchResult.setUpdateCounts(stmt.executeBatch());\n        MappedStatement ms=batchResult.getMappedStatement();\n        Object parameter=batchResult.getParameterObject();\n        KeyGenerator keyGenerator=ms.getKeyGenerator();\n        if (keyGenerator instanceof Jdbc3KeyGenerator) {\n          keyGenerator.processAfter(this,ms,stmt,parameter);\n        }\n      }\n catch (      BatchUpdateException e) {\n        StringBuffer message=new StringBuffer();\n        message.append(batchResult.getMappedStatement().getId()).append(\" (batch index #\").append(i + 1).append(\")\").append(\" failed.\");\n        if (i > 0) {\n          message.append(\" \").append(i).append(\" prior sub executor(s) completed successfully, but will be rolled back.\");\n        }\n        throw new BatchExecutorException(message.toString(),e,results,batchResult);\n      }\n      results.add(batchResult);\n    }\n    return results;\n  }\n}\n  finally {\n  for (  Statement stmt : statementList) {\n    closeStatement(stmt);\n  }\n  currentSql=null;\n  statementList.clear();\n  batchResultList.clear();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 200,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1672,
        "startLineNumber" : 71,
        "startColumnNumber" : 85,
        "endLineNumber" : 114,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  try {\n    List<BatchResult> results=new ArrayList<BatchResult>();\n    if (isRollback) {\n      return Collections.EMPTY_LIST;\n    }\n else {\n      for (int i=0, n=statementList.size(); i < n; i++) {\n        Statement stmt=statementList.get(i);\n        BatchResult batchResult=batchResultList.get(i);\n        try {\n          batchResult.setUpdateCounts(stmt.executeBatch());\n          MappedStatement ms=batchResult.getMappedStatement();\n          Object parameter=batchResult.getParameterObject();\n          KeyGenerator keyGenerator=ms.getKeyGenerator();\n          if (keyGenerator instanceof Jdbc3KeyGenerator) {\n            keyGenerator.processAfter(this,ms,stmt,parameter);\n          }\n        }\n catch (        BatchUpdateException e) {\n          StringBuffer message=new StringBuffer();\n          message.append(batchResult.getMappedStatement().getId()).append(\" (batch index #\").append(i + 1).append(\")\").append(\" failed.\");\n          if (i > 0) {\n            message.append(\" \").append(i).append(\" prior sub executor(s) completed successfully, but will be rolled back.\");\n          }\n          throw new BatchExecutorException(message.toString(),e,results,batchResult);\n        }\n        results.add(batchResult);\n      }\n      return results;\n    }\n  }\n  finally {\n    for (    Statement stmt : statementList) {\n      closeStatement(stmt);\n    }\n    currentSql=null;\n    statementList.clear();\n    batchResultList.clear();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 201,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1755,
        "startLineNumber" : 71,
        "startColumnNumber" : 2,
        "endLineNumber" : 114,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public List<BatchResult> doFlushStatements(boolean isRollback) throws SQLException {\n  try {\n    List<BatchResult> results=new ArrayList<BatchResult>();\n    if (isRollback) {\n      return Collections.EMPTY_LIST;\n    }\n else {\n      for (int i=0, n=statementList.size(); i < n; i++) {\n        Statement stmt=statementList.get(i);\n        BatchResult batchResult=batchResultList.get(i);\n        try {\n          batchResult.setUpdateCounts(stmt.executeBatch());\n          MappedStatement ms=batchResult.getMappedStatement();\n          Object parameter=batchResult.getParameterObject();\n          KeyGenerator keyGenerator=ms.getKeyGenerator();\n          if (keyGenerator instanceof Jdbc3KeyGenerator) {\n            keyGenerator.processAfter(this,ms,stmt,parameter);\n          }\n        }\n catch (        BatchUpdateException e) {\n          StringBuffer message=new StringBuffer();\n          message.append(batchResult.getMappedStatement().getId()).append(\" (batch index #\").append(i + 1).append(\")\").append(\" failed.\");\n          if (i > 0) {\n            message.append(\" \").append(i).append(\" prior sub executor(s) completed successfully, but will be rolled back.\");\n          }\n          throw new BatchExecutorException(message.toString(),e,results,batchResult);\n        }\n        results.add(batchResult);\n      }\n      return results;\n    }\n  }\n  finally {\n    for (    Statement stmt : statementList) {\n      closeStatement(stmt);\n    }\n    currentSql=null;\n    statementList.clear();\n    batchResultList.clear();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 214,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 73,
        "startColumnNumber" : 6,
        "endLineNumber" : 73,
        "endColumnNumber" : 63
      },
      "nodeContext" : "List<BatchResult> results=new ArrayList<BatchResult>();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.util.ArrayList<org.apache.ibatis.executor.BatchResult>"
  } ],
  "positionList" : [ {
    "charLength" : 28,
    "startLineNumber" : 73,
    "startColumnNumber" : 34,
    "endLineNumber" : 73,
    "endColumnNumber" : 62
  } ],
  "layoutRelationDataList" : [ ]
}