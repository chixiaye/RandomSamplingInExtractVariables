{
  "id" : 148,
  "expression" : "CustomLocator::getLocatorName",
  "projectName" : "SeleniumHQ@selenium",
  "commitID" : "c146621f39dbec94114835aa1f6af6a0e1fa4cd0",
  "filePath" : "/java/server/src/org/openqa/selenium/grid/node/Node.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "CustomLocator::getLocatorName",
    "nodeType" : "ExpressionMethodReference",
    "nodePosition" : {
      "charLength" : 29,
      "startLineNumber" : 130,
      "startColumnNumber" : 49,
      "endLineNumber" : 130,
      "endColumnNumber" : 78
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 130,
        "startColumnNumber" : 21,
        "endLineNumber" : 130,
        "endColumnNumber" : 79
      },
      "nodeContext" : "customLocators.stream().map(CustomLocator::getLocatorName)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 130,
        "startColumnNumber" : 21,
        "endLineNumber" : 130,
        "endColumnNumber" : 113
      },
      "nodeContext" : "customLocators.stream().map(CustomLocator::getLocatorName).collect(Collectors.joining(\", \"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 130,
        "startColumnNumber" : 13,
        "endLineNumber" : 130,
        "endColumnNumber" : 113
      },
      "nodeContext" : "names=customLocators.stream().map(CustomLocator::getLocatorName).collect(Collectors.joining(\", \"))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 130,
        "startColumnNumber" : 6,
        "endLineNumber" : 130,
        "endColumnNumber" : 114
      },
      "nodeContext" : "String names=customLocators.stream().map(CustomLocator::getLocatorName).collect(Collectors.joining(\", \"));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 189,
        "startLineNumber" : 129,
        "startColumnNumber" : 35,
        "endLineNumber" : 132,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String names=customLocators.stream().map(CustomLocator::getLocatorName).collect(Collectors.joining(\", \"));\n  LOG.info(\"Binding additional locator mechanisms: \" + names);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 27,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 220,
        "startLineNumber" : 129,
        "startColumnNumber" : 4,
        "endLineNumber" : 132,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!customLocators.isEmpty()) {\n  String names=customLocators.stream().map(CustomLocator::getLocatorName).collect(Collectors.joining(\", \"));\n  LOG.info(\"Binding additional locator mechanisms: \" + names);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 32,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2745,
        "startLineNumber" : 116,
        "startColumnNumber" : 79,
        "endLineNumber" : 169,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  this.tracer=Require.nonNull(\"Tracer\",tracer);\n  this.id=Require.nonNull(\"Node id\",id);\n  this.uri=Require.nonNull(\"URI\",uri);\n  Require.nonNull(\"Registration secret\",registrationSecret);\n  RequiresSecretFilter requiresSecret=new RequiresSecretFilter(registrationSecret);\n  Set<CustomLocator> customLocators=StreamSupport.stream(ServiceLoader.load(CustomLocator.class).spliterator(),false).collect(Collectors.toSet());\n  if (!customLocators.isEmpty()) {\n    String names=customLocators.stream().map(CustomLocator::getLocatorName).collect(Collectors.joining(\", \"));\n    LOG.info(\"Binding additional locator mechanisms: \" + names);\n  }\n  Json json=new Json();\n  routes=combine(matching(req -> getSessionId(req.getUri()).map(SessionId::new).map(this::isSessionOwner).orElse(false)).to(() -> new ForwardWebDriverCommand(this)).with(spanDecorator(\"node.forward_command\")),new CustomLocatorHandler(this,registrationSecret,customLocators),post(\"/session/{sessionId}/file\").to(params -> new UploadFile(this,sessionIdFrom(params))).with(spanDecorator(\"node.upload_file\")),post(\"/session/{sessionId}/se/file\").to(params -> new UploadFile(this,sessionIdFrom(params))).with(spanDecorator(\"node.upload_file\")),get(\"/se/grid/node/owner/{sessionId}\").to(params -> new IsSessionOwner(this,sessionIdFrom(params))).with(spanDecorator(\"node.is_session_owner\").andThen(requiresSecret)),delete(\"/se/grid/node/session/{sessionId}\").to(params -> new StopNodeSession(this,sessionIdFrom(params))).with(spanDecorator(\"node.stop_session\").andThen(requiresSecret)),get(\"/se/grid/node/session/{sessionId}\").to(params -> new GetNodeSession(this,sessionIdFrom(params))).with(spanDecorator(\"node.get_session\").andThen(requiresSecret)),post(\"/se/grid/node/session\").to(() -> new NewNodeSession(this,json)).with(spanDecorator(\"node.new_session\").andThen(requiresSecret)),post(\"/se/grid/node/drain\").to(() -> new Drain(this,json)).with(spanDecorator(\"node.drain\").andThen(requiresSecret)),get(\"/se/grid/node/status\").to(() -> req -> new HttpResponse().setContent(asJson(getStatus()))).with(spanDecorator(\"node.node_status\")),get(\"/status\").to(() -> new StatusHandler(this)).with(spanDecorator(\"node.status\")));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 342,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2822,
        "startLineNumber" : 116,
        "startColumnNumber" : 2,
        "endLineNumber" : 169,
        "endColumnNumber" : 3
      },
      "nodeContext" : "protected Node(Tracer tracer,NodeId id,URI uri,Secret registrationSecret){\n  this.tracer=Require.nonNull(\"Tracer\",tracer);\n  this.id=Require.nonNull(\"Node id\",id);\n  this.uri=Require.nonNull(\"URI\",uri);\n  Require.nonNull(\"Registration secret\",registrationSecret);\n  RequiresSecretFilter requiresSecret=new RequiresSecretFilter(registrationSecret);\n  Set<CustomLocator> customLocators=StreamSupport.stream(ServiceLoader.load(CustomLocator.class).spliterator(),false).collect(Collectors.toSet());\n  if (!customLocators.isEmpty()) {\n    String names=customLocators.stream().map(CustomLocator::getLocatorName).collect(Collectors.joining(\", \"));\n    LOG.info(\"Binding additional locator mechanisms: \" + names);\n  }\n  Json json=new Json();\n  routes=combine(matching(req -> getSessionId(req.getUri()).map(SessionId::new).map(this::isSessionOwner).orElse(false)).to(() -> new ForwardWebDriverCommand(this)).with(spanDecorator(\"node.forward_command\")),new CustomLocatorHandler(this,registrationSecret,customLocators),post(\"/session/{sessionId}/file\").to(params -> new UploadFile(this,sessionIdFrom(params))).with(spanDecorator(\"node.upload_file\")),post(\"/session/{sessionId}/se/file\").to(params -> new UploadFile(this,sessionIdFrom(params))).with(spanDecorator(\"node.upload_file\")),get(\"/se/grid/node/owner/{sessionId}\").to(params -> new IsSessionOwner(this,sessionIdFrom(params))).with(spanDecorator(\"node.is_session_owner\").andThen(requiresSecret)),delete(\"/se/grid/node/session/{sessionId}\").to(params -> new StopNodeSession(this,sessionIdFrom(params))).with(spanDecorator(\"node.stop_session\").andThen(requiresSecret)),get(\"/se/grid/node/session/{sessionId}\").to(params -> new GetNodeSession(this,sessionIdFrom(params))).with(spanDecorator(\"node.get_session\").andThen(requiresSecret)),post(\"/se/grid/node/session\").to(() -> new NewNodeSession(this,json)).with(spanDecorator(\"node.new_session\").andThen(requiresSecret)),post(\"/se/grid/node/drain\").to(() -> new Drain(this,json)).with(spanDecorator(\"node.drain\").andThen(requiresSecret)),get(\"/se/grid/node/status\").to(() -> req -> new HttpResponse().setContent(asJson(getStatus()))).with(spanDecorator(\"node.node_status\")),get(\"/status\").to(() -> new StatusHandler(this)).with(spanDecorator(\"node.status\")));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 361,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 130,
        "startColumnNumber" : 6,
        "endLineNumber" : 130,
        "endColumnNumber" : 114
      },
      "nodeContext" : "String names=customLocators.stream().map(CustomLocator::getLocatorName).collect(Collectors.joining(\", \"));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "java.util.function.Function<? super org.openqa.selenium.remote.locators.CustomLocator,? extends java.lang.String>"
  } ],
  "positionList" : [ {
    "charLength" : 29,
    "startLineNumber" : 130,
    "startColumnNumber" : 49,
    "endLineNumber" : 130,
    "endColumnNumber" : 78
  } ],
  "layoutRelationDataList" : [ ]
}