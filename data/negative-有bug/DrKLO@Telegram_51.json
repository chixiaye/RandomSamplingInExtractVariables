{
  "id" : 51,
  "expression" : "Instance.ERROR_CONNECTION_SERVICE",
  "projectName" : "DrKLO@Telegram",
  "commitID" : "11fbfb1329df700b203e1852a71c4c11b5ab12f4",
  "filePath" : "/TMessagesProj/src/main/java/org/telegram/ui/VoIPFragment.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Instance.ERROR_CONNECTION_SERVICE",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 33,
      "startLineNumber" : 1282,
      "startColumnNumber" : 59,
      "endLineNumber" : 1282,
      "endColumnNumber" : 92
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 1282,
        "startColumnNumber" : 31,
        "endLineNumber" : 1282,
        "endColumnNumber" : 93
      },
      "nodeContext" : "TextUtils.equals(lastError,Instance.ERROR_CONNECTION_SERVICE)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 325,
        "startLineNumber" : 1282,
        "startColumnNumber" : 27,
        "endLineNumber" : 1286,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (TextUtils.equals(lastError,Instance.ERROR_CONNECTION_SERVICE)) {\n  showErrorDialog(LocaleController.getString(\"VoipErrorUnknown\",R.string.VoipErrorUnknown));\n}\n else {\n  AndroidUtilities.runOnUIThread(() -> windowView.finish(),1000);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 31,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 458,
        "startLineNumber" : 1280,
        "startColumnNumber" : 27,
        "endLineNumber" : 1286,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (TextUtils.equals(lastError,Instance.ERROR_LOCALIZED)) {\n  windowView.finish();\n}\n else if (TextUtils.equals(lastError,Instance.ERROR_CONNECTION_SERVICE)) {\n  showErrorDialog(LocaleController.getString(\"VoipErrorUnknown\",R.string.VoipErrorUnknown));\n}\n else {\n  AndroidUtilities.runOnUIThread(() -> windowView.finish(),1000);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 44,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 623,
        "startLineNumber" : 1278,
        "startColumnNumber" : 27,
        "endLineNumber" : 1286,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (TextUtils.equals(lastError,Instance.ERROR_AUDIO_IO)) {\n  showErrorDialog(\"Error initializing audio hardware\");\n}\n else if (TextUtils.equals(lastError,Instance.ERROR_LOCALIZED)) {\n  windowView.finish();\n}\n else if (TextUtils.equals(lastError,Instance.ERROR_CONNECTION_SERVICE)) {\n  showErrorDialog(LocaleController.getString(\"VoipErrorUnknown\",R.string.VoipErrorUnknown));\n}\n else {\n  AndroidUtilities.runOnUIThread(() -> windowView.finish(),1000);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 57,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1042,
        "startLineNumber" : 1274,
        "startColumnNumber" : 27,
        "endLineNumber" : 1286,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (TextUtils.equals(lastError,Instance.ERROR_PRIVACY)) {\n  final String name=ContactsController.formatName(callingUser.first_name,callingUser.last_name);\n  final String message=LocaleController.formatString(\"CallNotAvailable\",R.string.CallNotAvailable,name);\n  showErrorDialog(AndroidUtilities.replaceTags(message));\n}\n else if (TextUtils.equals(lastError,Instance.ERROR_AUDIO_IO)) {\n  showErrorDialog(\"Error initializing audio hardware\");\n}\n else if (TextUtils.equals(lastError,Instance.ERROR_LOCALIZED)) {\n  windowView.finish();\n}\n else if (TextUtils.equals(lastError,Instance.ERROR_CONNECTION_SERVICE)) {\n  showErrorDialog(LocaleController.getString(\"VoipErrorUnknown\",R.string.VoipErrorUnknown));\n}\n else {\n  AndroidUtilities.runOnUIThread(() -> windowView.finish(),1000);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 104,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3876,
        "startLineNumber" : 1237,
        "startColumnNumber" : 27,
        "endLineNumber" : 1286,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (TextUtils.equals(lastError,Instance.ERROR_PEER_OUTDATED)) {\n  if (isVideoCall) {\n    final String name=UserObject.getFirstName(callingUser);\n    final String message=LocaleController.formatString(\"VoipPeerVideoOutdated\",R.string.VoipPeerVideoOutdated,name);\n    boolean[] callAgain=new boolean[1];\n    AlertDialog dlg=new DarkAlertDialog.Builder(activity).setTitle(LocaleController.getString(\"VoipFailed\",R.string.VoipFailed)).setMessage(AndroidUtilities.replaceTags(message)).setNegativeButton(LocaleController.getString(\"Cancel\",R.string.Cancel),(dialogInterface,i) -> windowView.finish()).setPositiveButton(LocaleController.getString(\"VoipPeerVideoOutdatedMakeVoice\",R.string.VoipPeerVideoOutdatedMakeVoice),(dialogInterface,i) -> {\n      callAgain[0]=true;\n      currentState=VoIPService.STATE_BUSY;\n      Intent intent=new Intent(activity,VoIPService.class);\n      intent.putExtra(\"user_id\",callingUser.id);\n      intent.putExtra(\"is_outgoing\",true);\n      intent.putExtra(\"start_incall_activity\",false);\n      intent.putExtra(\"video_call\",false);\n      intent.putExtra(\"can_video_call\",false);\n      intent.putExtra(\"account\",UserConfig.selectedAccount);\n      try {\n        activity.startService(intent);\n      }\n catch (      Throwable e) {\n        FileLog.e(e);\n      }\n    }\n).show();\n    dlg.setCanceledOnTouchOutside(true);\n    dlg.setOnDismissListener(dialog -> {\n      if (!callAgain[0]) {\n        windowView.finish();\n      }\n    }\n);\n  }\n else {\n    final String name=UserObject.getFirstName(callingUser);\n    final String message=LocaleController.formatString(\"VoipPeerOutdated\",R.string.VoipPeerOutdated,name);\n    showErrorDialog(AndroidUtilities.replaceTags(message));\n  }\n}\n else if (TextUtils.equals(lastError,Instance.ERROR_PRIVACY)) {\n  final String name=ContactsController.formatName(callingUser.first_name,callingUser.last_name);\n  final String message=LocaleController.formatString(\"CallNotAvailable\",R.string.CallNotAvailable,name);\n  showErrorDialog(AndroidUtilities.replaceTags(message));\n}\n else if (TextUtils.equals(lastError,Instance.ERROR_AUDIO_IO)) {\n  showErrorDialog(\"Error initializing audio hardware\");\n}\n else if (TextUtils.equals(lastError,Instance.ERROR_LOCALIZED)) {\n  windowView.finish();\n}\n else if (TextUtils.equals(lastError,Instance.ERROR_CONNECTION_SERVICE)) {\n  showErrorDialog(LocaleController.getString(\"VoipErrorUnknown\",R.string.VoipErrorUnknown));\n}\n else {\n  AndroidUtilities.runOnUIThread(() -> windowView.finish(),1000);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 358,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4308,
        "startLineNumber" : 1233,
        "startColumnNumber" : 20,
        "endLineNumber" : 1286,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (TextUtils.equals(lastError,Instance.ERROR_INCOMPATIBLE)) {\n  final String name=ContactsController.formatName(callingUser.first_name,callingUser.last_name);\n  final String message=LocaleController.formatString(\"VoipPeerIncompatible\",R.string.VoipPeerIncompatible,name);\n  showErrorDialog(AndroidUtilities.replaceTags(message));\n}\n else if (TextUtils.equals(lastError,Instance.ERROR_PEER_OUTDATED)) {\n  if (isVideoCall) {\n    final String name=UserObject.getFirstName(callingUser);\n    final String message=LocaleController.formatString(\"VoipPeerVideoOutdated\",R.string.VoipPeerVideoOutdated,name);\n    boolean[] callAgain=new boolean[1];\n    AlertDialog dlg=new DarkAlertDialog.Builder(activity).setTitle(LocaleController.getString(\"VoipFailed\",R.string.VoipFailed)).setMessage(AndroidUtilities.replaceTags(message)).setNegativeButton(LocaleController.getString(\"Cancel\",R.string.Cancel),(dialogInterface,i) -> windowView.finish()).setPositiveButton(LocaleController.getString(\"VoipPeerVideoOutdatedMakeVoice\",R.string.VoipPeerVideoOutdatedMakeVoice),(dialogInterface,i) -> {\n      callAgain[0]=true;\n      currentState=VoIPService.STATE_BUSY;\n      Intent intent=new Intent(activity,VoIPService.class);\n      intent.putExtra(\"user_id\",callingUser.id);\n      intent.putExtra(\"is_outgoing\",true);\n      intent.putExtra(\"start_incall_activity\",false);\n      intent.putExtra(\"video_call\",false);\n      intent.putExtra(\"can_video_call\",false);\n      intent.putExtra(\"account\",UserConfig.selectedAccount);\n      try {\n        activity.startService(intent);\n      }\n catch (      Throwable e) {\n        FileLog.e(e);\n      }\n    }\n).show();\n    dlg.setCanceledOnTouchOutside(true);\n    dlg.setOnDismissListener(dialog -> {\n      if (!callAgain[0]) {\n        windowView.finish();\n      }\n    }\n);\n  }\n else {\n    final String name=UserObject.getFirstName(callingUser);\n    final String message=LocaleController.formatString(\"VoipPeerOutdated\",R.string.VoipPeerOutdated,name);\n    showErrorDialog(AndroidUtilities.replaceTags(message));\n  }\n}\n else if (TextUtils.equals(lastError,Instance.ERROR_PRIVACY)) {\n  final String name=ContactsController.formatName(callingUser.first_name,callingUser.last_name);\n  final String message=LocaleController.formatString(\"CallNotAvailable\",R.string.CallNotAvailable,name);\n  showErrorDialog(AndroidUtilities.replaceTags(message));\n}\n else if (TextUtils.equals(lastError,Instance.ERROR_AUDIO_IO)) {\n  showErrorDialog(\"Error initializing audio hardware\");\n}\n else if (TextUtils.equals(lastError,Instance.ERROR_LOCALIZED)) {\n  windowView.finish();\n}\n else if (TextUtils.equals(lastError,Instance.ERROR_CONNECTION_SERVICE)) {\n  showErrorDialog(LocaleController.getString(\"VoipErrorUnknown\",R.string.VoipErrorUnknown));\n}\n else {\n  AndroidUtilities.runOnUIThread(() -> windowView.finish(),1000);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 405,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 4348,
        "startLineNumber" : 1232,
        "startColumnNumber" : 74,
        "endLineNumber" : 1287,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (TextUtils.equals(lastError,Instance.ERROR_INCOMPATIBLE)) {\n    final String name=ContactsController.formatName(callingUser.first_name,callingUser.last_name);\n    final String message=LocaleController.formatString(\"VoipPeerIncompatible\",R.string.VoipPeerIncompatible,name);\n    showErrorDialog(AndroidUtilities.replaceTags(message));\n  }\n else   if (TextUtils.equals(lastError,Instance.ERROR_PEER_OUTDATED)) {\n    if (isVideoCall) {\n      final String name=UserObject.getFirstName(callingUser);\n      final String message=LocaleController.formatString(\"VoipPeerVideoOutdated\",R.string.VoipPeerVideoOutdated,name);\n      boolean[] callAgain=new boolean[1];\n      AlertDialog dlg=new DarkAlertDialog.Builder(activity).setTitle(LocaleController.getString(\"VoipFailed\",R.string.VoipFailed)).setMessage(AndroidUtilities.replaceTags(message)).setNegativeButton(LocaleController.getString(\"Cancel\",R.string.Cancel),(dialogInterface,i) -> windowView.finish()).setPositiveButton(LocaleController.getString(\"VoipPeerVideoOutdatedMakeVoice\",R.string.VoipPeerVideoOutdatedMakeVoice),(dialogInterface,i) -> {\n        callAgain[0]=true;\n        currentState=VoIPService.STATE_BUSY;\n        Intent intent=new Intent(activity,VoIPService.class);\n        intent.putExtra(\"user_id\",callingUser.id);\n        intent.putExtra(\"is_outgoing\",true);\n        intent.putExtra(\"start_incall_activity\",false);\n        intent.putExtra(\"video_call\",false);\n        intent.putExtra(\"can_video_call\",false);\n        intent.putExtra(\"account\",UserConfig.selectedAccount);\n        try {\n          activity.startService(intent);\n        }\n catch (        Throwable e) {\n          FileLog.e(e);\n        }\n      }\n).show();\n      dlg.setCanceledOnTouchOutside(true);\n      dlg.setOnDismissListener(dialog -> {\n        if (!callAgain[0]) {\n          windowView.finish();\n        }\n      }\n);\n    }\n else {\n      final String name=UserObject.getFirstName(callingUser);\n      final String message=LocaleController.formatString(\"VoipPeerOutdated\",R.string.VoipPeerOutdated,name);\n      showErrorDialog(AndroidUtilities.replaceTags(message));\n    }\n  }\n else   if (TextUtils.equals(lastError,Instance.ERROR_PRIVACY)) {\n    final String name=ContactsController.formatName(callingUser.first_name,callingUser.last_name);\n    final String message=LocaleController.formatString(\"CallNotAvailable\",R.string.CallNotAvailable,name);\n    showErrorDialog(AndroidUtilities.replaceTags(message));\n  }\n else   if (TextUtils.equals(lastError,Instance.ERROR_AUDIO_IO)) {\n    showErrorDialog(\"Error initializing audio hardware\");\n  }\n else   if (TextUtils.equals(lastError,Instance.ERROR_LOCALIZED)) {\n    windowView.finish();\n  }\n else   if (TextUtils.equals(lastError,Instance.ERROR_CONNECTION_SERVICE)) {\n    showErrorDialog(LocaleController.getString(\"VoipErrorUnknown\",R.string.VoipErrorUnknown));\n  }\n else {\n    AndroidUtilities.runOnUIThread(() -> windowView.finish(),1000);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 406,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 4516,
        "startLineNumber" : 1232,
        "startColumnNumber" : 16,
        "endLineNumber" : 1289,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (!TextUtils.equals(lastError,Instance.ERROR_UNKNOWN)) {\n  if (TextUtils.equals(lastError,Instance.ERROR_INCOMPATIBLE)) {\n    final String name=ContactsController.formatName(callingUser.first_name,callingUser.last_name);\n    final String message=LocaleController.formatString(\"VoipPeerIncompatible\",R.string.VoipPeerIncompatible,name);\n    showErrorDialog(AndroidUtilities.replaceTags(message));\n  }\n else   if (TextUtils.equals(lastError,Instance.ERROR_PEER_OUTDATED)) {\n    if (isVideoCall) {\n      final String name=UserObject.getFirstName(callingUser);\n      final String message=LocaleController.formatString(\"VoipPeerVideoOutdated\",R.string.VoipPeerVideoOutdated,name);\n      boolean[] callAgain=new boolean[1];\n      AlertDialog dlg=new DarkAlertDialog.Builder(activity).setTitle(LocaleController.getString(\"VoipFailed\",R.string.VoipFailed)).setMessage(AndroidUtilities.replaceTags(message)).setNegativeButton(LocaleController.getString(\"Cancel\",R.string.Cancel),(dialogInterface,i) -> windowView.finish()).setPositiveButton(LocaleController.getString(\"VoipPeerVideoOutdatedMakeVoice\",R.string.VoipPeerVideoOutdatedMakeVoice),(dialogInterface,i) -> {\n        callAgain[0]=true;\n        currentState=VoIPService.STATE_BUSY;\n        Intent intent=new Intent(activity,VoIPService.class);\n        intent.putExtra(\"user_id\",callingUser.id);\n        intent.putExtra(\"is_outgoing\",true);\n        intent.putExtra(\"start_incall_activity\",false);\n        intent.putExtra(\"video_call\",false);\n        intent.putExtra(\"can_video_call\",false);\n        intent.putExtra(\"account\",UserConfig.selectedAccount);\n        try {\n          activity.startService(intent);\n        }\n catch (        Throwable e) {\n          FileLog.e(e);\n        }\n      }\n).show();\n      dlg.setCanceledOnTouchOutside(true);\n      dlg.setOnDismissListener(dialog -> {\n        if (!callAgain[0]) {\n          windowView.finish();\n        }\n      }\n);\n    }\n else {\n      final String name=UserObject.getFirstName(callingUser);\n      final String message=LocaleController.formatString(\"VoipPeerOutdated\",R.string.VoipPeerOutdated,name);\n      showErrorDialog(AndroidUtilities.replaceTags(message));\n    }\n  }\n else   if (TextUtils.equals(lastError,Instance.ERROR_PRIVACY)) {\n    final String name=ContactsController.formatName(callingUser.first_name,callingUser.last_name);\n    final String message=LocaleController.formatString(\"CallNotAvailable\",R.string.CallNotAvailable,name);\n    showErrorDialog(AndroidUtilities.replaceTags(message));\n  }\n else   if (TextUtils.equals(lastError,Instance.ERROR_AUDIO_IO)) {\n    showErrorDialog(\"Error initializing audio hardware\");\n  }\n else   if (TextUtils.equals(lastError,Instance.ERROR_LOCALIZED)) {\n    windowView.finish();\n  }\n else   if (TextUtils.equals(lastError,Instance.ERROR_CONNECTION_SERVICE)) {\n    showErrorDialog(LocaleController.getString(\"VoipErrorUnknown\",R.string.VoipErrorUnknown));\n  }\n else {\n    AndroidUtilities.runOnUIThread(() -> windowView.finish(),1000);\n  }\n}\n else {\n  AndroidUtilities.runOnUIThread(() -> windowView.finish(),1000);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 425,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8143,
        "startLineNumber" : 1170,
        "startColumnNumber" : 8,
        "endLineNumber" : 1291,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (currentState) {\ncase VoIPService.STATE_WAITING_INCOMING:  showAcceptDeclineView=true;\nlockOnScreen=true;\nstatusLayoutOffset=AndroidUtilities.dp(24);\nacceptDeclineView.setRetryMod(false);\nif (service != null && service.call.video) {\nif (currentUserIsVideo && callingUser.photo != null) {\nshowCallingAvatarMini=true;\n}\n else {\nshowCallingAvatarMini=false;\n}\nstatusTextView.setText(LocaleController.getString(\"VoipInVideoCallBranding\",R.string.VoipInVideoCallBranding),true,animated);\nacceptDeclineView.setTranslationY(-AndroidUtilities.dp(60));\n}\n else {\nstatusTextView.setText(LocaleController.getString(\"VoipInCallBranding\",R.string.VoipInCallBranding),true,animated);\nacceptDeclineView.setTranslationY(0);\n}\nbreak;\ncase VoIPService.STATE_WAIT_INIT:case VoIPService.STATE_WAIT_INIT_ACK:statusTextView.setText(LocaleController.getString(\"VoipConnecting\",R.string.VoipConnecting),true,animated);\nbreak;\ncase VoIPService.STATE_EXCHANGING_KEYS:statusTextView.setText(LocaleController.getString(\"VoipExchangingKeys\",R.string.VoipExchangingKeys),true,animated);\nbreak;\ncase VoIPService.STATE_WAITING:statusTextView.setText(LocaleController.getString(\"VoipWaiting\",R.string.VoipWaiting),true,animated);\nbreak;\ncase VoIPService.STATE_RINGING:statusTextView.setText(LocaleController.getString(\"VoipRinging\",R.string.VoipRinging),true,animated);\nbreak;\ncase VoIPService.STATE_REQUESTING:statusTextView.setText(LocaleController.getString(\"VoipRequesting\",R.string.VoipRequesting),true,animated);\nbreak;\ncase VoIPService.STATE_HANGING_UP:break;\ncase VoIPService.STATE_BUSY:showAcceptDeclineView=true;\nstatusTextView.setText(LocaleController.getString(\"VoipBusy\",R.string.VoipBusy),false,animated);\nacceptDeclineView.setRetryMod(true);\ncurrentUserIsVideo=false;\ncallingUserIsVideo=false;\nbreak;\ncase VoIPService.STATE_ESTABLISHED:case VoIPService.STATE_RECONNECTING:if (previousState != VoIPService.STATE_ESTABLISHED && previousState != VoIPService.STATE_RECONNECTING) {\nupdateKeyView(animated);\n}\nshowTimer=true;\nif (currentState == VoIPService.STATE_RECONNECTING) {\nshowReconnecting=true;\n}\nbreak;\ncase VoIPBaseService.STATE_ENDED:currentUserTextureView.saveCameraLastBitmap();\nAndroidUtilities.runOnUIThread(() -> windowView.finish(),200);\nbreak;\ncase VoIPBaseService.STATE_FAILED:statusTextView.setText(LocaleController.getString(\"VoipFailed\",R.string.VoipFailed),false,animated);\nfinal VoIPService voipService=VoIPService.getSharedInstance();\nfinal String lastError=voipService != null ? voipService.getLastError() : Instance.ERROR_UNKNOWN;\nif (!TextUtils.equals(lastError,Instance.ERROR_UNKNOWN)) {\nif (TextUtils.equals(lastError,Instance.ERROR_INCOMPATIBLE)) {\nfinal String name=ContactsController.formatName(callingUser.first_name,callingUser.last_name);\nfinal String message=LocaleController.formatString(\"VoipPeerIncompatible\",R.string.VoipPeerIncompatible,name);\nshowErrorDialog(AndroidUtilities.replaceTags(message));\n}\n else if (TextUtils.equals(lastError,Instance.ERROR_PEER_OUTDATED)) {\nif (isVideoCall) {\nfinal String name=UserObject.getFirstName(callingUser);\nfinal String message=LocaleController.formatString(\"VoipPeerVideoOutdated\",R.string.VoipPeerVideoOutdated,name);\nboolean[] callAgain=new boolean[1];\nAlertDialog dlg=new DarkAlertDialog.Builder(activity).setTitle(LocaleController.getString(\"VoipFailed\",R.string.VoipFailed)).setMessage(AndroidUtilities.replaceTags(message)).setNegativeButton(LocaleController.getString(\"Cancel\",R.string.Cancel),(dialogInterface,i) -> windowView.finish()).setPositiveButton(LocaleController.getString(\"VoipPeerVideoOutdatedMakeVoice\",R.string.VoipPeerVideoOutdatedMakeVoice),(dialogInterface,i) -> {\ncallAgain[0]=true;\ncurrentState=VoIPService.STATE_BUSY;\nIntent intent=new Intent(activity,VoIPService.class);\nintent.putExtra(\"user_id\",callingUser.id);\nintent.putExtra(\"is_outgoing\",true);\nintent.putExtra(\"start_incall_activity\",false);\nintent.putExtra(\"video_call\",false);\nintent.putExtra(\"can_video_call\",false);\nintent.putExtra(\"account\",UserConfig.selectedAccount);\ntry {\nactivity.startService(intent);\n}\n catch (Throwable e) {\nFileLog.e(e);\n}\n}\n).show();\ndlg.setCanceledOnTouchOutside(true);\ndlg.setOnDismissListener(dialog -> {\nif (!callAgain[0]) {\nwindowView.finish();\n}\n}\n);\n}\n else {\nfinal String name=UserObject.getFirstName(callingUser);\nfinal String message=LocaleController.formatString(\"VoipPeerOutdated\",R.string.VoipPeerOutdated,name);\nshowErrorDialog(AndroidUtilities.replaceTags(message));\n}\n}\n else if (TextUtils.equals(lastError,Instance.ERROR_PRIVACY)) {\nfinal String name=ContactsController.formatName(callingUser.first_name,callingUser.last_name);\nfinal String message=LocaleController.formatString(\"CallNotAvailable\",R.string.CallNotAvailable,name);\nshowErrorDialog(AndroidUtilities.replaceTags(message));\n}\n else if (TextUtils.equals(lastError,Instance.ERROR_AUDIO_IO)) {\nshowErrorDialog(\"Error initializing audio hardware\");\n}\n else if (TextUtils.equals(lastError,Instance.ERROR_LOCALIZED)) {\nwindowView.finish();\n}\n else if (TextUtils.equals(lastError,Instance.ERROR_CONNECTION_SERVICE)) {\nshowErrorDialog(LocaleController.getString(\"VoipErrorUnknown\",R.string.VoipErrorUnknown));\n}\n else {\nAndroidUtilities.runOnUIThread(() -> windowView.finish(),1000);\n}\n}\n else {\nAndroidUtilities.runOnUIThread(() -> windowView.finish(),1000);\n}\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 776,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 18398,
        "startLineNumber" : 1144,
        "startColumnNumber" : 35,
        "endLineNumber" : 1475,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (isFinished || switchingToPip) {\n    return;\n  }\n  lockOnScreen=false;\n  boolean animated=previousState != -1;\n  boolean showAcceptDeclineView=false;\n  boolean showTimer=false;\n  boolean showReconnecting=false;\n  boolean showCallingAvatarMini=false;\n  int statusLayoutOffset=0;\n  VoIPService service=VoIPService.getSharedInstance();\n  if (service != null) {\n    callingUserIsVideo=service.getCurrentVideoState() == Instance.VIDEO_STATE_ACTIVE;\n    currentUserIsVideo=service.getVideoState() == Instance.VIDEO_STATE_ACTIVE || service.getVideoState() == Instance.VIDEO_STATE_PAUSED;\n    if (currentUserIsVideo && !isVideoCall) {\n      isVideoCall=true;\n    }\n  }\n  if (animated) {\n    currentUserCameraFloatingLayout.saveRelatedPosition();\n    callingUserMiniFloatingLayout.saveRelatedPosition();\n  }\nswitch (currentState) {\ncase VoIPService.STATE_WAITING_INCOMING:    showAcceptDeclineView=true;\n  lockOnScreen=true;\nstatusLayoutOffset=AndroidUtilities.dp(24);\nacceptDeclineView.setRetryMod(false);\nif (service != null && service.call.video) {\nif (currentUserIsVideo && callingUser.photo != null) {\nshowCallingAvatarMini=true;\n}\n else {\nshowCallingAvatarMini=false;\n}\nstatusTextView.setText(LocaleController.getString(\"VoipInVideoCallBranding\",R.string.VoipInVideoCallBranding),true,animated);\nacceptDeclineView.setTranslationY(-AndroidUtilities.dp(60));\n}\n else {\nstatusTextView.setText(LocaleController.getString(\"VoipInCallBranding\",R.string.VoipInCallBranding),true,animated);\nacceptDeclineView.setTranslationY(0);\n}\nbreak;\ncase VoIPService.STATE_WAIT_INIT:case VoIPService.STATE_WAIT_INIT_ACK:statusTextView.setText(LocaleController.getString(\"VoipConnecting\",R.string.VoipConnecting),true,animated);\nbreak;\ncase VoIPService.STATE_EXCHANGING_KEYS:statusTextView.setText(LocaleController.getString(\"VoipExchangingKeys\",R.string.VoipExchangingKeys),true,animated);\nbreak;\ncase VoIPService.STATE_WAITING:statusTextView.setText(LocaleController.getString(\"VoipWaiting\",R.string.VoipWaiting),true,animated);\nbreak;\ncase VoIPService.STATE_RINGING:statusTextView.setText(LocaleController.getString(\"VoipRinging\",R.string.VoipRinging),true,animated);\nbreak;\ncase VoIPService.STATE_REQUESTING:statusTextView.setText(LocaleController.getString(\"VoipRequesting\",R.string.VoipRequesting),true,animated);\nbreak;\ncase VoIPService.STATE_HANGING_UP:break;\ncase VoIPService.STATE_BUSY:showAcceptDeclineView=true;\nstatusTextView.setText(LocaleController.getString(\"VoipBusy\",R.string.VoipBusy),false,animated);\nacceptDeclineView.setRetryMod(true);\ncurrentUserIsVideo=false;\ncallingUserIsVideo=false;\nbreak;\ncase VoIPService.STATE_ESTABLISHED:case VoIPService.STATE_RECONNECTING:if (previousState != VoIPService.STATE_ESTABLISHED && previousState != VoIPService.STATE_RECONNECTING) {\nupdateKeyView(animated);\n}\nshowTimer=true;\nif (currentState == VoIPService.STATE_RECONNECTING) {\nshowReconnecting=true;\n}\nbreak;\ncase VoIPBaseService.STATE_ENDED:currentUserTextureView.saveCameraLastBitmap();\nAndroidUtilities.runOnUIThread(() -> windowView.finish(),200);\nbreak;\ncase VoIPBaseService.STATE_FAILED:statusTextView.setText(LocaleController.getString(\"VoipFailed\",R.string.VoipFailed),false,animated);\nfinal VoIPService voipService=VoIPService.getSharedInstance();\nfinal String lastError=voipService != null ? voipService.getLastError() : Instance.ERROR_UNKNOWN;\nif (!TextUtils.equals(lastError,Instance.ERROR_UNKNOWN)) {\nif (TextUtils.equals(lastError,Instance.ERROR_INCOMPATIBLE)) {\nfinal String name=ContactsController.formatName(callingUser.first_name,callingUser.last_name);\nfinal String message=LocaleController.formatString(\"VoipPeerIncompatible\",R.string.VoipPeerIncompatible,name);\nshowErrorDialog(AndroidUtilities.replaceTags(message));\n}\n else if (TextUtils.equals(lastError,Instance.ERROR_PEER_OUTDATED)) {\nif (isVideoCall) {\nfinal String name=UserObject.getFirstName(callingUser);\nfinal String message=LocaleController.formatString(\"VoipPeerVideoOutdated\",R.string.VoipPeerVideoOutdated,name);\nboolean[] callAgain=new boolean[1];\nAlertDialog dlg=new DarkAlertDialog.Builder(activity).setTitle(LocaleController.getString(\"VoipFailed\",R.string.VoipFailed)).setMessage(AndroidUtilities.replaceTags(message)).setNegativeButton(LocaleController.getString(\"Cancel\",R.string.Cancel),(dialogInterface,i) -> windowView.finish()).setPositiveButton(LocaleController.getString(\"VoipPeerVideoOutdatedMakeVoice\",R.string.VoipPeerVideoOutdatedMakeVoice),(dialogInterface,i) -> {\ncallAgain[0]=true;\ncurrentState=VoIPService.STATE_BUSY;\nIntent intent=new Intent(activity,VoIPService.class);\nintent.putExtra(\"user_id\",callingUser.id);\nintent.putExtra(\"is_outgoing\",true);\nintent.putExtra(\"start_incall_activity\",false);\nintent.putExtra(\"video_call\",false);\nintent.putExtra(\"can_video_call\",false);\nintent.putExtra(\"account\",UserConfig.selectedAccount);\ntry {\nactivity.startService(intent);\n}\n catch (Throwable e) {\nFileLog.e(e);\n}\n}\n).show();\ndlg.setCanceledOnTouchOutside(true);\ndlg.setOnDismissListener(dialog -> {\nif (!callAgain[0]) {\nwindowView.finish();\n}\n}\n);\n}\n else {\nfinal String name=UserObject.getFirstName(callingUser);\nfinal String message=LocaleController.formatString(\"VoipPeerOutdated\",R.string.VoipPeerOutdated,name);\nshowErrorDialog(AndroidUtilities.replaceTags(message));\n}\n}\n else if (TextUtils.equals(lastError,Instance.ERROR_PRIVACY)) {\nfinal String name=ContactsController.formatName(callingUser.first_name,callingUser.last_name);\nfinal String message=LocaleController.formatString(\"CallNotAvailable\",R.string.CallNotAvailable,name);\nshowErrorDialog(AndroidUtilities.replaceTags(message));\n}\n else if (TextUtils.equals(lastError,Instance.ERROR_AUDIO_IO)) {\nshowErrorDialog(\"Error initializing audio hardware\");\n}\n else if (TextUtils.equals(lastError,Instance.ERROR_LOCALIZED)) {\nwindowView.finish();\n}\n else if (TextUtils.equals(lastError,Instance.ERROR_CONNECTION_SERVICE)) {\nshowErrorDialog(LocaleController.getString(\"VoipErrorUnknown\",R.string.VoipErrorUnknown));\n}\n else {\nAndroidUtilities.runOnUIThread(() -> windowView.finish(),1000);\n}\n}\n else {\nAndroidUtilities.runOnUIThread(() -> windowView.finish(),1000);\n}\nbreak;\n}\nif (callingUserIsVideo) {\nif (!switchingToPip) {\ncallingUserPhotoView.setAlpha(1f);\n}\nif (animated) {\ncallingUserTextureView.animate().alpha(1f).setDuration(250).start();\n}\n else {\ncallingUserTextureView.animate().cancel();\ncallingUserTextureView.setAlpha(1f);\n}\nif (!callingUserTextureView.renderer.isFirstFrameRendered() && !enterFromPiP) {\ncallingUserIsVideo=false;\n}\n}\nif (currentUserIsVideo || callingUserIsVideo) {\nfillNavigationBar(true,animated);\n}\n else {\nfillNavigationBar(false,animated);\ncallingUserPhotoView.setVisibility(View.VISIBLE);\nif (animated) {\ncallingUserTextureView.animate().alpha(0f).setDuration(250).start();\n}\n else {\ncallingUserTextureView.animate().cancel();\ncallingUserTextureView.setAlpha(0f);\n}\n}\nif (!currentUserIsVideo || !callingUserIsVideo) {\ncameraForceExpanded=false;\n}\nboolean showCallingUserVideoMini=currentUserIsVideo && cameraForceExpanded;\nshowCallingUserAvatarMini(showCallingAvatarMini,animated);\nstatusLayoutOffset+=callingUserPhotoViewMini.getTag() == null ? 0 : AndroidUtilities.dp(135) + AndroidUtilities.dp(12);\nshowAcceptDeclineView(showAcceptDeclineView,animated);\nwindowView.setLockOnScreen(lockOnScreen || deviceIsLocked);\ncanHideUI=(currentState == VoIPService.STATE_ESTABLISHED) && (currentUserIsVideo || callingUserIsVideo);\nif (!canHideUI && !uiVisible) {\nshowUi(true);\n}\nif (uiVisible && canHideUI && !hideUiRunnableWaiting&& service != null && !service.isMicMute()) {\nAndroidUtilities.runOnUIThread(hideUIRunnable,3000);\nhideUiRunnableWaiting=true;\n}\n else if (service != null && service.isMicMute()) {\nAndroidUtilities.cancelRunOnUIThread(hideUIRunnable);\nhideUiRunnableWaiting=false;\n}\nif (!uiVisible) {\nstatusLayoutOffset-=AndroidUtilities.dp(50);\n}\nif (animated) {\nif (lockOnScreen || !uiVisible) {\nif (backIcon.getVisibility() != View.VISIBLE) {\nbackIcon.setVisibility(View.VISIBLE);\nbackIcon.setAlpha(0f);\n}\nbackIcon.animate().alpha(0f).start();\n}\n else {\nbackIcon.animate().alpha(1f).start();\n}\nnotificationsLayout.animate().translationY(-AndroidUtilities.dp(16) - (uiVisible ? AndroidUtilities.dp(80) : 0)).setDuration(150).setInterpolator(CubicBezierInterpolator.DEFAULT).start();\n}\n else {\nif (!lockOnScreen) {\nbackIcon.setVisibility(View.VISIBLE);\n}\nbackIcon.setAlpha(lockOnScreen ? 0 : 1f);\nnotificationsLayout.setTranslationY(-AndroidUtilities.dp(16) - (uiVisible ? AndroidUtilities.dp(80) : 0));\n}\nif (currentState != VoIPService.STATE_HANGING_UP && currentState != VoIPService.STATE_ENDED) {\nupdateButtons(animated);\n}\nif (showTimer) {\nstatusTextView.showTimer(animated);\n}\nstatusTextView.showReconnect(showReconnecting,animated);\nif (animated) {\nif (statusLayoutOffset != statusLayoutAnimateToOffset) {\nstatusLayout.animate().translationY(statusLayoutOffset).setDuration(150).setInterpolator(CubicBezierInterpolator.DEFAULT).start();\n}\n}\n else {\nstatusLayout.setTranslationY(statusLayoutOffset);\n}\nstatusLayoutAnimateToOffset=statusLayoutOffset;\noverlayBackground.setShowBlackout(currentUserIsVideo || callingUserIsVideo,animated);\ncanSwitchToPip=(currentState != VoIPService.STATE_ENDED && currentState != VoIPService.STATE_BUSY) && (currentUserIsVideo || callingUserIsVideo);\nint floatingViewsOffset;\nif (service != null) {\nif (currentUserIsVideo) {\nservice.sharedUIParams.tapToVideoTooltipWasShowed=true;\n}\ncurrentUserTextureView.renderer.setMirror(service.isFrontFaceCamera());\nservice.setSinks(currentUserIsVideo ? currentUserTextureView.renderer : null,showCallingUserVideoMini ? callingUserMiniTextureRenderer : callingUserTextureView.renderer);\nif (animated) {\nnotificationsLayout.beforeLayoutChanges();\n}\nif ((currentUserIsVideo || callingUserIsVideo) && (currentState == VoIPService.STATE_ESTABLISHED || currentState == VoIPService.STATE_RECONNECTING) && service.getCallDuration() > 500) {\nif (service.getCurrentAudioState() == Instance.AUDIO_STATE_MUTED) {\nnotificationsLayout.addNotification(R.drawable.calls_mute_mini,LocaleController.formatString(\"VoipUserMicrophoneIsOff\",R.string.VoipUserMicrophoneIsOff,UserObject.getFirstName(callingUser)),\"muted\",animated);\n}\n else {\nnotificationsLayout.removeNotification(\"muted\");\n}\nif (service.getCurrentVideoState() == Instance.VIDEO_STATE_INACTIVE) {\nnotificationsLayout.addNotification(R.drawable.calls_camera_mini,LocaleController.formatString(\"VoipUserCameraIsOff\",R.string.VoipUserCameraIsOff,UserObject.getFirstName(callingUser)),\"video\",animated);\n}\n else {\nnotificationsLayout.removeNotification(\"video\");\n}\n}\n else {\nif (service.getCurrentAudioState() == Instance.AUDIO_STATE_MUTED) {\nnotificationsLayout.addNotification(R.drawable.calls_mute_mini,LocaleController.formatString(\"VoipUserMicrophoneIsOff\",R.string.VoipUserMicrophoneIsOff,UserObject.getFirstName(callingUser)),\"muted\",animated);\n}\n else {\nnotificationsLayout.removeNotification(\"muted\");\n}\nnotificationsLayout.removeNotification(\"video\");\n}\nif (notificationsLayout.getChildCount() == 0 && callingUserIsVideo && service.call != null && !service.call.video && !service.sharedUIParams.tapToVideoTooltipWasShowed) {\nservice.sharedUIParams.tapToVideoTooltipWasShowed=true;\ntapToVideoTooltip.showForView(bottomButtons[1],true);\n}\n else if (notificationsLayout.getChildCount() != 0) {\ntapToVideoTooltip.hide();\n}\nif (animated) {\nnotificationsLayout.animateLayoutChanges();\n}\n}\nfloatingViewsOffset=notificationsLayout.getChildsHight();\ncallingUserMiniFloatingLayout.setBottomOffset(floatingViewsOffset,animated);\ncurrentUserCameraFloatingLayout.setBottomOffset(floatingViewsOffset,animated);\ncurrentUserCameraFloatingLayout.setUiVisible(uiVisible);\ncallingUserMiniFloatingLayout.setUiVisible(uiVisible);\nif (currentUserIsVideo) {\nif (!callingUserIsVideo || cameraForceExpanded) {\nshowFloatingLayout(STATE_FULLSCREEN,animated);\n}\n else {\nshowFloatingLayout(STATE_FLOATING,animated);\n}\n}\n else {\nshowFloatingLayout(STATE_GONE,animated);\n}\nif (showCallingUserVideoMini && callingUserMiniFloatingLayout.getTag() == null) {\ncallingUserMiniFloatingLayout.setIsActive(true);\nif (callingUserMiniFloatingLayout.getVisibility() != View.VISIBLE) {\ncallingUserMiniFloatingLayout.setVisibility(View.VISIBLE);\ncallingUserMiniFloatingLayout.setAlpha(0f);\ncallingUserMiniFloatingLayout.setScaleX(0.5f);\ncallingUserMiniFloatingLayout.setScaleY(0.5f);\n}\ncallingUserMiniFloatingLayout.animate().setListener(null).cancel();\ncallingUserMiniFloatingLayout.animate().alpha(1f).scaleX(1f).scaleY(1f).setDuration(150).setInterpolator(CubicBezierInterpolator.DEFAULT).setStartDelay(150).start();\ncallingUserMiniFloatingLayout.setTag(1);\n}\n else if (!showCallingUserVideoMini && callingUserMiniFloatingLayout.getTag() != null) {\ncallingUserMiniFloatingLayout.setIsActive(false);\ncallingUserMiniFloatingLayout.animate().alpha(0).scaleX(0.5f).scaleY(0.5f).setListener(new AnimatorListenerAdapter(){\n@Override public void onAnimationEnd(Animator animation){\nif (callingUserMiniFloatingLayout.getTag() == null) {\ncallingUserMiniFloatingLayout.setVisibility(View.GONE);\n}\n}\n}\n).setDuration(150).setInterpolator(CubicBezierInterpolator.DEFAULT).start();\ncallingUserMiniFloatingLayout.setTag(null);\n}\ncurrentUserCameraFloatingLayout.restoreRelativePosition();\ncallingUserMiniFloatingLayout.restoreRelativePosition();\nupdateSpeakerPhoneIcon();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1816,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 18429,
        "startLineNumber" : 1144,
        "startColumnNumber" : 4,
        "endLineNumber" : 1475,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void updateViewState(){\n  if (isFinished || switchingToPip) {\n    return;\n  }\n  lockOnScreen=false;\n  boolean animated=previousState != -1;\n  boolean showAcceptDeclineView=false;\n  boolean showTimer=false;\n  boolean showReconnecting=false;\n  boolean showCallingAvatarMini=false;\n  int statusLayoutOffset=0;\n  VoIPService service=VoIPService.getSharedInstance();\n  if (service != null) {\n    callingUserIsVideo=service.getCurrentVideoState() == Instance.VIDEO_STATE_ACTIVE;\n    currentUserIsVideo=service.getVideoState() == Instance.VIDEO_STATE_ACTIVE || service.getVideoState() == Instance.VIDEO_STATE_PAUSED;\n    if (currentUserIsVideo && !isVideoCall) {\n      isVideoCall=true;\n    }\n  }\n  if (animated) {\n    currentUserCameraFloatingLayout.saveRelatedPosition();\n    callingUserMiniFloatingLayout.saveRelatedPosition();\n  }\nswitch (currentState) {\ncase VoIPService.STATE_WAITING_INCOMING:    showAcceptDeclineView=true;\n  lockOnScreen=true;\nstatusLayoutOffset=AndroidUtilities.dp(24);\nacceptDeclineView.setRetryMod(false);\nif (service != null && service.call.video) {\nif (currentUserIsVideo && callingUser.photo != null) {\nshowCallingAvatarMini=true;\n}\n else {\nshowCallingAvatarMini=false;\n}\nstatusTextView.setText(LocaleController.getString(\"VoipInVideoCallBranding\",R.string.VoipInVideoCallBranding),true,animated);\nacceptDeclineView.setTranslationY(-AndroidUtilities.dp(60));\n}\n else {\nstatusTextView.setText(LocaleController.getString(\"VoipInCallBranding\",R.string.VoipInCallBranding),true,animated);\nacceptDeclineView.setTranslationY(0);\n}\nbreak;\ncase VoIPService.STATE_WAIT_INIT:case VoIPService.STATE_WAIT_INIT_ACK:statusTextView.setText(LocaleController.getString(\"VoipConnecting\",R.string.VoipConnecting),true,animated);\nbreak;\ncase VoIPService.STATE_EXCHANGING_KEYS:statusTextView.setText(LocaleController.getString(\"VoipExchangingKeys\",R.string.VoipExchangingKeys),true,animated);\nbreak;\ncase VoIPService.STATE_WAITING:statusTextView.setText(LocaleController.getString(\"VoipWaiting\",R.string.VoipWaiting),true,animated);\nbreak;\ncase VoIPService.STATE_RINGING:statusTextView.setText(LocaleController.getString(\"VoipRinging\",R.string.VoipRinging),true,animated);\nbreak;\ncase VoIPService.STATE_REQUESTING:statusTextView.setText(LocaleController.getString(\"VoipRequesting\",R.string.VoipRequesting),true,animated);\nbreak;\ncase VoIPService.STATE_HANGING_UP:break;\ncase VoIPService.STATE_BUSY:showAcceptDeclineView=true;\nstatusTextView.setText(LocaleController.getString(\"VoipBusy\",R.string.VoipBusy),false,animated);\nacceptDeclineView.setRetryMod(true);\ncurrentUserIsVideo=false;\ncallingUserIsVideo=false;\nbreak;\ncase VoIPService.STATE_ESTABLISHED:case VoIPService.STATE_RECONNECTING:if (previousState != VoIPService.STATE_ESTABLISHED && previousState != VoIPService.STATE_RECONNECTING) {\nupdateKeyView(animated);\n}\nshowTimer=true;\nif (currentState == VoIPService.STATE_RECONNECTING) {\nshowReconnecting=true;\n}\nbreak;\ncase VoIPBaseService.STATE_ENDED:currentUserTextureView.saveCameraLastBitmap();\nAndroidUtilities.runOnUIThread(() -> windowView.finish(),200);\nbreak;\ncase VoIPBaseService.STATE_FAILED:statusTextView.setText(LocaleController.getString(\"VoipFailed\",R.string.VoipFailed),false,animated);\nfinal VoIPService voipService=VoIPService.getSharedInstance();\nfinal String lastError=voipService != null ? voipService.getLastError() : Instance.ERROR_UNKNOWN;\nif (!TextUtils.equals(lastError,Instance.ERROR_UNKNOWN)) {\nif (TextUtils.equals(lastError,Instance.ERROR_INCOMPATIBLE)) {\nfinal String name=ContactsController.formatName(callingUser.first_name,callingUser.last_name);\nfinal String message=LocaleController.formatString(\"VoipPeerIncompatible\",R.string.VoipPeerIncompatible,name);\nshowErrorDialog(AndroidUtilities.replaceTags(message));\n}\n else if (TextUtils.equals(lastError,Instance.ERROR_PEER_OUTDATED)) {\nif (isVideoCall) {\nfinal String name=UserObject.getFirstName(callingUser);\nfinal String message=LocaleController.formatString(\"VoipPeerVideoOutdated\",R.string.VoipPeerVideoOutdated,name);\nboolean[] callAgain=new boolean[1];\nAlertDialog dlg=new DarkAlertDialog.Builder(activity).setTitle(LocaleController.getString(\"VoipFailed\",R.string.VoipFailed)).setMessage(AndroidUtilities.replaceTags(message)).setNegativeButton(LocaleController.getString(\"Cancel\",R.string.Cancel),(dialogInterface,i) -> windowView.finish()).setPositiveButton(LocaleController.getString(\"VoipPeerVideoOutdatedMakeVoice\",R.string.VoipPeerVideoOutdatedMakeVoice),(dialogInterface,i) -> {\ncallAgain[0]=true;\ncurrentState=VoIPService.STATE_BUSY;\nIntent intent=new Intent(activity,VoIPService.class);\nintent.putExtra(\"user_id\",callingUser.id);\nintent.putExtra(\"is_outgoing\",true);\nintent.putExtra(\"start_incall_activity\",false);\nintent.putExtra(\"video_call\",false);\nintent.putExtra(\"can_video_call\",false);\nintent.putExtra(\"account\",UserConfig.selectedAccount);\ntry {\nactivity.startService(intent);\n}\n catch (Throwable e) {\nFileLog.e(e);\n}\n}\n).show();\ndlg.setCanceledOnTouchOutside(true);\ndlg.setOnDismissListener(dialog -> {\nif (!callAgain[0]) {\nwindowView.finish();\n}\n}\n);\n}\n else {\nfinal String name=UserObject.getFirstName(callingUser);\nfinal String message=LocaleController.formatString(\"VoipPeerOutdated\",R.string.VoipPeerOutdated,name);\nshowErrorDialog(AndroidUtilities.replaceTags(message));\n}\n}\n else if (TextUtils.equals(lastError,Instance.ERROR_PRIVACY)) {\nfinal String name=ContactsController.formatName(callingUser.first_name,callingUser.last_name);\nfinal String message=LocaleController.formatString(\"CallNotAvailable\",R.string.CallNotAvailable,name);\nshowErrorDialog(AndroidUtilities.replaceTags(message));\n}\n else if (TextUtils.equals(lastError,Instance.ERROR_AUDIO_IO)) {\nshowErrorDialog(\"Error initializing audio hardware\");\n}\n else if (TextUtils.equals(lastError,Instance.ERROR_LOCALIZED)) {\nwindowView.finish();\n}\n else if (TextUtils.equals(lastError,Instance.ERROR_CONNECTION_SERVICE)) {\nshowErrorDialog(LocaleController.getString(\"VoipErrorUnknown\",R.string.VoipErrorUnknown));\n}\n else {\nAndroidUtilities.runOnUIThread(() -> windowView.finish(),1000);\n}\n}\n else {\nAndroidUtilities.runOnUIThread(() -> windowView.finish(),1000);\n}\nbreak;\n}\nif (callingUserIsVideo) {\nif (!switchingToPip) {\ncallingUserPhotoView.setAlpha(1f);\n}\nif (animated) {\ncallingUserTextureView.animate().alpha(1f).setDuration(250).start();\n}\n else {\ncallingUserTextureView.animate().cancel();\ncallingUserTextureView.setAlpha(1f);\n}\nif (!callingUserTextureView.renderer.isFirstFrameRendered() && !enterFromPiP) {\ncallingUserIsVideo=false;\n}\n}\nif (currentUserIsVideo || callingUserIsVideo) {\nfillNavigationBar(true,animated);\n}\n else {\nfillNavigationBar(false,animated);\ncallingUserPhotoView.setVisibility(View.VISIBLE);\nif (animated) {\ncallingUserTextureView.animate().alpha(0f).setDuration(250).start();\n}\n else {\ncallingUserTextureView.animate().cancel();\ncallingUserTextureView.setAlpha(0f);\n}\n}\nif (!currentUserIsVideo || !callingUserIsVideo) {\ncameraForceExpanded=false;\n}\nboolean showCallingUserVideoMini=currentUserIsVideo && cameraForceExpanded;\nshowCallingUserAvatarMini(showCallingAvatarMini,animated);\nstatusLayoutOffset+=callingUserPhotoViewMini.getTag() == null ? 0 : AndroidUtilities.dp(135) + AndroidUtilities.dp(12);\nshowAcceptDeclineView(showAcceptDeclineView,animated);\nwindowView.setLockOnScreen(lockOnScreen || deviceIsLocked);\ncanHideUI=(currentState == VoIPService.STATE_ESTABLISHED) && (currentUserIsVideo || callingUserIsVideo);\nif (!canHideUI && !uiVisible) {\nshowUi(true);\n}\nif (uiVisible && canHideUI && !hideUiRunnableWaiting&& service != null && !service.isMicMute()) {\nAndroidUtilities.runOnUIThread(hideUIRunnable,3000);\nhideUiRunnableWaiting=true;\n}\n else if (service != null && service.isMicMute()) {\nAndroidUtilities.cancelRunOnUIThread(hideUIRunnable);\nhideUiRunnableWaiting=false;\n}\nif (!uiVisible) {\nstatusLayoutOffset-=AndroidUtilities.dp(50);\n}\nif (animated) {\nif (lockOnScreen || !uiVisible) {\nif (backIcon.getVisibility() != View.VISIBLE) {\nbackIcon.setVisibility(View.VISIBLE);\nbackIcon.setAlpha(0f);\n}\nbackIcon.animate().alpha(0f).start();\n}\n else {\nbackIcon.animate().alpha(1f).start();\n}\nnotificationsLayout.animate().translationY(-AndroidUtilities.dp(16) - (uiVisible ? AndroidUtilities.dp(80) : 0)).setDuration(150).setInterpolator(CubicBezierInterpolator.DEFAULT).start();\n}\n else {\nif (!lockOnScreen) {\nbackIcon.setVisibility(View.VISIBLE);\n}\nbackIcon.setAlpha(lockOnScreen ? 0 : 1f);\nnotificationsLayout.setTranslationY(-AndroidUtilities.dp(16) - (uiVisible ? AndroidUtilities.dp(80) : 0));\n}\nif (currentState != VoIPService.STATE_HANGING_UP && currentState != VoIPService.STATE_ENDED) {\nupdateButtons(animated);\n}\nif (showTimer) {\nstatusTextView.showTimer(animated);\n}\nstatusTextView.showReconnect(showReconnecting,animated);\nif (animated) {\nif (statusLayoutOffset != statusLayoutAnimateToOffset) {\nstatusLayout.animate().translationY(statusLayoutOffset).setDuration(150).setInterpolator(CubicBezierInterpolator.DEFAULT).start();\n}\n}\n else {\nstatusLayout.setTranslationY(statusLayoutOffset);\n}\nstatusLayoutAnimateToOffset=statusLayoutOffset;\noverlayBackground.setShowBlackout(currentUserIsVideo || callingUserIsVideo,animated);\ncanSwitchToPip=(currentState != VoIPService.STATE_ENDED && currentState != VoIPService.STATE_BUSY) && (currentUserIsVideo || callingUserIsVideo);\nint floatingViewsOffset;\nif (service != null) {\nif (currentUserIsVideo) {\nservice.sharedUIParams.tapToVideoTooltipWasShowed=true;\n}\ncurrentUserTextureView.renderer.setMirror(service.isFrontFaceCamera());\nservice.setSinks(currentUserIsVideo ? currentUserTextureView.renderer : null,showCallingUserVideoMini ? callingUserMiniTextureRenderer : callingUserTextureView.renderer);\nif (animated) {\nnotificationsLayout.beforeLayoutChanges();\n}\nif ((currentUserIsVideo || callingUserIsVideo) && (currentState == VoIPService.STATE_ESTABLISHED || currentState == VoIPService.STATE_RECONNECTING) && service.getCallDuration() > 500) {\nif (service.getCurrentAudioState() == Instance.AUDIO_STATE_MUTED) {\nnotificationsLayout.addNotification(R.drawable.calls_mute_mini,LocaleController.formatString(\"VoipUserMicrophoneIsOff\",R.string.VoipUserMicrophoneIsOff,UserObject.getFirstName(callingUser)),\"muted\",animated);\n}\n else {\nnotificationsLayout.removeNotification(\"muted\");\n}\nif (service.getCurrentVideoState() == Instance.VIDEO_STATE_INACTIVE) {\nnotificationsLayout.addNotification(R.drawable.calls_camera_mini,LocaleController.formatString(\"VoipUserCameraIsOff\",R.string.VoipUserCameraIsOff,UserObject.getFirstName(callingUser)),\"video\",animated);\n}\n else {\nnotificationsLayout.removeNotification(\"video\");\n}\n}\n else {\nif (service.getCurrentAudioState() == Instance.AUDIO_STATE_MUTED) {\nnotificationsLayout.addNotification(R.drawable.calls_mute_mini,LocaleController.formatString(\"VoipUserMicrophoneIsOff\",R.string.VoipUserMicrophoneIsOff,UserObject.getFirstName(callingUser)),\"muted\",animated);\n}\n else {\nnotificationsLayout.removeNotification(\"muted\");\n}\nnotificationsLayout.removeNotification(\"video\");\n}\nif (notificationsLayout.getChildCount() == 0 && callingUserIsVideo && service.call != null && !service.call.video && !service.sharedUIParams.tapToVideoTooltipWasShowed) {\nservice.sharedUIParams.tapToVideoTooltipWasShowed=true;\ntapToVideoTooltip.showForView(bottomButtons[1],true);\n}\n else if (notificationsLayout.getChildCount() != 0) {\ntapToVideoTooltip.hide();\n}\nif (animated) {\nnotificationsLayout.animateLayoutChanges();\n}\n}\nfloatingViewsOffset=notificationsLayout.getChildsHight();\ncallingUserMiniFloatingLayout.setBottomOffset(floatingViewsOffset,animated);\ncurrentUserCameraFloatingLayout.setBottomOffset(floatingViewsOffset,animated);\ncurrentUserCameraFloatingLayout.setUiVisible(uiVisible);\ncallingUserMiniFloatingLayout.setUiVisible(uiVisible);\nif (currentUserIsVideo) {\nif (!callingUserIsVideo || cameraForceExpanded) {\nshowFloatingLayout(STATE_FULLSCREEN,animated);\n}\n else {\nshowFloatingLayout(STATE_FLOATING,animated);\n}\n}\n else {\nshowFloatingLayout(STATE_GONE,animated);\n}\nif (showCallingUserVideoMini && callingUserMiniFloatingLayout.getTag() == null) {\ncallingUserMiniFloatingLayout.setIsActive(true);\nif (callingUserMiniFloatingLayout.getVisibility() != View.VISIBLE) {\ncallingUserMiniFloatingLayout.setVisibility(View.VISIBLE);\ncallingUserMiniFloatingLayout.setAlpha(0f);\ncallingUserMiniFloatingLayout.setScaleX(0.5f);\ncallingUserMiniFloatingLayout.setScaleY(0.5f);\n}\ncallingUserMiniFloatingLayout.animate().setListener(null).cancel();\ncallingUserMiniFloatingLayout.animate().alpha(1f).scaleX(1f).scaleY(1f).setDuration(150).setInterpolator(CubicBezierInterpolator.DEFAULT).setStartDelay(150).start();\ncallingUserMiniFloatingLayout.setTag(1);\n}\n else if (!showCallingUserVideoMini && callingUserMiniFloatingLayout.getTag() != null) {\ncallingUserMiniFloatingLayout.setIsActive(false);\ncallingUserMiniFloatingLayout.animate().alpha(0).scaleX(0.5f).scaleY(0.5f).setListener(new AnimatorListenerAdapter(){\n@Override public void onAnimationEnd(Animator animation){\nif (callingUserMiniFloatingLayout.getTag() == null) {\ncallingUserMiniFloatingLayout.setVisibility(View.GONE);\n}\n}\n}\n).setDuration(150).setInterpolator(CubicBezierInterpolator.DEFAULT).start();\ncallingUserMiniFloatingLayout.setTag(null);\n}\ncurrentUserCameraFloatingLayout.restoreRelativePosition();\ncallingUserMiniFloatingLayout.restoreRelativePosition();\nupdateSpeakerPhoneIcon();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1820,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 1282,
        "startColumnNumber" : 31,
        "endLineNumber" : 1282,
        "endColumnNumber" : 93
      },
      "nodeContext" : "TextUtils.equals(lastError,Instance.ERROR_CONNECTION_SERVICE)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 4,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 33,
    "startLineNumber" : 1282,
    "startColumnNumber" : 59,
    "endLineNumber" : 1282,
    "endColumnNumber" : 92
  } ],
  "layoutRelationDataList" : [ ]
}