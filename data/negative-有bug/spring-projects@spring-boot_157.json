{
  "id" : 157,
  "expression" : "pool.isBlockIfFull()",
  "projectName" : "spring-projects@spring-boot",
  "commitID" : "44299bb9808d0dc21a9bfc1c0c47e1539e00856d",
  "filePath" : "/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQConnectionFactoryConfiguration.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "pool.isBlockIfFull()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 69,
      "startColumnNumber" : 55,
      "endLineNumber" : 69,
      "endColumnNumber" : 75
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 69,
        "startColumnNumber" : 3,
        "endLineNumber" : 69,
        "endColumnNumber" : 76
      },
      "nodeContext" : "pooledConnectionFactory.setBlockIfSessionPoolIsFull(pool.isBlockIfFull())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 69,
        "startColumnNumber" : 3,
        "endLineNumber" : 69,
        "endColumnNumber" : 77
      },
      "nodeContext" : "pooledConnectionFactory.setBlockIfSessionPoolIsFull(pool.isBlockIfFull());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1507,
        "startLineNumber" : 63,
        "startColumnNumber" : 82,
        "endLineNumber" : 96,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  PooledConnectionFactory pooledConnectionFactory=new PooledConnectionFactory(new ActiveMQConnectionFactoryFactory(properties,factoryCustomizers.getIfAvailable()).createConnectionFactory(ActiveMQConnectionFactory.class));\n  ActiveMQProperties.Pool pool=properties.getPool();\n  pooledConnectionFactory.setBlockIfSessionPoolIsFull(pool.isBlockIfFull());\n  if (pool.getBlockIfFullTimeout() != null) {\n    pooledConnectionFactory.setBlockIfSessionPoolIsFullTimeout(pool.getBlockIfFullTimeout().toMillis());\n  }\n  pooledConnectionFactory.setCreateConnectionOnStartup(pool.isCreateConnectionOnStartup());\n  if (pool.getExpiryTimeout() != null) {\n    pooledConnectionFactory.setExpiryTimeout(pool.getExpiryTimeout().toMillis());\n  }\n  if (pool.getIdleTimeout() != null) {\n    pooledConnectionFactory.setIdleTimeout((int)pool.getIdleTimeout().toMillis());\n  }\n  pooledConnectionFactory.setMaxConnections(pool.getMaxConnections());\n  pooledConnectionFactory.setMaximumActiveSessionPerConnection(pool.getMaximumActiveSessionPerConnection());\n  pooledConnectionFactory.setReconnectOnException(pool.isReconnectOnException());\n  if (pool.getTimeBetweenExpirationCheck() != null) {\n    pooledConnectionFactory.setTimeBetweenExpirationCheckMillis(pool.getTimeBetweenExpirationCheck().toMillis());\n  }\n  pooledConnectionFactory.setUseAnonymousProducers(pool.isUseAnonymousProducers());\n  return pooledConnectionFactory;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 141,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1837,
        "startLineNumber" : 59,
        "startColumnNumber" : 2,
        "endLineNumber" : 96,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Bean(destroyMethod=\"stop\") @ConditionalOnProperty(prefix=\"spring.activemq.pool\",name=\"enabled\",havingValue=\"true\",matchIfMissing=false) public PooledConnectionFactory pooledJmsConnectionFactory(ActiveMQProperties properties,ObjectProvider<List<ActiveMQConnectionFactoryCustomizer>> factoryCustomizers){\n  PooledConnectionFactory pooledConnectionFactory=new PooledConnectionFactory(new ActiveMQConnectionFactoryFactory(properties,factoryCustomizers.getIfAvailable()).createConnectionFactory(ActiveMQConnectionFactory.class));\n  ActiveMQProperties.Pool pool=properties.getPool();\n  pooledConnectionFactory.setBlockIfSessionPoolIsFull(pool.isBlockIfFull());\n  if (pool.getBlockIfFullTimeout() != null) {\n    pooledConnectionFactory.setBlockIfSessionPoolIsFullTimeout(pool.getBlockIfFullTimeout().toMillis());\n  }\n  pooledConnectionFactory.setCreateConnectionOnStartup(pool.isCreateConnectionOnStartup());\n  if (pool.getExpiryTimeout() != null) {\n    pooledConnectionFactory.setExpiryTimeout(pool.getExpiryTimeout().toMillis());\n  }\n  if (pool.getIdleTimeout() != null) {\n    pooledConnectionFactory.setIdleTimeout((int)pool.getIdleTimeout().toMillis());\n  }\n  pooledConnectionFactory.setMaxConnections(pool.getMaxConnections());\n  pooledConnectionFactory.setMaximumActiveSessionPerConnection(pool.getMaximumActiveSessionPerConnection());\n  pooledConnectionFactory.setReconnectOnException(pool.isReconnectOnException());\n  if (pool.getTimeBetweenExpirationCheck() != null) {\n    pooledConnectionFactory.setTimeBetweenExpirationCheckMillis(pool.getTimeBetweenExpirationCheck().toMillis());\n  }\n  pooledConnectionFactory.setUseAnonymousProducers(pool.isUseAnonymousProducers());\n  return pooledConnectionFactory;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 179,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 69,
        "startColumnNumber" : 3,
        "endLineNumber" : 69,
        "endColumnNumber" : 77
      },
      "nodeContext" : "pooledConnectionFactory.setBlockIfSessionPoolIsFull(pool.isBlockIfFull());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 20,
    "startLineNumber" : 69,
    "startColumnNumber" : 55,
    "endLineNumber" : 69,
    "endColumnNumber" : 75
  } ],
  "layoutRelationDataList" : [ ]
}