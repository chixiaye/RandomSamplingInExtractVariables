{
  "id" : 290,
  "expression" : "attributes",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/main/java/com/google/devtools/build/lib/rules/android/AndroidSdkProvider.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "attributes",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 146,
      "startColumnNumber" : 28,
      "endLineNumber" : 146,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 146,
        "startColumnNumber" : 28,
        "endLineNumber" : 146,
        "endColumnNumber" : 94
      },
      "nodeContext" : "attributes.get(ANDROID_SDK_TOOLCHAIN_TYPE_ATTRIBUTE_NAME,depType)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 146,
        "startColumnNumber" : 12,
        "endLineNumber" : 146,
        "endColumnNumber" : 94
      },
      "nodeContext" : "toolchainType=attributes.get(ANDROID_SDK_TOOLCHAIN_TYPE_ATTRIBUTE_NAME,depType)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 146,
        "startColumnNumber" : 6,
        "endLineNumber" : 146,
        "endColumnNumber" : 95
      },
      "nodeContext" : "Label toolchainType=attributes.get(ANDROID_SDK_TOOLCHAIN_TYPE_ATTRIBUTE_NAME,depType);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 3431,
        "startLineNumber" : 131,
        "startColumnNumber" : 51,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  AttributeMap attributes=ruleContext.attributes();\n  if (ruleContext.getToolchainContext() == null) {\n    ruleContext.ruleError(String.format(\"'%s' rule '%s' requested sdk toolchain resolution via\" + \" --incompatible_enable_android_toolchain_resolution but doesn't use\" + \" toolchain resolution.\",ruleContext.getRuleClassNameForLogging(),ruleContext.getLabel()));\n    return null;\n  }\n  Type<Label> depType=ruleContext.getRule().getRuleClassObject().isStarlark() ? BuildType.LABEL : BuildType.NODEP_LABEL;\n  Label toolchainType=attributes.get(ANDROID_SDK_TOOLCHAIN_TYPE_ATTRIBUTE_NAME,depType);\n  if (toolchainType == null) {\n    ruleContext.ruleError(String.format(\"'%s' rule '%s' requested sdk toolchain resolution via\" + \" --incompatible_enable_android_toolchain_resolution but doesn't have\" + \" toolchain type attribute '%s'.\",ruleContext.getRuleClassNameForLogging(),ruleContext.getLabel(),ANDROID_SDK_TOOLCHAIN_TYPE_ATTRIBUTE_NAME));\n    return null;\n  }\n  ResolvedToolchainContext toolchainContext=ruleContext.getToolchainContext();\n  if (attributes.has(ANDROID_SDK_DUMMY_TOOLCHAIN_ATTRIBUTE_NAME,depType)) {\n    ImmutableSet<Label> resolvedToolchains=toolchainContext.resolvedToolchainLabels();\n    Label dummyToochain=attributes.get(ANDROID_SDK_DUMMY_TOOLCHAIN_ATTRIBUTE_NAME,depType);\n    for (    Label toolchain : resolvedToolchains) {\n      if (dummyToochain.equals(toolchain)) {\n        ruleContext.ruleError(String.format(\"'%s' rule '%s' requested sdk toolchain resolution via\" + \" --incompatible_enable_android_toolchain_resolution but hasn't set an\" + \" appropriate --platforms value: --platforms=%s\",ruleContext.getRuleClassNameForLogging(),ruleContext.getLabel(),configuration.getFragment(PlatformConfiguration.class).getTargetPlatform()));\n        return null;\n      }\n    }\n  }\n  ToolchainInfo info=toolchainContext.forToolchainType(toolchainType);\n  if (info == null) {\n    ruleContext.ruleError(String.format(\"'%s' rule '%s' requested sdk toolchain resolution via\" + \" --incompatible_enable_android_toolchain_resolution but doesn't have a\" + \" toolchain for '%s'.\",ruleContext.getRuleClassNameForLogging(),ruleContext.getLabel(),toolchainType));\n    return null;\n  }\n  try {\n    return (AndroidSdkProvider)info.getValue(\"android_sdk_info\");\n  }\n catch (  EvalException e) {\n    ruleContext.ruleError(String.format(\"Android SDK toolchain for %s didn't have an 'android_sdk_info' provider: %s\",ruleContext.getLabel(),e.getMessage()));\n    return null;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 234,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3651,
        "startLineNumber" : 127,
        "startColumnNumber" : 4,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (configuration != null && configuration.hasFragment(AndroidConfiguration.class) && configuration.getFragment(AndroidConfiguration.class).incompatibleUseToolchainResolution()) {\n  AttributeMap attributes=ruleContext.attributes();\n  if (ruleContext.getToolchainContext() == null) {\n    ruleContext.ruleError(String.format(\"'%s' rule '%s' requested sdk toolchain resolution via\" + \" --incompatible_enable_android_toolchain_resolution but doesn't use\" + \" toolchain resolution.\",ruleContext.getRuleClassNameForLogging(),ruleContext.getLabel()));\n    return null;\n  }\n  Type<Label> depType=ruleContext.getRule().getRuleClassObject().isStarlark() ? BuildType.LABEL : BuildType.NODEP_LABEL;\n  Label toolchainType=attributes.get(ANDROID_SDK_TOOLCHAIN_TYPE_ATTRIBUTE_NAME,depType);\n  if (toolchainType == null) {\n    ruleContext.ruleError(String.format(\"'%s' rule '%s' requested sdk toolchain resolution via\" + \" --incompatible_enable_android_toolchain_resolution but doesn't have\" + \" toolchain type attribute '%s'.\",ruleContext.getRuleClassNameForLogging(),ruleContext.getLabel(),ANDROID_SDK_TOOLCHAIN_TYPE_ATTRIBUTE_NAME));\n    return null;\n  }\n  ResolvedToolchainContext toolchainContext=ruleContext.getToolchainContext();\n  if (attributes.has(ANDROID_SDK_DUMMY_TOOLCHAIN_ATTRIBUTE_NAME,depType)) {\n    ImmutableSet<Label> resolvedToolchains=toolchainContext.resolvedToolchainLabels();\n    Label dummyToochain=attributes.get(ANDROID_SDK_DUMMY_TOOLCHAIN_ATTRIBUTE_NAME,depType);\n    for (    Label toolchain : resolvedToolchains) {\n      if (dummyToochain.equals(toolchain)) {\n        ruleContext.ruleError(String.format(\"'%s' rule '%s' requested sdk toolchain resolution via\" + \" --incompatible_enable_android_toolchain_resolution but hasn't set an\" + \" appropriate --platforms value: --platforms=%s\",ruleContext.getRuleClassNameForLogging(),ruleContext.getLabel(),configuration.getFragment(PlatformConfiguration.class).getTargetPlatform()));\n        return null;\n      }\n    }\n  }\n  ToolchainInfo info=toolchainContext.forToolchainType(toolchainType);\n  if (info == null) {\n    ruleContext.ruleError(String.format(\"'%s' rule '%s' requested sdk toolchain resolution via\" + \" --incompatible_enable_android_toolchain_resolution but doesn't have a\" + \" toolchain for '%s'.\",ruleContext.getRuleClassNameForLogging(),ruleContext.getLabel(),toolchainType));\n    return null;\n  }\n  try {\n    return (AndroidSdkProvider)info.getValue(\"android_sdk_info\");\n  }\n catch (  EvalException e) {\n    ruleContext.ruleError(String.format(\"Android SDK toolchain for %s didn't have an 'android_sdk_info' provider: %s\",ruleContext.getLabel(),e.getMessage()));\n    return null;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 254,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3823,
        "startLineNumber" : 125,
        "startColumnNumber" : 76,
        "endLineNumber" : 201,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  BuildConfigurationValue configuration=ruleContext.getConfiguration();\n  if (configuration != null && configuration.hasFragment(AndroidConfiguration.class) && configuration.getFragment(AndroidConfiguration.class).incompatibleUseToolchainResolution()) {\n    AttributeMap attributes=ruleContext.attributes();\n    if (ruleContext.getToolchainContext() == null) {\n      ruleContext.ruleError(String.format(\"'%s' rule '%s' requested sdk toolchain resolution via\" + \" --incompatible_enable_android_toolchain_resolution but doesn't use\" + \" toolchain resolution.\",ruleContext.getRuleClassNameForLogging(),ruleContext.getLabel()));\n      return null;\n    }\n    Type<Label> depType=ruleContext.getRule().getRuleClassObject().isStarlark() ? BuildType.LABEL : BuildType.NODEP_LABEL;\n    Label toolchainType=attributes.get(ANDROID_SDK_TOOLCHAIN_TYPE_ATTRIBUTE_NAME,depType);\n    if (toolchainType == null) {\n      ruleContext.ruleError(String.format(\"'%s' rule '%s' requested sdk toolchain resolution via\" + \" --incompatible_enable_android_toolchain_resolution but doesn't have\" + \" toolchain type attribute '%s'.\",ruleContext.getRuleClassNameForLogging(),ruleContext.getLabel(),ANDROID_SDK_TOOLCHAIN_TYPE_ATTRIBUTE_NAME));\n      return null;\n    }\n    ResolvedToolchainContext toolchainContext=ruleContext.getToolchainContext();\n    if (attributes.has(ANDROID_SDK_DUMMY_TOOLCHAIN_ATTRIBUTE_NAME,depType)) {\n      ImmutableSet<Label> resolvedToolchains=toolchainContext.resolvedToolchainLabels();\n      Label dummyToochain=attributes.get(ANDROID_SDK_DUMMY_TOOLCHAIN_ATTRIBUTE_NAME,depType);\n      for (      Label toolchain : resolvedToolchains) {\n        if (dummyToochain.equals(toolchain)) {\n          ruleContext.ruleError(String.format(\"'%s' rule '%s' requested sdk toolchain resolution via\" + \" --incompatible_enable_android_toolchain_resolution but hasn't set an\" + \" appropriate --platforms value: --platforms=%s\",ruleContext.getRuleClassNameForLogging(),ruleContext.getLabel(),configuration.getFragment(PlatformConfiguration.class).getTargetPlatform()));\n          return null;\n        }\n      }\n    }\n    ToolchainInfo info=toolchainContext.forToolchainType(toolchainType);\n    if (info == null) {\n      ruleContext.ruleError(String.format(\"'%s' rule '%s' requested sdk toolchain resolution via\" + \" --incompatible_enable_android_toolchain_resolution but doesn't have a\" + \" toolchain for '%s'.\",ruleContext.getRuleClassNameForLogging(),ruleContext.getLabel(),toolchainType));\n      return null;\n    }\n    try {\n      return (AndroidSdkProvider)info.getValue(\"android_sdk_info\");\n    }\n catch (    EvalException e) {\n      ruleContext.ruleError(String.format(\"Android SDK toolchain for %s didn't have an 'android_sdk_info' provider: %s\",ruleContext.getLabel(),e.getMessage()));\n      return null;\n    }\n  }\n  return ruleContext.getPrerequisite(\":android_sdk\",AndroidSdkProvider.PROVIDER);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 271,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4176,
        "startLineNumber" : 118,
        "startColumnNumber" : 2,
        "endLineNumber" : 201,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Returns the Android SDK associated with the rule being analyzed or null if the Android SDK is not specified. <p>First tries to read from toolchains if --incompatible_enable_android_toolchain_resolution=true, else, uses the legacy attribute..\n */\npublic static AndroidSdkProvider fromRuleContext(RuleContext ruleContext){\n  BuildConfigurationValue configuration=ruleContext.getConfiguration();\n  if (configuration != null && configuration.hasFragment(AndroidConfiguration.class) && configuration.getFragment(AndroidConfiguration.class).incompatibleUseToolchainResolution()) {\n    AttributeMap attributes=ruleContext.attributes();\n    if (ruleContext.getToolchainContext() == null) {\n      ruleContext.ruleError(String.format(\"'%s' rule '%s' requested sdk toolchain resolution via\" + \" --incompatible_enable_android_toolchain_resolution but doesn't use\" + \" toolchain resolution.\",ruleContext.getRuleClassNameForLogging(),ruleContext.getLabel()));\n      return null;\n    }\n    Type<Label> depType=ruleContext.getRule().getRuleClassObject().isStarlark() ? BuildType.LABEL : BuildType.NODEP_LABEL;\n    Label toolchainType=attributes.get(ANDROID_SDK_TOOLCHAIN_TYPE_ATTRIBUTE_NAME,depType);\n    if (toolchainType == null) {\n      ruleContext.ruleError(String.format(\"'%s' rule '%s' requested sdk toolchain resolution via\" + \" --incompatible_enable_android_toolchain_resolution but doesn't have\" + \" toolchain type attribute '%s'.\",ruleContext.getRuleClassNameForLogging(),ruleContext.getLabel(),ANDROID_SDK_TOOLCHAIN_TYPE_ATTRIBUTE_NAME));\n      return null;\n    }\n    ResolvedToolchainContext toolchainContext=ruleContext.getToolchainContext();\n    if (attributes.has(ANDROID_SDK_DUMMY_TOOLCHAIN_ATTRIBUTE_NAME,depType)) {\n      ImmutableSet<Label> resolvedToolchains=toolchainContext.resolvedToolchainLabels();\n      Label dummyToochain=attributes.get(ANDROID_SDK_DUMMY_TOOLCHAIN_ATTRIBUTE_NAME,depType);\n      for (      Label toolchain : resolvedToolchains) {\n        if (dummyToochain.equals(toolchain)) {\n          ruleContext.ruleError(String.format(\"'%s' rule '%s' requested sdk toolchain resolution via\" + \" --incompatible_enable_android_toolchain_resolution but hasn't set an\" + \" appropriate --platforms value: --platforms=%s\",ruleContext.getRuleClassNameForLogging(),ruleContext.getLabel(),configuration.getFragment(PlatformConfiguration.class).getTargetPlatform()));\n          return null;\n        }\n      }\n    }\n    ToolchainInfo info=toolchainContext.forToolchainType(toolchainType);\n    if (info == null) {\n      ruleContext.ruleError(String.format(\"'%s' rule '%s' requested sdk toolchain resolution via\" + \" --incompatible_enable_android_toolchain_resolution but doesn't have a\" + \" toolchain for '%s'.\",ruleContext.getRuleClassNameForLogging(),ruleContext.getLabel(),toolchainType));\n      return null;\n    }\n    try {\n      return (AndroidSdkProvider)info.getValue(\"android_sdk_info\");\n    }\n catch (    EvalException e) {\n      ruleContext.ruleError(String.format(\"Android SDK toolchain for %s didn't have an 'android_sdk_info' provider: %s\",ruleContext.getLabel(),e.getMessage()));\n      return null;\n    }\n  }\n  return ruleContext.getPrerequisite(\":android_sdk\",AndroidSdkProvider.PROVIDER);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 282,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 146,
        "startColumnNumber" : 6,
        "endLineNumber" : 146,
        "endColumnNumber" : 95
      },
      "nodeContext" : "Label toolchainType=attributes.get(ANDROID_SDK_TOOLCHAIN_TYPE_ATTRIBUTE_NAME,depType);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.devtools.build.lib.packages.AttributeMap"
  }, {
    "nodeContext" : "attributes",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 159,
      "startColumnNumber" : 10,
      "endLineNumber" : 159,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 159,
        "startColumnNumber" : 10,
        "endLineNumber" : 159,
        "endColumnNumber" : 77
      },
      "nodeContext" : "attributes.has(ANDROID_SDK_DUMMY_TOOLCHAIN_ATTRIBUTE_NAME,depType)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1213,
        "startLineNumber" : 159,
        "startColumnNumber" : 6,
        "endLineNumber" : 178,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (attributes.has(ANDROID_SDK_DUMMY_TOOLCHAIN_ATTRIBUTE_NAME,depType)) {\n  ImmutableSet<Label> resolvedToolchains=toolchainContext.resolvedToolchainLabels();\n  Label dummyToochain=attributes.get(ANDROID_SDK_DUMMY_TOOLCHAIN_ATTRIBUTE_NAME,depType);\n  for (  Label toolchain : resolvedToolchains) {\n    if (dummyToochain.equals(toolchain)) {\n      ruleContext.ruleError(String.format(\"'%s' rule '%s' requested sdk toolchain resolution via\" + \" --incompatible_enable_android_toolchain_resolution but hasn't set an\" + \" appropriate --platforms value: --platforms=%s\",ruleContext.getRuleClassNameForLogging(),ruleContext.getLabel(),configuration.getFragment(PlatformConfiguration.class).getTargetPlatform()));\n      return null;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 68,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 3431,
        "startLineNumber" : 131,
        "startColumnNumber" : 51,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  AttributeMap attributes=ruleContext.attributes();\n  if (ruleContext.getToolchainContext() == null) {\n    ruleContext.ruleError(String.format(\"'%s' rule '%s' requested sdk toolchain resolution via\" + \" --incompatible_enable_android_toolchain_resolution but doesn't use\" + \" toolchain resolution.\",ruleContext.getRuleClassNameForLogging(),ruleContext.getLabel()));\n    return null;\n  }\n  Type<Label> depType=ruleContext.getRule().getRuleClassObject().isStarlark() ? BuildType.LABEL : BuildType.NODEP_LABEL;\n  Label toolchainType=attributes.get(ANDROID_SDK_TOOLCHAIN_TYPE_ATTRIBUTE_NAME,depType);\n  if (toolchainType == null) {\n    ruleContext.ruleError(String.format(\"'%s' rule '%s' requested sdk toolchain resolution via\" + \" --incompatible_enable_android_toolchain_resolution but doesn't have\" + \" toolchain type attribute '%s'.\",ruleContext.getRuleClassNameForLogging(),ruleContext.getLabel(),ANDROID_SDK_TOOLCHAIN_TYPE_ATTRIBUTE_NAME));\n    return null;\n  }\n  ResolvedToolchainContext toolchainContext=ruleContext.getToolchainContext();\n  if (attributes.has(ANDROID_SDK_DUMMY_TOOLCHAIN_ATTRIBUTE_NAME,depType)) {\n    ImmutableSet<Label> resolvedToolchains=toolchainContext.resolvedToolchainLabels();\n    Label dummyToochain=attributes.get(ANDROID_SDK_DUMMY_TOOLCHAIN_ATTRIBUTE_NAME,depType);\n    for (    Label toolchain : resolvedToolchains) {\n      if (dummyToochain.equals(toolchain)) {\n        ruleContext.ruleError(String.format(\"'%s' rule '%s' requested sdk toolchain resolution via\" + \" --incompatible_enable_android_toolchain_resolution but hasn't set an\" + \" appropriate --platforms value: --platforms=%s\",ruleContext.getRuleClassNameForLogging(),ruleContext.getLabel(),configuration.getFragment(PlatformConfiguration.class).getTargetPlatform()));\n        return null;\n      }\n    }\n  }\n  ToolchainInfo info=toolchainContext.forToolchainType(toolchainType);\n  if (info == null) {\n    ruleContext.ruleError(String.format(\"'%s' rule '%s' requested sdk toolchain resolution via\" + \" --incompatible_enable_android_toolchain_resolution but doesn't have a\" + \" toolchain for '%s'.\",ruleContext.getRuleClassNameForLogging(),ruleContext.getLabel(),toolchainType));\n    return null;\n  }\n  try {\n    return (AndroidSdkProvider)info.getValue(\"android_sdk_info\");\n  }\n catch (  EvalException e) {\n    ruleContext.ruleError(String.format(\"Android SDK toolchain for %s didn't have an 'android_sdk_info' provider: %s\",ruleContext.getLabel(),e.getMessage()));\n    return null;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 234,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3651,
        "startLineNumber" : 127,
        "startColumnNumber" : 4,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (configuration != null && configuration.hasFragment(AndroidConfiguration.class) && configuration.getFragment(AndroidConfiguration.class).incompatibleUseToolchainResolution()) {\n  AttributeMap attributes=ruleContext.attributes();\n  if (ruleContext.getToolchainContext() == null) {\n    ruleContext.ruleError(String.format(\"'%s' rule '%s' requested sdk toolchain resolution via\" + \" --incompatible_enable_android_toolchain_resolution but doesn't use\" + \" toolchain resolution.\",ruleContext.getRuleClassNameForLogging(),ruleContext.getLabel()));\n    return null;\n  }\n  Type<Label> depType=ruleContext.getRule().getRuleClassObject().isStarlark() ? BuildType.LABEL : BuildType.NODEP_LABEL;\n  Label toolchainType=attributes.get(ANDROID_SDK_TOOLCHAIN_TYPE_ATTRIBUTE_NAME,depType);\n  if (toolchainType == null) {\n    ruleContext.ruleError(String.format(\"'%s' rule '%s' requested sdk toolchain resolution via\" + \" --incompatible_enable_android_toolchain_resolution but doesn't have\" + \" toolchain type attribute '%s'.\",ruleContext.getRuleClassNameForLogging(),ruleContext.getLabel(),ANDROID_SDK_TOOLCHAIN_TYPE_ATTRIBUTE_NAME));\n    return null;\n  }\n  ResolvedToolchainContext toolchainContext=ruleContext.getToolchainContext();\n  if (attributes.has(ANDROID_SDK_DUMMY_TOOLCHAIN_ATTRIBUTE_NAME,depType)) {\n    ImmutableSet<Label> resolvedToolchains=toolchainContext.resolvedToolchainLabels();\n    Label dummyToochain=attributes.get(ANDROID_SDK_DUMMY_TOOLCHAIN_ATTRIBUTE_NAME,depType);\n    for (    Label toolchain : resolvedToolchains) {\n      if (dummyToochain.equals(toolchain)) {\n        ruleContext.ruleError(String.format(\"'%s' rule '%s' requested sdk toolchain resolution via\" + \" --incompatible_enable_android_toolchain_resolution but hasn't set an\" + \" appropriate --platforms value: --platforms=%s\",ruleContext.getRuleClassNameForLogging(),ruleContext.getLabel(),configuration.getFragment(PlatformConfiguration.class).getTargetPlatform()));\n        return null;\n      }\n    }\n  }\n  ToolchainInfo info=toolchainContext.forToolchainType(toolchainType);\n  if (info == null) {\n    ruleContext.ruleError(String.format(\"'%s' rule '%s' requested sdk toolchain resolution via\" + \" --incompatible_enable_android_toolchain_resolution but doesn't have a\" + \" toolchain for '%s'.\",ruleContext.getRuleClassNameForLogging(),ruleContext.getLabel(),toolchainType));\n    return null;\n  }\n  try {\n    return (AndroidSdkProvider)info.getValue(\"android_sdk_info\");\n  }\n catch (  EvalException e) {\n    ruleContext.ruleError(String.format(\"Android SDK toolchain for %s didn't have an 'android_sdk_info' provider: %s\",ruleContext.getLabel(),e.getMessage()));\n    return null;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 254,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3823,
        "startLineNumber" : 125,
        "startColumnNumber" : 76,
        "endLineNumber" : 201,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  BuildConfigurationValue configuration=ruleContext.getConfiguration();\n  if (configuration != null && configuration.hasFragment(AndroidConfiguration.class) && configuration.getFragment(AndroidConfiguration.class).incompatibleUseToolchainResolution()) {\n    AttributeMap attributes=ruleContext.attributes();\n    if (ruleContext.getToolchainContext() == null) {\n      ruleContext.ruleError(String.format(\"'%s' rule '%s' requested sdk toolchain resolution via\" + \" --incompatible_enable_android_toolchain_resolution but doesn't use\" + \" toolchain resolution.\",ruleContext.getRuleClassNameForLogging(),ruleContext.getLabel()));\n      return null;\n    }\n    Type<Label> depType=ruleContext.getRule().getRuleClassObject().isStarlark() ? BuildType.LABEL : BuildType.NODEP_LABEL;\n    Label toolchainType=attributes.get(ANDROID_SDK_TOOLCHAIN_TYPE_ATTRIBUTE_NAME,depType);\n    if (toolchainType == null) {\n      ruleContext.ruleError(String.format(\"'%s' rule '%s' requested sdk toolchain resolution via\" + \" --incompatible_enable_android_toolchain_resolution but doesn't have\" + \" toolchain type attribute '%s'.\",ruleContext.getRuleClassNameForLogging(),ruleContext.getLabel(),ANDROID_SDK_TOOLCHAIN_TYPE_ATTRIBUTE_NAME));\n      return null;\n    }\n    ResolvedToolchainContext toolchainContext=ruleContext.getToolchainContext();\n    if (attributes.has(ANDROID_SDK_DUMMY_TOOLCHAIN_ATTRIBUTE_NAME,depType)) {\n      ImmutableSet<Label> resolvedToolchains=toolchainContext.resolvedToolchainLabels();\n      Label dummyToochain=attributes.get(ANDROID_SDK_DUMMY_TOOLCHAIN_ATTRIBUTE_NAME,depType);\n      for (      Label toolchain : resolvedToolchains) {\n        if (dummyToochain.equals(toolchain)) {\n          ruleContext.ruleError(String.format(\"'%s' rule '%s' requested sdk toolchain resolution via\" + \" --incompatible_enable_android_toolchain_resolution but hasn't set an\" + \" appropriate --platforms value: --platforms=%s\",ruleContext.getRuleClassNameForLogging(),ruleContext.getLabel(),configuration.getFragment(PlatformConfiguration.class).getTargetPlatform()));\n          return null;\n        }\n      }\n    }\n    ToolchainInfo info=toolchainContext.forToolchainType(toolchainType);\n    if (info == null) {\n      ruleContext.ruleError(String.format(\"'%s' rule '%s' requested sdk toolchain resolution via\" + \" --incompatible_enable_android_toolchain_resolution but doesn't have a\" + \" toolchain for '%s'.\",ruleContext.getRuleClassNameForLogging(),ruleContext.getLabel(),toolchainType));\n      return null;\n    }\n    try {\n      return (AndroidSdkProvider)info.getValue(\"android_sdk_info\");\n    }\n catch (    EvalException e) {\n      ruleContext.ruleError(String.format(\"Android SDK toolchain for %s didn't have an 'android_sdk_info' provider: %s\",ruleContext.getLabel(),e.getMessage()));\n      return null;\n    }\n  }\n  return ruleContext.getPrerequisite(\":android_sdk\",AndroidSdkProvider.PROVIDER);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 271,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4176,
        "startLineNumber" : 118,
        "startColumnNumber" : 2,
        "endLineNumber" : 201,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Returns the Android SDK associated with the rule being analyzed or null if the Android SDK is not specified. <p>First tries to read from toolchains if --incompatible_enable_android_toolchain_resolution=true, else, uses the legacy attribute..\n */\npublic static AndroidSdkProvider fromRuleContext(RuleContext ruleContext){\n  BuildConfigurationValue configuration=ruleContext.getConfiguration();\n  if (configuration != null && configuration.hasFragment(AndroidConfiguration.class) && configuration.getFragment(AndroidConfiguration.class).incompatibleUseToolchainResolution()) {\n    AttributeMap attributes=ruleContext.attributes();\n    if (ruleContext.getToolchainContext() == null) {\n      ruleContext.ruleError(String.format(\"'%s' rule '%s' requested sdk toolchain resolution via\" + \" --incompatible_enable_android_toolchain_resolution but doesn't use\" + \" toolchain resolution.\",ruleContext.getRuleClassNameForLogging(),ruleContext.getLabel()));\n      return null;\n    }\n    Type<Label> depType=ruleContext.getRule().getRuleClassObject().isStarlark() ? BuildType.LABEL : BuildType.NODEP_LABEL;\n    Label toolchainType=attributes.get(ANDROID_SDK_TOOLCHAIN_TYPE_ATTRIBUTE_NAME,depType);\n    if (toolchainType == null) {\n      ruleContext.ruleError(String.format(\"'%s' rule '%s' requested sdk toolchain resolution via\" + \" --incompatible_enable_android_toolchain_resolution but doesn't have\" + \" toolchain type attribute '%s'.\",ruleContext.getRuleClassNameForLogging(),ruleContext.getLabel(),ANDROID_SDK_TOOLCHAIN_TYPE_ATTRIBUTE_NAME));\n      return null;\n    }\n    ResolvedToolchainContext toolchainContext=ruleContext.getToolchainContext();\n    if (attributes.has(ANDROID_SDK_DUMMY_TOOLCHAIN_ATTRIBUTE_NAME,depType)) {\n      ImmutableSet<Label> resolvedToolchains=toolchainContext.resolvedToolchainLabels();\n      Label dummyToochain=attributes.get(ANDROID_SDK_DUMMY_TOOLCHAIN_ATTRIBUTE_NAME,depType);\n      for (      Label toolchain : resolvedToolchains) {\n        if (dummyToochain.equals(toolchain)) {\n          ruleContext.ruleError(String.format(\"'%s' rule '%s' requested sdk toolchain resolution via\" + \" --incompatible_enable_android_toolchain_resolution but hasn't set an\" + \" appropriate --platforms value: --platforms=%s\",ruleContext.getRuleClassNameForLogging(),ruleContext.getLabel(),configuration.getFragment(PlatformConfiguration.class).getTargetPlatform()));\n          return null;\n        }\n      }\n    }\n    ToolchainInfo info=toolchainContext.forToolchainType(toolchainType);\n    if (info == null) {\n      ruleContext.ruleError(String.format(\"'%s' rule '%s' requested sdk toolchain resolution via\" + \" --incompatible_enable_android_toolchain_resolution but doesn't have a\" + \" toolchain for '%s'.\",ruleContext.getRuleClassNameForLogging(),ruleContext.getLabel(),toolchainType));\n      return null;\n    }\n    try {\n      return (AndroidSdkProvider)info.getValue(\"android_sdk_info\");\n    }\n catch (    EvalException e) {\n      ruleContext.ruleError(String.format(\"Android SDK toolchain for %s didn't have an 'android_sdk_info' provider: %s\",ruleContext.getLabel(),e.getMessage()));\n      return null;\n    }\n  }\n  return ruleContext.getPrerequisite(\":android_sdk\",AndroidSdkProvider.PROVIDER);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 282,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 159,
        "startColumnNumber" : 10,
        "endLineNumber" : 159,
        "endColumnNumber" : 77
      },
      "nodeContext" : "attributes.has(ANDROID_SDK_DUMMY_TOOLCHAIN_ATTRIBUTE_NAME,depType)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "com.google.devtools.build.lib.packages.AttributeMap"
  }, {
    "nodeContext" : "attributes",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 161,
      "startColumnNumber" : 30,
      "endLineNumber" : 161,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 161,
        "startColumnNumber" : 30,
        "endLineNumber" : 161,
        "endColumnNumber" : 97
      },
      "nodeContext" : "attributes.get(ANDROID_SDK_DUMMY_TOOLCHAIN_ATTRIBUTE_NAME,depType)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 161,
        "startColumnNumber" : 14,
        "endLineNumber" : 161,
        "endColumnNumber" : 97
      },
      "nodeContext" : "dummyToochain=attributes.get(ANDROID_SDK_DUMMY_TOOLCHAIN_ATTRIBUTE_NAME,depType)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 161,
        "startColumnNumber" : 8,
        "endLineNumber" : 161,
        "endColumnNumber" : 98
      },
      "nodeContext" : "Label dummyToochain=attributes.get(ANDROID_SDK_DUMMY_TOOLCHAIN_ATTRIBUTE_NAME,depType);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1140,
        "startLineNumber" : 159,
        "startColumnNumber" : 79,
        "endLineNumber" : 178,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  ImmutableSet<Label> resolvedToolchains=toolchainContext.resolvedToolchainLabels();\n  Label dummyToochain=attributes.get(ANDROID_SDK_DUMMY_TOOLCHAIN_ATTRIBUTE_NAME,depType);\n  for (  Label toolchain : resolvedToolchains) {\n    if (dummyToochain.equals(toolchain)) {\n      ruleContext.ruleError(String.format(\"'%s' rule '%s' requested sdk toolchain resolution via\" + \" --incompatible_enable_android_toolchain_resolution but hasn't set an\" + \" appropriate --platforms value: --platforms=%s\",ruleContext.getRuleClassNameForLogging(),ruleContext.getLabel(),configuration.getFragment(PlatformConfiguration.class).getTargetPlatform()));\n      return null;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 62,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1213,
        "startLineNumber" : 159,
        "startColumnNumber" : 6,
        "endLineNumber" : 178,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (attributes.has(ANDROID_SDK_DUMMY_TOOLCHAIN_ATTRIBUTE_NAME,depType)) {\n  ImmutableSet<Label> resolvedToolchains=toolchainContext.resolvedToolchainLabels();\n  Label dummyToochain=attributes.get(ANDROID_SDK_DUMMY_TOOLCHAIN_ATTRIBUTE_NAME,depType);\n  for (  Label toolchain : resolvedToolchains) {\n    if (dummyToochain.equals(toolchain)) {\n      ruleContext.ruleError(String.format(\"'%s' rule '%s' requested sdk toolchain resolution via\" + \" --incompatible_enable_android_toolchain_resolution but hasn't set an\" + \" appropriate --platforms value: --platforms=%s\",ruleContext.getRuleClassNameForLogging(),ruleContext.getLabel(),configuration.getFragment(PlatformConfiguration.class).getTargetPlatform()));\n      return null;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 68,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 3431,
        "startLineNumber" : 131,
        "startColumnNumber" : 51,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  AttributeMap attributes=ruleContext.attributes();\n  if (ruleContext.getToolchainContext() == null) {\n    ruleContext.ruleError(String.format(\"'%s' rule '%s' requested sdk toolchain resolution via\" + \" --incompatible_enable_android_toolchain_resolution but doesn't use\" + \" toolchain resolution.\",ruleContext.getRuleClassNameForLogging(),ruleContext.getLabel()));\n    return null;\n  }\n  Type<Label> depType=ruleContext.getRule().getRuleClassObject().isStarlark() ? BuildType.LABEL : BuildType.NODEP_LABEL;\n  Label toolchainType=attributes.get(ANDROID_SDK_TOOLCHAIN_TYPE_ATTRIBUTE_NAME,depType);\n  if (toolchainType == null) {\n    ruleContext.ruleError(String.format(\"'%s' rule '%s' requested sdk toolchain resolution via\" + \" --incompatible_enable_android_toolchain_resolution but doesn't have\" + \" toolchain type attribute '%s'.\",ruleContext.getRuleClassNameForLogging(),ruleContext.getLabel(),ANDROID_SDK_TOOLCHAIN_TYPE_ATTRIBUTE_NAME));\n    return null;\n  }\n  ResolvedToolchainContext toolchainContext=ruleContext.getToolchainContext();\n  if (attributes.has(ANDROID_SDK_DUMMY_TOOLCHAIN_ATTRIBUTE_NAME,depType)) {\n    ImmutableSet<Label> resolvedToolchains=toolchainContext.resolvedToolchainLabels();\n    Label dummyToochain=attributes.get(ANDROID_SDK_DUMMY_TOOLCHAIN_ATTRIBUTE_NAME,depType);\n    for (    Label toolchain : resolvedToolchains) {\n      if (dummyToochain.equals(toolchain)) {\n        ruleContext.ruleError(String.format(\"'%s' rule '%s' requested sdk toolchain resolution via\" + \" --incompatible_enable_android_toolchain_resolution but hasn't set an\" + \" appropriate --platforms value: --platforms=%s\",ruleContext.getRuleClassNameForLogging(),ruleContext.getLabel(),configuration.getFragment(PlatformConfiguration.class).getTargetPlatform()));\n        return null;\n      }\n    }\n  }\n  ToolchainInfo info=toolchainContext.forToolchainType(toolchainType);\n  if (info == null) {\n    ruleContext.ruleError(String.format(\"'%s' rule '%s' requested sdk toolchain resolution via\" + \" --incompatible_enable_android_toolchain_resolution but doesn't have a\" + \" toolchain for '%s'.\",ruleContext.getRuleClassNameForLogging(),ruleContext.getLabel(),toolchainType));\n    return null;\n  }\n  try {\n    return (AndroidSdkProvider)info.getValue(\"android_sdk_info\");\n  }\n catch (  EvalException e) {\n    ruleContext.ruleError(String.format(\"Android SDK toolchain for %s didn't have an 'android_sdk_info' provider: %s\",ruleContext.getLabel(),e.getMessage()));\n    return null;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 234,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3651,
        "startLineNumber" : 127,
        "startColumnNumber" : 4,
        "endLineNumber" : 198,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (configuration != null && configuration.hasFragment(AndroidConfiguration.class) && configuration.getFragment(AndroidConfiguration.class).incompatibleUseToolchainResolution()) {\n  AttributeMap attributes=ruleContext.attributes();\n  if (ruleContext.getToolchainContext() == null) {\n    ruleContext.ruleError(String.format(\"'%s' rule '%s' requested sdk toolchain resolution via\" + \" --incompatible_enable_android_toolchain_resolution but doesn't use\" + \" toolchain resolution.\",ruleContext.getRuleClassNameForLogging(),ruleContext.getLabel()));\n    return null;\n  }\n  Type<Label> depType=ruleContext.getRule().getRuleClassObject().isStarlark() ? BuildType.LABEL : BuildType.NODEP_LABEL;\n  Label toolchainType=attributes.get(ANDROID_SDK_TOOLCHAIN_TYPE_ATTRIBUTE_NAME,depType);\n  if (toolchainType == null) {\n    ruleContext.ruleError(String.format(\"'%s' rule '%s' requested sdk toolchain resolution via\" + \" --incompatible_enable_android_toolchain_resolution but doesn't have\" + \" toolchain type attribute '%s'.\",ruleContext.getRuleClassNameForLogging(),ruleContext.getLabel(),ANDROID_SDK_TOOLCHAIN_TYPE_ATTRIBUTE_NAME));\n    return null;\n  }\n  ResolvedToolchainContext toolchainContext=ruleContext.getToolchainContext();\n  if (attributes.has(ANDROID_SDK_DUMMY_TOOLCHAIN_ATTRIBUTE_NAME,depType)) {\n    ImmutableSet<Label> resolvedToolchains=toolchainContext.resolvedToolchainLabels();\n    Label dummyToochain=attributes.get(ANDROID_SDK_DUMMY_TOOLCHAIN_ATTRIBUTE_NAME,depType);\n    for (    Label toolchain : resolvedToolchains) {\n      if (dummyToochain.equals(toolchain)) {\n        ruleContext.ruleError(String.format(\"'%s' rule '%s' requested sdk toolchain resolution via\" + \" --incompatible_enable_android_toolchain_resolution but hasn't set an\" + \" appropriate --platforms value: --platforms=%s\",ruleContext.getRuleClassNameForLogging(),ruleContext.getLabel(),configuration.getFragment(PlatformConfiguration.class).getTargetPlatform()));\n        return null;\n      }\n    }\n  }\n  ToolchainInfo info=toolchainContext.forToolchainType(toolchainType);\n  if (info == null) {\n    ruleContext.ruleError(String.format(\"'%s' rule '%s' requested sdk toolchain resolution via\" + \" --incompatible_enable_android_toolchain_resolution but doesn't have a\" + \" toolchain for '%s'.\",ruleContext.getRuleClassNameForLogging(),ruleContext.getLabel(),toolchainType));\n    return null;\n  }\n  try {\n    return (AndroidSdkProvider)info.getValue(\"android_sdk_info\");\n  }\n catch (  EvalException e) {\n    ruleContext.ruleError(String.format(\"Android SDK toolchain for %s didn't have an 'android_sdk_info' provider: %s\",ruleContext.getLabel(),e.getMessage()));\n    return null;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 254,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3823,
        "startLineNumber" : 125,
        "startColumnNumber" : 76,
        "endLineNumber" : 201,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  BuildConfigurationValue configuration=ruleContext.getConfiguration();\n  if (configuration != null && configuration.hasFragment(AndroidConfiguration.class) && configuration.getFragment(AndroidConfiguration.class).incompatibleUseToolchainResolution()) {\n    AttributeMap attributes=ruleContext.attributes();\n    if (ruleContext.getToolchainContext() == null) {\n      ruleContext.ruleError(String.format(\"'%s' rule '%s' requested sdk toolchain resolution via\" + \" --incompatible_enable_android_toolchain_resolution but doesn't use\" + \" toolchain resolution.\",ruleContext.getRuleClassNameForLogging(),ruleContext.getLabel()));\n      return null;\n    }\n    Type<Label> depType=ruleContext.getRule().getRuleClassObject().isStarlark() ? BuildType.LABEL : BuildType.NODEP_LABEL;\n    Label toolchainType=attributes.get(ANDROID_SDK_TOOLCHAIN_TYPE_ATTRIBUTE_NAME,depType);\n    if (toolchainType == null) {\n      ruleContext.ruleError(String.format(\"'%s' rule '%s' requested sdk toolchain resolution via\" + \" --incompatible_enable_android_toolchain_resolution but doesn't have\" + \" toolchain type attribute '%s'.\",ruleContext.getRuleClassNameForLogging(),ruleContext.getLabel(),ANDROID_SDK_TOOLCHAIN_TYPE_ATTRIBUTE_NAME));\n      return null;\n    }\n    ResolvedToolchainContext toolchainContext=ruleContext.getToolchainContext();\n    if (attributes.has(ANDROID_SDK_DUMMY_TOOLCHAIN_ATTRIBUTE_NAME,depType)) {\n      ImmutableSet<Label> resolvedToolchains=toolchainContext.resolvedToolchainLabels();\n      Label dummyToochain=attributes.get(ANDROID_SDK_DUMMY_TOOLCHAIN_ATTRIBUTE_NAME,depType);\n      for (      Label toolchain : resolvedToolchains) {\n        if (dummyToochain.equals(toolchain)) {\n          ruleContext.ruleError(String.format(\"'%s' rule '%s' requested sdk toolchain resolution via\" + \" --incompatible_enable_android_toolchain_resolution but hasn't set an\" + \" appropriate --platforms value: --platforms=%s\",ruleContext.getRuleClassNameForLogging(),ruleContext.getLabel(),configuration.getFragment(PlatformConfiguration.class).getTargetPlatform()));\n          return null;\n        }\n      }\n    }\n    ToolchainInfo info=toolchainContext.forToolchainType(toolchainType);\n    if (info == null) {\n      ruleContext.ruleError(String.format(\"'%s' rule '%s' requested sdk toolchain resolution via\" + \" --incompatible_enable_android_toolchain_resolution but doesn't have a\" + \" toolchain for '%s'.\",ruleContext.getRuleClassNameForLogging(),ruleContext.getLabel(),toolchainType));\n      return null;\n    }\n    try {\n      return (AndroidSdkProvider)info.getValue(\"android_sdk_info\");\n    }\n catch (    EvalException e) {\n      ruleContext.ruleError(String.format(\"Android SDK toolchain for %s didn't have an 'android_sdk_info' provider: %s\",ruleContext.getLabel(),e.getMessage()));\n      return null;\n    }\n  }\n  return ruleContext.getPrerequisite(\":android_sdk\",AndroidSdkProvider.PROVIDER);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 271,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4176,
        "startLineNumber" : 118,
        "startColumnNumber" : 2,
        "endLineNumber" : 201,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Returns the Android SDK associated with the rule being analyzed or null if the Android SDK is not specified. <p>First tries to read from toolchains if --incompatible_enable_android_toolchain_resolution=true, else, uses the legacy attribute..\n */\npublic static AndroidSdkProvider fromRuleContext(RuleContext ruleContext){\n  BuildConfigurationValue configuration=ruleContext.getConfiguration();\n  if (configuration != null && configuration.hasFragment(AndroidConfiguration.class) && configuration.getFragment(AndroidConfiguration.class).incompatibleUseToolchainResolution()) {\n    AttributeMap attributes=ruleContext.attributes();\n    if (ruleContext.getToolchainContext() == null) {\n      ruleContext.ruleError(String.format(\"'%s' rule '%s' requested sdk toolchain resolution via\" + \" --incompatible_enable_android_toolchain_resolution but doesn't use\" + \" toolchain resolution.\",ruleContext.getRuleClassNameForLogging(),ruleContext.getLabel()));\n      return null;\n    }\n    Type<Label> depType=ruleContext.getRule().getRuleClassObject().isStarlark() ? BuildType.LABEL : BuildType.NODEP_LABEL;\n    Label toolchainType=attributes.get(ANDROID_SDK_TOOLCHAIN_TYPE_ATTRIBUTE_NAME,depType);\n    if (toolchainType == null) {\n      ruleContext.ruleError(String.format(\"'%s' rule '%s' requested sdk toolchain resolution via\" + \" --incompatible_enable_android_toolchain_resolution but doesn't have\" + \" toolchain type attribute '%s'.\",ruleContext.getRuleClassNameForLogging(),ruleContext.getLabel(),ANDROID_SDK_TOOLCHAIN_TYPE_ATTRIBUTE_NAME));\n      return null;\n    }\n    ResolvedToolchainContext toolchainContext=ruleContext.getToolchainContext();\n    if (attributes.has(ANDROID_SDK_DUMMY_TOOLCHAIN_ATTRIBUTE_NAME,depType)) {\n      ImmutableSet<Label> resolvedToolchains=toolchainContext.resolvedToolchainLabels();\n      Label dummyToochain=attributes.get(ANDROID_SDK_DUMMY_TOOLCHAIN_ATTRIBUTE_NAME,depType);\n      for (      Label toolchain : resolvedToolchains) {\n        if (dummyToochain.equals(toolchain)) {\n          ruleContext.ruleError(String.format(\"'%s' rule '%s' requested sdk toolchain resolution via\" + \" --incompatible_enable_android_toolchain_resolution but hasn't set an\" + \" appropriate --platforms value: --platforms=%s\",ruleContext.getRuleClassNameForLogging(),ruleContext.getLabel(),configuration.getFragment(PlatformConfiguration.class).getTargetPlatform()));\n          return null;\n        }\n      }\n    }\n    ToolchainInfo info=toolchainContext.forToolchainType(toolchainType);\n    if (info == null) {\n      ruleContext.ruleError(String.format(\"'%s' rule '%s' requested sdk toolchain resolution via\" + \" --incompatible_enable_android_toolchain_resolution but doesn't have a\" + \" toolchain for '%s'.\",ruleContext.getRuleClassNameForLogging(),ruleContext.getLabel(),toolchainType));\n      return null;\n    }\n    try {\n      return (AndroidSdkProvider)info.getValue(\"android_sdk_info\");\n    }\n catch (    EvalException e) {\n      ruleContext.ruleError(String.format(\"Android SDK toolchain for %s didn't have an 'android_sdk_info' provider: %s\",ruleContext.getLabel(),e.getMessage()));\n      return null;\n    }\n  }\n  return ruleContext.getPrerequisite(\":android_sdk\",AndroidSdkProvider.PROVIDER);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 282,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 161,
        "startColumnNumber" : 8,
        "endLineNumber" : 161,
        "endColumnNumber" : 98
      },
      "nodeContext" : "Label dummyToochain=attributes.get(ANDROID_SDK_DUMMY_TOOLCHAIN_ATTRIBUTE_NAME,depType);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.devtools.build.lib.packages.AttributeMap"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 146,
    "startColumnNumber" : 28,
    "endLineNumber" : 146,
    "endColumnNumber" : 38
  }, {
    "charLength" : 10,
    "startLineNumber" : 159,
    "startColumnNumber" : 10,
    "endLineNumber" : 159,
    "endColumnNumber" : 20
  }, {
    "charLength" : 10,
    "startLineNumber" : 161,
    "startColumnNumber" : 30,
    "endLineNumber" : 161,
    "endColumnNumber" : 40
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  } ]
}