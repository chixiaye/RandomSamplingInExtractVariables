{
  "id" : 304,
  "expression" : "\"34a\"",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/tool-testsuite/test/org/antlr/v4/test/tool/TestATNParserPrediction.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"34a\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 359,
      "startColumnNumber" : 37,
      "endLineNumber" : 359,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 359,
        "startColumnNumber" : 2,
        "endLineNumber" : 359,
        "endColumnNumber" : 46
      },
      "nodeContext" : "checkPredictedAlt(lg,g,decision,\"34a\",1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 359,
        "startColumnNumber" : 2,
        "endLineNumber" : 359,
        "endColumnNumber" : 47
      },
      "nodeContext" : "checkPredictedAlt(lg,g,decision,\"34a\",1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1392,
        "startLineNumber" : 341,
        "startColumnNumber" : 76,
        "endLineNumber" : 402,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  LexerGrammar lg=new LexerGrammar(\"lexer grammar L;\\n\" + \"A : 'a' ;\\n\" + \"B : 'b' ;\\n\"+ \"C : 'c' ;\\n\"+ \"LP : '(' ;\\n\"+ \"RP : ')' ;\\n\"+ \"INT : '0'..'9'+ ;\\n\");\n  Grammar g=new Grammar(\"parser grammar T;\\n\" + \"tokens {A,B,C,LP,RP,INT}\\n\" + \"a : e A | e A B ;\\n\"+ \"e : LP e RP\\n\"+ \"  | INT\\n\"+ \"  ;\");\n  int decision=0;\n  checkPredictedAlt(lg,g,decision,\"34a\",1);\n  checkPredictedAlt(lg,g,decision,\"34ab\",2);\n  checkPredictedAlt(lg,g,decision,\"((34))a\",1);\n  checkPredictedAlt(lg,g,decision,\"((34))ab\",2);\n  String[] inputs={\"34a\",\"34ab\",\"((34))a\",\"((34))ab\"};\n  String[] dfa={\"s0-INT->s1\\n\" + \"s1-'a'->s2\\n\" + \"s2-EOF->:s3=>1\\n\",\"s0-INT->s1\\n\" + \"s1-'a'->s2\\n\" + \"s2-EOF->:s3=>1\\n\"+ \"s2-'b'->:s4=>2\\n\",\"s0-'('->s5\\n\" + \"s0-INT->s1\\n\" + \"s1-'a'->s2\\n\"+ \"s2-EOF->:s3=>1\\n\"+ \"s2-'b'->:s4=>2\\n\"+ \"s5-'('->s6\\n\"+ \"s6-INT->s7\\n\"+ \"s7-')'->s8\\n\"+ \"s8-')'->s1\\n\",\"s0-'('->s5\\n\" + \"s0-INT->s1\\n\" + \"s1-'a'->s2\\n\"+ \"s2-EOF->:s3=>1\\n\"+ \"s2-'b'->:s4=>2\\n\"+ \"s5-'('->s6\\n\"+ \"s6-INT->s7\\n\"+ \"s7-')'->s8\\n\"+ \"s8-')'->s1\\n\"};\n  checkDFAConstruction(lg,g,decision,inputs,dfa);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 126,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1467,
        "startLineNumber" : 341,
        "startColumnNumber" : 1,
        "endLineNumber" : 402,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testRecursiveLeftPrefixWithAorABIssue() throws Exception {\n  LexerGrammar lg=new LexerGrammar(\"lexer grammar L;\\n\" + \"A : 'a' ;\\n\" + \"B : 'b' ;\\n\"+ \"C : 'c' ;\\n\"+ \"LP : '(' ;\\n\"+ \"RP : ')' ;\\n\"+ \"INT : '0'..'9'+ ;\\n\");\n  Grammar g=new Grammar(\"parser grammar T;\\n\" + \"tokens {A,B,C,LP,RP,INT}\\n\" + \"a : e A | e A B ;\\n\"+ \"e : LP e RP\\n\"+ \"  | INT\\n\"+ \"  ;\");\n  int decision=0;\n  checkPredictedAlt(lg,g,decision,\"34a\",1);\n  checkPredictedAlt(lg,g,decision,\"34ab\",2);\n  checkPredictedAlt(lg,g,decision,\"((34))a\",1);\n  checkPredictedAlt(lg,g,decision,\"((34))ab\",2);\n  String[] inputs={\"34a\",\"34ab\",\"((34))a\",\"((34))ab\"};\n  String[] dfa={\"s0-INT->s1\\n\" + \"s1-'a'->s2\\n\" + \"s2-EOF->:s3=>1\\n\",\"s0-INT->s1\\n\" + \"s1-'a'->s2\\n\" + \"s2-EOF->:s3=>1\\n\"+ \"s2-'b'->:s4=>2\\n\",\"s0-'('->s5\\n\" + \"s0-INT->s1\\n\" + \"s1-'a'->s2\\n\"+ \"s2-EOF->:s3=>1\\n\"+ \"s2-'b'->:s4=>2\\n\"+ \"s5-'('->s6\\n\"+ \"s6-INT->s7\\n\"+ \"s7-')'->s8\\n\"+ \"s8-')'->s1\\n\",\"s0-'('->s5\\n\" + \"s0-INT->s1\\n\" + \"s1-'a'->s2\\n\"+ \"s2-EOF->:s3=>1\\n\"+ \"s2-'b'->:s4=>2\\n\"+ \"s5-'('->s6\\n\"+ \"s6-INT->s7\\n\"+ \"s7-')'->s8\\n\"+ \"s8-')'->s1\\n\"};\n  checkDFAConstruction(lg,g,decision,inputs,dfa);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 134,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 359,
        "startColumnNumber" : 2,
        "endLineNumber" : 359,
        "endColumnNumber" : 47
      },
      "nodeContext" : "checkPredictedAlt(lg,g,decision,\"34a\",1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"34a\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 366,
      "startColumnNumber" : 2,
      "endLineNumber" : 366,
      "endColumnNumber" : 7
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 365,
        "startColumnNumber" : 20,
        "endLineNumber" : 370,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\"34a\",\"34ab\",\"((34))a\",\"((34))ab\"}",
      "nodeType" : "ArrayInitializer",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 365,
        "startColumnNumber" : 11,
        "endLineNumber" : 370,
        "endColumnNumber" : 3
      },
      "nodeContext" : "inputs={\"34a\",\"34ab\",\"((34))a\",\"((34))ab\"}",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 365,
        "startColumnNumber" : 2,
        "endLineNumber" : 370,
        "endColumnNumber" : 4
      },
      "nodeContext" : "String[] inputs={\"34a\",\"34ab\",\"((34))a\",\"((34))ab\"};\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1392,
        "startLineNumber" : 341,
        "startColumnNumber" : 76,
        "endLineNumber" : 402,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  LexerGrammar lg=new LexerGrammar(\"lexer grammar L;\\n\" + \"A : 'a' ;\\n\" + \"B : 'b' ;\\n\"+ \"C : 'c' ;\\n\"+ \"LP : '(' ;\\n\"+ \"RP : ')' ;\\n\"+ \"INT : '0'..'9'+ ;\\n\");\n  Grammar g=new Grammar(\"parser grammar T;\\n\" + \"tokens {A,B,C,LP,RP,INT}\\n\" + \"a : e A | e A B ;\\n\"+ \"e : LP e RP\\n\"+ \"  | INT\\n\"+ \"  ;\");\n  int decision=0;\n  checkPredictedAlt(lg,g,decision,\"34a\",1);\n  checkPredictedAlt(lg,g,decision,\"34ab\",2);\n  checkPredictedAlt(lg,g,decision,\"((34))a\",1);\n  checkPredictedAlt(lg,g,decision,\"((34))ab\",2);\n  String[] inputs={\"34a\",\"34ab\",\"((34))a\",\"((34))ab\"};\n  String[] dfa={\"s0-INT->s1\\n\" + \"s1-'a'->s2\\n\" + \"s2-EOF->:s3=>1\\n\",\"s0-INT->s1\\n\" + \"s1-'a'->s2\\n\" + \"s2-EOF->:s3=>1\\n\"+ \"s2-'b'->:s4=>2\\n\",\"s0-'('->s5\\n\" + \"s0-INT->s1\\n\" + \"s1-'a'->s2\\n\"+ \"s2-EOF->:s3=>1\\n\"+ \"s2-'b'->:s4=>2\\n\"+ \"s5-'('->s6\\n\"+ \"s6-INT->s7\\n\"+ \"s7-')'->s8\\n\"+ \"s8-')'->s1\\n\",\"s0-'('->s5\\n\" + \"s0-INT->s1\\n\" + \"s1-'a'->s2\\n\"+ \"s2-EOF->:s3=>1\\n\"+ \"s2-'b'->:s4=>2\\n\"+ \"s5-'('->s6\\n\"+ \"s6-INT->s7\\n\"+ \"s7-')'->s8\\n\"+ \"s8-')'->s1\\n\"};\n  checkDFAConstruction(lg,g,decision,inputs,dfa);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 126,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1467,
        "startLineNumber" : 341,
        "startColumnNumber" : 1,
        "endLineNumber" : 402,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testRecursiveLeftPrefixWithAorABIssue() throws Exception {\n  LexerGrammar lg=new LexerGrammar(\"lexer grammar L;\\n\" + \"A : 'a' ;\\n\" + \"B : 'b' ;\\n\"+ \"C : 'c' ;\\n\"+ \"LP : '(' ;\\n\"+ \"RP : ')' ;\\n\"+ \"INT : '0'..'9'+ ;\\n\");\n  Grammar g=new Grammar(\"parser grammar T;\\n\" + \"tokens {A,B,C,LP,RP,INT}\\n\" + \"a : e A | e A B ;\\n\"+ \"e : LP e RP\\n\"+ \"  | INT\\n\"+ \"  ;\");\n  int decision=0;\n  checkPredictedAlt(lg,g,decision,\"34a\",1);\n  checkPredictedAlt(lg,g,decision,\"34ab\",2);\n  checkPredictedAlt(lg,g,decision,\"((34))a\",1);\n  checkPredictedAlt(lg,g,decision,\"((34))ab\",2);\n  String[] inputs={\"34a\",\"34ab\",\"((34))a\",\"((34))ab\"};\n  String[] dfa={\"s0-INT->s1\\n\" + \"s1-'a'->s2\\n\" + \"s2-EOF->:s3=>1\\n\",\"s0-INT->s1\\n\" + \"s1-'a'->s2\\n\" + \"s2-EOF->:s3=>1\\n\"+ \"s2-'b'->:s4=>2\\n\",\"s0-'('->s5\\n\" + \"s0-INT->s1\\n\" + \"s1-'a'->s2\\n\"+ \"s2-EOF->:s3=>1\\n\"+ \"s2-'b'->:s4=>2\\n\"+ \"s5-'('->s6\\n\"+ \"s6-INT->s7\\n\"+ \"s7-')'->s8\\n\"+ \"s8-')'->s1\\n\",\"s0-'('->s5\\n\" + \"s0-INT->s1\\n\" + \"s1-'a'->s2\\n\"+ \"s2-EOF->:s3=>1\\n\"+ \"s2-'b'->:s4=>2\\n\"+ \"s5-'('->s6\\n\"+ \"s6-INT->s7\\n\"+ \"s7-')'->s8\\n\"+ \"s8-')'->s1\\n\"};\n  checkDFAConstruction(lg,g,decision,inputs,dfa);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 134,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 365,
        "startColumnNumber" : 20,
        "endLineNumber" : 370,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\"34a\",\"34ab\",\"((34))a\",\"((34))ab\"}",
      "nodeType" : "ArrayInitializer",
      "astNodeNumber" : 5,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 359,
    "startColumnNumber" : 37,
    "endLineNumber" : 359,
    "endColumnNumber" : 42
  }, {
    "charLength" : 5,
    "startLineNumber" : 366,
    "startColumnNumber" : 2,
    "endLineNumber" : 366,
    "endColumnNumber" : 7
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}