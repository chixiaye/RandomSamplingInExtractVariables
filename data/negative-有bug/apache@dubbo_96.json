{
  "id" : 96,
  "expression" : "parameter",
  "projectName" : "apache@dubbo",
  "commitID" : "4ea0a09846fa74b7b1a6a1a548f31859a2cddcc8",
  "filePath" : "/dubbo-metadata/dubbo-metadata-processor/src/main/java/org/apache/dubbo/metadata/annotation/processing/rest/DefaultServiceRestMetadataResolver.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "parameter",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 101,
      "startColumnNumber" : 39,
      "endLineNumber" : 101,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 101,
        "startColumnNumber" : 39,
        "endLineNumber" : 101,
        "endColumnNumber" : 57
      },
      "nodeContext" : "parameter.asType()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 101,
        "startColumnNumber" : 23,
        "endLineNumber" : 101,
        "endColumnNumber" : 57
      },
      "nodeContext" : "parameterType=parameter.asType()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 101,
        "startColumnNumber" : 12,
        "endLineNumber" : 101,
        "endColumnNumber" : 58
      },
      "nodeContext" : "TypeMirror parameterType=parameter.asType();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1040,
        "startLineNumber" : 99,
        "startColumnNumber" : 52,
        "endLineNumber" : 116,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  VariableElement parameter=parameters.get(i);\n  TypeMirror parameterType=parameter.asType();\n  if (isComplexType(parameterType)) {\n    if (addComplexParameterType(method)) {\n      continue;\n    }\n else {\n      warn(\"The method[%s] contains more than one complex parameter type, \" + \"thus it will not be chosen as the REST service\",method.toString());\n    }\n  }\n  String parameterName=parameter.getSimpleName().toString();\n  String pathVariableName=isEnabledParametersCompilerOption(parameterName) ? parameterName : valueOf(i);\n  requestPathBuilder.append(PATH_SEPARATOR).append(\"{\").append(pathVariableName).append(\"}\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 76,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1084,
        "startLineNumber" : 99,
        "startColumnNumber" : 8,
        "endLineNumber" : 116,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < parameters.size(); i++) {\n  VariableElement parameter=parameters.get(i);\n  TypeMirror parameterType=parameter.asType();\n  if (isComplexType(parameterType)) {\n    if (addComplexParameterType(method)) {\n      continue;\n    }\n else {\n      warn(\"The method[%s] contains more than one complex parameter type, \" + \"thus it will not be chosen as the REST service\",method.toString());\n    }\n  }\n  String parameterName=parameter.getSimpleName().toString();\n  String pathVariableName=isEnabledParametersCompilerOption(parameterName) ? parameterName : valueOf(i);\n  requestPathBuilder.append(PATH_SEPARATOR).append(\"{\").append(pathVariableName).append(\"}\");\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 89,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1887,
        "startLineNumber" : 81,
        "startColumnNumber" : 66,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  AnnotationMirror serviceAnnotation=getAnnotation(serviceType);\n  String serviceInterfaceName=resolveServiceInterfaceName(serviceType,serviceAnnotation);\n  TypeMirror serviceInterface=findInterface(serviceType.asType(),serviceInterfaceName);\n  StringBuilder requestPathBuilder=new StringBuilder();\n  String rootPath=buildRootPath(serviceInterface);\n  String subPath=buildSubPath(method);\n  requestPathBuilder.append(rootPath).append(subPath);\n  List<? extends VariableElement> parameters=method.getParameters();\n  for (int i=0; i < parameters.size(); i++) {\n    VariableElement parameter=parameters.get(i);\n    TypeMirror parameterType=parameter.asType();\n    if (isComplexType(parameterType)) {\n      if (addComplexParameterType(method)) {\n        continue;\n      }\n else {\n        warn(\"The method[%s] contains more than one complex parameter type, \" + \"thus it will not be chosen as the REST service\",method.toString());\n      }\n    }\n    String parameterName=parameter.getSimpleName().toString();\n    String pathVariableName=isEnabledParametersCompilerOption(parameterName) ? parameterName : valueOf(i);\n    requestPathBuilder.append(PATH_SEPARATOR).append(\"{\").append(pathVariableName).append(\"}\");\n  }\n  return requestPathBuilder.toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 166,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2065,
        "startLineNumber" : 79,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override protected String resolveRequestPath(ProcessingEnvironment processingEnv,TypeElement serviceType,ExecutableElement method){\n  AnnotationMirror serviceAnnotation=getAnnotation(serviceType);\n  String serviceInterfaceName=resolveServiceInterfaceName(serviceType,serviceAnnotation);\n  TypeMirror serviceInterface=findInterface(serviceType.asType(),serviceInterfaceName);\n  StringBuilder requestPathBuilder=new StringBuilder();\n  String rootPath=buildRootPath(serviceInterface);\n  String subPath=buildSubPath(method);\n  requestPathBuilder.append(rootPath).append(subPath);\n  List<? extends VariableElement> parameters=method.getParameters();\n  for (int i=0; i < parameters.size(); i++) {\n    VariableElement parameter=parameters.get(i);\n    TypeMirror parameterType=parameter.asType();\n    if (isComplexType(parameterType)) {\n      if (addComplexParameterType(method)) {\n        continue;\n      }\n else {\n        warn(\"The method[%s] contains more than one complex parameter type, \" + \"thus it will not be chosen as the REST service\",method.toString());\n      }\n    }\n    String parameterName=parameter.getSimpleName().toString();\n    String pathVariableName=isEnabledParametersCompilerOption(parameterName) ? parameterName : valueOf(i);\n    requestPathBuilder.append(PATH_SEPARATOR).append(\"{\").append(pathVariableName).append(\"}\");\n  }\n  return requestPathBuilder.toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 185,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 101,
        "startColumnNumber" : 12,
        "endLineNumber" : 101,
        "endColumnNumber" : 58
      },
      "nodeContext" : "TypeMirror parameterType=parameter.asType();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "javax.lang.model.element.VariableElement"
  }, {
    "nodeContext" : "parameter",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 111,
      "startColumnNumber" : 35,
      "endLineNumber" : 111,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 111,
        "startColumnNumber" : 35,
        "endLineNumber" : 111,
        "endColumnNumber" : 60
      },
      "nodeContext" : "parameter.getSimpleName()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 111,
        "startColumnNumber" : 35,
        "endLineNumber" : 111,
        "endColumnNumber" : 71
      },
      "nodeContext" : "parameter.getSimpleName().toString()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 111,
        "startColumnNumber" : 19,
        "endLineNumber" : 111,
        "endColumnNumber" : 71
      },
      "nodeContext" : "parameterName=parameter.getSimpleName().toString()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 111,
        "startColumnNumber" : 12,
        "endLineNumber" : 111,
        "endColumnNumber" : 72
      },
      "nodeContext" : "String parameterName=parameter.getSimpleName().toString();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1040,
        "startLineNumber" : 99,
        "startColumnNumber" : 52,
        "endLineNumber" : 116,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  VariableElement parameter=parameters.get(i);\n  TypeMirror parameterType=parameter.asType();\n  if (isComplexType(parameterType)) {\n    if (addComplexParameterType(method)) {\n      continue;\n    }\n else {\n      warn(\"The method[%s] contains more than one complex parameter type, \" + \"thus it will not be chosen as the REST service\",method.toString());\n    }\n  }\n  String parameterName=parameter.getSimpleName().toString();\n  String pathVariableName=isEnabledParametersCompilerOption(parameterName) ? parameterName : valueOf(i);\n  requestPathBuilder.append(PATH_SEPARATOR).append(\"{\").append(pathVariableName).append(\"}\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 76,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1084,
        "startLineNumber" : 99,
        "startColumnNumber" : 8,
        "endLineNumber" : 116,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < parameters.size(); i++) {\n  VariableElement parameter=parameters.get(i);\n  TypeMirror parameterType=parameter.asType();\n  if (isComplexType(parameterType)) {\n    if (addComplexParameterType(method)) {\n      continue;\n    }\n else {\n      warn(\"The method[%s] contains more than one complex parameter type, \" + \"thus it will not be chosen as the REST service\",method.toString());\n    }\n  }\n  String parameterName=parameter.getSimpleName().toString();\n  String pathVariableName=isEnabledParametersCompilerOption(parameterName) ? parameterName : valueOf(i);\n  requestPathBuilder.append(PATH_SEPARATOR).append(\"{\").append(pathVariableName).append(\"}\");\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 89,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1887,
        "startLineNumber" : 81,
        "startColumnNumber" : 66,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  AnnotationMirror serviceAnnotation=getAnnotation(serviceType);\n  String serviceInterfaceName=resolveServiceInterfaceName(serviceType,serviceAnnotation);\n  TypeMirror serviceInterface=findInterface(serviceType.asType(),serviceInterfaceName);\n  StringBuilder requestPathBuilder=new StringBuilder();\n  String rootPath=buildRootPath(serviceInterface);\n  String subPath=buildSubPath(method);\n  requestPathBuilder.append(rootPath).append(subPath);\n  List<? extends VariableElement> parameters=method.getParameters();\n  for (int i=0; i < parameters.size(); i++) {\n    VariableElement parameter=parameters.get(i);\n    TypeMirror parameterType=parameter.asType();\n    if (isComplexType(parameterType)) {\n      if (addComplexParameterType(method)) {\n        continue;\n      }\n else {\n        warn(\"The method[%s] contains more than one complex parameter type, \" + \"thus it will not be chosen as the REST service\",method.toString());\n      }\n    }\n    String parameterName=parameter.getSimpleName().toString();\n    String pathVariableName=isEnabledParametersCompilerOption(parameterName) ? parameterName : valueOf(i);\n    requestPathBuilder.append(PATH_SEPARATOR).append(\"{\").append(pathVariableName).append(\"}\");\n  }\n  return requestPathBuilder.toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 166,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2065,
        "startLineNumber" : 79,
        "startColumnNumber" : 4,
        "endLineNumber" : 119,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override protected String resolveRequestPath(ProcessingEnvironment processingEnv,TypeElement serviceType,ExecutableElement method){\n  AnnotationMirror serviceAnnotation=getAnnotation(serviceType);\n  String serviceInterfaceName=resolveServiceInterfaceName(serviceType,serviceAnnotation);\n  TypeMirror serviceInterface=findInterface(serviceType.asType(),serviceInterfaceName);\n  StringBuilder requestPathBuilder=new StringBuilder();\n  String rootPath=buildRootPath(serviceInterface);\n  String subPath=buildSubPath(method);\n  requestPathBuilder.append(rootPath).append(subPath);\n  List<? extends VariableElement> parameters=method.getParameters();\n  for (int i=0; i < parameters.size(); i++) {\n    VariableElement parameter=parameters.get(i);\n    TypeMirror parameterType=parameter.asType();\n    if (isComplexType(parameterType)) {\n      if (addComplexParameterType(method)) {\n        continue;\n      }\n else {\n        warn(\"The method[%s] contains more than one complex parameter type, \" + \"thus it will not be chosen as the REST service\",method.toString());\n      }\n    }\n    String parameterName=parameter.getSimpleName().toString();\n    String pathVariableName=isEnabledParametersCompilerOption(parameterName) ? parameterName : valueOf(i);\n    requestPathBuilder.append(PATH_SEPARATOR).append(\"{\").append(pathVariableName).append(\"}\");\n  }\n  return requestPathBuilder.toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 185,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 111,
        "startColumnNumber" : 12,
        "endLineNumber" : 111,
        "endColumnNumber" : 72
      },
      "nodeContext" : "String parameterName=parameter.getSimpleName().toString();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "javax.lang.model.element.VariableElement"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 101,
    "startColumnNumber" : 39,
    "endLineNumber" : 101,
    "endColumnNumber" : 48
  }, {
    "charLength" : 9,
    "startLineNumber" : 111,
    "startColumnNumber" : 35,
    "endLineNumber" : 111,
    "endColumnNumber" : 44
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}