{
  "id" : 184,
  "expression" : "schema.getTable(className).getCheckedRow(objKey)",
  "projectName" : "realm@realm-java",
  "commitID" : "9da3b229a46407f73e2003fb40857cadf062086b",
  "filePath" : "/realm/realm-library/src/main/java/io/realm/BaseRealm.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "schema.getTable(className).getCheckedRow(objKey)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 48,
      "startLineNumber" : 594,
      "startColumnNumber" : 29,
      "endLineNumber" : 594,
      "endColumnNumber" : 77
    },
    "astNodeNumber" : 7,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 594,
        "startColumnNumber" : 12,
        "endLineNumber" : 594,
        "endColumnNumber" : 77
      },
      "nodeContext" : "embeddedObject=schema.getTable(className).getCheckedRow(objKey)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 594,
        "startColumnNumber" : 12,
        "endLineNumber" : 594,
        "endColumnNumber" : 78
      },
      "nodeContext" : "embeddedObject=schema.getTable(className).getCheckedRow(objKey);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 184,
        "startLineNumber" : 592,
        "startColumnNumber" : 42,
        "endLineNumber" : 595,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  long objKey=row.createEmbeddedObject(parentPropertyColKey,parentPropertyType);\n  embeddedObject=schema.getTable(className).getCheckedRow(objKey);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 443,
        "startLineNumber" : 592,
        "startColumnNumber" : 8,
        "endLineNumber" : 597,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (linkedType.equals(className)) {\n  long objKey=row.createEmbeddedObject(parentPropertyColKey,parentPropertyType);\n  embeddedObject=schema.getTable(className).getCheckedRow(objKey);\n}\n else {\n  throw new IllegalArgumentException(String.format(\"Parent type %s expects that property '%s' be of type %s but was %s.\",parentObjectSchema.getClassName(),parentProperty,linkedType,className));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 40,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1333,
        "startLineNumber" : 579,
        "startColumnNumber" : 73,
        "endLineNumber" : 600,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final long parentPropertyColKey=parentObjectSchema.getColumnKey(parentProperty);\n  final RealmFieldType parentPropertyType=parentObjectSchema.getFieldType(parentProperty);\n  final Row row=parentProxy.realmGet$proxyState().getRow$realm();\n  final RealmFieldType fieldType=parentObjectSchema.getFieldType(parentProperty);\n  boolean propertyAcceptable=parentObjectSchema.isPropertyAcceptableForEmbeddedObject(fieldType);\n  if (!propertyAcceptable) {\n    throw new IllegalArgumentException(String.format(\"Field '%s' does not contain a valid link\",parentProperty));\n  }\n  final String linkedType=parentObjectSchema.getPropertyClassName(parentProperty);\n  Row embeddedObject;\n  if (linkedType.equals(className)) {\n    long objKey=row.createEmbeddedObject(parentPropertyColKey,parentPropertyType);\n    embeddedObject=schema.getTable(className).getCheckedRow(objKey);\n  }\n else {\n    throw new IllegalArgumentException(String.format(\"Parent type %s expects that property '%s' be of type %s but was %s.\",parentObjectSchema.getClassName(),parentProperty,linkedType,className));\n  }\n  return embeddedObject;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 119,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2321,
        "startLineNumber" : 564,
        "startColumnNumber" : 4,
        "endLineNumber" : 600,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Creates a row representing an embedded object - for internal use only.\n * @param className the class name of the object to create.\n * @param parentProxy The parent object which should hold a reference to the embedded object.\n * @param parentProperty the property in the parent class which holds the reference.\n * @param schema the Realm schema from which to obtain table information.\n * @param parentObjectSchema the parent object schema from which to obtain property information.\n * @return the row representing the newly created embedded object.\n * @throws IllegalArgumentException if any embedded object invariants are broken.\n */\nRow getEmbeddedObjectRow(final String className,final RealmObjectProxy parentProxy,final String parentProperty,final RealmSchema schema,final RealmObjectSchema parentObjectSchema){\n  final long parentPropertyColKey=parentObjectSchema.getColumnKey(parentProperty);\n  final RealmFieldType parentPropertyType=parentObjectSchema.getFieldType(parentProperty);\n  final Row row=parentProxy.realmGet$proxyState().getRow$realm();\n  final RealmFieldType fieldType=parentObjectSchema.getFieldType(parentProperty);\n  boolean propertyAcceptable=parentObjectSchema.isPropertyAcceptableForEmbeddedObject(fieldType);\n  if (!propertyAcceptable) {\n    throw new IllegalArgumentException(String.format(\"Field '%s' does not contain a valid link\",parentProperty));\n  }\n  final String linkedType=parentObjectSchema.getPropertyClassName(parentProperty);\n  Row embeddedObject;\n  if (linkedType.equals(className)) {\n    long objKey=row.createEmbeddedObject(parentPropertyColKey,parentPropertyType);\n    embeddedObject=schema.getTable(className).getCheckedRow(objKey);\n  }\n else {\n    throw new IllegalArgumentException(String.format(\"Parent type %s expects that property '%s' be of type %s but was %s.\",parentObjectSchema.getClassName(),parentProperty,linkedType,className));\n  }\n  return embeddedObject;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 149,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 594,
        "startColumnNumber" : 12,
        "endLineNumber" : 594,
        "endColumnNumber" : 78
      },
      "nodeContext" : "embeddedObject=schema.getTable(className).getCheckedRow(objKey);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 5,
    "type" : "io.realm.internal.CheckedRow"
  } ],
  "positionList" : [ {
    "charLength" : 48,
    "startLineNumber" : 594,
    "startColumnNumber" : 29,
    "endLineNumber" : 594,
    "endColumnNumber" : 77
  } ],
  "layoutRelationDataList" : [ ]
}