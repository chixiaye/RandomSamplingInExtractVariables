{
  "id" : 227,
  "expression" : "Double.isNaN(slope)",
  "projectName" : "google@guava",
  "commitID" : "68500b2c09fa6985eab2e41577e2992685b57f2b",
  "filePath" : "/android/guava/src/com/google/common/math/LinearTransformation.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Double.isNaN(slope)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 92,
      "startColumnNumber" : 21,
      "endLineNumber" : 92,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 92,
        "startColumnNumber" : 20,
        "endLineNumber" : 92,
        "endColumnNumber" : 40
      },
      "nodeContext" : "!Double.isNaN(slope)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 92,
        "startColumnNumber" : 6,
        "endLineNumber" : 92,
        "endColumnNumber" : 41
      },
      "nodeContext" : "checkArgument(!Double.isNaN(slope))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 92,
        "startColumnNumber" : 6,
        "endLineNumber" : 92,
        "endColumnNumber" : 42
      },
      "nodeContext" : "checkArgument(!Double.isNaN(slope));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 275,
        "startLineNumber" : 91,
        "startColumnNumber" : 56,
        "endLineNumber" : 99,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  checkArgument(!Double.isNaN(slope));\n  if (isFinite(slope)) {\n    double yIntercept=y1 - x1 * slope;\n    return new RegularLinearTransformation(slope,yIntercept);\n  }\n else {\n    return new VerticalLinearTransformation(x1);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 35,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 635,
        "startLineNumber" : 86,
        "startColumnNumber" : 4,
        "endLineNumber" : 99,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Finish building an instance with the given slope, i.e. the rate of change of  {@code y} withrespect to  {@code x}. The slope must not be  {@code NaN}. It may be infinite, in which case the transformation is vertical. (If it is zero, the transformation is horizontal.)\n */\npublic LinearTransformation withSlope(double slope){\n  checkArgument(!Double.isNaN(slope));\n  if (isFinite(slope)) {\n    double yIntercept=y1 - x1 * slope;\n    return new RegularLinearTransformation(slope,yIntercept);\n  }\n else {\n    return new VerticalLinearTransformation(x1);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 44,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 92,
        "startColumnNumber" : 6,
        "endLineNumber" : 92,
        "endColumnNumber" : 42
      },
      "nodeContext" : "checkArgument(!Double.isNaN(slope));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 92,
    "startColumnNumber" : 21,
    "endLineNumber" : 92,
    "endColumnNumber" : 40
  } ],
  "layoutRelationDataList" : [ ]
}