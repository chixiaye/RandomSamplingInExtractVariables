{
  "id" : 438,
  "expression" : "b.group(inboundChannel.executor()).channel(NioSocketChannel.class).option(ChannelOption.CONNECT_TIMEOUT_MILLIS,10000)",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/example/src/main/java/io/netty/example/socksproxy/SocksServerConnectHandler.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "b.group(inboundChannel.executor()).channel(NioSocketChannel.class).option(ChannelOption.CONNECT_TIMEOUT_MILLIS,10000)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 162,
      "startLineNumber" : 64,
      "startColumnNumber" : 12,
      "endLineNumber" : 66,
      "endColumnNumber" : 72
    },
    "astNodeNumber" : 17,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 225,
        "startLineNumber" : 64,
        "startColumnNumber" : 12,
        "endLineNumber" : 67,
        "endColumnNumber" : 61
      },
      "nodeContext" : "b.group(inboundChannel.executor()).channel(NioSocketChannel.class).option(ChannelOption.CONNECT_TIMEOUT_MILLIS,10000).option(ChannelOption.SO_KEEPALIVE,true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 289,
        "startLineNumber" : 64,
        "startColumnNumber" : 12,
        "endLineNumber" : 68,
        "endColumnNumber" : 62
      },
      "nodeContext" : "b.group(inboundChannel.executor()).channel(NioSocketChannel.class).option(ChannelOption.CONNECT_TIMEOUT_MILLIS,10000).option(ChannelOption.SO_KEEPALIVE,true).handler(new DirectClientHandler(promise))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 29,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 290,
        "startLineNumber" : 64,
        "startColumnNumber" : 12,
        "endLineNumber" : 68,
        "endColumnNumber" : 63
      },
      "nodeContext" : "b.group(inboundChannel.executor()).channel(NioSocketChannel.class).option(ChannelOption.CONNECT_TIMEOUT_MILLIS,10000).option(ChannelOption.SO_KEEPALIVE,true).handler(new DirectClientHandler(promise));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 30,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2059,
        "startLineNumber" : 42,
        "startColumnNumber" : 53,
        "endLineNumber" : 81,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final Socks4CommandRequest request=(Socks4CommandRequest)message;\n  Promise<Channel> promise=ctx.executor().newPromise();\n  promise.asFuture().addListener(future -> {\n    final Channel outboundChannel=future.getNow();\n    if (future.isSuccess()) {\n      Future<Void> responseFuture=ctx.channel().writeAndFlush(new DefaultSocks4CommandResponse(Socks4CommandStatus.SUCCESS));\n      responseFuture.addListener(fut -> {\n        ctx.pipeline().remove(this);\n        outboundChannel.pipeline().addLast(new RelayHandler(ctx.channel()));\n        ctx.pipeline().addLast(new RelayHandler(outboundChannel));\n      }\n);\n    }\n else {\n      ctx.channel().writeAndFlush(new DefaultSocks4CommandResponse(Socks4CommandStatus.REJECTED_OR_FAILED));\n      SocksServerUtils.closeOnFlush(ctx.channel());\n    }\n  }\n);\n  final Channel inboundChannel=ctx.channel();\n  b.group(inboundChannel.executor()).channel(NioSocketChannel.class).option(ChannelOption.CONNECT_TIMEOUT_MILLIS,10000).option(ChannelOption.SO_KEEPALIVE,true).handler(new DirectClientHandler(promise));\n  b.connect(request.dstAddr(),request.dstPort()).addListener(future -> {\n    if (future.isSuccess()) {\n    }\n else {\n      ctx.channel().writeAndFlush(new DefaultSocks4CommandResponse(Socks4CommandStatus.REJECTED_OR_FAILED));\n      SocksServerUtils.closeOnFlush(ctx.channel());\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4469,
        "startLineNumber" : 42,
        "startColumnNumber" : 8,
        "endLineNumber" : 125,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof Socks4CommandRequest) {\n  final Socks4CommandRequest request=(Socks4CommandRequest)message;\n  Promise<Channel> promise=ctx.executor().newPromise();\n  promise.asFuture().addListener(future -> {\n    final Channel outboundChannel=future.getNow();\n    if (future.isSuccess()) {\n      Future<Void> responseFuture=ctx.channel().writeAndFlush(new DefaultSocks4CommandResponse(Socks4CommandStatus.SUCCESS));\n      responseFuture.addListener(fut -> {\n        ctx.pipeline().remove(this);\n        outboundChannel.pipeline().addLast(new RelayHandler(ctx.channel()));\n        ctx.pipeline().addLast(new RelayHandler(outboundChannel));\n      }\n);\n    }\n else {\n      ctx.channel().writeAndFlush(new DefaultSocks4CommandResponse(Socks4CommandStatus.REJECTED_OR_FAILED));\n      SocksServerUtils.closeOnFlush(ctx.channel());\n    }\n  }\n);\n  final Channel inboundChannel=ctx.channel();\n  b.group(inboundChannel.executor()).channel(NioSocketChannel.class).option(ChannelOption.CONNECT_TIMEOUT_MILLIS,10000).option(ChannelOption.SO_KEEPALIVE,true).handler(new DirectClientHandler(promise));\n  b.connect(request.dstAddr(),request.dstPort()).addListener(future -> {\n    if (future.isSuccess()) {\n    }\n else {\n      ctx.channel().writeAndFlush(new DefaultSocks4CommandResponse(Socks4CommandStatus.REJECTED_OR_FAILED));\n      SocksServerUtils.closeOnFlush(ctx.channel());\n    }\n  }\n);\n}\n else if (message instanceof Socks5CommandRequest) {\n  final Socks5CommandRequest request=(Socks5CommandRequest)message;\n  Promise<Channel> promise=ctx.executor().newPromise();\n  promise.asFuture().addListener(future -> {\n    final Channel outboundChannel=future.getNow();\n    if (future.isSuccess()) {\n      Future<Void> responseFuture=ctx.channel().writeAndFlush(new DefaultSocks5CommandResponse(Socks5CommandStatus.SUCCESS,request.dstAddrType(),request.dstAddr(),request.dstPort()));\n      responseFuture.addListener(fut -> {\n        ctx.pipeline().remove(this);\n        outboundChannel.pipeline().addLast(new RelayHandler(ctx.channel()));\n        ctx.pipeline().addLast(new RelayHandler(outboundChannel));\n      }\n);\n    }\n else {\n      ctx.channel().writeAndFlush(new DefaultSocks5CommandResponse(Socks5CommandStatus.FAILURE,request.dstAddrType()));\n      SocksServerUtils.closeOnFlush(ctx.channel());\n    }\n  }\n);\n  final Channel inboundChannel=ctx.channel();\n  b.group(inboundChannel.executor()).channel(NioSocketChannel.class).option(ChannelOption.CONNECT_TIMEOUT_MILLIS,10000).option(ChannelOption.SO_KEEPALIVE,true).handler(new DirectClientHandler(promise));\n  b.connect(request.dstAddr(),request.dstPort()).addListener(future -> {\n    if (future.isSuccess()) {\n    }\n else {\n      ctx.channel().writeAndFlush(new DefaultSocks5CommandResponse(Socks5CommandStatus.FAILURE,request.dstAddrType()));\n      SocksServerUtils.closeOnFlush(ctx.channel());\n    }\n  }\n);\n}\n else {\n  ctx.close();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 438,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4487,
        "startLineNumber" : 41,
        "startColumnNumber" : 110,
        "endLineNumber" : 126,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (message instanceof Socks4CommandRequest) {\n    final Socks4CommandRequest request=(Socks4CommandRequest)message;\n    Promise<Channel> promise=ctx.executor().newPromise();\n    promise.asFuture().addListener(future -> {\n      final Channel outboundChannel=future.getNow();\n      if (future.isSuccess()) {\n        Future<Void> responseFuture=ctx.channel().writeAndFlush(new DefaultSocks4CommandResponse(Socks4CommandStatus.SUCCESS));\n        responseFuture.addListener(fut -> {\n          ctx.pipeline().remove(this);\n          outboundChannel.pipeline().addLast(new RelayHandler(ctx.channel()));\n          ctx.pipeline().addLast(new RelayHandler(outboundChannel));\n        }\n);\n      }\n else {\n        ctx.channel().writeAndFlush(new DefaultSocks4CommandResponse(Socks4CommandStatus.REJECTED_OR_FAILED));\n        SocksServerUtils.closeOnFlush(ctx.channel());\n      }\n    }\n);\n    final Channel inboundChannel=ctx.channel();\n    b.group(inboundChannel.executor()).channel(NioSocketChannel.class).option(ChannelOption.CONNECT_TIMEOUT_MILLIS,10000).option(ChannelOption.SO_KEEPALIVE,true).handler(new DirectClientHandler(promise));\n    b.connect(request.dstAddr(),request.dstPort()).addListener(future -> {\n      if (future.isSuccess()) {\n      }\n else {\n        ctx.channel().writeAndFlush(new DefaultSocks4CommandResponse(Socks4CommandStatus.REJECTED_OR_FAILED));\n        SocksServerUtils.closeOnFlush(ctx.channel());\n      }\n    }\n);\n  }\n else   if (message instanceof Socks5CommandRequest) {\n    final Socks5CommandRequest request=(Socks5CommandRequest)message;\n    Promise<Channel> promise=ctx.executor().newPromise();\n    promise.asFuture().addListener(future -> {\n      final Channel outboundChannel=future.getNow();\n      if (future.isSuccess()) {\n        Future<Void> responseFuture=ctx.channel().writeAndFlush(new DefaultSocks5CommandResponse(Socks5CommandStatus.SUCCESS,request.dstAddrType(),request.dstAddr(),request.dstPort()));\n        responseFuture.addListener(fut -> {\n          ctx.pipeline().remove(this);\n          outboundChannel.pipeline().addLast(new RelayHandler(ctx.channel()));\n          ctx.pipeline().addLast(new RelayHandler(outboundChannel));\n        }\n);\n      }\n else {\n        ctx.channel().writeAndFlush(new DefaultSocks5CommandResponse(Socks5CommandStatus.FAILURE,request.dstAddrType()));\n        SocksServerUtils.closeOnFlush(ctx.channel());\n      }\n    }\n);\n    final Channel inboundChannel=ctx.channel();\n    b.group(inboundChannel.executor()).channel(NioSocketChannel.class).option(ChannelOption.CONNECT_TIMEOUT_MILLIS,10000).option(ChannelOption.SO_KEEPALIVE,true).handler(new DirectClientHandler(promise));\n    b.connect(request.dstAddr(),request.dstPort()).addListener(future -> {\n      if (future.isSuccess()) {\n      }\n else {\n        ctx.channel().writeAndFlush(new DefaultSocks5CommandResponse(Socks5CommandStatus.FAILURE,request.dstAddrType()));\n        SocksServerUtils.closeOnFlush(ctx.channel());\n      }\n    }\n);\n  }\n else {\n    ctx.close();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 439,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4608,
        "startLineNumber" : 40,
        "startColumnNumber" : 4,
        "endLineNumber" : 126,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void messageReceived(final ChannelHandlerContext ctx,final SocksMessage message) throws Exception {\n  if (message instanceof Socks4CommandRequest) {\n    final Socks4CommandRequest request=(Socks4CommandRequest)message;\n    Promise<Channel> promise=ctx.executor().newPromise();\n    promise.asFuture().addListener(future -> {\n      final Channel outboundChannel=future.getNow();\n      if (future.isSuccess()) {\n        Future<Void> responseFuture=ctx.channel().writeAndFlush(new DefaultSocks4CommandResponse(Socks4CommandStatus.SUCCESS));\n        responseFuture.addListener(fut -> {\n          ctx.pipeline().remove(this);\n          outboundChannel.pipeline().addLast(new RelayHandler(ctx.channel()));\n          ctx.pipeline().addLast(new RelayHandler(outboundChannel));\n        }\n);\n      }\n else {\n        ctx.channel().writeAndFlush(new DefaultSocks4CommandResponse(Socks4CommandStatus.REJECTED_OR_FAILED));\n        SocksServerUtils.closeOnFlush(ctx.channel());\n      }\n    }\n);\n    final Channel inboundChannel=ctx.channel();\n    b.group(inboundChannel.executor()).channel(NioSocketChannel.class).option(ChannelOption.CONNECT_TIMEOUT_MILLIS,10000).option(ChannelOption.SO_KEEPALIVE,true).handler(new DirectClientHandler(promise));\n    b.connect(request.dstAddr(),request.dstPort()).addListener(future -> {\n      if (future.isSuccess()) {\n      }\n else {\n        ctx.channel().writeAndFlush(new DefaultSocks4CommandResponse(Socks4CommandStatus.REJECTED_OR_FAILED));\n        SocksServerUtils.closeOnFlush(ctx.channel());\n      }\n    }\n);\n  }\n else   if (message instanceof Socks5CommandRequest) {\n    final Socks5CommandRequest request=(Socks5CommandRequest)message;\n    Promise<Channel> promise=ctx.executor().newPromise();\n    promise.asFuture().addListener(future -> {\n      final Channel outboundChannel=future.getNow();\n      if (future.isSuccess()) {\n        Future<Void> responseFuture=ctx.channel().writeAndFlush(new DefaultSocks5CommandResponse(Socks5CommandStatus.SUCCESS,request.dstAddrType(),request.dstAddr(),request.dstPort()));\n        responseFuture.addListener(fut -> {\n          ctx.pipeline().remove(this);\n          outboundChannel.pipeline().addLast(new RelayHandler(ctx.channel()));\n          ctx.pipeline().addLast(new RelayHandler(outboundChannel));\n        }\n);\n      }\n else {\n        ctx.channel().writeAndFlush(new DefaultSocks5CommandResponse(Socks5CommandStatus.FAILURE,request.dstAddrType()));\n        SocksServerUtils.closeOnFlush(ctx.channel());\n      }\n    }\n);\n    final Channel inboundChannel=ctx.channel();\n    b.group(inboundChannel.executor()).channel(NioSocketChannel.class).option(ChannelOption.CONNECT_TIMEOUT_MILLIS,10000).option(ChannelOption.SO_KEEPALIVE,true).handler(new DirectClientHandler(promise));\n    b.connect(request.dstAddr(),request.dstPort()).addListener(future -> {\n      if (future.isSuccess()) {\n      }\n else {\n        ctx.channel().writeAndFlush(new DefaultSocks5CommandResponse(Socks5CommandStatus.FAILURE,request.dstAddrType()));\n        SocksServerUtils.closeOnFlush(ctx.channel());\n      }\n    }\n);\n  }\n else {\n    ctx.close();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 457,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 225,
        "startLineNumber" : 64,
        "startColumnNumber" : 12,
        "endLineNumber" : 67,
        "endColumnNumber" : 61
      },
      "nodeContext" : "b.group(inboundChannel.executor()).channel(NioSocketChannel.class).option(ChannelOption.CONNECT_TIMEOUT_MILLIS,10000).option(ChannelOption.SO_KEEPALIVE,true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 23,
      "astHeight" : 6
    },
    "tokenLength" : 12,
    "type" : "io.netty.bootstrap.Bootstrap"
  }, {
    "nodeContext" : "b.group(inboundChannel.executor()).channel(NioSocketChannel.class).option(ChannelOption.CONNECT_TIMEOUT_MILLIS,10000)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 162,
      "startLineNumber" : 107,
      "startColumnNumber" : 12,
      "endLineNumber" : 109,
      "endColumnNumber" : 72
    },
    "astNodeNumber" : 17,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 225,
        "startLineNumber" : 107,
        "startColumnNumber" : 12,
        "endLineNumber" : 110,
        "endColumnNumber" : 61
      },
      "nodeContext" : "b.group(inboundChannel.executor()).channel(NioSocketChannel.class).option(ChannelOption.CONNECT_TIMEOUT_MILLIS,10000).option(ChannelOption.SO_KEEPALIVE,true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 289,
        "startLineNumber" : 107,
        "startColumnNumber" : 12,
        "endLineNumber" : 111,
        "endColumnNumber" : 62
      },
      "nodeContext" : "b.group(inboundChannel.executor()).channel(NioSocketChannel.class).option(ChannelOption.CONNECT_TIMEOUT_MILLIS,10000).option(ChannelOption.SO_KEEPALIVE,true).handler(new DirectClientHandler(promise))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 29,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 290,
        "startLineNumber" : 107,
        "startColumnNumber" : 12,
        "endLineNumber" : 111,
        "endColumnNumber" : 63
      },
      "nodeContext" : "b.group(inboundChannel.executor()).channel(NioSocketChannel.class).option(ChannelOption.CONNECT_TIMEOUT_MILLIS,10000).option(ChannelOption.SO_KEEPALIVE,true).handler(new DirectClientHandler(promise));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 30,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2270,
        "startLineNumber" : 81,
        "startColumnNumber" : 60,
        "endLineNumber" : 123,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final Socks5CommandRequest request=(Socks5CommandRequest)message;\n  Promise<Channel> promise=ctx.executor().newPromise();\n  promise.asFuture().addListener(future -> {\n    final Channel outboundChannel=future.getNow();\n    if (future.isSuccess()) {\n      Future<Void> responseFuture=ctx.channel().writeAndFlush(new DefaultSocks5CommandResponse(Socks5CommandStatus.SUCCESS,request.dstAddrType(),request.dstAddr(),request.dstPort()));\n      responseFuture.addListener(fut -> {\n        ctx.pipeline().remove(this);\n        outboundChannel.pipeline().addLast(new RelayHandler(ctx.channel()));\n        ctx.pipeline().addLast(new RelayHandler(outboundChannel));\n      }\n);\n    }\n else {\n      ctx.channel().writeAndFlush(new DefaultSocks5CommandResponse(Socks5CommandStatus.FAILURE,request.dstAddrType()));\n      SocksServerUtils.closeOnFlush(ctx.channel());\n    }\n  }\n);\n  final Channel inboundChannel=ctx.channel();\n  b.group(inboundChannel.executor()).channel(NioSocketChannel.class).option(ChannelOption.CONNECT_TIMEOUT_MILLIS,10000).option(ChannelOption.SO_KEEPALIVE,true).handler(new DirectClientHandler(promise));\n  b.connect(request.dstAddr(),request.dstPort()).addListener(future -> {\n    if (future.isSuccess()) {\n    }\n else {\n      ctx.channel().writeAndFlush(new DefaultSocks5CommandResponse(Socks5CommandStatus.FAILURE,request.dstAddrType()));\n      SocksServerUtils.closeOnFlush(ctx.channel());\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 219,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2359,
        "startLineNumber" : 81,
        "startColumnNumber" : 15,
        "endLineNumber" : 125,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof Socks5CommandRequest) {\n  final Socks5CommandRequest request=(Socks5CommandRequest)message;\n  Promise<Channel> promise=ctx.executor().newPromise();\n  promise.asFuture().addListener(future -> {\n    final Channel outboundChannel=future.getNow();\n    if (future.isSuccess()) {\n      Future<Void> responseFuture=ctx.channel().writeAndFlush(new DefaultSocks5CommandResponse(Socks5CommandStatus.SUCCESS,request.dstAddrType(),request.dstAddr(),request.dstPort()));\n      responseFuture.addListener(fut -> {\n        ctx.pipeline().remove(this);\n        outboundChannel.pipeline().addLast(new RelayHandler(ctx.channel()));\n        ctx.pipeline().addLast(new RelayHandler(outboundChannel));\n      }\n);\n    }\n else {\n      ctx.channel().writeAndFlush(new DefaultSocks5CommandResponse(Socks5CommandStatus.FAILURE,request.dstAddrType()));\n      SocksServerUtils.closeOnFlush(ctx.channel());\n    }\n  }\n);\n  final Channel inboundChannel=ctx.channel();\n  b.group(inboundChannel.executor()).channel(NioSocketChannel.class).option(ChannelOption.CONNECT_TIMEOUT_MILLIS,10000).option(ChannelOption.SO_KEEPALIVE,true).handler(new DirectClientHandler(promise));\n  b.connect(request.dstAddr(),request.dstPort()).addListener(future -> {\n    if (future.isSuccess()) {\n    }\n else {\n      ctx.channel().writeAndFlush(new DefaultSocks5CommandResponse(Socks5CommandStatus.FAILURE,request.dstAddrType()));\n      SocksServerUtils.closeOnFlush(ctx.channel());\n    }\n  }\n);\n}\n else {\n  ctx.close();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 229,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4469,
        "startLineNumber" : 42,
        "startColumnNumber" : 8,
        "endLineNumber" : 125,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (message instanceof Socks4CommandRequest) {\n  final Socks4CommandRequest request=(Socks4CommandRequest)message;\n  Promise<Channel> promise=ctx.executor().newPromise();\n  promise.asFuture().addListener(future -> {\n    final Channel outboundChannel=future.getNow();\n    if (future.isSuccess()) {\n      Future<Void> responseFuture=ctx.channel().writeAndFlush(new DefaultSocks4CommandResponse(Socks4CommandStatus.SUCCESS));\n      responseFuture.addListener(fut -> {\n        ctx.pipeline().remove(this);\n        outboundChannel.pipeline().addLast(new RelayHandler(ctx.channel()));\n        ctx.pipeline().addLast(new RelayHandler(outboundChannel));\n      }\n);\n    }\n else {\n      ctx.channel().writeAndFlush(new DefaultSocks4CommandResponse(Socks4CommandStatus.REJECTED_OR_FAILED));\n      SocksServerUtils.closeOnFlush(ctx.channel());\n    }\n  }\n);\n  final Channel inboundChannel=ctx.channel();\n  b.group(inboundChannel.executor()).channel(NioSocketChannel.class).option(ChannelOption.CONNECT_TIMEOUT_MILLIS,10000).option(ChannelOption.SO_KEEPALIVE,true).handler(new DirectClientHandler(promise));\n  b.connect(request.dstAddr(),request.dstPort()).addListener(future -> {\n    if (future.isSuccess()) {\n    }\n else {\n      ctx.channel().writeAndFlush(new DefaultSocks4CommandResponse(Socks4CommandStatus.REJECTED_OR_FAILED));\n      SocksServerUtils.closeOnFlush(ctx.channel());\n    }\n  }\n);\n}\n else if (message instanceof Socks5CommandRequest) {\n  final Socks5CommandRequest request=(Socks5CommandRequest)message;\n  Promise<Channel> promise=ctx.executor().newPromise();\n  promise.asFuture().addListener(future -> {\n    final Channel outboundChannel=future.getNow();\n    if (future.isSuccess()) {\n      Future<Void> responseFuture=ctx.channel().writeAndFlush(new DefaultSocks5CommandResponse(Socks5CommandStatus.SUCCESS,request.dstAddrType(),request.dstAddr(),request.dstPort()));\n      responseFuture.addListener(fut -> {\n        ctx.pipeline().remove(this);\n        outboundChannel.pipeline().addLast(new RelayHandler(ctx.channel()));\n        ctx.pipeline().addLast(new RelayHandler(outboundChannel));\n      }\n);\n    }\n else {\n      ctx.channel().writeAndFlush(new DefaultSocks5CommandResponse(Socks5CommandStatus.FAILURE,request.dstAddrType()));\n      SocksServerUtils.closeOnFlush(ctx.channel());\n    }\n  }\n);\n  final Channel inboundChannel=ctx.channel();\n  b.group(inboundChannel.executor()).channel(NioSocketChannel.class).option(ChannelOption.CONNECT_TIMEOUT_MILLIS,10000).option(ChannelOption.SO_KEEPALIVE,true).handler(new DirectClientHandler(promise));\n  b.connect(request.dstAddr(),request.dstPort()).addListener(future -> {\n    if (future.isSuccess()) {\n    }\n else {\n      ctx.channel().writeAndFlush(new DefaultSocks5CommandResponse(Socks5CommandStatus.FAILURE,request.dstAddrType()));\n      SocksServerUtils.closeOnFlush(ctx.channel());\n    }\n  }\n);\n}\n else {\n  ctx.close();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 438,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4487,
        "startLineNumber" : 41,
        "startColumnNumber" : 110,
        "endLineNumber" : 126,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (message instanceof Socks4CommandRequest) {\n    final Socks4CommandRequest request=(Socks4CommandRequest)message;\n    Promise<Channel> promise=ctx.executor().newPromise();\n    promise.asFuture().addListener(future -> {\n      final Channel outboundChannel=future.getNow();\n      if (future.isSuccess()) {\n        Future<Void> responseFuture=ctx.channel().writeAndFlush(new DefaultSocks4CommandResponse(Socks4CommandStatus.SUCCESS));\n        responseFuture.addListener(fut -> {\n          ctx.pipeline().remove(this);\n          outboundChannel.pipeline().addLast(new RelayHandler(ctx.channel()));\n          ctx.pipeline().addLast(new RelayHandler(outboundChannel));\n        }\n);\n      }\n else {\n        ctx.channel().writeAndFlush(new DefaultSocks4CommandResponse(Socks4CommandStatus.REJECTED_OR_FAILED));\n        SocksServerUtils.closeOnFlush(ctx.channel());\n      }\n    }\n);\n    final Channel inboundChannel=ctx.channel();\n    b.group(inboundChannel.executor()).channel(NioSocketChannel.class).option(ChannelOption.CONNECT_TIMEOUT_MILLIS,10000).option(ChannelOption.SO_KEEPALIVE,true).handler(new DirectClientHandler(promise));\n    b.connect(request.dstAddr(),request.dstPort()).addListener(future -> {\n      if (future.isSuccess()) {\n      }\n else {\n        ctx.channel().writeAndFlush(new DefaultSocks4CommandResponse(Socks4CommandStatus.REJECTED_OR_FAILED));\n        SocksServerUtils.closeOnFlush(ctx.channel());\n      }\n    }\n);\n  }\n else   if (message instanceof Socks5CommandRequest) {\n    final Socks5CommandRequest request=(Socks5CommandRequest)message;\n    Promise<Channel> promise=ctx.executor().newPromise();\n    promise.asFuture().addListener(future -> {\n      final Channel outboundChannel=future.getNow();\n      if (future.isSuccess()) {\n        Future<Void> responseFuture=ctx.channel().writeAndFlush(new DefaultSocks5CommandResponse(Socks5CommandStatus.SUCCESS,request.dstAddrType(),request.dstAddr(),request.dstPort()));\n        responseFuture.addListener(fut -> {\n          ctx.pipeline().remove(this);\n          outboundChannel.pipeline().addLast(new RelayHandler(ctx.channel()));\n          ctx.pipeline().addLast(new RelayHandler(outboundChannel));\n        }\n);\n      }\n else {\n        ctx.channel().writeAndFlush(new DefaultSocks5CommandResponse(Socks5CommandStatus.FAILURE,request.dstAddrType()));\n        SocksServerUtils.closeOnFlush(ctx.channel());\n      }\n    }\n);\n    final Channel inboundChannel=ctx.channel();\n    b.group(inboundChannel.executor()).channel(NioSocketChannel.class).option(ChannelOption.CONNECT_TIMEOUT_MILLIS,10000).option(ChannelOption.SO_KEEPALIVE,true).handler(new DirectClientHandler(promise));\n    b.connect(request.dstAddr(),request.dstPort()).addListener(future -> {\n      if (future.isSuccess()) {\n      }\n else {\n        ctx.channel().writeAndFlush(new DefaultSocks5CommandResponse(Socks5CommandStatus.FAILURE,request.dstAddrType()));\n        SocksServerUtils.closeOnFlush(ctx.channel());\n      }\n    }\n);\n  }\n else {\n    ctx.close();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 439,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4608,
        "startLineNumber" : 40,
        "startColumnNumber" : 4,
        "endLineNumber" : 126,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void messageReceived(final ChannelHandlerContext ctx,final SocksMessage message) throws Exception {\n  if (message instanceof Socks4CommandRequest) {\n    final Socks4CommandRequest request=(Socks4CommandRequest)message;\n    Promise<Channel> promise=ctx.executor().newPromise();\n    promise.asFuture().addListener(future -> {\n      final Channel outboundChannel=future.getNow();\n      if (future.isSuccess()) {\n        Future<Void> responseFuture=ctx.channel().writeAndFlush(new DefaultSocks4CommandResponse(Socks4CommandStatus.SUCCESS));\n        responseFuture.addListener(fut -> {\n          ctx.pipeline().remove(this);\n          outboundChannel.pipeline().addLast(new RelayHandler(ctx.channel()));\n          ctx.pipeline().addLast(new RelayHandler(outboundChannel));\n        }\n);\n      }\n else {\n        ctx.channel().writeAndFlush(new DefaultSocks4CommandResponse(Socks4CommandStatus.REJECTED_OR_FAILED));\n        SocksServerUtils.closeOnFlush(ctx.channel());\n      }\n    }\n);\n    final Channel inboundChannel=ctx.channel();\n    b.group(inboundChannel.executor()).channel(NioSocketChannel.class).option(ChannelOption.CONNECT_TIMEOUT_MILLIS,10000).option(ChannelOption.SO_KEEPALIVE,true).handler(new DirectClientHandler(promise));\n    b.connect(request.dstAddr(),request.dstPort()).addListener(future -> {\n      if (future.isSuccess()) {\n      }\n else {\n        ctx.channel().writeAndFlush(new DefaultSocks4CommandResponse(Socks4CommandStatus.REJECTED_OR_FAILED));\n        SocksServerUtils.closeOnFlush(ctx.channel());\n      }\n    }\n);\n  }\n else   if (message instanceof Socks5CommandRequest) {\n    final Socks5CommandRequest request=(Socks5CommandRequest)message;\n    Promise<Channel> promise=ctx.executor().newPromise();\n    promise.asFuture().addListener(future -> {\n      final Channel outboundChannel=future.getNow();\n      if (future.isSuccess()) {\n        Future<Void> responseFuture=ctx.channel().writeAndFlush(new DefaultSocks5CommandResponse(Socks5CommandStatus.SUCCESS,request.dstAddrType(),request.dstAddr(),request.dstPort()));\n        responseFuture.addListener(fut -> {\n          ctx.pipeline().remove(this);\n          outboundChannel.pipeline().addLast(new RelayHandler(ctx.channel()));\n          ctx.pipeline().addLast(new RelayHandler(outboundChannel));\n        }\n);\n      }\n else {\n        ctx.channel().writeAndFlush(new DefaultSocks5CommandResponse(Socks5CommandStatus.FAILURE,request.dstAddrType()));\n        SocksServerUtils.closeOnFlush(ctx.channel());\n      }\n    }\n);\n    final Channel inboundChannel=ctx.channel();\n    b.group(inboundChannel.executor()).channel(NioSocketChannel.class).option(ChannelOption.CONNECT_TIMEOUT_MILLIS,10000).option(ChannelOption.SO_KEEPALIVE,true).handler(new DirectClientHandler(promise));\n    b.connect(request.dstAddr(),request.dstPort()).addListener(future -> {\n      if (future.isSuccess()) {\n      }\n else {\n        ctx.channel().writeAndFlush(new DefaultSocks5CommandResponse(Socks5CommandStatus.FAILURE,request.dstAddrType()));\n        SocksServerUtils.closeOnFlush(ctx.channel());\n      }\n    }\n);\n  }\n else {\n    ctx.close();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 457,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 225,
        "startLineNumber" : 107,
        "startColumnNumber" : 12,
        "endLineNumber" : 110,
        "endColumnNumber" : 61
      },
      "nodeContext" : "b.group(inboundChannel.executor()).channel(NioSocketChannel.class).option(ChannelOption.CONNECT_TIMEOUT_MILLIS,10000).option(ChannelOption.SO_KEEPALIVE,true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 23,
      "astHeight" : 6
    },
    "tokenLength" : 12,
    "type" : "io.netty.bootstrap.Bootstrap"
  } ],
  "positionList" : [ {
    "charLength" : 162,
    "startLineNumber" : 64,
    "startColumnNumber" : 12,
    "endLineNumber" : 66,
    "endColumnNumber" : 72
  }, {
    "charLength" : 162,
    "startLineNumber" : 107,
    "startColumnNumber" : 12,
    "endLineNumber" : 109,
    "endColumnNumber" : 72
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  } ]
}