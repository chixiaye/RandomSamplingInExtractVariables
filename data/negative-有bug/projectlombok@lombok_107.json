{
  "id" : 107,
  "expression" : "otherFieldAccessor",
  "projectName" : "projectlombok@lombok",
  "commitID" : "25def866b50860715ee7c315c678b8c3d1ba9b56",
  "filePath" : "/src/core/lombok/javac/handlers/HandleEqualsAndHashCode.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "otherFieldAccessor",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 434,
      "startColumnNumber" : 71,
      "endLineNumber" : 434,
      "endColumnNumber" : 89
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 434,
        "startColumnNumber" : 23,
        "endLineNumber" : 434,
        "endColumnNumber" : 114
      },
      "nodeContext" : "generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 434,
        "startColumnNumber" : 5,
        "endLineNumber" : 434,
        "endColumnNumber" : 115
      },
      "nodeContext" : "statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,false))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 111,
        "startLineNumber" : 434,
        "startColumnNumber" : 5,
        "endLineNumber" : 434,
        "endColumnNumber" : 116
      },
      "nodeContext" : "statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,false));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 770,
        "startLineNumber" : 431,
        "startColumnNumber" : 4,
        "endLineNumber" : 445,
        "endColumnNumber" : 5
      },
      "nodeContext" : "switch (((JCPrimitiveTypeTree)fType).getPrimitiveTypeKind()) {\ncase FLOAT:  statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,false));\nbreak;\ncase DOUBLE:statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,true));\nbreak;\ndefault:statements.append(maker.If(maker.Binary(getCtcInt(JCTree.class,\"NE\"),thisFieldAccessor,otherFieldAccessor),returnBool(maker,false),null));\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 61,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 781,
        "startLineNumber" : 430,
        "startColumnNumber" : 45,
        "endLineNumber" : 446,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\nswitch (((JCPrimitiveTypeTree)fType).getPrimitiveTypeKind()) {\ncase FLOAT:    statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,false));\n  break;\ncase DOUBLE:statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,true));\nbreak;\ndefault:statements.append(maker.If(maker.Binary(getCtcInt(JCTree.class,\"NE\"),thisFieldAccessor,otherFieldAccessor),returnBool(maker,false),null));\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 62,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3184,
        "startLineNumber" : 430,
        "startColumnNumber" : 3,
        "endLineNumber" : 474,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (fType instanceof JCPrimitiveTypeTree) {\nswitch (((JCPrimitiveTypeTree)fType).getPrimitiveTypeKind()) {\ncase FLOAT:    statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,false));\n  break;\ncase DOUBLE:statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,true));\nbreak;\ndefault:statements.append(maker.If(maker.Binary(getCtcInt(JCTree.class,\"NE\"),thisFieldAccessor,otherFieldAccessor),returnBool(maker,false),null));\nbreak;\n}\n}\n else if (fType instanceof JCArrayTypeTree) {\nboolean multiDim=((JCArrayTypeTree)fType).elemtype instanceof JCArrayTypeTree;\nboolean primitiveArray=((JCArrayTypeTree)fType).elemtype instanceof JCPrimitiveTypeTree;\nboolean useDeepEquals=multiDim || !primitiveArray;\nJCExpression eqMethod=chainDots(typeNode,\"java\",\"util\",\"Arrays\",useDeepEquals ? \"deepEquals\" : \"equals\");\nList<JCExpression> args=List.of(thisFieldAccessor,otherFieldAccessor);\nstatements.append(maker.If(maker.Unary(getCtcInt(JCTree.class,\"NOT\"),maker.Apply(List.<JCExpression>nil(),eqMethod,args)),returnBool(maker,false),null));\n}\n else {\nName fieldName=((JCVariableDecl)fieldNode.get()).name;\nName thisDollarFieldName=thisDollar.append(fieldName);\nName otherDollarFieldName=otherDollar.append(fieldName);\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),thisDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),thisFieldAccessor));\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),otherDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),otherFieldAccessor));\nJCExpression thisEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(thisDollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\nJCExpression otherNotEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"NE\"),maker.Ident(otherDollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\nJCExpression thisEqualsThat=maker.Apply(List.<JCExpression>nil(),maker.Select(maker.Ident(thisDollarFieldName),typeNode.toName(\"equals\")),List.<JCExpression>of(maker.Ident(otherDollarFieldName)));\nJCExpression fieldsAreNotEqual=maker.Conditional(thisEqualsNull,otherNotEqualsNull,maker.Unary(getCtcInt(JCTree.class,\"NOT\"),thisEqualsThat));\nstatements.append(maker.If(fieldsAreNotEqual,returnBool(maker,false),null));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 365,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3456,
        "startLineNumber" : 426,
        "startColumnNumber" : 37,
        "endLineNumber" : 475,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  JCExpression fType=getFieldType(fieldNode,fieldAccess);\n  JCExpression thisFieldAccessor=createFieldAccessor(maker,fieldNode,fieldAccess);\n  JCExpression otherFieldAccessor=createFieldAccessor(maker,fieldNode,fieldAccess,maker.Ident(otherName));\n  if (fType instanceof JCPrimitiveTypeTree) {\nswitch (((JCPrimitiveTypeTree)fType).getPrimitiveTypeKind()) {\ncase FLOAT:      statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,false));\n    break;\ncase DOUBLE:  statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,true));\nbreak;\ndefault:statements.append(maker.If(maker.Binary(getCtcInt(JCTree.class,\"NE\"),thisFieldAccessor,otherFieldAccessor),returnBool(maker,false),null));\nbreak;\n}\n}\n else if (fType instanceof JCArrayTypeTree) {\nboolean multiDim=((JCArrayTypeTree)fType).elemtype instanceof JCArrayTypeTree;\nboolean primitiveArray=((JCArrayTypeTree)fType).elemtype instanceof JCPrimitiveTypeTree;\nboolean useDeepEquals=multiDim || !primitiveArray;\nJCExpression eqMethod=chainDots(typeNode,\"java\",\"util\",\"Arrays\",useDeepEquals ? \"deepEquals\" : \"equals\");\nList<JCExpression> args=List.of(thisFieldAccessor,otherFieldAccessor);\nstatements.append(maker.If(maker.Unary(getCtcInt(JCTree.class,\"NOT\"),maker.Apply(List.<JCExpression>nil(),eqMethod,args)),returnBool(maker,false),null));\n}\n else {\nName fieldName=((JCVariableDecl)fieldNode.get()).name;\nName thisDollarFieldName=thisDollar.append(fieldName);\nName otherDollarFieldName=otherDollar.append(fieldName);\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),thisDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),thisFieldAccessor));\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),otherDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),otherFieldAccessor));\nJCExpression thisEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(thisDollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\nJCExpression otherNotEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"NE\"),maker.Ident(otherDollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\nJCExpression thisEqualsThat=maker.Apply(List.<JCExpression>nil(),maker.Select(maker.Ident(thisDollarFieldName),typeNode.toName(\"equals\")),List.<JCExpression>of(maker.Ident(otherDollarFieldName)));\nJCExpression fieldsAreNotEqual=maker.Conditional(thisEqualsNull,otherNotEqualsNull,maker.Unary(getCtcInt(JCTree.class,\"NOT\"),thisEqualsThat));\nstatements.append(maker.If(fieldsAreNotEqual,returnBool(maker,false),null));\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 399,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3491,
        "startLineNumber" : 426,
        "startColumnNumber" : 2,
        "endLineNumber" : 475,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (JavacNode fieldNode : fields) {\n  JCExpression fType=getFieldType(fieldNode,fieldAccess);\n  JCExpression thisFieldAccessor=createFieldAccessor(maker,fieldNode,fieldAccess);\n  JCExpression otherFieldAccessor=createFieldAccessor(maker,fieldNode,fieldAccess,maker.Ident(otherName));\n  if (fType instanceof JCPrimitiveTypeTree) {\nswitch (((JCPrimitiveTypeTree)fType).getPrimitiveTypeKind()) {\ncase FLOAT:      statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,false));\n    break;\ncase DOUBLE:  statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,true));\nbreak;\ndefault:statements.append(maker.If(maker.Binary(getCtcInt(JCTree.class,\"NE\"),thisFieldAccessor,otherFieldAccessor),returnBool(maker,false),null));\nbreak;\n}\n}\n else if (fType instanceof JCArrayTypeTree) {\nboolean multiDim=((JCArrayTypeTree)fType).elemtype instanceof JCArrayTypeTree;\nboolean primitiveArray=((JCArrayTypeTree)fType).elemtype instanceof JCPrimitiveTypeTree;\nboolean useDeepEquals=multiDim || !primitiveArray;\nJCExpression eqMethod=chainDots(typeNode,\"java\",\"util\",\"Arrays\",useDeepEquals ? \"deepEquals\" : \"equals\");\nList<JCExpression> args=List.of(thisFieldAccessor,otherFieldAccessor);\nstatements.append(maker.If(maker.Unary(getCtcInt(JCTree.class,\"NOT\"),maker.Apply(List.<JCExpression>nil(),eqMethod,args)),returnBool(maker,false),null));\n}\n else {\nName fieldName=((JCVariableDecl)fieldNode.get()).name;\nName thisDollarFieldName=thisDollar.append(fieldName);\nName otherDollarFieldName=otherDollar.append(fieldName);\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),thisDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),thisFieldAccessor));\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),otherDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),otherFieldAccessor));\nJCExpression thisEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(thisDollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\nJCExpression otherNotEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"NE\"),maker.Ident(otherDollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\nJCExpression thisEqualsThat=maker.Apply(List.<JCExpression>nil(),maker.Select(maker.Ident(thisDollarFieldName),typeNode.toName(\"equals\")),List.<JCExpression>of(maker.Ident(otherDollarFieldName)));\nJCExpression fieldsAreNotEqual=maker.Conditional(thisEqualsNull,otherNotEqualsNull,maker.Unary(getCtcInt(JCTree.class,\"NOT\"),thisEqualsThat));\nstatements.append(maker.If(fieldsAreNotEqual,returnBool(maker,false),null));\n}\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 405,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7140,
        "startLineNumber" : 354,
        "startColumnNumber" : 161,
        "endLineNumber" : 483,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  TreeMaker maker=typeNode.getTreeMaker();\n  JCClassDecl type=(JCClassDecl)typeNode.get();\n  Name oName=typeNode.toName(\"o\");\n  Name otherName=typeNode.toName(\"other\");\n  Name thisName=typeNode.toName(\"this\");\n  JCAnnotation overrideAnnotation=maker.Annotation(chainDots(typeNode,\"java\",\"lang\",\"Override\"),List.<JCExpression>nil());\n  JCModifiers mods=maker.Modifiers(Flags.PUBLIC,List.of(overrideAnnotation));\n  JCExpression objectType=chainDots(typeNode,\"java\",\"lang\",\"Object\");\n  JCExpression returnType=maker.TypeIdent(getCtcInt(TypeTags.class,\"BOOLEAN\"));\n  ListBuffer<JCStatement> statements=ListBuffer.lb();\n  final List<JCVariableDecl> params=List.of(maker.VarDef(maker.Modifiers(Flags.FINAL),oName,objectType,null));\n{\n    statements.append(maker.If(maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(oName),maker.Ident(thisName)),returnBool(maker,true),null));\n  }\n{\n    JCUnary notInstanceOf=maker.Unary(getCtcInt(JCTree.class,\"NOT\"),maker.TypeTest(maker.Ident(oName),createTypeReference(typeNode)));\n    statements.append(maker.If(notInstanceOf,returnBool(maker,false),null));\n  }\n{\n    if (!fields.isEmpty() || needsCanEqual) {\n      final JCExpression selfType1, selfType2;\n      ListBuffer<JCExpression> wildcards1=ListBuffer.lb();\n      ListBuffer<JCExpression> wildcards2=ListBuffer.lb();\n      for (int i=0; i < type.typarams.length(); i++) {\n        wildcards1.append(maker.Wildcard(maker.TypeBoundKind(BoundKind.UNBOUND),null));\n        wildcards2.append(maker.Wildcard(maker.TypeBoundKind(BoundKind.UNBOUND),null));\n      }\n      if (type.typarams.isEmpty()) {\n        selfType1=maker.Ident(type.name);\n        selfType2=maker.Ident(type.name);\n      }\n else {\n        selfType1=maker.TypeApply(maker.Ident(type.name),wildcards1.toList());\n        selfType2=maker.TypeApply(maker.Ident(type.name),wildcards2.toList());\n      }\n      statements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),otherName,selfType1,maker.TypeCast(selfType2,maker.Ident(oName))));\n    }\n  }\n{\n    if (needsCanEqual) {\n      List<JCExpression> exprNil=List.nil();\n      JCExpression thisRef=maker.Ident(thisName);\n      JCExpression castThisRef=maker.TypeCast(chainDots(typeNode,\"java\",\"lang\",\"Object\"),thisRef);\n      JCExpression equalityCheck=maker.Apply(exprNil,maker.Select(maker.Ident(otherName),typeNode.toName(\"canEqual\")),List.of(castThisRef));\n      statements.append(maker.If(maker.Unary(getCtcInt(JCTree.class,\"NOT\"),equalityCheck),returnBool(maker,false),null));\n    }\n  }\n  if (callSuper) {\n    JCMethodInvocation callToSuper=maker.Apply(List.<JCExpression>nil(),maker.Select(maker.Ident(typeNode.toName(\"super\")),typeNode.toName(\"equals\")),List.<JCExpression>of(maker.Ident(oName)));\n    JCUnary superNotEqual=maker.Unary(getCtcInt(JCTree.class,\"NOT\"),callToSuper);\n    statements.append(maker.If(superNotEqual,returnBool(maker,false),null));\n  }\n  Name thisDollar=typeNode.toName(\"this$\");\n  Name otherDollar=typeNode.toName(\"other$\");\n  for (  JavacNode fieldNode : fields) {\n    JCExpression fType=getFieldType(fieldNode,fieldAccess);\n    JCExpression thisFieldAccessor=createFieldAccessor(maker,fieldNode,fieldAccess);\n    JCExpression otherFieldAccessor=createFieldAccessor(maker,fieldNode,fieldAccess,maker.Ident(otherName));\n    if (fType instanceof JCPrimitiveTypeTree) {\nswitch (((JCPrimitiveTypeTree)fType).getPrimitiveTypeKind()) {\ncase FLOAT:        statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,false));\n      break;\ncase DOUBLE:    statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,true));\n  break;\ndefault:statements.append(maker.If(maker.Binary(getCtcInt(JCTree.class,\"NE\"),thisFieldAccessor,otherFieldAccessor),returnBool(maker,false),null));\nbreak;\n}\n}\n else if (fType instanceof JCArrayTypeTree) {\nboolean multiDim=((JCArrayTypeTree)fType).elemtype instanceof JCArrayTypeTree;\nboolean primitiveArray=((JCArrayTypeTree)fType).elemtype instanceof JCPrimitiveTypeTree;\nboolean useDeepEquals=multiDim || !primitiveArray;\nJCExpression eqMethod=chainDots(typeNode,\"java\",\"util\",\"Arrays\",useDeepEquals ? \"deepEquals\" : \"equals\");\nList<JCExpression> args=List.of(thisFieldAccessor,otherFieldAccessor);\nstatements.append(maker.If(maker.Unary(getCtcInt(JCTree.class,\"NOT\"),maker.Apply(List.<JCExpression>nil(),eqMethod,args)),returnBool(maker,false),null));\n}\n else {\nName fieldName=((JCVariableDecl)fieldNode.get()).name;\nName thisDollarFieldName=thisDollar.append(fieldName);\nName otherDollarFieldName=otherDollar.append(fieldName);\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),thisDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),thisFieldAccessor));\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),otherDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),otherFieldAccessor));\nJCExpression thisEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(thisDollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\nJCExpression otherNotEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"NE\"),maker.Ident(otherDollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\nJCExpression thisEqualsThat=maker.Apply(List.<JCExpression>nil(),maker.Select(maker.Ident(thisDollarFieldName),typeNode.toName(\"equals\")),List.<JCExpression>of(maker.Ident(otherDollarFieldName)));\nJCExpression fieldsAreNotEqual=maker.Conditional(thisEqualsNull,otherNotEqualsNull,maker.Unary(getCtcInt(JCTree.class,\"NOT\"),thisEqualsThat));\nstatements.append(maker.If(fieldsAreNotEqual,returnBool(maker,false),null));\n}\n}\n{\nstatements.append(returnBool(maker,true));\n}\nJCBlock body=maker.Block(0,statements.toList());\nreturn recursiveSetGeneratedBy(maker.MethodDef(mods,typeNode.toName(\"equals\"),returnType,List.<JCTypeParameter>nil(),params,List.<JCExpression>nil(),body,null),source);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 993,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7300,
        "startLineNumber" : 354,
        "startColumnNumber" : 1,
        "endLineNumber" : 483,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private JCMethodDecl createEquals(JavacNode typeNode,List<JavacNode> fields,boolean callSuper,FieldAccess fieldAccess,boolean needsCanEqual,JCTree source){\n  TreeMaker maker=typeNode.getTreeMaker();\n  JCClassDecl type=(JCClassDecl)typeNode.get();\n  Name oName=typeNode.toName(\"o\");\n  Name otherName=typeNode.toName(\"other\");\n  Name thisName=typeNode.toName(\"this\");\n  JCAnnotation overrideAnnotation=maker.Annotation(chainDots(typeNode,\"java\",\"lang\",\"Override\"),List.<JCExpression>nil());\n  JCModifiers mods=maker.Modifiers(Flags.PUBLIC,List.of(overrideAnnotation));\n  JCExpression objectType=chainDots(typeNode,\"java\",\"lang\",\"Object\");\n  JCExpression returnType=maker.TypeIdent(getCtcInt(TypeTags.class,\"BOOLEAN\"));\n  ListBuffer<JCStatement> statements=ListBuffer.lb();\n  final List<JCVariableDecl> params=List.of(maker.VarDef(maker.Modifiers(Flags.FINAL),oName,objectType,null));\n{\n    statements.append(maker.If(maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(oName),maker.Ident(thisName)),returnBool(maker,true),null));\n  }\n{\n    JCUnary notInstanceOf=maker.Unary(getCtcInt(JCTree.class,\"NOT\"),maker.TypeTest(maker.Ident(oName),createTypeReference(typeNode)));\n    statements.append(maker.If(notInstanceOf,returnBool(maker,false),null));\n  }\n{\n    if (!fields.isEmpty() || needsCanEqual) {\n      final JCExpression selfType1, selfType2;\n      ListBuffer<JCExpression> wildcards1=ListBuffer.lb();\n      ListBuffer<JCExpression> wildcards2=ListBuffer.lb();\n      for (int i=0; i < type.typarams.length(); i++) {\n        wildcards1.append(maker.Wildcard(maker.TypeBoundKind(BoundKind.UNBOUND),null));\n        wildcards2.append(maker.Wildcard(maker.TypeBoundKind(BoundKind.UNBOUND),null));\n      }\n      if (type.typarams.isEmpty()) {\n        selfType1=maker.Ident(type.name);\n        selfType2=maker.Ident(type.name);\n      }\n else {\n        selfType1=maker.TypeApply(maker.Ident(type.name),wildcards1.toList());\n        selfType2=maker.TypeApply(maker.Ident(type.name),wildcards2.toList());\n      }\n      statements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),otherName,selfType1,maker.TypeCast(selfType2,maker.Ident(oName))));\n    }\n  }\n{\n    if (needsCanEqual) {\n      List<JCExpression> exprNil=List.nil();\n      JCExpression thisRef=maker.Ident(thisName);\n      JCExpression castThisRef=maker.TypeCast(chainDots(typeNode,\"java\",\"lang\",\"Object\"),thisRef);\n      JCExpression equalityCheck=maker.Apply(exprNil,maker.Select(maker.Ident(otherName),typeNode.toName(\"canEqual\")),List.of(castThisRef));\n      statements.append(maker.If(maker.Unary(getCtcInt(JCTree.class,\"NOT\"),equalityCheck),returnBool(maker,false),null));\n    }\n  }\n  if (callSuper) {\n    JCMethodInvocation callToSuper=maker.Apply(List.<JCExpression>nil(),maker.Select(maker.Ident(typeNode.toName(\"super\")),typeNode.toName(\"equals\")),List.<JCExpression>of(maker.Ident(oName)));\n    JCUnary superNotEqual=maker.Unary(getCtcInt(JCTree.class,\"NOT\"),callToSuper);\n    statements.append(maker.If(superNotEqual,returnBool(maker,false),null));\n  }\n  Name thisDollar=typeNode.toName(\"this$\");\n  Name otherDollar=typeNode.toName(\"other$\");\n  for (  JavacNode fieldNode : fields) {\n    JCExpression fType=getFieldType(fieldNode,fieldAccess);\n    JCExpression thisFieldAccessor=createFieldAccessor(maker,fieldNode,fieldAccess);\n    JCExpression otherFieldAccessor=createFieldAccessor(maker,fieldNode,fieldAccess,maker.Ident(otherName));\n    if (fType instanceof JCPrimitiveTypeTree) {\nswitch (((JCPrimitiveTypeTree)fType).getPrimitiveTypeKind()) {\ncase FLOAT:        statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,false));\n      break;\ncase DOUBLE:    statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,true));\n  break;\ndefault:statements.append(maker.If(maker.Binary(getCtcInt(JCTree.class,\"NE\"),thisFieldAccessor,otherFieldAccessor),returnBool(maker,false),null));\nbreak;\n}\n}\n else if (fType instanceof JCArrayTypeTree) {\nboolean multiDim=((JCArrayTypeTree)fType).elemtype instanceof JCArrayTypeTree;\nboolean primitiveArray=((JCArrayTypeTree)fType).elemtype instanceof JCPrimitiveTypeTree;\nboolean useDeepEquals=multiDim || !primitiveArray;\nJCExpression eqMethod=chainDots(typeNode,\"java\",\"util\",\"Arrays\",useDeepEquals ? \"deepEquals\" : \"equals\");\nList<JCExpression> args=List.of(thisFieldAccessor,otherFieldAccessor);\nstatements.append(maker.If(maker.Unary(getCtcInt(JCTree.class,\"NOT\"),maker.Apply(List.<JCExpression>nil(),eqMethod,args)),returnBool(maker,false),null));\n}\n else {\nName fieldName=((JCVariableDecl)fieldNode.get()).name;\nName thisDollarFieldName=thisDollar.append(fieldName);\nName otherDollarFieldName=otherDollar.append(fieldName);\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),thisDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),thisFieldAccessor));\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),otherDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),otherFieldAccessor));\nJCExpression thisEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(thisDollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\nJCExpression otherNotEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"NE\"),maker.Ident(otherDollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\nJCExpression thisEqualsThat=maker.Apply(List.<JCExpression>nil(),maker.Select(maker.Ident(thisDollarFieldName),typeNode.toName(\"equals\")),List.<JCExpression>of(maker.Ident(otherDollarFieldName)));\nJCExpression fieldsAreNotEqual=maker.Conditional(thisEqualsNull,otherNotEqualsNull,maker.Unary(getCtcInt(JCTree.class,\"NOT\"),thisEqualsThat));\nstatements.append(maker.If(fieldsAreNotEqual,returnBool(maker,false),null));\n}\n}\n{\nstatements.append(returnBool(maker,true));\n}\nJCBlock body=maker.Block(0,statements.toList());\nreturn recursiveSetGeneratedBy(maker.MethodDef(mods,typeNode.toName(\"equals\"),returnType,List.<JCTypeParameter>nil(),params,List.<JCExpression>nil(),body,null),source);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1023,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 111,
        "startLineNumber" : 434,
        "startColumnNumber" : 5,
        "endLineNumber" : 434,
        "endColumnNumber" : 116
      },
      "nodeContext" : "statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,false));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "lombok.javac.handlers.JCExpression"
  }, {
    "nodeContext" : "otherFieldAccessor",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 438,
      "startColumnNumber" : 71,
      "endLineNumber" : 438,
      "endColumnNumber" : 89
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 438,
        "startColumnNumber" : 23,
        "endLineNumber" : 438,
        "endColumnNumber" : 113
      },
      "nodeContext" : "generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 438,
        "startColumnNumber" : 5,
        "endLineNumber" : 438,
        "endColumnNumber" : 114
      },
      "nodeContext" : "statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,true))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 438,
        "startColumnNumber" : 5,
        "endLineNumber" : 438,
        "endColumnNumber" : 115
      },
      "nodeContext" : "statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,true));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 770,
        "startLineNumber" : 431,
        "startColumnNumber" : 4,
        "endLineNumber" : 445,
        "endColumnNumber" : 5
      },
      "nodeContext" : "switch (((JCPrimitiveTypeTree)fType).getPrimitiveTypeKind()) {\ncase FLOAT:  statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,false));\nbreak;\ncase DOUBLE:statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,true));\nbreak;\ndefault:statements.append(maker.If(maker.Binary(getCtcInt(JCTree.class,\"NE\"),thisFieldAccessor,otherFieldAccessor),returnBool(maker,false),null));\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 61,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 781,
        "startLineNumber" : 430,
        "startColumnNumber" : 45,
        "endLineNumber" : 446,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\nswitch (((JCPrimitiveTypeTree)fType).getPrimitiveTypeKind()) {\ncase FLOAT:    statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,false));\n  break;\ncase DOUBLE:statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,true));\nbreak;\ndefault:statements.append(maker.If(maker.Binary(getCtcInt(JCTree.class,\"NE\"),thisFieldAccessor,otherFieldAccessor),returnBool(maker,false),null));\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 62,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3184,
        "startLineNumber" : 430,
        "startColumnNumber" : 3,
        "endLineNumber" : 474,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (fType instanceof JCPrimitiveTypeTree) {\nswitch (((JCPrimitiveTypeTree)fType).getPrimitiveTypeKind()) {\ncase FLOAT:    statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,false));\n  break;\ncase DOUBLE:statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,true));\nbreak;\ndefault:statements.append(maker.If(maker.Binary(getCtcInt(JCTree.class,\"NE\"),thisFieldAccessor,otherFieldAccessor),returnBool(maker,false),null));\nbreak;\n}\n}\n else if (fType instanceof JCArrayTypeTree) {\nboolean multiDim=((JCArrayTypeTree)fType).elemtype instanceof JCArrayTypeTree;\nboolean primitiveArray=((JCArrayTypeTree)fType).elemtype instanceof JCPrimitiveTypeTree;\nboolean useDeepEquals=multiDim || !primitiveArray;\nJCExpression eqMethod=chainDots(typeNode,\"java\",\"util\",\"Arrays\",useDeepEquals ? \"deepEquals\" : \"equals\");\nList<JCExpression> args=List.of(thisFieldAccessor,otherFieldAccessor);\nstatements.append(maker.If(maker.Unary(getCtcInt(JCTree.class,\"NOT\"),maker.Apply(List.<JCExpression>nil(),eqMethod,args)),returnBool(maker,false),null));\n}\n else {\nName fieldName=((JCVariableDecl)fieldNode.get()).name;\nName thisDollarFieldName=thisDollar.append(fieldName);\nName otherDollarFieldName=otherDollar.append(fieldName);\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),thisDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),thisFieldAccessor));\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),otherDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),otherFieldAccessor));\nJCExpression thisEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(thisDollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\nJCExpression otherNotEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"NE\"),maker.Ident(otherDollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\nJCExpression thisEqualsThat=maker.Apply(List.<JCExpression>nil(),maker.Select(maker.Ident(thisDollarFieldName),typeNode.toName(\"equals\")),List.<JCExpression>of(maker.Ident(otherDollarFieldName)));\nJCExpression fieldsAreNotEqual=maker.Conditional(thisEqualsNull,otherNotEqualsNull,maker.Unary(getCtcInt(JCTree.class,\"NOT\"),thisEqualsThat));\nstatements.append(maker.If(fieldsAreNotEqual,returnBool(maker,false),null));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 365,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3456,
        "startLineNumber" : 426,
        "startColumnNumber" : 37,
        "endLineNumber" : 475,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  JCExpression fType=getFieldType(fieldNode,fieldAccess);\n  JCExpression thisFieldAccessor=createFieldAccessor(maker,fieldNode,fieldAccess);\n  JCExpression otherFieldAccessor=createFieldAccessor(maker,fieldNode,fieldAccess,maker.Ident(otherName));\n  if (fType instanceof JCPrimitiveTypeTree) {\nswitch (((JCPrimitiveTypeTree)fType).getPrimitiveTypeKind()) {\ncase FLOAT:      statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,false));\n    break;\ncase DOUBLE:  statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,true));\nbreak;\ndefault:statements.append(maker.If(maker.Binary(getCtcInt(JCTree.class,\"NE\"),thisFieldAccessor,otherFieldAccessor),returnBool(maker,false),null));\nbreak;\n}\n}\n else if (fType instanceof JCArrayTypeTree) {\nboolean multiDim=((JCArrayTypeTree)fType).elemtype instanceof JCArrayTypeTree;\nboolean primitiveArray=((JCArrayTypeTree)fType).elemtype instanceof JCPrimitiveTypeTree;\nboolean useDeepEquals=multiDim || !primitiveArray;\nJCExpression eqMethod=chainDots(typeNode,\"java\",\"util\",\"Arrays\",useDeepEquals ? \"deepEquals\" : \"equals\");\nList<JCExpression> args=List.of(thisFieldAccessor,otherFieldAccessor);\nstatements.append(maker.If(maker.Unary(getCtcInt(JCTree.class,\"NOT\"),maker.Apply(List.<JCExpression>nil(),eqMethod,args)),returnBool(maker,false),null));\n}\n else {\nName fieldName=((JCVariableDecl)fieldNode.get()).name;\nName thisDollarFieldName=thisDollar.append(fieldName);\nName otherDollarFieldName=otherDollar.append(fieldName);\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),thisDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),thisFieldAccessor));\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),otherDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),otherFieldAccessor));\nJCExpression thisEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(thisDollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\nJCExpression otherNotEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"NE\"),maker.Ident(otherDollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\nJCExpression thisEqualsThat=maker.Apply(List.<JCExpression>nil(),maker.Select(maker.Ident(thisDollarFieldName),typeNode.toName(\"equals\")),List.<JCExpression>of(maker.Ident(otherDollarFieldName)));\nJCExpression fieldsAreNotEqual=maker.Conditional(thisEqualsNull,otherNotEqualsNull,maker.Unary(getCtcInt(JCTree.class,\"NOT\"),thisEqualsThat));\nstatements.append(maker.If(fieldsAreNotEqual,returnBool(maker,false),null));\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 399,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3491,
        "startLineNumber" : 426,
        "startColumnNumber" : 2,
        "endLineNumber" : 475,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (JavacNode fieldNode : fields) {\n  JCExpression fType=getFieldType(fieldNode,fieldAccess);\n  JCExpression thisFieldAccessor=createFieldAccessor(maker,fieldNode,fieldAccess);\n  JCExpression otherFieldAccessor=createFieldAccessor(maker,fieldNode,fieldAccess,maker.Ident(otherName));\n  if (fType instanceof JCPrimitiveTypeTree) {\nswitch (((JCPrimitiveTypeTree)fType).getPrimitiveTypeKind()) {\ncase FLOAT:      statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,false));\n    break;\ncase DOUBLE:  statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,true));\nbreak;\ndefault:statements.append(maker.If(maker.Binary(getCtcInt(JCTree.class,\"NE\"),thisFieldAccessor,otherFieldAccessor),returnBool(maker,false),null));\nbreak;\n}\n}\n else if (fType instanceof JCArrayTypeTree) {\nboolean multiDim=((JCArrayTypeTree)fType).elemtype instanceof JCArrayTypeTree;\nboolean primitiveArray=((JCArrayTypeTree)fType).elemtype instanceof JCPrimitiveTypeTree;\nboolean useDeepEquals=multiDim || !primitiveArray;\nJCExpression eqMethod=chainDots(typeNode,\"java\",\"util\",\"Arrays\",useDeepEquals ? \"deepEquals\" : \"equals\");\nList<JCExpression> args=List.of(thisFieldAccessor,otherFieldAccessor);\nstatements.append(maker.If(maker.Unary(getCtcInt(JCTree.class,\"NOT\"),maker.Apply(List.<JCExpression>nil(),eqMethod,args)),returnBool(maker,false),null));\n}\n else {\nName fieldName=((JCVariableDecl)fieldNode.get()).name;\nName thisDollarFieldName=thisDollar.append(fieldName);\nName otherDollarFieldName=otherDollar.append(fieldName);\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),thisDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),thisFieldAccessor));\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),otherDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),otherFieldAccessor));\nJCExpression thisEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(thisDollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\nJCExpression otherNotEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"NE\"),maker.Ident(otherDollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\nJCExpression thisEqualsThat=maker.Apply(List.<JCExpression>nil(),maker.Select(maker.Ident(thisDollarFieldName),typeNode.toName(\"equals\")),List.<JCExpression>of(maker.Ident(otherDollarFieldName)));\nJCExpression fieldsAreNotEqual=maker.Conditional(thisEqualsNull,otherNotEqualsNull,maker.Unary(getCtcInt(JCTree.class,\"NOT\"),thisEqualsThat));\nstatements.append(maker.If(fieldsAreNotEqual,returnBool(maker,false),null));\n}\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 405,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7140,
        "startLineNumber" : 354,
        "startColumnNumber" : 161,
        "endLineNumber" : 483,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  TreeMaker maker=typeNode.getTreeMaker();\n  JCClassDecl type=(JCClassDecl)typeNode.get();\n  Name oName=typeNode.toName(\"o\");\n  Name otherName=typeNode.toName(\"other\");\n  Name thisName=typeNode.toName(\"this\");\n  JCAnnotation overrideAnnotation=maker.Annotation(chainDots(typeNode,\"java\",\"lang\",\"Override\"),List.<JCExpression>nil());\n  JCModifiers mods=maker.Modifiers(Flags.PUBLIC,List.of(overrideAnnotation));\n  JCExpression objectType=chainDots(typeNode,\"java\",\"lang\",\"Object\");\n  JCExpression returnType=maker.TypeIdent(getCtcInt(TypeTags.class,\"BOOLEAN\"));\n  ListBuffer<JCStatement> statements=ListBuffer.lb();\n  final List<JCVariableDecl> params=List.of(maker.VarDef(maker.Modifiers(Flags.FINAL),oName,objectType,null));\n{\n    statements.append(maker.If(maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(oName),maker.Ident(thisName)),returnBool(maker,true),null));\n  }\n{\n    JCUnary notInstanceOf=maker.Unary(getCtcInt(JCTree.class,\"NOT\"),maker.TypeTest(maker.Ident(oName),createTypeReference(typeNode)));\n    statements.append(maker.If(notInstanceOf,returnBool(maker,false),null));\n  }\n{\n    if (!fields.isEmpty() || needsCanEqual) {\n      final JCExpression selfType1, selfType2;\n      ListBuffer<JCExpression> wildcards1=ListBuffer.lb();\n      ListBuffer<JCExpression> wildcards2=ListBuffer.lb();\n      for (int i=0; i < type.typarams.length(); i++) {\n        wildcards1.append(maker.Wildcard(maker.TypeBoundKind(BoundKind.UNBOUND),null));\n        wildcards2.append(maker.Wildcard(maker.TypeBoundKind(BoundKind.UNBOUND),null));\n      }\n      if (type.typarams.isEmpty()) {\n        selfType1=maker.Ident(type.name);\n        selfType2=maker.Ident(type.name);\n      }\n else {\n        selfType1=maker.TypeApply(maker.Ident(type.name),wildcards1.toList());\n        selfType2=maker.TypeApply(maker.Ident(type.name),wildcards2.toList());\n      }\n      statements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),otherName,selfType1,maker.TypeCast(selfType2,maker.Ident(oName))));\n    }\n  }\n{\n    if (needsCanEqual) {\n      List<JCExpression> exprNil=List.nil();\n      JCExpression thisRef=maker.Ident(thisName);\n      JCExpression castThisRef=maker.TypeCast(chainDots(typeNode,\"java\",\"lang\",\"Object\"),thisRef);\n      JCExpression equalityCheck=maker.Apply(exprNil,maker.Select(maker.Ident(otherName),typeNode.toName(\"canEqual\")),List.of(castThisRef));\n      statements.append(maker.If(maker.Unary(getCtcInt(JCTree.class,\"NOT\"),equalityCheck),returnBool(maker,false),null));\n    }\n  }\n  if (callSuper) {\n    JCMethodInvocation callToSuper=maker.Apply(List.<JCExpression>nil(),maker.Select(maker.Ident(typeNode.toName(\"super\")),typeNode.toName(\"equals\")),List.<JCExpression>of(maker.Ident(oName)));\n    JCUnary superNotEqual=maker.Unary(getCtcInt(JCTree.class,\"NOT\"),callToSuper);\n    statements.append(maker.If(superNotEqual,returnBool(maker,false),null));\n  }\n  Name thisDollar=typeNode.toName(\"this$\");\n  Name otherDollar=typeNode.toName(\"other$\");\n  for (  JavacNode fieldNode : fields) {\n    JCExpression fType=getFieldType(fieldNode,fieldAccess);\n    JCExpression thisFieldAccessor=createFieldAccessor(maker,fieldNode,fieldAccess);\n    JCExpression otherFieldAccessor=createFieldAccessor(maker,fieldNode,fieldAccess,maker.Ident(otherName));\n    if (fType instanceof JCPrimitiveTypeTree) {\nswitch (((JCPrimitiveTypeTree)fType).getPrimitiveTypeKind()) {\ncase FLOAT:        statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,false));\n      break;\ncase DOUBLE:    statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,true));\n  break;\ndefault:statements.append(maker.If(maker.Binary(getCtcInt(JCTree.class,\"NE\"),thisFieldAccessor,otherFieldAccessor),returnBool(maker,false),null));\nbreak;\n}\n}\n else if (fType instanceof JCArrayTypeTree) {\nboolean multiDim=((JCArrayTypeTree)fType).elemtype instanceof JCArrayTypeTree;\nboolean primitiveArray=((JCArrayTypeTree)fType).elemtype instanceof JCPrimitiveTypeTree;\nboolean useDeepEquals=multiDim || !primitiveArray;\nJCExpression eqMethod=chainDots(typeNode,\"java\",\"util\",\"Arrays\",useDeepEquals ? \"deepEquals\" : \"equals\");\nList<JCExpression> args=List.of(thisFieldAccessor,otherFieldAccessor);\nstatements.append(maker.If(maker.Unary(getCtcInt(JCTree.class,\"NOT\"),maker.Apply(List.<JCExpression>nil(),eqMethod,args)),returnBool(maker,false),null));\n}\n else {\nName fieldName=((JCVariableDecl)fieldNode.get()).name;\nName thisDollarFieldName=thisDollar.append(fieldName);\nName otherDollarFieldName=otherDollar.append(fieldName);\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),thisDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),thisFieldAccessor));\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),otherDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),otherFieldAccessor));\nJCExpression thisEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(thisDollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\nJCExpression otherNotEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"NE\"),maker.Ident(otherDollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\nJCExpression thisEqualsThat=maker.Apply(List.<JCExpression>nil(),maker.Select(maker.Ident(thisDollarFieldName),typeNode.toName(\"equals\")),List.<JCExpression>of(maker.Ident(otherDollarFieldName)));\nJCExpression fieldsAreNotEqual=maker.Conditional(thisEqualsNull,otherNotEqualsNull,maker.Unary(getCtcInt(JCTree.class,\"NOT\"),thisEqualsThat));\nstatements.append(maker.If(fieldsAreNotEqual,returnBool(maker,false),null));\n}\n}\n{\nstatements.append(returnBool(maker,true));\n}\nJCBlock body=maker.Block(0,statements.toList());\nreturn recursiveSetGeneratedBy(maker.MethodDef(mods,typeNode.toName(\"equals\"),returnType,List.<JCTypeParameter>nil(),params,List.<JCExpression>nil(),body,null),source);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 993,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7300,
        "startLineNumber" : 354,
        "startColumnNumber" : 1,
        "endLineNumber" : 483,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private JCMethodDecl createEquals(JavacNode typeNode,List<JavacNode> fields,boolean callSuper,FieldAccess fieldAccess,boolean needsCanEqual,JCTree source){\n  TreeMaker maker=typeNode.getTreeMaker();\n  JCClassDecl type=(JCClassDecl)typeNode.get();\n  Name oName=typeNode.toName(\"o\");\n  Name otherName=typeNode.toName(\"other\");\n  Name thisName=typeNode.toName(\"this\");\n  JCAnnotation overrideAnnotation=maker.Annotation(chainDots(typeNode,\"java\",\"lang\",\"Override\"),List.<JCExpression>nil());\n  JCModifiers mods=maker.Modifiers(Flags.PUBLIC,List.of(overrideAnnotation));\n  JCExpression objectType=chainDots(typeNode,\"java\",\"lang\",\"Object\");\n  JCExpression returnType=maker.TypeIdent(getCtcInt(TypeTags.class,\"BOOLEAN\"));\n  ListBuffer<JCStatement> statements=ListBuffer.lb();\n  final List<JCVariableDecl> params=List.of(maker.VarDef(maker.Modifiers(Flags.FINAL),oName,objectType,null));\n{\n    statements.append(maker.If(maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(oName),maker.Ident(thisName)),returnBool(maker,true),null));\n  }\n{\n    JCUnary notInstanceOf=maker.Unary(getCtcInt(JCTree.class,\"NOT\"),maker.TypeTest(maker.Ident(oName),createTypeReference(typeNode)));\n    statements.append(maker.If(notInstanceOf,returnBool(maker,false),null));\n  }\n{\n    if (!fields.isEmpty() || needsCanEqual) {\n      final JCExpression selfType1, selfType2;\n      ListBuffer<JCExpression> wildcards1=ListBuffer.lb();\n      ListBuffer<JCExpression> wildcards2=ListBuffer.lb();\n      for (int i=0; i < type.typarams.length(); i++) {\n        wildcards1.append(maker.Wildcard(maker.TypeBoundKind(BoundKind.UNBOUND),null));\n        wildcards2.append(maker.Wildcard(maker.TypeBoundKind(BoundKind.UNBOUND),null));\n      }\n      if (type.typarams.isEmpty()) {\n        selfType1=maker.Ident(type.name);\n        selfType2=maker.Ident(type.name);\n      }\n else {\n        selfType1=maker.TypeApply(maker.Ident(type.name),wildcards1.toList());\n        selfType2=maker.TypeApply(maker.Ident(type.name),wildcards2.toList());\n      }\n      statements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),otherName,selfType1,maker.TypeCast(selfType2,maker.Ident(oName))));\n    }\n  }\n{\n    if (needsCanEqual) {\n      List<JCExpression> exprNil=List.nil();\n      JCExpression thisRef=maker.Ident(thisName);\n      JCExpression castThisRef=maker.TypeCast(chainDots(typeNode,\"java\",\"lang\",\"Object\"),thisRef);\n      JCExpression equalityCheck=maker.Apply(exprNil,maker.Select(maker.Ident(otherName),typeNode.toName(\"canEqual\")),List.of(castThisRef));\n      statements.append(maker.If(maker.Unary(getCtcInt(JCTree.class,\"NOT\"),equalityCheck),returnBool(maker,false),null));\n    }\n  }\n  if (callSuper) {\n    JCMethodInvocation callToSuper=maker.Apply(List.<JCExpression>nil(),maker.Select(maker.Ident(typeNode.toName(\"super\")),typeNode.toName(\"equals\")),List.<JCExpression>of(maker.Ident(oName)));\n    JCUnary superNotEqual=maker.Unary(getCtcInt(JCTree.class,\"NOT\"),callToSuper);\n    statements.append(maker.If(superNotEqual,returnBool(maker,false),null));\n  }\n  Name thisDollar=typeNode.toName(\"this$\");\n  Name otherDollar=typeNode.toName(\"other$\");\n  for (  JavacNode fieldNode : fields) {\n    JCExpression fType=getFieldType(fieldNode,fieldAccess);\n    JCExpression thisFieldAccessor=createFieldAccessor(maker,fieldNode,fieldAccess);\n    JCExpression otherFieldAccessor=createFieldAccessor(maker,fieldNode,fieldAccess,maker.Ident(otherName));\n    if (fType instanceof JCPrimitiveTypeTree) {\nswitch (((JCPrimitiveTypeTree)fType).getPrimitiveTypeKind()) {\ncase FLOAT:        statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,false));\n      break;\ncase DOUBLE:    statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,true));\n  break;\ndefault:statements.append(maker.If(maker.Binary(getCtcInt(JCTree.class,\"NE\"),thisFieldAccessor,otherFieldAccessor),returnBool(maker,false),null));\nbreak;\n}\n}\n else if (fType instanceof JCArrayTypeTree) {\nboolean multiDim=((JCArrayTypeTree)fType).elemtype instanceof JCArrayTypeTree;\nboolean primitiveArray=((JCArrayTypeTree)fType).elemtype instanceof JCPrimitiveTypeTree;\nboolean useDeepEquals=multiDim || !primitiveArray;\nJCExpression eqMethod=chainDots(typeNode,\"java\",\"util\",\"Arrays\",useDeepEquals ? \"deepEquals\" : \"equals\");\nList<JCExpression> args=List.of(thisFieldAccessor,otherFieldAccessor);\nstatements.append(maker.If(maker.Unary(getCtcInt(JCTree.class,\"NOT\"),maker.Apply(List.<JCExpression>nil(),eqMethod,args)),returnBool(maker,false),null));\n}\n else {\nName fieldName=((JCVariableDecl)fieldNode.get()).name;\nName thisDollarFieldName=thisDollar.append(fieldName);\nName otherDollarFieldName=otherDollar.append(fieldName);\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),thisDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),thisFieldAccessor));\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),otherDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),otherFieldAccessor));\nJCExpression thisEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(thisDollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\nJCExpression otherNotEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"NE\"),maker.Ident(otherDollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\nJCExpression thisEqualsThat=maker.Apply(List.<JCExpression>nil(),maker.Select(maker.Ident(thisDollarFieldName),typeNode.toName(\"equals\")),List.<JCExpression>of(maker.Ident(otherDollarFieldName)));\nJCExpression fieldsAreNotEqual=maker.Conditional(thisEqualsNull,otherNotEqualsNull,maker.Unary(getCtcInt(JCTree.class,\"NOT\"),thisEqualsThat));\nstatements.append(maker.If(fieldsAreNotEqual,returnBool(maker,false),null));\n}\n}\n{\nstatements.append(returnBool(maker,true));\n}\nJCBlock body=maker.Block(0,statements.toList());\nreturn recursiveSetGeneratedBy(maker.MethodDef(mods,typeNode.toName(\"equals\"),returnType,List.<JCTypeParameter>nil(),params,List.<JCExpression>nil(),body,null),source);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1023,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 438,
        "startColumnNumber" : 5,
        "endLineNumber" : 438,
        "endColumnNumber" : 115
      },
      "nodeContext" : "statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,true));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "lombok.javac.handlers.JCExpression"
  }, {
    "nodeContext" : "otherFieldAccessor",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 443,
      "startColumnNumber" : 79,
      "endLineNumber" : 443,
      "endColumnNumber" : 97
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 443,
        "startColumnNumber" : 16,
        "endLineNumber" : 443,
        "endColumnNumber" : 98
      },
      "nodeContext" : "maker.Binary(getCtcInt(JCTree.class,\"NE\"),thisFieldAccessor,otherFieldAccessor)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 443,
        "startColumnNumber" : 7,
        "endLineNumber" : 443,
        "endColumnNumber" : 131
      },
      "nodeContext" : "maker.If(maker.Binary(getCtcInt(JCTree.class,\"NE\"),thisFieldAccessor,otherFieldAccessor),returnBool(maker,false),null)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 151,
        "startLineNumber" : 442,
        "startColumnNumber" : 5,
        "endLineNumber" : 443,
        "endColumnNumber" : 132
      },
      "nodeContext" : "statements.append(maker.If(maker.Binary(getCtcInt(JCTree.class,\"NE\"),thisFieldAccessor,otherFieldAccessor),returnBool(maker,false),null))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 152,
        "startLineNumber" : 442,
        "startColumnNumber" : 5,
        "endLineNumber" : 443,
        "endColumnNumber" : 133
      },
      "nodeContext" : "statements.append(maker.If(maker.Binary(getCtcInt(JCTree.class,\"NE\"),thisFieldAccessor,otherFieldAccessor),returnBool(maker,false),null));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 23,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 770,
        "startLineNumber" : 431,
        "startColumnNumber" : 4,
        "endLineNumber" : 445,
        "endColumnNumber" : 5
      },
      "nodeContext" : "switch (((JCPrimitiveTypeTree)fType).getPrimitiveTypeKind()) {\ncase FLOAT:  statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,false));\nbreak;\ncase DOUBLE:statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,true));\nbreak;\ndefault:statements.append(maker.If(maker.Binary(getCtcInt(JCTree.class,\"NE\"),thisFieldAccessor,otherFieldAccessor),returnBool(maker,false),null));\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 61,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 781,
        "startLineNumber" : 430,
        "startColumnNumber" : 45,
        "endLineNumber" : 446,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\nswitch (((JCPrimitiveTypeTree)fType).getPrimitiveTypeKind()) {\ncase FLOAT:    statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,false));\n  break;\ncase DOUBLE:statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,true));\nbreak;\ndefault:statements.append(maker.If(maker.Binary(getCtcInt(JCTree.class,\"NE\"),thisFieldAccessor,otherFieldAccessor),returnBool(maker,false),null));\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 62,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3184,
        "startLineNumber" : 430,
        "startColumnNumber" : 3,
        "endLineNumber" : 474,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (fType instanceof JCPrimitiveTypeTree) {\nswitch (((JCPrimitiveTypeTree)fType).getPrimitiveTypeKind()) {\ncase FLOAT:    statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,false));\n  break;\ncase DOUBLE:statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,true));\nbreak;\ndefault:statements.append(maker.If(maker.Binary(getCtcInt(JCTree.class,\"NE\"),thisFieldAccessor,otherFieldAccessor),returnBool(maker,false),null));\nbreak;\n}\n}\n else if (fType instanceof JCArrayTypeTree) {\nboolean multiDim=((JCArrayTypeTree)fType).elemtype instanceof JCArrayTypeTree;\nboolean primitiveArray=((JCArrayTypeTree)fType).elemtype instanceof JCPrimitiveTypeTree;\nboolean useDeepEquals=multiDim || !primitiveArray;\nJCExpression eqMethod=chainDots(typeNode,\"java\",\"util\",\"Arrays\",useDeepEquals ? \"deepEquals\" : \"equals\");\nList<JCExpression> args=List.of(thisFieldAccessor,otherFieldAccessor);\nstatements.append(maker.If(maker.Unary(getCtcInt(JCTree.class,\"NOT\"),maker.Apply(List.<JCExpression>nil(),eqMethod,args)),returnBool(maker,false),null));\n}\n else {\nName fieldName=((JCVariableDecl)fieldNode.get()).name;\nName thisDollarFieldName=thisDollar.append(fieldName);\nName otherDollarFieldName=otherDollar.append(fieldName);\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),thisDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),thisFieldAccessor));\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),otherDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),otherFieldAccessor));\nJCExpression thisEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(thisDollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\nJCExpression otherNotEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"NE\"),maker.Ident(otherDollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\nJCExpression thisEqualsThat=maker.Apply(List.<JCExpression>nil(),maker.Select(maker.Ident(thisDollarFieldName),typeNode.toName(\"equals\")),List.<JCExpression>of(maker.Ident(otherDollarFieldName)));\nJCExpression fieldsAreNotEqual=maker.Conditional(thisEqualsNull,otherNotEqualsNull,maker.Unary(getCtcInt(JCTree.class,\"NOT\"),thisEqualsThat));\nstatements.append(maker.If(fieldsAreNotEqual,returnBool(maker,false),null));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 365,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3456,
        "startLineNumber" : 426,
        "startColumnNumber" : 37,
        "endLineNumber" : 475,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  JCExpression fType=getFieldType(fieldNode,fieldAccess);\n  JCExpression thisFieldAccessor=createFieldAccessor(maker,fieldNode,fieldAccess);\n  JCExpression otherFieldAccessor=createFieldAccessor(maker,fieldNode,fieldAccess,maker.Ident(otherName));\n  if (fType instanceof JCPrimitiveTypeTree) {\nswitch (((JCPrimitiveTypeTree)fType).getPrimitiveTypeKind()) {\ncase FLOAT:      statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,false));\n    break;\ncase DOUBLE:  statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,true));\nbreak;\ndefault:statements.append(maker.If(maker.Binary(getCtcInt(JCTree.class,\"NE\"),thisFieldAccessor,otherFieldAccessor),returnBool(maker,false),null));\nbreak;\n}\n}\n else if (fType instanceof JCArrayTypeTree) {\nboolean multiDim=((JCArrayTypeTree)fType).elemtype instanceof JCArrayTypeTree;\nboolean primitiveArray=((JCArrayTypeTree)fType).elemtype instanceof JCPrimitiveTypeTree;\nboolean useDeepEquals=multiDim || !primitiveArray;\nJCExpression eqMethod=chainDots(typeNode,\"java\",\"util\",\"Arrays\",useDeepEquals ? \"deepEquals\" : \"equals\");\nList<JCExpression> args=List.of(thisFieldAccessor,otherFieldAccessor);\nstatements.append(maker.If(maker.Unary(getCtcInt(JCTree.class,\"NOT\"),maker.Apply(List.<JCExpression>nil(),eqMethod,args)),returnBool(maker,false),null));\n}\n else {\nName fieldName=((JCVariableDecl)fieldNode.get()).name;\nName thisDollarFieldName=thisDollar.append(fieldName);\nName otherDollarFieldName=otherDollar.append(fieldName);\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),thisDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),thisFieldAccessor));\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),otherDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),otherFieldAccessor));\nJCExpression thisEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(thisDollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\nJCExpression otherNotEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"NE\"),maker.Ident(otherDollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\nJCExpression thisEqualsThat=maker.Apply(List.<JCExpression>nil(),maker.Select(maker.Ident(thisDollarFieldName),typeNode.toName(\"equals\")),List.<JCExpression>of(maker.Ident(otherDollarFieldName)));\nJCExpression fieldsAreNotEqual=maker.Conditional(thisEqualsNull,otherNotEqualsNull,maker.Unary(getCtcInt(JCTree.class,\"NOT\"),thisEqualsThat));\nstatements.append(maker.If(fieldsAreNotEqual,returnBool(maker,false),null));\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 399,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3491,
        "startLineNumber" : 426,
        "startColumnNumber" : 2,
        "endLineNumber" : 475,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (JavacNode fieldNode : fields) {\n  JCExpression fType=getFieldType(fieldNode,fieldAccess);\n  JCExpression thisFieldAccessor=createFieldAccessor(maker,fieldNode,fieldAccess);\n  JCExpression otherFieldAccessor=createFieldAccessor(maker,fieldNode,fieldAccess,maker.Ident(otherName));\n  if (fType instanceof JCPrimitiveTypeTree) {\nswitch (((JCPrimitiveTypeTree)fType).getPrimitiveTypeKind()) {\ncase FLOAT:      statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,false));\n    break;\ncase DOUBLE:  statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,true));\nbreak;\ndefault:statements.append(maker.If(maker.Binary(getCtcInt(JCTree.class,\"NE\"),thisFieldAccessor,otherFieldAccessor),returnBool(maker,false),null));\nbreak;\n}\n}\n else if (fType instanceof JCArrayTypeTree) {\nboolean multiDim=((JCArrayTypeTree)fType).elemtype instanceof JCArrayTypeTree;\nboolean primitiveArray=((JCArrayTypeTree)fType).elemtype instanceof JCPrimitiveTypeTree;\nboolean useDeepEquals=multiDim || !primitiveArray;\nJCExpression eqMethod=chainDots(typeNode,\"java\",\"util\",\"Arrays\",useDeepEquals ? \"deepEquals\" : \"equals\");\nList<JCExpression> args=List.of(thisFieldAccessor,otherFieldAccessor);\nstatements.append(maker.If(maker.Unary(getCtcInt(JCTree.class,\"NOT\"),maker.Apply(List.<JCExpression>nil(),eqMethod,args)),returnBool(maker,false),null));\n}\n else {\nName fieldName=((JCVariableDecl)fieldNode.get()).name;\nName thisDollarFieldName=thisDollar.append(fieldName);\nName otherDollarFieldName=otherDollar.append(fieldName);\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),thisDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),thisFieldAccessor));\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),otherDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),otherFieldAccessor));\nJCExpression thisEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(thisDollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\nJCExpression otherNotEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"NE\"),maker.Ident(otherDollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\nJCExpression thisEqualsThat=maker.Apply(List.<JCExpression>nil(),maker.Select(maker.Ident(thisDollarFieldName),typeNode.toName(\"equals\")),List.<JCExpression>of(maker.Ident(otherDollarFieldName)));\nJCExpression fieldsAreNotEqual=maker.Conditional(thisEqualsNull,otherNotEqualsNull,maker.Unary(getCtcInt(JCTree.class,\"NOT\"),thisEqualsThat));\nstatements.append(maker.If(fieldsAreNotEqual,returnBool(maker,false),null));\n}\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 405,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7140,
        "startLineNumber" : 354,
        "startColumnNumber" : 161,
        "endLineNumber" : 483,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  TreeMaker maker=typeNode.getTreeMaker();\n  JCClassDecl type=(JCClassDecl)typeNode.get();\n  Name oName=typeNode.toName(\"o\");\n  Name otherName=typeNode.toName(\"other\");\n  Name thisName=typeNode.toName(\"this\");\n  JCAnnotation overrideAnnotation=maker.Annotation(chainDots(typeNode,\"java\",\"lang\",\"Override\"),List.<JCExpression>nil());\n  JCModifiers mods=maker.Modifiers(Flags.PUBLIC,List.of(overrideAnnotation));\n  JCExpression objectType=chainDots(typeNode,\"java\",\"lang\",\"Object\");\n  JCExpression returnType=maker.TypeIdent(getCtcInt(TypeTags.class,\"BOOLEAN\"));\n  ListBuffer<JCStatement> statements=ListBuffer.lb();\n  final List<JCVariableDecl> params=List.of(maker.VarDef(maker.Modifiers(Flags.FINAL),oName,objectType,null));\n{\n    statements.append(maker.If(maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(oName),maker.Ident(thisName)),returnBool(maker,true),null));\n  }\n{\n    JCUnary notInstanceOf=maker.Unary(getCtcInt(JCTree.class,\"NOT\"),maker.TypeTest(maker.Ident(oName),createTypeReference(typeNode)));\n    statements.append(maker.If(notInstanceOf,returnBool(maker,false),null));\n  }\n{\n    if (!fields.isEmpty() || needsCanEqual) {\n      final JCExpression selfType1, selfType2;\n      ListBuffer<JCExpression> wildcards1=ListBuffer.lb();\n      ListBuffer<JCExpression> wildcards2=ListBuffer.lb();\n      for (int i=0; i < type.typarams.length(); i++) {\n        wildcards1.append(maker.Wildcard(maker.TypeBoundKind(BoundKind.UNBOUND),null));\n        wildcards2.append(maker.Wildcard(maker.TypeBoundKind(BoundKind.UNBOUND),null));\n      }\n      if (type.typarams.isEmpty()) {\n        selfType1=maker.Ident(type.name);\n        selfType2=maker.Ident(type.name);\n      }\n else {\n        selfType1=maker.TypeApply(maker.Ident(type.name),wildcards1.toList());\n        selfType2=maker.TypeApply(maker.Ident(type.name),wildcards2.toList());\n      }\n      statements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),otherName,selfType1,maker.TypeCast(selfType2,maker.Ident(oName))));\n    }\n  }\n{\n    if (needsCanEqual) {\n      List<JCExpression> exprNil=List.nil();\n      JCExpression thisRef=maker.Ident(thisName);\n      JCExpression castThisRef=maker.TypeCast(chainDots(typeNode,\"java\",\"lang\",\"Object\"),thisRef);\n      JCExpression equalityCheck=maker.Apply(exprNil,maker.Select(maker.Ident(otherName),typeNode.toName(\"canEqual\")),List.of(castThisRef));\n      statements.append(maker.If(maker.Unary(getCtcInt(JCTree.class,\"NOT\"),equalityCheck),returnBool(maker,false),null));\n    }\n  }\n  if (callSuper) {\n    JCMethodInvocation callToSuper=maker.Apply(List.<JCExpression>nil(),maker.Select(maker.Ident(typeNode.toName(\"super\")),typeNode.toName(\"equals\")),List.<JCExpression>of(maker.Ident(oName)));\n    JCUnary superNotEqual=maker.Unary(getCtcInt(JCTree.class,\"NOT\"),callToSuper);\n    statements.append(maker.If(superNotEqual,returnBool(maker,false),null));\n  }\n  Name thisDollar=typeNode.toName(\"this$\");\n  Name otherDollar=typeNode.toName(\"other$\");\n  for (  JavacNode fieldNode : fields) {\n    JCExpression fType=getFieldType(fieldNode,fieldAccess);\n    JCExpression thisFieldAccessor=createFieldAccessor(maker,fieldNode,fieldAccess);\n    JCExpression otherFieldAccessor=createFieldAccessor(maker,fieldNode,fieldAccess,maker.Ident(otherName));\n    if (fType instanceof JCPrimitiveTypeTree) {\nswitch (((JCPrimitiveTypeTree)fType).getPrimitiveTypeKind()) {\ncase FLOAT:        statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,false));\n      break;\ncase DOUBLE:    statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,true));\n  break;\ndefault:statements.append(maker.If(maker.Binary(getCtcInt(JCTree.class,\"NE\"),thisFieldAccessor,otherFieldAccessor),returnBool(maker,false),null));\nbreak;\n}\n}\n else if (fType instanceof JCArrayTypeTree) {\nboolean multiDim=((JCArrayTypeTree)fType).elemtype instanceof JCArrayTypeTree;\nboolean primitiveArray=((JCArrayTypeTree)fType).elemtype instanceof JCPrimitiveTypeTree;\nboolean useDeepEquals=multiDim || !primitiveArray;\nJCExpression eqMethod=chainDots(typeNode,\"java\",\"util\",\"Arrays\",useDeepEquals ? \"deepEquals\" : \"equals\");\nList<JCExpression> args=List.of(thisFieldAccessor,otherFieldAccessor);\nstatements.append(maker.If(maker.Unary(getCtcInt(JCTree.class,\"NOT\"),maker.Apply(List.<JCExpression>nil(),eqMethod,args)),returnBool(maker,false),null));\n}\n else {\nName fieldName=((JCVariableDecl)fieldNode.get()).name;\nName thisDollarFieldName=thisDollar.append(fieldName);\nName otherDollarFieldName=otherDollar.append(fieldName);\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),thisDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),thisFieldAccessor));\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),otherDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),otherFieldAccessor));\nJCExpression thisEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(thisDollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\nJCExpression otherNotEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"NE\"),maker.Ident(otherDollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\nJCExpression thisEqualsThat=maker.Apply(List.<JCExpression>nil(),maker.Select(maker.Ident(thisDollarFieldName),typeNode.toName(\"equals\")),List.<JCExpression>of(maker.Ident(otherDollarFieldName)));\nJCExpression fieldsAreNotEqual=maker.Conditional(thisEqualsNull,otherNotEqualsNull,maker.Unary(getCtcInt(JCTree.class,\"NOT\"),thisEqualsThat));\nstatements.append(maker.If(fieldsAreNotEqual,returnBool(maker,false),null));\n}\n}\n{\nstatements.append(returnBool(maker,true));\n}\nJCBlock body=maker.Block(0,statements.toList());\nreturn recursiveSetGeneratedBy(maker.MethodDef(mods,typeNode.toName(\"equals\"),returnType,List.<JCTypeParameter>nil(),params,List.<JCExpression>nil(),body,null),source);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 993,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7300,
        "startLineNumber" : 354,
        "startColumnNumber" : 1,
        "endLineNumber" : 483,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private JCMethodDecl createEquals(JavacNode typeNode,List<JavacNode> fields,boolean callSuper,FieldAccess fieldAccess,boolean needsCanEqual,JCTree source){\n  TreeMaker maker=typeNode.getTreeMaker();\n  JCClassDecl type=(JCClassDecl)typeNode.get();\n  Name oName=typeNode.toName(\"o\");\n  Name otherName=typeNode.toName(\"other\");\n  Name thisName=typeNode.toName(\"this\");\n  JCAnnotation overrideAnnotation=maker.Annotation(chainDots(typeNode,\"java\",\"lang\",\"Override\"),List.<JCExpression>nil());\n  JCModifiers mods=maker.Modifiers(Flags.PUBLIC,List.of(overrideAnnotation));\n  JCExpression objectType=chainDots(typeNode,\"java\",\"lang\",\"Object\");\n  JCExpression returnType=maker.TypeIdent(getCtcInt(TypeTags.class,\"BOOLEAN\"));\n  ListBuffer<JCStatement> statements=ListBuffer.lb();\n  final List<JCVariableDecl> params=List.of(maker.VarDef(maker.Modifiers(Flags.FINAL),oName,objectType,null));\n{\n    statements.append(maker.If(maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(oName),maker.Ident(thisName)),returnBool(maker,true),null));\n  }\n{\n    JCUnary notInstanceOf=maker.Unary(getCtcInt(JCTree.class,\"NOT\"),maker.TypeTest(maker.Ident(oName),createTypeReference(typeNode)));\n    statements.append(maker.If(notInstanceOf,returnBool(maker,false),null));\n  }\n{\n    if (!fields.isEmpty() || needsCanEqual) {\n      final JCExpression selfType1, selfType2;\n      ListBuffer<JCExpression> wildcards1=ListBuffer.lb();\n      ListBuffer<JCExpression> wildcards2=ListBuffer.lb();\n      for (int i=0; i < type.typarams.length(); i++) {\n        wildcards1.append(maker.Wildcard(maker.TypeBoundKind(BoundKind.UNBOUND),null));\n        wildcards2.append(maker.Wildcard(maker.TypeBoundKind(BoundKind.UNBOUND),null));\n      }\n      if (type.typarams.isEmpty()) {\n        selfType1=maker.Ident(type.name);\n        selfType2=maker.Ident(type.name);\n      }\n else {\n        selfType1=maker.TypeApply(maker.Ident(type.name),wildcards1.toList());\n        selfType2=maker.TypeApply(maker.Ident(type.name),wildcards2.toList());\n      }\n      statements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),otherName,selfType1,maker.TypeCast(selfType2,maker.Ident(oName))));\n    }\n  }\n{\n    if (needsCanEqual) {\n      List<JCExpression> exprNil=List.nil();\n      JCExpression thisRef=maker.Ident(thisName);\n      JCExpression castThisRef=maker.TypeCast(chainDots(typeNode,\"java\",\"lang\",\"Object\"),thisRef);\n      JCExpression equalityCheck=maker.Apply(exprNil,maker.Select(maker.Ident(otherName),typeNode.toName(\"canEqual\")),List.of(castThisRef));\n      statements.append(maker.If(maker.Unary(getCtcInt(JCTree.class,\"NOT\"),equalityCheck),returnBool(maker,false),null));\n    }\n  }\n  if (callSuper) {\n    JCMethodInvocation callToSuper=maker.Apply(List.<JCExpression>nil(),maker.Select(maker.Ident(typeNode.toName(\"super\")),typeNode.toName(\"equals\")),List.<JCExpression>of(maker.Ident(oName)));\n    JCUnary superNotEqual=maker.Unary(getCtcInt(JCTree.class,\"NOT\"),callToSuper);\n    statements.append(maker.If(superNotEqual,returnBool(maker,false),null));\n  }\n  Name thisDollar=typeNode.toName(\"this$\");\n  Name otherDollar=typeNode.toName(\"other$\");\n  for (  JavacNode fieldNode : fields) {\n    JCExpression fType=getFieldType(fieldNode,fieldAccess);\n    JCExpression thisFieldAccessor=createFieldAccessor(maker,fieldNode,fieldAccess);\n    JCExpression otherFieldAccessor=createFieldAccessor(maker,fieldNode,fieldAccess,maker.Ident(otherName));\n    if (fType instanceof JCPrimitiveTypeTree) {\nswitch (((JCPrimitiveTypeTree)fType).getPrimitiveTypeKind()) {\ncase FLOAT:        statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,false));\n      break;\ncase DOUBLE:    statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,true));\n  break;\ndefault:statements.append(maker.If(maker.Binary(getCtcInt(JCTree.class,\"NE\"),thisFieldAccessor,otherFieldAccessor),returnBool(maker,false),null));\nbreak;\n}\n}\n else if (fType instanceof JCArrayTypeTree) {\nboolean multiDim=((JCArrayTypeTree)fType).elemtype instanceof JCArrayTypeTree;\nboolean primitiveArray=((JCArrayTypeTree)fType).elemtype instanceof JCPrimitiveTypeTree;\nboolean useDeepEquals=multiDim || !primitiveArray;\nJCExpression eqMethod=chainDots(typeNode,\"java\",\"util\",\"Arrays\",useDeepEquals ? \"deepEquals\" : \"equals\");\nList<JCExpression> args=List.of(thisFieldAccessor,otherFieldAccessor);\nstatements.append(maker.If(maker.Unary(getCtcInt(JCTree.class,\"NOT\"),maker.Apply(List.<JCExpression>nil(),eqMethod,args)),returnBool(maker,false),null));\n}\n else {\nName fieldName=((JCVariableDecl)fieldNode.get()).name;\nName thisDollarFieldName=thisDollar.append(fieldName);\nName otherDollarFieldName=otherDollar.append(fieldName);\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),thisDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),thisFieldAccessor));\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),otherDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),otherFieldAccessor));\nJCExpression thisEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(thisDollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\nJCExpression otherNotEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"NE\"),maker.Ident(otherDollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\nJCExpression thisEqualsThat=maker.Apply(List.<JCExpression>nil(),maker.Select(maker.Ident(thisDollarFieldName),typeNode.toName(\"equals\")),List.<JCExpression>of(maker.Ident(otherDollarFieldName)));\nJCExpression fieldsAreNotEqual=maker.Conditional(thisEqualsNull,otherNotEqualsNull,maker.Unary(getCtcInt(JCTree.class,\"NOT\"),thisEqualsThat));\nstatements.append(maker.If(fieldsAreNotEqual,returnBool(maker,false),null));\n}\n}\n{\nstatements.append(returnBool(maker,true));\n}\nJCBlock body=maker.Block(0,statements.toList());\nreturn recursiveSetGeneratedBy(maker.MethodDef(mods,typeNode.toName(\"equals\"),returnType,List.<JCTypeParameter>nil(),params,List.<JCExpression>nil(),body,null),source);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1023,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 443,
        "startColumnNumber" : 7,
        "endLineNumber" : 443,
        "endColumnNumber" : 131
      },
      "nodeContext" : "maker.If(maker.Binary(getCtcInt(JCTree.class,\"NE\"),thisFieldAccessor,otherFieldAccessor),returnBool(maker,false),null)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "lombok.javac.handlers.JCExpression"
  }, {
    "nodeContext" : "otherFieldAccessor",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 453,
      "startColumnNumber" : 57,
      "endLineNumber" : 453,
      "endColumnNumber" : 75
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 453,
        "startColumnNumber" : 30,
        "endLineNumber" : 453,
        "endColumnNumber" : 76
      },
      "nodeContext" : "List.of(thisFieldAccessor,otherFieldAccessor)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 453,
        "startColumnNumber" : 23,
        "endLineNumber" : 453,
        "endColumnNumber" : 76
      },
      "nodeContext" : "args=List.of(thisFieldAccessor,otherFieldAccessor)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 453,
        "startColumnNumber" : 4,
        "endLineNumber" : 453,
        "endColumnNumber" : 77
      },
      "nodeContext" : "List<JCExpression> args=List.of(thisFieldAccessor,otherFieldAccessor);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 739,
        "startLineNumber" : 446,
        "startColumnNumber" : 48,
        "endLineNumber" : 456,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  boolean multiDim=((JCArrayTypeTree)fType).elemtype instanceof JCArrayTypeTree;\n  boolean primitiveArray=((JCArrayTypeTree)fType).elemtype instanceof JCPrimitiveTypeTree;\n  boolean useDeepEquals=multiDim || !primitiveArray;\n  JCExpression eqMethod=chainDots(typeNode,\"java\",\"util\",\"Arrays\",useDeepEquals ? \"deepEquals\" : \"equals\");\n  List<JCExpression> args=List.of(thisFieldAccessor,otherFieldAccessor);\n  statements.append(maker.If(maker.Unary(getCtcInt(JCTree.class,\"NOT\"),maker.Apply(List.<JCExpression>nil(),eqMethod,args)),returnBool(maker,false),null));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 96,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2355,
        "startLineNumber" : 446,
        "startColumnNumber" : 10,
        "endLineNumber" : 474,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (fType instanceof JCArrayTypeTree) {\n  boolean multiDim=((JCArrayTypeTree)fType).elemtype instanceof JCArrayTypeTree;\n  boolean primitiveArray=((JCArrayTypeTree)fType).elemtype instanceof JCPrimitiveTypeTree;\n  boolean useDeepEquals=multiDim || !primitiveArray;\n  JCExpression eqMethod=chainDots(typeNode,\"java\",\"util\",\"Arrays\",useDeepEquals ? \"deepEquals\" : \"equals\");\n  List<JCExpression> args=List.of(thisFieldAccessor,otherFieldAccessor);\n  statements.append(maker.If(maker.Unary(getCtcInt(JCTree.class,\"NOT\"),maker.Apply(List.<JCExpression>nil(),eqMethod,args)),returnBool(maker,false),null));\n}\n else {\n  Name fieldName=((JCVariableDecl)fieldNode.get()).name;\n  Name thisDollarFieldName=thisDollar.append(fieldName);\n  Name otherDollarFieldName=otherDollar.append(fieldName);\n  statements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),thisDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),thisFieldAccessor));\n  statements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),otherDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),otherFieldAccessor));\n  JCExpression thisEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(thisDollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\n  JCExpression otherNotEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"NE\"),maker.Ident(otherDollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\n  JCExpression thisEqualsThat=maker.Apply(List.<JCExpression>nil(),maker.Select(maker.Ident(thisDollarFieldName),typeNode.toName(\"equals\")),List.<JCExpression>of(maker.Ident(otherDollarFieldName)));\n  JCExpression fieldsAreNotEqual=maker.Conditional(thisEqualsNull,otherNotEqualsNull,maker.Unary(getCtcInt(JCTree.class,\"NOT\"),thisEqualsThat));\n  statements.append(maker.If(fieldsAreNotEqual,returnBool(maker,false),null));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 298,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3184,
        "startLineNumber" : 430,
        "startColumnNumber" : 3,
        "endLineNumber" : 474,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (fType instanceof JCPrimitiveTypeTree) {\nswitch (((JCPrimitiveTypeTree)fType).getPrimitiveTypeKind()) {\ncase FLOAT:    statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,false));\n  break;\ncase DOUBLE:statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,true));\nbreak;\ndefault:statements.append(maker.If(maker.Binary(getCtcInt(JCTree.class,\"NE\"),thisFieldAccessor,otherFieldAccessor),returnBool(maker,false),null));\nbreak;\n}\n}\n else if (fType instanceof JCArrayTypeTree) {\nboolean multiDim=((JCArrayTypeTree)fType).elemtype instanceof JCArrayTypeTree;\nboolean primitiveArray=((JCArrayTypeTree)fType).elemtype instanceof JCPrimitiveTypeTree;\nboolean useDeepEquals=multiDim || !primitiveArray;\nJCExpression eqMethod=chainDots(typeNode,\"java\",\"util\",\"Arrays\",useDeepEquals ? \"deepEquals\" : \"equals\");\nList<JCExpression> args=List.of(thisFieldAccessor,otherFieldAccessor);\nstatements.append(maker.If(maker.Unary(getCtcInt(JCTree.class,\"NOT\"),maker.Apply(List.<JCExpression>nil(),eqMethod,args)),returnBool(maker,false),null));\n}\n else {\nName fieldName=((JCVariableDecl)fieldNode.get()).name;\nName thisDollarFieldName=thisDollar.append(fieldName);\nName otherDollarFieldName=otherDollar.append(fieldName);\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),thisDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),thisFieldAccessor));\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),otherDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),otherFieldAccessor));\nJCExpression thisEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(thisDollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\nJCExpression otherNotEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"NE\"),maker.Ident(otherDollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\nJCExpression thisEqualsThat=maker.Apply(List.<JCExpression>nil(),maker.Select(maker.Ident(thisDollarFieldName),typeNode.toName(\"equals\")),List.<JCExpression>of(maker.Ident(otherDollarFieldName)));\nJCExpression fieldsAreNotEqual=maker.Conditional(thisEqualsNull,otherNotEqualsNull,maker.Unary(getCtcInt(JCTree.class,\"NOT\"),thisEqualsThat));\nstatements.append(maker.If(fieldsAreNotEqual,returnBool(maker,false),null));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 365,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3456,
        "startLineNumber" : 426,
        "startColumnNumber" : 37,
        "endLineNumber" : 475,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  JCExpression fType=getFieldType(fieldNode,fieldAccess);\n  JCExpression thisFieldAccessor=createFieldAccessor(maker,fieldNode,fieldAccess);\n  JCExpression otherFieldAccessor=createFieldAccessor(maker,fieldNode,fieldAccess,maker.Ident(otherName));\n  if (fType instanceof JCPrimitiveTypeTree) {\nswitch (((JCPrimitiveTypeTree)fType).getPrimitiveTypeKind()) {\ncase FLOAT:      statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,false));\n    break;\ncase DOUBLE:  statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,true));\nbreak;\ndefault:statements.append(maker.If(maker.Binary(getCtcInt(JCTree.class,\"NE\"),thisFieldAccessor,otherFieldAccessor),returnBool(maker,false),null));\nbreak;\n}\n}\n else if (fType instanceof JCArrayTypeTree) {\nboolean multiDim=((JCArrayTypeTree)fType).elemtype instanceof JCArrayTypeTree;\nboolean primitiveArray=((JCArrayTypeTree)fType).elemtype instanceof JCPrimitiveTypeTree;\nboolean useDeepEquals=multiDim || !primitiveArray;\nJCExpression eqMethod=chainDots(typeNode,\"java\",\"util\",\"Arrays\",useDeepEquals ? \"deepEquals\" : \"equals\");\nList<JCExpression> args=List.of(thisFieldAccessor,otherFieldAccessor);\nstatements.append(maker.If(maker.Unary(getCtcInt(JCTree.class,\"NOT\"),maker.Apply(List.<JCExpression>nil(),eqMethod,args)),returnBool(maker,false),null));\n}\n else {\nName fieldName=((JCVariableDecl)fieldNode.get()).name;\nName thisDollarFieldName=thisDollar.append(fieldName);\nName otherDollarFieldName=otherDollar.append(fieldName);\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),thisDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),thisFieldAccessor));\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),otherDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),otherFieldAccessor));\nJCExpression thisEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(thisDollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\nJCExpression otherNotEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"NE\"),maker.Ident(otherDollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\nJCExpression thisEqualsThat=maker.Apply(List.<JCExpression>nil(),maker.Select(maker.Ident(thisDollarFieldName),typeNode.toName(\"equals\")),List.<JCExpression>of(maker.Ident(otherDollarFieldName)));\nJCExpression fieldsAreNotEqual=maker.Conditional(thisEqualsNull,otherNotEqualsNull,maker.Unary(getCtcInt(JCTree.class,\"NOT\"),thisEqualsThat));\nstatements.append(maker.If(fieldsAreNotEqual,returnBool(maker,false),null));\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 399,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3491,
        "startLineNumber" : 426,
        "startColumnNumber" : 2,
        "endLineNumber" : 475,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (JavacNode fieldNode : fields) {\n  JCExpression fType=getFieldType(fieldNode,fieldAccess);\n  JCExpression thisFieldAccessor=createFieldAccessor(maker,fieldNode,fieldAccess);\n  JCExpression otherFieldAccessor=createFieldAccessor(maker,fieldNode,fieldAccess,maker.Ident(otherName));\n  if (fType instanceof JCPrimitiveTypeTree) {\nswitch (((JCPrimitiveTypeTree)fType).getPrimitiveTypeKind()) {\ncase FLOAT:      statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,false));\n    break;\ncase DOUBLE:  statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,true));\nbreak;\ndefault:statements.append(maker.If(maker.Binary(getCtcInt(JCTree.class,\"NE\"),thisFieldAccessor,otherFieldAccessor),returnBool(maker,false),null));\nbreak;\n}\n}\n else if (fType instanceof JCArrayTypeTree) {\nboolean multiDim=((JCArrayTypeTree)fType).elemtype instanceof JCArrayTypeTree;\nboolean primitiveArray=((JCArrayTypeTree)fType).elemtype instanceof JCPrimitiveTypeTree;\nboolean useDeepEquals=multiDim || !primitiveArray;\nJCExpression eqMethod=chainDots(typeNode,\"java\",\"util\",\"Arrays\",useDeepEquals ? \"deepEquals\" : \"equals\");\nList<JCExpression> args=List.of(thisFieldAccessor,otherFieldAccessor);\nstatements.append(maker.If(maker.Unary(getCtcInt(JCTree.class,\"NOT\"),maker.Apply(List.<JCExpression>nil(),eqMethod,args)),returnBool(maker,false),null));\n}\n else {\nName fieldName=((JCVariableDecl)fieldNode.get()).name;\nName thisDollarFieldName=thisDollar.append(fieldName);\nName otherDollarFieldName=otherDollar.append(fieldName);\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),thisDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),thisFieldAccessor));\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),otherDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),otherFieldAccessor));\nJCExpression thisEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(thisDollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\nJCExpression otherNotEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"NE\"),maker.Ident(otherDollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\nJCExpression thisEqualsThat=maker.Apply(List.<JCExpression>nil(),maker.Select(maker.Ident(thisDollarFieldName),typeNode.toName(\"equals\")),List.<JCExpression>of(maker.Ident(otherDollarFieldName)));\nJCExpression fieldsAreNotEqual=maker.Conditional(thisEqualsNull,otherNotEqualsNull,maker.Unary(getCtcInt(JCTree.class,\"NOT\"),thisEqualsThat));\nstatements.append(maker.If(fieldsAreNotEqual,returnBool(maker,false),null));\n}\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 405,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7140,
        "startLineNumber" : 354,
        "startColumnNumber" : 161,
        "endLineNumber" : 483,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  TreeMaker maker=typeNode.getTreeMaker();\n  JCClassDecl type=(JCClassDecl)typeNode.get();\n  Name oName=typeNode.toName(\"o\");\n  Name otherName=typeNode.toName(\"other\");\n  Name thisName=typeNode.toName(\"this\");\n  JCAnnotation overrideAnnotation=maker.Annotation(chainDots(typeNode,\"java\",\"lang\",\"Override\"),List.<JCExpression>nil());\n  JCModifiers mods=maker.Modifiers(Flags.PUBLIC,List.of(overrideAnnotation));\n  JCExpression objectType=chainDots(typeNode,\"java\",\"lang\",\"Object\");\n  JCExpression returnType=maker.TypeIdent(getCtcInt(TypeTags.class,\"BOOLEAN\"));\n  ListBuffer<JCStatement> statements=ListBuffer.lb();\n  final List<JCVariableDecl> params=List.of(maker.VarDef(maker.Modifiers(Flags.FINAL),oName,objectType,null));\n{\n    statements.append(maker.If(maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(oName),maker.Ident(thisName)),returnBool(maker,true),null));\n  }\n{\n    JCUnary notInstanceOf=maker.Unary(getCtcInt(JCTree.class,\"NOT\"),maker.TypeTest(maker.Ident(oName),createTypeReference(typeNode)));\n    statements.append(maker.If(notInstanceOf,returnBool(maker,false),null));\n  }\n{\n    if (!fields.isEmpty() || needsCanEqual) {\n      final JCExpression selfType1, selfType2;\n      ListBuffer<JCExpression> wildcards1=ListBuffer.lb();\n      ListBuffer<JCExpression> wildcards2=ListBuffer.lb();\n      for (int i=0; i < type.typarams.length(); i++) {\n        wildcards1.append(maker.Wildcard(maker.TypeBoundKind(BoundKind.UNBOUND),null));\n        wildcards2.append(maker.Wildcard(maker.TypeBoundKind(BoundKind.UNBOUND),null));\n      }\n      if (type.typarams.isEmpty()) {\n        selfType1=maker.Ident(type.name);\n        selfType2=maker.Ident(type.name);\n      }\n else {\n        selfType1=maker.TypeApply(maker.Ident(type.name),wildcards1.toList());\n        selfType2=maker.TypeApply(maker.Ident(type.name),wildcards2.toList());\n      }\n      statements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),otherName,selfType1,maker.TypeCast(selfType2,maker.Ident(oName))));\n    }\n  }\n{\n    if (needsCanEqual) {\n      List<JCExpression> exprNil=List.nil();\n      JCExpression thisRef=maker.Ident(thisName);\n      JCExpression castThisRef=maker.TypeCast(chainDots(typeNode,\"java\",\"lang\",\"Object\"),thisRef);\n      JCExpression equalityCheck=maker.Apply(exprNil,maker.Select(maker.Ident(otherName),typeNode.toName(\"canEqual\")),List.of(castThisRef));\n      statements.append(maker.If(maker.Unary(getCtcInt(JCTree.class,\"NOT\"),equalityCheck),returnBool(maker,false),null));\n    }\n  }\n  if (callSuper) {\n    JCMethodInvocation callToSuper=maker.Apply(List.<JCExpression>nil(),maker.Select(maker.Ident(typeNode.toName(\"super\")),typeNode.toName(\"equals\")),List.<JCExpression>of(maker.Ident(oName)));\n    JCUnary superNotEqual=maker.Unary(getCtcInt(JCTree.class,\"NOT\"),callToSuper);\n    statements.append(maker.If(superNotEqual,returnBool(maker,false),null));\n  }\n  Name thisDollar=typeNode.toName(\"this$\");\n  Name otherDollar=typeNode.toName(\"other$\");\n  for (  JavacNode fieldNode : fields) {\n    JCExpression fType=getFieldType(fieldNode,fieldAccess);\n    JCExpression thisFieldAccessor=createFieldAccessor(maker,fieldNode,fieldAccess);\n    JCExpression otherFieldAccessor=createFieldAccessor(maker,fieldNode,fieldAccess,maker.Ident(otherName));\n    if (fType instanceof JCPrimitiveTypeTree) {\nswitch (((JCPrimitiveTypeTree)fType).getPrimitiveTypeKind()) {\ncase FLOAT:        statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,false));\n      break;\ncase DOUBLE:    statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,true));\n  break;\ndefault:statements.append(maker.If(maker.Binary(getCtcInt(JCTree.class,\"NE\"),thisFieldAccessor,otherFieldAccessor),returnBool(maker,false),null));\nbreak;\n}\n}\n else if (fType instanceof JCArrayTypeTree) {\nboolean multiDim=((JCArrayTypeTree)fType).elemtype instanceof JCArrayTypeTree;\nboolean primitiveArray=((JCArrayTypeTree)fType).elemtype instanceof JCPrimitiveTypeTree;\nboolean useDeepEquals=multiDim || !primitiveArray;\nJCExpression eqMethod=chainDots(typeNode,\"java\",\"util\",\"Arrays\",useDeepEquals ? \"deepEquals\" : \"equals\");\nList<JCExpression> args=List.of(thisFieldAccessor,otherFieldAccessor);\nstatements.append(maker.If(maker.Unary(getCtcInt(JCTree.class,\"NOT\"),maker.Apply(List.<JCExpression>nil(),eqMethod,args)),returnBool(maker,false),null));\n}\n else {\nName fieldName=((JCVariableDecl)fieldNode.get()).name;\nName thisDollarFieldName=thisDollar.append(fieldName);\nName otherDollarFieldName=otherDollar.append(fieldName);\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),thisDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),thisFieldAccessor));\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),otherDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),otherFieldAccessor));\nJCExpression thisEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(thisDollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\nJCExpression otherNotEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"NE\"),maker.Ident(otherDollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\nJCExpression thisEqualsThat=maker.Apply(List.<JCExpression>nil(),maker.Select(maker.Ident(thisDollarFieldName),typeNode.toName(\"equals\")),List.<JCExpression>of(maker.Ident(otherDollarFieldName)));\nJCExpression fieldsAreNotEqual=maker.Conditional(thisEqualsNull,otherNotEqualsNull,maker.Unary(getCtcInt(JCTree.class,\"NOT\"),thisEqualsThat));\nstatements.append(maker.If(fieldsAreNotEqual,returnBool(maker,false),null));\n}\n}\n{\nstatements.append(returnBool(maker,true));\n}\nJCBlock body=maker.Block(0,statements.toList());\nreturn recursiveSetGeneratedBy(maker.MethodDef(mods,typeNode.toName(\"equals\"),returnType,List.<JCTypeParameter>nil(),params,List.<JCExpression>nil(),body,null),source);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 993,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7300,
        "startLineNumber" : 354,
        "startColumnNumber" : 1,
        "endLineNumber" : 483,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private JCMethodDecl createEquals(JavacNode typeNode,List<JavacNode> fields,boolean callSuper,FieldAccess fieldAccess,boolean needsCanEqual,JCTree source){\n  TreeMaker maker=typeNode.getTreeMaker();\n  JCClassDecl type=(JCClassDecl)typeNode.get();\n  Name oName=typeNode.toName(\"o\");\n  Name otherName=typeNode.toName(\"other\");\n  Name thisName=typeNode.toName(\"this\");\n  JCAnnotation overrideAnnotation=maker.Annotation(chainDots(typeNode,\"java\",\"lang\",\"Override\"),List.<JCExpression>nil());\n  JCModifiers mods=maker.Modifiers(Flags.PUBLIC,List.of(overrideAnnotation));\n  JCExpression objectType=chainDots(typeNode,\"java\",\"lang\",\"Object\");\n  JCExpression returnType=maker.TypeIdent(getCtcInt(TypeTags.class,\"BOOLEAN\"));\n  ListBuffer<JCStatement> statements=ListBuffer.lb();\n  final List<JCVariableDecl> params=List.of(maker.VarDef(maker.Modifiers(Flags.FINAL),oName,objectType,null));\n{\n    statements.append(maker.If(maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(oName),maker.Ident(thisName)),returnBool(maker,true),null));\n  }\n{\n    JCUnary notInstanceOf=maker.Unary(getCtcInt(JCTree.class,\"NOT\"),maker.TypeTest(maker.Ident(oName),createTypeReference(typeNode)));\n    statements.append(maker.If(notInstanceOf,returnBool(maker,false),null));\n  }\n{\n    if (!fields.isEmpty() || needsCanEqual) {\n      final JCExpression selfType1, selfType2;\n      ListBuffer<JCExpression> wildcards1=ListBuffer.lb();\n      ListBuffer<JCExpression> wildcards2=ListBuffer.lb();\n      for (int i=0; i < type.typarams.length(); i++) {\n        wildcards1.append(maker.Wildcard(maker.TypeBoundKind(BoundKind.UNBOUND),null));\n        wildcards2.append(maker.Wildcard(maker.TypeBoundKind(BoundKind.UNBOUND),null));\n      }\n      if (type.typarams.isEmpty()) {\n        selfType1=maker.Ident(type.name);\n        selfType2=maker.Ident(type.name);\n      }\n else {\n        selfType1=maker.TypeApply(maker.Ident(type.name),wildcards1.toList());\n        selfType2=maker.TypeApply(maker.Ident(type.name),wildcards2.toList());\n      }\n      statements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),otherName,selfType1,maker.TypeCast(selfType2,maker.Ident(oName))));\n    }\n  }\n{\n    if (needsCanEqual) {\n      List<JCExpression> exprNil=List.nil();\n      JCExpression thisRef=maker.Ident(thisName);\n      JCExpression castThisRef=maker.TypeCast(chainDots(typeNode,\"java\",\"lang\",\"Object\"),thisRef);\n      JCExpression equalityCheck=maker.Apply(exprNil,maker.Select(maker.Ident(otherName),typeNode.toName(\"canEqual\")),List.of(castThisRef));\n      statements.append(maker.If(maker.Unary(getCtcInt(JCTree.class,\"NOT\"),equalityCheck),returnBool(maker,false),null));\n    }\n  }\n  if (callSuper) {\n    JCMethodInvocation callToSuper=maker.Apply(List.<JCExpression>nil(),maker.Select(maker.Ident(typeNode.toName(\"super\")),typeNode.toName(\"equals\")),List.<JCExpression>of(maker.Ident(oName)));\n    JCUnary superNotEqual=maker.Unary(getCtcInt(JCTree.class,\"NOT\"),callToSuper);\n    statements.append(maker.If(superNotEqual,returnBool(maker,false),null));\n  }\n  Name thisDollar=typeNode.toName(\"this$\");\n  Name otherDollar=typeNode.toName(\"other$\");\n  for (  JavacNode fieldNode : fields) {\n    JCExpression fType=getFieldType(fieldNode,fieldAccess);\n    JCExpression thisFieldAccessor=createFieldAccessor(maker,fieldNode,fieldAccess);\n    JCExpression otherFieldAccessor=createFieldAccessor(maker,fieldNode,fieldAccess,maker.Ident(otherName));\n    if (fType instanceof JCPrimitiveTypeTree) {\nswitch (((JCPrimitiveTypeTree)fType).getPrimitiveTypeKind()) {\ncase FLOAT:        statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,false));\n      break;\ncase DOUBLE:    statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,true));\n  break;\ndefault:statements.append(maker.If(maker.Binary(getCtcInt(JCTree.class,\"NE\"),thisFieldAccessor,otherFieldAccessor),returnBool(maker,false),null));\nbreak;\n}\n}\n else if (fType instanceof JCArrayTypeTree) {\nboolean multiDim=((JCArrayTypeTree)fType).elemtype instanceof JCArrayTypeTree;\nboolean primitiveArray=((JCArrayTypeTree)fType).elemtype instanceof JCPrimitiveTypeTree;\nboolean useDeepEquals=multiDim || !primitiveArray;\nJCExpression eqMethod=chainDots(typeNode,\"java\",\"util\",\"Arrays\",useDeepEquals ? \"deepEquals\" : \"equals\");\nList<JCExpression> args=List.of(thisFieldAccessor,otherFieldAccessor);\nstatements.append(maker.If(maker.Unary(getCtcInt(JCTree.class,\"NOT\"),maker.Apply(List.<JCExpression>nil(),eqMethod,args)),returnBool(maker,false),null));\n}\n else {\nName fieldName=((JCVariableDecl)fieldNode.get()).name;\nName thisDollarFieldName=thisDollar.append(fieldName);\nName otherDollarFieldName=otherDollar.append(fieldName);\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),thisDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),thisFieldAccessor));\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),otherDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),otherFieldAccessor));\nJCExpression thisEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(thisDollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\nJCExpression otherNotEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"NE\"),maker.Ident(otherDollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\nJCExpression thisEqualsThat=maker.Apply(List.<JCExpression>nil(),maker.Select(maker.Ident(thisDollarFieldName),typeNode.toName(\"equals\")),List.<JCExpression>of(maker.Ident(otherDollarFieldName)));\nJCExpression fieldsAreNotEqual=maker.Conditional(thisEqualsNull,otherNotEqualsNull,maker.Unary(getCtcInt(JCTree.class,\"NOT\"),thisEqualsThat));\nstatements.append(maker.If(fieldsAreNotEqual,returnBool(maker,false),null));\n}\n}\n{\nstatements.append(returnBool(maker,true));\n}\nJCBlock body=maker.Block(0,statements.toList());\nreturn recursiveSetGeneratedBy(maker.MethodDef(mods,typeNode.toName(\"equals\"),returnType,List.<JCTypeParameter>nil(),params,List.<JCExpression>nil(),body,null),source);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1023,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 453,
        "startColumnNumber" : 4,
        "endLineNumber" : 453,
        "endColumnNumber" : 77
      },
      "nodeContext" : "List<JCExpression> args=List.of(thisFieldAccessor,otherFieldAccessor);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "lombok.javac.handlers.JCExpression"
  }, {
    "nodeContext" : "otherFieldAccessor",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 465,
      "startColumnNumber" : 134,
      "endLineNumber" : 465,
      "endColumnNumber" : 152
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 131,
        "startLineNumber" : 465,
        "startColumnNumber" : 22,
        "endLineNumber" : 465,
        "endColumnNumber" : 153
      },
      "nodeContext" : "maker.VarDef(maker.Modifiers(Flags.FINAL),otherDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),otherFieldAccessor)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 150,
        "startLineNumber" : 465,
        "startColumnNumber" : 4,
        "endLineNumber" : 465,
        "endColumnNumber" : 154
      },
      "nodeContext" : "statements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),otherDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),otherFieldAccessor))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 20,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 151,
        "startLineNumber" : 465,
        "startColumnNumber" : 4,
        "endLineNumber" : 465,
        "endColumnNumber" : 155
      },
      "nodeContext" : "statements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),otherDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),otherFieldAccessor));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1558,
        "startLineNumber" : 456,
        "startColumnNumber" : 24,
        "endLineNumber" : 474,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  Name fieldName=((JCVariableDecl)fieldNode.get()).name;\n  Name thisDollarFieldName=thisDollar.append(fieldName);\n  Name otherDollarFieldName=otherDollar.append(fieldName);\n  statements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),thisDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),thisFieldAccessor));\n  statements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),otherDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),otherFieldAccessor));\n  JCExpression thisEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(thisDollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\n  JCExpression otherNotEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"NE\"),maker.Ident(otherDollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\n  JCExpression thisEqualsThat=maker.Apply(List.<JCExpression>nil(),maker.Select(maker.Ident(thisDollarFieldName),typeNode.toName(\"equals\")),List.<JCExpression>of(maker.Ident(otherDollarFieldName)));\n  JCExpression fieldsAreNotEqual=maker.Conditional(thisEqualsNull,otherNotEqualsNull,maker.Unary(getCtcInt(JCTree.class,\"NOT\"),thisEqualsThat));\n  statements.append(maker.If(fieldsAreNotEqual,returnBool(maker,false),null));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 197,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2355,
        "startLineNumber" : 446,
        "startColumnNumber" : 10,
        "endLineNumber" : 474,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (fType instanceof JCArrayTypeTree) {\n  boolean multiDim=((JCArrayTypeTree)fType).elemtype instanceof JCArrayTypeTree;\n  boolean primitiveArray=((JCArrayTypeTree)fType).elemtype instanceof JCPrimitiveTypeTree;\n  boolean useDeepEquals=multiDim || !primitiveArray;\n  JCExpression eqMethod=chainDots(typeNode,\"java\",\"util\",\"Arrays\",useDeepEquals ? \"deepEquals\" : \"equals\");\n  List<JCExpression> args=List.of(thisFieldAccessor,otherFieldAccessor);\n  statements.append(maker.If(maker.Unary(getCtcInt(JCTree.class,\"NOT\"),maker.Apply(List.<JCExpression>nil(),eqMethod,args)),returnBool(maker,false),null));\n}\n else {\n  Name fieldName=((JCVariableDecl)fieldNode.get()).name;\n  Name thisDollarFieldName=thisDollar.append(fieldName);\n  Name otherDollarFieldName=otherDollar.append(fieldName);\n  statements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),thisDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),thisFieldAccessor));\n  statements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),otherDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),otherFieldAccessor));\n  JCExpression thisEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(thisDollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\n  JCExpression otherNotEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"NE\"),maker.Ident(otherDollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\n  JCExpression thisEqualsThat=maker.Apply(List.<JCExpression>nil(),maker.Select(maker.Ident(thisDollarFieldName),typeNode.toName(\"equals\")),List.<JCExpression>of(maker.Ident(otherDollarFieldName)));\n  JCExpression fieldsAreNotEqual=maker.Conditional(thisEqualsNull,otherNotEqualsNull,maker.Unary(getCtcInt(JCTree.class,\"NOT\"),thisEqualsThat));\n  statements.append(maker.If(fieldsAreNotEqual,returnBool(maker,false),null));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 298,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3184,
        "startLineNumber" : 430,
        "startColumnNumber" : 3,
        "endLineNumber" : 474,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (fType instanceof JCPrimitiveTypeTree) {\nswitch (((JCPrimitiveTypeTree)fType).getPrimitiveTypeKind()) {\ncase FLOAT:    statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,false));\n  break;\ncase DOUBLE:statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,true));\nbreak;\ndefault:statements.append(maker.If(maker.Binary(getCtcInt(JCTree.class,\"NE\"),thisFieldAccessor,otherFieldAccessor),returnBool(maker,false),null));\nbreak;\n}\n}\n else if (fType instanceof JCArrayTypeTree) {\nboolean multiDim=((JCArrayTypeTree)fType).elemtype instanceof JCArrayTypeTree;\nboolean primitiveArray=((JCArrayTypeTree)fType).elemtype instanceof JCPrimitiveTypeTree;\nboolean useDeepEquals=multiDim || !primitiveArray;\nJCExpression eqMethod=chainDots(typeNode,\"java\",\"util\",\"Arrays\",useDeepEquals ? \"deepEquals\" : \"equals\");\nList<JCExpression> args=List.of(thisFieldAccessor,otherFieldAccessor);\nstatements.append(maker.If(maker.Unary(getCtcInt(JCTree.class,\"NOT\"),maker.Apply(List.<JCExpression>nil(),eqMethod,args)),returnBool(maker,false),null));\n}\n else {\nName fieldName=((JCVariableDecl)fieldNode.get()).name;\nName thisDollarFieldName=thisDollar.append(fieldName);\nName otherDollarFieldName=otherDollar.append(fieldName);\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),thisDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),thisFieldAccessor));\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),otherDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),otherFieldAccessor));\nJCExpression thisEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(thisDollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\nJCExpression otherNotEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"NE\"),maker.Ident(otherDollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\nJCExpression thisEqualsThat=maker.Apply(List.<JCExpression>nil(),maker.Select(maker.Ident(thisDollarFieldName),typeNode.toName(\"equals\")),List.<JCExpression>of(maker.Ident(otherDollarFieldName)));\nJCExpression fieldsAreNotEqual=maker.Conditional(thisEqualsNull,otherNotEqualsNull,maker.Unary(getCtcInt(JCTree.class,\"NOT\"),thisEqualsThat));\nstatements.append(maker.If(fieldsAreNotEqual,returnBool(maker,false),null));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 365,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 3456,
        "startLineNumber" : 426,
        "startColumnNumber" : 37,
        "endLineNumber" : 475,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  JCExpression fType=getFieldType(fieldNode,fieldAccess);\n  JCExpression thisFieldAccessor=createFieldAccessor(maker,fieldNode,fieldAccess);\n  JCExpression otherFieldAccessor=createFieldAccessor(maker,fieldNode,fieldAccess,maker.Ident(otherName));\n  if (fType instanceof JCPrimitiveTypeTree) {\nswitch (((JCPrimitiveTypeTree)fType).getPrimitiveTypeKind()) {\ncase FLOAT:      statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,false));\n    break;\ncase DOUBLE:  statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,true));\nbreak;\ndefault:statements.append(maker.If(maker.Binary(getCtcInt(JCTree.class,\"NE\"),thisFieldAccessor,otherFieldAccessor),returnBool(maker,false),null));\nbreak;\n}\n}\n else if (fType instanceof JCArrayTypeTree) {\nboolean multiDim=((JCArrayTypeTree)fType).elemtype instanceof JCArrayTypeTree;\nboolean primitiveArray=((JCArrayTypeTree)fType).elemtype instanceof JCPrimitiveTypeTree;\nboolean useDeepEquals=multiDim || !primitiveArray;\nJCExpression eqMethod=chainDots(typeNode,\"java\",\"util\",\"Arrays\",useDeepEquals ? \"deepEquals\" : \"equals\");\nList<JCExpression> args=List.of(thisFieldAccessor,otherFieldAccessor);\nstatements.append(maker.If(maker.Unary(getCtcInt(JCTree.class,\"NOT\"),maker.Apply(List.<JCExpression>nil(),eqMethod,args)),returnBool(maker,false),null));\n}\n else {\nName fieldName=((JCVariableDecl)fieldNode.get()).name;\nName thisDollarFieldName=thisDollar.append(fieldName);\nName otherDollarFieldName=otherDollar.append(fieldName);\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),thisDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),thisFieldAccessor));\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),otherDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),otherFieldAccessor));\nJCExpression thisEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(thisDollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\nJCExpression otherNotEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"NE\"),maker.Ident(otherDollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\nJCExpression thisEqualsThat=maker.Apply(List.<JCExpression>nil(),maker.Select(maker.Ident(thisDollarFieldName),typeNode.toName(\"equals\")),List.<JCExpression>of(maker.Ident(otherDollarFieldName)));\nJCExpression fieldsAreNotEqual=maker.Conditional(thisEqualsNull,otherNotEqualsNull,maker.Unary(getCtcInt(JCTree.class,\"NOT\"),thisEqualsThat));\nstatements.append(maker.If(fieldsAreNotEqual,returnBool(maker,false),null));\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 399,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3491,
        "startLineNumber" : 426,
        "startColumnNumber" : 2,
        "endLineNumber" : 475,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (JavacNode fieldNode : fields) {\n  JCExpression fType=getFieldType(fieldNode,fieldAccess);\n  JCExpression thisFieldAccessor=createFieldAccessor(maker,fieldNode,fieldAccess);\n  JCExpression otherFieldAccessor=createFieldAccessor(maker,fieldNode,fieldAccess,maker.Ident(otherName));\n  if (fType instanceof JCPrimitiveTypeTree) {\nswitch (((JCPrimitiveTypeTree)fType).getPrimitiveTypeKind()) {\ncase FLOAT:      statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,false));\n    break;\ncase DOUBLE:  statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,true));\nbreak;\ndefault:statements.append(maker.If(maker.Binary(getCtcInt(JCTree.class,\"NE\"),thisFieldAccessor,otherFieldAccessor),returnBool(maker,false),null));\nbreak;\n}\n}\n else if (fType instanceof JCArrayTypeTree) {\nboolean multiDim=((JCArrayTypeTree)fType).elemtype instanceof JCArrayTypeTree;\nboolean primitiveArray=((JCArrayTypeTree)fType).elemtype instanceof JCPrimitiveTypeTree;\nboolean useDeepEquals=multiDim || !primitiveArray;\nJCExpression eqMethod=chainDots(typeNode,\"java\",\"util\",\"Arrays\",useDeepEquals ? \"deepEquals\" : \"equals\");\nList<JCExpression> args=List.of(thisFieldAccessor,otherFieldAccessor);\nstatements.append(maker.If(maker.Unary(getCtcInt(JCTree.class,\"NOT\"),maker.Apply(List.<JCExpression>nil(),eqMethod,args)),returnBool(maker,false),null));\n}\n else {\nName fieldName=((JCVariableDecl)fieldNode.get()).name;\nName thisDollarFieldName=thisDollar.append(fieldName);\nName otherDollarFieldName=otherDollar.append(fieldName);\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),thisDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),thisFieldAccessor));\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),otherDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),otherFieldAccessor));\nJCExpression thisEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(thisDollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\nJCExpression otherNotEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"NE\"),maker.Ident(otherDollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\nJCExpression thisEqualsThat=maker.Apply(List.<JCExpression>nil(),maker.Select(maker.Ident(thisDollarFieldName),typeNode.toName(\"equals\")),List.<JCExpression>of(maker.Ident(otherDollarFieldName)));\nJCExpression fieldsAreNotEqual=maker.Conditional(thisEqualsNull,otherNotEqualsNull,maker.Unary(getCtcInt(JCTree.class,\"NOT\"),thisEqualsThat));\nstatements.append(maker.If(fieldsAreNotEqual,returnBool(maker,false),null));\n}\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 405,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7140,
        "startLineNumber" : 354,
        "startColumnNumber" : 161,
        "endLineNumber" : 483,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  TreeMaker maker=typeNode.getTreeMaker();\n  JCClassDecl type=(JCClassDecl)typeNode.get();\n  Name oName=typeNode.toName(\"o\");\n  Name otherName=typeNode.toName(\"other\");\n  Name thisName=typeNode.toName(\"this\");\n  JCAnnotation overrideAnnotation=maker.Annotation(chainDots(typeNode,\"java\",\"lang\",\"Override\"),List.<JCExpression>nil());\n  JCModifiers mods=maker.Modifiers(Flags.PUBLIC,List.of(overrideAnnotation));\n  JCExpression objectType=chainDots(typeNode,\"java\",\"lang\",\"Object\");\n  JCExpression returnType=maker.TypeIdent(getCtcInt(TypeTags.class,\"BOOLEAN\"));\n  ListBuffer<JCStatement> statements=ListBuffer.lb();\n  final List<JCVariableDecl> params=List.of(maker.VarDef(maker.Modifiers(Flags.FINAL),oName,objectType,null));\n{\n    statements.append(maker.If(maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(oName),maker.Ident(thisName)),returnBool(maker,true),null));\n  }\n{\n    JCUnary notInstanceOf=maker.Unary(getCtcInt(JCTree.class,\"NOT\"),maker.TypeTest(maker.Ident(oName),createTypeReference(typeNode)));\n    statements.append(maker.If(notInstanceOf,returnBool(maker,false),null));\n  }\n{\n    if (!fields.isEmpty() || needsCanEqual) {\n      final JCExpression selfType1, selfType2;\n      ListBuffer<JCExpression> wildcards1=ListBuffer.lb();\n      ListBuffer<JCExpression> wildcards2=ListBuffer.lb();\n      for (int i=0; i < type.typarams.length(); i++) {\n        wildcards1.append(maker.Wildcard(maker.TypeBoundKind(BoundKind.UNBOUND),null));\n        wildcards2.append(maker.Wildcard(maker.TypeBoundKind(BoundKind.UNBOUND),null));\n      }\n      if (type.typarams.isEmpty()) {\n        selfType1=maker.Ident(type.name);\n        selfType2=maker.Ident(type.name);\n      }\n else {\n        selfType1=maker.TypeApply(maker.Ident(type.name),wildcards1.toList());\n        selfType2=maker.TypeApply(maker.Ident(type.name),wildcards2.toList());\n      }\n      statements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),otherName,selfType1,maker.TypeCast(selfType2,maker.Ident(oName))));\n    }\n  }\n{\n    if (needsCanEqual) {\n      List<JCExpression> exprNil=List.nil();\n      JCExpression thisRef=maker.Ident(thisName);\n      JCExpression castThisRef=maker.TypeCast(chainDots(typeNode,\"java\",\"lang\",\"Object\"),thisRef);\n      JCExpression equalityCheck=maker.Apply(exprNil,maker.Select(maker.Ident(otherName),typeNode.toName(\"canEqual\")),List.of(castThisRef));\n      statements.append(maker.If(maker.Unary(getCtcInt(JCTree.class,\"NOT\"),equalityCheck),returnBool(maker,false),null));\n    }\n  }\n  if (callSuper) {\n    JCMethodInvocation callToSuper=maker.Apply(List.<JCExpression>nil(),maker.Select(maker.Ident(typeNode.toName(\"super\")),typeNode.toName(\"equals\")),List.<JCExpression>of(maker.Ident(oName)));\n    JCUnary superNotEqual=maker.Unary(getCtcInt(JCTree.class,\"NOT\"),callToSuper);\n    statements.append(maker.If(superNotEqual,returnBool(maker,false),null));\n  }\n  Name thisDollar=typeNode.toName(\"this$\");\n  Name otherDollar=typeNode.toName(\"other$\");\n  for (  JavacNode fieldNode : fields) {\n    JCExpression fType=getFieldType(fieldNode,fieldAccess);\n    JCExpression thisFieldAccessor=createFieldAccessor(maker,fieldNode,fieldAccess);\n    JCExpression otherFieldAccessor=createFieldAccessor(maker,fieldNode,fieldAccess,maker.Ident(otherName));\n    if (fType instanceof JCPrimitiveTypeTree) {\nswitch (((JCPrimitiveTypeTree)fType).getPrimitiveTypeKind()) {\ncase FLOAT:        statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,false));\n      break;\ncase DOUBLE:    statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,true));\n  break;\ndefault:statements.append(maker.If(maker.Binary(getCtcInt(JCTree.class,\"NE\"),thisFieldAccessor,otherFieldAccessor),returnBool(maker,false),null));\nbreak;\n}\n}\n else if (fType instanceof JCArrayTypeTree) {\nboolean multiDim=((JCArrayTypeTree)fType).elemtype instanceof JCArrayTypeTree;\nboolean primitiveArray=((JCArrayTypeTree)fType).elemtype instanceof JCPrimitiveTypeTree;\nboolean useDeepEquals=multiDim || !primitiveArray;\nJCExpression eqMethod=chainDots(typeNode,\"java\",\"util\",\"Arrays\",useDeepEquals ? \"deepEquals\" : \"equals\");\nList<JCExpression> args=List.of(thisFieldAccessor,otherFieldAccessor);\nstatements.append(maker.If(maker.Unary(getCtcInt(JCTree.class,\"NOT\"),maker.Apply(List.<JCExpression>nil(),eqMethod,args)),returnBool(maker,false),null));\n}\n else {\nName fieldName=((JCVariableDecl)fieldNode.get()).name;\nName thisDollarFieldName=thisDollar.append(fieldName);\nName otherDollarFieldName=otherDollar.append(fieldName);\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),thisDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),thisFieldAccessor));\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),otherDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),otherFieldAccessor));\nJCExpression thisEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(thisDollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\nJCExpression otherNotEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"NE\"),maker.Ident(otherDollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\nJCExpression thisEqualsThat=maker.Apply(List.<JCExpression>nil(),maker.Select(maker.Ident(thisDollarFieldName),typeNode.toName(\"equals\")),List.<JCExpression>of(maker.Ident(otherDollarFieldName)));\nJCExpression fieldsAreNotEqual=maker.Conditional(thisEqualsNull,otherNotEqualsNull,maker.Unary(getCtcInt(JCTree.class,\"NOT\"),thisEqualsThat));\nstatements.append(maker.If(fieldsAreNotEqual,returnBool(maker,false),null));\n}\n}\n{\nstatements.append(returnBool(maker,true));\n}\nJCBlock body=maker.Block(0,statements.toList());\nreturn recursiveSetGeneratedBy(maker.MethodDef(mods,typeNode.toName(\"equals\"),returnType,List.<JCTypeParameter>nil(),params,List.<JCExpression>nil(),body,null),source);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 993,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7300,
        "startLineNumber" : 354,
        "startColumnNumber" : 1,
        "endLineNumber" : 483,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private JCMethodDecl createEquals(JavacNode typeNode,List<JavacNode> fields,boolean callSuper,FieldAccess fieldAccess,boolean needsCanEqual,JCTree source){\n  TreeMaker maker=typeNode.getTreeMaker();\n  JCClassDecl type=(JCClassDecl)typeNode.get();\n  Name oName=typeNode.toName(\"o\");\n  Name otherName=typeNode.toName(\"other\");\n  Name thisName=typeNode.toName(\"this\");\n  JCAnnotation overrideAnnotation=maker.Annotation(chainDots(typeNode,\"java\",\"lang\",\"Override\"),List.<JCExpression>nil());\n  JCModifiers mods=maker.Modifiers(Flags.PUBLIC,List.of(overrideAnnotation));\n  JCExpression objectType=chainDots(typeNode,\"java\",\"lang\",\"Object\");\n  JCExpression returnType=maker.TypeIdent(getCtcInt(TypeTags.class,\"BOOLEAN\"));\n  ListBuffer<JCStatement> statements=ListBuffer.lb();\n  final List<JCVariableDecl> params=List.of(maker.VarDef(maker.Modifiers(Flags.FINAL),oName,objectType,null));\n{\n    statements.append(maker.If(maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(oName),maker.Ident(thisName)),returnBool(maker,true),null));\n  }\n{\n    JCUnary notInstanceOf=maker.Unary(getCtcInt(JCTree.class,\"NOT\"),maker.TypeTest(maker.Ident(oName),createTypeReference(typeNode)));\n    statements.append(maker.If(notInstanceOf,returnBool(maker,false),null));\n  }\n{\n    if (!fields.isEmpty() || needsCanEqual) {\n      final JCExpression selfType1, selfType2;\n      ListBuffer<JCExpression> wildcards1=ListBuffer.lb();\n      ListBuffer<JCExpression> wildcards2=ListBuffer.lb();\n      for (int i=0; i < type.typarams.length(); i++) {\n        wildcards1.append(maker.Wildcard(maker.TypeBoundKind(BoundKind.UNBOUND),null));\n        wildcards2.append(maker.Wildcard(maker.TypeBoundKind(BoundKind.UNBOUND),null));\n      }\n      if (type.typarams.isEmpty()) {\n        selfType1=maker.Ident(type.name);\n        selfType2=maker.Ident(type.name);\n      }\n else {\n        selfType1=maker.TypeApply(maker.Ident(type.name),wildcards1.toList());\n        selfType2=maker.TypeApply(maker.Ident(type.name),wildcards2.toList());\n      }\n      statements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),otherName,selfType1,maker.TypeCast(selfType2,maker.Ident(oName))));\n    }\n  }\n{\n    if (needsCanEqual) {\n      List<JCExpression> exprNil=List.nil();\n      JCExpression thisRef=maker.Ident(thisName);\n      JCExpression castThisRef=maker.TypeCast(chainDots(typeNode,\"java\",\"lang\",\"Object\"),thisRef);\n      JCExpression equalityCheck=maker.Apply(exprNil,maker.Select(maker.Ident(otherName),typeNode.toName(\"canEqual\")),List.of(castThisRef));\n      statements.append(maker.If(maker.Unary(getCtcInt(JCTree.class,\"NOT\"),equalityCheck),returnBool(maker,false),null));\n    }\n  }\n  if (callSuper) {\n    JCMethodInvocation callToSuper=maker.Apply(List.<JCExpression>nil(),maker.Select(maker.Ident(typeNode.toName(\"super\")),typeNode.toName(\"equals\")),List.<JCExpression>of(maker.Ident(oName)));\n    JCUnary superNotEqual=maker.Unary(getCtcInt(JCTree.class,\"NOT\"),callToSuper);\n    statements.append(maker.If(superNotEqual,returnBool(maker,false),null));\n  }\n  Name thisDollar=typeNode.toName(\"this$\");\n  Name otherDollar=typeNode.toName(\"other$\");\n  for (  JavacNode fieldNode : fields) {\n    JCExpression fType=getFieldType(fieldNode,fieldAccess);\n    JCExpression thisFieldAccessor=createFieldAccessor(maker,fieldNode,fieldAccess);\n    JCExpression otherFieldAccessor=createFieldAccessor(maker,fieldNode,fieldAccess,maker.Ident(otherName));\n    if (fType instanceof JCPrimitiveTypeTree) {\nswitch (((JCPrimitiveTypeTree)fType).getPrimitiveTypeKind()) {\ncase FLOAT:        statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,false));\n      break;\ncase DOUBLE:    statements.append(generateCompareFloatOrDouble(thisFieldAccessor,otherFieldAccessor,maker,typeNode,true));\n  break;\ndefault:statements.append(maker.If(maker.Binary(getCtcInt(JCTree.class,\"NE\"),thisFieldAccessor,otherFieldAccessor),returnBool(maker,false),null));\nbreak;\n}\n}\n else if (fType instanceof JCArrayTypeTree) {\nboolean multiDim=((JCArrayTypeTree)fType).elemtype instanceof JCArrayTypeTree;\nboolean primitiveArray=((JCArrayTypeTree)fType).elemtype instanceof JCPrimitiveTypeTree;\nboolean useDeepEquals=multiDim || !primitiveArray;\nJCExpression eqMethod=chainDots(typeNode,\"java\",\"util\",\"Arrays\",useDeepEquals ? \"deepEquals\" : \"equals\");\nList<JCExpression> args=List.of(thisFieldAccessor,otherFieldAccessor);\nstatements.append(maker.If(maker.Unary(getCtcInt(JCTree.class,\"NOT\"),maker.Apply(List.<JCExpression>nil(),eqMethod,args)),returnBool(maker,false),null));\n}\n else {\nName fieldName=((JCVariableDecl)fieldNode.get()).name;\nName thisDollarFieldName=thisDollar.append(fieldName);\nName otherDollarFieldName=otherDollar.append(fieldName);\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),thisDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),thisFieldAccessor));\nstatements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),otherDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),otherFieldAccessor));\nJCExpression thisEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"EQ\"),maker.Ident(thisDollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\nJCExpression otherNotEqualsNull=maker.Binary(getCtcInt(JCTree.class,\"NE\"),maker.Ident(otherDollarFieldName),maker.Literal(getCtcInt(TypeTags.class,\"BOT\"),null));\nJCExpression thisEqualsThat=maker.Apply(List.<JCExpression>nil(),maker.Select(maker.Ident(thisDollarFieldName),typeNode.toName(\"equals\")),List.<JCExpression>of(maker.Ident(otherDollarFieldName)));\nJCExpression fieldsAreNotEqual=maker.Conditional(thisEqualsNull,otherNotEqualsNull,maker.Unary(getCtcInt(JCTree.class,\"NOT\"),thisEqualsThat));\nstatements.append(maker.If(fieldsAreNotEqual,returnBool(maker,false),null));\n}\n}\n{\nstatements.append(returnBool(maker,true));\n}\nJCBlock body=maker.Block(0,statements.toList());\nreturn recursiveSetGeneratedBy(maker.MethodDef(mods,typeNode.toName(\"equals\"),returnType,List.<JCTypeParameter>nil(),params,List.<JCExpression>nil(),body,null),source);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1023,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 151,
        "startLineNumber" : 465,
        "startColumnNumber" : 4,
        "endLineNumber" : 465,
        "endColumnNumber" : 155
      },
      "nodeContext" : "statements.append(maker.VarDef(maker.Modifiers(Flags.FINAL),otherDollarFieldName,chainDots(typeNode,\"java\",\"lang\",\"Object\"),otherFieldAccessor));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 21,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "lombok.javac.handlers.JCExpression"
  } ],
  "positionList" : [ {
    "charLength" : 18,
    "startLineNumber" : 434,
    "startColumnNumber" : 71,
    "endLineNumber" : 434,
    "endColumnNumber" : 89
  }, {
    "charLength" : 18,
    "startLineNumber" : 438,
    "startColumnNumber" : 71,
    "endLineNumber" : 438,
    "endColumnNumber" : 89
  }, {
    "charLength" : 18,
    "startLineNumber" : 443,
    "startColumnNumber" : 79,
    "endLineNumber" : 443,
    "endColumnNumber" : 97
  }, {
    "charLength" : 18,
    "startLineNumber" : 453,
    "startColumnNumber" : 57,
    "endLineNumber" : 453,
    "endColumnNumber" : 75
  }, {
    "charLength" : 18,
    "startLineNumber" : 465,
    "startColumnNumber" : 134,
    "endLineNumber" : 465,
    "endColumnNumber" : 152
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 4
  } ]
}