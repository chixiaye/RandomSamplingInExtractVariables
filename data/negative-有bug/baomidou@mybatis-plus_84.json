{
  "id" : 84,
  "expression" : "new Environment(this.environment,this.transactionFactory,this.dataSource)",
  "projectName" : "baomidou@mybatis-plus",
  "commitID" : "7815611a659da4cc8d5443f5ef4c10ca0d937582",
  "filePath" : "/mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/spring/MybatisSqlSessionFactoryBean.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new Environment(this.environment,this.transactionFactory,this.dataSource)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 75,
      "startLineNumber" : 558,
      "startColumnNumber" : 37,
      "endLineNumber" : 558,
      "endColumnNumber" : 112
    },
    "astNodeNumber" : 12,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 105,
        "startLineNumber" : 558,
        "startColumnNumber" : 8,
        "endLineNumber" : 558,
        "endColumnNumber" : 113
      },
      "nodeContext" : "configuration.setEnvironment(new Environment(this.environment,this.transactionFactory,this.dataSource))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 558,
        "startColumnNumber" : 8,
        "endLineNumber" : 558,
        "endColumnNumber" : 114
      },
      "nodeContext" : "configuration.setEnvironment(new Environment(this.environment,this.transactionFactory,this.dataSource));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8921,
        "startLineNumber" : 398,
        "startColumnNumber" : 74,
        "endLineNumber" : 600,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Configuration configuration;\n  MybatisXMLConfigBuilder xmlConfigBuilder=null;\n  if (this.configuration != null) {\n    configuration=this.configuration;\n    if (configuration.getVariables() == null) {\n      configuration.setVariables(this.configurationProperties);\n    }\n else     if (this.configurationProperties != null) {\n      configuration.getVariables().putAll(this.configurationProperties);\n    }\n  }\n else   if (this.configLocation != null) {\n    xmlConfigBuilder=new MybatisXMLConfigBuilder(this.configLocation.getInputStream(),null,this.configurationProperties);\n    configuration=xmlConfigBuilder.getConfiguration();\n  }\n else {\n    if (LOGGER.isDebugEnabled()) {\n      LOGGER.debug(\"Property 'configuration' or 'configLocation' not specified, using default MyBatis Configuration\");\n    }\n    configuration=new MybatisConfiguration();\n    if (this.configurationProperties != null) {\n      configuration.setVariables(this.configurationProperties);\n    }\n  }\n  if (this.objectFactory != null) {\n    configuration.setObjectFactory(this.objectFactory);\n  }\n  if (this.objectWrapperFactory != null) {\n    configuration.setObjectWrapperFactory(this.objectWrapperFactory);\n  }\n  if (this.vfs != null) {\n    configuration.setVfsImpl(this.vfs);\n  }\n  if (hasLength(this.typeAliasesPackage)) {\n    String[] typeAliasPackageArray;\n    if (typeAliasesPackage.contains(\"*\") && !typeAliasesPackage.contains(\",\") && !typeAliasesPackage.contains(\";\")) {\n      typeAliasPackageArray=PackageHelper.convertTypeAliasesPackage(typeAliasesPackage);\n    }\n else {\n      typeAliasPackageArray=tokenizeToStringArray(this.typeAliasesPackage,ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);\n    }\n    if (typeAliasPackageArray == null) {\n      throw new MybatisPlusException(\"not find typeAliasesPackage:\" + typeAliasesPackage);\n    }\n    for (    String packageToScan : typeAliasPackageArray) {\n      configuration.getTypeAliasRegistry().registerAliases(packageToScan,typeAliasesSuperType == null ? Object.class : typeAliasesSuperType);\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Scanned package: '\" + packageToScan + \"' for aliases\");\n      }\n    }\n  }\n  if (hasLength(this.typeEnumsPackage)) {\n    Set<Class> classes=null;\n    if (typeEnumsPackage.contains(\"*\") && !typeEnumsPackage.contains(\",\") && !typeEnumsPackage.contains(\";\")) {\n      classes=PackageHelper.scanTypePackage(typeEnumsPackage);\n    }\n else {\n      String[] typeEnumsPackageArray=tokenizeToStringArray(this.typeEnumsPackage,ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);\n      if (typeEnumsPackageArray == null) {\n        throw new MybatisPlusException(\"not find typeEnumsPackage:\" + typeEnumsPackage);\n      }\n      classes=new HashSet<Class>();\n      for (      String typePackage : typeEnumsPackageArray) {\n        classes.addAll(PackageHelper.scanTypePackage(typePackage));\n      }\n    }\n    TypeHandlerRegistry typeHandlerRegistry=configuration.getTypeHandlerRegistry();\n    for (    Class cls : classes) {\n      if (cls.isEnum()) {\n        if (IEnum.class.isAssignableFrom(cls)) {\n          typeHandlerRegistry.register(cls.getName(),com.baomidou.mybatisplus.handlers.EnumTypeHandler.class.getCanonicalName());\n        }\n else {\n          typeHandlerRegistry.register(cls.getName(),org.apache.ibatis.type.EnumOrdinalTypeHandler.class.getCanonicalName());\n        }\n      }\n    }\n  }\n  if (!isEmpty(this.typeAliases)) {\n    for (    Class<?> typeAlias : this.typeAliases) {\n      configuration.getTypeAliasRegistry().registerAlias(typeAlias);\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Registered type alias: '\" + typeAlias + \"'\");\n      }\n    }\n  }\n  if (!isEmpty(this.plugins)) {\n    for (    Interceptor plugin : this.plugins) {\n      configuration.addInterceptor(plugin);\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Registered plugin: '\" + plugin + \"'\");\n      }\n    }\n  }\n  if (hasLength(this.typeHandlersPackage)) {\n    String[] typeHandlersPackageArray=tokenizeToStringArray(this.typeHandlersPackage,ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);\n    for (    String packageToScan : typeHandlersPackageArray) {\n      configuration.getTypeHandlerRegistry().register(packageToScan);\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Scanned package: '\" + packageToScan + \"' for type handlers\");\n      }\n    }\n  }\n  if (!isEmpty(this.typeHandlers)) {\n    for (    TypeHandler<?> typeHandler : this.typeHandlers) {\n      configuration.getTypeHandlerRegistry().register(typeHandler);\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Registered type handler: '\" + typeHandler + \"'\");\n      }\n    }\n  }\n  if (this.databaseIdProvider != null) {\n    try {\n      configuration.setDatabaseId(this.databaseIdProvider.getDatabaseId(this.dataSource));\n    }\n catch (    SQLException e) {\n      throw new NestedIOException(\"Failed getting a databaseId\",e);\n    }\n  }\n  if (this.cache != null) {\n    configuration.addCache(this.cache);\n  }\n  if (xmlConfigBuilder != null) {\n    try {\n      xmlConfigBuilder.parse();\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Parsed configuration file: '\" + this.configLocation + \"'\");\n      }\n    }\n catch (    Exception ex) {\n      throw new NestedIOException(\"Failed to parse config resource: \" + this.configLocation,ex);\n    }\n finally {\n      ErrorContext.instance().reset();\n    }\n  }\n  if (this.transactionFactory == null) {\n    this.transactionFactory=new SpringManagedTransactionFactory();\n  }\n  configuration.setEnvironment(new Environment(this.environment,this.transactionFactory,this.dataSource));\n  GlobalConfigUtils.setMetaData(dataSource,globalConfig);\n  SqlSessionFactory sqlSessionFactory=this.sqlSessionFactoryBuilder.build(configuration);\n  SqlRunner.FACTORY=sqlSessionFactory;\n  globalConfig.setSqlSessionFactory(sqlSessionFactory);\n  globalConfig.signGlobalConfig(sqlSessionFactory);\n  if (!isEmpty(this.mapperLocations)) {\n    if (globalConfig.isRefresh()) {\n      new MybatisMapperRefresh(this.mapperLocations,sqlSessionFactory,2,2,true);\n    }\n    for (    Resource mapperLocation : this.mapperLocations) {\n      if (mapperLocation == null) {\n        continue;\n      }\n      try {\n        XMLMapperBuilder xmlMapperBuilder=new XMLMapperBuilder(mapperLocation.getInputStream(),configuration,mapperLocation.toString(),configuration.getSqlFragments());\n        xmlMapperBuilder.parse();\n      }\n catch (      Exception e) {\n        throw new NestedIOException(\"Failed to parse mapping resource: '\" + mapperLocation + \"'\",e);\n      }\n finally {\n        ErrorContext.instance().reset();\n      }\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Parsed mapper file: '\" + mapperLocation + \"'\");\n      }\n    }\n  }\n else {\n    if (LOGGER.isDebugEnabled()) {\n      LOGGER.debug(\"Property 'mapperLocations' was not specified or no matching resources found\");\n    }\n  }\n  return sqlSessionFactory;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 847,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 9436,
        "startLineNumber" : 388,
        "startColumnNumber" : 4,
        "endLineNumber" : 600,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Build a  {@code SqlSessionFactory} instance.<p> The default implementation uses the standard MyBatis  {@code XMLConfigBuilder} API to build a{@code SqlSessionFactory} instance based on an Reader.Since 1.3.0, it can be specified a  {@link Configuration} instance directly(without config file).\n * @return SqlSessionFactory\n * @throws IOException if loading the config file failed\n */\nprotected SqlSessionFactory buildSqlSessionFactory() throws Exception {\n  Configuration configuration;\n  MybatisXMLConfigBuilder xmlConfigBuilder=null;\n  if (this.configuration != null) {\n    configuration=this.configuration;\n    if (configuration.getVariables() == null) {\n      configuration.setVariables(this.configurationProperties);\n    }\n else     if (this.configurationProperties != null) {\n      configuration.getVariables().putAll(this.configurationProperties);\n    }\n  }\n else   if (this.configLocation != null) {\n    xmlConfigBuilder=new MybatisXMLConfigBuilder(this.configLocation.getInputStream(),null,this.configurationProperties);\n    configuration=xmlConfigBuilder.getConfiguration();\n  }\n else {\n    if (LOGGER.isDebugEnabled()) {\n      LOGGER.debug(\"Property 'configuration' or 'configLocation' not specified, using default MyBatis Configuration\");\n    }\n    configuration=new MybatisConfiguration();\n    if (this.configurationProperties != null) {\n      configuration.setVariables(this.configurationProperties);\n    }\n  }\n  if (this.objectFactory != null) {\n    configuration.setObjectFactory(this.objectFactory);\n  }\n  if (this.objectWrapperFactory != null) {\n    configuration.setObjectWrapperFactory(this.objectWrapperFactory);\n  }\n  if (this.vfs != null) {\n    configuration.setVfsImpl(this.vfs);\n  }\n  if (hasLength(this.typeAliasesPackage)) {\n    String[] typeAliasPackageArray;\n    if (typeAliasesPackage.contains(\"*\") && !typeAliasesPackage.contains(\",\") && !typeAliasesPackage.contains(\";\")) {\n      typeAliasPackageArray=PackageHelper.convertTypeAliasesPackage(typeAliasesPackage);\n    }\n else {\n      typeAliasPackageArray=tokenizeToStringArray(this.typeAliasesPackage,ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);\n    }\n    if (typeAliasPackageArray == null) {\n      throw new MybatisPlusException(\"not find typeAliasesPackage:\" + typeAliasesPackage);\n    }\n    for (    String packageToScan : typeAliasPackageArray) {\n      configuration.getTypeAliasRegistry().registerAliases(packageToScan,typeAliasesSuperType == null ? Object.class : typeAliasesSuperType);\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Scanned package: '\" + packageToScan + \"' for aliases\");\n      }\n    }\n  }\n  if (hasLength(this.typeEnumsPackage)) {\n    Set<Class> classes=null;\n    if (typeEnumsPackage.contains(\"*\") && !typeEnumsPackage.contains(\",\") && !typeEnumsPackage.contains(\";\")) {\n      classes=PackageHelper.scanTypePackage(typeEnumsPackage);\n    }\n else {\n      String[] typeEnumsPackageArray=tokenizeToStringArray(this.typeEnumsPackage,ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);\n      if (typeEnumsPackageArray == null) {\n        throw new MybatisPlusException(\"not find typeEnumsPackage:\" + typeEnumsPackage);\n      }\n      classes=new HashSet<Class>();\n      for (      String typePackage : typeEnumsPackageArray) {\n        classes.addAll(PackageHelper.scanTypePackage(typePackage));\n      }\n    }\n    TypeHandlerRegistry typeHandlerRegistry=configuration.getTypeHandlerRegistry();\n    for (    Class cls : classes) {\n      if (cls.isEnum()) {\n        if (IEnum.class.isAssignableFrom(cls)) {\n          typeHandlerRegistry.register(cls.getName(),com.baomidou.mybatisplus.handlers.EnumTypeHandler.class.getCanonicalName());\n        }\n else {\n          typeHandlerRegistry.register(cls.getName(),org.apache.ibatis.type.EnumOrdinalTypeHandler.class.getCanonicalName());\n        }\n      }\n    }\n  }\n  if (!isEmpty(this.typeAliases)) {\n    for (    Class<?> typeAlias : this.typeAliases) {\n      configuration.getTypeAliasRegistry().registerAlias(typeAlias);\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Registered type alias: '\" + typeAlias + \"'\");\n      }\n    }\n  }\n  if (!isEmpty(this.plugins)) {\n    for (    Interceptor plugin : this.plugins) {\n      configuration.addInterceptor(plugin);\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Registered plugin: '\" + plugin + \"'\");\n      }\n    }\n  }\n  if (hasLength(this.typeHandlersPackage)) {\n    String[] typeHandlersPackageArray=tokenizeToStringArray(this.typeHandlersPackage,ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);\n    for (    String packageToScan : typeHandlersPackageArray) {\n      configuration.getTypeHandlerRegistry().register(packageToScan);\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Scanned package: '\" + packageToScan + \"' for type handlers\");\n      }\n    }\n  }\n  if (!isEmpty(this.typeHandlers)) {\n    for (    TypeHandler<?> typeHandler : this.typeHandlers) {\n      configuration.getTypeHandlerRegistry().register(typeHandler);\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Registered type handler: '\" + typeHandler + \"'\");\n      }\n    }\n  }\n  if (this.databaseIdProvider != null) {\n    try {\n      configuration.setDatabaseId(this.databaseIdProvider.getDatabaseId(this.dataSource));\n    }\n catch (    SQLException e) {\n      throw new NestedIOException(\"Failed getting a databaseId\",e);\n    }\n  }\n  if (this.cache != null) {\n    configuration.addCache(this.cache);\n  }\n  if (xmlConfigBuilder != null) {\n    try {\n      xmlConfigBuilder.parse();\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Parsed configuration file: '\" + this.configLocation + \"'\");\n      }\n    }\n catch (    Exception ex) {\n      throw new NestedIOException(\"Failed to parse config resource: \" + this.configLocation,ex);\n    }\n finally {\n      ErrorContext.instance().reset();\n    }\n  }\n  if (this.transactionFactory == null) {\n    this.transactionFactory=new SpringManagedTransactionFactory();\n  }\n  configuration.setEnvironment(new Environment(this.environment,this.transactionFactory,this.dataSource));\n  GlobalConfigUtils.setMetaData(dataSource,globalConfig);\n  SqlSessionFactory sqlSessionFactory=this.sqlSessionFactoryBuilder.build(configuration);\n  SqlRunner.FACTORY=sqlSessionFactory;\n  globalConfig.setSqlSessionFactory(sqlSessionFactory);\n  globalConfig.signGlobalConfig(sqlSessionFactory);\n  if (!isEmpty(this.mapperLocations)) {\n    if (globalConfig.isRefresh()) {\n      new MybatisMapperRefresh(this.mapperLocations,sqlSessionFactory,2,2,true);\n    }\n    for (    Resource mapperLocation : this.mapperLocations) {\n      if (mapperLocation == null) {\n        continue;\n      }\n      try {\n        XMLMapperBuilder xmlMapperBuilder=new XMLMapperBuilder(mapperLocation.getInputStream(),configuration,mapperLocation.toString(),configuration.getSqlFragments());\n        xmlMapperBuilder.parse();\n      }\n catch (      Exception e) {\n        throw new NestedIOException(\"Failed to parse mapping resource: '\" + mapperLocation + \"'\",e);\n      }\n finally {\n        ErrorContext.instance().reset();\n      }\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"Parsed mapper file: '\" + mapperLocation + \"'\");\n      }\n    }\n  }\n else {\n    if (LOGGER.isDebugEnabled()) {\n      LOGGER.debug(\"Property 'mapperLocations' was not specified or no matching resources found\");\n    }\n  }\n  return sqlSessionFactory;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 855,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 558,
        "startColumnNumber" : 8,
        "endLineNumber" : 558,
        "endColumnNumber" : 114
      },
      "nodeContext" : "configuration.setEnvironment(new Environment(this.environment,this.transactionFactory,this.dataSource));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "com.baomidou.mybatisplus.spring.Environment"
  } ],
  "positionList" : [ {
    "charLength" : 75,
    "startLineNumber" : 558,
    "startColumnNumber" : 37,
    "endLineNumber" : 558,
    "endColumnNumber" : 112
  } ],
  "layoutRelationDataList" : [ ]
}