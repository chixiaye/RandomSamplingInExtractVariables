{
  "id" : 188,
  "expression" : "new ClassFileTransformer(){\n  @Override public byte[] transform(  final ClassLoader loader,  final String className,  final Class<?> cbr,  final ProtectionDomain pd,  final byte[] cfb) throws IllegalClassFormatException {\n    if (MAVEN_COMPILER_TRIGGER_CLASS.equals(className)) {\n      for (      final URL url : ((URLClassLoader)loader).getURLs()) {\n        if (url.getPath().contains(LOMBOK_URL_IDENTIFIER)) {\n          try {\n            instrumentation.appendToSystemClassLoaderSearch(new JarFile(url.getPath()));\n            MavenEcjBootstrapAgent.class.getClassLoader().loadClass(LOMBOK_AGENT_CLASS).getDeclaredMethod(\"premain\",String.class,Instrumentation.class).invoke(null,agentArgs,instrumentation);\n            instrumentation.removeTransformer(this);\n            break;\n          }\n catch (          Exception e) {\n            e.printStackTrace(System.err);\n          }\n        }\n      }\n    }\n    return NOT_TRANSFORMED;\n  }\n}\n",
  "projectName" : "projectlombok@lombok",
  "commitID" : "25def866b50860715ee7c315c678b8c3d1ba9b56",
  "filePath" : "/src/mavenEcjBootstrapAgent/lombok/launch/MavenEcjBootstrapAgent.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new ClassFileTransformer(){\n  @Override public byte[] transform(  final ClassLoader loader,  final String className,  final Class<?> cbr,  final ProtectionDomain pd,  final byte[] cfb) throws IllegalClassFormatException {\n    if (MAVEN_COMPILER_TRIGGER_CLASS.equals(className)) {\n      for (      final URL url : ((URLClassLoader)loader).getURLs()) {\n        if (url.getPath().contains(LOMBOK_URL_IDENTIFIER)) {\n          try {\n            instrumentation.appendToSystemClassLoaderSearch(new JarFile(url.getPath()));\n            MavenEcjBootstrapAgent.class.getClassLoader().loadClass(LOMBOK_AGENT_CLASS).getDeclaredMethod(\"premain\",String.class,Instrumentation.class).invoke(null,agentArgs,instrumentation);\n            instrumentation.removeTransformer(this);\n            break;\n          }\n catch (          Exception e) {\n            e.printStackTrace(System.err);\n          }\n        }\n      }\n    }\n    return NOT_TRANSFORMED;\n  }\n}\n",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 998,
      "startLineNumber" : 61,
      "startColumnNumber" : 33,
      "endLineNumber" : 81,
      "endColumnNumber" : 3
    },
    "astNodeNumber" : 127,
    "astHeight" : 20,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 1030,
        "startLineNumber" : 61,
        "startColumnNumber" : 2,
        "endLineNumber" : 81,
        "endColumnNumber" : 4
      },
      "nodeContext" : "instrumentation.addTransformer(new ClassFileTransformer(){\n  @Override public byte[] transform(  final ClassLoader loader,  final String className,  final Class<?> cbr,  final ProtectionDomain pd,  final byte[] cfb) throws IllegalClassFormatException {\n    if (MAVEN_COMPILER_TRIGGER_CLASS.equals(className)) {\n      for (      final URL url : ((URLClassLoader)loader).getURLs()) {\n        if (url.getPath().contains(LOMBOK_URL_IDENTIFIER)) {\n          try {\n            instrumentation.appendToSystemClassLoaderSearch(new JarFile(url.getPath()));\n            MavenEcjBootstrapAgent.class.getClassLoader().loadClass(LOMBOK_AGENT_CLASS).getDeclaredMethod(\"premain\",String.class,Instrumentation.class).invoke(null,agentArgs,instrumentation);\n            instrumentation.removeTransformer(this);\n            break;\n          }\n catch (          Exception e) {\n            e.printStackTrace(System.err);\n          }\n        }\n      }\n    }\n    return NOT_TRANSFORMED;\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 130,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1031,
        "startLineNumber" : 61,
        "startColumnNumber" : 2,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "instrumentation.addTransformer(new ClassFileTransformer(){\n  @Override public byte[] transform(  final ClassLoader loader,  final String className,  final Class<?> cbr,  final ProtectionDomain pd,  final byte[] cfb) throws IllegalClassFormatException {\n    if (MAVEN_COMPILER_TRIGGER_CLASS.equals(className)) {\n      for (      final URL url : ((URLClassLoader)loader).getURLs()) {\n        if (url.getPath().contains(LOMBOK_URL_IDENTIFIER)) {\n          try {\n            instrumentation.appendToSystemClassLoaderSearch(new JarFile(url.getPath()));\n            MavenEcjBootstrapAgent.class.getClassLoader().loadClass(LOMBOK_AGENT_CLASS).getDeclaredMethod(\"premain\",String.class,Instrumentation.class).invoke(null,agentArgs,instrumentation);\n            instrumentation.removeTransformer(this);\n            break;\n          }\n catch (          Exception e) {\n            e.printStackTrace(System.err);\n          }\n        }\n      }\n    }\n    return NOT_TRANSFORMED;\n  }\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 131,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1040,
        "startLineNumber" : 60,
        "startColumnNumber" : 91,
        "endLineNumber" : 82,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  instrumentation.addTransformer(new ClassFileTransformer(){\n    @Override public byte[] transform(    final ClassLoader loader,    final String className,    final Class<?> cbr,    final ProtectionDomain pd,    final byte[] cfb) throws IllegalClassFormatException {\n      if (MAVEN_COMPILER_TRIGGER_CLASS.equals(className)) {\n        for (        final URL url : ((URLClassLoader)loader).getURLs()) {\n          if (url.getPath().contains(LOMBOK_URL_IDENTIFIER)) {\n            try {\n              instrumentation.appendToSystemClassLoaderSearch(new JarFile(url.getPath()));\n              MavenEcjBootstrapAgent.class.getClassLoader().loadClass(LOMBOK_AGENT_CLASS).getDeclaredMethod(\"premain\",String.class,Instrumentation.class).invoke(null,agentArgs,instrumentation);\n              instrumentation.removeTransformer(this);\n              break;\n            }\n catch (            Exception e) {\n              e.printStackTrace(System.err);\n            }\n          }\n        }\n      }\n      return NOT_TRANSFORMED;\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 132,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1130,
        "startLineNumber" : 60,
        "startColumnNumber" : 1,
        "endLineNumber" : 82,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public static void premain(final String agentArgs,final Instrumentation instrumentation){\n  instrumentation.addTransformer(new ClassFileTransformer(){\n    @Override public byte[] transform(    final ClassLoader loader,    final String className,    final Class<?> cbr,    final ProtectionDomain pd,    final byte[] cfb) throws IllegalClassFormatException {\n      if (MAVEN_COMPILER_TRIGGER_CLASS.equals(className)) {\n        for (        final URL url : ((URLClassLoader)loader).getURLs()) {\n          if (url.getPath().contains(LOMBOK_URL_IDENTIFIER)) {\n            try {\n              instrumentation.appendToSystemClassLoaderSearch(new JarFile(url.getPath()));\n              MavenEcjBootstrapAgent.class.getClassLoader().loadClass(LOMBOK_AGENT_CLASS).getDeclaredMethod(\"premain\",String.class,Instrumentation.class).invoke(null,agentArgs,instrumentation);\n              instrumentation.removeTransformer(this);\n              break;\n            }\n catch (            Exception e) {\n              e.printStackTrace(System.err);\n            }\n          }\n        }\n      }\n      return NOT_TRANSFORMED;\n    }\n  }\n);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 147,
      "astHeight" : 24
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1031,
        "startLineNumber" : 61,
        "startColumnNumber" : 2,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "instrumentation.addTransformer(new ClassFileTransformer(){\n  @Override public byte[] transform(  final ClassLoader loader,  final String className,  final Class<?> cbr,  final ProtectionDomain pd,  final byte[] cfb) throws IllegalClassFormatException {\n    if (MAVEN_COMPILER_TRIGGER_CLASS.equals(className)) {\n      for (      final URL url : ((URLClassLoader)loader).getURLs()) {\n        if (url.getPath().contains(LOMBOK_URL_IDENTIFIER)) {\n          try {\n            instrumentation.appendToSystemClassLoaderSearch(new JarFile(url.getPath()));\n            MavenEcjBootstrapAgent.class.getClassLoader().loadClass(LOMBOK_AGENT_CLASS).getDeclaredMethod(\"premain\",String.class,Instrumentation.class).invoke(null,agentArgs,instrumentation);\n            instrumentation.removeTransformer(this);\n            break;\n          }\n catch (          Exception e) {\n            e.printStackTrace(System.err);\n          }\n        }\n      }\n    }\n    return NOT_TRANSFORMED;\n  }\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 131,
      "astHeight" : 22
    },
    "tokenLength" : 60,
    "type" : ""
  } ],
  "positionList" : [ {
    "charLength" : 998,
    "startLineNumber" : 61,
    "startColumnNumber" : 33,
    "endLineNumber" : 81,
    "endColumnNumber" : 3
  } ],
  "layoutRelationDataList" : [ ]
}