{
  "id" : 308,
  "expression" : "\"OffsetDateTime\"",
  "projectName" : "OpenAPITools@openapi-generator",
  "commitID" : "9e1972bb1d3a4f1e3f47c87613f4050feada0146",
  "filePath" : "/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/JavaPlayFrameworkCodegen.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"OffsetDateTime\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 232,
      "startColumnNumber" : 36,
      "endLineNumber" : 232,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 232,
        "startColumnNumber" : 8,
        "endLineNumber" : 232,
        "endColumnNumber" : 53
      },
      "nodeContext" : "typeMapping.put(\"DateTime\",\"OffsetDateTime\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 232,
        "startColumnNumber" : 8,
        "endLineNumber" : 232,
        "endColumnNumber" : 54
      },
      "nodeContext" : "typeMapping.put(\"DateTime\",\"OffsetDateTime\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5375,
        "startLineNumber" : 121,
        "startColumnNumber" : 30,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  super.processOpts();\n  modelDocTemplateFiles.remove(\"model_doc.mustache\");\n  apiDocTemplateFiles.remove(\"api_doc.mustache\");\n  if (additionalProperties.containsKey(TITLE)) {\n    this.setTitle((String)additionalProperties.get(TITLE));\n  }\n  if (additionalProperties.containsKey(CONFIG_PACKAGE)) {\n    this.setConfigPackage((String)additionalProperties.get(CONFIG_PACKAGE));\n  }\n else {\n    additionalProperties.put(CONFIG_PACKAGE,configPackage);\n  }\n  if (additionalProperties.containsKey(BASE_PACKAGE)) {\n    this.setBasePackage((String)additionalProperties.get(BASE_PACKAGE));\n  }\n else {\n    additionalProperties.put(BASE_PACKAGE,basePackage);\n  }\n  if (additionalProperties.containsKey(CONTROLLER_ONLY)) {\n    this.setControllerOnly(convertPropertyToBoolean(CONTROLLER_ONLY));\n  }\n  writePropertyBack(CONTROLLER_ONLY,controllerOnly);\n  if (additionalProperties.containsKey(USE_BEANVALIDATION)) {\n    this.setUseBeanValidation(convertPropertyToBoolean(USE_BEANVALIDATION));\n  }\n  writePropertyBack(USE_BEANVALIDATION,useBeanValidation);\n  if (additionalProperties.containsKey(USE_INTERFACES)) {\n    this.setUseInterfaces(convertPropertyToBoolean(USE_INTERFACES));\n  }\n  writePropertyBack(USE_INTERFACES,useInterfaces);\n  if (additionalProperties.containsKey(HANDLE_EXCEPTIONS)) {\n    this.setHandleExceptions(convertPropertyToBoolean(HANDLE_EXCEPTIONS));\n  }\n  writePropertyBack(HANDLE_EXCEPTIONS,handleExceptions);\n  if (additionalProperties.containsKey(WRAP_CALLS)) {\n    this.setWrapCalls(convertPropertyToBoolean(WRAP_CALLS));\n  }\n  writePropertyBack(WRAP_CALLS,wrapCalls);\n  if (additionalProperties.containsKey(USE_SWAGGER_UI)) {\n    this.setUseSwaggerUI(convertPropertyToBoolean(USE_SWAGGER_UI));\n  }\n  writePropertyBack(USE_SWAGGER_UI,useSwaggerUI);\n  if (additionalProperties.containsKey(SUPPORT_ASYNC)) {\n    this.setSupportAsync(convertPropertyToBoolean(SUPPORT_ASYNC));\n  }\n  writePropertyBack(SUPPORT_ASYNC,supportAsync);\n  importMapping.remove(\"ApiModelProperty\");\n  importMapping.remove(\"ApiModel\");\n  supportingFiles.add(new SupportingFile(\"README.mustache\",\"\",\"README\"));\n  supportingFiles.add(new SupportingFile(\"LICENSE.mustache\",\"\",\"LICENSE\"));\n  supportingFiles.add(new SupportingFile(\"build.mustache\",\"\",\"build.sbt\"));\n  supportingFiles.add(new SupportingFile(\"buildproperties.mustache\",\"project\",\"build.properties\"));\n  supportingFiles.add(new SupportingFile(\"plugins.mustache\",\"project\",\"plugins.sbt\"));\n  supportingFiles.add(new SupportingFile(\"logback.mustache\",\"conf\",\"logback.xml\"));\n  supportingFiles.add(new SupportingFile(\"application.mustache\",\"conf\",\"application.conf\"));\n  supportingFiles.add(new SupportingFile(\"routes.mustache\",\"conf\",\"routes\"));\n  if (!this.controllerOnly && this.useInterfaces) {\n    supportingFiles.add(new SupportingFile(\"module.mustache\",\"app\",\"Module.java\"));\n  }\n  supportingFiles.add(new SupportingFile(\"openapiUtils.mustache\",\"app/openapitools\",\"OpenAPIUtils.java\"));\n  supportingFiles.add(new SupportingFile(\"securityApiUtils.mustache\",\"app/openapitools\",\"SecurityAPIUtils.java\"));\n  if (this.handleExceptions) {\n    supportingFiles.add(new SupportingFile(\"errorHandler.mustache\",\"app/openapitools\",\"ErrorHandler.java\"));\n  }\n  if (this.wrapCalls) {\n    supportingFiles.add(new SupportingFile(\"apiCall.mustache\",\"app/openapitools\",\"ApiCall.java\"));\n  }\n  if (this.useSwaggerUI) {\n    supportingFiles.add(new SupportingFile(\"openapi.mustache\",\"public\",\"openapi.json\"));\n    supportingFiles.add(new SupportingFile(\"apiDocController.mustache\",String.format(Locale.ROOT,\"app/%s\",apiPackage.replace(\".\",File.separator)),\"ApiDocController.java\"));\n  }\n  apiTemplateFiles.remove(\"api.mustache\");\n  apiTemplateFiles.put(\"newApiController.mustache\",\"Controller.java\");\n  if (!this.controllerOnly) {\n    apiTemplateFiles.put(\"newApi.mustache\",\"ControllerImp.java\");\n    if (this.useInterfaces) {\n      apiTemplateFiles.put(\"newApiInterface.mustache\",\"ControllerImpInterface.java\");\n    }\n  }\n  additionalProperties.put(\"javaVersion\",\"1.8\");\n  additionalProperties.put(\"jdk8\",\"true\");\n  typeMapping.put(\"date\",\"LocalDate\");\n  typeMapping.put(\"DateTime\",\"OffsetDateTime\");\n  importMapping.put(\"LocalDate\",\"java.time.LocalDate\");\n  importMapping.put(\"OffsetDateTime\",\"java.time.OffsetDateTime\");\n  importMapping.put(\"InputStream\",\"java.io.InputStream\");\n  typeMapping.put(\"file\",\"InputStream\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 485,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5415,
        "startLineNumber" : 120,
        "startColumnNumber" : 4,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void processOpts(){\n  super.processOpts();\n  modelDocTemplateFiles.remove(\"model_doc.mustache\");\n  apiDocTemplateFiles.remove(\"api_doc.mustache\");\n  if (additionalProperties.containsKey(TITLE)) {\n    this.setTitle((String)additionalProperties.get(TITLE));\n  }\n  if (additionalProperties.containsKey(CONFIG_PACKAGE)) {\n    this.setConfigPackage((String)additionalProperties.get(CONFIG_PACKAGE));\n  }\n else {\n    additionalProperties.put(CONFIG_PACKAGE,configPackage);\n  }\n  if (additionalProperties.containsKey(BASE_PACKAGE)) {\n    this.setBasePackage((String)additionalProperties.get(BASE_PACKAGE));\n  }\n else {\n    additionalProperties.put(BASE_PACKAGE,basePackage);\n  }\n  if (additionalProperties.containsKey(CONTROLLER_ONLY)) {\n    this.setControllerOnly(convertPropertyToBoolean(CONTROLLER_ONLY));\n  }\n  writePropertyBack(CONTROLLER_ONLY,controllerOnly);\n  if (additionalProperties.containsKey(USE_BEANVALIDATION)) {\n    this.setUseBeanValidation(convertPropertyToBoolean(USE_BEANVALIDATION));\n  }\n  writePropertyBack(USE_BEANVALIDATION,useBeanValidation);\n  if (additionalProperties.containsKey(USE_INTERFACES)) {\n    this.setUseInterfaces(convertPropertyToBoolean(USE_INTERFACES));\n  }\n  writePropertyBack(USE_INTERFACES,useInterfaces);\n  if (additionalProperties.containsKey(HANDLE_EXCEPTIONS)) {\n    this.setHandleExceptions(convertPropertyToBoolean(HANDLE_EXCEPTIONS));\n  }\n  writePropertyBack(HANDLE_EXCEPTIONS,handleExceptions);\n  if (additionalProperties.containsKey(WRAP_CALLS)) {\n    this.setWrapCalls(convertPropertyToBoolean(WRAP_CALLS));\n  }\n  writePropertyBack(WRAP_CALLS,wrapCalls);\n  if (additionalProperties.containsKey(USE_SWAGGER_UI)) {\n    this.setUseSwaggerUI(convertPropertyToBoolean(USE_SWAGGER_UI));\n  }\n  writePropertyBack(USE_SWAGGER_UI,useSwaggerUI);\n  if (additionalProperties.containsKey(SUPPORT_ASYNC)) {\n    this.setSupportAsync(convertPropertyToBoolean(SUPPORT_ASYNC));\n  }\n  writePropertyBack(SUPPORT_ASYNC,supportAsync);\n  importMapping.remove(\"ApiModelProperty\");\n  importMapping.remove(\"ApiModel\");\n  supportingFiles.add(new SupportingFile(\"README.mustache\",\"\",\"README\"));\n  supportingFiles.add(new SupportingFile(\"LICENSE.mustache\",\"\",\"LICENSE\"));\n  supportingFiles.add(new SupportingFile(\"build.mustache\",\"\",\"build.sbt\"));\n  supportingFiles.add(new SupportingFile(\"buildproperties.mustache\",\"project\",\"build.properties\"));\n  supportingFiles.add(new SupportingFile(\"plugins.mustache\",\"project\",\"plugins.sbt\"));\n  supportingFiles.add(new SupportingFile(\"logback.mustache\",\"conf\",\"logback.xml\"));\n  supportingFiles.add(new SupportingFile(\"application.mustache\",\"conf\",\"application.conf\"));\n  supportingFiles.add(new SupportingFile(\"routes.mustache\",\"conf\",\"routes\"));\n  if (!this.controllerOnly && this.useInterfaces) {\n    supportingFiles.add(new SupportingFile(\"module.mustache\",\"app\",\"Module.java\"));\n  }\n  supportingFiles.add(new SupportingFile(\"openapiUtils.mustache\",\"app/openapitools\",\"OpenAPIUtils.java\"));\n  supportingFiles.add(new SupportingFile(\"securityApiUtils.mustache\",\"app/openapitools\",\"SecurityAPIUtils.java\"));\n  if (this.handleExceptions) {\n    supportingFiles.add(new SupportingFile(\"errorHandler.mustache\",\"app/openapitools\",\"ErrorHandler.java\"));\n  }\n  if (this.wrapCalls) {\n    supportingFiles.add(new SupportingFile(\"apiCall.mustache\",\"app/openapitools\",\"ApiCall.java\"));\n  }\n  if (this.useSwaggerUI) {\n    supportingFiles.add(new SupportingFile(\"openapi.mustache\",\"public\",\"openapi.json\"));\n    supportingFiles.add(new SupportingFile(\"apiDocController.mustache\",String.format(Locale.ROOT,\"app/%s\",apiPackage.replace(\".\",File.separator)),\"ApiDocController.java\"));\n  }\n  apiTemplateFiles.remove(\"api.mustache\");\n  apiTemplateFiles.put(\"newApiController.mustache\",\"Controller.java\");\n  if (!this.controllerOnly) {\n    apiTemplateFiles.put(\"newApi.mustache\",\"ControllerImp.java\");\n    if (this.useInterfaces) {\n      apiTemplateFiles.put(\"newApiInterface.mustache\",\"ControllerImpInterface.java\");\n    }\n  }\n  additionalProperties.put(\"javaVersion\",\"1.8\");\n  additionalProperties.put(\"jdk8\",\"true\");\n  typeMapping.put(\"date\",\"LocalDate\");\n  typeMapping.put(\"DateTime\",\"OffsetDateTime\");\n  importMapping.put(\"LocalDate\",\"java.time.LocalDate\");\n  importMapping.put(\"OffsetDateTime\",\"java.time.OffsetDateTime\");\n  importMapping.put(\"InputStream\",\"java.io.InputStream\");\n  typeMapping.put(\"file\",\"InputStream\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 491,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 232,
        "startColumnNumber" : 8,
        "endLineNumber" : 232,
        "endColumnNumber" : 54
      },
      "nodeContext" : "typeMapping.put(\"DateTime\",\"OffsetDateTime\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"OffsetDateTime\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 234,
      "startColumnNumber" : 26,
      "endLineNumber" : 234,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 234,
        "startColumnNumber" : 8,
        "endLineNumber" : 234,
        "endColumnNumber" : 71
      },
      "nodeContext" : "importMapping.put(\"OffsetDateTime\",\"java.time.OffsetDateTime\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 234,
        "startColumnNumber" : 8,
        "endLineNumber" : 234,
        "endColumnNumber" : 72
      },
      "nodeContext" : "importMapping.put(\"OffsetDateTime\",\"java.time.OffsetDateTime\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5375,
        "startLineNumber" : 121,
        "startColumnNumber" : 30,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  super.processOpts();\n  modelDocTemplateFiles.remove(\"model_doc.mustache\");\n  apiDocTemplateFiles.remove(\"api_doc.mustache\");\n  if (additionalProperties.containsKey(TITLE)) {\n    this.setTitle((String)additionalProperties.get(TITLE));\n  }\n  if (additionalProperties.containsKey(CONFIG_PACKAGE)) {\n    this.setConfigPackage((String)additionalProperties.get(CONFIG_PACKAGE));\n  }\n else {\n    additionalProperties.put(CONFIG_PACKAGE,configPackage);\n  }\n  if (additionalProperties.containsKey(BASE_PACKAGE)) {\n    this.setBasePackage((String)additionalProperties.get(BASE_PACKAGE));\n  }\n else {\n    additionalProperties.put(BASE_PACKAGE,basePackage);\n  }\n  if (additionalProperties.containsKey(CONTROLLER_ONLY)) {\n    this.setControllerOnly(convertPropertyToBoolean(CONTROLLER_ONLY));\n  }\n  writePropertyBack(CONTROLLER_ONLY,controllerOnly);\n  if (additionalProperties.containsKey(USE_BEANVALIDATION)) {\n    this.setUseBeanValidation(convertPropertyToBoolean(USE_BEANVALIDATION));\n  }\n  writePropertyBack(USE_BEANVALIDATION,useBeanValidation);\n  if (additionalProperties.containsKey(USE_INTERFACES)) {\n    this.setUseInterfaces(convertPropertyToBoolean(USE_INTERFACES));\n  }\n  writePropertyBack(USE_INTERFACES,useInterfaces);\n  if (additionalProperties.containsKey(HANDLE_EXCEPTIONS)) {\n    this.setHandleExceptions(convertPropertyToBoolean(HANDLE_EXCEPTIONS));\n  }\n  writePropertyBack(HANDLE_EXCEPTIONS,handleExceptions);\n  if (additionalProperties.containsKey(WRAP_CALLS)) {\n    this.setWrapCalls(convertPropertyToBoolean(WRAP_CALLS));\n  }\n  writePropertyBack(WRAP_CALLS,wrapCalls);\n  if (additionalProperties.containsKey(USE_SWAGGER_UI)) {\n    this.setUseSwaggerUI(convertPropertyToBoolean(USE_SWAGGER_UI));\n  }\n  writePropertyBack(USE_SWAGGER_UI,useSwaggerUI);\n  if (additionalProperties.containsKey(SUPPORT_ASYNC)) {\n    this.setSupportAsync(convertPropertyToBoolean(SUPPORT_ASYNC));\n  }\n  writePropertyBack(SUPPORT_ASYNC,supportAsync);\n  importMapping.remove(\"ApiModelProperty\");\n  importMapping.remove(\"ApiModel\");\n  supportingFiles.add(new SupportingFile(\"README.mustache\",\"\",\"README\"));\n  supportingFiles.add(new SupportingFile(\"LICENSE.mustache\",\"\",\"LICENSE\"));\n  supportingFiles.add(new SupportingFile(\"build.mustache\",\"\",\"build.sbt\"));\n  supportingFiles.add(new SupportingFile(\"buildproperties.mustache\",\"project\",\"build.properties\"));\n  supportingFiles.add(new SupportingFile(\"plugins.mustache\",\"project\",\"plugins.sbt\"));\n  supportingFiles.add(new SupportingFile(\"logback.mustache\",\"conf\",\"logback.xml\"));\n  supportingFiles.add(new SupportingFile(\"application.mustache\",\"conf\",\"application.conf\"));\n  supportingFiles.add(new SupportingFile(\"routes.mustache\",\"conf\",\"routes\"));\n  if (!this.controllerOnly && this.useInterfaces) {\n    supportingFiles.add(new SupportingFile(\"module.mustache\",\"app\",\"Module.java\"));\n  }\n  supportingFiles.add(new SupportingFile(\"openapiUtils.mustache\",\"app/openapitools\",\"OpenAPIUtils.java\"));\n  supportingFiles.add(new SupportingFile(\"securityApiUtils.mustache\",\"app/openapitools\",\"SecurityAPIUtils.java\"));\n  if (this.handleExceptions) {\n    supportingFiles.add(new SupportingFile(\"errorHandler.mustache\",\"app/openapitools\",\"ErrorHandler.java\"));\n  }\n  if (this.wrapCalls) {\n    supportingFiles.add(new SupportingFile(\"apiCall.mustache\",\"app/openapitools\",\"ApiCall.java\"));\n  }\n  if (this.useSwaggerUI) {\n    supportingFiles.add(new SupportingFile(\"openapi.mustache\",\"public\",\"openapi.json\"));\n    supportingFiles.add(new SupportingFile(\"apiDocController.mustache\",String.format(Locale.ROOT,\"app/%s\",apiPackage.replace(\".\",File.separator)),\"ApiDocController.java\"));\n  }\n  apiTemplateFiles.remove(\"api.mustache\");\n  apiTemplateFiles.put(\"newApiController.mustache\",\"Controller.java\");\n  if (!this.controllerOnly) {\n    apiTemplateFiles.put(\"newApi.mustache\",\"ControllerImp.java\");\n    if (this.useInterfaces) {\n      apiTemplateFiles.put(\"newApiInterface.mustache\",\"ControllerImpInterface.java\");\n    }\n  }\n  additionalProperties.put(\"javaVersion\",\"1.8\");\n  additionalProperties.put(\"jdk8\",\"true\");\n  typeMapping.put(\"date\",\"LocalDate\");\n  typeMapping.put(\"DateTime\",\"OffsetDateTime\");\n  importMapping.put(\"LocalDate\",\"java.time.LocalDate\");\n  importMapping.put(\"OffsetDateTime\",\"java.time.OffsetDateTime\");\n  importMapping.put(\"InputStream\",\"java.io.InputStream\");\n  typeMapping.put(\"file\",\"InputStream\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 485,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5415,
        "startLineNumber" : 120,
        "startColumnNumber" : 4,
        "endLineNumber" : 238,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void processOpts(){\n  super.processOpts();\n  modelDocTemplateFiles.remove(\"model_doc.mustache\");\n  apiDocTemplateFiles.remove(\"api_doc.mustache\");\n  if (additionalProperties.containsKey(TITLE)) {\n    this.setTitle((String)additionalProperties.get(TITLE));\n  }\n  if (additionalProperties.containsKey(CONFIG_PACKAGE)) {\n    this.setConfigPackage((String)additionalProperties.get(CONFIG_PACKAGE));\n  }\n else {\n    additionalProperties.put(CONFIG_PACKAGE,configPackage);\n  }\n  if (additionalProperties.containsKey(BASE_PACKAGE)) {\n    this.setBasePackage((String)additionalProperties.get(BASE_PACKAGE));\n  }\n else {\n    additionalProperties.put(BASE_PACKAGE,basePackage);\n  }\n  if (additionalProperties.containsKey(CONTROLLER_ONLY)) {\n    this.setControllerOnly(convertPropertyToBoolean(CONTROLLER_ONLY));\n  }\n  writePropertyBack(CONTROLLER_ONLY,controllerOnly);\n  if (additionalProperties.containsKey(USE_BEANVALIDATION)) {\n    this.setUseBeanValidation(convertPropertyToBoolean(USE_BEANVALIDATION));\n  }\n  writePropertyBack(USE_BEANVALIDATION,useBeanValidation);\n  if (additionalProperties.containsKey(USE_INTERFACES)) {\n    this.setUseInterfaces(convertPropertyToBoolean(USE_INTERFACES));\n  }\n  writePropertyBack(USE_INTERFACES,useInterfaces);\n  if (additionalProperties.containsKey(HANDLE_EXCEPTIONS)) {\n    this.setHandleExceptions(convertPropertyToBoolean(HANDLE_EXCEPTIONS));\n  }\n  writePropertyBack(HANDLE_EXCEPTIONS,handleExceptions);\n  if (additionalProperties.containsKey(WRAP_CALLS)) {\n    this.setWrapCalls(convertPropertyToBoolean(WRAP_CALLS));\n  }\n  writePropertyBack(WRAP_CALLS,wrapCalls);\n  if (additionalProperties.containsKey(USE_SWAGGER_UI)) {\n    this.setUseSwaggerUI(convertPropertyToBoolean(USE_SWAGGER_UI));\n  }\n  writePropertyBack(USE_SWAGGER_UI,useSwaggerUI);\n  if (additionalProperties.containsKey(SUPPORT_ASYNC)) {\n    this.setSupportAsync(convertPropertyToBoolean(SUPPORT_ASYNC));\n  }\n  writePropertyBack(SUPPORT_ASYNC,supportAsync);\n  importMapping.remove(\"ApiModelProperty\");\n  importMapping.remove(\"ApiModel\");\n  supportingFiles.add(new SupportingFile(\"README.mustache\",\"\",\"README\"));\n  supportingFiles.add(new SupportingFile(\"LICENSE.mustache\",\"\",\"LICENSE\"));\n  supportingFiles.add(new SupportingFile(\"build.mustache\",\"\",\"build.sbt\"));\n  supportingFiles.add(new SupportingFile(\"buildproperties.mustache\",\"project\",\"build.properties\"));\n  supportingFiles.add(new SupportingFile(\"plugins.mustache\",\"project\",\"plugins.sbt\"));\n  supportingFiles.add(new SupportingFile(\"logback.mustache\",\"conf\",\"logback.xml\"));\n  supportingFiles.add(new SupportingFile(\"application.mustache\",\"conf\",\"application.conf\"));\n  supportingFiles.add(new SupportingFile(\"routes.mustache\",\"conf\",\"routes\"));\n  if (!this.controllerOnly && this.useInterfaces) {\n    supportingFiles.add(new SupportingFile(\"module.mustache\",\"app\",\"Module.java\"));\n  }\n  supportingFiles.add(new SupportingFile(\"openapiUtils.mustache\",\"app/openapitools\",\"OpenAPIUtils.java\"));\n  supportingFiles.add(new SupportingFile(\"securityApiUtils.mustache\",\"app/openapitools\",\"SecurityAPIUtils.java\"));\n  if (this.handleExceptions) {\n    supportingFiles.add(new SupportingFile(\"errorHandler.mustache\",\"app/openapitools\",\"ErrorHandler.java\"));\n  }\n  if (this.wrapCalls) {\n    supportingFiles.add(new SupportingFile(\"apiCall.mustache\",\"app/openapitools\",\"ApiCall.java\"));\n  }\n  if (this.useSwaggerUI) {\n    supportingFiles.add(new SupportingFile(\"openapi.mustache\",\"public\",\"openapi.json\"));\n    supportingFiles.add(new SupportingFile(\"apiDocController.mustache\",String.format(Locale.ROOT,\"app/%s\",apiPackage.replace(\".\",File.separator)),\"ApiDocController.java\"));\n  }\n  apiTemplateFiles.remove(\"api.mustache\");\n  apiTemplateFiles.put(\"newApiController.mustache\",\"Controller.java\");\n  if (!this.controllerOnly) {\n    apiTemplateFiles.put(\"newApi.mustache\",\"ControllerImp.java\");\n    if (this.useInterfaces) {\n      apiTemplateFiles.put(\"newApiInterface.mustache\",\"ControllerImpInterface.java\");\n    }\n  }\n  additionalProperties.put(\"javaVersion\",\"1.8\");\n  additionalProperties.put(\"jdk8\",\"true\");\n  typeMapping.put(\"date\",\"LocalDate\");\n  typeMapping.put(\"DateTime\",\"OffsetDateTime\");\n  importMapping.put(\"LocalDate\",\"java.time.LocalDate\");\n  importMapping.put(\"OffsetDateTime\",\"java.time.OffsetDateTime\");\n  importMapping.put(\"InputStream\",\"java.io.InputStream\");\n  typeMapping.put(\"file\",\"InputStream\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 491,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 234,
        "startColumnNumber" : 8,
        "endLineNumber" : 234,
        "endColumnNumber" : 72
      },
      "nodeContext" : "importMapping.put(\"OffsetDateTime\",\"java.time.OffsetDateTime\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 232,
    "startColumnNumber" : 36,
    "endLineNumber" : 232,
    "endColumnNumber" : 52
  }, {
    "charLength" : 16,
    "startLineNumber" : 234,
    "startColumnNumber" : 26,
    "endLineNumber" : 234,
    "endColumnNumber" : 42
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}