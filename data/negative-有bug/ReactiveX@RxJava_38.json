{
  "id" : 38,
  "expression" : "d && (empty || sw)",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/main/java/io/reactivex/internal/operators/flowable/FlowableWindowTimed.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "d && (empty || sw)",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 805,
      "startColumnNumber" : 24,
      "endLineNumber" : 805,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 6,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 623,
        "startLineNumber" : 805,
        "startColumnNumber" : 20,
        "endLineNumber" : 820,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (d && (empty || sw)) {\n  q.clear();\n  dispose();\n  Throwable e=error;\n  if (e != null) {\n    for (    UnicastProcessor<T> w : ws) {\n      w.onError(e);\n    }\n  }\n else {\n    for (    UnicastProcessor<T> w : ws) {\n      w.onError(e);\n    }\n  }\n  ws.clear();\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 62,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 3230,
        "startLineNumber" : 789,
        "startColumnNumber" : 25,
        "endLineNumber" : 867,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (terminated) {\n    s.cancel();\n    dispose();\n    q.clear();\n    ws.clear();\n    return;\n  }\n  boolean d=done;\n  Object v=q.poll();\n  boolean empty=v == null;\n  boolean sw=v instanceof SubjectWork;\n  if (d && (empty || sw)) {\n    q.clear();\n    dispose();\n    Throwable e=error;\n    if (e != null) {\n      for (      UnicastProcessor<T> w : ws) {\n        w.onError(e);\n      }\n    }\n else {\n      for (      UnicastProcessor<T> w : ws) {\n        w.onError(e);\n      }\n    }\n    ws.clear();\n    return;\n  }\n  if (empty) {\n    break;\n  }\n  if (sw) {\n    @SuppressWarnings(\"unchecked\") SubjectWork<T> work=(SubjectWork<T>)v;\n    if (work.open) {\n      if (cancelled) {\n        continue;\n      }\n      long r=requested();\n      if (r != 0L) {\n        final UnicastProcessor<T> w=new UnicastProcessor<T>(bufferSize);\n        ws.add(w);\n        a.onNext(w);\n        if (r != Long.MAX_VALUE) {\n          produced(1);\n        }\n        worker.schedule(new Runnable(){\n          @Override public void run(){\n            complete(w);\n          }\n        }\n,timespan,unit);\n      }\n else {\n        a.onError(new IllegalStateException(\"Can't emit window due to lack of requests\"));\n        continue;\n      }\n    }\n else {\n      ws.remove(work.w);\n      work.w.onComplete();\n      if (ws.isEmpty() && cancelled) {\n        terminated=true;\n      }\n      continue;\n    }\n  }\n  for (  UnicastProcessor<T> w : ws) {\n    w.onNext(NotificationLite.<T>getValue(v));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 269,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3239,
        "startLineNumber" : 789,
        "startColumnNumber" : 16,
        "endLineNumber" : 867,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (; ; ) {\n  if (terminated) {\n    s.cancel();\n    dispose();\n    q.clear();\n    ws.clear();\n    return;\n  }\n  boolean d=done;\n  Object v=q.poll();\n  boolean empty=v == null;\n  boolean sw=v instanceof SubjectWork;\n  if (d && (empty || sw)) {\n    q.clear();\n    dispose();\n    Throwable e=error;\n    if (e != null) {\n      for (      UnicastProcessor<T> w : ws) {\n        w.onError(e);\n      }\n    }\n else {\n      for (      UnicastProcessor<T> w : ws) {\n        w.onError(e);\n      }\n    }\n    ws.clear();\n    return;\n  }\n  if (empty) {\n    break;\n  }\n  if (sw) {\n    @SuppressWarnings(\"unchecked\") SubjectWork<T> work=(SubjectWork<T>)v;\n    if (work.open) {\n      if (cancelled) {\n        continue;\n      }\n      long r=requested();\n      if (r != 0L) {\n        final UnicastProcessor<T> w=new UnicastProcessor<T>(bufferSize);\n        ws.add(w);\n        a.onNext(w);\n        if (r != Long.MAX_VALUE) {\n          produced(1);\n        }\n        worker.schedule(new Runnable(){\n          @Override public void run(){\n            complete(w);\n          }\n        }\n,timespan,unit);\n      }\n else {\n        a.onError(new IllegalStateException(\"Can't emit window due to lack of requests\"));\n        continue;\n      }\n    }\n else {\n      ws.remove(work.w);\n      work.w.onComplete();\n      if (ws.isEmpty() && cancelled) {\n        terminated=true;\n      }\n      continue;\n    }\n  }\n  for (  UnicastProcessor<T> w : ws) {\n    w.onNext(NotificationLite.<T>getValue(v));\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 270,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 3434,
        "startLineNumber" : 787,
        "startColumnNumber" : 21,
        "endLineNumber" : 873,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  for (; ; ) {\n    if (terminated) {\n      s.cancel();\n      dispose();\n      q.clear();\n      ws.clear();\n      return;\n    }\n    boolean d=done;\n    Object v=q.poll();\n    boolean empty=v == null;\n    boolean sw=v instanceof SubjectWork;\n    if (d && (empty || sw)) {\n      q.clear();\n      dispose();\n      Throwable e=error;\n      if (e != null) {\n        for (        UnicastProcessor<T> w : ws) {\n          w.onError(e);\n        }\n      }\n else {\n        for (        UnicastProcessor<T> w : ws) {\n          w.onError(e);\n        }\n      }\n      ws.clear();\n      return;\n    }\n    if (empty) {\n      break;\n    }\n    if (sw) {\n      @SuppressWarnings(\"unchecked\") SubjectWork<T> work=(SubjectWork<T>)v;\n      if (work.open) {\n        if (cancelled) {\n          continue;\n        }\n        long r=requested();\n        if (r != 0L) {\n          final UnicastProcessor<T> w=new UnicastProcessor<T>(bufferSize);\n          ws.add(w);\n          a.onNext(w);\n          if (r != Long.MAX_VALUE) {\n            produced(1);\n          }\n          worker.schedule(new Runnable(){\n            @Override public void run(){\n              complete(w);\n            }\n          }\n,timespan,unit);\n        }\n else {\n          a.onError(new IllegalStateException(\"Can't emit window due to lack of requests\"));\n          continue;\n        }\n      }\n else {\n        ws.remove(work.w);\n        work.w.onComplete();\n        if (ws.isEmpty() && cancelled) {\n          terminated=true;\n        }\n        continue;\n      }\n    }\n    for (    UnicastProcessor<T> w : ws) {\n      w.onNext(NotificationLite.<T>getValue(v));\n    }\n  }\n  missed=leave(-missed);\n  if (missed == 0) {\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 284,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3443,
        "startLineNumber" : 787,
        "startColumnNumber" : 12,
        "endLineNumber" : 873,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (; ; ) {\n  for (; ; ) {\n    if (terminated) {\n      s.cancel();\n      dispose();\n      q.clear();\n      ws.clear();\n      return;\n    }\n    boolean d=done;\n    Object v=q.poll();\n    boolean empty=v == null;\n    boolean sw=v instanceof SubjectWork;\n    if (d && (empty || sw)) {\n      q.clear();\n      dispose();\n      Throwable e=error;\n      if (e != null) {\n        for (        UnicastProcessor<T> w : ws) {\n          w.onError(e);\n        }\n      }\n else {\n        for (        UnicastProcessor<T> w : ws) {\n          w.onError(e);\n        }\n      }\n      ws.clear();\n      return;\n    }\n    if (empty) {\n      break;\n    }\n    if (sw) {\n      @SuppressWarnings(\"unchecked\") SubjectWork<T> work=(SubjectWork<T>)v;\n      if (work.open) {\n        if (cancelled) {\n          continue;\n        }\n        long r=requested();\n        if (r != 0L) {\n          final UnicastProcessor<T> w=new UnicastProcessor<T>(bufferSize);\n          ws.add(w);\n          a.onNext(w);\n          if (r != Long.MAX_VALUE) {\n            produced(1);\n          }\n          worker.schedule(new Runnable(){\n            @Override public void run(){\n              complete(w);\n            }\n          }\n,timespan,unit);\n        }\n else {\n          a.onError(new IllegalStateException(\"Can't emit window due to lack of requests\"));\n          continue;\n        }\n      }\n else {\n        ws.remove(work.w);\n        work.w.onComplete();\n        if (ws.isEmpty() && cancelled) {\n          terminated=true;\n        }\n        continue;\n      }\n    }\n    for (    UnicastProcessor<T> w : ws) {\n      w.onNext(NotificationLite.<T>getValue(v));\n    }\n  }\n  missed=leave(-missed);\n  if (missed == 0) {\n    break;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 285,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3692,
        "startLineNumber" : 780,
        "startColumnNumber" : 25,
        "endLineNumber" : 874,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final Queue<Object> q=queue;\n  final Subscriber<? super Flowable<T>> a=actual;\n  final List<UnicastProcessor<T>> ws=windows;\n  int missed=1;\n  for (; ; ) {\n    for (; ; ) {\n      if (terminated) {\n        s.cancel();\n        dispose();\n        q.clear();\n        ws.clear();\n        return;\n      }\n      boolean d=done;\n      Object v=q.poll();\n      boolean empty=v == null;\n      boolean sw=v instanceof SubjectWork;\n      if (d && (empty || sw)) {\n        q.clear();\n        dispose();\n        Throwable e=error;\n        if (e != null) {\n          for (          UnicastProcessor<T> w : ws) {\n            w.onError(e);\n          }\n        }\n else {\n          for (          UnicastProcessor<T> w : ws) {\n            w.onError(e);\n          }\n        }\n        ws.clear();\n        return;\n      }\n      if (empty) {\n        break;\n      }\n      if (sw) {\n        @SuppressWarnings(\"unchecked\") SubjectWork<T> work=(SubjectWork<T>)v;\n        if (work.open) {\n          if (cancelled) {\n            continue;\n          }\n          long r=requested();\n          if (r != 0L) {\n            final UnicastProcessor<T> w=new UnicastProcessor<T>(bufferSize);\n            ws.add(w);\n            a.onNext(w);\n            if (r != Long.MAX_VALUE) {\n              produced(1);\n            }\n            worker.schedule(new Runnable(){\n              @Override public void run(){\n                complete(w);\n              }\n            }\n,timespan,unit);\n          }\n else {\n            a.onError(new IllegalStateException(\"Can't emit window due to lack of requests\"));\n            continue;\n          }\n        }\n else {\n          ws.remove(work.w);\n          work.w.onComplete();\n          if (ws.isEmpty() && cancelled) {\n            terminated=true;\n          }\n          continue;\n        }\n      }\n      for (      UnicastProcessor<T> w : ws) {\n        w.onNext(NotificationLite.<T>getValue(v));\n      }\n    }\n    missed=leave(-missed);\n    if (missed == 0) {\n      break;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 328,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3709,
        "startLineNumber" : 780,
        "startColumnNumber" : 8,
        "endLineNumber" : 874,
        "endColumnNumber" : 9
      },
      "nodeContext" : "void drainLoop(){\n  final Queue<Object> q=queue;\n  final Subscriber<? super Flowable<T>> a=actual;\n  final List<UnicastProcessor<T>> ws=windows;\n  int missed=1;\n  for (; ; ) {\n    for (; ; ) {\n      if (terminated) {\n        s.cancel();\n        dispose();\n        q.clear();\n        ws.clear();\n        return;\n      }\n      boolean d=done;\n      Object v=q.poll();\n      boolean empty=v == null;\n      boolean sw=v instanceof SubjectWork;\n      if (d && (empty || sw)) {\n        q.clear();\n        dispose();\n        Throwable e=error;\n        if (e != null) {\n          for (          UnicastProcessor<T> w : ws) {\n            w.onError(e);\n          }\n        }\n else {\n          for (          UnicastProcessor<T> w : ws) {\n            w.onError(e);\n          }\n        }\n        ws.clear();\n        return;\n      }\n      if (empty) {\n        break;\n      }\n      if (sw) {\n        @SuppressWarnings(\"unchecked\") SubjectWork<T> work=(SubjectWork<T>)v;\n        if (work.open) {\n          if (cancelled) {\n            continue;\n          }\n          long r=requested();\n          if (r != 0L) {\n            final UnicastProcessor<T> w=new UnicastProcessor<T>(bufferSize);\n            ws.add(w);\n            a.onNext(w);\n            if (r != Long.MAX_VALUE) {\n              produced(1);\n            }\n            worker.schedule(new Runnable(){\n              @Override public void run(){\n                complete(w);\n              }\n            }\n,timespan,unit);\n          }\n else {\n            a.onError(new IllegalStateException(\"Can't emit window due to lack of requests\"));\n            continue;\n          }\n        }\n else {\n          ws.remove(work.w);\n          work.w.onComplete();\n          if (ws.isEmpty() && cancelled) {\n            terminated=true;\n          }\n          continue;\n        }\n      }\n      for (      UnicastProcessor<T> w : ws) {\n        w.onNext(NotificationLite.<T>getValue(v));\n      }\n    }\n    missed=leave(-missed);\n    if (missed == 0) {\n      break;\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 331,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 623,
        "startLineNumber" : 805,
        "startColumnNumber" : 20,
        "endLineNumber" : 820,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (d && (empty || sw)) {\n  q.clear();\n  dispose();\n  Throwable e=error;\n  if (e != null) {\n    for (    UnicastProcessor<T> w : ws) {\n      w.onError(e);\n    }\n  }\n else {\n    for (    UnicastProcessor<T> w : ws) {\n      w.onError(e);\n    }\n  }\n  ws.clear();\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 62,
      "astHeight" : 9
    },
    "tokenLength" : 5,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 18,
    "startLineNumber" : 805,
    "startColumnNumber" : 24,
    "endLineNumber" : 805,
    "endColumnNumber" : 42
  } ],
  "layoutRelationDataList" : [ ]
}