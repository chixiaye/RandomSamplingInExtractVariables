{
  "id" : 59,
  "expression" : "taskCheckpointFile.length()",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/streams/src/test/java/org/apache/kafka/streams/integration/EOSUncleanShutdownIntegrationTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "taskCheckpointFile.length()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 27,
      "startLineNumber" : 176,
      "startColumnNumber" : 51,
      "endLineNumber" : 176,
      "endColumnNumber" : 78
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 176,
        "startColumnNumber" : 51,
        "endLineNumber" : 176,
        "endColumnNumber" : 84
      },
      "nodeContext" : "taskCheckpointFile.length() == 0L",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 176,
        "startColumnNumber" : 20,
        "endLineNumber" : 176,
        "endColumnNumber" : 84
      },
      "nodeContext" : "taskCheckpointFile.exists() && taskCheckpointFile.length() == 0L",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.InfixExpression,extendedOperands]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 176,
        "startColumnNumber" : 19,
        "endLineNumber" : 176,
        "endColumnNumber" : 85
      },
      "nodeContext" : "(taskCheckpointFile.exists() && taskCheckpointFile.length() == 0L)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 217,
        "startLineNumber" : 174,
        "startColumnNumber" : 23,
        "endLineNumber" : 176,
        "endColumnNumber" : 85
      },
      "nodeContext" : "!taskStateDir.exists() || (taskStateDir.exists() && taskStateDir.list().length > 0 && !taskCheckpointFile.exists()) || (taskCheckpointFile.exists() && taskCheckpointFile.length() == 0L)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 32,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 229,
        "startLineNumber" : 174,
        "startColumnNumber" : 12,
        "endLineNumber" : 176,
        "endColumnNumber" : 86
      },
      "nodeContext" : "assertTrue(!taskStateDir.exists() || (taskStateDir.exists() && taskStateDir.list().length > 0 && !taskCheckpointFile.exists()) || (taskCheckpointFile.exists() && taskCheckpointFile.length() == 0L))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 34,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 230,
        "startLineNumber" : 174,
        "startColumnNumber" : 12,
        "endLineNumber" : 176,
        "endColumnNumber" : 87
      },
      "nodeContext" : "assertTrue(!taskStateDir.exists() || (taskStateDir.exists() && taskStateDir.list().length > 0 && !taskCheckpointFile.exists()) || (taskCheckpointFile.exists() && taskCheckpointFile.length() == 0L));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 35,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,finally]",
      "nodePosition" : {
        "charLength" : 854,
        "startLineNumber" : 164,
        "startColumnNumber" : 18,
        "endLineNumber" : 179,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  TestUtils.waitForCondition(() -> driver.state().equals(State.ERROR),\"Expected ERROR state but driver is on \" + driver.state());\n  driver.close();\n  assertTrue(!taskStateDir.exists() || (taskStateDir.exists() && taskStateDir.list().length > 0 && !taskCheckpointFile.exists()) || (taskCheckpointFile.exists() && taskCheckpointFile.length() == 0L));\n  quietlyCleanStateAfterTest(CLUSTER,driver);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 63,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1759,
        "startLineNumber" : 151,
        "startColumnNumber" : 8,
        "endLineNumber" : 179,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  IntegrationTestUtils.produceSynchronously(producerConfig,false,input,Optional.empty(),singletonList(new KeyValueTimestamp<>(\"k1\",\"v1\",0L)));\n  TestUtils.waitForCondition(() -> taskStateDir.exists() && taskStateDir.isDirectory() && taskStateDir.list().length > 0,\"Failed awaiting CreateTopics first request failure\");\n  IntegrationTestUtils.produceSynchronously(producerConfig,false,input,Optional.empty(),asList(new KeyValueTimestamp<>(\"k2\",\"v2\",1L),new KeyValueTimestamp<>(\"k3\",\"v3\",2L)));\n  TestUtils.waitForCondition(() -> recordCount.get() == RECORD_TOTAL,\"Expected \" + RECORD_TOTAL + \" records processed but only got \"+ recordCount.get());\n}\n  finally {\n  TestUtils.waitForCondition(() -> driver.state().equals(State.ERROR),\"Expected ERROR state but driver is on \" + driver.state());\n  driver.close();\n  assertTrue(!taskStateDir.exists() || (taskStateDir.exists() && taskStateDir.list().length > 0 && !taskCheckpointFile.exists()) || (taskCheckpointFile.exists() && taskCheckpointFile.length() == 0L));\n  quietlyCleanStateAfterTest(CLUSTER,driver);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 147,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3668,
        "startLineNumber" : 110,
        "startColumnNumber" : 93,
        "endLineNumber" : 180,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String appId=\"shouldWorkWithUncleanShutdownWipeOutStateStore\";\n  STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG,appId);\n  STREAMS_CONFIG.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG,eosConfig);\n  final String input=\"input-topic\";\n  cleanStateBeforeTest(CLUSTER,input);\n  final StreamsBuilder builder=new StreamsBuilder();\n  final KStream<String,String> inputStream=builder.stream(input);\n  final AtomicInteger recordCount=new AtomicInteger(0);\n  final KTable<String,String> valueCounts=inputStream.groupByKey().aggregate(() -> \"()\",(key,value,aggregate) -> aggregate + \",(\" + key+ \": \"+ value+ \")\",Materialized.as(\"aggregated_value\"));\n  valueCounts.toStream().peek((key,value) -> {\n    if (recordCount.incrementAndGet() >= RECORD_TOTAL) {\n      throw new IllegalStateException(\"Crash on the \" + RECORD_TOTAL + \" record\");\n    }\n  }\n);\n  final Properties producerConfig=mkProperties(mkMap(mkEntry(ProducerConfig.CLIENT_ID_CONFIG,\"anything\"),mkEntry(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,((Serializer<String>)STRING_SERIALIZER).getClass().getName()),mkEntry(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,((Serializer<String>)STRING_SERIALIZER).getClass().getName()),mkEntry(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,CLUSTER.bootstrapServers())));\n  final KafkaStreams driver=new KafkaStreams(builder.build(),STREAMS_CONFIG);\n  driver.cleanUp();\n  driver.start();\n  final File taskStateDir=new File(String.join(\"/\",TEST_FOLDER.getRoot().getPath(),appId,\"0_0\"));\n  final File taskCheckpointFile=new File(taskStateDir,\".checkpoint\");\n  try {\n    IntegrationTestUtils.produceSynchronously(producerConfig,false,input,Optional.empty(),singletonList(new KeyValueTimestamp<>(\"k1\",\"v1\",0L)));\n    TestUtils.waitForCondition(() -> taskStateDir.exists() && taskStateDir.isDirectory() && taskStateDir.list().length > 0,\"Failed awaiting CreateTopics first request failure\");\n    IntegrationTestUtils.produceSynchronously(producerConfig,false,input,Optional.empty(),asList(new KeyValueTimestamp<>(\"k2\",\"v2\",1L),new KeyValueTimestamp<>(\"k3\",\"v3\",2L)));\n    TestUtils.waitForCondition(() -> recordCount.get() == RECORD_TOTAL,\"Expected \" + RECORD_TOTAL + \" records processed but only got \"+ recordCount.get());\n  }\n  finally {\n    TestUtils.waitForCondition(() -> driver.state().equals(State.ERROR),\"Expected ERROR state but driver is on \" + driver.state());\n    driver.close();\n    assertTrue(!taskStateDir.exists() || (taskStateDir.exists() && taskStateDir.list().length > 0 && !taskCheckpointFile.exists()) || (taskCheckpointFile.exists() && taskCheckpointFile.length() == 0L));\n    quietlyCleanStateAfterTest(CLUSTER,driver);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 390,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3767,
        "startLineNumber" : 109,
        "startColumnNumber" : 4,
        "endLineNumber" : 180,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void shouldWorkWithUncleanShutdownWipeOutStateStore() throws InterruptedException {\n  final String appId=\"shouldWorkWithUncleanShutdownWipeOutStateStore\";\n  STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG,appId);\n  STREAMS_CONFIG.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG,eosConfig);\n  final String input=\"input-topic\";\n  cleanStateBeforeTest(CLUSTER,input);\n  final StreamsBuilder builder=new StreamsBuilder();\n  final KStream<String,String> inputStream=builder.stream(input);\n  final AtomicInteger recordCount=new AtomicInteger(0);\n  final KTable<String,String> valueCounts=inputStream.groupByKey().aggregate(() -> \"()\",(key,value,aggregate) -> aggregate + \",(\" + key+ \": \"+ value+ \")\",Materialized.as(\"aggregated_value\"));\n  valueCounts.toStream().peek((key,value) -> {\n    if (recordCount.incrementAndGet() >= RECORD_TOTAL) {\n      throw new IllegalStateException(\"Crash on the \" + RECORD_TOTAL + \" record\");\n    }\n  }\n);\n  final Properties producerConfig=mkProperties(mkMap(mkEntry(ProducerConfig.CLIENT_ID_CONFIG,\"anything\"),mkEntry(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,((Serializer<String>)STRING_SERIALIZER).getClass().getName()),mkEntry(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,((Serializer<String>)STRING_SERIALIZER).getClass().getName()),mkEntry(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,CLUSTER.bootstrapServers())));\n  final KafkaStreams driver=new KafkaStreams(builder.build(),STREAMS_CONFIG);\n  driver.cleanUp();\n  driver.start();\n  final File taskStateDir=new File(String.join(\"/\",TEST_FOLDER.getRoot().getPath(),appId,\"0_0\"));\n  final File taskCheckpointFile=new File(taskStateDir,\".checkpoint\");\n  try {\n    IntegrationTestUtils.produceSynchronously(producerConfig,false,input,Optional.empty(),singletonList(new KeyValueTimestamp<>(\"k1\",\"v1\",0L)));\n    TestUtils.waitForCondition(() -> taskStateDir.exists() && taskStateDir.isDirectory() && taskStateDir.list().length > 0,\"Failed awaiting CreateTopics first request failure\");\n    IntegrationTestUtils.produceSynchronously(producerConfig,false,input,Optional.empty(),asList(new KeyValueTimestamp<>(\"k2\",\"v2\",1L),new KeyValueTimestamp<>(\"k3\",\"v3\",2L)));\n    TestUtils.waitForCondition(() -> recordCount.get() == RECORD_TOTAL,\"Expected \" + RECORD_TOTAL + \" records processed but only got \"+ recordCount.get());\n  }\n  finally {\n    TestUtils.waitForCondition(() -> driver.state().equals(State.ERROR),\"Expected ERROR state but driver is on \" + driver.state());\n    driver.close();\n    assertTrue(!taskStateDir.exists() || (taskStateDir.exists() && taskStateDir.list().length > 0 && !taskCheckpointFile.exists()) || (taskCheckpointFile.exists() && taskCheckpointFile.length() == 0L));\n    quietlyCleanStateAfterTest(CLUSTER,driver);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 398,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.InfixExpression,extendedOperands]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 176,
        "startColumnNumber" : 19,
        "endLineNumber" : 176,
        "endColumnNumber" : 85
      },
      "nodeContext" : "(taskCheckpointFile.exists() && taskCheckpointFile.length() == 0L)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "long"
  } ],
  "positionList" : [ {
    "charLength" : 27,
    "startLineNumber" : 176,
    "startColumnNumber" : 51,
    "endLineNumber" : 176,
    "endColumnNumber" : 78
  } ],
  "layoutRelationDataList" : [ ]
}