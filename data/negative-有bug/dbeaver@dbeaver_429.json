{
  "id" : 429,
  "expression" : "dbResult.getSQLXML(1)",
  "projectName" : "dbeaver@dbeaver",
  "commitID" : "aecf0da5baef5ea4aa1675578670cf057248123d",
  "filePath" : "/plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/model/plan/PostgreExecutionPlan.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "dbResult.getSQLXML(1)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 129,
      "startColumnNumber" : 45,
      "endLineNumber" : 129,
      "endColumnNumber" : 66
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 129,
        "startColumnNumber" : 35,
        "endLineNumber" : 129,
        "endColumnNumber" : 66
      },
      "nodeContext" : "planXML=dbResult.getSQLXML(1)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 129,
        "startColumnNumber" : 28,
        "endLineNumber" : 129,
        "endColumnNumber" : 67
      },
      "nodeContext" : "SQLXML planXML=dbResult.getSQLXML(1);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 155,
        "startLineNumber" : 128,
        "startColumnNumber" : 45,
        "endLineNumber" : 131,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  SQLXML planXML=dbResult.getSQLXML(1);\n  parsePlanXML(session,planXML);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 176,
        "startLineNumber" : 128,
        "startColumnNumber" : 24,
        "endLineNumber" : 131,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (dbResult.next()) {\n  SQLXML planXML=dbResult.getSQLXML(1);\n  parsePlanXML(session,planXML);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 224,
        "startLineNumber" : 127,
        "startColumnNumber" : 27,
        "endLineNumber" : 132,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  if (dbResult.next()) {\n    SQLXML planXML=dbResult.getSQLXML(1);\n    parsePlanXML(session,planXML);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 20,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 692,
        "startLineNumber" : 118,
        "startColumnNumber" : 20,
        "endLineNumber" : 132,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (oldQuery) {\n  List<String> planLines=new ArrayList<>();\n  while (dbResult.next()) {\n    String planLine=dbResult.getString(1);\n    if (!CommonUtils.isEmpty(planLine)) {\n      planLines.add(planLine);\n    }\n  }\n  parsePlanText(session,planLines);\n}\n else {\n  if (dbResult.next()) {\n    SQLXML planXML=dbResult.getSQLXML(1);\n    parsePlanXML(session,planXML);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 66,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 732,
        "startLineNumber" : 117,
        "startColumnNumber" : 89,
        "endLineNumber" : 133,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (oldQuery) {\n    List<String> planLines=new ArrayList<>();\n    while (dbResult.next()) {\n      String planLine=dbResult.getString(1);\n      if (!CommonUtils.isEmpty(planLine)) {\n        planLines.add(planLine);\n      }\n    }\n    parsePlanText(session,planLines);\n  }\n else {\n    if (dbResult.next()) {\n      SQLXML planXML=dbResult.getSQLXML(1);\n      parsePlanXML(session,planXML);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 67,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 919,
        "startLineNumber" : 117,
        "startColumnNumber" : 16,
        "endLineNumber" : 135,
        "endColumnNumber" : 17
      },
      "nodeContext" : "try (JDBCResultSet dbResult=dbStat.executeQuery(getPlanQueryString())){\n  if (oldQuery) {\n    List<String> planLines=new ArrayList<>();\n    while (dbResult.next()) {\n      String planLine=dbResult.getString(1);\n      if (!CommonUtils.isEmpty(planLine)) {\n        planLines.add(planLine);\n      }\n    }\n    parsePlanText(session,planLines);\n  }\n else {\n    if (dbResult.next()) {\n      SQLXML planXML=dbResult.getSQLXML(1);\n      parsePlanXML(session,planXML);\n    }\n  }\n}\n catch (XMLException e) {\n  throw new DBCException(\"Can't parse plan XML\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 90,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 951,
        "startLineNumber" : 116,
        "startColumnNumber" : 70,
        "endLineNumber" : 136,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  try (JDBCResultSet dbResult=dbStat.executeQuery(getPlanQueryString())){\n    if (oldQuery) {\n      List<String> planLines=new ArrayList<>();\n      while (dbResult.next()) {\n        String planLine=dbResult.getString(1);\n        if (!CommonUtils.isEmpty(planLine)) {\n          planLines.add(planLine);\n        }\n      }\n      parsePlanText(session,planLines);\n    }\n else {\n      if (dbResult.next()) {\n        SQLXML planXML=dbResult.getSQLXML(1);\n        parsePlanXML(session,planXML);\n      }\n    }\n  }\n catch (  XMLException e) {\n    throw new DBCException(\"Can't parse plan XML\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1009,
        "startLineNumber" : 116,
        "startColumnNumber" : 12,
        "endLineNumber" : 136,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try (JDBCStatement dbStat=connection.createStatement()){\n  try (JDBCResultSet dbResult=dbStat.executeQuery(getPlanQueryString())){\n    if (oldQuery) {\n      List<String> planLines=new ArrayList<>();\n      while (dbResult.next()) {\n        String planLine=dbResult.getString(1);\n        if (!CommonUtils.isEmpty(planLine)) {\n          planLines.add(planLine);\n        }\n      }\n      parsePlanText(session,planLines);\n    }\n else {\n      if (dbResult.next()) {\n        SQLXML planXML=dbResult.getSQLXML(1);\n        parsePlanXML(session,planXML);\n      }\n    }\n  }\n catch (  XMLException e) {\n    throw new DBCException(\"Can't parse plan XML\",e);\n  }\n}\n ",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 100,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1185,
        "startLineNumber" : 111,
        "startColumnNumber" : 12,
        "endLineNumber" : 137,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  oldAutoCommit=connection.getAutoCommit();\n  if (oldAutoCommit) {\n    connection.setAutoCommit(false);\n  }\n  try (JDBCStatement dbStat=connection.createStatement()){\n    try (JDBCResultSet dbResult=dbStat.executeQuery(getPlanQueryString())){\n      if (oldQuery) {\n        List<String> planLines=new ArrayList<>();\n        while (dbResult.next()) {\n          String planLine=dbResult.getString(1);\n          if (!CommonUtils.isEmpty(planLine)) {\n            planLines.add(planLine);\n          }\n        }\n        parsePlanText(session,planLines);\n      }\n else {\n        if (dbResult.next()) {\n          SQLXML planXML=dbResult.getSQLXML(1);\n          parsePlanXML(session,planXML);\n        }\n      }\n    }\n catch (    XMLException e) {\n      throw new DBCException(\"Can't parse plan XML\",e);\n    }\n  }\n }\n",
      "nodeType" : "Block",
      "astNodeNumber" : 115,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1694,
        "startLineNumber" : 111,
        "startColumnNumber" : 8,
        "endLineNumber" : 149,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  oldAutoCommit=connection.getAutoCommit();\n  if (oldAutoCommit) {\n    connection.setAutoCommit(false);\n  }\n  try (JDBCStatement dbStat=connection.createStatement()){\n    try (JDBCResultSet dbResult=dbStat.executeQuery(getPlanQueryString())){\n      if (oldQuery) {\n        List<String> planLines=new ArrayList<>();\n        while (dbResult.next()) {\n          String planLine=dbResult.getString(1);\n          if (!CommonUtils.isEmpty(planLine)) {\n            planLines.add(planLine);\n          }\n        }\n        parsePlanText(session,planLines);\n      }\n else {\n        if (dbResult.next()) {\n          SQLXML planXML=dbResult.getSQLXML(1);\n          parsePlanXML(session,planXML);\n        }\n      }\n    }\n catch (    XMLException e) {\n      throw new DBCException(\"Can't parse plan XML\",e);\n    }\n  }\n }\n catch (SQLException e) {\n  throw new DBCException(e,session.getExecutionContext());\n}\n finally {\n  try {\n    connection.rollback();\n    if (oldAutoCommit) {\n      connection.setAutoCommit(true);\n    }\n  }\n catch (  SQLException e) {\n    log.error(\"Error closing plan analyser\",e);\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 157,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1805,
        "startLineNumber" : 108,
        "startColumnNumber" : 4,
        "endLineNumber" : 150,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  JDBCSession connection=(JDBCSession)session;\n  boolean oldAutoCommit=false;\n  try {\n    oldAutoCommit=connection.getAutoCommit();\n    if (oldAutoCommit) {\n      connection.setAutoCommit(false);\n    }\n    try (JDBCStatement dbStat=connection.createStatement()){\n      try (JDBCResultSet dbResult=dbStat.executeQuery(getPlanQueryString())){\n        if (oldQuery) {\n          List<String> planLines=new ArrayList<>();\n          while (dbResult.next()) {\n            String planLine=dbResult.getString(1);\n            if (!CommonUtils.isEmpty(planLine)) {\n              planLines.add(planLine);\n            }\n          }\n          parsePlanText(session,planLines);\n        }\n else {\n          if (dbResult.next()) {\n            SQLXML planXML=dbResult.getSQLXML(1);\n            parsePlanXML(session,planXML);\n          }\n        }\n      }\n catch (      XMLException e) {\n        throw new DBCException(\"Can't parse plan XML\",e);\n      }\n    }\n   }\n catch (  SQLException e) {\n    throw new DBCException(e,session.getExecutionContext());\n  }\n finally {\n    try {\n      connection.rollback();\n      if (oldAutoCommit) {\n        connection.setAutoCommit(true);\n      }\n    }\n catch (    SQLException e) {\n      log.error(\"Error closing plan analyser\",e);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 172,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1877,
        "startLineNumber" : 106,
        "startColumnNumber" : 4,
        "endLineNumber" : 150,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void explain(DBCSession session) throws DBCException {\n  JDBCSession connection=(JDBCSession)session;\n  boolean oldAutoCommit=false;\n  try {\n    oldAutoCommit=connection.getAutoCommit();\n    if (oldAutoCommit) {\n      connection.setAutoCommit(false);\n    }\n    try (JDBCStatement dbStat=connection.createStatement()){\n      try (JDBCResultSet dbResult=dbStat.executeQuery(getPlanQueryString())){\n        if (oldQuery) {\n          List<String> planLines=new ArrayList<>();\n          while (dbResult.next()) {\n            String planLine=dbResult.getString(1);\n            if (!CommonUtils.isEmpty(planLine)) {\n              planLines.add(planLine);\n            }\n          }\n          parsePlanText(session,planLines);\n        }\n else {\n          if (dbResult.next()) {\n            SQLXML planXML=dbResult.getSQLXML(1);\n            parsePlanXML(session,planXML);\n          }\n        }\n      }\n catch (      XMLException e) {\n        throw new DBCException(\"Can't parse plan XML\",e);\n      }\n    }\n   }\n catch (  SQLException e) {\n    throw new DBCException(e,session.getExecutionContext());\n  }\n finally {\n    try {\n      connection.rollback();\n      if (oldAutoCommit) {\n        connection.setAutoCommit(true);\n      }\n    }\n catch (    SQLException e) {\n      log.error(\"Error closing plan analyser\",e);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 182,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 129,
        "startColumnNumber" : 28,
        "endLineNumber" : 129,
        "endColumnNumber" : 67
      },
      "nodeContext" : "SQLXML planXML=dbResult.getSQLXML(1);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "java.sql.SQLXML"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 129,
    "startColumnNumber" : 45,
    "endLineNumber" : 129,
    "endColumnNumber" : 66
  } ],
  "layoutRelationDataList" : [ ]
}