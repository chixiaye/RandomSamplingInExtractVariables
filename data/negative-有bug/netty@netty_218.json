{
  "id" : 218,
  "expression" : "headersFrame.headers().path()",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/example/src/main/java/io/netty/example/http2/file/Http2StaticFileServerHandler.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "headersFrame.headers().path()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 29,
      "startLineNumber" : 127,
      "startColumnNumber" : 31,
      "endLineNumber" : 127,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 127,
        "startColumnNumber" : 31,
        "endLineNumber" : 127,
        "endColumnNumber" : 71
      },
      "nodeContext" : "headersFrame.headers().path().toString()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 127,
        "startColumnNumber" : 25,
        "endLineNumber" : 127,
        "endColumnNumber" : 71
      },
      "nodeContext" : "uri=headersFrame.headers().path().toString()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 127,
        "startColumnNumber" : 12,
        "endLineNumber" : 127,
        "endColumnNumber" : 72
      },
      "nodeContext" : "final String uri=headersFrame.headers().path().toString();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 3816,
        "startLineNumber" : 118,
        "startColumnNumber" : 46,
        "endLineNumber" : 209,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Http2HeadersFrame headersFrame=(Http2HeadersFrame)msg;\n  this.stream=headersFrame.stream();\n  if (!GET.toString().equals(headersFrame.headers().method().toString())) {\n    sendError(ctx,METHOD_NOT_ALLOWED);\n    return;\n  }\n  final String uri=headersFrame.headers().path().toString();\n  final String path=sanitizeUri(uri);\n  if (path == null) {\n    sendError(ctx,FORBIDDEN);\n    return;\n  }\n  File file=new File(path);\n  if (file.isHidden() || !file.exists()) {\n    sendError(ctx,NOT_FOUND);\n    return;\n  }\n  if (file.isDirectory()) {\n    if (uri.endsWith(\"/\")) {\n      sendListing(ctx,file,uri);\n    }\n else {\n      sendRedirect(ctx,uri + '/');\n    }\n    return;\n  }\n  if (!file.isFile()) {\n    sendError(ctx,FORBIDDEN);\n    return;\n  }\n  CharSequence ifModifiedSince=headersFrame.headers().get(HttpHeaderNames.IF_MODIFIED_SINCE);\n  if (ifModifiedSince != null && !ifModifiedSince.toString().isEmpty()) {\n    SimpleDateFormat dateFormatter=new SimpleDateFormat(HTTP_DATE_FORMAT,Locale.US);\n    Date ifModifiedSinceDate=dateFormatter.parse(ifModifiedSince.toString());\n    long ifModifiedSinceDateSeconds=ifModifiedSinceDate.getTime() / 1000;\n    long fileLastModifiedSeconds=file.lastModified() / 1000;\n    if (ifModifiedSinceDateSeconds == fileLastModifiedSeconds) {\n      sendNotModified(ctx);\n      return;\n    }\n  }\n  RandomAccessFile raf;\n  try {\n    raf=new RandomAccessFile(file,\"r\");\n  }\n catch (  FileNotFoundException ignore) {\n    sendError(ctx,NOT_FOUND);\n    return;\n  }\n  long fileLength=raf.length();\n  Http2Headers headers=new DefaultHttp2Headers();\n  headers.status(\"200\");\n  headers.setLong(HttpHeaderNames.CONTENT_LENGTH,fileLength);\n  setContentTypeHeader(headers,file);\n  setDateAndCacheHeaders(headers,file);\n  ctx.writeAndFlush(new DefaultHttp2HeadersFrame(headers).stream(stream));\n  ChannelFuture sendFileFuture;\n  sendFileFuture=ctx.writeAndFlush(new Http2DataChunkedInput(new ChunkedFile(raf,0,fileLength,8192),stream),ctx.newProgressivePromise());\n  sendFileFuture.addListener(new ChannelProgressiveFutureListener(){\n    @Override public void operationProgressed(    ChannelProgressiveFuture future,    long progress,    long total){\n      if (total < 0) {\n        System.err.println(future.channel() + \" Transfer progress: \" + progress);\n      }\n else {\n        System.err.println(future.channel() + \" Transfer progress: \" + progress+ \" / \"+ total);\n      }\n    }\n    @Override public void operationComplete(    ChannelProgressiveFuture future){\n      System.err.println(future.channel() + \" Transfer complete.\");\n    }\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 391,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3982,
        "startLineNumber" : 118,
        "startColumnNumber" : 8,
        "endLineNumber" : 212,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (msg instanceof Http2HeadersFrame) {\n  Http2HeadersFrame headersFrame=(Http2HeadersFrame)msg;\n  this.stream=headersFrame.stream();\n  if (!GET.toString().equals(headersFrame.headers().method().toString())) {\n    sendError(ctx,METHOD_NOT_ALLOWED);\n    return;\n  }\n  final String uri=headersFrame.headers().path().toString();\n  final String path=sanitizeUri(uri);\n  if (path == null) {\n    sendError(ctx,FORBIDDEN);\n    return;\n  }\n  File file=new File(path);\n  if (file.isHidden() || !file.exists()) {\n    sendError(ctx,NOT_FOUND);\n    return;\n  }\n  if (file.isDirectory()) {\n    if (uri.endsWith(\"/\")) {\n      sendListing(ctx,file,uri);\n    }\n else {\n      sendRedirect(ctx,uri + '/');\n    }\n    return;\n  }\n  if (!file.isFile()) {\n    sendError(ctx,FORBIDDEN);\n    return;\n  }\n  CharSequence ifModifiedSince=headersFrame.headers().get(HttpHeaderNames.IF_MODIFIED_SINCE);\n  if (ifModifiedSince != null && !ifModifiedSince.toString().isEmpty()) {\n    SimpleDateFormat dateFormatter=new SimpleDateFormat(HTTP_DATE_FORMAT,Locale.US);\n    Date ifModifiedSinceDate=dateFormatter.parse(ifModifiedSince.toString());\n    long ifModifiedSinceDateSeconds=ifModifiedSinceDate.getTime() / 1000;\n    long fileLastModifiedSeconds=file.lastModified() / 1000;\n    if (ifModifiedSinceDateSeconds == fileLastModifiedSeconds) {\n      sendNotModified(ctx);\n      return;\n    }\n  }\n  RandomAccessFile raf;\n  try {\n    raf=new RandomAccessFile(file,\"r\");\n  }\n catch (  FileNotFoundException ignore) {\n    sendError(ctx,NOT_FOUND);\n    return;\n  }\n  long fileLength=raf.length();\n  Http2Headers headers=new DefaultHttp2Headers();\n  headers.status(\"200\");\n  headers.setLong(HttpHeaderNames.CONTENT_LENGTH,fileLength);\n  setContentTypeHeader(headers,file);\n  setDateAndCacheHeaders(headers,file);\n  ctx.writeAndFlush(new DefaultHttp2HeadersFrame(headers).stream(stream));\n  ChannelFuture sendFileFuture;\n  sendFileFuture=ctx.writeAndFlush(new Http2DataChunkedInput(new ChunkedFile(raf,0,fileLength,8192),stream),ctx.newProgressivePromise());\n  sendFileFuture.addListener(new ChannelProgressiveFutureListener(){\n    @Override public void operationProgressed(    ChannelProgressiveFuture future,    long progress,    long total){\n      if (total < 0) {\n        System.err.println(future.channel() + \" Transfer progress: \" + progress);\n      }\n else {\n        System.err.println(future.channel() + \" Transfer progress: \" + progress+ \" / \"+ total);\n      }\n    }\n    @Override public void operationComplete(    ChannelProgressiveFuture future){\n      System.err.println(future.channel() + \" Transfer complete.\");\n    }\n  }\n);\n}\n else {\n  System.out.println(\"Unsupported message type: \" + msg);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 406,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4000,
        "startLineNumber" : 117,
        "startColumnNumber" : 84,
        "endLineNumber" : 213,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (msg instanceof Http2HeadersFrame) {\n    Http2HeadersFrame headersFrame=(Http2HeadersFrame)msg;\n    this.stream=headersFrame.stream();\n    if (!GET.toString().equals(headersFrame.headers().method().toString())) {\n      sendError(ctx,METHOD_NOT_ALLOWED);\n      return;\n    }\n    final String uri=headersFrame.headers().path().toString();\n    final String path=sanitizeUri(uri);\n    if (path == null) {\n      sendError(ctx,FORBIDDEN);\n      return;\n    }\n    File file=new File(path);\n    if (file.isHidden() || !file.exists()) {\n      sendError(ctx,NOT_FOUND);\n      return;\n    }\n    if (file.isDirectory()) {\n      if (uri.endsWith(\"/\")) {\n        sendListing(ctx,file,uri);\n      }\n else {\n        sendRedirect(ctx,uri + '/');\n      }\n      return;\n    }\n    if (!file.isFile()) {\n      sendError(ctx,FORBIDDEN);\n      return;\n    }\n    CharSequence ifModifiedSince=headersFrame.headers().get(HttpHeaderNames.IF_MODIFIED_SINCE);\n    if (ifModifiedSince != null && !ifModifiedSince.toString().isEmpty()) {\n      SimpleDateFormat dateFormatter=new SimpleDateFormat(HTTP_DATE_FORMAT,Locale.US);\n      Date ifModifiedSinceDate=dateFormatter.parse(ifModifiedSince.toString());\n      long ifModifiedSinceDateSeconds=ifModifiedSinceDate.getTime() / 1000;\n      long fileLastModifiedSeconds=file.lastModified() / 1000;\n      if (ifModifiedSinceDateSeconds == fileLastModifiedSeconds) {\n        sendNotModified(ctx);\n        return;\n      }\n    }\n    RandomAccessFile raf;\n    try {\n      raf=new RandomAccessFile(file,\"r\");\n    }\n catch (    FileNotFoundException ignore) {\n      sendError(ctx,NOT_FOUND);\n      return;\n    }\n    long fileLength=raf.length();\n    Http2Headers headers=new DefaultHttp2Headers();\n    headers.status(\"200\");\n    headers.setLong(HttpHeaderNames.CONTENT_LENGTH,fileLength);\n    setContentTypeHeader(headers,file);\n    setDateAndCacheHeaders(headers,file);\n    ctx.writeAndFlush(new DefaultHttp2HeadersFrame(headers).stream(stream));\n    ChannelFuture sendFileFuture;\n    sendFileFuture=ctx.writeAndFlush(new Http2DataChunkedInput(new ChunkedFile(raf,0,fileLength,8192),stream),ctx.newProgressivePromise());\n    sendFileFuture.addListener(new ChannelProgressiveFutureListener(){\n      @Override public void operationProgressed(      ChannelProgressiveFuture future,      long progress,      long total){\n        if (total < 0) {\n          System.err.println(future.channel() + \" Transfer progress: \" + progress);\n        }\n else {\n          System.err.println(future.channel() + \" Transfer progress: \" + progress+ \" / \"+ total);\n        }\n      }\n      @Override public void operationComplete(      ChannelProgressiveFuture future){\n        System.err.println(future.channel() + \" Transfer complete.\");\n      }\n    }\n);\n  }\n else {\n    System.out.println(\"Unsupported message type: \" + msg);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 407,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4095,
        "startLineNumber" : 116,
        "startColumnNumber" : 4,
        "endLineNumber" : 213,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void channelRead(ChannelHandlerContext ctx,Object msg) throws Exception {\n  if (msg instanceof Http2HeadersFrame) {\n    Http2HeadersFrame headersFrame=(Http2HeadersFrame)msg;\n    this.stream=headersFrame.stream();\n    if (!GET.toString().equals(headersFrame.headers().method().toString())) {\n      sendError(ctx,METHOD_NOT_ALLOWED);\n      return;\n    }\n    final String uri=headersFrame.headers().path().toString();\n    final String path=sanitizeUri(uri);\n    if (path == null) {\n      sendError(ctx,FORBIDDEN);\n      return;\n    }\n    File file=new File(path);\n    if (file.isHidden() || !file.exists()) {\n      sendError(ctx,NOT_FOUND);\n      return;\n    }\n    if (file.isDirectory()) {\n      if (uri.endsWith(\"/\")) {\n        sendListing(ctx,file,uri);\n      }\n else {\n        sendRedirect(ctx,uri + '/');\n      }\n      return;\n    }\n    if (!file.isFile()) {\n      sendError(ctx,FORBIDDEN);\n      return;\n    }\n    CharSequence ifModifiedSince=headersFrame.headers().get(HttpHeaderNames.IF_MODIFIED_SINCE);\n    if (ifModifiedSince != null && !ifModifiedSince.toString().isEmpty()) {\n      SimpleDateFormat dateFormatter=new SimpleDateFormat(HTTP_DATE_FORMAT,Locale.US);\n      Date ifModifiedSinceDate=dateFormatter.parse(ifModifiedSince.toString());\n      long ifModifiedSinceDateSeconds=ifModifiedSinceDate.getTime() / 1000;\n      long fileLastModifiedSeconds=file.lastModified() / 1000;\n      if (ifModifiedSinceDateSeconds == fileLastModifiedSeconds) {\n        sendNotModified(ctx);\n        return;\n      }\n    }\n    RandomAccessFile raf;\n    try {\n      raf=new RandomAccessFile(file,\"r\");\n    }\n catch (    FileNotFoundException ignore) {\n      sendError(ctx,NOT_FOUND);\n      return;\n    }\n    long fileLength=raf.length();\n    Http2Headers headers=new DefaultHttp2Headers();\n    headers.status(\"200\");\n    headers.setLong(HttpHeaderNames.CONTENT_LENGTH,fileLength);\n    setContentTypeHeader(headers,file);\n    setDateAndCacheHeaders(headers,file);\n    ctx.writeAndFlush(new DefaultHttp2HeadersFrame(headers).stream(stream));\n    ChannelFuture sendFileFuture;\n    sendFileFuture=ctx.writeAndFlush(new Http2DataChunkedInput(new ChunkedFile(raf,0,fileLength,8192),stream),ctx.newProgressivePromise());\n    sendFileFuture.addListener(new ChannelProgressiveFutureListener(){\n      @Override public void operationProgressed(      ChannelProgressiveFuture future,      long progress,      long total){\n        if (total < 0) {\n          System.err.println(future.channel() + \" Transfer progress: \" + progress);\n        }\n else {\n          System.err.println(future.channel() + \" Transfer progress: \" + progress+ \" / \"+ total);\n        }\n      }\n      @Override public void operationComplete(      ChannelProgressiveFuture future){\n        System.err.println(future.channel() + \" Transfer complete.\");\n      }\n    }\n);\n  }\n else {\n    System.out.println(\"Unsupported message type: \" + msg);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 423,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 127,
        "startColumnNumber" : 12,
        "endLineNumber" : 127,
        "endColumnNumber" : 72
      },
      "nodeContext" : "final String uri=headersFrame.headers().path().toString();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "java.lang.CharSequence"
  } ],
  "positionList" : [ {
    "charLength" : 29,
    "startLineNumber" : 127,
    "startColumnNumber" : 31,
    "endLineNumber" : 127,
    "endColumnNumber" : 60
  } ],
  "layoutRelationDataList" : [ ]
}