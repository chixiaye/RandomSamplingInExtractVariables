{
  "id" : 471,
  "expression" : "\"before waiting for one\"",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/test/java/io/reactivex/subjects/ReplaySubjectTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"before waiting for one\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 24,
      "startLineNumber" : 315,
      "startColumnNumber" : 27,
      "endLineNumber" : 315,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 315,
        "startColumnNumber" : 8,
        "endLineNumber" : 315,
        "endColumnNumber" : 52
      },
      "nodeContext" : "System.out.println(\"before waiting for one\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 315,
        "startColumnNumber" : 8,
        "endLineNumber" : 315,
        "endColumnNumber" : 53
      },
      "nodeContext" : "System.out.println(\"before waiting for one\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3063,
        "startLineNumber" : 249,
        "startColumnNumber" : 83,
        "endLineNumber" : 344,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final AtomicReference<String> lastValueForSubscriber1=new AtomicReference<String>();\n  Observer<String> observer1=new DefaultObserver<String>(){\n    @Override public void onComplete(){\n    }\n    @Override public void onError(    Throwable e){\n    }\n    @Override public void onNext(    String v){\n      System.out.println(\"observer1: \" + v);\n      lastValueForSubscriber1.set(v);\n    }\n  }\n;\n  final AtomicReference<String> lastValueForSubscriber2=new AtomicReference<String>();\n  final CountDownLatch oneReceived=new CountDownLatch(1);\n  final CountDownLatch makeSlow=new CountDownLatch(1);\n  final CountDownLatch completed=new CountDownLatch(1);\n  Observer<String> observer2=new DefaultObserver<String>(){\n    @Override public void onComplete(){\n      completed.countDown();\n    }\n    @Override public void onError(    Throwable e){\n    }\n    @Override public void onNext(    String v){\n      System.out.println(\"observer2: \" + v);\n      if (v.equals(\"one\")) {\n        oneReceived.countDown();\n      }\n else {\n        try {\n          makeSlow.await();\n        }\n catch (        InterruptedException e) {\n          e.printStackTrace();\n        }\n        lastValueForSubscriber2.set(v);\n      }\n    }\n  }\n;\n  ReplaySubject<String> subject=ReplaySubject.create();\n  subject.subscribe(observer1);\n  subject.onNext(\"one\");\n  assertEquals(\"one\",lastValueForSubscriber1.get());\n  subject.onNext(\"two\");\n  assertEquals(\"two\",lastValueForSubscriber1.get());\n  subject.subscribeOn(Schedulers.newThread()).subscribe(observer2);\n  System.out.println(\"before waiting for one\");\n  oneReceived.await();\n  System.out.println(\"after waiting for one\");\n  subject.onNext(\"three\");\n  System.out.println(\"sent three\");\n  assertEquals(\"three\",lastValueForSubscriber1.get());\n  System.out.println(\"about to send onCompleted\");\n  subject.onComplete();\n  System.out.println(\"completed subject\");\n  makeSlow.countDown();\n  System.out.println(\"makeSlow released\");\n  completed.await();\n  assertEquals(\"three\",lastValueForSubscriber2.get());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 335,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3169,
        "startLineNumber" : 248,
        "startColumnNumber" : 4,
        "endLineNumber" : 344,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test(timeout=2000) public void testNewSubscriberDoesntBlockExisting() throws InterruptedException {\n  final AtomicReference<String> lastValueForSubscriber1=new AtomicReference<String>();\n  Observer<String> observer1=new DefaultObserver<String>(){\n    @Override public void onComplete(){\n    }\n    @Override public void onError(    Throwable e){\n    }\n    @Override public void onNext(    String v){\n      System.out.println(\"observer1: \" + v);\n      lastValueForSubscriber1.set(v);\n    }\n  }\n;\n  final AtomicReference<String> lastValueForSubscriber2=new AtomicReference<String>();\n  final CountDownLatch oneReceived=new CountDownLatch(1);\n  final CountDownLatch makeSlow=new CountDownLatch(1);\n  final CountDownLatch completed=new CountDownLatch(1);\n  Observer<String> observer2=new DefaultObserver<String>(){\n    @Override public void onComplete(){\n      completed.countDown();\n    }\n    @Override public void onError(    Throwable e){\n    }\n    @Override public void onNext(    String v){\n      System.out.println(\"observer2: \" + v);\n      if (v.equals(\"one\")) {\n        oneReceived.countDown();\n      }\n else {\n        try {\n          makeSlow.await();\n        }\n catch (        InterruptedException e) {\n          e.printStackTrace();\n        }\n        lastValueForSubscriber2.set(v);\n      }\n    }\n  }\n;\n  ReplaySubject<String> subject=ReplaySubject.create();\n  subject.subscribe(observer1);\n  subject.onNext(\"one\");\n  assertEquals(\"one\",lastValueForSubscriber1.get());\n  subject.onNext(\"two\");\n  assertEquals(\"two\",lastValueForSubscriber1.get());\n  subject.subscribeOn(Schedulers.newThread()).subscribe(observer2);\n  System.out.println(\"before waiting for one\");\n  oneReceived.await();\n  System.out.println(\"after waiting for one\");\n  subject.onNext(\"three\");\n  System.out.println(\"sent three\");\n  assertEquals(\"three\",lastValueForSubscriber1.get());\n  System.out.println(\"about to send onCompleted\");\n  subject.onComplete();\n  System.out.println(\"completed subject\");\n  makeSlow.countDown();\n  System.out.println(\"makeSlow released\");\n  completed.await();\n  assertEquals(\"three\",lastValueForSubscriber2.get());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 346,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 315,
        "startColumnNumber" : 8,
        "endLineNumber" : 315,
        "endColumnNumber" : 53
      },
      "nodeContext" : "System.out.println(\"before waiting for one\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 24,
    "startLineNumber" : 315,
    "startColumnNumber" : 27,
    "endLineNumber" : 315,
    "endColumnNumber" : 51
  } ],
  "layoutRelationDataList" : [ ]
}