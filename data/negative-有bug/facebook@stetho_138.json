{
  "id" : 138,
  "expression" : "responseStream",
  "projectName" : "facebook@stetho",
  "commitID" : "fee68519d93899dc5cfe6b992f56916a03b279f2",
  "filePath" : "/stetho-urlconnection/src/main/java/com/facebook/stetho/urlconnection/StethoURLConnectionManager.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "responseStream",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 132,
      "startColumnNumber" : 50,
      "endLineNumber" : 132,
      "endColumnNumber" : 64
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 132,
        "startColumnNumber" : 13,
        "endLineNumber" : 132,
        "endColumnNumber" : 65
      },
      "nodeContext" : "mHolder.impl.interpretResponseStream(responseStream)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 132,
        "startColumnNumber" : 6,
        "endLineNumber" : 132,
        "endColumnNumber" : 66
      },
      "nodeContext" : "return mHolder.impl.interpretResponseStream(responseStream);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 131,
        "startColumnNumber" : 25,
        "endLineNumber" : 133,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  return mHolder.impl.interpretResponseStream(responseStream);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 137,
        "startLineNumber" : 131,
        "startColumnNumber" : 4,
        "endLineNumber" : 135,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (mHolder != null) {\n  return mHolder.impl.interpretResponseStream(responseStream);\n}\n else {\n  return responseStream;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 147,
        "startLineNumber" : 130,
        "startColumnNumber" : 83,
        "endLineNumber" : 136,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (mHolder != null) {\n    return mHolder.impl.interpretResponseStream(responseStream);\n  }\n else {\n    return responseStream;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1020,
        "startLineNumber" : 115,
        "startColumnNumber" : 2,
        "endLineNumber" : 136,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Deliver the response stream from  {@link HttpURLConnection#getInputStream()} toStetho so that it can be intercepted.  Note that compression is transparently supported on modern Android systems and no special awareness is necessary for gzip compression on the wire.  Unfortunately this means that it is sometimes impossible to determine whether compression actually occurred and so Stetho may report inflated byte counts. <p> If the  {@code Content-Length} header is provided by the server, this will be assumed to bethe raw byte count on the wire.\n * @param responseStream Stream as furnished by {@link HttpURLConnection#getInputStream()}.\n * @return The filtering stream which is to be read after this method is called.\n */\npublic InputStream interpretResponseStream(@Nullable InputStream responseStream){\n  if (mHolder != null) {\n    return mHolder.impl.interpretResponseStream(responseStream);\n  }\n else {\n    return responseStream;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 28,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 132,
        "startColumnNumber" : 6,
        "endLineNumber" : 132,
        "endColumnNumber" : 66
      },
      "nodeContext" : "return mHolder.impl.interpretResponseStream(responseStream);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.io.InputStream"
  }, {
    "nodeContext" : "responseStream",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 134,
      "startColumnNumber" : 13,
      "endLineNumber" : 134,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 134,
        "startColumnNumber" : 6,
        "endLineNumber" : 134,
        "endColumnNumber" : 28
      },
      "nodeContext" : "return responseStream;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 133,
        "startColumnNumber" : 11,
        "endLineNumber" : 135,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  return responseStream;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 3,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 137,
        "startLineNumber" : 131,
        "startColumnNumber" : 4,
        "endLineNumber" : 135,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (mHolder != null) {\n  return mHolder.impl.interpretResponseStream(responseStream);\n}\n else {\n  return responseStream;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 147,
        "startLineNumber" : 130,
        "startColumnNumber" : 83,
        "endLineNumber" : 136,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (mHolder != null) {\n    return mHolder.impl.interpretResponseStream(responseStream);\n  }\n else {\n    return responseStream;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1020,
        "startLineNumber" : 115,
        "startColumnNumber" : 2,
        "endLineNumber" : 136,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Deliver the response stream from  {@link HttpURLConnection#getInputStream()} toStetho so that it can be intercepted.  Note that compression is transparently supported on modern Android systems and no special awareness is necessary for gzip compression on the wire.  Unfortunately this means that it is sometimes impossible to determine whether compression actually occurred and so Stetho may report inflated byte counts. <p> If the  {@code Content-Length} header is provided by the server, this will be assumed to bethe raw byte count on the wire.\n * @param responseStream Stream as furnished by {@link HttpURLConnection#getInputStream()}.\n * @return The filtering stream which is to be read after this method is called.\n */\npublic InputStream interpretResponseStream(@Nullable InputStream responseStream){\n  if (mHolder != null) {\n    return mHolder.impl.interpretResponseStream(responseStream);\n  }\n else {\n    return responseStream;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 28,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 134,
        "startColumnNumber" : 6,
        "endLineNumber" : 134,
        "endColumnNumber" : 28
      },
      "nodeContext" : "return responseStream;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.io.InputStream"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 132,
    "startColumnNumber" : 50,
    "endLineNumber" : 132,
    "endColumnNumber" : 64
  }, {
    "charLength" : 14,
    "startLineNumber" : 134,
    "startColumnNumber" : 13,
    "endLineNumber" : 134,
    "endColumnNumber" : 27
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}