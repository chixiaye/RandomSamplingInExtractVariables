{
  "id" : 330,
  "expression" : "grpcCall",
  "projectName" : "quarkusio@quarkus",
  "commitID" : "2862b200ee266332150317795b9fe315be51d68b",
  "filePath" : "/extensions/grpc/deployment/src/main/java/io/quarkus/grpc/deployment/devmode/GrpcDevConsoleWebSocketListener.java",
  "occurrences" : 13,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "grpcCall",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 61,
      "startColumnNumber" : 20,
      "endLineNumber" : 61,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 61,
        "startColumnNumber" : 20,
        "endLineNumber" : 61,
        "endColumnNumber" : 36
      },
      "nodeContext" : "grpcCall != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 61,
        "startColumnNumber" : 20,
        "endLineNumber" : 61,
        "endColumnNumber" : 71
      },
      "nodeContext" : "grpcCall != null && grpcCall.incomingStream != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 135,
        "startLineNumber" : 61,
        "startColumnNumber" : 16,
        "endLineNumber" : 63,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (grpcCall != null && grpcCall.incomingStream != null) {\n  grpcCall.incomingStream.onCompleted();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 270,
        "startLineNumber" : 59,
        "startColumnNumber" : 71,
        "endLineNumber" : 65,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  GrpcCallData grpcCall=websocketData.callsInProgress.get(id);\n  if (grpcCall != null && grpcCall.incomingStream != null) {\n    grpcCall.incomingStream.onCompleted();\n  }\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 30,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 329,
        "startLineNumber" : 59,
        "startColumnNumber" : 12,
        "endLineNumber" : 65,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (\"DISCONNECT\".equals(grpcRequest.getString(\"command\"))) {\n  GrpcCallData grpcCall=websocketData.callsInProgress.get(id);\n  if (grpcCall != null && grpcCall.incomingStream != null) {\n    grpcCall.incomingStream.onCompleted();\n  }\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 38,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 8730,
        "startLineNumber" : 48,
        "startColumnNumber" : 12,
        "endLineNumber" : 194,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  JsonObject grpcRequest=new JsonObject(input);\n  Integer id=grpcRequest.getInteger(\"id\");\n  String serviceName=grpcRequest.getString(\"serviceName\");\n  String methodName=grpcRequest.getString(\"methodName\");\n  if (\"DISCONNECT\".equals(grpcRequest.getString(\"command\"))) {\n    GrpcCallData grpcCall=websocketData.callsInProgress.get(id);\n    if (grpcCall != null && grpcCall.incomingStream != null) {\n      grpcCall.incomingStream.onCompleted();\n    }\n    return;\n  }\n  GrpcCallData grpcCall;\n  if (websocketData.callsInProgress.containsKey(id)) {\n    grpcCall=websocketData.callsInProgress.get(id);\n  }\n else {\n    Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n    maybeOldCall.ifPresent(call -> {\n      if (call.incomingStream != null) {\n        call.incomingStream.onCompleted();\n      }\n      websocketData.callsInProgress.remove(call.requestId);\n    }\n);\n    grpcCall=new GrpcCallData();\n    grpcCall.serviceName=serviceName;\n    grpcCall.methodName=methodName;\n    grpcCall.requestId=id;\n    websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n  }\n  String testJsonData=grpcRequest.getString(\"content\");\n  Object grpcStub=grpcClientStubs.get(serviceName);\n  if (grpcStub == null) {\n    websocketData.responseConsumer.accept(jsonResponse(id,\"NO_STUB\").encode());\n  }\n else {\n    ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n    MethodDescriptor<?,?> methodDescriptor=null;\n    for (    MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n      if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n        methodDescriptor=method;\n      }\n    }\n    if (methodDescriptor == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n    }\n else {\n      Method stubMethod=null;\n      String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n      for (      Method method : grpcStub.getClass().getDeclaredMethods()) {\n        if (method.getName().equals(realMethodName)) {\n          stubMethod=method;\n        }\n      }\n      if (stubMethod == null) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n        log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n      }\n else {\n        MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n        if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n          MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n          Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n          try {\n            Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n            Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n            JsonFormat.parser().merge(testJsonData,builder);\n            Message message=builder.build();\n            if (grpcCall.incomingStream != null) {\n              grpcCall.incomingStream.onNext(message);\n            }\n else {\n              StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n                @Override public void onNext(                Object value){\n                  String body=null;\n                  try {\n                    body=JsonFormat.printer().print((MessageOrBuilder)value);\n                  }\n catch (                  InvalidProtocolBufferException e) {\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                    log.error(\"Failed to transform response to JSON\",e);\n                  }\n                  JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                  reply.put(\"body\",body);\n                  websocketData.responseConsumer.accept(reply.encode());\n                }\n                @Override public void onError(                Throwable t){\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                  grpcCall.incomingStream=null;\n                  log.error(\"Failure returned by gRPC service\",t);\n                }\n                @Override public void onCompleted(){\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                  grpcCall.incomingStream=null;\n                }\n              }\n;\n              if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n                grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n                grpcCall.incomingStream.onNext(message);\n              }\n else {\n                stubMethod.invoke(grpcStub,message,responseObserver);\n              }\n            }\n          }\n catch (          Exception e) {\n            websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n            grpcCall.incomingStream=null;\n            log.error(\"Failure returned by gRPC service\",e);\n          }\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 722,
      "astHeight" : 28
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8824,
        "startLineNumber" : 48,
        "startColumnNumber" : 8,
        "endLineNumber" : 196,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  JsonObject grpcRequest=new JsonObject(input);\n  Integer id=grpcRequest.getInteger(\"id\");\n  String serviceName=grpcRequest.getString(\"serviceName\");\n  String methodName=grpcRequest.getString(\"methodName\");\n  if (\"DISCONNECT\".equals(grpcRequest.getString(\"command\"))) {\n    GrpcCallData grpcCall=websocketData.callsInProgress.get(id);\n    if (grpcCall != null && grpcCall.incomingStream != null) {\n      grpcCall.incomingStream.onCompleted();\n    }\n    return;\n  }\n  GrpcCallData grpcCall;\n  if (websocketData.callsInProgress.containsKey(id)) {\n    grpcCall=websocketData.callsInProgress.get(id);\n  }\n else {\n    Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n    maybeOldCall.ifPresent(call -> {\n      if (call.incomingStream != null) {\n        call.incomingStream.onCompleted();\n      }\n      websocketData.callsInProgress.remove(call.requestId);\n    }\n);\n    grpcCall=new GrpcCallData();\n    grpcCall.serviceName=serviceName;\n    grpcCall.methodName=methodName;\n    grpcCall.requestId=id;\n    websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n  }\n  String testJsonData=grpcRequest.getString(\"content\");\n  Object grpcStub=grpcClientStubs.get(serviceName);\n  if (grpcStub == null) {\n    websocketData.responseConsumer.accept(jsonResponse(id,\"NO_STUB\").encode());\n  }\n else {\n    ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n    MethodDescriptor<?,?> methodDescriptor=null;\n    for (    MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n      if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n        methodDescriptor=method;\n      }\n    }\n    if (methodDescriptor == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n    }\n else {\n      Method stubMethod=null;\n      String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n      for (      Method method : grpcStub.getClass().getDeclaredMethods()) {\n        if (method.getName().equals(realMethodName)) {\n          stubMethod=method;\n        }\n      }\n      if (stubMethod == null) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n        log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n      }\n else {\n        MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n        if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n          MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n          Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n          try {\n            Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n            Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n            JsonFormat.parser().merge(testJsonData,builder);\n            Message message=builder.build();\n            if (grpcCall.incomingStream != null) {\n              grpcCall.incomingStream.onNext(message);\n            }\n else {\n              StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n                @Override public void onNext(                Object value){\n                  String body=null;\n                  try {\n                    body=JsonFormat.printer().print((MessageOrBuilder)value);\n                  }\n catch (                  InvalidProtocolBufferException e) {\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                    log.error(\"Failed to transform response to JSON\",e);\n                  }\n                  JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                  reply.put(\"body\",body);\n                  websocketData.responseConsumer.accept(reply.encode());\n                }\n                @Override public void onError(                Throwable t){\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                  grpcCall.incomingStream=null;\n                  log.error(\"Failure returned by gRPC service\",t);\n                }\n                @Override public void onCompleted(){\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                  grpcCall.incomingStream=null;\n                }\n              }\n;\n              if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n                grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n                grpcCall.incomingStream.onNext(message);\n              }\n else {\n                stubMethod.invoke(grpcStub,message,responseObserver);\n              }\n            }\n          }\n catch (          Exception e) {\n            websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n            grpcCall.incomingStream=null;\n            log.error(\"Failure returned by gRPC service\",e);\n          }\n        }\n      }\n    }\n  }\n}\n  finally {\n  Thread.currentThread().setContextClassLoader(originalCl);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 731,
      "astHeight" : 29
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8998,
        "startLineNumber" : 45,
        "startColumnNumber" : 67,
        "endLineNumber" : 197,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ClassLoader originalCl=Thread.currentThread().getContextClassLoader();\n  Thread.currentThread().setContextClassLoader(deploymentClassLoader);\n  try {\n    JsonObject grpcRequest=new JsonObject(input);\n    Integer id=grpcRequest.getInteger(\"id\");\n    String serviceName=grpcRequest.getString(\"serviceName\");\n    String methodName=grpcRequest.getString(\"methodName\");\n    if (\"DISCONNECT\".equals(grpcRequest.getString(\"command\"))) {\n      GrpcCallData grpcCall=websocketData.callsInProgress.get(id);\n      if (grpcCall != null && grpcCall.incomingStream != null) {\n        grpcCall.incomingStream.onCompleted();\n      }\n      return;\n    }\n    GrpcCallData grpcCall;\n    if (websocketData.callsInProgress.containsKey(id)) {\n      grpcCall=websocketData.callsInProgress.get(id);\n    }\n else {\n      Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n      maybeOldCall.ifPresent(call -> {\n        if (call.incomingStream != null) {\n          call.incomingStream.onCompleted();\n        }\n        websocketData.callsInProgress.remove(call.requestId);\n      }\n);\n      grpcCall=new GrpcCallData();\n      grpcCall.serviceName=serviceName;\n      grpcCall.methodName=methodName;\n      grpcCall.requestId=id;\n      websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n    }\n    String testJsonData=grpcRequest.getString(\"content\");\n    Object grpcStub=grpcClientStubs.get(serviceName);\n    if (grpcStub == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_STUB\").encode());\n    }\n else {\n      ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n      MethodDescriptor<?,?> methodDescriptor=null;\n      for (      MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n        if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n          methodDescriptor=method;\n        }\n      }\n      if (methodDescriptor == null) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n      }\n else {\n        Method stubMethod=null;\n        String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n        for (        Method method : grpcStub.getClass().getDeclaredMethods()) {\n          if (method.getName().equals(realMethodName)) {\n            stubMethod=method;\n          }\n        }\n        if (stubMethod == null) {\n          websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n          log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n        }\n else {\n          MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n          if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n            MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n            Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n            try {\n              Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n              Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n              JsonFormat.parser().merge(testJsonData,builder);\n              Message message=builder.build();\n              if (grpcCall.incomingStream != null) {\n                grpcCall.incomingStream.onNext(message);\n              }\n else {\n                StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n                  @Override public void onNext(                  Object value){\n                    String body=null;\n                    try {\n                      body=JsonFormat.printer().print((MessageOrBuilder)value);\n                    }\n catch (                    InvalidProtocolBufferException e) {\n                      websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                      log.error(\"Failed to transform response to JSON\",e);\n                    }\n                    JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                    reply.put(\"body\",body);\n                    websocketData.responseConsumer.accept(reply.encode());\n                  }\n                  @Override public void onError(                  Throwable t){\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                    grpcCall.incomingStream=null;\n                    log.error(\"Failure returned by gRPC service\",t);\n                  }\n                  @Override public void onCompleted(){\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                    grpcCall.incomingStream=null;\n                  }\n                }\n;\n                if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n                  grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n                  grpcCall.incomingStream.onNext(message);\n                }\n else {\n                  stubMethod.invoke(grpcStub,message,responseObserver);\n                }\n              }\n            }\n catch (            Exception e) {\n              websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n              grpcCall.incomingStream=null;\n              log.error(\"Failure returned by gRPC service\",e);\n            }\n          }\n        }\n      }\n    }\n  }\n  finally {\n    Thread.currentThread().setContextClassLoader(originalCl);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 749,
      "astHeight" : 30
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 9061,
        "startLineNumber" : 45,
        "startColumnNumber" : 4,
        "endLineNumber" : 197,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void handle(String input,WebSocketData websocketData){\n  ClassLoader originalCl=Thread.currentThread().getContextClassLoader();\n  Thread.currentThread().setContextClassLoader(deploymentClassLoader);\n  try {\n    JsonObject grpcRequest=new JsonObject(input);\n    Integer id=grpcRequest.getInteger(\"id\");\n    String serviceName=grpcRequest.getString(\"serviceName\");\n    String methodName=grpcRequest.getString(\"methodName\");\n    if (\"DISCONNECT\".equals(grpcRequest.getString(\"command\"))) {\n      GrpcCallData grpcCall=websocketData.callsInProgress.get(id);\n      if (grpcCall != null && grpcCall.incomingStream != null) {\n        grpcCall.incomingStream.onCompleted();\n      }\n      return;\n    }\n    GrpcCallData grpcCall;\n    if (websocketData.callsInProgress.containsKey(id)) {\n      grpcCall=websocketData.callsInProgress.get(id);\n    }\n else {\n      Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n      maybeOldCall.ifPresent(call -> {\n        if (call.incomingStream != null) {\n          call.incomingStream.onCompleted();\n        }\n        websocketData.callsInProgress.remove(call.requestId);\n      }\n);\n      grpcCall=new GrpcCallData();\n      grpcCall.serviceName=serviceName;\n      grpcCall.methodName=methodName;\n      grpcCall.requestId=id;\n      websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n    }\n    String testJsonData=grpcRequest.getString(\"content\");\n    Object grpcStub=grpcClientStubs.get(serviceName);\n    if (grpcStub == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_STUB\").encode());\n    }\n else {\n      ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n      MethodDescriptor<?,?> methodDescriptor=null;\n      for (      MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n        if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n          methodDescriptor=method;\n        }\n      }\n      if (methodDescriptor == null) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n      }\n else {\n        Method stubMethod=null;\n        String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n        for (        Method method : grpcStub.getClass().getDeclaredMethods()) {\n          if (method.getName().equals(realMethodName)) {\n            stubMethod=method;\n          }\n        }\n        if (stubMethod == null) {\n          websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n          log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n        }\n else {\n          MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n          if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n            MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n            Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n            try {\n              Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n              Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n              JsonFormat.parser().merge(testJsonData,builder);\n              Message message=builder.build();\n              if (grpcCall.incomingStream != null) {\n                grpcCall.incomingStream.onNext(message);\n              }\n else {\n                StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n                  @Override public void onNext(                  Object value){\n                    String body=null;\n                    try {\n                      body=JsonFormat.printer().print((MessageOrBuilder)value);\n                    }\n catch (                    InvalidProtocolBufferException e) {\n                      websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                      log.error(\"Failed to transform response to JSON\",e);\n                    }\n                    JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                    reply.put(\"body\",body);\n                    websocketData.responseConsumer.accept(reply.encode());\n                  }\n                  @Override public void onError(                  Throwable t){\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                    grpcCall.incomingStream=null;\n                    log.error(\"Failure returned by gRPC service\",t);\n                  }\n                  @Override public void onCompleted(){\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                    grpcCall.incomingStream=null;\n                  }\n                }\n;\n                if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n                  grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n                  grpcCall.incomingStream.onNext(message);\n                }\n else {\n                  stubMethod.invoke(grpcStub,message,responseObserver);\n                }\n              }\n            }\n catch (            Exception e) {\n              websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n              grpcCall.incomingStream=null;\n              log.error(\"Failure returned by gRPC service\",e);\n            }\n          }\n        }\n      }\n    }\n  }\n  finally {\n    Thread.currentThread().setContextClassLoader(originalCl);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 761,
      "astHeight" : 31
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 61,
        "startColumnNumber" : 20,
        "endLineNumber" : 61,
        "endColumnNumber" : 71
      },
      "nodeContext" : "grpcCall != null && grpcCall.incomingStream != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "io.quarkus.grpc.deployment.devmode.GrpcDevConsoleWebSocketListener.GrpcCallData"
  }, {
    "nodeContext" : "grpcCall",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 61,
      "startColumnNumber" : 40,
      "endLineNumber" : 61,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 61,
        "startColumnNumber" : 40,
        "endLineNumber" : 61,
        "endColumnNumber" : 63
      },
      "nodeContext" : "grpcCall.incomingStream",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 61,
        "startColumnNumber" : 40,
        "endLineNumber" : 61,
        "endColumnNumber" : 71
      },
      "nodeContext" : "grpcCall.incomingStream != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 61,
        "startColumnNumber" : 20,
        "endLineNumber" : 61,
        "endColumnNumber" : 71
      },
      "nodeContext" : "grpcCall != null && grpcCall.incomingStream != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 135,
        "startLineNumber" : 61,
        "startColumnNumber" : 16,
        "endLineNumber" : 63,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (grpcCall != null && grpcCall.incomingStream != null) {\n  grpcCall.incomingStream.onCompleted();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 270,
        "startLineNumber" : 59,
        "startColumnNumber" : 71,
        "endLineNumber" : 65,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  GrpcCallData grpcCall=websocketData.callsInProgress.get(id);\n  if (grpcCall != null && grpcCall.incomingStream != null) {\n    grpcCall.incomingStream.onCompleted();\n  }\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 30,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 329,
        "startLineNumber" : 59,
        "startColumnNumber" : 12,
        "endLineNumber" : 65,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (\"DISCONNECT\".equals(grpcRequest.getString(\"command\"))) {\n  GrpcCallData grpcCall=websocketData.callsInProgress.get(id);\n  if (grpcCall != null && grpcCall.incomingStream != null) {\n    grpcCall.incomingStream.onCompleted();\n  }\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 38,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 8730,
        "startLineNumber" : 48,
        "startColumnNumber" : 12,
        "endLineNumber" : 194,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  JsonObject grpcRequest=new JsonObject(input);\n  Integer id=grpcRequest.getInteger(\"id\");\n  String serviceName=grpcRequest.getString(\"serviceName\");\n  String methodName=grpcRequest.getString(\"methodName\");\n  if (\"DISCONNECT\".equals(grpcRequest.getString(\"command\"))) {\n    GrpcCallData grpcCall=websocketData.callsInProgress.get(id);\n    if (grpcCall != null && grpcCall.incomingStream != null) {\n      grpcCall.incomingStream.onCompleted();\n    }\n    return;\n  }\n  GrpcCallData grpcCall;\n  if (websocketData.callsInProgress.containsKey(id)) {\n    grpcCall=websocketData.callsInProgress.get(id);\n  }\n else {\n    Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n    maybeOldCall.ifPresent(call -> {\n      if (call.incomingStream != null) {\n        call.incomingStream.onCompleted();\n      }\n      websocketData.callsInProgress.remove(call.requestId);\n    }\n);\n    grpcCall=new GrpcCallData();\n    grpcCall.serviceName=serviceName;\n    grpcCall.methodName=methodName;\n    grpcCall.requestId=id;\n    websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n  }\n  String testJsonData=grpcRequest.getString(\"content\");\n  Object grpcStub=grpcClientStubs.get(serviceName);\n  if (grpcStub == null) {\n    websocketData.responseConsumer.accept(jsonResponse(id,\"NO_STUB\").encode());\n  }\n else {\n    ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n    MethodDescriptor<?,?> methodDescriptor=null;\n    for (    MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n      if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n        methodDescriptor=method;\n      }\n    }\n    if (methodDescriptor == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n    }\n else {\n      Method stubMethod=null;\n      String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n      for (      Method method : grpcStub.getClass().getDeclaredMethods()) {\n        if (method.getName().equals(realMethodName)) {\n          stubMethod=method;\n        }\n      }\n      if (stubMethod == null) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n        log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n      }\n else {\n        MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n        if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n          MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n          Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n          try {\n            Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n            Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n            JsonFormat.parser().merge(testJsonData,builder);\n            Message message=builder.build();\n            if (grpcCall.incomingStream != null) {\n              grpcCall.incomingStream.onNext(message);\n            }\n else {\n              StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n                @Override public void onNext(                Object value){\n                  String body=null;\n                  try {\n                    body=JsonFormat.printer().print((MessageOrBuilder)value);\n                  }\n catch (                  InvalidProtocolBufferException e) {\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                    log.error(\"Failed to transform response to JSON\",e);\n                  }\n                  JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                  reply.put(\"body\",body);\n                  websocketData.responseConsumer.accept(reply.encode());\n                }\n                @Override public void onError(                Throwable t){\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                  grpcCall.incomingStream=null;\n                  log.error(\"Failure returned by gRPC service\",t);\n                }\n                @Override public void onCompleted(){\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                  grpcCall.incomingStream=null;\n                }\n              }\n;\n              if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n                grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n                grpcCall.incomingStream.onNext(message);\n              }\n else {\n                stubMethod.invoke(grpcStub,message,responseObserver);\n              }\n            }\n          }\n catch (          Exception e) {\n            websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n            grpcCall.incomingStream=null;\n            log.error(\"Failure returned by gRPC service\",e);\n          }\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 722,
      "astHeight" : 28
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8824,
        "startLineNumber" : 48,
        "startColumnNumber" : 8,
        "endLineNumber" : 196,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  JsonObject grpcRequest=new JsonObject(input);\n  Integer id=grpcRequest.getInteger(\"id\");\n  String serviceName=grpcRequest.getString(\"serviceName\");\n  String methodName=grpcRequest.getString(\"methodName\");\n  if (\"DISCONNECT\".equals(grpcRequest.getString(\"command\"))) {\n    GrpcCallData grpcCall=websocketData.callsInProgress.get(id);\n    if (grpcCall != null && grpcCall.incomingStream != null) {\n      grpcCall.incomingStream.onCompleted();\n    }\n    return;\n  }\n  GrpcCallData grpcCall;\n  if (websocketData.callsInProgress.containsKey(id)) {\n    grpcCall=websocketData.callsInProgress.get(id);\n  }\n else {\n    Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n    maybeOldCall.ifPresent(call -> {\n      if (call.incomingStream != null) {\n        call.incomingStream.onCompleted();\n      }\n      websocketData.callsInProgress.remove(call.requestId);\n    }\n);\n    grpcCall=new GrpcCallData();\n    grpcCall.serviceName=serviceName;\n    grpcCall.methodName=methodName;\n    grpcCall.requestId=id;\n    websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n  }\n  String testJsonData=grpcRequest.getString(\"content\");\n  Object grpcStub=grpcClientStubs.get(serviceName);\n  if (grpcStub == null) {\n    websocketData.responseConsumer.accept(jsonResponse(id,\"NO_STUB\").encode());\n  }\n else {\n    ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n    MethodDescriptor<?,?> methodDescriptor=null;\n    for (    MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n      if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n        methodDescriptor=method;\n      }\n    }\n    if (methodDescriptor == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n    }\n else {\n      Method stubMethod=null;\n      String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n      for (      Method method : grpcStub.getClass().getDeclaredMethods()) {\n        if (method.getName().equals(realMethodName)) {\n          stubMethod=method;\n        }\n      }\n      if (stubMethod == null) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n        log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n      }\n else {\n        MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n        if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n          MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n          Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n          try {\n            Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n            Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n            JsonFormat.parser().merge(testJsonData,builder);\n            Message message=builder.build();\n            if (grpcCall.incomingStream != null) {\n              grpcCall.incomingStream.onNext(message);\n            }\n else {\n              StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n                @Override public void onNext(                Object value){\n                  String body=null;\n                  try {\n                    body=JsonFormat.printer().print((MessageOrBuilder)value);\n                  }\n catch (                  InvalidProtocolBufferException e) {\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                    log.error(\"Failed to transform response to JSON\",e);\n                  }\n                  JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                  reply.put(\"body\",body);\n                  websocketData.responseConsumer.accept(reply.encode());\n                }\n                @Override public void onError(                Throwable t){\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                  grpcCall.incomingStream=null;\n                  log.error(\"Failure returned by gRPC service\",t);\n                }\n                @Override public void onCompleted(){\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                  grpcCall.incomingStream=null;\n                }\n              }\n;\n              if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n                grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n                grpcCall.incomingStream.onNext(message);\n              }\n else {\n                stubMethod.invoke(grpcStub,message,responseObserver);\n              }\n            }\n          }\n catch (          Exception e) {\n            websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n            grpcCall.incomingStream=null;\n            log.error(\"Failure returned by gRPC service\",e);\n          }\n        }\n      }\n    }\n  }\n}\n  finally {\n  Thread.currentThread().setContextClassLoader(originalCl);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 731,
      "astHeight" : 29
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8998,
        "startLineNumber" : 45,
        "startColumnNumber" : 67,
        "endLineNumber" : 197,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ClassLoader originalCl=Thread.currentThread().getContextClassLoader();\n  Thread.currentThread().setContextClassLoader(deploymentClassLoader);\n  try {\n    JsonObject grpcRequest=new JsonObject(input);\n    Integer id=grpcRequest.getInteger(\"id\");\n    String serviceName=grpcRequest.getString(\"serviceName\");\n    String methodName=grpcRequest.getString(\"methodName\");\n    if (\"DISCONNECT\".equals(grpcRequest.getString(\"command\"))) {\n      GrpcCallData grpcCall=websocketData.callsInProgress.get(id);\n      if (grpcCall != null && grpcCall.incomingStream != null) {\n        grpcCall.incomingStream.onCompleted();\n      }\n      return;\n    }\n    GrpcCallData grpcCall;\n    if (websocketData.callsInProgress.containsKey(id)) {\n      grpcCall=websocketData.callsInProgress.get(id);\n    }\n else {\n      Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n      maybeOldCall.ifPresent(call -> {\n        if (call.incomingStream != null) {\n          call.incomingStream.onCompleted();\n        }\n        websocketData.callsInProgress.remove(call.requestId);\n      }\n);\n      grpcCall=new GrpcCallData();\n      grpcCall.serviceName=serviceName;\n      grpcCall.methodName=methodName;\n      grpcCall.requestId=id;\n      websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n    }\n    String testJsonData=grpcRequest.getString(\"content\");\n    Object grpcStub=grpcClientStubs.get(serviceName);\n    if (grpcStub == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_STUB\").encode());\n    }\n else {\n      ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n      MethodDescriptor<?,?> methodDescriptor=null;\n      for (      MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n        if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n          methodDescriptor=method;\n        }\n      }\n      if (methodDescriptor == null) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n      }\n else {\n        Method stubMethod=null;\n        String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n        for (        Method method : grpcStub.getClass().getDeclaredMethods()) {\n          if (method.getName().equals(realMethodName)) {\n            stubMethod=method;\n          }\n        }\n        if (stubMethod == null) {\n          websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n          log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n        }\n else {\n          MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n          if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n            MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n            Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n            try {\n              Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n              Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n              JsonFormat.parser().merge(testJsonData,builder);\n              Message message=builder.build();\n              if (grpcCall.incomingStream != null) {\n                grpcCall.incomingStream.onNext(message);\n              }\n else {\n                StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n                  @Override public void onNext(                  Object value){\n                    String body=null;\n                    try {\n                      body=JsonFormat.printer().print((MessageOrBuilder)value);\n                    }\n catch (                    InvalidProtocolBufferException e) {\n                      websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                      log.error(\"Failed to transform response to JSON\",e);\n                    }\n                    JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                    reply.put(\"body\",body);\n                    websocketData.responseConsumer.accept(reply.encode());\n                  }\n                  @Override public void onError(                  Throwable t){\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                    grpcCall.incomingStream=null;\n                    log.error(\"Failure returned by gRPC service\",t);\n                  }\n                  @Override public void onCompleted(){\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                    grpcCall.incomingStream=null;\n                  }\n                }\n;\n                if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n                  grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n                  grpcCall.incomingStream.onNext(message);\n                }\n else {\n                  stubMethod.invoke(grpcStub,message,responseObserver);\n                }\n              }\n            }\n catch (            Exception e) {\n              websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n              grpcCall.incomingStream=null;\n              log.error(\"Failure returned by gRPC service\",e);\n            }\n          }\n        }\n      }\n    }\n  }\n  finally {\n    Thread.currentThread().setContextClassLoader(originalCl);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 749,
      "astHeight" : 30
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 9061,
        "startLineNumber" : 45,
        "startColumnNumber" : 4,
        "endLineNumber" : 197,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void handle(String input,WebSocketData websocketData){\n  ClassLoader originalCl=Thread.currentThread().getContextClassLoader();\n  Thread.currentThread().setContextClassLoader(deploymentClassLoader);\n  try {\n    JsonObject grpcRequest=new JsonObject(input);\n    Integer id=grpcRequest.getInteger(\"id\");\n    String serviceName=grpcRequest.getString(\"serviceName\");\n    String methodName=grpcRequest.getString(\"methodName\");\n    if (\"DISCONNECT\".equals(grpcRequest.getString(\"command\"))) {\n      GrpcCallData grpcCall=websocketData.callsInProgress.get(id);\n      if (grpcCall != null && grpcCall.incomingStream != null) {\n        grpcCall.incomingStream.onCompleted();\n      }\n      return;\n    }\n    GrpcCallData grpcCall;\n    if (websocketData.callsInProgress.containsKey(id)) {\n      grpcCall=websocketData.callsInProgress.get(id);\n    }\n else {\n      Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n      maybeOldCall.ifPresent(call -> {\n        if (call.incomingStream != null) {\n          call.incomingStream.onCompleted();\n        }\n        websocketData.callsInProgress.remove(call.requestId);\n      }\n);\n      grpcCall=new GrpcCallData();\n      grpcCall.serviceName=serviceName;\n      grpcCall.methodName=methodName;\n      grpcCall.requestId=id;\n      websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n    }\n    String testJsonData=grpcRequest.getString(\"content\");\n    Object grpcStub=grpcClientStubs.get(serviceName);\n    if (grpcStub == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_STUB\").encode());\n    }\n else {\n      ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n      MethodDescriptor<?,?> methodDescriptor=null;\n      for (      MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n        if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n          methodDescriptor=method;\n        }\n      }\n      if (methodDescriptor == null) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n      }\n else {\n        Method stubMethod=null;\n        String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n        for (        Method method : grpcStub.getClass().getDeclaredMethods()) {\n          if (method.getName().equals(realMethodName)) {\n            stubMethod=method;\n          }\n        }\n        if (stubMethod == null) {\n          websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n          log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n        }\n else {\n          MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n          if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n            MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n            Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n            try {\n              Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n              Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n              JsonFormat.parser().merge(testJsonData,builder);\n              Message message=builder.build();\n              if (grpcCall.incomingStream != null) {\n                grpcCall.incomingStream.onNext(message);\n              }\n else {\n                StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n                  @Override public void onNext(                  Object value){\n                    String body=null;\n                    try {\n                      body=JsonFormat.printer().print((MessageOrBuilder)value);\n                    }\n catch (                    InvalidProtocolBufferException e) {\n                      websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                      log.error(\"Failed to transform response to JSON\",e);\n                    }\n                    JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                    reply.put(\"body\",body);\n                    websocketData.responseConsumer.accept(reply.encode());\n                  }\n                  @Override public void onError(                  Throwable t){\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                    grpcCall.incomingStream=null;\n                    log.error(\"Failure returned by gRPC service\",t);\n                  }\n                  @Override public void onCompleted(){\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                    grpcCall.incomingStream=null;\n                  }\n                }\n;\n                if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n                  grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n                  grpcCall.incomingStream.onNext(message);\n                }\n else {\n                  stubMethod.invoke(grpcStub,message,responseObserver);\n                }\n              }\n            }\n catch (            Exception e) {\n              websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n              grpcCall.incomingStream=null;\n              log.error(\"Failure returned by gRPC service\",e);\n            }\n          }\n        }\n      }\n    }\n  }\n  finally {\n    Thread.currentThread().setContextClassLoader(originalCl);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 761,
      "astHeight" : 31
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 61,
        "startColumnNumber" : 20,
        "endLineNumber" : 61,
        "endColumnNumber" : 71
      },
      "nodeContext" : "grpcCall != null && grpcCall.incomingStream != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "io.quarkus.grpc.deployment.devmode.GrpcDevConsoleWebSocketListener.GrpcCallData"
  }, {
    "nodeContext" : "grpcCall",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 62,
      "startColumnNumber" : 20,
      "endLineNumber" : 62,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 62,
        "startColumnNumber" : 20,
        "endLineNumber" : 62,
        "endColumnNumber" : 43
      },
      "nodeContext" : "grpcCall.incomingStream",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 62,
        "startColumnNumber" : 20,
        "endLineNumber" : 62,
        "endColumnNumber" : 57
      },
      "nodeContext" : "grpcCall.incomingStream.onCompleted()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 62,
        "startColumnNumber" : 20,
        "endLineNumber" : 62,
        "endColumnNumber" : 58
      },
      "nodeContext" : "grpcCall.incomingStream.onCompleted();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 61,
        "startColumnNumber" : 73,
        "endLineNumber" : 63,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  grpcCall.incomingStream.onCompleted();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 135,
        "startLineNumber" : 61,
        "startColumnNumber" : 16,
        "endLineNumber" : 63,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (grpcCall != null && grpcCall.incomingStream != null) {\n  grpcCall.incomingStream.onCompleted();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 270,
        "startLineNumber" : 59,
        "startColumnNumber" : 71,
        "endLineNumber" : 65,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  GrpcCallData grpcCall=websocketData.callsInProgress.get(id);\n  if (grpcCall != null && grpcCall.incomingStream != null) {\n    grpcCall.incomingStream.onCompleted();\n  }\n  return;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 30,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 329,
        "startLineNumber" : 59,
        "startColumnNumber" : 12,
        "endLineNumber" : 65,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (\"DISCONNECT\".equals(grpcRequest.getString(\"command\"))) {\n  GrpcCallData grpcCall=websocketData.callsInProgress.get(id);\n  if (grpcCall != null && grpcCall.incomingStream != null) {\n    grpcCall.incomingStream.onCompleted();\n  }\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 38,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 8730,
        "startLineNumber" : 48,
        "startColumnNumber" : 12,
        "endLineNumber" : 194,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  JsonObject grpcRequest=new JsonObject(input);\n  Integer id=grpcRequest.getInteger(\"id\");\n  String serviceName=grpcRequest.getString(\"serviceName\");\n  String methodName=grpcRequest.getString(\"methodName\");\n  if (\"DISCONNECT\".equals(grpcRequest.getString(\"command\"))) {\n    GrpcCallData grpcCall=websocketData.callsInProgress.get(id);\n    if (grpcCall != null && grpcCall.incomingStream != null) {\n      grpcCall.incomingStream.onCompleted();\n    }\n    return;\n  }\n  GrpcCallData grpcCall;\n  if (websocketData.callsInProgress.containsKey(id)) {\n    grpcCall=websocketData.callsInProgress.get(id);\n  }\n else {\n    Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n    maybeOldCall.ifPresent(call -> {\n      if (call.incomingStream != null) {\n        call.incomingStream.onCompleted();\n      }\n      websocketData.callsInProgress.remove(call.requestId);\n    }\n);\n    grpcCall=new GrpcCallData();\n    grpcCall.serviceName=serviceName;\n    grpcCall.methodName=methodName;\n    grpcCall.requestId=id;\n    websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n  }\n  String testJsonData=grpcRequest.getString(\"content\");\n  Object grpcStub=grpcClientStubs.get(serviceName);\n  if (grpcStub == null) {\n    websocketData.responseConsumer.accept(jsonResponse(id,\"NO_STUB\").encode());\n  }\n else {\n    ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n    MethodDescriptor<?,?> methodDescriptor=null;\n    for (    MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n      if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n        methodDescriptor=method;\n      }\n    }\n    if (methodDescriptor == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n    }\n else {\n      Method stubMethod=null;\n      String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n      for (      Method method : grpcStub.getClass().getDeclaredMethods()) {\n        if (method.getName().equals(realMethodName)) {\n          stubMethod=method;\n        }\n      }\n      if (stubMethod == null) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n        log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n      }\n else {\n        MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n        if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n          MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n          Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n          try {\n            Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n            Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n            JsonFormat.parser().merge(testJsonData,builder);\n            Message message=builder.build();\n            if (grpcCall.incomingStream != null) {\n              grpcCall.incomingStream.onNext(message);\n            }\n else {\n              StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n                @Override public void onNext(                Object value){\n                  String body=null;\n                  try {\n                    body=JsonFormat.printer().print((MessageOrBuilder)value);\n                  }\n catch (                  InvalidProtocolBufferException e) {\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                    log.error(\"Failed to transform response to JSON\",e);\n                  }\n                  JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                  reply.put(\"body\",body);\n                  websocketData.responseConsumer.accept(reply.encode());\n                }\n                @Override public void onError(                Throwable t){\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                  grpcCall.incomingStream=null;\n                  log.error(\"Failure returned by gRPC service\",t);\n                }\n                @Override public void onCompleted(){\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                  grpcCall.incomingStream=null;\n                }\n              }\n;\n              if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n                grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n                grpcCall.incomingStream.onNext(message);\n              }\n else {\n                stubMethod.invoke(grpcStub,message,responseObserver);\n              }\n            }\n          }\n catch (          Exception e) {\n            websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n            grpcCall.incomingStream=null;\n            log.error(\"Failure returned by gRPC service\",e);\n          }\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 722,
      "astHeight" : 28
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8824,
        "startLineNumber" : 48,
        "startColumnNumber" : 8,
        "endLineNumber" : 196,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  JsonObject grpcRequest=new JsonObject(input);\n  Integer id=grpcRequest.getInteger(\"id\");\n  String serviceName=grpcRequest.getString(\"serviceName\");\n  String methodName=grpcRequest.getString(\"methodName\");\n  if (\"DISCONNECT\".equals(grpcRequest.getString(\"command\"))) {\n    GrpcCallData grpcCall=websocketData.callsInProgress.get(id);\n    if (grpcCall != null && grpcCall.incomingStream != null) {\n      grpcCall.incomingStream.onCompleted();\n    }\n    return;\n  }\n  GrpcCallData grpcCall;\n  if (websocketData.callsInProgress.containsKey(id)) {\n    grpcCall=websocketData.callsInProgress.get(id);\n  }\n else {\n    Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n    maybeOldCall.ifPresent(call -> {\n      if (call.incomingStream != null) {\n        call.incomingStream.onCompleted();\n      }\n      websocketData.callsInProgress.remove(call.requestId);\n    }\n);\n    grpcCall=new GrpcCallData();\n    grpcCall.serviceName=serviceName;\n    grpcCall.methodName=methodName;\n    grpcCall.requestId=id;\n    websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n  }\n  String testJsonData=grpcRequest.getString(\"content\");\n  Object grpcStub=grpcClientStubs.get(serviceName);\n  if (grpcStub == null) {\n    websocketData.responseConsumer.accept(jsonResponse(id,\"NO_STUB\").encode());\n  }\n else {\n    ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n    MethodDescriptor<?,?> methodDescriptor=null;\n    for (    MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n      if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n        methodDescriptor=method;\n      }\n    }\n    if (methodDescriptor == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n    }\n else {\n      Method stubMethod=null;\n      String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n      for (      Method method : grpcStub.getClass().getDeclaredMethods()) {\n        if (method.getName().equals(realMethodName)) {\n          stubMethod=method;\n        }\n      }\n      if (stubMethod == null) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n        log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n      }\n else {\n        MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n        if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n          MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n          Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n          try {\n            Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n            Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n            JsonFormat.parser().merge(testJsonData,builder);\n            Message message=builder.build();\n            if (grpcCall.incomingStream != null) {\n              grpcCall.incomingStream.onNext(message);\n            }\n else {\n              StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n                @Override public void onNext(                Object value){\n                  String body=null;\n                  try {\n                    body=JsonFormat.printer().print((MessageOrBuilder)value);\n                  }\n catch (                  InvalidProtocolBufferException e) {\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                    log.error(\"Failed to transform response to JSON\",e);\n                  }\n                  JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                  reply.put(\"body\",body);\n                  websocketData.responseConsumer.accept(reply.encode());\n                }\n                @Override public void onError(                Throwable t){\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                  grpcCall.incomingStream=null;\n                  log.error(\"Failure returned by gRPC service\",t);\n                }\n                @Override public void onCompleted(){\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                  grpcCall.incomingStream=null;\n                }\n              }\n;\n              if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n                grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n                grpcCall.incomingStream.onNext(message);\n              }\n else {\n                stubMethod.invoke(grpcStub,message,responseObserver);\n              }\n            }\n          }\n catch (          Exception e) {\n            websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n            grpcCall.incomingStream=null;\n            log.error(\"Failure returned by gRPC service\",e);\n          }\n        }\n      }\n    }\n  }\n}\n  finally {\n  Thread.currentThread().setContextClassLoader(originalCl);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 731,
      "astHeight" : 29
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8998,
        "startLineNumber" : 45,
        "startColumnNumber" : 67,
        "endLineNumber" : 197,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ClassLoader originalCl=Thread.currentThread().getContextClassLoader();\n  Thread.currentThread().setContextClassLoader(deploymentClassLoader);\n  try {\n    JsonObject grpcRequest=new JsonObject(input);\n    Integer id=grpcRequest.getInteger(\"id\");\n    String serviceName=grpcRequest.getString(\"serviceName\");\n    String methodName=grpcRequest.getString(\"methodName\");\n    if (\"DISCONNECT\".equals(grpcRequest.getString(\"command\"))) {\n      GrpcCallData grpcCall=websocketData.callsInProgress.get(id);\n      if (grpcCall != null && grpcCall.incomingStream != null) {\n        grpcCall.incomingStream.onCompleted();\n      }\n      return;\n    }\n    GrpcCallData grpcCall;\n    if (websocketData.callsInProgress.containsKey(id)) {\n      grpcCall=websocketData.callsInProgress.get(id);\n    }\n else {\n      Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n      maybeOldCall.ifPresent(call -> {\n        if (call.incomingStream != null) {\n          call.incomingStream.onCompleted();\n        }\n        websocketData.callsInProgress.remove(call.requestId);\n      }\n);\n      grpcCall=new GrpcCallData();\n      grpcCall.serviceName=serviceName;\n      grpcCall.methodName=methodName;\n      grpcCall.requestId=id;\n      websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n    }\n    String testJsonData=grpcRequest.getString(\"content\");\n    Object grpcStub=grpcClientStubs.get(serviceName);\n    if (grpcStub == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_STUB\").encode());\n    }\n else {\n      ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n      MethodDescriptor<?,?> methodDescriptor=null;\n      for (      MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n        if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n          methodDescriptor=method;\n        }\n      }\n      if (methodDescriptor == null) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n      }\n else {\n        Method stubMethod=null;\n        String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n        for (        Method method : grpcStub.getClass().getDeclaredMethods()) {\n          if (method.getName().equals(realMethodName)) {\n            stubMethod=method;\n          }\n        }\n        if (stubMethod == null) {\n          websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n          log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n        }\n else {\n          MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n          if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n            MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n            Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n            try {\n              Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n              Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n              JsonFormat.parser().merge(testJsonData,builder);\n              Message message=builder.build();\n              if (grpcCall.incomingStream != null) {\n                grpcCall.incomingStream.onNext(message);\n              }\n else {\n                StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n                  @Override public void onNext(                  Object value){\n                    String body=null;\n                    try {\n                      body=JsonFormat.printer().print((MessageOrBuilder)value);\n                    }\n catch (                    InvalidProtocolBufferException e) {\n                      websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                      log.error(\"Failed to transform response to JSON\",e);\n                    }\n                    JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                    reply.put(\"body\",body);\n                    websocketData.responseConsumer.accept(reply.encode());\n                  }\n                  @Override public void onError(                  Throwable t){\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                    grpcCall.incomingStream=null;\n                    log.error(\"Failure returned by gRPC service\",t);\n                  }\n                  @Override public void onCompleted(){\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                    grpcCall.incomingStream=null;\n                  }\n                }\n;\n                if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n                  grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n                  grpcCall.incomingStream.onNext(message);\n                }\n else {\n                  stubMethod.invoke(grpcStub,message,responseObserver);\n                }\n              }\n            }\n catch (            Exception e) {\n              websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n              grpcCall.incomingStream=null;\n              log.error(\"Failure returned by gRPC service\",e);\n            }\n          }\n        }\n      }\n    }\n  }\n  finally {\n    Thread.currentThread().setContextClassLoader(originalCl);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 749,
      "astHeight" : 30
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 9061,
        "startLineNumber" : 45,
        "startColumnNumber" : 4,
        "endLineNumber" : 197,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void handle(String input,WebSocketData websocketData){\n  ClassLoader originalCl=Thread.currentThread().getContextClassLoader();\n  Thread.currentThread().setContextClassLoader(deploymentClassLoader);\n  try {\n    JsonObject grpcRequest=new JsonObject(input);\n    Integer id=grpcRequest.getInteger(\"id\");\n    String serviceName=grpcRequest.getString(\"serviceName\");\n    String methodName=grpcRequest.getString(\"methodName\");\n    if (\"DISCONNECT\".equals(grpcRequest.getString(\"command\"))) {\n      GrpcCallData grpcCall=websocketData.callsInProgress.get(id);\n      if (grpcCall != null && grpcCall.incomingStream != null) {\n        grpcCall.incomingStream.onCompleted();\n      }\n      return;\n    }\n    GrpcCallData grpcCall;\n    if (websocketData.callsInProgress.containsKey(id)) {\n      grpcCall=websocketData.callsInProgress.get(id);\n    }\n else {\n      Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n      maybeOldCall.ifPresent(call -> {\n        if (call.incomingStream != null) {\n          call.incomingStream.onCompleted();\n        }\n        websocketData.callsInProgress.remove(call.requestId);\n      }\n);\n      grpcCall=new GrpcCallData();\n      grpcCall.serviceName=serviceName;\n      grpcCall.methodName=methodName;\n      grpcCall.requestId=id;\n      websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n    }\n    String testJsonData=grpcRequest.getString(\"content\");\n    Object grpcStub=grpcClientStubs.get(serviceName);\n    if (grpcStub == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_STUB\").encode());\n    }\n else {\n      ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n      MethodDescriptor<?,?> methodDescriptor=null;\n      for (      MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n        if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n          methodDescriptor=method;\n        }\n      }\n      if (methodDescriptor == null) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n      }\n else {\n        Method stubMethod=null;\n        String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n        for (        Method method : grpcStub.getClass().getDeclaredMethods()) {\n          if (method.getName().equals(realMethodName)) {\n            stubMethod=method;\n          }\n        }\n        if (stubMethod == null) {\n          websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n          log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n        }\n else {\n          MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n          if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n            MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n            Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n            try {\n              Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n              Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n              JsonFormat.parser().merge(testJsonData,builder);\n              Message message=builder.build();\n              if (grpcCall.incomingStream != null) {\n                grpcCall.incomingStream.onNext(message);\n              }\n else {\n                StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n                  @Override public void onNext(                  Object value){\n                    String body=null;\n                    try {\n                      body=JsonFormat.printer().print((MessageOrBuilder)value);\n                    }\n catch (                    InvalidProtocolBufferException e) {\n                      websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                      log.error(\"Failed to transform response to JSON\",e);\n                    }\n                    JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                    reply.put(\"body\",body);\n                    websocketData.responseConsumer.accept(reply.encode());\n                  }\n                  @Override public void onError(                  Throwable t){\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                    grpcCall.incomingStream=null;\n                    log.error(\"Failure returned by gRPC service\",t);\n                  }\n                  @Override public void onCompleted(){\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                    grpcCall.incomingStream=null;\n                  }\n                }\n;\n                if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n                  grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n                  grpcCall.incomingStream.onNext(message);\n                }\n else {\n                  stubMethod.invoke(grpcStub,message,responseObserver);\n                }\n              }\n            }\n catch (            Exception e) {\n              websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n              grpcCall.incomingStream=null;\n              log.error(\"Failure returned by gRPC service\",e);\n            }\n          }\n        }\n      }\n    }\n  }\n  finally {\n    Thread.currentThread().setContextClassLoader(originalCl);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 761,
      "astHeight" : 31
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 62,
        "startColumnNumber" : 20,
        "endLineNumber" : 62,
        "endColumnNumber" : 58
      },
      "nodeContext" : "grpcCall.incomingStream.onCompleted();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "io.quarkus.grpc.deployment.devmode.GrpcDevConsoleWebSocketListener.GrpcCallData"
  }, {
    "nodeContext" : "grpcCall",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 82,
      "startColumnNumber" : 16,
      "endLineNumber" : 82,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 82,
        "startColumnNumber" : 16,
        "endLineNumber" : 82,
        "endColumnNumber" : 36
      },
      "nodeContext" : "grpcCall.serviceName",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 82,
        "startColumnNumber" : 16,
        "endLineNumber" : 82,
        "endColumnNumber" : 50
      },
      "nodeContext" : "grpcCall.serviceName=serviceName",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 82,
        "startColumnNumber" : 16,
        "endLineNumber" : 82,
        "endColumnNumber" : 51
      },
      "nodeContext" : "grpcCall.serviceName=serviceName;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 820,
        "startLineNumber" : 70,
        "startColumnNumber" : 19,
        "endLineNumber" : 86,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n  maybeOldCall.ifPresent(call -> {\n    if (call.incomingStream != null) {\n      call.incomingStream.onCompleted();\n    }\n    websocketData.callsInProgress.remove(call.requestId);\n  }\n);\n  grpcCall=new GrpcCallData();\n  grpcCall.serviceName=serviceName;\n  grpcCall.methodName=methodName;\n  grpcCall.requestId=id;\n  websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 100,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 958,
        "startLineNumber" : 68,
        "startColumnNumber" : 12,
        "endLineNumber" : 86,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (websocketData.callsInProgress.containsKey(id)) {\n  grpcCall=websocketData.callsInProgress.get(id);\n}\n else {\n  Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n  maybeOldCall.ifPresent(call -> {\n    if (call.incomingStream != null) {\n      call.incomingStream.onCompleted();\n    }\n    websocketData.callsInProgress.remove(call.requestId);\n  }\n);\n  grpcCall=new GrpcCallData();\n  grpcCall.serviceName=serviceName;\n  grpcCall.methodName=methodName;\n  grpcCall.requestId=id;\n  websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 117,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 8730,
        "startLineNumber" : 48,
        "startColumnNumber" : 12,
        "endLineNumber" : 194,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  JsonObject grpcRequest=new JsonObject(input);\n  Integer id=grpcRequest.getInteger(\"id\");\n  String serviceName=grpcRequest.getString(\"serviceName\");\n  String methodName=grpcRequest.getString(\"methodName\");\n  if (\"DISCONNECT\".equals(grpcRequest.getString(\"command\"))) {\n    GrpcCallData grpcCall=websocketData.callsInProgress.get(id);\n    if (grpcCall != null && grpcCall.incomingStream != null) {\n      grpcCall.incomingStream.onCompleted();\n    }\n    return;\n  }\n  GrpcCallData grpcCall;\n  if (websocketData.callsInProgress.containsKey(id)) {\n    grpcCall=websocketData.callsInProgress.get(id);\n  }\n else {\n    Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n    maybeOldCall.ifPresent(call -> {\n      if (call.incomingStream != null) {\n        call.incomingStream.onCompleted();\n      }\n      websocketData.callsInProgress.remove(call.requestId);\n    }\n);\n    grpcCall=new GrpcCallData();\n    grpcCall.serviceName=serviceName;\n    grpcCall.methodName=methodName;\n    grpcCall.requestId=id;\n    websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n  }\n  String testJsonData=grpcRequest.getString(\"content\");\n  Object grpcStub=grpcClientStubs.get(serviceName);\n  if (grpcStub == null) {\n    websocketData.responseConsumer.accept(jsonResponse(id,\"NO_STUB\").encode());\n  }\n else {\n    ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n    MethodDescriptor<?,?> methodDescriptor=null;\n    for (    MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n      if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n        methodDescriptor=method;\n      }\n    }\n    if (methodDescriptor == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n    }\n else {\n      Method stubMethod=null;\n      String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n      for (      Method method : grpcStub.getClass().getDeclaredMethods()) {\n        if (method.getName().equals(realMethodName)) {\n          stubMethod=method;\n        }\n      }\n      if (stubMethod == null) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n        log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n      }\n else {\n        MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n        if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n          MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n          Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n          try {\n            Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n            Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n            JsonFormat.parser().merge(testJsonData,builder);\n            Message message=builder.build();\n            if (grpcCall.incomingStream != null) {\n              grpcCall.incomingStream.onNext(message);\n            }\n else {\n              StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n                @Override public void onNext(                Object value){\n                  String body=null;\n                  try {\n                    body=JsonFormat.printer().print((MessageOrBuilder)value);\n                  }\n catch (                  InvalidProtocolBufferException e) {\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                    log.error(\"Failed to transform response to JSON\",e);\n                  }\n                  JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                  reply.put(\"body\",body);\n                  websocketData.responseConsumer.accept(reply.encode());\n                }\n                @Override public void onError(                Throwable t){\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                  grpcCall.incomingStream=null;\n                  log.error(\"Failure returned by gRPC service\",t);\n                }\n                @Override public void onCompleted(){\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                  grpcCall.incomingStream=null;\n                }\n              }\n;\n              if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n                grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n                grpcCall.incomingStream.onNext(message);\n              }\n else {\n                stubMethod.invoke(grpcStub,message,responseObserver);\n              }\n            }\n          }\n catch (          Exception e) {\n            websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n            grpcCall.incomingStream=null;\n            log.error(\"Failure returned by gRPC service\",e);\n          }\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 722,
      "astHeight" : 28
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8824,
        "startLineNumber" : 48,
        "startColumnNumber" : 8,
        "endLineNumber" : 196,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  JsonObject grpcRequest=new JsonObject(input);\n  Integer id=grpcRequest.getInteger(\"id\");\n  String serviceName=grpcRequest.getString(\"serviceName\");\n  String methodName=grpcRequest.getString(\"methodName\");\n  if (\"DISCONNECT\".equals(grpcRequest.getString(\"command\"))) {\n    GrpcCallData grpcCall=websocketData.callsInProgress.get(id);\n    if (grpcCall != null && grpcCall.incomingStream != null) {\n      grpcCall.incomingStream.onCompleted();\n    }\n    return;\n  }\n  GrpcCallData grpcCall;\n  if (websocketData.callsInProgress.containsKey(id)) {\n    grpcCall=websocketData.callsInProgress.get(id);\n  }\n else {\n    Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n    maybeOldCall.ifPresent(call -> {\n      if (call.incomingStream != null) {\n        call.incomingStream.onCompleted();\n      }\n      websocketData.callsInProgress.remove(call.requestId);\n    }\n);\n    grpcCall=new GrpcCallData();\n    grpcCall.serviceName=serviceName;\n    grpcCall.methodName=methodName;\n    grpcCall.requestId=id;\n    websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n  }\n  String testJsonData=grpcRequest.getString(\"content\");\n  Object grpcStub=grpcClientStubs.get(serviceName);\n  if (grpcStub == null) {\n    websocketData.responseConsumer.accept(jsonResponse(id,\"NO_STUB\").encode());\n  }\n else {\n    ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n    MethodDescriptor<?,?> methodDescriptor=null;\n    for (    MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n      if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n        methodDescriptor=method;\n      }\n    }\n    if (methodDescriptor == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n    }\n else {\n      Method stubMethod=null;\n      String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n      for (      Method method : grpcStub.getClass().getDeclaredMethods()) {\n        if (method.getName().equals(realMethodName)) {\n          stubMethod=method;\n        }\n      }\n      if (stubMethod == null) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n        log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n      }\n else {\n        MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n        if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n          MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n          Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n          try {\n            Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n            Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n            JsonFormat.parser().merge(testJsonData,builder);\n            Message message=builder.build();\n            if (grpcCall.incomingStream != null) {\n              grpcCall.incomingStream.onNext(message);\n            }\n else {\n              StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n                @Override public void onNext(                Object value){\n                  String body=null;\n                  try {\n                    body=JsonFormat.printer().print((MessageOrBuilder)value);\n                  }\n catch (                  InvalidProtocolBufferException e) {\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                    log.error(\"Failed to transform response to JSON\",e);\n                  }\n                  JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                  reply.put(\"body\",body);\n                  websocketData.responseConsumer.accept(reply.encode());\n                }\n                @Override public void onError(                Throwable t){\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                  grpcCall.incomingStream=null;\n                  log.error(\"Failure returned by gRPC service\",t);\n                }\n                @Override public void onCompleted(){\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                  grpcCall.incomingStream=null;\n                }\n              }\n;\n              if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n                grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n                grpcCall.incomingStream.onNext(message);\n              }\n else {\n                stubMethod.invoke(grpcStub,message,responseObserver);\n              }\n            }\n          }\n catch (          Exception e) {\n            websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n            grpcCall.incomingStream=null;\n            log.error(\"Failure returned by gRPC service\",e);\n          }\n        }\n      }\n    }\n  }\n}\n  finally {\n  Thread.currentThread().setContextClassLoader(originalCl);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 731,
      "astHeight" : 29
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8998,
        "startLineNumber" : 45,
        "startColumnNumber" : 67,
        "endLineNumber" : 197,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ClassLoader originalCl=Thread.currentThread().getContextClassLoader();\n  Thread.currentThread().setContextClassLoader(deploymentClassLoader);\n  try {\n    JsonObject grpcRequest=new JsonObject(input);\n    Integer id=grpcRequest.getInteger(\"id\");\n    String serviceName=grpcRequest.getString(\"serviceName\");\n    String methodName=grpcRequest.getString(\"methodName\");\n    if (\"DISCONNECT\".equals(grpcRequest.getString(\"command\"))) {\n      GrpcCallData grpcCall=websocketData.callsInProgress.get(id);\n      if (grpcCall != null && grpcCall.incomingStream != null) {\n        grpcCall.incomingStream.onCompleted();\n      }\n      return;\n    }\n    GrpcCallData grpcCall;\n    if (websocketData.callsInProgress.containsKey(id)) {\n      grpcCall=websocketData.callsInProgress.get(id);\n    }\n else {\n      Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n      maybeOldCall.ifPresent(call -> {\n        if (call.incomingStream != null) {\n          call.incomingStream.onCompleted();\n        }\n        websocketData.callsInProgress.remove(call.requestId);\n      }\n);\n      grpcCall=new GrpcCallData();\n      grpcCall.serviceName=serviceName;\n      grpcCall.methodName=methodName;\n      grpcCall.requestId=id;\n      websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n    }\n    String testJsonData=grpcRequest.getString(\"content\");\n    Object grpcStub=grpcClientStubs.get(serviceName);\n    if (grpcStub == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_STUB\").encode());\n    }\n else {\n      ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n      MethodDescriptor<?,?> methodDescriptor=null;\n      for (      MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n        if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n          methodDescriptor=method;\n        }\n      }\n      if (methodDescriptor == null) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n      }\n else {\n        Method stubMethod=null;\n        String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n        for (        Method method : grpcStub.getClass().getDeclaredMethods()) {\n          if (method.getName().equals(realMethodName)) {\n            stubMethod=method;\n          }\n        }\n        if (stubMethod == null) {\n          websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n          log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n        }\n else {\n          MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n          if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n            MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n            Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n            try {\n              Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n              Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n              JsonFormat.parser().merge(testJsonData,builder);\n              Message message=builder.build();\n              if (grpcCall.incomingStream != null) {\n                grpcCall.incomingStream.onNext(message);\n              }\n else {\n                StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n                  @Override public void onNext(                  Object value){\n                    String body=null;\n                    try {\n                      body=JsonFormat.printer().print((MessageOrBuilder)value);\n                    }\n catch (                    InvalidProtocolBufferException e) {\n                      websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                      log.error(\"Failed to transform response to JSON\",e);\n                    }\n                    JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                    reply.put(\"body\",body);\n                    websocketData.responseConsumer.accept(reply.encode());\n                  }\n                  @Override public void onError(                  Throwable t){\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                    grpcCall.incomingStream=null;\n                    log.error(\"Failure returned by gRPC service\",t);\n                  }\n                  @Override public void onCompleted(){\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                    grpcCall.incomingStream=null;\n                  }\n                }\n;\n                if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n                  grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n                  grpcCall.incomingStream.onNext(message);\n                }\n else {\n                  stubMethod.invoke(grpcStub,message,responseObserver);\n                }\n              }\n            }\n catch (            Exception e) {\n              websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n              grpcCall.incomingStream=null;\n              log.error(\"Failure returned by gRPC service\",e);\n            }\n          }\n        }\n      }\n    }\n  }\n  finally {\n    Thread.currentThread().setContextClassLoader(originalCl);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 749,
      "astHeight" : 30
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 9061,
        "startLineNumber" : 45,
        "startColumnNumber" : 4,
        "endLineNumber" : 197,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void handle(String input,WebSocketData websocketData){\n  ClassLoader originalCl=Thread.currentThread().getContextClassLoader();\n  Thread.currentThread().setContextClassLoader(deploymentClassLoader);\n  try {\n    JsonObject grpcRequest=new JsonObject(input);\n    Integer id=grpcRequest.getInteger(\"id\");\n    String serviceName=grpcRequest.getString(\"serviceName\");\n    String methodName=grpcRequest.getString(\"methodName\");\n    if (\"DISCONNECT\".equals(grpcRequest.getString(\"command\"))) {\n      GrpcCallData grpcCall=websocketData.callsInProgress.get(id);\n      if (grpcCall != null && grpcCall.incomingStream != null) {\n        grpcCall.incomingStream.onCompleted();\n      }\n      return;\n    }\n    GrpcCallData grpcCall;\n    if (websocketData.callsInProgress.containsKey(id)) {\n      grpcCall=websocketData.callsInProgress.get(id);\n    }\n else {\n      Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n      maybeOldCall.ifPresent(call -> {\n        if (call.incomingStream != null) {\n          call.incomingStream.onCompleted();\n        }\n        websocketData.callsInProgress.remove(call.requestId);\n      }\n);\n      grpcCall=new GrpcCallData();\n      grpcCall.serviceName=serviceName;\n      grpcCall.methodName=methodName;\n      grpcCall.requestId=id;\n      websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n    }\n    String testJsonData=grpcRequest.getString(\"content\");\n    Object grpcStub=grpcClientStubs.get(serviceName);\n    if (grpcStub == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_STUB\").encode());\n    }\n else {\n      ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n      MethodDescriptor<?,?> methodDescriptor=null;\n      for (      MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n        if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n          methodDescriptor=method;\n        }\n      }\n      if (methodDescriptor == null) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n      }\n else {\n        Method stubMethod=null;\n        String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n        for (        Method method : grpcStub.getClass().getDeclaredMethods()) {\n          if (method.getName().equals(realMethodName)) {\n            stubMethod=method;\n          }\n        }\n        if (stubMethod == null) {\n          websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n          log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n        }\n else {\n          MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n          if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n            MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n            Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n            try {\n              Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n              Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n              JsonFormat.parser().merge(testJsonData,builder);\n              Message message=builder.build();\n              if (grpcCall.incomingStream != null) {\n                grpcCall.incomingStream.onNext(message);\n              }\n else {\n                StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n                  @Override public void onNext(                  Object value){\n                    String body=null;\n                    try {\n                      body=JsonFormat.printer().print((MessageOrBuilder)value);\n                    }\n catch (                    InvalidProtocolBufferException e) {\n                      websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                      log.error(\"Failed to transform response to JSON\",e);\n                    }\n                    JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                    reply.put(\"body\",body);\n                    websocketData.responseConsumer.accept(reply.encode());\n                  }\n                  @Override public void onError(                  Throwable t){\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                    grpcCall.incomingStream=null;\n                    log.error(\"Failure returned by gRPC service\",t);\n                  }\n                  @Override public void onCompleted(){\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                    grpcCall.incomingStream=null;\n                  }\n                }\n;\n                if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n                  grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n                  grpcCall.incomingStream.onNext(message);\n                }\n else {\n                  stubMethod.invoke(grpcStub,message,responseObserver);\n                }\n              }\n            }\n catch (            Exception e) {\n              websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n              grpcCall.incomingStream=null;\n              log.error(\"Failure returned by gRPC service\",e);\n            }\n          }\n        }\n      }\n    }\n  }\n  finally {\n    Thread.currentThread().setContextClassLoader(originalCl);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 761,
      "astHeight" : 31
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 82,
        "startColumnNumber" : 16,
        "endLineNumber" : 82,
        "endColumnNumber" : 51
      },
      "nodeContext" : "grpcCall.serviceName=serviceName;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "io.quarkus.grpc.deployment.devmode.GrpcDevConsoleWebSocketListener.GrpcCallData"
  }, {
    "nodeContext" : "grpcCall",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 83,
      "startColumnNumber" : 16,
      "endLineNumber" : 83,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 83,
        "startColumnNumber" : 16,
        "endLineNumber" : 83,
        "endColumnNumber" : 35
      },
      "nodeContext" : "grpcCall.methodName",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 83,
        "startColumnNumber" : 16,
        "endLineNumber" : 83,
        "endColumnNumber" : 48
      },
      "nodeContext" : "grpcCall.methodName=methodName",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 83,
        "startColumnNumber" : 16,
        "endLineNumber" : 83,
        "endColumnNumber" : 49
      },
      "nodeContext" : "grpcCall.methodName=methodName;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 820,
        "startLineNumber" : 70,
        "startColumnNumber" : 19,
        "endLineNumber" : 86,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n  maybeOldCall.ifPresent(call -> {\n    if (call.incomingStream != null) {\n      call.incomingStream.onCompleted();\n    }\n    websocketData.callsInProgress.remove(call.requestId);\n  }\n);\n  grpcCall=new GrpcCallData();\n  grpcCall.serviceName=serviceName;\n  grpcCall.methodName=methodName;\n  grpcCall.requestId=id;\n  websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 100,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 958,
        "startLineNumber" : 68,
        "startColumnNumber" : 12,
        "endLineNumber" : 86,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (websocketData.callsInProgress.containsKey(id)) {\n  grpcCall=websocketData.callsInProgress.get(id);\n}\n else {\n  Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n  maybeOldCall.ifPresent(call -> {\n    if (call.incomingStream != null) {\n      call.incomingStream.onCompleted();\n    }\n    websocketData.callsInProgress.remove(call.requestId);\n  }\n);\n  grpcCall=new GrpcCallData();\n  grpcCall.serviceName=serviceName;\n  grpcCall.methodName=methodName;\n  grpcCall.requestId=id;\n  websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 117,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 8730,
        "startLineNumber" : 48,
        "startColumnNumber" : 12,
        "endLineNumber" : 194,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  JsonObject grpcRequest=new JsonObject(input);\n  Integer id=grpcRequest.getInteger(\"id\");\n  String serviceName=grpcRequest.getString(\"serviceName\");\n  String methodName=grpcRequest.getString(\"methodName\");\n  if (\"DISCONNECT\".equals(grpcRequest.getString(\"command\"))) {\n    GrpcCallData grpcCall=websocketData.callsInProgress.get(id);\n    if (grpcCall != null && grpcCall.incomingStream != null) {\n      grpcCall.incomingStream.onCompleted();\n    }\n    return;\n  }\n  GrpcCallData grpcCall;\n  if (websocketData.callsInProgress.containsKey(id)) {\n    grpcCall=websocketData.callsInProgress.get(id);\n  }\n else {\n    Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n    maybeOldCall.ifPresent(call -> {\n      if (call.incomingStream != null) {\n        call.incomingStream.onCompleted();\n      }\n      websocketData.callsInProgress.remove(call.requestId);\n    }\n);\n    grpcCall=new GrpcCallData();\n    grpcCall.serviceName=serviceName;\n    grpcCall.methodName=methodName;\n    grpcCall.requestId=id;\n    websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n  }\n  String testJsonData=grpcRequest.getString(\"content\");\n  Object grpcStub=grpcClientStubs.get(serviceName);\n  if (grpcStub == null) {\n    websocketData.responseConsumer.accept(jsonResponse(id,\"NO_STUB\").encode());\n  }\n else {\n    ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n    MethodDescriptor<?,?> methodDescriptor=null;\n    for (    MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n      if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n        methodDescriptor=method;\n      }\n    }\n    if (methodDescriptor == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n    }\n else {\n      Method stubMethod=null;\n      String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n      for (      Method method : grpcStub.getClass().getDeclaredMethods()) {\n        if (method.getName().equals(realMethodName)) {\n          stubMethod=method;\n        }\n      }\n      if (stubMethod == null) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n        log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n      }\n else {\n        MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n        if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n          MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n          Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n          try {\n            Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n            Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n            JsonFormat.parser().merge(testJsonData,builder);\n            Message message=builder.build();\n            if (grpcCall.incomingStream != null) {\n              grpcCall.incomingStream.onNext(message);\n            }\n else {\n              StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n                @Override public void onNext(                Object value){\n                  String body=null;\n                  try {\n                    body=JsonFormat.printer().print((MessageOrBuilder)value);\n                  }\n catch (                  InvalidProtocolBufferException e) {\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                    log.error(\"Failed to transform response to JSON\",e);\n                  }\n                  JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                  reply.put(\"body\",body);\n                  websocketData.responseConsumer.accept(reply.encode());\n                }\n                @Override public void onError(                Throwable t){\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                  grpcCall.incomingStream=null;\n                  log.error(\"Failure returned by gRPC service\",t);\n                }\n                @Override public void onCompleted(){\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                  grpcCall.incomingStream=null;\n                }\n              }\n;\n              if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n                grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n                grpcCall.incomingStream.onNext(message);\n              }\n else {\n                stubMethod.invoke(grpcStub,message,responseObserver);\n              }\n            }\n          }\n catch (          Exception e) {\n            websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n            grpcCall.incomingStream=null;\n            log.error(\"Failure returned by gRPC service\",e);\n          }\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 722,
      "astHeight" : 28
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8824,
        "startLineNumber" : 48,
        "startColumnNumber" : 8,
        "endLineNumber" : 196,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  JsonObject grpcRequest=new JsonObject(input);\n  Integer id=grpcRequest.getInteger(\"id\");\n  String serviceName=grpcRequest.getString(\"serviceName\");\n  String methodName=grpcRequest.getString(\"methodName\");\n  if (\"DISCONNECT\".equals(grpcRequest.getString(\"command\"))) {\n    GrpcCallData grpcCall=websocketData.callsInProgress.get(id);\n    if (grpcCall != null && grpcCall.incomingStream != null) {\n      grpcCall.incomingStream.onCompleted();\n    }\n    return;\n  }\n  GrpcCallData grpcCall;\n  if (websocketData.callsInProgress.containsKey(id)) {\n    grpcCall=websocketData.callsInProgress.get(id);\n  }\n else {\n    Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n    maybeOldCall.ifPresent(call -> {\n      if (call.incomingStream != null) {\n        call.incomingStream.onCompleted();\n      }\n      websocketData.callsInProgress.remove(call.requestId);\n    }\n);\n    grpcCall=new GrpcCallData();\n    grpcCall.serviceName=serviceName;\n    grpcCall.methodName=methodName;\n    grpcCall.requestId=id;\n    websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n  }\n  String testJsonData=grpcRequest.getString(\"content\");\n  Object grpcStub=grpcClientStubs.get(serviceName);\n  if (grpcStub == null) {\n    websocketData.responseConsumer.accept(jsonResponse(id,\"NO_STUB\").encode());\n  }\n else {\n    ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n    MethodDescriptor<?,?> methodDescriptor=null;\n    for (    MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n      if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n        methodDescriptor=method;\n      }\n    }\n    if (methodDescriptor == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n    }\n else {\n      Method stubMethod=null;\n      String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n      for (      Method method : grpcStub.getClass().getDeclaredMethods()) {\n        if (method.getName().equals(realMethodName)) {\n          stubMethod=method;\n        }\n      }\n      if (stubMethod == null) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n        log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n      }\n else {\n        MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n        if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n          MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n          Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n          try {\n            Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n            Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n            JsonFormat.parser().merge(testJsonData,builder);\n            Message message=builder.build();\n            if (grpcCall.incomingStream != null) {\n              grpcCall.incomingStream.onNext(message);\n            }\n else {\n              StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n                @Override public void onNext(                Object value){\n                  String body=null;\n                  try {\n                    body=JsonFormat.printer().print((MessageOrBuilder)value);\n                  }\n catch (                  InvalidProtocolBufferException e) {\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                    log.error(\"Failed to transform response to JSON\",e);\n                  }\n                  JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                  reply.put(\"body\",body);\n                  websocketData.responseConsumer.accept(reply.encode());\n                }\n                @Override public void onError(                Throwable t){\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                  grpcCall.incomingStream=null;\n                  log.error(\"Failure returned by gRPC service\",t);\n                }\n                @Override public void onCompleted(){\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                  grpcCall.incomingStream=null;\n                }\n              }\n;\n              if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n                grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n                grpcCall.incomingStream.onNext(message);\n              }\n else {\n                stubMethod.invoke(grpcStub,message,responseObserver);\n              }\n            }\n          }\n catch (          Exception e) {\n            websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n            grpcCall.incomingStream=null;\n            log.error(\"Failure returned by gRPC service\",e);\n          }\n        }\n      }\n    }\n  }\n}\n  finally {\n  Thread.currentThread().setContextClassLoader(originalCl);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 731,
      "astHeight" : 29
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8998,
        "startLineNumber" : 45,
        "startColumnNumber" : 67,
        "endLineNumber" : 197,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ClassLoader originalCl=Thread.currentThread().getContextClassLoader();\n  Thread.currentThread().setContextClassLoader(deploymentClassLoader);\n  try {\n    JsonObject grpcRequest=new JsonObject(input);\n    Integer id=grpcRequest.getInteger(\"id\");\n    String serviceName=grpcRequest.getString(\"serviceName\");\n    String methodName=grpcRequest.getString(\"methodName\");\n    if (\"DISCONNECT\".equals(grpcRequest.getString(\"command\"))) {\n      GrpcCallData grpcCall=websocketData.callsInProgress.get(id);\n      if (grpcCall != null && grpcCall.incomingStream != null) {\n        grpcCall.incomingStream.onCompleted();\n      }\n      return;\n    }\n    GrpcCallData grpcCall;\n    if (websocketData.callsInProgress.containsKey(id)) {\n      grpcCall=websocketData.callsInProgress.get(id);\n    }\n else {\n      Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n      maybeOldCall.ifPresent(call -> {\n        if (call.incomingStream != null) {\n          call.incomingStream.onCompleted();\n        }\n        websocketData.callsInProgress.remove(call.requestId);\n      }\n);\n      grpcCall=new GrpcCallData();\n      grpcCall.serviceName=serviceName;\n      grpcCall.methodName=methodName;\n      grpcCall.requestId=id;\n      websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n    }\n    String testJsonData=grpcRequest.getString(\"content\");\n    Object grpcStub=grpcClientStubs.get(serviceName);\n    if (grpcStub == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_STUB\").encode());\n    }\n else {\n      ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n      MethodDescriptor<?,?> methodDescriptor=null;\n      for (      MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n        if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n          methodDescriptor=method;\n        }\n      }\n      if (methodDescriptor == null) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n      }\n else {\n        Method stubMethod=null;\n        String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n        for (        Method method : grpcStub.getClass().getDeclaredMethods()) {\n          if (method.getName().equals(realMethodName)) {\n            stubMethod=method;\n          }\n        }\n        if (stubMethod == null) {\n          websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n          log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n        }\n else {\n          MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n          if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n            MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n            Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n            try {\n              Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n              Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n              JsonFormat.parser().merge(testJsonData,builder);\n              Message message=builder.build();\n              if (grpcCall.incomingStream != null) {\n                grpcCall.incomingStream.onNext(message);\n              }\n else {\n                StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n                  @Override public void onNext(                  Object value){\n                    String body=null;\n                    try {\n                      body=JsonFormat.printer().print((MessageOrBuilder)value);\n                    }\n catch (                    InvalidProtocolBufferException e) {\n                      websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                      log.error(\"Failed to transform response to JSON\",e);\n                    }\n                    JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                    reply.put(\"body\",body);\n                    websocketData.responseConsumer.accept(reply.encode());\n                  }\n                  @Override public void onError(                  Throwable t){\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                    grpcCall.incomingStream=null;\n                    log.error(\"Failure returned by gRPC service\",t);\n                  }\n                  @Override public void onCompleted(){\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                    grpcCall.incomingStream=null;\n                  }\n                }\n;\n                if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n                  grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n                  grpcCall.incomingStream.onNext(message);\n                }\n else {\n                  stubMethod.invoke(grpcStub,message,responseObserver);\n                }\n              }\n            }\n catch (            Exception e) {\n              websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n              grpcCall.incomingStream=null;\n              log.error(\"Failure returned by gRPC service\",e);\n            }\n          }\n        }\n      }\n    }\n  }\n  finally {\n    Thread.currentThread().setContextClassLoader(originalCl);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 749,
      "astHeight" : 30
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 9061,
        "startLineNumber" : 45,
        "startColumnNumber" : 4,
        "endLineNumber" : 197,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void handle(String input,WebSocketData websocketData){\n  ClassLoader originalCl=Thread.currentThread().getContextClassLoader();\n  Thread.currentThread().setContextClassLoader(deploymentClassLoader);\n  try {\n    JsonObject grpcRequest=new JsonObject(input);\n    Integer id=grpcRequest.getInteger(\"id\");\n    String serviceName=grpcRequest.getString(\"serviceName\");\n    String methodName=grpcRequest.getString(\"methodName\");\n    if (\"DISCONNECT\".equals(grpcRequest.getString(\"command\"))) {\n      GrpcCallData grpcCall=websocketData.callsInProgress.get(id);\n      if (grpcCall != null && grpcCall.incomingStream != null) {\n        grpcCall.incomingStream.onCompleted();\n      }\n      return;\n    }\n    GrpcCallData grpcCall;\n    if (websocketData.callsInProgress.containsKey(id)) {\n      grpcCall=websocketData.callsInProgress.get(id);\n    }\n else {\n      Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n      maybeOldCall.ifPresent(call -> {\n        if (call.incomingStream != null) {\n          call.incomingStream.onCompleted();\n        }\n        websocketData.callsInProgress.remove(call.requestId);\n      }\n);\n      grpcCall=new GrpcCallData();\n      grpcCall.serviceName=serviceName;\n      grpcCall.methodName=methodName;\n      grpcCall.requestId=id;\n      websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n    }\n    String testJsonData=grpcRequest.getString(\"content\");\n    Object grpcStub=grpcClientStubs.get(serviceName);\n    if (grpcStub == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_STUB\").encode());\n    }\n else {\n      ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n      MethodDescriptor<?,?> methodDescriptor=null;\n      for (      MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n        if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n          methodDescriptor=method;\n        }\n      }\n      if (methodDescriptor == null) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n      }\n else {\n        Method stubMethod=null;\n        String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n        for (        Method method : grpcStub.getClass().getDeclaredMethods()) {\n          if (method.getName().equals(realMethodName)) {\n            stubMethod=method;\n          }\n        }\n        if (stubMethod == null) {\n          websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n          log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n        }\n else {\n          MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n          if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n            MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n            Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n            try {\n              Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n              Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n              JsonFormat.parser().merge(testJsonData,builder);\n              Message message=builder.build();\n              if (grpcCall.incomingStream != null) {\n                grpcCall.incomingStream.onNext(message);\n              }\n else {\n                StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n                  @Override public void onNext(                  Object value){\n                    String body=null;\n                    try {\n                      body=JsonFormat.printer().print((MessageOrBuilder)value);\n                    }\n catch (                    InvalidProtocolBufferException e) {\n                      websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                      log.error(\"Failed to transform response to JSON\",e);\n                    }\n                    JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                    reply.put(\"body\",body);\n                    websocketData.responseConsumer.accept(reply.encode());\n                  }\n                  @Override public void onError(                  Throwable t){\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                    grpcCall.incomingStream=null;\n                    log.error(\"Failure returned by gRPC service\",t);\n                  }\n                  @Override public void onCompleted(){\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                    grpcCall.incomingStream=null;\n                  }\n                }\n;\n                if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n                  grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n                  grpcCall.incomingStream.onNext(message);\n                }\n else {\n                  stubMethod.invoke(grpcStub,message,responseObserver);\n                }\n              }\n            }\n catch (            Exception e) {\n              websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n              grpcCall.incomingStream=null;\n              log.error(\"Failure returned by gRPC service\",e);\n            }\n          }\n        }\n      }\n    }\n  }\n  finally {\n    Thread.currentThread().setContextClassLoader(originalCl);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 761,
      "astHeight" : 31
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 83,
        "startColumnNumber" : 16,
        "endLineNumber" : 83,
        "endColumnNumber" : 49
      },
      "nodeContext" : "grpcCall.methodName=methodName;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "io.quarkus.grpc.deployment.devmode.GrpcDevConsoleWebSocketListener.GrpcCallData"
  }, {
    "nodeContext" : "grpcCall",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 84,
      "startColumnNumber" : 16,
      "endLineNumber" : 84,
      "endColumnNumber" : 24
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 84,
        "startColumnNumber" : 16,
        "endLineNumber" : 84,
        "endColumnNumber" : 34
      },
      "nodeContext" : "grpcCall.requestId",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 84,
        "startColumnNumber" : 16,
        "endLineNumber" : 84,
        "endColumnNumber" : 39
      },
      "nodeContext" : "grpcCall.requestId=id",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 84,
        "startColumnNumber" : 16,
        "endLineNumber" : 84,
        "endColumnNumber" : 40
      },
      "nodeContext" : "grpcCall.requestId=id;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 820,
        "startLineNumber" : 70,
        "startColumnNumber" : 19,
        "endLineNumber" : 86,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n  maybeOldCall.ifPresent(call -> {\n    if (call.incomingStream != null) {\n      call.incomingStream.onCompleted();\n    }\n    websocketData.callsInProgress.remove(call.requestId);\n  }\n);\n  grpcCall=new GrpcCallData();\n  grpcCall.serviceName=serviceName;\n  grpcCall.methodName=methodName;\n  grpcCall.requestId=id;\n  websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 100,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 958,
        "startLineNumber" : 68,
        "startColumnNumber" : 12,
        "endLineNumber" : 86,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (websocketData.callsInProgress.containsKey(id)) {\n  grpcCall=websocketData.callsInProgress.get(id);\n}\n else {\n  Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n  maybeOldCall.ifPresent(call -> {\n    if (call.incomingStream != null) {\n      call.incomingStream.onCompleted();\n    }\n    websocketData.callsInProgress.remove(call.requestId);\n  }\n);\n  grpcCall=new GrpcCallData();\n  grpcCall.serviceName=serviceName;\n  grpcCall.methodName=methodName;\n  grpcCall.requestId=id;\n  websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 117,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 8730,
        "startLineNumber" : 48,
        "startColumnNumber" : 12,
        "endLineNumber" : 194,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  JsonObject grpcRequest=new JsonObject(input);\n  Integer id=grpcRequest.getInteger(\"id\");\n  String serviceName=grpcRequest.getString(\"serviceName\");\n  String methodName=grpcRequest.getString(\"methodName\");\n  if (\"DISCONNECT\".equals(grpcRequest.getString(\"command\"))) {\n    GrpcCallData grpcCall=websocketData.callsInProgress.get(id);\n    if (grpcCall != null && grpcCall.incomingStream != null) {\n      grpcCall.incomingStream.onCompleted();\n    }\n    return;\n  }\n  GrpcCallData grpcCall;\n  if (websocketData.callsInProgress.containsKey(id)) {\n    grpcCall=websocketData.callsInProgress.get(id);\n  }\n else {\n    Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n    maybeOldCall.ifPresent(call -> {\n      if (call.incomingStream != null) {\n        call.incomingStream.onCompleted();\n      }\n      websocketData.callsInProgress.remove(call.requestId);\n    }\n);\n    grpcCall=new GrpcCallData();\n    grpcCall.serviceName=serviceName;\n    grpcCall.methodName=methodName;\n    grpcCall.requestId=id;\n    websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n  }\n  String testJsonData=grpcRequest.getString(\"content\");\n  Object grpcStub=grpcClientStubs.get(serviceName);\n  if (grpcStub == null) {\n    websocketData.responseConsumer.accept(jsonResponse(id,\"NO_STUB\").encode());\n  }\n else {\n    ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n    MethodDescriptor<?,?> methodDescriptor=null;\n    for (    MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n      if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n        methodDescriptor=method;\n      }\n    }\n    if (methodDescriptor == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n    }\n else {\n      Method stubMethod=null;\n      String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n      for (      Method method : grpcStub.getClass().getDeclaredMethods()) {\n        if (method.getName().equals(realMethodName)) {\n          stubMethod=method;\n        }\n      }\n      if (stubMethod == null) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n        log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n      }\n else {\n        MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n        if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n          MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n          Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n          try {\n            Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n            Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n            JsonFormat.parser().merge(testJsonData,builder);\n            Message message=builder.build();\n            if (grpcCall.incomingStream != null) {\n              grpcCall.incomingStream.onNext(message);\n            }\n else {\n              StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n                @Override public void onNext(                Object value){\n                  String body=null;\n                  try {\n                    body=JsonFormat.printer().print((MessageOrBuilder)value);\n                  }\n catch (                  InvalidProtocolBufferException e) {\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                    log.error(\"Failed to transform response to JSON\",e);\n                  }\n                  JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                  reply.put(\"body\",body);\n                  websocketData.responseConsumer.accept(reply.encode());\n                }\n                @Override public void onError(                Throwable t){\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                  grpcCall.incomingStream=null;\n                  log.error(\"Failure returned by gRPC service\",t);\n                }\n                @Override public void onCompleted(){\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                  grpcCall.incomingStream=null;\n                }\n              }\n;\n              if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n                grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n                grpcCall.incomingStream.onNext(message);\n              }\n else {\n                stubMethod.invoke(grpcStub,message,responseObserver);\n              }\n            }\n          }\n catch (          Exception e) {\n            websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n            grpcCall.incomingStream=null;\n            log.error(\"Failure returned by gRPC service\",e);\n          }\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 722,
      "astHeight" : 28
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8824,
        "startLineNumber" : 48,
        "startColumnNumber" : 8,
        "endLineNumber" : 196,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  JsonObject grpcRequest=new JsonObject(input);\n  Integer id=grpcRequest.getInteger(\"id\");\n  String serviceName=grpcRequest.getString(\"serviceName\");\n  String methodName=grpcRequest.getString(\"methodName\");\n  if (\"DISCONNECT\".equals(grpcRequest.getString(\"command\"))) {\n    GrpcCallData grpcCall=websocketData.callsInProgress.get(id);\n    if (grpcCall != null && grpcCall.incomingStream != null) {\n      grpcCall.incomingStream.onCompleted();\n    }\n    return;\n  }\n  GrpcCallData grpcCall;\n  if (websocketData.callsInProgress.containsKey(id)) {\n    grpcCall=websocketData.callsInProgress.get(id);\n  }\n else {\n    Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n    maybeOldCall.ifPresent(call -> {\n      if (call.incomingStream != null) {\n        call.incomingStream.onCompleted();\n      }\n      websocketData.callsInProgress.remove(call.requestId);\n    }\n);\n    grpcCall=new GrpcCallData();\n    grpcCall.serviceName=serviceName;\n    grpcCall.methodName=methodName;\n    grpcCall.requestId=id;\n    websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n  }\n  String testJsonData=grpcRequest.getString(\"content\");\n  Object grpcStub=grpcClientStubs.get(serviceName);\n  if (grpcStub == null) {\n    websocketData.responseConsumer.accept(jsonResponse(id,\"NO_STUB\").encode());\n  }\n else {\n    ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n    MethodDescriptor<?,?> methodDescriptor=null;\n    for (    MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n      if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n        methodDescriptor=method;\n      }\n    }\n    if (methodDescriptor == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n    }\n else {\n      Method stubMethod=null;\n      String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n      for (      Method method : grpcStub.getClass().getDeclaredMethods()) {\n        if (method.getName().equals(realMethodName)) {\n          stubMethod=method;\n        }\n      }\n      if (stubMethod == null) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n        log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n      }\n else {\n        MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n        if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n          MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n          Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n          try {\n            Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n            Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n            JsonFormat.parser().merge(testJsonData,builder);\n            Message message=builder.build();\n            if (grpcCall.incomingStream != null) {\n              grpcCall.incomingStream.onNext(message);\n            }\n else {\n              StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n                @Override public void onNext(                Object value){\n                  String body=null;\n                  try {\n                    body=JsonFormat.printer().print((MessageOrBuilder)value);\n                  }\n catch (                  InvalidProtocolBufferException e) {\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                    log.error(\"Failed to transform response to JSON\",e);\n                  }\n                  JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                  reply.put(\"body\",body);\n                  websocketData.responseConsumer.accept(reply.encode());\n                }\n                @Override public void onError(                Throwable t){\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                  grpcCall.incomingStream=null;\n                  log.error(\"Failure returned by gRPC service\",t);\n                }\n                @Override public void onCompleted(){\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                  grpcCall.incomingStream=null;\n                }\n              }\n;\n              if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n                grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n                grpcCall.incomingStream.onNext(message);\n              }\n else {\n                stubMethod.invoke(grpcStub,message,responseObserver);\n              }\n            }\n          }\n catch (          Exception e) {\n            websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n            grpcCall.incomingStream=null;\n            log.error(\"Failure returned by gRPC service\",e);\n          }\n        }\n      }\n    }\n  }\n}\n  finally {\n  Thread.currentThread().setContextClassLoader(originalCl);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 731,
      "astHeight" : 29
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8998,
        "startLineNumber" : 45,
        "startColumnNumber" : 67,
        "endLineNumber" : 197,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ClassLoader originalCl=Thread.currentThread().getContextClassLoader();\n  Thread.currentThread().setContextClassLoader(deploymentClassLoader);\n  try {\n    JsonObject grpcRequest=new JsonObject(input);\n    Integer id=grpcRequest.getInteger(\"id\");\n    String serviceName=grpcRequest.getString(\"serviceName\");\n    String methodName=grpcRequest.getString(\"methodName\");\n    if (\"DISCONNECT\".equals(grpcRequest.getString(\"command\"))) {\n      GrpcCallData grpcCall=websocketData.callsInProgress.get(id);\n      if (grpcCall != null && grpcCall.incomingStream != null) {\n        grpcCall.incomingStream.onCompleted();\n      }\n      return;\n    }\n    GrpcCallData grpcCall;\n    if (websocketData.callsInProgress.containsKey(id)) {\n      grpcCall=websocketData.callsInProgress.get(id);\n    }\n else {\n      Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n      maybeOldCall.ifPresent(call -> {\n        if (call.incomingStream != null) {\n          call.incomingStream.onCompleted();\n        }\n        websocketData.callsInProgress.remove(call.requestId);\n      }\n);\n      grpcCall=new GrpcCallData();\n      grpcCall.serviceName=serviceName;\n      grpcCall.methodName=methodName;\n      grpcCall.requestId=id;\n      websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n    }\n    String testJsonData=grpcRequest.getString(\"content\");\n    Object grpcStub=grpcClientStubs.get(serviceName);\n    if (grpcStub == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_STUB\").encode());\n    }\n else {\n      ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n      MethodDescriptor<?,?> methodDescriptor=null;\n      for (      MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n        if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n          methodDescriptor=method;\n        }\n      }\n      if (methodDescriptor == null) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n      }\n else {\n        Method stubMethod=null;\n        String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n        for (        Method method : grpcStub.getClass().getDeclaredMethods()) {\n          if (method.getName().equals(realMethodName)) {\n            stubMethod=method;\n          }\n        }\n        if (stubMethod == null) {\n          websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n          log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n        }\n else {\n          MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n          if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n            MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n            Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n            try {\n              Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n              Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n              JsonFormat.parser().merge(testJsonData,builder);\n              Message message=builder.build();\n              if (grpcCall.incomingStream != null) {\n                grpcCall.incomingStream.onNext(message);\n              }\n else {\n                StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n                  @Override public void onNext(                  Object value){\n                    String body=null;\n                    try {\n                      body=JsonFormat.printer().print((MessageOrBuilder)value);\n                    }\n catch (                    InvalidProtocolBufferException e) {\n                      websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                      log.error(\"Failed to transform response to JSON\",e);\n                    }\n                    JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                    reply.put(\"body\",body);\n                    websocketData.responseConsumer.accept(reply.encode());\n                  }\n                  @Override public void onError(                  Throwable t){\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                    grpcCall.incomingStream=null;\n                    log.error(\"Failure returned by gRPC service\",t);\n                  }\n                  @Override public void onCompleted(){\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                    grpcCall.incomingStream=null;\n                  }\n                }\n;\n                if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n                  grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n                  grpcCall.incomingStream.onNext(message);\n                }\n else {\n                  stubMethod.invoke(grpcStub,message,responseObserver);\n                }\n              }\n            }\n catch (            Exception e) {\n              websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n              grpcCall.incomingStream=null;\n              log.error(\"Failure returned by gRPC service\",e);\n            }\n          }\n        }\n      }\n    }\n  }\n  finally {\n    Thread.currentThread().setContextClassLoader(originalCl);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 749,
      "astHeight" : 30
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 9061,
        "startLineNumber" : 45,
        "startColumnNumber" : 4,
        "endLineNumber" : 197,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void handle(String input,WebSocketData websocketData){\n  ClassLoader originalCl=Thread.currentThread().getContextClassLoader();\n  Thread.currentThread().setContextClassLoader(deploymentClassLoader);\n  try {\n    JsonObject grpcRequest=new JsonObject(input);\n    Integer id=grpcRequest.getInteger(\"id\");\n    String serviceName=grpcRequest.getString(\"serviceName\");\n    String methodName=grpcRequest.getString(\"methodName\");\n    if (\"DISCONNECT\".equals(grpcRequest.getString(\"command\"))) {\n      GrpcCallData grpcCall=websocketData.callsInProgress.get(id);\n      if (grpcCall != null && grpcCall.incomingStream != null) {\n        grpcCall.incomingStream.onCompleted();\n      }\n      return;\n    }\n    GrpcCallData grpcCall;\n    if (websocketData.callsInProgress.containsKey(id)) {\n      grpcCall=websocketData.callsInProgress.get(id);\n    }\n else {\n      Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n      maybeOldCall.ifPresent(call -> {\n        if (call.incomingStream != null) {\n          call.incomingStream.onCompleted();\n        }\n        websocketData.callsInProgress.remove(call.requestId);\n      }\n);\n      grpcCall=new GrpcCallData();\n      grpcCall.serviceName=serviceName;\n      grpcCall.methodName=methodName;\n      grpcCall.requestId=id;\n      websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n    }\n    String testJsonData=grpcRequest.getString(\"content\");\n    Object grpcStub=grpcClientStubs.get(serviceName);\n    if (grpcStub == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_STUB\").encode());\n    }\n else {\n      ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n      MethodDescriptor<?,?> methodDescriptor=null;\n      for (      MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n        if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n          methodDescriptor=method;\n        }\n      }\n      if (methodDescriptor == null) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n      }\n else {\n        Method stubMethod=null;\n        String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n        for (        Method method : grpcStub.getClass().getDeclaredMethods()) {\n          if (method.getName().equals(realMethodName)) {\n            stubMethod=method;\n          }\n        }\n        if (stubMethod == null) {\n          websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n          log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n        }\n else {\n          MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n          if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n            MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n            Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n            try {\n              Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n              Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n              JsonFormat.parser().merge(testJsonData,builder);\n              Message message=builder.build();\n              if (grpcCall.incomingStream != null) {\n                grpcCall.incomingStream.onNext(message);\n              }\n else {\n                StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n                  @Override public void onNext(                  Object value){\n                    String body=null;\n                    try {\n                      body=JsonFormat.printer().print((MessageOrBuilder)value);\n                    }\n catch (                    InvalidProtocolBufferException e) {\n                      websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                      log.error(\"Failed to transform response to JSON\",e);\n                    }\n                    JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                    reply.put(\"body\",body);\n                    websocketData.responseConsumer.accept(reply.encode());\n                  }\n                  @Override public void onError(                  Throwable t){\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                    grpcCall.incomingStream=null;\n                    log.error(\"Failure returned by gRPC service\",t);\n                  }\n                  @Override public void onCompleted(){\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                    grpcCall.incomingStream=null;\n                  }\n                }\n;\n                if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n                  grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n                  grpcCall.incomingStream.onNext(message);\n                }\n else {\n                  stubMethod.invoke(grpcStub,message,responseObserver);\n                }\n              }\n            }\n catch (            Exception e) {\n              websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n              grpcCall.incomingStream=null;\n              log.error(\"Failure returned by gRPC service\",e);\n            }\n          }\n        }\n      }\n    }\n  }\n  finally {\n    Thread.currentThread().setContextClassLoader(originalCl);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 761,
      "astHeight" : 31
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 84,
        "startColumnNumber" : 16,
        "endLineNumber" : 84,
        "endColumnNumber" : 40
      },
      "nodeContext" : "grpcCall.requestId=id;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "io.quarkus.grpc.deployment.devmode.GrpcDevConsoleWebSocketListener.GrpcCallData"
  }, {
    "nodeContext" : "grpcCall",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 85,
      "startColumnNumber" : 50,
      "endLineNumber" : 85,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 85,
        "startColumnNumber" : 50,
        "endLineNumber" : 85,
        "endColumnNumber" : 68
      },
      "nodeContext" : "grpcCall.requestId",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 85,
        "startColumnNumber" : 16,
        "endLineNumber" : 85,
        "endColumnNumber" : 79
      },
      "nodeContext" : "websocketData.callsInProgress.put(grpcCall.requestId,grpcCall)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 85,
        "startColumnNumber" : 16,
        "endLineNumber" : 85,
        "endColumnNumber" : 80
      },
      "nodeContext" : "websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 820,
        "startLineNumber" : 70,
        "startColumnNumber" : 19,
        "endLineNumber" : 86,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n  maybeOldCall.ifPresent(call -> {\n    if (call.incomingStream != null) {\n      call.incomingStream.onCompleted();\n    }\n    websocketData.callsInProgress.remove(call.requestId);\n  }\n);\n  grpcCall=new GrpcCallData();\n  grpcCall.serviceName=serviceName;\n  grpcCall.methodName=methodName;\n  grpcCall.requestId=id;\n  websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 100,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 958,
        "startLineNumber" : 68,
        "startColumnNumber" : 12,
        "endLineNumber" : 86,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (websocketData.callsInProgress.containsKey(id)) {\n  grpcCall=websocketData.callsInProgress.get(id);\n}\n else {\n  Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n  maybeOldCall.ifPresent(call -> {\n    if (call.incomingStream != null) {\n      call.incomingStream.onCompleted();\n    }\n    websocketData.callsInProgress.remove(call.requestId);\n  }\n);\n  grpcCall=new GrpcCallData();\n  grpcCall.serviceName=serviceName;\n  grpcCall.methodName=methodName;\n  grpcCall.requestId=id;\n  websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 117,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 8730,
        "startLineNumber" : 48,
        "startColumnNumber" : 12,
        "endLineNumber" : 194,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  JsonObject grpcRequest=new JsonObject(input);\n  Integer id=grpcRequest.getInteger(\"id\");\n  String serviceName=grpcRequest.getString(\"serviceName\");\n  String methodName=grpcRequest.getString(\"methodName\");\n  if (\"DISCONNECT\".equals(grpcRequest.getString(\"command\"))) {\n    GrpcCallData grpcCall=websocketData.callsInProgress.get(id);\n    if (grpcCall != null && grpcCall.incomingStream != null) {\n      grpcCall.incomingStream.onCompleted();\n    }\n    return;\n  }\n  GrpcCallData grpcCall;\n  if (websocketData.callsInProgress.containsKey(id)) {\n    grpcCall=websocketData.callsInProgress.get(id);\n  }\n else {\n    Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n    maybeOldCall.ifPresent(call -> {\n      if (call.incomingStream != null) {\n        call.incomingStream.onCompleted();\n      }\n      websocketData.callsInProgress.remove(call.requestId);\n    }\n);\n    grpcCall=new GrpcCallData();\n    grpcCall.serviceName=serviceName;\n    grpcCall.methodName=methodName;\n    grpcCall.requestId=id;\n    websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n  }\n  String testJsonData=grpcRequest.getString(\"content\");\n  Object grpcStub=grpcClientStubs.get(serviceName);\n  if (grpcStub == null) {\n    websocketData.responseConsumer.accept(jsonResponse(id,\"NO_STUB\").encode());\n  }\n else {\n    ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n    MethodDescriptor<?,?> methodDescriptor=null;\n    for (    MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n      if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n        methodDescriptor=method;\n      }\n    }\n    if (methodDescriptor == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n    }\n else {\n      Method stubMethod=null;\n      String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n      for (      Method method : grpcStub.getClass().getDeclaredMethods()) {\n        if (method.getName().equals(realMethodName)) {\n          stubMethod=method;\n        }\n      }\n      if (stubMethod == null) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n        log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n      }\n else {\n        MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n        if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n          MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n          Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n          try {\n            Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n            Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n            JsonFormat.parser().merge(testJsonData,builder);\n            Message message=builder.build();\n            if (grpcCall.incomingStream != null) {\n              grpcCall.incomingStream.onNext(message);\n            }\n else {\n              StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n                @Override public void onNext(                Object value){\n                  String body=null;\n                  try {\n                    body=JsonFormat.printer().print((MessageOrBuilder)value);\n                  }\n catch (                  InvalidProtocolBufferException e) {\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                    log.error(\"Failed to transform response to JSON\",e);\n                  }\n                  JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                  reply.put(\"body\",body);\n                  websocketData.responseConsumer.accept(reply.encode());\n                }\n                @Override public void onError(                Throwable t){\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                  grpcCall.incomingStream=null;\n                  log.error(\"Failure returned by gRPC service\",t);\n                }\n                @Override public void onCompleted(){\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                  grpcCall.incomingStream=null;\n                }\n              }\n;\n              if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n                grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n                grpcCall.incomingStream.onNext(message);\n              }\n else {\n                stubMethod.invoke(grpcStub,message,responseObserver);\n              }\n            }\n          }\n catch (          Exception e) {\n            websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n            grpcCall.incomingStream=null;\n            log.error(\"Failure returned by gRPC service\",e);\n          }\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 722,
      "astHeight" : 28
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8824,
        "startLineNumber" : 48,
        "startColumnNumber" : 8,
        "endLineNumber" : 196,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  JsonObject grpcRequest=new JsonObject(input);\n  Integer id=grpcRequest.getInteger(\"id\");\n  String serviceName=grpcRequest.getString(\"serviceName\");\n  String methodName=grpcRequest.getString(\"methodName\");\n  if (\"DISCONNECT\".equals(grpcRequest.getString(\"command\"))) {\n    GrpcCallData grpcCall=websocketData.callsInProgress.get(id);\n    if (grpcCall != null && grpcCall.incomingStream != null) {\n      grpcCall.incomingStream.onCompleted();\n    }\n    return;\n  }\n  GrpcCallData grpcCall;\n  if (websocketData.callsInProgress.containsKey(id)) {\n    grpcCall=websocketData.callsInProgress.get(id);\n  }\n else {\n    Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n    maybeOldCall.ifPresent(call -> {\n      if (call.incomingStream != null) {\n        call.incomingStream.onCompleted();\n      }\n      websocketData.callsInProgress.remove(call.requestId);\n    }\n);\n    grpcCall=new GrpcCallData();\n    grpcCall.serviceName=serviceName;\n    grpcCall.methodName=methodName;\n    grpcCall.requestId=id;\n    websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n  }\n  String testJsonData=grpcRequest.getString(\"content\");\n  Object grpcStub=grpcClientStubs.get(serviceName);\n  if (grpcStub == null) {\n    websocketData.responseConsumer.accept(jsonResponse(id,\"NO_STUB\").encode());\n  }\n else {\n    ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n    MethodDescriptor<?,?> methodDescriptor=null;\n    for (    MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n      if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n        methodDescriptor=method;\n      }\n    }\n    if (methodDescriptor == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n    }\n else {\n      Method stubMethod=null;\n      String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n      for (      Method method : grpcStub.getClass().getDeclaredMethods()) {\n        if (method.getName().equals(realMethodName)) {\n          stubMethod=method;\n        }\n      }\n      if (stubMethod == null) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n        log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n      }\n else {\n        MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n        if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n          MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n          Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n          try {\n            Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n            Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n            JsonFormat.parser().merge(testJsonData,builder);\n            Message message=builder.build();\n            if (grpcCall.incomingStream != null) {\n              grpcCall.incomingStream.onNext(message);\n            }\n else {\n              StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n                @Override public void onNext(                Object value){\n                  String body=null;\n                  try {\n                    body=JsonFormat.printer().print((MessageOrBuilder)value);\n                  }\n catch (                  InvalidProtocolBufferException e) {\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                    log.error(\"Failed to transform response to JSON\",e);\n                  }\n                  JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                  reply.put(\"body\",body);\n                  websocketData.responseConsumer.accept(reply.encode());\n                }\n                @Override public void onError(                Throwable t){\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                  grpcCall.incomingStream=null;\n                  log.error(\"Failure returned by gRPC service\",t);\n                }\n                @Override public void onCompleted(){\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                  grpcCall.incomingStream=null;\n                }\n              }\n;\n              if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n                grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n                grpcCall.incomingStream.onNext(message);\n              }\n else {\n                stubMethod.invoke(grpcStub,message,responseObserver);\n              }\n            }\n          }\n catch (          Exception e) {\n            websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n            grpcCall.incomingStream=null;\n            log.error(\"Failure returned by gRPC service\",e);\n          }\n        }\n      }\n    }\n  }\n}\n  finally {\n  Thread.currentThread().setContextClassLoader(originalCl);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 731,
      "astHeight" : 29
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8998,
        "startLineNumber" : 45,
        "startColumnNumber" : 67,
        "endLineNumber" : 197,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ClassLoader originalCl=Thread.currentThread().getContextClassLoader();\n  Thread.currentThread().setContextClassLoader(deploymentClassLoader);\n  try {\n    JsonObject grpcRequest=new JsonObject(input);\n    Integer id=grpcRequest.getInteger(\"id\");\n    String serviceName=grpcRequest.getString(\"serviceName\");\n    String methodName=grpcRequest.getString(\"methodName\");\n    if (\"DISCONNECT\".equals(grpcRequest.getString(\"command\"))) {\n      GrpcCallData grpcCall=websocketData.callsInProgress.get(id);\n      if (grpcCall != null && grpcCall.incomingStream != null) {\n        grpcCall.incomingStream.onCompleted();\n      }\n      return;\n    }\n    GrpcCallData grpcCall;\n    if (websocketData.callsInProgress.containsKey(id)) {\n      grpcCall=websocketData.callsInProgress.get(id);\n    }\n else {\n      Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n      maybeOldCall.ifPresent(call -> {\n        if (call.incomingStream != null) {\n          call.incomingStream.onCompleted();\n        }\n        websocketData.callsInProgress.remove(call.requestId);\n      }\n);\n      grpcCall=new GrpcCallData();\n      grpcCall.serviceName=serviceName;\n      grpcCall.methodName=methodName;\n      grpcCall.requestId=id;\n      websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n    }\n    String testJsonData=grpcRequest.getString(\"content\");\n    Object grpcStub=grpcClientStubs.get(serviceName);\n    if (grpcStub == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_STUB\").encode());\n    }\n else {\n      ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n      MethodDescriptor<?,?> methodDescriptor=null;\n      for (      MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n        if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n          methodDescriptor=method;\n        }\n      }\n      if (methodDescriptor == null) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n      }\n else {\n        Method stubMethod=null;\n        String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n        for (        Method method : grpcStub.getClass().getDeclaredMethods()) {\n          if (method.getName().equals(realMethodName)) {\n            stubMethod=method;\n          }\n        }\n        if (stubMethod == null) {\n          websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n          log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n        }\n else {\n          MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n          if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n            MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n            Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n            try {\n              Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n              Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n              JsonFormat.parser().merge(testJsonData,builder);\n              Message message=builder.build();\n              if (grpcCall.incomingStream != null) {\n                grpcCall.incomingStream.onNext(message);\n              }\n else {\n                StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n                  @Override public void onNext(                  Object value){\n                    String body=null;\n                    try {\n                      body=JsonFormat.printer().print((MessageOrBuilder)value);\n                    }\n catch (                    InvalidProtocolBufferException e) {\n                      websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                      log.error(\"Failed to transform response to JSON\",e);\n                    }\n                    JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                    reply.put(\"body\",body);\n                    websocketData.responseConsumer.accept(reply.encode());\n                  }\n                  @Override public void onError(                  Throwable t){\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                    grpcCall.incomingStream=null;\n                    log.error(\"Failure returned by gRPC service\",t);\n                  }\n                  @Override public void onCompleted(){\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                    grpcCall.incomingStream=null;\n                  }\n                }\n;\n                if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n                  grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n                  grpcCall.incomingStream.onNext(message);\n                }\n else {\n                  stubMethod.invoke(grpcStub,message,responseObserver);\n                }\n              }\n            }\n catch (            Exception e) {\n              websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n              grpcCall.incomingStream=null;\n              log.error(\"Failure returned by gRPC service\",e);\n            }\n          }\n        }\n      }\n    }\n  }\n  finally {\n    Thread.currentThread().setContextClassLoader(originalCl);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 749,
      "astHeight" : 30
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 9061,
        "startLineNumber" : 45,
        "startColumnNumber" : 4,
        "endLineNumber" : 197,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void handle(String input,WebSocketData websocketData){\n  ClassLoader originalCl=Thread.currentThread().getContextClassLoader();\n  Thread.currentThread().setContextClassLoader(deploymentClassLoader);\n  try {\n    JsonObject grpcRequest=new JsonObject(input);\n    Integer id=grpcRequest.getInteger(\"id\");\n    String serviceName=grpcRequest.getString(\"serviceName\");\n    String methodName=grpcRequest.getString(\"methodName\");\n    if (\"DISCONNECT\".equals(grpcRequest.getString(\"command\"))) {\n      GrpcCallData grpcCall=websocketData.callsInProgress.get(id);\n      if (grpcCall != null && grpcCall.incomingStream != null) {\n        grpcCall.incomingStream.onCompleted();\n      }\n      return;\n    }\n    GrpcCallData grpcCall;\n    if (websocketData.callsInProgress.containsKey(id)) {\n      grpcCall=websocketData.callsInProgress.get(id);\n    }\n else {\n      Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n      maybeOldCall.ifPresent(call -> {\n        if (call.incomingStream != null) {\n          call.incomingStream.onCompleted();\n        }\n        websocketData.callsInProgress.remove(call.requestId);\n      }\n);\n      grpcCall=new GrpcCallData();\n      grpcCall.serviceName=serviceName;\n      grpcCall.methodName=methodName;\n      grpcCall.requestId=id;\n      websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n    }\n    String testJsonData=grpcRequest.getString(\"content\");\n    Object grpcStub=grpcClientStubs.get(serviceName);\n    if (grpcStub == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_STUB\").encode());\n    }\n else {\n      ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n      MethodDescriptor<?,?> methodDescriptor=null;\n      for (      MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n        if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n          methodDescriptor=method;\n        }\n      }\n      if (methodDescriptor == null) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n      }\n else {\n        Method stubMethod=null;\n        String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n        for (        Method method : grpcStub.getClass().getDeclaredMethods()) {\n          if (method.getName().equals(realMethodName)) {\n            stubMethod=method;\n          }\n        }\n        if (stubMethod == null) {\n          websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n          log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n        }\n else {\n          MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n          if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n            MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n            Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n            try {\n              Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n              Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n              JsonFormat.parser().merge(testJsonData,builder);\n              Message message=builder.build();\n              if (grpcCall.incomingStream != null) {\n                grpcCall.incomingStream.onNext(message);\n              }\n else {\n                StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n                  @Override public void onNext(                  Object value){\n                    String body=null;\n                    try {\n                      body=JsonFormat.printer().print((MessageOrBuilder)value);\n                    }\n catch (                    InvalidProtocolBufferException e) {\n                      websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                      log.error(\"Failed to transform response to JSON\",e);\n                    }\n                    JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                    reply.put(\"body\",body);\n                    websocketData.responseConsumer.accept(reply.encode());\n                  }\n                  @Override public void onError(                  Throwable t){\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                    grpcCall.incomingStream=null;\n                    log.error(\"Failure returned by gRPC service\",t);\n                  }\n                  @Override public void onCompleted(){\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                    grpcCall.incomingStream=null;\n                  }\n                }\n;\n                if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n                  grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n                  grpcCall.incomingStream.onNext(message);\n                }\n else {\n                  stubMethod.invoke(grpcStub,message,responseObserver);\n                }\n              }\n            }\n catch (            Exception e) {\n              websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n              grpcCall.incomingStream=null;\n              log.error(\"Failure returned by gRPC service\",e);\n            }\n          }\n        }\n      }\n    }\n  }\n  finally {\n    Thread.currentThread().setContextClassLoader(originalCl);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 761,
      "astHeight" : 31
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 85,
        "startColumnNumber" : 16,
        "endLineNumber" : 85,
        "endColumnNumber" : 80
      },
      "nodeContext" : "websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "io.quarkus.grpc.deployment.devmode.GrpcDevConsoleWebSocketListener.GrpcCallData"
  }, {
    "nodeContext" : "grpcCall",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 85,
      "startColumnNumber" : 70,
      "endLineNumber" : 85,
      "endColumnNumber" : 78
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 85,
        "startColumnNumber" : 16,
        "endLineNumber" : 85,
        "endColumnNumber" : 79
      },
      "nodeContext" : "websocketData.callsInProgress.put(grpcCall.requestId,grpcCall)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 85,
        "startColumnNumber" : 16,
        "endLineNumber" : 85,
        "endColumnNumber" : 80
      },
      "nodeContext" : "websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 820,
        "startLineNumber" : 70,
        "startColumnNumber" : 19,
        "endLineNumber" : 86,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n  maybeOldCall.ifPresent(call -> {\n    if (call.incomingStream != null) {\n      call.incomingStream.onCompleted();\n    }\n    websocketData.callsInProgress.remove(call.requestId);\n  }\n);\n  grpcCall=new GrpcCallData();\n  grpcCall.serviceName=serviceName;\n  grpcCall.methodName=methodName;\n  grpcCall.requestId=id;\n  websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 100,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 958,
        "startLineNumber" : 68,
        "startColumnNumber" : 12,
        "endLineNumber" : 86,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (websocketData.callsInProgress.containsKey(id)) {\n  grpcCall=websocketData.callsInProgress.get(id);\n}\n else {\n  Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n  maybeOldCall.ifPresent(call -> {\n    if (call.incomingStream != null) {\n      call.incomingStream.onCompleted();\n    }\n    websocketData.callsInProgress.remove(call.requestId);\n  }\n);\n  grpcCall=new GrpcCallData();\n  grpcCall.serviceName=serviceName;\n  grpcCall.methodName=methodName;\n  grpcCall.requestId=id;\n  websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 117,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 8730,
        "startLineNumber" : 48,
        "startColumnNumber" : 12,
        "endLineNumber" : 194,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  JsonObject grpcRequest=new JsonObject(input);\n  Integer id=grpcRequest.getInteger(\"id\");\n  String serviceName=grpcRequest.getString(\"serviceName\");\n  String methodName=grpcRequest.getString(\"methodName\");\n  if (\"DISCONNECT\".equals(grpcRequest.getString(\"command\"))) {\n    GrpcCallData grpcCall=websocketData.callsInProgress.get(id);\n    if (grpcCall != null && grpcCall.incomingStream != null) {\n      grpcCall.incomingStream.onCompleted();\n    }\n    return;\n  }\n  GrpcCallData grpcCall;\n  if (websocketData.callsInProgress.containsKey(id)) {\n    grpcCall=websocketData.callsInProgress.get(id);\n  }\n else {\n    Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n    maybeOldCall.ifPresent(call -> {\n      if (call.incomingStream != null) {\n        call.incomingStream.onCompleted();\n      }\n      websocketData.callsInProgress.remove(call.requestId);\n    }\n);\n    grpcCall=new GrpcCallData();\n    grpcCall.serviceName=serviceName;\n    grpcCall.methodName=methodName;\n    grpcCall.requestId=id;\n    websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n  }\n  String testJsonData=grpcRequest.getString(\"content\");\n  Object grpcStub=grpcClientStubs.get(serviceName);\n  if (grpcStub == null) {\n    websocketData.responseConsumer.accept(jsonResponse(id,\"NO_STUB\").encode());\n  }\n else {\n    ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n    MethodDescriptor<?,?> methodDescriptor=null;\n    for (    MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n      if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n        methodDescriptor=method;\n      }\n    }\n    if (methodDescriptor == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n    }\n else {\n      Method stubMethod=null;\n      String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n      for (      Method method : grpcStub.getClass().getDeclaredMethods()) {\n        if (method.getName().equals(realMethodName)) {\n          stubMethod=method;\n        }\n      }\n      if (stubMethod == null) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n        log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n      }\n else {\n        MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n        if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n          MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n          Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n          try {\n            Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n            Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n            JsonFormat.parser().merge(testJsonData,builder);\n            Message message=builder.build();\n            if (grpcCall.incomingStream != null) {\n              grpcCall.incomingStream.onNext(message);\n            }\n else {\n              StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n                @Override public void onNext(                Object value){\n                  String body=null;\n                  try {\n                    body=JsonFormat.printer().print((MessageOrBuilder)value);\n                  }\n catch (                  InvalidProtocolBufferException e) {\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                    log.error(\"Failed to transform response to JSON\",e);\n                  }\n                  JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                  reply.put(\"body\",body);\n                  websocketData.responseConsumer.accept(reply.encode());\n                }\n                @Override public void onError(                Throwable t){\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                  grpcCall.incomingStream=null;\n                  log.error(\"Failure returned by gRPC service\",t);\n                }\n                @Override public void onCompleted(){\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                  grpcCall.incomingStream=null;\n                }\n              }\n;\n              if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n                grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n                grpcCall.incomingStream.onNext(message);\n              }\n else {\n                stubMethod.invoke(grpcStub,message,responseObserver);\n              }\n            }\n          }\n catch (          Exception e) {\n            websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n            grpcCall.incomingStream=null;\n            log.error(\"Failure returned by gRPC service\",e);\n          }\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 722,
      "astHeight" : 28
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8824,
        "startLineNumber" : 48,
        "startColumnNumber" : 8,
        "endLineNumber" : 196,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  JsonObject grpcRequest=new JsonObject(input);\n  Integer id=grpcRequest.getInteger(\"id\");\n  String serviceName=grpcRequest.getString(\"serviceName\");\n  String methodName=grpcRequest.getString(\"methodName\");\n  if (\"DISCONNECT\".equals(grpcRequest.getString(\"command\"))) {\n    GrpcCallData grpcCall=websocketData.callsInProgress.get(id);\n    if (grpcCall != null && grpcCall.incomingStream != null) {\n      grpcCall.incomingStream.onCompleted();\n    }\n    return;\n  }\n  GrpcCallData grpcCall;\n  if (websocketData.callsInProgress.containsKey(id)) {\n    grpcCall=websocketData.callsInProgress.get(id);\n  }\n else {\n    Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n    maybeOldCall.ifPresent(call -> {\n      if (call.incomingStream != null) {\n        call.incomingStream.onCompleted();\n      }\n      websocketData.callsInProgress.remove(call.requestId);\n    }\n);\n    grpcCall=new GrpcCallData();\n    grpcCall.serviceName=serviceName;\n    grpcCall.methodName=methodName;\n    grpcCall.requestId=id;\n    websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n  }\n  String testJsonData=grpcRequest.getString(\"content\");\n  Object grpcStub=grpcClientStubs.get(serviceName);\n  if (grpcStub == null) {\n    websocketData.responseConsumer.accept(jsonResponse(id,\"NO_STUB\").encode());\n  }\n else {\n    ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n    MethodDescriptor<?,?> methodDescriptor=null;\n    for (    MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n      if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n        methodDescriptor=method;\n      }\n    }\n    if (methodDescriptor == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n    }\n else {\n      Method stubMethod=null;\n      String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n      for (      Method method : grpcStub.getClass().getDeclaredMethods()) {\n        if (method.getName().equals(realMethodName)) {\n          stubMethod=method;\n        }\n      }\n      if (stubMethod == null) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n        log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n      }\n else {\n        MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n        if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n          MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n          Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n          try {\n            Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n            Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n            JsonFormat.parser().merge(testJsonData,builder);\n            Message message=builder.build();\n            if (grpcCall.incomingStream != null) {\n              grpcCall.incomingStream.onNext(message);\n            }\n else {\n              StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n                @Override public void onNext(                Object value){\n                  String body=null;\n                  try {\n                    body=JsonFormat.printer().print((MessageOrBuilder)value);\n                  }\n catch (                  InvalidProtocolBufferException e) {\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                    log.error(\"Failed to transform response to JSON\",e);\n                  }\n                  JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                  reply.put(\"body\",body);\n                  websocketData.responseConsumer.accept(reply.encode());\n                }\n                @Override public void onError(                Throwable t){\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                  grpcCall.incomingStream=null;\n                  log.error(\"Failure returned by gRPC service\",t);\n                }\n                @Override public void onCompleted(){\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                  grpcCall.incomingStream=null;\n                }\n              }\n;\n              if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n                grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n                grpcCall.incomingStream.onNext(message);\n              }\n else {\n                stubMethod.invoke(grpcStub,message,responseObserver);\n              }\n            }\n          }\n catch (          Exception e) {\n            websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n            grpcCall.incomingStream=null;\n            log.error(\"Failure returned by gRPC service\",e);\n          }\n        }\n      }\n    }\n  }\n}\n  finally {\n  Thread.currentThread().setContextClassLoader(originalCl);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 731,
      "astHeight" : 29
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8998,
        "startLineNumber" : 45,
        "startColumnNumber" : 67,
        "endLineNumber" : 197,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ClassLoader originalCl=Thread.currentThread().getContextClassLoader();\n  Thread.currentThread().setContextClassLoader(deploymentClassLoader);\n  try {\n    JsonObject grpcRequest=new JsonObject(input);\n    Integer id=grpcRequest.getInteger(\"id\");\n    String serviceName=grpcRequest.getString(\"serviceName\");\n    String methodName=grpcRequest.getString(\"methodName\");\n    if (\"DISCONNECT\".equals(grpcRequest.getString(\"command\"))) {\n      GrpcCallData grpcCall=websocketData.callsInProgress.get(id);\n      if (grpcCall != null && grpcCall.incomingStream != null) {\n        grpcCall.incomingStream.onCompleted();\n      }\n      return;\n    }\n    GrpcCallData grpcCall;\n    if (websocketData.callsInProgress.containsKey(id)) {\n      grpcCall=websocketData.callsInProgress.get(id);\n    }\n else {\n      Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n      maybeOldCall.ifPresent(call -> {\n        if (call.incomingStream != null) {\n          call.incomingStream.onCompleted();\n        }\n        websocketData.callsInProgress.remove(call.requestId);\n      }\n);\n      grpcCall=new GrpcCallData();\n      grpcCall.serviceName=serviceName;\n      grpcCall.methodName=methodName;\n      grpcCall.requestId=id;\n      websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n    }\n    String testJsonData=grpcRequest.getString(\"content\");\n    Object grpcStub=grpcClientStubs.get(serviceName);\n    if (grpcStub == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_STUB\").encode());\n    }\n else {\n      ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n      MethodDescriptor<?,?> methodDescriptor=null;\n      for (      MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n        if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n          methodDescriptor=method;\n        }\n      }\n      if (methodDescriptor == null) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n      }\n else {\n        Method stubMethod=null;\n        String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n        for (        Method method : grpcStub.getClass().getDeclaredMethods()) {\n          if (method.getName().equals(realMethodName)) {\n            stubMethod=method;\n          }\n        }\n        if (stubMethod == null) {\n          websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n          log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n        }\n else {\n          MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n          if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n            MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n            Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n            try {\n              Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n              Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n              JsonFormat.parser().merge(testJsonData,builder);\n              Message message=builder.build();\n              if (grpcCall.incomingStream != null) {\n                grpcCall.incomingStream.onNext(message);\n              }\n else {\n                StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n                  @Override public void onNext(                  Object value){\n                    String body=null;\n                    try {\n                      body=JsonFormat.printer().print((MessageOrBuilder)value);\n                    }\n catch (                    InvalidProtocolBufferException e) {\n                      websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                      log.error(\"Failed to transform response to JSON\",e);\n                    }\n                    JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                    reply.put(\"body\",body);\n                    websocketData.responseConsumer.accept(reply.encode());\n                  }\n                  @Override public void onError(                  Throwable t){\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                    grpcCall.incomingStream=null;\n                    log.error(\"Failure returned by gRPC service\",t);\n                  }\n                  @Override public void onCompleted(){\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                    grpcCall.incomingStream=null;\n                  }\n                }\n;\n                if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n                  grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n                  grpcCall.incomingStream.onNext(message);\n                }\n else {\n                  stubMethod.invoke(grpcStub,message,responseObserver);\n                }\n              }\n            }\n catch (            Exception e) {\n              websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n              grpcCall.incomingStream=null;\n              log.error(\"Failure returned by gRPC service\",e);\n            }\n          }\n        }\n      }\n    }\n  }\n  finally {\n    Thread.currentThread().setContextClassLoader(originalCl);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 749,
      "astHeight" : 30
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 9061,
        "startLineNumber" : 45,
        "startColumnNumber" : 4,
        "endLineNumber" : 197,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void handle(String input,WebSocketData websocketData){\n  ClassLoader originalCl=Thread.currentThread().getContextClassLoader();\n  Thread.currentThread().setContextClassLoader(deploymentClassLoader);\n  try {\n    JsonObject grpcRequest=new JsonObject(input);\n    Integer id=grpcRequest.getInteger(\"id\");\n    String serviceName=grpcRequest.getString(\"serviceName\");\n    String methodName=grpcRequest.getString(\"methodName\");\n    if (\"DISCONNECT\".equals(grpcRequest.getString(\"command\"))) {\n      GrpcCallData grpcCall=websocketData.callsInProgress.get(id);\n      if (grpcCall != null && grpcCall.incomingStream != null) {\n        grpcCall.incomingStream.onCompleted();\n      }\n      return;\n    }\n    GrpcCallData grpcCall;\n    if (websocketData.callsInProgress.containsKey(id)) {\n      grpcCall=websocketData.callsInProgress.get(id);\n    }\n else {\n      Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n      maybeOldCall.ifPresent(call -> {\n        if (call.incomingStream != null) {\n          call.incomingStream.onCompleted();\n        }\n        websocketData.callsInProgress.remove(call.requestId);\n      }\n);\n      grpcCall=new GrpcCallData();\n      grpcCall.serviceName=serviceName;\n      grpcCall.methodName=methodName;\n      grpcCall.requestId=id;\n      websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n    }\n    String testJsonData=grpcRequest.getString(\"content\");\n    Object grpcStub=grpcClientStubs.get(serviceName);\n    if (grpcStub == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_STUB\").encode());\n    }\n else {\n      ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n      MethodDescriptor<?,?> methodDescriptor=null;\n      for (      MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n        if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n          methodDescriptor=method;\n        }\n      }\n      if (methodDescriptor == null) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n      }\n else {\n        Method stubMethod=null;\n        String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n        for (        Method method : grpcStub.getClass().getDeclaredMethods()) {\n          if (method.getName().equals(realMethodName)) {\n            stubMethod=method;\n          }\n        }\n        if (stubMethod == null) {\n          websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n          log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n        }\n else {\n          MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n          if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n            MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n            Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n            try {\n              Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n              Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n              JsonFormat.parser().merge(testJsonData,builder);\n              Message message=builder.build();\n              if (grpcCall.incomingStream != null) {\n                grpcCall.incomingStream.onNext(message);\n              }\n else {\n                StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n                  @Override public void onNext(                  Object value){\n                    String body=null;\n                    try {\n                      body=JsonFormat.printer().print((MessageOrBuilder)value);\n                    }\n catch (                    InvalidProtocolBufferException e) {\n                      websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                      log.error(\"Failed to transform response to JSON\",e);\n                    }\n                    JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                    reply.put(\"body\",body);\n                    websocketData.responseConsumer.accept(reply.encode());\n                  }\n                  @Override public void onError(                  Throwable t){\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                    grpcCall.incomingStream=null;\n                    log.error(\"Failure returned by gRPC service\",t);\n                  }\n                  @Override public void onCompleted(){\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                    grpcCall.incomingStream=null;\n                  }\n                }\n;\n                if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n                  grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n                  grpcCall.incomingStream.onNext(message);\n                }\n else {\n                  stubMethod.invoke(grpcStub,message,responseObserver);\n                }\n              }\n            }\n catch (            Exception e) {\n              websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n              grpcCall.incomingStream=null;\n              log.error(\"Failure returned by gRPC service\",e);\n            }\n          }\n        }\n      }\n    }\n  }\n  finally {\n    Thread.currentThread().setContextClassLoader(originalCl);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 761,
      "astHeight" : 31
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 85,
        "startColumnNumber" : 16,
        "endLineNumber" : 85,
        "endColumnNumber" : 80
      },
      "nodeContext" : "websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "io.quarkus.grpc.deployment.devmode.GrpcDevConsoleWebSocketListener.GrpcCallData"
  }, {
    "nodeContext" : "grpcCall",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 133,
      "startColumnNumber" : 36,
      "endLineNumber" : 133,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 133,
        "startColumnNumber" : 36,
        "endLineNumber" : 133,
        "endColumnNumber" : 59
      },
      "nodeContext" : "grpcCall.incomingStream",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 133,
        "startColumnNumber" : 36,
        "endLineNumber" : 133,
        "endColumnNumber" : 67
      },
      "nodeContext" : "grpcCall.incomingStream != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3494,
        "startLineNumber" : 133,
        "startColumnNumber" : 32,
        "endLineNumber" : 181,
        "endColumnNumber" : 33
      },
      "nodeContext" : "if (grpcCall.incomingStream != null) {\n  grpcCall.incomingStream.onNext(message);\n}\n else {\n  StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n    @Override public void onNext(    Object value){\n      String body=null;\n      try {\n        body=JsonFormat.printer().print((MessageOrBuilder)value);\n      }\n catch (      InvalidProtocolBufferException e) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n        log.error(\"Failed to transform response to JSON\",e);\n      }\n      JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n      reply.put(\"body\",body);\n      websocketData.responseConsumer.accept(reply.encode());\n    }\n    @Override public void onError(    Throwable t){\n      websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n      grpcCall.incomingStream=null;\n      log.error(\"Failure returned by gRPC service\",t);\n    }\n    @Override public void onCompleted(){\n      websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n      grpcCall.incomingStream=null;\n    }\n  }\n;\n  if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n    grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n    grpcCall.incomingStream.onNext(message);\n  }\n else {\n    stubMethod.invoke(grpcStub,message,responseObserver);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 226,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4112,
        "startLineNumber" : 124,
        "startColumnNumber" : 32,
        "endLineNumber" : 182,
        "endColumnNumber" : 29
      },
      "nodeContext" : "{\n  Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n  Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n  JsonFormat.parser().merge(testJsonData,builder);\n  Message message=builder.build();\n  if (grpcCall.incomingStream != null) {\n    grpcCall.incomingStream.onNext(message);\n  }\n else {\n    StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n      @Override public void onNext(      Object value){\n        String body=null;\n        try {\n          body=JsonFormat.printer().print((MessageOrBuilder)value);\n        }\n catch (        InvalidProtocolBufferException e) {\n          websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n          log.error(\"Failed to transform response to JSON\",e);\n        }\n        JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n        reply.put(\"body\",body);\n        websocketData.responseConsumer.accept(reply.encode());\n      }\n      @Override public void onError(      Throwable t){\n        websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n        grpcCall.incomingStream=null;\n        log.error(\"Failure returned by gRPC service\",t);\n      }\n      @Override public void onCompleted(){\n        websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n        grpcCall.incomingStream=null;\n      }\n    }\n;\n    if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n      grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n      grpcCall.incomingStream.onNext(message);\n    }\n else {\n      stubMethod.invoke(grpcStub,message,responseObserver);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 268,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4632,
        "startLineNumber" : 124,
        "startColumnNumber" : 28,
        "endLineNumber" : 189,
        "endColumnNumber" : 29
      },
      "nodeContext" : "try {\n  Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n  Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n  JsonFormat.parser().merge(testJsonData,builder);\n  Message message=builder.build();\n  if (grpcCall.incomingStream != null) {\n    grpcCall.incomingStream.onNext(message);\n  }\n else {\n    StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n      @Override public void onNext(      Object value){\n        String body=null;\n        try {\n          body=JsonFormat.printer().print((MessageOrBuilder)value);\n        }\n catch (        InvalidProtocolBufferException e) {\n          websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n          log.error(\"Failed to transform response to JSON\",e);\n        }\n        JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n        reply.put(\"body\",body);\n        websocketData.responseConsumer.accept(reply.encode());\n      }\n      @Override public void onError(      Throwable t){\n        websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n        grpcCall.incomingStream=null;\n        log.error(\"Failure returned by gRPC service\",t);\n      }\n      @Override public void onCompleted(){\n        websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n        grpcCall.incomingStream=null;\n      }\n    }\n;\n    if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n      grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n      grpcCall.incomingStream.onNext(message);\n    }\n else {\n      stubMethod.invoke(grpcStub,message,responseObserver);\n    }\n  }\n}\n catch (Exception e) {\n  websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n  grpcCall.incomingStream=null;\n  log.error(\"Failure returned by gRPC service\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 307,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 4937,
        "startLineNumber" : 120,
        "startColumnNumber" : 95,
        "endLineNumber" : 190,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n  Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n  try {\n    Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n    Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n    JsonFormat.parser().merge(testJsonData,builder);\n    Message message=builder.build();\n    if (grpcCall.incomingStream != null) {\n      grpcCall.incomingStream.onNext(message);\n    }\n else {\n      StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n        @Override public void onNext(        Object value){\n          String body=null;\n          try {\n            body=JsonFormat.printer().print((MessageOrBuilder)value);\n          }\n catch (          InvalidProtocolBufferException e) {\n            websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n            log.error(\"Failed to transform response to JSON\",e);\n          }\n          JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n          reply.put(\"body\",body);\n          websocketData.responseConsumer.accept(reply.encode());\n        }\n        @Override public void onError(        Throwable t){\n          websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n          grpcCall.incomingStream=null;\n          log.error(\"Failure returned by gRPC service\",t);\n        }\n        @Override public void onCompleted(){\n          websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n          grpcCall.incomingStream=null;\n        }\n      }\n;\n      if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n        grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n        grpcCall.incomingStream.onNext(message);\n      }\n else {\n        stubMethod.invoke(grpcStub,message,responseObserver);\n      }\n    }\n  }\n catch (  Exception e) {\n    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n    grpcCall.incomingStream=null;\n    log.error(\"Failure returned by gRPC service\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 337,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5008,
        "startLineNumber" : 120,
        "startColumnNumber" : 24,
        "endLineNumber" : 190,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n  MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n  Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n  try {\n    Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n    Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n    JsonFormat.parser().merge(testJsonData,builder);\n    Message message=builder.build();\n    if (grpcCall.incomingStream != null) {\n      grpcCall.incomingStream.onNext(message);\n    }\n else {\n      StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n        @Override public void onNext(        Object value){\n          String body=null;\n          try {\n            body=JsonFormat.printer().print((MessageOrBuilder)value);\n          }\n catch (          InvalidProtocolBufferException e) {\n            websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n            log.error(\"Failed to transform response to JSON\",e);\n          }\n          JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n          reply.put(\"body\",body);\n          websocketData.responseConsumer.accept(reply.encode());\n        }\n        @Override public void onError(        Throwable t){\n          websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n          grpcCall.incomingStream=null;\n          log.error(\"Failure returned by gRPC service\",t);\n        }\n        @Override public void onCompleted(){\n          websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n          grpcCall.incomingStream=null;\n        }\n      }\n;\n      if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n        grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n        grpcCall.incomingStream.onNext(message);\n      }\n else {\n        stubMethod.invoke(grpcStub,message,responseObserver);\n      }\n    }\n  }\n catch (  Exception e) {\n    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n    grpcCall.incomingStream=null;\n    log.error(\"Failure returned by gRPC service\",e);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 344,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 5227,
        "startLineNumber" : 116,
        "startColumnNumber" : 27,
        "endLineNumber" : 191,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n  if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n    MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n    Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n    try {\n      Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n      Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n      JsonFormat.parser().merge(testJsonData,builder);\n      Message message=builder.build();\n      if (grpcCall.incomingStream != null) {\n        grpcCall.incomingStream.onNext(message);\n      }\n else {\n        StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n          @Override public void onNext(          Object value){\n            String body=null;\n            try {\n              body=JsonFormat.printer().print((MessageOrBuilder)value);\n            }\n catch (            InvalidProtocolBufferException e) {\n              websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n              log.error(\"Failed to transform response to JSON\",e);\n            }\n            JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n            reply.put(\"body\",body);\n            websocketData.responseConsumer.accept(reply.encode());\n          }\n          @Override public void onError(          Throwable t){\n            websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n            grpcCall.incomingStream=null;\n            log.error(\"Failure returned by gRPC service\",t);\n          }\n          @Override public void onCompleted(){\n            websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n            grpcCall.incomingStream=null;\n          }\n        }\n;\n        if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n          grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n          grpcCall.incomingStream.onNext(message);\n        }\n else {\n          stubMethod.invoke(grpcStub,message,responseObserver);\n        }\n      }\n    }\n catch (    Exception e) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n      grpcCall.incomingStream=null;\n      log.error(\"Failure returned by gRPC service\",e);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 357,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5489,
        "startLineNumber" : 113,
        "startColumnNumber" : 20,
        "endLineNumber" : 191,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (stubMethod == null) {\n  websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n  log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n}\n else {\n  MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n  if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n    MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n    Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n    try {\n      Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n      Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n      JsonFormat.parser().merge(testJsonData,builder);\n      Message message=builder.build();\n      if (grpcCall.incomingStream != null) {\n        grpcCall.incomingStream.onNext(message);\n      }\n else {\n        StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n          @Override public void onNext(          Object value){\n            String body=null;\n            try {\n              body=JsonFormat.printer().print((MessageOrBuilder)value);\n            }\n catch (            InvalidProtocolBufferException e) {\n              websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n              log.error(\"Failed to transform response to JSON\",e);\n            }\n            JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n            reply.put(\"body\",body);\n            websocketData.responseConsumer.accept(reply.encode());\n          }\n          @Override public void onError(          Throwable t){\n            websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n            grpcCall.incomingStream=null;\n            log.error(\"Failure returned by gRPC service\",t);\n          }\n          @Override public void onCompleted(){\n            websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n            grpcCall.incomingStream=null;\n          }\n        }\n;\n        if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n          grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n          grpcCall.incomingStream.onNext(message);\n        }\n else {\n          stubMethod.invoke(grpcStub,message,responseObserver);\n        }\n      }\n    }\n catch (    Exception e) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n      grpcCall.incomingStream=null;\n      log.error(\"Failure returned by gRPC service\",e);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 384,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 5926,
        "startLineNumber" : 103,
        "startColumnNumber" : 23,
        "endLineNumber" : 192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  Method stubMethod=null;\n  String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n  for (  Method method : grpcStub.getClass().getDeclaredMethods()) {\n    if (method.getName().equals(realMethodName)) {\n      stubMethod=method;\n    }\n  }\n  if (stubMethod == null) {\n    websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n    log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n  }\n else {\n    MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n    if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n      MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n      Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n      try {\n        Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n        Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n        JsonFormat.parser().merge(testJsonData,builder);\n        Message message=builder.build();\n        if (grpcCall.incomingStream != null) {\n          grpcCall.incomingStream.onNext(message);\n        }\n else {\n          StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n            @Override public void onNext(            Object value){\n              String body=null;\n              try {\n                body=JsonFormat.printer().print((MessageOrBuilder)value);\n              }\n catch (              InvalidProtocolBufferException e) {\n                websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                log.error(\"Failed to transform response to JSON\",e);\n              }\n              JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n              reply.put(\"body\",body);\n              websocketData.responseConsumer.accept(reply.encode());\n            }\n            @Override public void onError(            Throwable t){\n              websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n              grpcCall.incomingStream=null;\n              log.error(\"Failure returned by gRPC service\",t);\n            }\n            @Override public void onCompleted(){\n              websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n              grpcCall.incomingStream=null;\n            }\n          }\n;\n          if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n            grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n            grpcCall.incomingStream.onNext(message);\n          }\n else {\n            stubMethod.invoke(grpcStub,message,responseObserver);\n          }\n        }\n      }\n catch (      Exception e) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n        grpcCall.incomingStream=null;\n        log.error(\"Failure returned by gRPC service\",e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 424,
      "astHeight" : 24
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6084,
        "startLineNumber" : 101,
        "startColumnNumber" : 16,
        "endLineNumber" : 192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (methodDescriptor == null) {\n  websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n}\n else {\n  Method stubMethod=null;\n  String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n  for (  Method method : grpcStub.getClass().getDeclaredMethods()) {\n    if (method.getName().equals(realMethodName)) {\n      stubMethod=method;\n    }\n  }\n  if (stubMethod == null) {\n    websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n    log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n  }\n else {\n    MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n    if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n      MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n      Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n      try {\n        Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n        Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n        JsonFormat.parser().merge(testJsonData,builder);\n        Message message=builder.build();\n        if (grpcCall.incomingStream != null) {\n          grpcCall.incomingStream.onNext(message);\n        }\n else {\n          StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n            @Override public void onNext(            Object value){\n              String body=null;\n              try {\n                body=JsonFormat.printer().print((MessageOrBuilder)value);\n              }\n catch (              InvalidProtocolBufferException e) {\n                websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                log.error(\"Failed to transform response to JSON\",e);\n              }\n              JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n              reply.put(\"body\",body);\n              websocketData.responseConsumer.accept(reply.encode());\n            }\n            @Override public void onError(            Throwable t){\n              websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n              grpcCall.incomingStream=null;\n              log.error(\"Failure returned by gRPC service\",t);\n            }\n            @Override public void onCompleted(){\n              websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n              grpcCall.incomingStream=null;\n            }\n          }\n;\n          if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n            grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n            grpcCall.incomingStream.onNext(message);\n          }\n else {\n            stubMethod.invoke(grpcStub,message,responseObserver);\n          }\n        }\n      }\n catch (      Exception e) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n        grpcCall.incomingStream=null;\n        log.error(\"Failure returned by gRPC service\",e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 441,
      "astHeight" : 25
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 6560,
        "startLineNumber" : 93,
        "startColumnNumber" : 19,
        "endLineNumber" : 193,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n  MethodDescriptor<?,?> methodDescriptor=null;\n  for (  MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n    if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n      methodDescriptor=method;\n    }\n  }\n  if (methodDescriptor == null) {\n    websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n  }\n else {\n    Method stubMethod=null;\n    String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n    for (    Method method : grpcStub.getClass().getDeclaredMethods()) {\n      if (method.getName().equals(realMethodName)) {\n        stubMethod=method;\n      }\n    }\n    if (stubMethod == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n      log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n    }\n else {\n      MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n      if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n        MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n        Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n        try {\n          Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n          Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n          JsonFormat.parser().merge(testJsonData,builder);\n          Message message=builder.build();\n          if (grpcCall.incomingStream != null) {\n            grpcCall.incomingStream.onNext(message);\n          }\n else {\n            StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n              @Override public void onNext(              Object value){\n                String body=null;\n                try {\n                  body=JsonFormat.printer().print((MessageOrBuilder)value);\n                }\n catch (                InvalidProtocolBufferException e) {\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                  log.error(\"Failed to transform response to JSON\",e);\n                }\n                JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                reply.put(\"body\",body);\n                websocketData.responseConsumer.accept(reply.encode());\n              }\n              @Override public void onError(              Throwable t){\n                websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                grpcCall.incomingStream=null;\n                log.error(\"Failure returned by gRPC service\",t);\n              }\n              @Override public void onCompleted(){\n                websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                grpcCall.incomingStream=null;\n              }\n            }\n;\n            if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n              grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n              grpcCall.incomingStream.onNext(message);\n            }\n else {\n              stubMethod.invoke(grpcStub,message,responseObserver);\n            }\n          }\n        }\n catch (        Exception e) {\n          websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n          grpcCall.incomingStream=null;\n          log.error(\"Failure returned by gRPC service\",e);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 490,
      "astHeight" : 26
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6696,
        "startLineNumber" : 91,
        "startColumnNumber" : 12,
        "endLineNumber" : 193,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (grpcStub == null) {\n  websocketData.responseConsumer.accept(jsonResponse(id,\"NO_STUB\").encode());\n}\n else {\n  ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n  MethodDescriptor<?,?> methodDescriptor=null;\n  for (  MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n    if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n      methodDescriptor=method;\n    }\n  }\n  if (methodDescriptor == null) {\n    websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n  }\n else {\n    Method stubMethod=null;\n    String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n    for (    Method method : grpcStub.getClass().getDeclaredMethods()) {\n      if (method.getName().equals(realMethodName)) {\n        stubMethod=method;\n      }\n    }\n    if (stubMethod == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n      log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n    }\n else {\n      MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n      if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n        MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n        Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n        try {\n          Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n          Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n          JsonFormat.parser().merge(testJsonData,builder);\n          Message message=builder.build();\n          if (grpcCall.incomingStream != null) {\n            grpcCall.incomingStream.onNext(message);\n          }\n else {\n            StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n              @Override public void onNext(              Object value){\n                String body=null;\n                try {\n                  body=JsonFormat.printer().print((MessageOrBuilder)value);\n                }\n catch (                InvalidProtocolBufferException e) {\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                  log.error(\"Failed to transform response to JSON\",e);\n                }\n                JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                reply.put(\"body\",body);\n                websocketData.responseConsumer.accept(reply.encode());\n              }\n              @Override public void onError(              Throwable t){\n                websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                grpcCall.incomingStream=null;\n                log.error(\"Failure returned by gRPC service\",t);\n              }\n              @Override public void onCompleted(){\n                websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                grpcCall.incomingStream=null;\n              }\n            }\n;\n            if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n              grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n              grpcCall.incomingStream.onNext(message);\n            }\n else {\n              stubMethod.invoke(grpcStub,message,responseObserver);\n            }\n          }\n        }\n catch (        Exception e) {\n          websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n          grpcCall.incomingStream=null;\n          log.error(\"Failure returned by gRPC service\",e);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 507,
      "astHeight" : 27
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 8730,
        "startLineNumber" : 48,
        "startColumnNumber" : 12,
        "endLineNumber" : 194,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  JsonObject grpcRequest=new JsonObject(input);\n  Integer id=grpcRequest.getInteger(\"id\");\n  String serviceName=grpcRequest.getString(\"serviceName\");\n  String methodName=grpcRequest.getString(\"methodName\");\n  if (\"DISCONNECT\".equals(grpcRequest.getString(\"command\"))) {\n    GrpcCallData grpcCall=websocketData.callsInProgress.get(id);\n    if (grpcCall != null && grpcCall.incomingStream != null) {\n      grpcCall.incomingStream.onCompleted();\n    }\n    return;\n  }\n  GrpcCallData grpcCall;\n  if (websocketData.callsInProgress.containsKey(id)) {\n    grpcCall=websocketData.callsInProgress.get(id);\n  }\n else {\n    Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n    maybeOldCall.ifPresent(call -> {\n      if (call.incomingStream != null) {\n        call.incomingStream.onCompleted();\n      }\n      websocketData.callsInProgress.remove(call.requestId);\n    }\n);\n    grpcCall=new GrpcCallData();\n    grpcCall.serviceName=serviceName;\n    grpcCall.methodName=methodName;\n    grpcCall.requestId=id;\n    websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n  }\n  String testJsonData=grpcRequest.getString(\"content\");\n  Object grpcStub=grpcClientStubs.get(serviceName);\n  if (grpcStub == null) {\n    websocketData.responseConsumer.accept(jsonResponse(id,\"NO_STUB\").encode());\n  }\n else {\n    ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n    MethodDescriptor<?,?> methodDescriptor=null;\n    for (    MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n      if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n        methodDescriptor=method;\n      }\n    }\n    if (methodDescriptor == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n    }\n else {\n      Method stubMethod=null;\n      String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n      for (      Method method : grpcStub.getClass().getDeclaredMethods()) {\n        if (method.getName().equals(realMethodName)) {\n          stubMethod=method;\n        }\n      }\n      if (stubMethod == null) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n        log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n      }\n else {\n        MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n        if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n          MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n          Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n          try {\n            Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n            Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n            JsonFormat.parser().merge(testJsonData,builder);\n            Message message=builder.build();\n            if (grpcCall.incomingStream != null) {\n              grpcCall.incomingStream.onNext(message);\n            }\n else {\n              StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n                @Override public void onNext(                Object value){\n                  String body=null;\n                  try {\n                    body=JsonFormat.printer().print((MessageOrBuilder)value);\n                  }\n catch (                  InvalidProtocolBufferException e) {\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                    log.error(\"Failed to transform response to JSON\",e);\n                  }\n                  JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                  reply.put(\"body\",body);\n                  websocketData.responseConsumer.accept(reply.encode());\n                }\n                @Override public void onError(                Throwable t){\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                  grpcCall.incomingStream=null;\n                  log.error(\"Failure returned by gRPC service\",t);\n                }\n                @Override public void onCompleted(){\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                  grpcCall.incomingStream=null;\n                }\n              }\n;\n              if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n                grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n                grpcCall.incomingStream.onNext(message);\n              }\n else {\n                stubMethod.invoke(grpcStub,message,responseObserver);\n              }\n            }\n          }\n catch (          Exception e) {\n            websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n            grpcCall.incomingStream=null;\n            log.error(\"Failure returned by gRPC service\",e);\n          }\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 722,
      "astHeight" : 28
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8824,
        "startLineNumber" : 48,
        "startColumnNumber" : 8,
        "endLineNumber" : 196,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  JsonObject grpcRequest=new JsonObject(input);\n  Integer id=grpcRequest.getInteger(\"id\");\n  String serviceName=grpcRequest.getString(\"serviceName\");\n  String methodName=grpcRequest.getString(\"methodName\");\n  if (\"DISCONNECT\".equals(grpcRequest.getString(\"command\"))) {\n    GrpcCallData grpcCall=websocketData.callsInProgress.get(id);\n    if (grpcCall != null && grpcCall.incomingStream != null) {\n      grpcCall.incomingStream.onCompleted();\n    }\n    return;\n  }\n  GrpcCallData grpcCall;\n  if (websocketData.callsInProgress.containsKey(id)) {\n    grpcCall=websocketData.callsInProgress.get(id);\n  }\n else {\n    Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n    maybeOldCall.ifPresent(call -> {\n      if (call.incomingStream != null) {\n        call.incomingStream.onCompleted();\n      }\n      websocketData.callsInProgress.remove(call.requestId);\n    }\n);\n    grpcCall=new GrpcCallData();\n    grpcCall.serviceName=serviceName;\n    grpcCall.methodName=methodName;\n    grpcCall.requestId=id;\n    websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n  }\n  String testJsonData=grpcRequest.getString(\"content\");\n  Object grpcStub=grpcClientStubs.get(serviceName);\n  if (grpcStub == null) {\n    websocketData.responseConsumer.accept(jsonResponse(id,\"NO_STUB\").encode());\n  }\n else {\n    ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n    MethodDescriptor<?,?> methodDescriptor=null;\n    for (    MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n      if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n        methodDescriptor=method;\n      }\n    }\n    if (methodDescriptor == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n    }\n else {\n      Method stubMethod=null;\n      String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n      for (      Method method : grpcStub.getClass().getDeclaredMethods()) {\n        if (method.getName().equals(realMethodName)) {\n          stubMethod=method;\n        }\n      }\n      if (stubMethod == null) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n        log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n      }\n else {\n        MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n        if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n          MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n          Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n          try {\n            Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n            Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n            JsonFormat.parser().merge(testJsonData,builder);\n            Message message=builder.build();\n            if (grpcCall.incomingStream != null) {\n              grpcCall.incomingStream.onNext(message);\n            }\n else {\n              StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n                @Override public void onNext(                Object value){\n                  String body=null;\n                  try {\n                    body=JsonFormat.printer().print((MessageOrBuilder)value);\n                  }\n catch (                  InvalidProtocolBufferException e) {\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                    log.error(\"Failed to transform response to JSON\",e);\n                  }\n                  JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                  reply.put(\"body\",body);\n                  websocketData.responseConsumer.accept(reply.encode());\n                }\n                @Override public void onError(                Throwable t){\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                  grpcCall.incomingStream=null;\n                  log.error(\"Failure returned by gRPC service\",t);\n                }\n                @Override public void onCompleted(){\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                  grpcCall.incomingStream=null;\n                }\n              }\n;\n              if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n                grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n                grpcCall.incomingStream.onNext(message);\n              }\n else {\n                stubMethod.invoke(grpcStub,message,responseObserver);\n              }\n            }\n          }\n catch (          Exception e) {\n            websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n            grpcCall.incomingStream=null;\n            log.error(\"Failure returned by gRPC service\",e);\n          }\n        }\n      }\n    }\n  }\n}\n  finally {\n  Thread.currentThread().setContextClassLoader(originalCl);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 731,
      "astHeight" : 29
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8998,
        "startLineNumber" : 45,
        "startColumnNumber" : 67,
        "endLineNumber" : 197,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ClassLoader originalCl=Thread.currentThread().getContextClassLoader();\n  Thread.currentThread().setContextClassLoader(deploymentClassLoader);\n  try {\n    JsonObject grpcRequest=new JsonObject(input);\n    Integer id=grpcRequest.getInteger(\"id\");\n    String serviceName=grpcRequest.getString(\"serviceName\");\n    String methodName=grpcRequest.getString(\"methodName\");\n    if (\"DISCONNECT\".equals(grpcRequest.getString(\"command\"))) {\n      GrpcCallData grpcCall=websocketData.callsInProgress.get(id);\n      if (grpcCall != null && grpcCall.incomingStream != null) {\n        grpcCall.incomingStream.onCompleted();\n      }\n      return;\n    }\n    GrpcCallData grpcCall;\n    if (websocketData.callsInProgress.containsKey(id)) {\n      grpcCall=websocketData.callsInProgress.get(id);\n    }\n else {\n      Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n      maybeOldCall.ifPresent(call -> {\n        if (call.incomingStream != null) {\n          call.incomingStream.onCompleted();\n        }\n        websocketData.callsInProgress.remove(call.requestId);\n      }\n);\n      grpcCall=new GrpcCallData();\n      grpcCall.serviceName=serviceName;\n      grpcCall.methodName=methodName;\n      grpcCall.requestId=id;\n      websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n    }\n    String testJsonData=grpcRequest.getString(\"content\");\n    Object grpcStub=grpcClientStubs.get(serviceName);\n    if (grpcStub == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_STUB\").encode());\n    }\n else {\n      ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n      MethodDescriptor<?,?> methodDescriptor=null;\n      for (      MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n        if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n          methodDescriptor=method;\n        }\n      }\n      if (methodDescriptor == null) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n      }\n else {\n        Method stubMethod=null;\n        String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n        for (        Method method : grpcStub.getClass().getDeclaredMethods()) {\n          if (method.getName().equals(realMethodName)) {\n            stubMethod=method;\n          }\n        }\n        if (stubMethod == null) {\n          websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n          log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n        }\n else {\n          MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n          if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n            MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n            Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n            try {\n              Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n              Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n              JsonFormat.parser().merge(testJsonData,builder);\n              Message message=builder.build();\n              if (grpcCall.incomingStream != null) {\n                grpcCall.incomingStream.onNext(message);\n              }\n else {\n                StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n                  @Override public void onNext(                  Object value){\n                    String body=null;\n                    try {\n                      body=JsonFormat.printer().print((MessageOrBuilder)value);\n                    }\n catch (                    InvalidProtocolBufferException e) {\n                      websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                      log.error(\"Failed to transform response to JSON\",e);\n                    }\n                    JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                    reply.put(\"body\",body);\n                    websocketData.responseConsumer.accept(reply.encode());\n                  }\n                  @Override public void onError(                  Throwable t){\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                    grpcCall.incomingStream=null;\n                    log.error(\"Failure returned by gRPC service\",t);\n                  }\n                  @Override public void onCompleted(){\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                    grpcCall.incomingStream=null;\n                  }\n                }\n;\n                if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n                  grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n                  grpcCall.incomingStream.onNext(message);\n                }\n else {\n                  stubMethod.invoke(grpcStub,message,responseObserver);\n                }\n              }\n            }\n catch (            Exception e) {\n              websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n              grpcCall.incomingStream=null;\n              log.error(\"Failure returned by gRPC service\",e);\n            }\n          }\n        }\n      }\n    }\n  }\n  finally {\n    Thread.currentThread().setContextClassLoader(originalCl);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 749,
      "astHeight" : 30
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 9061,
        "startLineNumber" : 45,
        "startColumnNumber" : 4,
        "endLineNumber" : 197,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void handle(String input,WebSocketData websocketData){\n  ClassLoader originalCl=Thread.currentThread().getContextClassLoader();\n  Thread.currentThread().setContextClassLoader(deploymentClassLoader);\n  try {\n    JsonObject grpcRequest=new JsonObject(input);\n    Integer id=grpcRequest.getInteger(\"id\");\n    String serviceName=grpcRequest.getString(\"serviceName\");\n    String methodName=grpcRequest.getString(\"methodName\");\n    if (\"DISCONNECT\".equals(grpcRequest.getString(\"command\"))) {\n      GrpcCallData grpcCall=websocketData.callsInProgress.get(id);\n      if (grpcCall != null && grpcCall.incomingStream != null) {\n        grpcCall.incomingStream.onCompleted();\n      }\n      return;\n    }\n    GrpcCallData grpcCall;\n    if (websocketData.callsInProgress.containsKey(id)) {\n      grpcCall=websocketData.callsInProgress.get(id);\n    }\n else {\n      Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n      maybeOldCall.ifPresent(call -> {\n        if (call.incomingStream != null) {\n          call.incomingStream.onCompleted();\n        }\n        websocketData.callsInProgress.remove(call.requestId);\n      }\n);\n      grpcCall=new GrpcCallData();\n      grpcCall.serviceName=serviceName;\n      grpcCall.methodName=methodName;\n      grpcCall.requestId=id;\n      websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n    }\n    String testJsonData=grpcRequest.getString(\"content\");\n    Object grpcStub=grpcClientStubs.get(serviceName);\n    if (grpcStub == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_STUB\").encode());\n    }\n else {\n      ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n      MethodDescriptor<?,?> methodDescriptor=null;\n      for (      MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n        if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n          methodDescriptor=method;\n        }\n      }\n      if (methodDescriptor == null) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n      }\n else {\n        Method stubMethod=null;\n        String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n        for (        Method method : grpcStub.getClass().getDeclaredMethods()) {\n          if (method.getName().equals(realMethodName)) {\n            stubMethod=method;\n          }\n        }\n        if (stubMethod == null) {\n          websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n          log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n        }\n else {\n          MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n          if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n            MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n            Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n            try {\n              Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n              Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n              JsonFormat.parser().merge(testJsonData,builder);\n              Message message=builder.build();\n              if (grpcCall.incomingStream != null) {\n                grpcCall.incomingStream.onNext(message);\n              }\n else {\n                StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n                  @Override public void onNext(                  Object value){\n                    String body=null;\n                    try {\n                      body=JsonFormat.printer().print((MessageOrBuilder)value);\n                    }\n catch (                    InvalidProtocolBufferException e) {\n                      websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                      log.error(\"Failed to transform response to JSON\",e);\n                    }\n                    JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                    reply.put(\"body\",body);\n                    websocketData.responseConsumer.accept(reply.encode());\n                  }\n                  @Override public void onError(                  Throwable t){\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                    grpcCall.incomingStream=null;\n                    log.error(\"Failure returned by gRPC service\",t);\n                  }\n                  @Override public void onCompleted(){\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                    grpcCall.incomingStream=null;\n                  }\n                }\n;\n                if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n                  grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n                  grpcCall.incomingStream.onNext(message);\n                }\n else {\n                  stubMethod.invoke(grpcStub,message,responseObserver);\n                }\n              }\n            }\n catch (            Exception e) {\n              websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n              grpcCall.incomingStream=null;\n              log.error(\"Failure returned by gRPC service\",e);\n            }\n          }\n        }\n      }\n    }\n  }\n  finally {\n    Thread.currentThread().setContextClassLoader(originalCl);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 761,
      "astHeight" : 31
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 133,
        "startColumnNumber" : 36,
        "endLineNumber" : 133,
        "endColumnNumber" : 67
      },
      "nodeContext" : "grpcCall.incomingStream != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "io.quarkus.grpc.deployment.devmode.GrpcDevConsoleWebSocketListener.GrpcCallData"
  }, {
    "nodeContext" : "grpcCall",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 135,
      "startColumnNumber" : 36,
      "endLineNumber" : 135,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 135,
        "startColumnNumber" : 36,
        "endLineNumber" : 135,
        "endColumnNumber" : 59
      },
      "nodeContext" : "grpcCall.incomingStream",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 135,
        "startColumnNumber" : 36,
        "endLineNumber" : 135,
        "endColumnNumber" : 75
      },
      "nodeContext" : "grpcCall.incomingStream.onNext(message)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 135,
        "startColumnNumber" : 36,
        "endLineNumber" : 135,
        "endColumnNumber" : 76
      },
      "nodeContext" : "grpcCall.incomingStream.onNext(message);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 223,
        "startLineNumber" : 133,
        "startColumnNumber" : 69,
        "endLineNumber" : 136,
        "endColumnNumber" : 33
      },
      "nodeContext" : "{\n  grpcCall.incomingStream.onNext(message);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3494,
        "startLineNumber" : 133,
        "startColumnNumber" : 32,
        "endLineNumber" : 181,
        "endColumnNumber" : 33
      },
      "nodeContext" : "if (grpcCall.incomingStream != null) {\n  grpcCall.incomingStream.onNext(message);\n}\n else {\n  StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n    @Override public void onNext(    Object value){\n      String body=null;\n      try {\n        body=JsonFormat.printer().print((MessageOrBuilder)value);\n      }\n catch (      InvalidProtocolBufferException e) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n        log.error(\"Failed to transform response to JSON\",e);\n      }\n      JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n      reply.put(\"body\",body);\n      websocketData.responseConsumer.accept(reply.encode());\n    }\n    @Override public void onError(    Throwable t){\n      websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n      grpcCall.incomingStream=null;\n      log.error(\"Failure returned by gRPC service\",t);\n    }\n    @Override public void onCompleted(){\n      websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n      grpcCall.incomingStream=null;\n    }\n  }\n;\n  if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n    grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n    grpcCall.incomingStream.onNext(message);\n  }\n else {\n    stubMethod.invoke(grpcStub,message,responseObserver);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 226,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4112,
        "startLineNumber" : 124,
        "startColumnNumber" : 32,
        "endLineNumber" : 182,
        "endColumnNumber" : 29
      },
      "nodeContext" : "{\n  Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n  Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n  JsonFormat.parser().merge(testJsonData,builder);\n  Message message=builder.build();\n  if (grpcCall.incomingStream != null) {\n    grpcCall.incomingStream.onNext(message);\n  }\n else {\n    StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n      @Override public void onNext(      Object value){\n        String body=null;\n        try {\n          body=JsonFormat.printer().print((MessageOrBuilder)value);\n        }\n catch (        InvalidProtocolBufferException e) {\n          websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n          log.error(\"Failed to transform response to JSON\",e);\n        }\n        JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n        reply.put(\"body\",body);\n        websocketData.responseConsumer.accept(reply.encode());\n      }\n      @Override public void onError(      Throwable t){\n        websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n        grpcCall.incomingStream=null;\n        log.error(\"Failure returned by gRPC service\",t);\n      }\n      @Override public void onCompleted(){\n        websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n        grpcCall.incomingStream=null;\n      }\n    }\n;\n    if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n      grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n      grpcCall.incomingStream.onNext(message);\n    }\n else {\n      stubMethod.invoke(grpcStub,message,responseObserver);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 268,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4632,
        "startLineNumber" : 124,
        "startColumnNumber" : 28,
        "endLineNumber" : 189,
        "endColumnNumber" : 29
      },
      "nodeContext" : "try {\n  Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n  Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n  JsonFormat.parser().merge(testJsonData,builder);\n  Message message=builder.build();\n  if (grpcCall.incomingStream != null) {\n    grpcCall.incomingStream.onNext(message);\n  }\n else {\n    StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n      @Override public void onNext(      Object value){\n        String body=null;\n        try {\n          body=JsonFormat.printer().print((MessageOrBuilder)value);\n        }\n catch (        InvalidProtocolBufferException e) {\n          websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n          log.error(\"Failed to transform response to JSON\",e);\n        }\n        JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n        reply.put(\"body\",body);\n        websocketData.responseConsumer.accept(reply.encode());\n      }\n      @Override public void onError(      Throwable t){\n        websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n        grpcCall.incomingStream=null;\n        log.error(\"Failure returned by gRPC service\",t);\n      }\n      @Override public void onCompleted(){\n        websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n        grpcCall.incomingStream=null;\n      }\n    }\n;\n    if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n      grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n      grpcCall.incomingStream.onNext(message);\n    }\n else {\n      stubMethod.invoke(grpcStub,message,responseObserver);\n    }\n  }\n}\n catch (Exception e) {\n  websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n  grpcCall.incomingStream=null;\n  log.error(\"Failure returned by gRPC service\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 307,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 4937,
        "startLineNumber" : 120,
        "startColumnNumber" : 95,
        "endLineNumber" : 190,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n  Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n  try {\n    Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n    Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n    JsonFormat.parser().merge(testJsonData,builder);\n    Message message=builder.build();\n    if (grpcCall.incomingStream != null) {\n      grpcCall.incomingStream.onNext(message);\n    }\n else {\n      StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n        @Override public void onNext(        Object value){\n          String body=null;\n          try {\n            body=JsonFormat.printer().print((MessageOrBuilder)value);\n          }\n catch (          InvalidProtocolBufferException e) {\n            websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n            log.error(\"Failed to transform response to JSON\",e);\n          }\n          JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n          reply.put(\"body\",body);\n          websocketData.responseConsumer.accept(reply.encode());\n        }\n        @Override public void onError(        Throwable t){\n          websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n          grpcCall.incomingStream=null;\n          log.error(\"Failure returned by gRPC service\",t);\n        }\n        @Override public void onCompleted(){\n          websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n          grpcCall.incomingStream=null;\n        }\n      }\n;\n      if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n        grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n        grpcCall.incomingStream.onNext(message);\n      }\n else {\n        stubMethod.invoke(grpcStub,message,responseObserver);\n      }\n    }\n  }\n catch (  Exception e) {\n    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n    grpcCall.incomingStream=null;\n    log.error(\"Failure returned by gRPC service\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 337,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5008,
        "startLineNumber" : 120,
        "startColumnNumber" : 24,
        "endLineNumber" : 190,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n  MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n  Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n  try {\n    Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n    Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n    JsonFormat.parser().merge(testJsonData,builder);\n    Message message=builder.build();\n    if (grpcCall.incomingStream != null) {\n      grpcCall.incomingStream.onNext(message);\n    }\n else {\n      StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n        @Override public void onNext(        Object value){\n          String body=null;\n          try {\n            body=JsonFormat.printer().print((MessageOrBuilder)value);\n          }\n catch (          InvalidProtocolBufferException e) {\n            websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n            log.error(\"Failed to transform response to JSON\",e);\n          }\n          JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n          reply.put(\"body\",body);\n          websocketData.responseConsumer.accept(reply.encode());\n        }\n        @Override public void onError(        Throwable t){\n          websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n          grpcCall.incomingStream=null;\n          log.error(\"Failure returned by gRPC service\",t);\n        }\n        @Override public void onCompleted(){\n          websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n          grpcCall.incomingStream=null;\n        }\n      }\n;\n      if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n        grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n        grpcCall.incomingStream.onNext(message);\n      }\n else {\n        stubMethod.invoke(grpcStub,message,responseObserver);\n      }\n    }\n  }\n catch (  Exception e) {\n    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n    grpcCall.incomingStream=null;\n    log.error(\"Failure returned by gRPC service\",e);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 344,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 5227,
        "startLineNumber" : 116,
        "startColumnNumber" : 27,
        "endLineNumber" : 191,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n  if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n    MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n    Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n    try {\n      Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n      Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n      JsonFormat.parser().merge(testJsonData,builder);\n      Message message=builder.build();\n      if (grpcCall.incomingStream != null) {\n        grpcCall.incomingStream.onNext(message);\n      }\n else {\n        StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n          @Override public void onNext(          Object value){\n            String body=null;\n            try {\n              body=JsonFormat.printer().print((MessageOrBuilder)value);\n            }\n catch (            InvalidProtocolBufferException e) {\n              websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n              log.error(\"Failed to transform response to JSON\",e);\n            }\n            JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n            reply.put(\"body\",body);\n            websocketData.responseConsumer.accept(reply.encode());\n          }\n          @Override public void onError(          Throwable t){\n            websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n            grpcCall.incomingStream=null;\n            log.error(\"Failure returned by gRPC service\",t);\n          }\n          @Override public void onCompleted(){\n            websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n            grpcCall.incomingStream=null;\n          }\n        }\n;\n        if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n          grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n          grpcCall.incomingStream.onNext(message);\n        }\n else {\n          stubMethod.invoke(grpcStub,message,responseObserver);\n        }\n      }\n    }\n catch (    Exception e) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n      grpcCall.incomingStream=null;\n      log.error(\"Failure returned by gRPC service\",e);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 357,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5489,
        "startLineNumber" : 113,
        "startColumnNumber" : 20,
        "endLineNumber" : 191,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (stubMethod == null) {\n  websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n  log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n}\n else {\n  MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n  if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n    MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n    Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n    try {\n      Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n      Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n      JsonFormat.parser().merge(testJsonData,builder);\n      Message message=builder.build();\n      if (grpcCall.incomingStream != null) {\n        grpcCall.incomingStream.onNext(message);\n      }\n else {\n        StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n          @Override public void onNext(          Object value){\n            String body=null;\n            try {\n              body=JsonFormat.printer().print((MessageOrBuilder)value);\n            }\n catch (            InvalidProtocolBufferException e) {\n              websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n              log.error(\"Failed to transform response to JSON\",e);\n            }\n            JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n            reply.put(\"body\",body);\n            websocketData.responseConsumer.accept(reply.encode());\n          }\n          @Override public void onError(          Throwable t){\n            websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n            grpcCall.incomingStream=null;\n            log.error(\"Failure returned by gRPC service\",t);\n          }\n          @Override public void onCompleted(){\n            websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n            grpcCall.incomingStream=null;\n          }\n        }\n;\n        if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n          grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n          grpcCall.incomingStream.onNext(message);\n        }\n else {\n          stubMethod.invoke(grpcStub,message,responseObserver);\n        }\n      }\n    }\n catch (    Exception e) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n      grpcCall.incomingStream=null;\n      log.error(\"Failure returned by gRPC service\",e);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 384,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 5926,
        "startLineNumber" : 103,
        "startColumnNumber" : 23,
        "endLineNumber" : 192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  Method stubMethod=null;\n  String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n  for (  Method method : grpcStub.getClass().getDeclaredMethods()) {\n    if (method.getName().equals(realMethodName)) {\n      stubMethod=method;\n    }\n  }\n  if (stubMethod == null) {\n    websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n    log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n  }\n else {\n    MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n    if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n      MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n      Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n      try {\n        Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n        Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n        JsonFormat.parser().merge(testJsonData,builder);\n        Message message=builder.build();\n        if (grpcCall.incomingStream != null) {\n          grpcCall.incomingStream.onNext(message);\n        }\n else {\n          StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n            @Override public void onNext(            Object value){\n              String body=null;\n              try {\n                body=JsonFormat.printer().print((MessageOrBuilder)value);\n              }\n catch (              InvalidProtocolBufferException e) {\n                websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                log.error(\"Failed to transform response to JSON\",e);\n              }\n              JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n              reply.put(\"body\",body);\n              websocketData.responseConsumer.accept(reply.encode());\n            }\n            @Override public void onError(            Throwable t){\n              websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n              grpcCall.incomingStream=null;\n              log.error(\"Failure returned by gRPC service\",t);\n            }\n            @Override public void onCompleted(){\n              websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n              grpcCall.incomingStream=null;\n            }\n          }\n;\n          if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n            grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n            grpcCall.incomingStream.onNext(message);\n          }\n else {\n            stubMethod.invoke(grpcStub,message,responseObserver);\n          }\n        }\n      }\n catch (      Exception e) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n        grpcCall.incomingStream=null;\n        log.error(\"Failure returned by gRPC service\",e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 424,
      "astHeight" : 24
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6084,
        "startLineNumber" : 101,
        "startColumnNumber" : 16,
        "endLineNumber" : 192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (methodDescriptor == null) {\n  websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n}\n else {\n  Method stubMethod=null;\n  String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n  for (  Method method : grpcStub.getClass().getDeclaredMethods()) {\n    if (method.getName().equals(realMethodName)) {\n      stubMethod=method;\n    }\n  }\n  if (stubMethod == null) {\n    websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n    log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n  }\n else {\n    MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n    if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n      MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n      Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n      try {\n        Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n        Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n        JsonFormat.parser().merge(testJsonData,builder);\n        Message message=builder.build();\n        if (grpcCall.incomingStream != null) {\n          grpcCall.incomingStream.onNext(message);\n        }\n else {\n          StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n            @Override public void onNext(            Object value){\n              String body=null;\n              try {\n                body=JsonFormat.printer().print((MessageOrBuilder)value);\n              }\n catch (              InvalidProtocolBufferException e) {\n                websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                log.error(\"Failed to transform response to JSON\",e);\n              }\n              JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n              reply.put(\"body\",body);\n              websocketData.responseConsumer.accept(reply.encode());\n            }\n            @Override public void onError(            Throwable t){\n              websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n              grpcCall.incomingStream=null;\n              log.error(\"Failure returned by gRPC service\",t);\n            }\n            @Override public void onCompleted(){\n              websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n              grpcCall.incomingStream=null;\n            }\n          }\n;\n          if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n            grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n            grpcCall.incomingStream.onNext(message);\n          }\n else {\n            stubMethod.invoke(grpcStub,message,responseObserver);\n          }\n        }\n      }\n catch (      Exception e) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n        grpcCall.incomingStream=null;\n        log.error(\"Failure returned by gRPC service\",e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 441,
      "astHeight" : 25
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 6560,
        "startLineNumber" : 93,
        "startColumnNumber" : 19,
        "endLineNumber" : 193,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n  MethodDescriptor<?,?> methodDescriptor=null;\n  for (  MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n    if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n      methodDescriptor=method;\n    }\n  }\n  if (methodDescriptor == null) {\n    websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n  }\n else {\n    Method stubMethod=null;\n    String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n    for (    Method method : grpcStub.getClass().getDeclaredMethods()) {\n      if (method.getName().equals(realMethodName)) {\n        stubMethod=method;\n      }\n    }\n    if (stubMethod == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n      log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n    }\n else {\n      MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n      if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n        MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n        Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n        try {\n          Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n          Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n          JsonFormat.parser().merge(testJsonData,builder);\n          Message message=builder.build();\n          if (grpcCall.incomingStream != null) {\n            grpcCall.incomingStream.onNext(message);\n          }\n else {\n            StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n              @Override public void onNext(              Object value){\n                String body=null;\n                try {\n                  body=JsonFormat.printer().print((MessageOrBuilder)value);\n                }\n catch (                InvalidProtocolBufferException e) {\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                  log.error(\"Failed to transform response to JSON\",e);\n                }\n                JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                reply.put(\"body\",body);\n                websocketData.responseConsumer.accept(reply.encode());\n              }\n              @Override public void onError(              Throwable t){\n                websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                grpcCall.incomingStream=null;\n                log.error(\"Failure returned by gRPC service\",t);\n              }\n              @Override public void onCompleted(){\n                websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                grpcCall.incomingStream=null;\n              }\n            }\n;\n            if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n              grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n              grpcCall.incomingStream.onNext(message);\n            }\n else {\n              stubMethod.invoke(grpcStub,message,responseObserver);\n            }\n          }\n        }\n catch (        Exception e) {\n          websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n          grpcCall.incomingStream=null;\n          log.error(\"Failure returned by gRPC service\",e);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 490,
      "astHeight" : 26
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6696,
        "startLineNumber" : 91,
        "startColumnNumber" : 12,
        "endLineNumber" : 193,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (grpcStub == null) {\n  websocketData.responseConsumer.accept(jsonResponse(id,\"NO_STUB\").encode());\n}\n else {\n  ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n  MethodDescriptor<?,?> methodDescriptor=null;\n  for (  MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n    if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n      methodDescriptor=method;\n    }\n  }\n  if (methodDescriptor == null) {\n    websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n  }\n else {\n    Method stubMethod=null;\n    String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n    for (    Method method : grpcStub.getClass().getDeclaredMethods()) {\n      if (method.getName().equals(realMethodName)) {\n        stubMethod=method;\n      }\n    }\n    if (stubMethod == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n      log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n    }\n else {\n      MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n      if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n        MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n        Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n        try {\n          Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n          Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n          JsonFormat.parser().merge(testJsonData,builder);\n          Message message=builder.build();\n          if (grpcCall.incomingStream != null) {\n            grpcCall.incomingStream.onNext(message);\n          }\n else {\n            StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n              @Override public void onNext(              Object value){\n                String body=null;\n                try {\n                  body=JsonFormat.printer().print((MessageOrBuilder)value);\n                }\n catch (                InvalidProtocolBufferException e) {\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                  log.error(\"Failed to transform response to JSON\",e);\n                }\n                JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                reply.put(\"body\",body);\n                websocketData.responseConsumer.accept(reply.encode());\n              }\n              @Override public void onError(              Throwable t){\n                websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                grpcCall.incomingStream=null;\n                log.error(\"Failure returned by gRPC service\",t);\n              }\n              @Override public void onCompleted(){\n                websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                grpcCall.incomingStream=null;\n              }\n            }\n;\n            if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n              grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n              grpcCall.incomingStream.onNext(message);\n            }\n else {\n              stubMethod.invoke(grpcStub,message,responseObserver);\n            }\n          }\n        }\n catch (        Exception e) {\n          websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n          grpcCall.incomingStream=null;\n          log.error(\"Failure returned by gRPC service\",e);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 507,
      "astHeight" : 27
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 8730,
        "startLineNumber" : 48,
        "startColumnNumber" : 12,
        "endLineNumber" : 194,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  JsonObject grpcRequest=new JsonObject(input);\n  Integer id=grpcRequest.getInteger(\"id\");\n  String serviceName=grpcRequest.getString(\"serviceName\");\n  String methodName=grpcRequest.getString(\"methodName\");\n  if (\"DISCONNECT\".equals(grpcRequest.getString(\"command\"))) {\n    GrpcCallData grpcCall=websocketData.callsInProgress.get(id);\n    if (grpcCall != null && grpcCall.incomingStream != null) {\n      grpcCall.incomingStream.onCompleted();\n    }\n    return;\n  }\n  GrpcCallData grpcCall;\n  if (websocketData.callsInProgress.containsKey(id)) {\n    grpcCall=websocketData.callsInProgress.get(id);\n  }\n else {\n    Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n    maybeOldCall.ifPresent(call -> {\n      if (call.incomingStream != null) {\n        call.incomingStream.onCompleted();\n      }\n      websocketData.callsInProgress.remove(call.requestId);\n    }\n);\n    grpcCall=new GrpcCallData();\n    grpcCall.serviceName=serviceName;\n    grpcCall.methodName=methodName;\n    grpcCall.requestId=id;\n    websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n  }\n  String testJsonData=grpcRequest.getString(\"content\");\n  Object grpcStub=grpcClientStubs.get(serviceName);\n  if (grpcStub == null) {\n    websocketData.responseConsumer.accept(jsonResponse(id,\"NO_STUB\").encode());\n  }\n else {\n    ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n    MethodDescriptor<?,?> methodDescriptor=null;\n    for (    MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n      if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n        methodDescriptor=method;\n      }\n    }\n    if (methodDescriptor == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n    }\n else {\n      Method stubMethod=null;\n      String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n      for (      Method method : grpcStub.getClass().getDeclaredMethods()) {\n        if (method.getName().equals(realMethodName)) {\n          stubMethod=method;\n        }\n      }\n      if (stubMethod == null) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n        log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n      }\n else {\n        MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n        if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n          MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n          Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n          try {\n            Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n            Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n            JsonFormat.parser().merge(testJsonData,builder);\n            Message message=builder.build();\n            if (grpcCall.incomingStream != null) {\n              grpcCall.incomingStream.onNext(message);\n            }\n else {\n              StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n                @Override public void onNext(                Object value){\n                  String body=null;\n                  try {\n                    body=JsonFormat.printer().print((MessageOrBuilder)value);\n                  }\n catch (                  InvalidProtocolBufferException e) {\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                    log.error(\"Failed to transform response to JSON\",e);\n                  }\n                  JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                  reply.put(\"body\",body);\n                  websocketData.responseConsumer.accept(reply.encode());\n                }\n                @Override public void onError(                Throwable t){\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                  grpcCall.incomingStream=null;\n                  log.error(\"Failure returned by gRPC service\",t);\n                }\n                @Override public void onCompleted(){\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                  grpcCall.incomingStream=null;\n                }\n              }\n;\n              if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n                grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n                grpcCall.incomingStream.onNext(message);\n              }\n else {\n                stubMethod.invoke(grpcStub,message,responseObserver);\n              }\n            }\n          }\n catch (          Exception e) {\n            websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n            grpcCall.incomingStream=null;\n            log.error(\"Failure returned by gRPC service\",e);\n          }\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 722,
      "astHeight" : 28
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8824,
        "startLineNumber" : 48,
        "startColumnNumber" : 8,
        "endLineNumber" : 196,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  JsonObject grpcRequest=new JsonObject(input);\n  Integer id=grpcRequest.getInteger(\"id\");\n  String serviceName=grpcRequest.getString(\"serviceName\");\n  String methodName=grpcRequest.getString(\"methodName\");\n  if (\"DISCONNECT\".equals(grpcRequest.getString(\"command\"))) {\n    GrpcCallData grpcCall=websocketData.callsInProgress.get(id);\n    if (grpcCall != null && grpcCall.incomingStream != null) {\n      grpcCall.incomingStream.onCompleted();\n    }\n    return;\n  }\n  GrpcCallData grpcCall;\n  if (websocketData.callsInProgress.containsKey(id)) {\n    grpcCall=websocketData.callsInProgress.get(id);\n  }\n else {\n    Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n    maybeOldCall.ifPresent(call -> {\n      if (call.incomingStream != null) {\n        call.incomingStream.onCompleted();\n      }\n      websocketData.callsInProgress.remove(call.requestId);\n    }\n);\n    grpcCall=new GrpcCallData();\n    grpcCall.serviceName=serviceName;\n    grpcCall.methodName=methodName;\n    grpcCall.requestId=id;\n    websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n  }\n  String testJsonData=grpcRequest.getString(\"content\");\n  Object grpcStub=grpcClientStubs.get(serviceName);\n  if (grpcStub == null) {\n    websocketData.responseConsumer.accept(jsonResponse(id,\"NO_STUB\").encode());\n  }\n else {\n    ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n    MethodDescriptor<?,?> methodDescriptor=null;\n    for (    MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n      if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n        methodDescriptor=method;\n      }\n    }\n    if (methodDescriptor == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n    }\n else {\n      Method stubMethod=null;\n      String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n      for (      Method method : grpcStub.getClass().getDeclaredMethods()) {\n        if (method.getName().equals(realMethodName)) {\n          stubMethod=method;\n        }\n      }\n      if (stubMethod == null) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n        log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n      }\n else {\n        MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n        if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n          MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n          Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n          try {\n            Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n            Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n            JsonFormat.parser().merge(testJsonData,builder);\n            Message message=builder.build();\n            if (grpcCall.incomingStream != null) {\n              grpcCall.incomingStream.onNext(message);\n            }\n else {\n              StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n                @Override public void onNext(                Object value){\n                  String body=null;\n                  try {\n                    body=JsonFormat.printer().print((MessageOrBuilder)value);\n                  }\n catch (                  InvalidProtocolBufferException e) {\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                    log.error(\"Failed to transform response to JSON\",e);\n                  }\n                  JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                  reply.put(\"body\",body);\n                  websocketData.responseConsumer.accept(reply.encode());\n                }\n                @Override public void onError(                Throwable t){\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                  grpcCall.incomingStream=null;\n                  log.error(\"Failure returned by gRPC service\",t);\n                }\n                @Override public void onCompleted(){\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                  grpcCall.incomingStream=null;\n                }\n              }\n;\n              if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n                grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n                grpcCall.incomingStream.onNext(message);\n              }\n else {\n                stubMethod.invoke(grpcStub,message,responseObserver);\n              }\n            }\n          }\n catch (          Exception e) {\n            websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n            grpcCall.incomingStream=null;\n            log.error(\"Failure returned by gRPC service\",e);\n          }\n        }\n      }\n    }\n  }\n}\n  finally {\n  Thread.currentThread().setContextClassLoader(originalCl);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 731,
      "astHeight" : 29
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8998,
        "startLineNumber" : 45,
        "startColumnNumber" : 67,
        "endLineNumber" : 197,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ClassLoader originalCl=Thread.currentThread().getContextClassLoader();\n  Thread.currentThread().setContextClassLoader(deploymentClassLoader);\n  try {\n    JsonObject grpcRequest=new JsonObject(input);\n    Integer id=grpcRequest.getInteger(\"id\");\n    String serviceName=grpcRequest.getString(\"serviceName\");\n    String methodName=grpcRequest.getString(\"methodName\");\n    if (\"DISCONNECT\".equals(grpcRequest.getString(\"command\"))) {\n      GrpcCallData grpcCall=websocketData.callsInProgress.get(id);\n      if (grpcCall != null && grpcCall.incomingStream != null) {\n        grpcCall.incomingStream.onCompleted();\n      }\n      return;\n    }\n    GrpcCallData grpcCall;\n    if (websocketData.callsInProgress.containsKey(id)) {\n      grpcCall=websocketData.callsInProgress.get(id);\n    }\n else {\n      Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n      maybeOldCall.ifPresent(call -> {\n        if (call.incomingStream != null) {\n          call.incomingStream.onCompleted();\n        }\n        websocketData.callsInProgress.remove(call.requestId);\n      }\n);\n      grpcCall=new GrpcCallData();\n      grpcCall.serviceName=serviceName;\n      grpcCall.methodName=methodName;\n      grpcCall.requestId=id;\n      websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n    }\n    String testJsonData=grpcRequest.getString(\"content\");\n    Object grpcStub=grpcClientStubs.get(serviceName);\n    if (grpcStub == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_STUB\").encode());\n    }\n else {\n      ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n      MethodDescriptor<?,?> methodDescriptor=null;\n      for (      MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n        if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n          methodDescriptor=method;\n        }\n      }\n      if (methodDescriptor == null) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n      }\n else {\n        Method stubMethod=null;\n        String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n        for (        Method method : grpcStub.getClass().getDeclaredMethods()) {\n          if (method.getName().equals(realMethodName)) {\n            stubMethod=method;\n          }\n        }\n        if (stubMethod == null) {\n          websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n          log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n        }\n else {\n          MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n          if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n            MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n            Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n            try {\n              Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n              Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n              JsonFormat.parser().merge(testJsonData,builder);\n              Message message=builder.build();\n              if (grpcCall.incomingStream != null) {\n                grpcCall.incomingStream.onNext(message);\n              }\n else {\n                StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n                  @Override public void onNext(                  Object value){\n                    String body=null;\n                    try {\n                      body=JsonFormat.printer().print((MessageOrBuilder)value);\n                    }\n catch (                    InvalidProtocolBufferException e) {\n                      websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                      log.error(\"Failed to transform response to JSON\",e);\n                    }\n                    JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                    reply.put(\"body\",body);\n                    websocketData.responseConsumer.accept(reply.encode());\n                  }\n                  @Override public void onError(                  Throwable t){\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                    grpcCall.incomingStream=null;\n                    log.error(\"Failure returned by gRPC service\",t);\n                  }\n                  @Override public void onCompleted(){\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                    grpcCall.incomingStream=null;\n                  }\n                }\n;\n                if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n                  grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n                  grpcCall.incomingStream.onNext(message);\n                }\n else {\n                  stubMethod.invoke(grpcStub,message,responseObserver);\n                }\n              }\n            }\n catch (            Exception e) {\n              websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n              grpcCall.incomingStream=null;\n              log.error(\"Failure returned by gRPC service\",e);\n            }\n          }\n        }\n      }\n    }\n  }\n  finally {\n    Thread.currentThread().setContextClassLoader(originalCl);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 749,
      "astHeight" : 30
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 9061,
        "startLineNumber" : 45,
        "startColumnNumber" : 4,
        "endLineNumber" : 197,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void handle(String input,WebSocketData websocketData){\n  ClassLoader originalCl=Thread.currentThread().getContextClassLoader();\n  Thread.currentThread().setContextClassLoader(deploymentClassLoader);\n  try {\n    JsonObject grpcRequest=new JsonObject(input);\n    Integer id=grpcRequest.getInteger(\"id\");\n    String serviceName=grpcRequest.getString(\"serviceName\");\n    String methodName=grpcRequest.getString(\"methodName\");\n    if (\"DISCONNECT\".equals(grpcRequest.getString(\"command\"))) {\n      GrpcCallData grpcCall=websocketData.callsInProgress.get(id);\n      if (grpcCall != null && grpcCall.incomingStream != null) {\n        grpcCall.incomingStream.onCompleted();\n      }\n      return;\n    }\n    GrpcCallData grpcCall;\n    if (websocketData.callsInProgress.containsKey(id)) {\n      grpcCall=websocketData.callsInProgress.get(id);\n    }\n else {\n      Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n      maybeOldCall.ifPresent(call -> {\n        if (call.incomingStream != null) {\n          call.incomingStream.onCompleted();\n        }\n        websocketData.callsInProgress.remove(call.requestId);\n      }\n);\n      grpcCall=new GrpcCallData();\n      grpcCall.serviceName=serviceName;\n      grpcCall.methodName=methodName;\n      grpcCall.requestId=id;\n      websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n    }\n    String testJsonData=grpcRequest.getString(\"content\");\n    Object grpcStub=grpcClientStubs.get(serviceName);\n    if (grpcStub == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_STUB\").encode());\n    }\n else {\n      ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n      MethodDescriptor<?,?> methodDescriptor=null;\n      for (      MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n        if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n          methodDescriptor=method;\n        }\n      }\n      if (methodDescriptor == null) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n      }\n else {\n        Method stubMethod=null;\n        String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n        for (        Method method : grpcStub.getClass().getDeclaredMethods()) {\n          if (method.getName().equals(realMethodName)) {\n            stubMethod=method;\n          }\n        }\n        if (stubMethod == null) {\n          websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n          log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n        }\n else {\n          MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n          if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n            MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n            Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n            try {\n              Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n              Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n              JsonFormat.parser().merge(testJsonData,builder);\n              Message message=builder.build();\n              if (grpcCall.incomingStream != null) {\n                grpcCall.incomingStream.onNext(message);\n              }\n else {\n                StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n                  @Override public void onNext(                  Object value){\n                    String body=null;\n                    try {\n                      body=JsonFormat.printer().print((MessageOrBuilder)value);\n                    }\n catch (                    InvalidProtocolBufferException e) {\n                      websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                      log.error(\"Failed to transform response to JSON\",e);\n                    }\n                    JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                    reply.put(\"body\",body);\n                    websocketData.responseConsumer.accept(reply.encode());\n                  }\n                  @Override public void onError(                  Throwable t){\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                    grpcCall.incomingStream=null;\n                    log.error(\"Failure returned by gRPC service\",t);\n                  }\n                  @Override public void onCompleted(){\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                    grpcCall.incomingStream=null;\n                  }\n                }\n;\n                if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n                  grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n                  grpcCall.incomingStream.onNext(message);\n                }\n else {\n                  stubMethod.invoke(grpcStub,message,responseObserver);\n                }\n              }\n            }\n catch (            Exception e) {\n              websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n              grpcCall.incomingStream=null;\n              log.error(\"Failure returned by gRPC service\",e);\n            }\n          }\n        }\n      }\n    }\n  }\n  finally {\n    Thread.currentThread().setContextClassLoader(originalCl);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 761,
      "astHeight" : 31
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 135,
        "startColumnNumber" : 36,
        "endLineNumber" : 135,
        "endColumnNumber" : 76
      },
      "nodeContext" : "grpcCall.incomingStream.onNext(message);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "io.quarkus.grpc.deployment.devmode.GrpcDevConsoleWebSocketListener.GrpcCallData"
  }, {
    "nodeContext" : "grpcCall",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 174,
      "startColumnNumber" : 40,
      "endLineNumber" : 174,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 174,
        "startColumnNumber" : 40,
        "endLineNumber" : 174,
        "endColumnNumber" : 63
      },
      "nodeContext" : "grpcCall.incomingStream",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 145,
        "startLineNumber" : 174,
        "startColumnNumber" : 40,
        "endLineNumber" : 175,
        "endColumnNumber" : 65
      },
      "nodeContext" : "grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 146,
        "startLineNumber" : 174,
        "startColumnNumber" : 40,
        "endLineNumber" : 175,
        "endColumnNumber" : 66
      },
      "nodeContext" : "grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 466,
        "startLineNumber" : 171,
        "startColumnNumber" : 99,
        "endLineNumber" : 177,
        "endColumnNumber" : 37
      },
      "nodeContext" : "{\n  grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n  grpcCall.incomingStream.onNext(message);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 24,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 864,
        "startLineNumber" : 170,
        "startColumnNumber" : 36,
        "endLineNumber" : 180,
        "endColumnNumber" : 37
      },
      "nodeContext" : "if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n  grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n  grpcCall.incomingStream.onNext(message);\n}\n else {\n  stubMethod.invoke(grpcStub,message,responseObserver);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 46,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3228,
        "startLineNumber" : 136,
        "startColumnNumber" : 39,
        "endLineNumber" : 181,
        "endColumnNumber" : 33
      },
      "nodeContext" : "{\n  StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n    @Override public void onNext(    Object value){\n      String body=null;\n      try {\n        body=JsonFormat.printer().print((MessageOrBuilder)value);\n      }\n catch (      InvalidProtocolBufferException e) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n        log.error(\"Failed to transform response to JSON\",e);\n      }\n      JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n      reply.put(\"body\",body);\n      websocketData.responseConsumer.accept(reply.encode());\n    }\n    @Override public void onError(    Throwable t){\n      websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n      grpcCall.incomingStream=null;\n      log.error(\"Failure returned by gRPC service\",t);\n    }\n    @Override public void onCompleted(){\n      websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n      grpcCall.incomingStream=null;\n    }\n  }\n;\n  if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n    grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n    grpcCall.incomingStream.onNext(message);\n  }\n else {\n    stubMethod.invoke(grpcStub,message,responseObserver);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 212,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3494,
        "startLineNumber" : 133,
        "startColumnNumber" : 32,
        "endLineNumber" : 181,
        "endColumnNumber" : 33
      },
      "nodeContext" : "if (grpcCall.incomingStream != null) {\n  grpcCall.incomingStream.onNext(message);\n}\n else {\n  StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n    @Override public void onNext(    Object value){\n      String body=null;\n      try {\n        body=JsonFormat.printer().print((MessageOrBuilder)value);\n      }\n catch (      InvalidProtocolBufferException e) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n        log.error(\"Failed to transform response to JSON\",e);\n      }\n      JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n      reply.put(\"body\",body);\n      websocketData.responseConsumer.accept(reply.encode());\n    }\n    @Override public void onError(    Throwable t){\n      websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n      grpcCall.incomingStream=null;\n      log.error(\"Failure returned by gRPC service\",t);\n    }\n    @Override public void onCompleted(){\n      websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n      grpcCall.incomingStream=null;\n    }\n  }\n;\n  if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n    grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n    grpcCall.incomingStream.onNext(message);\n  }\n else {\n    stubMethod.invoke(grpcStub,message,responseObserver);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 226,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4112,
        "startLineNumber" : 124,
        "startColumnNumber" : 32,
        "endLineNumber" : 182,
        "endColumnNumber" : 29
      },
      "nodeContext" : "{\n  Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n  Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n  JsonFormat.parser().merge(testJsonData,builder);\n  Message message=builder.build();\n  if (grpcCall.incomingStream != null) {\n    grpcCall.incomingStream.onNext(message);\n  }\n else {\n    StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n      @Override public void onNext(      Object value){\n        String body=null;\n        try {\n          body=JsonFormat.printer().print((MessageOrBuilder)value);\n        }\n catch (        InvalidProtocolBufferException e) {\n          websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n          log.error(\"Failed to transform response to JSON\",e);\n        }\n        JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n        reply.put(\"body\",body);\n        websocketData.responseConsumer.accept(reply.encode());\n      }\n      @Override public void onError(      Throwable t){\n        websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n        grpcCall.incomingStream=null;\n        log.error(\"Failure returned by gRPC service\",t);\n      }\n      @Override public void onCompleted(){\n        websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n        grpcCall.incomingStream=null;\n      }\n    }\n;\n    if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n      grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n      grpcCall.incomingStream.onNext(message);\n    }\n else {\n      stubMethod.invoke(grpcStub,message,responseObserver);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 268,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4632,
        "startLineNumber" : 124,
        "startColumnNumber" : 28,
        "endLineNumber" : 189,
        "endColumnNumber" : 29
      },
      "nodeContext" : "try {\n  Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n  Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n  JsonFormat.parser().merge(testJsonData,builder);\n  Message message=builder.build();\n  if (grpcCall.incomingStream != null) {\n    grpcCall.incomingStream.onNext(message);\n  }\n else {\n    StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n      @Override public void onNext(      Object value){\n        String body=null;\n        try {\n          body=JsonFormat.printer().print((MessageOrBuilder)value);\n        }\n catch (        InvalidProtocolBufferException e) {\n          websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n          log.error(\"Failed to transform response to JSON\",e);\n        }\n        JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n        reply.put(\"body\",body);\n        websocketData.responseConsumer.accept(reply.encode());\n      }\n      @Override public void onError(      Throwable t){\n        websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n        grpcCall.incomingStream=null;\n        log.error(\"Failure returned by gRPC service\",t);\n      }\n      @Override public void onCompleted(){\n        websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n        grpcCall.incomingStream=null;\n      }\n    }\n;\n    if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n      grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n      grpcCall.incomingStream.onNext(message);\n    }\n else {\n      stubMethod.invoke(grpcStub,message,responseObserver);\n    }\n  }\n}\n catch (Exception e) {\n  websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n  grpcCall.incomingStream=null;\n  log.error(\"Failure returned by gRPC service\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 307,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 4937,
        "startLineNumber" : 120,
        "startColumnNumber" : 95,
        "endLineNumber" : 190,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n  Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n  try {\n    Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n    Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n    JsonFormat.parser().merge(testJsonData,builder);\n    Message message=builder.build();\n    if (grpcCall.incomingStream != null) {\n      grpcCall.incomingStream.onNext(message);\n    }\n else {\n      StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n        @Override public void onNext(        Object value){\n          String body=null;\n          try {\n            body=JsonFormat.printer().print((MessageOrBuilder)value);\n          }\n catch (          InvalidProtocolBufferException e) {\n            websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n            log.error(\"Failed to transform response to JSON\",e);\n          }\n          JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n          reply.put(\"body\",body);\n          websocketData.responseConsumer.accept(reply.encode());\n        }\n        @Override public void onError(        Throwable t){\n          websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n          grpcCall.incomingStream=null;\n          log.error(\"Failure returned by gRPC service\",t);\n        }\n        @Override public void onCompleted(){\n          websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n          grpcCall.incomingStream=null;\n        }\n      }\n;\n      if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n        grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n        grpcCall.incomingStream.onNext(message);\n      }\n else {\n        stubMethod.invoke(grpcStub,message,responseObserver);\n      }\n    }\n  }\n catch (  Exception e) {\n    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n    grpcCall.incomingStream=null;\n    log.error(\"Failure returned by gRPC service\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 337,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5008,
        "startLineNumber" : 120,
        "startColumnNumber" : 24,
        "endLineNumber" : 190,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n  MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n  Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n  try {\n    Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n    Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n    JsonFormat.parser().merge(testJsonData,builder);\n    Message message=builder.build();\n    if (grpcCall.incomingStream != null) {\n      grpcCall.incomingStream.onNext(message);\n    }\n else {\n      StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n        @Override public void onNext(        Object value){\n          String body=null;\n          try {\n            body=JsonFormat.printer().print((MessageOrBuilder)value);\n          }\n catch (          InvalidProtocolBufferException e) {\n            websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n            log.error(\"Failed to transform response to JSON\",e);\n          }\n          JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n          reply.put(\"body\",body);\n          websocketData.responseConsumer.accept(reply.encode());\n        }\n        @Override public void onError(        Throwable t){\n          websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n          grpcCall.incomingStream=null;\n          log.error(\"Failure returned by gRPC service\",t);\n        }\n        @Override public void onCompleted(){\n          websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n          grpcCall.incomingStream=null;\n        }\n      }\n;\n      if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n        grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n        grpcCall.incomingStream.onNext(message);\n      }\n else {\n        stubMethod.invoke(grpcStub,message,responseObserver);\n      }\n    }\n  }\n catch (  Exception e) {\n    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n    grpcCall.incomingStream=null;\n    log.error(\"Failure returned by gRPC service\",e);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 344,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 5227,
        "startLineNumber" : 116,
        "startColumnNumber" : 27,
        "endLineNumber" : 191,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n  if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n    MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n    Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n    try {\n      Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n      Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n      JsonFormat.parser().merge(testJsonData,builder);\n      Message message=builder.build();\n      if (grpcCall.incomingStream != null) {\n        grpcCall.incomingStream.onNext(message);\n      }\n else {\n        StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n          @Override public void onNext(          Object value){\n            String body=null;\n            try {\n              body=JsonFormat.printer().print((MessageOrBuilder)value);\n            }\n catch (            InvalidProtocolBufferException e) {\n              websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n              log.error(\"Failed to transform response to JSON\",e);\n            }\n            JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n            reply.put(\"body\",body);\n            websocketData.responseConsumer.accept(reply.encode());\n          }\n          @Override public void onError(          Throwable t){\n            websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n            grpcCall.incomingStream=null;\n            log.error(\"Failure returned by gRPC service\",t);\n          }\n          @Override public void onCompleted(){\n            websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n            grpcCall.incomingStream=null;\n          }\n        }\n;\n        if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n          grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n          grpcCall.incomingStream.onNext(message);\n        }\n else {\n          stubMethod.invoke(grpcStub,message,responseObserver);\n        }\n      }\n    }\n catch (    Exception e) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n      grpcCall.incomingStream=null;\n      log.error(\"Failure returned by gRPC service\",e);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 357,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5489,
        "startLineNumber" : 113,
        "startColumnNumber" : 20,
        "endLineNumber" : 191,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (stubMethod == null) {\n  websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n  log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n}\n else {\n  MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n  if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n    MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n    Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n    try {\n      Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n      Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n      JsonFormat.parser().merge(testJsonData,builder);\n      Message message=builder.build();\n      if (grpcCall.incomingStream != null) {\n        grpcCall.incomingStream.onNext(message);\n      }\n else {\n        StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n          @Override public void onNext(          Object value){\n            String body=null;\n            try {\n              body=JsonFormat.printer().print((MessageOrBuilder)value);\n            }\n catch (            InvalidProtocolBufferException e) {\n              websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n              log.error(\"Failed to transform response to JSON\",e);\n            }\n            JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n            reply.put(\"body\",body);\n            websocketData.responseConsumer.accept(reply.encode());\n          }\n          @Override public void onError(          Throwable t){\n            websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n            grpcCall.incomingStream=null;\n            log.error(\"Failure returned by gRPC service\",t);\n          }\n          @Override public void onCompleted(){\n            websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n            grpcCall.incomingStream=null;\n          }\n        }\n;\n        if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n          grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n          grpcCall.incomingStream.onNext(message);\n        }\n else {\n          stubMethod.invoke(grpcStub,message,responseObserver);\n        }\n      }\n    }\n catch (    Exception e) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n      grpcCall.incomingStream=null;\n      log.error(\"Failure returned by gRPC service\",e);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 384,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 5926,
        "startLineNumber" : 103,
        "startColumnNumber" : 23,
        "endLineNumber" : 192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  Method stubMethod=null;\n  String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n  for (  Method method : grpcStub.getClass().getDeclaredMethods()) {\n    if (method.getName().equals(realMethodName)) {\n      stubMethod=method;\n    }\n  }\n  if (stubMethod == null) {\n    websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n    log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n  }\n else {\n    MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n    if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n      MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n      Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n      try {\n        Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n        Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n        JsonFormat.parser().merge(testJsonData,builder);\n        Message message=builder.build();\n        if (grpcCall.incomingStream != null) {\n          grpcCall.incomingStream.onNext(message);\n        }\n else {\n          StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n            @Override public void onNext(            Object value){\n              String body=null;\n              try {\n                body=JsonFormat.printer().print((MessageOrBuilder)value);\n              }\n catch (              InvalidProtocolBufferException e) {\n                websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                log.error(\"Failed to transform response to JSON\",e);\n              }\n              JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n              reply.put(\"body\",body);\n              websocketData.responseConsumer.accept(reply.encode());\n            }\n            @Override public void onError(            Throwable t){\n              websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n              grpcCall.incomingStream=null;\n              log.error(\"Failure returned by gRPC service\",t);\n            }\n            @Override public void onCompleted(){\n              websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n              grpcCall.incomingStream=null;\n            }\n          }\n;\n          if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n            grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n            grpcCall.incomingStream.onNext(message);\n          }\n else {\n            stubMethod.invoke(grpcStub,message,responseObserver);\n          }\n        }\n      }\n catch (      Exception e) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n        grpcCall.incomingStream=null;\n        log.error(\"Failure returned by gRPC service\",e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 424,
      "astHeight" : 24
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6084,
        "startLineNumber" : 101,
        "startColumnNumber" : 16,
        "endLineNumber" : 192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (methodDescriptor == null) {\n  websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n}\n else {\n  Method stubMethod=null;\n  String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n  for (  Method method : grpcStub.getClass().getDeclaredMethods()) {\n    if (method.getName().equals(realMethodName)) {\n      stubMethod=method;\n    }\n  }\n  if (stubMethod == null) {\n    websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n    log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n  }\n else {\n    MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n    if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n      MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n      Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n      try {\n        Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n        Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n        JsonFormat.parser().merge(testJsonData,builder);\n        Message message=builder.build();\n        if (grpcCall.incomingStream != null) {\n          grpcCall.incomingStream.onNext(message);\n        }\n else {\n          StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n            @Override public void onNext(            Object value){\n              String body=null;\n              try {\n                body=JsonFormat.printer().print((MessageOrBuilder)value);\n              }\n catch (              InvalidProtocolBufferException e) {\n                websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                log.error(\"Failed to transform response to JSON\",e);\n              }\n              JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n              reply.put(\"body\",body);\n              websocketData.responseConsumer.accept(reply.encode());\n            }\n            @Override public void onError(            Throwable t){\n              websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n              grpcCall.incomingStream=null;\n              log.error(\"Failure returned by gRPC service\",t);\n            }\n            @Override public void onCompleted(){\n              websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n              grpcCall.incomingStream=null;\n            }\n          }\n;\n          if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n            grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n            grpcCall.incomingStream.onNext(message);\n          }\n else {\n            stubMethod.invoke(grpcStub,message,responseObserver);\n          }\n        }\n      }\n catch (      Exception e) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n        grpcCall.incomingStream=null;\n        log.error(\"Failure returned by gRPC service\",e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 441,
      "astHeight" : 25
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 6560,
        "startLineNumber" : 93,
        "startColumnNumber" : 19,
        "endLineNumber" : 193,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n  MethodDescriptor<?,?> methodDescriptor=null;\n  for (  MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n    if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n      methodDescriptor=method;\n    }\n  }\n  if (methodDescriptor == null) {\n    websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n  }\n else {\n    Method stubMethod=null;\n    String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n    for (    Method method : grpcStub.getClass().getDeclaredMethods()) {\n      if (method.getName().equals(realMethodName)) {\n        stubMethod=method;\n      }\n    }\n    if (stubMethod == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n      log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n    }\n else {\n      MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n      if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n        MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n        Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n        try {\n          Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n          Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n          JsonFormat.parser().merge(testJsonData,builder);\n          Message message=builder.build();\n          if (grpcCall.incomingStream != null) {\n            grpcCall.incomingStream.onNext(message);\n          }\n else {\n            StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n              @Override public void onNext(              Object value){\n                String body=null;\n                try {\n                  body=JsonFormat.printer().print((MessageOrBuilder)value);\n                }\n catch (                InvalidProtocolBufferException e) {\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                  log.error(\"Failed to transform response to JSON\",e);\n                }\n                JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                reply.put(\"body\",body);\n                websocketData.responseConsumer.accept(reply.encode());\n              }\n              @Override public void onError(              Throwable t){\n                websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                grpcCall.incomingStream=null;\n                log.error(\"Failure returned by gRPC service\",t);\n              }\n              @Override public void onCompleted(){\n                websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                grpcCall.incomingStream=null;\n              }\n            }\n;\n            if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n              grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n              grpcCall.incomingStream.onNext(message);\n            }\n else {\n              stubMethod.invoke(grpcStub,message,responseObserver);\n            }\n          }\n        }\n catch (        Exception e) {\n          websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n          grpcCall.incomingStream=null;\n          log.error(\"Failure returned by gRPC service\",e);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 490,
      "astHeight" : 26
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6696,
        "startLineNumber" : 91,
        "startColumnNumber" : 12,
        "endLineNumber" : 193,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (grpcStub == null) {\n  websocketData.responseConsumer.accept(jsonResponse(id,\"NO_STUB\").encode());\n}\n else {\n  ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n  MethodDescriptor<?,?> methodDescriptor=null;\n  for (  MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n    if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n      methodDescriptor=method;\n    }\n  }\n  if (methodDescriptor == null) {\n    websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n  }\n else {\n    Method stubMethod=null;\n    String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n    for (    Method method : grpcStub.getClass().getDeclaredMethods()) {\n      if (method.getName().equals(realMethodName)) {\n        stubMethod=method;\n      }\n    }\n    if (stubMethod == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n      log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n    }\n else {\n      MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n      if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n        MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n        Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n        try {\n          Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n          Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n          JsonFormat.parser().merge(testJsonData,builder);\n          Message message=builder.build();\n          if (grpcCall.incomingStream != null) {\n            grpcCall.incomingStream.onNext(message);\n          }\n else {\n            StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n              @Override public void onNext(              Object value){\n                String body=null;\n                try {\n                  body=JsonFormat.printer().print((MessageOrBuilder)value);\n                }\n catch (                InvalidProtocolBufferException e) {\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                  log.error(\"Failed to transform response to JSON\",e);\n                }\n                JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                reply.put(\"body\",body);\n                websocketData.responseConsumer.accept(reply.encode());\n              }\n              @Override public void onError(              Throwable t){\n                websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                grpcCall.incomingStream=null;\n                log.error(\"Failure returned by gRPC service\",t);\n              }\n              @Override public void onCompleted(){\n                websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                grpcCall.incomingStream=null;\n              }\n            }\n;\n            if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n              grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n              grpcCall.incomingStream.onNext(message);\n            }\n else {\n              stubMethod.invoke(grpcStub,message,responseObserver);\n            }\n          }\n        }\n catch (        Exception e) {\n          websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n          grpcCall.incomingStream=null;\n          log.error(\"Failure returned by gRPC service\",e);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 507,
      "astHeight" : 27
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 8730,
        "startLineNumber" : 48,
        "startColumnNumber" : 12,
        "endLineNumber" : 194,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  JsonObject grpcRequest=new JsonObject(input);\n  Integer id=grpcRequest.getInteger(\"id\");\n  String serviceName=grpcRequest.getString(\"serviceName\");\n  String methodName=grpcRequest.getString(\"methodName\");\n  if (\"DISCONNECT\".equals(grpcRequest.getString(\"command\"))) {\n    GrpcCallData grpcCall=websocketData.callsInProgress.get(id);\n    if (grpcCall != null && grpcCall.incomingStream != null) {\n      grpcCall.incomingStream.onCompleted();\n    }\n    return;\n  }\n  GrpcCallData grpcCall;\n  if (websocketData.callsInProgress.containsKey(id)) {\n    grpcCall=websocketData.callsInProgress.get(id);\n  }\n else {\n    Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n    maybeOldCall.ifPresent(call -> {\n      if (call.incomingStream != null) {\n        call.incomingStream.onCompleted();\n      }\n      websocketData.callsInProgress.remove(call.requestId);\n    }\n);\n    grpcCall=new GrpcCallData();\n    grpcCall.serviceName=serviceName;\n    grpcCall.methodName=methodName;\n    grpcCall.requestId=id;\n    websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n  }\n  String testJsonData=grpcRequest.getString(\"content\");\n  Object grpcStub=grpcClientStubs.get(serviceName);\n  if (grpcStub == null) {\n    websocketData.responseConsumer.accept(jsonResponse(id,\"NO_STUB\").encode());\n  }\n else {\n    ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n    MethodDescriptor<?,?> methodDescriptor=null;\n    for (    MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n      if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n        methodDescriptor=method;\n      }\n    }\n    if (methodDescriptor == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n    }\n else {\n      Method stubMethod=null;\n      String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n      for (      Method method : grpcStub.getClass().getDeclaredMethods()) {\n        if (method.getName().equals(realMethodName)) {\n          stubMethod=method;\n        }\n      }\n      if (stubMethod == null) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n        log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n      }\n else {\n        MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n        if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n          MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n          Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n          try {\n            Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n            Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n            JsonFormat.parser().merge(testJsonData,builder);\n            Message message=builder.build();\n            if (grpcCall.incomingStream != null) {\n              grpcCall.incomingStream.onNext(message);\n            }\n else {\n              StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n                @Override public void onNext(                Object value){\n                  String body=null;\n                  try {\n                    body=JsonFormat.printer().print((MessageOrBuilder)value);\n                  }\n catch (                  InvalidProtocolBufferException e) {\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                    log.error(\"Failed to transform response to JSON\",e);\n                  }\n                  JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                  reply.put(\"body\",body);\n                  websocketData.responseConsumer.accept(reply.encode());\n                }\n                @Override public void onError(                Throwable t){\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                  grpcCall.incomingStream=null;\n                  log.error(\"Failure returned by gRPC service\",t);\n                }\n                @Override public void onCompleted(){\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                  grpcCall.incomingStream=null;\n                }\n              }\n;\n              if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n                grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n                grpcCall.incomingStream.onNext(message);\n              }\n else {\n                stubMethod.invoke(grpcStub,message,responseObserver);\n              }\n            }\n          }\n catch (          Exception e) {\n            websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n            grpcCall.incomingStream=null;\n            log.error(\"Failure returned by gRPC service\",e);\n          }\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 722,
      "astHeight" : 28
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8824,
        "startLineNumber" : 48,
        "startColumnNumber" : 8,
        "endLineNumber" : 196,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  JsonObject grpcRequest=new JsonObject(input);\n  Integer id=grpcRequest.getInteger(\"id\");\n  String serviceName=grpcRequest.getString(\"serviceName\");\n  String methodName=grpcRequest.getString(\"methodName\");\n  if (\"DISCONNECT\".equals(grpcRequest.getString(\"command\"))) {\n    GrpcCallData grpcCall=websocketData.callsInProgress.get(id);\n    if (grpcCall != null && grpcCall.incomingStream != null) {\n      grpcCall.incomingStream.onCompleted();\n    }\n    return;\n  }\n  GrpcCallData grpcCall;\n  if (websocketData.callsInProgress.containsKey(id)) {\n    grpcCall=websocketData.callsInProgress.get(id);\n  }\n else {\n    Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n    maybeOldCall.ifPresent(call -> {\n      if (call.incomingStream != null) {\n        call.incomingStream.onCompleted();\n      }\n      websocketData.callsInProgress.remove(call.requestId);\n    }\n);\n    grpcCall=new GrpcCallData();\n    grpcCall.serviceName=serviceName;\n    grpcCall.methodName=methodName;\n    grpcCall.requestId=id;\n    websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n  }\n  String testJsonData=grpcRequest.getString(\"content\");\n  Object grpcStub=grpcClientStubs.get(serviceName);\n  if (grpcStub == null) {\n    websocketData.responseConsumer.accept(jsonResponse(id,\"NO_STUB\").encode());\n  }\n else {\n    ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n    MethodDescriptor<?,?> methodDescriptor=null;\n    for (    MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n      if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n        methodDescriptor=method;\n      }\n    }\n    if (methodDescriptor == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n    }\n else {\n      Method stubMethod=null;\n      String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n      for (      Method method : grpcStub.getClass().getDeclaredMethods()) {\n        if (method.getName().equals(realMethodName)) {\n          stubMethod=method;\n        }\n      }\n      if (stubMethod == null) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n        log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n      }\n else {\n        MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n        if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n          MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n          Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n          try {\n            Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n            Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n            JsonFormat.parser().merge(testJsonData,builder);\n            Message message=builder.build();\n            if (grpcCall.incomingStream != null) {\n              grpcCall.incomingStream.onNext(message);\n            }\n else {\n              StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n                @Override public void onNext(                Object value){\n                  String body=null;\n                  try {\n                    body=JsonFormat.printer().print((MessageOrBuilder)value);\n                  }\n catch (                  InvalidProtocolBufferException e) {\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                    log.error(\"Failed to transform response to JSON\",e);\n                  }\n                  JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                  reply.put(\"body\",body);\n                  websocketData.responseConsumer.accept(reply.encode());\n                }\n                @Override public void onError(                Throwable t){\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                  grpcCall.incomingStream=null;\n                  log.error(\"Failure returned by gRPC service\",t);\n                }\n                @Override public void onCompleted(){\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                  grpcCall.incomingStream=null;\n                }\n              }\n;\n              if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n                grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n                grpcCall.incomingStream.onNext(message);\n              }\n else {\n                stubMethod.invoke(grpcStub,message,responseObserver);\n              }\n            }\n          }\n catch (          Exception e) {\n            websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n            grpcCall.incomingStream=null;\n            log.error(\"Failure returned by gRPC service\",e);\n          }\n        }\n      }\n    }\n  }\n}\n  finally {\n  Thread.currentThread().setContextClassLoader(originalCl);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 731,
      "astHeight" : 29
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8998,
        "startLineNumber" : 45,
        "startColumnNumber" : 67,
        "endLineNumber" : 197,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ClassLoader originalCl=Thread.currentThread().getContextClassLoader();\n  Thread.currentThread().setContextClassLoader(deploymentClassLoader);\n  try {\n    JsonObject grpcRequest=new JsonObject(input);\n    Integer id=grpcRequest.getInteger(\"id\");\n    String serviceName=grpcRequest.getString(\"serviceName\");\n    String methodName=grpcRequest.getString(\"methodName\");\n    if (\"DISCONNECT\".equals(grpcRequest.getString(\"command\"))) {\n      GrpcCallData grpcCall=websocketData.callsInProgress.get(id);\n      if (grpcCall != null && grpcCall.incomingStream != null) {\n        grpcCall.incomingStream.onCompleted();\n      }\n      return;\n    }\n    GrpcCallData grpcCall;\n    if (websocketData.callsInProgress.containsKey(id)) {\n      grpcCall=websocketData.callsInProgress.get(id);\n    }\n else {\n      Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n      maybeOldCall.ifPresent(call -> {\n        if (call.incomingStream != null) {\n          call.incomingStream.onCompleted();\n        }\n        websocketData.callsInProgress.remove(call.requestId);\n      }\n);\n      grpcCall=new GrpcCallData();\n      grpcCall.serviceName=serviceName;\n      grpcCall.methodName=methodName;\n      grpcCall.requestId=id;\n      websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n    }\n    String testJsonData=grpcRequest.getString(\"content\");\n    Object grpcStub=grpcClientStubs.get(serviceName);\n    if (grpcStub == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_STUB\").encode());\n    }\n else {\n      ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n      MethodDescriptor<?,?> methodDescriptor=null;\n      for (      MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n        if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n          methodDescriptor=method;\n        }\n      }\n      if (methodDescriptor == null) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n      }\n else {\n        Method stubMethod=null;\n        String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n        for (        Method method : grpcStub.getClass().getDeclaredMethods()) {\n          if (method.getName().equals(realMethodName)) {\n            stubMethod=method;\n          }\n        }\n        if (stubMethod == null) {\n          websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n          log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n        }\n else {\n          MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n          if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n            MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n            Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n            try {\n              Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n              Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n              JsonFormat.parser().merge(testJsonData,builder);\n              Message message=builder.build();\n              if (grpcCall.incomingStream != null) {\n                grpcCall.incomingStream.onNext(message);\n              }\n else {\n                StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n                  @Override public void onNext(                  Object value){\n                    String body=null;\n                    try {\n                      body=JsonFormat.printer().print((MessageOrBuilder)value);\n                    }\n catch (                    InvalidProtocolBufferException e) {\n                      websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                      log.error(\"Failed to transform response to JSON\",e);\n                    }\n                    JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                    reply.put(\"body\",body);\n                    websocketData.responseConsumer.accept(reply.encode());\n                  }\n                  @Override public void onError(                  Throwable t){\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                    grpcCall.incomingStream=null;\n                    log.error(\"Failure returned by gRPC service\",t);\n                  }\n                  @Override public void onCompleted(){\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                    grpcCall.incomingStream=null;\n                  }\n                }\n;\n                if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n                  grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n                  grpcCall.incomingStream.onNext(message);\n                }\n else {\n                  stubMethod.invoke(grpcStub,message,responseObserver);\n                }\n              }\n            }\n catch (            Exception e) {\n              websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n              grpcCall.incomingStream=null;\n              log.error(\"Failure returned by gRPC service\",e);\n            }\n          }\n        }\n      }\n    }\n  }\n  finally {\n    Thread.currentThread().setContextClassLoader(originalCl);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 749,
      "astHeight" : 30
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 9061,
        "startLineNumber" : 45,
        "startColumnNumber" : 4,
        "endLineNumber" : 197,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void handle(String input,WebSocketData websocketData){\n  ClassLoader originalCl=Thread.currentThread().getContextClassLoader();\n  Thread.currentThread().setContextClassLoader(deploymentClassLoader);\n  try {\n    JsonObject grpcRequest=new JsonObject(input);\n    Integer id=grpcRequest.getInteger(\"id\");\n    String serviceName=grpcRequest.getString(\"serviceName\");\n    String methodName=grpcRequest.getString(\"methodName\");\n    if (\"DISCONNECT\".equals(grpcRequest.getString(\"command\"))) {\n      GrpcCallData grpcCall=websocketData.callsInProgress.get(id);\n      if (grpcCall != null && grpcCall.incomingStream != null) {\n        grpcCall.incomingStream.onCompleted();\n      }\n      return;\n    }\n    GrpcCallData grpcCall;\n    if (websocketData.callsInProgress.containsKey(id)) {\n      grpcCall=websocketData.callsInProgress.get(id);\n    }\n else {\n      Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n      maybeOldCall.ifPresent(call -> {\n        if (call.incomingStream != null) {\n          call.incomingStream.onCompleted();\n        }\n        websocketData.callsInProgress.remove(call.requestId);\n      }\n);\n      grpcCall=new GrpcCallData();\n      grpcCall.serviceName=serviceName;\n      grpcCall.methodName=methodName;\n      grpcCall.requestId=id;\n      websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n    }\n    String testJsonData=grpcRequest.getString(\"content\");\n    Object grpcStub=grpcClientStubs.get(serviceName);\n    if (grpcStub == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_STUB\").encode());\n    }\n else {\n      ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n      MethodDescriptor<?,?> methodDescriptor=null;\n      for (      MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n        if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n          methodDescriptor=method;\n        }\n      }\n      if (methodDescriptor == null) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n      }\n else {\n        Method stubMethod=null;\n        String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n        for (        Method method : grpcStub.getClass().getDeclaredMethods()) {\n          if (method.getName().equals(realMethodName)) {\n            stubMethod=method;\n          }\n        }\n        if (stubMethod == null) {\n          websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n          log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n        }\n else {\n          MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n          if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n            MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n            Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n            try {\n              Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n              Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n              JsonFormat.parser().merge(testJsonData,builder);\n              Message message=builder.build();\n              if (grpcCall.incomingStream != null) {\n                grpcCall.incomingStream.onNext(message);\n              }\n else {\n                StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n                  @Override public void onNext(                  Object value){\n                    String body=null;\n                    try {\n                      body=JsonFormat.printer().print((MessageOrBuilder)value);\n                    }\n catch (                    InvalidProtocolBufferException e) {\n                      websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                      log.error(\"Failed to transform response to JSON\",e);\n                    }\n                    JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                    reply.put(\"body\",body);\n                    websocketData.responseConsumer.accept(reply.encode());\n                  }\n                  @Override public void onError(                  Throwable t){\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                    grpcCall.incomingStream=null;\n                    log.error(\"Failure returned by gRPC service\",t);\n                  }\n                  @Override public void onCompleted(){\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                    grpcCall.incomingStream=null;\n                  }\n                }\n;\n                if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n                  grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n                  grpcCall.incomingStream.onNext(message);\n                }\n else {\n                  stubMethod.invoke(grpcStub,message,responseObserver);\n                }\n              }\n            }\n catch (            Exception e) {\n              websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n              grpcCall.incomingStream=null;\n              log.error(\"Failure returned by gRPC service\",e);\n            }\n          }\n        }\n      }\n    }\n  }\n  finally {\n    Thread.currentThread().setContextClassLoader(originalCl);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 761,
      "astHeight" : 31
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 174,
        "startColumnNumber" : 40,
        "endLineNumber" : 174,
        "endColumnNumber" : 63
      },
      "nodeContext" : "grpcCall.incomingStream",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "io.quarkus.grpc.deployment.devmode.GrpcDevConsoleWebSocketListener.GrpcCallData"
  }, {
    "nodeContext" : "grpcCall",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 176,
      "startColumnNumber" : 40,
      "endLineNumber" : 176,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 176,
        "startColumnNumber" : 40,
        "endLineNumber" : 176,
        "endColumnNumber" : 63
      },
      "nodeContext" : "grpcCall.incomingStream",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 176,
        "startColumnNumber" : 40,
        "endLineNumber" : 176,
        "endColumnNumber" : 79
      },
      "nodeContext" : "grpcCall.incomingStream.onNext(message)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 176,
        "startColumnNumber" : 40,
        "endLineNumber" : 176,
        "endColumnNumber" : 80
      },
      "nodeContext" : "grpcCall.incomingStream.onNext(message);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 466,
        "startLineNumber" : 171,
        "startColumnNumber" : 99,
        "endLineNumber" : 177,
        "endColumnNumber" : 37
      },
      "nodeContext" : "{\n  grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n  grpcCall.incomingStream.onNext(message);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 24,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 864,
        "startLineNumber" : 170,
        "startColumnNumber" : 36,
        "endLineNumber" : 180,
        "endColumnNumber" : 37
      },
      "nodeContext" : "if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n  grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n  grpcCall.incomingStream.onNext(message);\n}\n else {\n  stubMethod.invoke(grpcStub,message,responseObserver);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 46,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 3228,
        "startLineNumber" : 136,
        "startColumnNumber" : 39,
        "endLineNumber" : 181,
        "endColumnNumber" : 33
      },
      "nodeContext" : "{\n  StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n    @Override public void onNext(    Object value){\n      String body=null;\n      try {\n        body=JsonFormat.printer().print((MessageOrBuilder)value);\n      }\n catch (      InvalidProtocolBufferException e) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n        log.error(\"Failed to transform response to JSON\",e);\n      }\n      JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n      reply.put(\"body\",body);\n      websocketData.responseConsumer.accept(reply.encode());\n    }\n    @Override public void onError(    Throwable t){\n      websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n      grpcCall.incomingStream=null;\n      log.error(\"Failure returned by gRPC service\",t);\n    }\n    @Override public void onCompleted(){\n      websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n      grpcCall.incomingStream=null;\n    }\n  }\n;\n  if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n    grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n    grpcCall.incomingStream.onNext(message);\n  }\n else {\n    stubMethod.invoke(grpcStub,message,responseObserver);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 212,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3494,
        "startLineNumber" : 133,
        "startColumnNumber" : 32,
        "endLineNumber" : 181,
        "endColumnNumber" : 33
      },
      "nodeContext" : "if (grpcCall.incomingStream != null) {\n  grpcCall.incomingStream.onNext(message);\n}\n else {\n  StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n    @Override public void onNext(    Object value){\n      String body=null;\n      try {\n        body=JsonFormat.printer().print((MessageOrBuilder)value);\n      }\n catch (      InvalidProtocolBufferException e) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n        log.error(\"Failed to transform response to JSON\",e);\n      }\n      JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n      reply.put(\"body\",body);\n      websocketData.responseConsumer.accept(reply.encode());\n    }\n    @Override public void onError(    Throwable t){\n      websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n      grpcCall.incomingStream=null;\n      log.error(\"Failure returned by gRPC service\",t);\n    }\n    @Override public void onCompleted(){\n      websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n      grpcCall.incomingStream=null;\n    }\n  }\n;\n  if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n    grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n    grpcCall.incomingStream.onNext(message);\n  }\n else {\n    stubMethod.invoke(grpcStub,message,responseObserver);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 226,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 4112,
        "startLineNumber" : 124,
        "startColumnNumber" : 32,
        "endLineNumber" : 182,
        "endColumnNumber" : 29
      },
      "nodeContext" : "{\n  Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n  Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n  JsonFormat.parser().merge(testJsonData,builder);\n  Message message=builder.build();\n  if (grpcCall.incomingStream != null) {\n    grpcCall.incomingStream.onNext(message);\n  }\n else {\n    StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n      @Override public void onNext(      Object value){\n        String body=null;\n        try {\n          body=JsonFormat.printer().print((MessageOrBuilder)value);\n        }\n catch (        InvalidProtocolBufferException e) {\n          websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n          log.error(\"Failed to transform response to JSON\",e);\n        }\n        JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n        reply.put(\"body\",body);\n        websocketData.responseConsumer.accept(reply.encode());\n      }\n      @Override public void onError(      Throwable t){\n        websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n        grpcCall.incomingStream=null;\n        log.error(\"Failure returned by gRPC service\",t);\n      }\n      @Override public void onCompleted(){\n        websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n        grpcCall.incomingStream=null;\n      }\n    }\n;\n    if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n      grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n      grpcCall.incomingStream.onNext(message);\n    }\n else {\n      stubMethod.invoke(grpcStub,message,responseObserver);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 268,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4632,
        "startLineNumber" : 124,
        "startColumnNumber" : 28,
        "endLineNumber" : 189,
        "endColumnNumber" : 29
      },
      "nodeContext" : "try {\n  Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n  Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n  JsonFormat.parser().merge(testJsonData,builder);\n  Message message=builder.build();\n  if (grpcCall.incomingStream != null) {\n    grpcCall.incomingStream.onNext(message);\n  }\n else {\n    StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n      @Override public void onNext(      Object value){\n        String body=null;\n        try {\n          body=JsonFormat.printer().print((MessageOrBuilder)value);\n        }\n catch (        InvalidProtocolBufferException e) {\n          websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n          log.error(\"Failed to transform response to JSON\",e);\n        }\n        JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n        reply.put(\"body\",body);\n        websocketData.responseConsumer.accept(reply.encode());\n      }\n      @Override public void onError(      Throwable t){\n        websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n        grpcCall.incomingStream=null;\n        log.error(\"Failure returned by gRPC service\",t);\n      }\n      @Override public void onCompleted(){\n        websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n        grpcCall.incomingStream=null;\n      }\n    }\n;\n    if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n      grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n      grpcCall.incomingStream.onNext(message);\n    }\n else {\n      stubMethod.invoke(grpcStub,message,responseObserver);\n    }\n  }\n}\n catch (Exception e) {\n  websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n  grpcCall.incomingStream=null;\n  log.error(\"Failure returned by gRPC service\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 307,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 4937,
        "startLineNumber" : 120,
        "startColumnNumber" : 95,
        "endLineNumber" : 190,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n  Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n  try {\n    Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n    Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n    JsonFormat.parser().merge(testJsonData,builder);\n    Message message=builder.build();\n    if (grpcCall.incomingStream != null) {\n      grpcCall.incomingStream.onNext(message);\n    }\n else {\n      StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n        @Override public void onNext(        Object value){\n          String body=null;\n          try {\n            body=JsonFormat.printer().print((MessageOrBuilder)value);\n          }\n catch (          InvalidProtocolBufferException e) {\n            websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n            log.error(\"Failed to transform response to JSON\",e);\n          }\n          JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n          reply.put(\"body\",body);\n          websocketData.responseConsumer.accept(reply.encode());\n        }\n        @Override public void onError(        Throwable t){\n          websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n          grpcCall.incomingStream=null;\n          log.error(\"Failure returned by gRPC service\",t);\n        }\n        @Override public void onCompleted(){\n          websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n          grpcCall.incomingStream=null;\n        }\n      }\n;\n      if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n        grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n        grpcCall.incomingStream.onNext(message);\n      }\n else {\n        stubMethod.invoke(grpcStub,message,responseObserver);\n      }\n    }\n  }\n catch (  Exception e) {\n    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n    grpcCall.incomingStream=null;\n    log.error(\"Failure returned by gRPC service\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 337,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5008,
        "startLineNumber" : 120,
        "startColumnNumber" : 24,
        "endLineNumber" : 190,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n  MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n  Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n  try {\n    Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n    Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n    JsonFormat.parser().merge(testJsonData,builder);\n    Message message=builder.build();\n    if (grpcCall.incomingStream != null) {\n      grpcCall.incomingStream.onNext(message);\n    }\n else {\n      StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n        @Override public void onNext(        Object value){\n          String body=null;\n          try {\n            body=JsonFormat.printer().print((MessageOrBuilder)value);\n          }\n catch (          InvalidProtocolBufferException e) {\n            websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n            log.error(\"Failed to transform response to JSON\",e);\n          }\n          JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n          reply.put(\"body\",body);\n          websocketData.responseConsumer.accept(reply.encode());\n        }\n        @Override public void onError(        Throwable t){\n          websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n          grpcCall.incomingStream=null;\n          log.error(\"Failure returned by gRPC service\",t);\n        }\n        @Override public void onCompleted(){\n          websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n          grpcCall.incomingStream=null;\n        }\n      }\n;\n      if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n        grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n        grpcCall.incomingStream.onNext(message);\n      }\n else {\n        stubMethod.invoke(grpcStub,message,responseObserver);\n      }\n    }\n  }\n catch (  Exception e) {\n    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n    grpcCall.incomingStream=null;\n    log.error(\"Failure returned by gRPC service\",e);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 344,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 5227,
        "startLineNumber" : 116,
        "startColumnNumber" : 27,
        "endLineNumber" : 191,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n  if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n    MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n    Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n    try {\n      Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n      Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n      JsonFormat.parser().merge(testJsonData,builder);\n      Message message=builder.build();\n      if (grpcCall.incomingStream != null) {\n        grpcCall.incomingStream.onNext(message);\n      }\n else {\n        StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n          @Override public void onNext(          Object value){\n            String body=null;\n            try {\n              body=JsonFormat.printer().print((MessageOrBuilder)value);\n            }\n catch (            InvalidProtocolBufferException e) {\n              websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n              log.error(\"Failed to transform response to JSON\",e);\n            }\n            JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n            reply.put(\"body\",body);\n            websocketData.responseConsumer.accept(reply.encode());\n          }\n          @Override public void onError(          Throwable t){\n            websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n            grpcCall.incomingStream=null;\n            log.error(\"Failure returned by gRPC service\",t);\n          }\n          @Override public void onCompleted(){\n            websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n            grpcCall.incomingStream=null;\n          }\n        }\n;\n        if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n          grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n          grpcCall.incomingStream.onNext(message);\n        }\n else {\n          stubMethod.invoke(grpcStub,message,responseObserver);\n        }\n      }\n    }\n catch (    Exception e) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n      grpcCall.incomingStream=null;\n      log.error(\"Failure returned by gRPC service\",e);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 357,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5489,
        "startLineNumber" : 113,
        "startColumnNumber" : 20,
        "endLineNumber" : 191,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (stubMethod == null) {\n  websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n  log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n}\n else {\n  MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n  if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n    MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n    Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n    try {\n      Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n      Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n      JsonFormat.parser().merge(testJsonData,builder);\n      Message message=builder.build();\n      if (grpcCall.incomingStream != null) {\n        grpcCall.incomingStream.onNext(message);\n      }\n else {\n        StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n          @Override public void onNext(          Object value){\n            String body=null;\n            try {\n              body=JsonFormat.printer().print((MessageOrBuilder)value);\n            }\n catch (            InvalidProtocolBufferException e) {\n              websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n              log.error(\"Failed to transform response to JSON\",e);\n            }\n            JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n            reply.put(\"body\",body);\n            websocketData.responseConsumer.accept(reply.encode());\n          }\n          @Override public void onError(          Throwable t){\n            websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n            grpcCall.incomingStream=null;\n            log.error(\"Failure returned by gRPC service\",t);\n          }\n          @Override public void onCompleted(){\n            websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n            grpcCall.incomingStream=null;\n          }\n        }\n;\n        if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n          grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n          grpcCall.incomingStream.onNext(message);\n        }\n else {\n          stubMethod.invoke(grpcStub,message,responseObserver);\n        }\n      }\n    }\n catch (    Exception e) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n      grpcCall.incomingStream=null;\n      log.error(\"Failure returned by gRPC service\",e);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 384,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 5926,
        "startLineNumber" : 103,
        "startColumnNumber" : 23,
        "endLineNumber" : 192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  Method stubMethod=null;\n  String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n  for (  Method method : grpcStub.getClass().getDeclaredMethods()) {\n    if (method.getName().equals(realMethodName)) {\n      stubMethod=method;\n    }\n  }\n  if (stubMethod == null) {\n    websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n    log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n  }\n else {\n    MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n    if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n      MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n      Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n      try {\n        Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n        Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n        JsonFormat.parser().merge(testJsonData,builder);\n        Message message=builder.build();\n        if (grpcCall.incomingStream != null) {\n          grpcCall.incomingStream.onNext(message);\n        }\n else {\n          StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n            @Override public void onNext(            Object value){\n              String body=null;\n              try {\n                body=JsonFormat.printer().print((MessageOrBuilder)value);\n              }\n catch (              InvalidProtocolBufferException e) {\n                websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                log.error(\"Failed to transform response to JSON\",e);\n              }\n              JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n              reply.put(\"body\",body);\n              websocketData.responseConsumer.accept(reply.encode());\n            }\n            @Override public void onError(            Throwable t){\n              websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n              grpcCall.incomingStream=null;\n              log.error(\"Failure returned by gRPC service\",t);\n            }\n            @Override public void onCompleted(){\n              websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n              grpcCall.incomingStream=null;\n            }\n          }\n;\n          if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n            grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n            grpcCall.incomingStream.onNext(message);\n          }\n else {\n            stubMethod.invoke(grpcStub,message,responseObserver);\n          }\n        }\n      }\n catch (      Exception e) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n        grpcCall.incomingStream=null;\n        log.error(\"Failure returned by gRPC service\",e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 424,
      "astHeight" : 24
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6084,
        "startLineNumber" : 101,
        "startColumnNumber" : 16,
        "endLineNumber" : 192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (methodDescriptor == null) {\n  websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n}\n else {\n  Method stubMethod=null;\n  String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n  for (  Method method : grpcStub.getClass().getDeclaredMethods()) {\n    if (method.getName().equals(realMethodName)) {\n      stubMethod=method;\n    }\n  }\n  if (stubMethod == null) {\n    websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n    log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n  }\n else {\n    MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n    if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n      MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n      Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n      try {\n        Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n        Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n        JsonFormat.parser().merge(testJsonData,builder);\n        Message message=builder.build();\n        if (grpcCall.incomingStream != null) {\n          grpcCall.incomingStream.onNext(message);\n        }\n else {\n          StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n            @Override public void onNext(            Object value){\n              String body=null;\n              try {\n                body=JsonFormat.printer().print((MessageOrBuilder)value);\n              }\n catch (              InvalidProtocolBufferException e) {\n                websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                log.error(\"Failed to transform response to JSON\",e);\n              }\n              JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n              reply.put(\"body\",body);\n              websocketData.responseConsumer.accept(reply.encode());\n            }\n            @Override public void onError(            Throwable t){\n              websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n              grpcCall.incomingStream=null;\n              log.error(\"Failure returned by gRPC service\",t);\n            }\n            @Override public void onCompleted(){\n              websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n              grpcCall.incomingStream=null;\n            }\n          }\n;\n          if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n            grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n            grpcCall.incomingStream.onNext(message);\n          }\n else {\n            stubMethod.invoke(grpcStub,message,responseObserver);\n          }\n        }\n      }\n catch (      Exception e) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n        grpcCall.incomingStream=null;\n        log.error(\"Failure returned by gRPC service\",e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 441,
      "astHeight" : 25
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 6560,
        "startLineNumber" : 93,
        "startColumnNumber" : 19,
        "endLineNumber" : 193,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n  MethodDescriptor<?,?> methodDescriptor=null;\n  for (  MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n    if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n      methodDescriptor=method;\n    }\n  }\n  if (methodDescriptor == null) {\n    websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n  }\n else {\n    Method stubMethod=null;\n    String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n    for (    Method method : grpcStub.getClass().getDeclaredMethods()) {\n      if (method.getName().equals(realMethodName)) {\n        stubMethod=method;\n      }\n    }\n    if (stubMethod == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n      log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n    }\n else {\n      MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n      if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n        MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n        Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n        try {\n          Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n          Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n          JsonFormat.parser().merge(testJsonData,builder);\n          Message message=builder.build();\n          if (grpcCall.incomingStream != null) {\n            grpcCall.incomingStream.onNext(message);\n          }\n else {\n            StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n              @Override public void onNext(              Object value){\n                String body=null;\n                try {\n                  body=JsonFormat.printer().print((MessageOrBuilder)value);\n                }\n catch (                InvalidProtocolBufferException e) {\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                  log.error(\"Failed to transform response to JSON\",e);\n                }\n                JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                reply.put(\"body\",body);\n                websocketData.responseConsumer.accept(reply.encode());\n              }\n              @Override public void onError(              Throwable t){\n                websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                grpcCall.incomingStream=null;\n                log.error(\"Failure returned by gRPC service\",t);\n              }\n              @Override public void onCompleted(){\n                websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                grpcCall.incomingStream=null;\n              }\n            }\n;\n            if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n              grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n              grpcCall.incomingStream.onNext(message);\n            }\n else {\n              stubMethod.invoke(grpcStub,message,responseObserver);\n            }\n          }\n        }\n catch (        Exception e) {\n          websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n          grpcCall.incomingStream=null;\n          log.error(\"Failure returned by gRPC service\",e);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 490,
      "astHeight" : 26
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6696,
        "startLineNumber" : 91,
        "startColumnNumber" : 12,
        "endLineNumber" : 193,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (grpcStub == null) {\n  websocketData.responseConsumer.accept(jsonResponse(id,\"NO_STUB\").encode());\n}\n else {\n  ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n  MethodDescriptor<?,?> methodDescriptor=null;\n  for (  MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n    if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n      methodDescriptor=method;\n    }\n  }\n  if (methodDescriptor == null) {\n    websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n  }\n else {\n    Method stubMethod=null;\n    String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n    for (    Method method : grpcStub.getClass().getDeclaredMethods()) {\n      if (method.getName().equals(realMethodName)) {\n        stubMethod=method;\n      }\n    }\n    if (stubMethod == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n      log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n    }\n else {\n      MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n      if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n        MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n        Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n        try {\n          Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n          Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n          JsonFormat.parser().merge(testJsonData,builder);\n          Message message=builder.build();\n          if (grpcCall.incomingStream != null) {\n            grpcCall.incomingStream.onNext(message);\n          }\n else {\n            StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n              @Override public void onNext(              Object value){\n                String body=null;\n                try {\n                  body=JsonFormat.printer().print((MessageOrBuilder)value);\n                }\n catch (                InvalidProtocolBufferException e) {\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                  log.error(\"Failed to transform response to JSON\",e);\n                }\n                JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                reply.put(\"body\",body);\n                websocketData.responseConsumer.accept(reply.encode());\n              }\n              @Override public void onError(              Throwable t){\n                websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                grpcCall.incomingStream=null;\n                log.error(\"Failure returned by gRPC service\",t);\n              }\n              @Override public void onCompleted(){\n                websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                grpcCall.incomingStream=null;\n              }\n            }\n;\n            if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n              grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n              grpcCall.incomingStream.onNext(message);\n            }\n else {\n              stubMethod.invoke(grpcStub,message,responseObserver);\n            }\n          }\n        }\n catch (        Exception e) {\n          websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n          grpcCall.incomingStream=null;\n          log.error(\"Failure returned by gRPC service\",e);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 507,
      "astHeight" : 27
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 8730,
        "startLineNumber" : 48,
        "startColumnNumber" : 12,
        "endLineNumber" : 194,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  JsonObject grpcRequest=new JsonObject(input);\n  Integer id=grpcRequest.getInteger(\"id\");\n  String serviceName=grpcRequest.getString(\"serviceName\");\n  String methodName=grpcRequest.getString(\"methodName\");\n  if (\"DISCONNECT\".equals(grpcRequest.getString(\"command\"))) {\n    GrpcCallData grpcCall=websocketData.callsInProgress.get(id);\n    if (grpcCall != null && grpcCall.incomingStream != null) {\n      grpcCall.incomingStream.onCompleted();\n    }\n    return;\n  }\n  GrpcCallData grpcCall;\n  if (websocketData.callsInProgress.containsKey(id)) {\n    grpcCall=websocketData.callsInProgress.get(id);\n  }\n else {\n    Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n    maybeOldCall.ifPresent(call -> {\n      if (call.incomingStream != null) {\n        call.incomingStream.onCompleted();\n      }\n      websocketData.callsInProgress.remove(call.requestId);\n    }\n);\n    grpcCall=new GrpcCallData();\n    grpcCall.serviceName=serviceName;\n    grpcCall.methodName=methodName;\n    grpcCall.requestId=id;\n    websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n  }\n  String testJsonData=grpcRequest.getString(\"content\");\n  Object grpcStub=grpcClientStubs.get(serviceName);\n  if (grpcStub == null) {\n    websocketData.responseConsumer.accept(jsonResponse(id,\"NO_STUB\").encode());\n  }\n else {\n    ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n    MethodDescriptor<?,?> methodDescriptor=null;\n    for (    MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n      if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n        methodDescriptor=method;\n      }\n    }\n    if (methodDescriptor == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n    }\n else {\n      Method stubMethod=null;\n      String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n      for (      Method method : grpcStub.getClass().getDeclaredMethods()) {\n        if (method.getName().equals(realMethodName)) {\n          stubMethod=method;\n        }\n      }\n      if (stubMethod == null) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n        log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n      }\n else {\n        MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n        if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n          MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n          Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n          try {\n            Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n            Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n            JsonFormat.parser().merge(testJsonData,builder);\n            Message message=builder.build();\n            if (grpcCall.incomingStream != null) {\n              grpcCall.incomingStream.onNext(message);\n            }\n else {\n              StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n                @Override public void onNext(                Object value){\n                  String body=null;\n                  try {\n                    body=JsonFormat.printer().print((MessageOrBuilder)value);\n                  }\n catch (                  InvalidProtocolBufferException e) {\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                    log.error(\"Failed to transform response to JSON\",e);\n                  }\n                  JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                  reply.put(\"body\",body);\n                  websocketData.responseConsumer.accept(reply.encode());\n                }\n                @Override public void onError(                Throwable t){\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                  grpcCall.incomingStream=null;\n                  log.error(\"Failure returned by gRPC service\",t);\n                }\n                @Override public void onCompleted(){\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                  grpcCall.incomingStream=null;\n                }\n              }\n;\n              if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n                grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n                grpcCall.incomingStream.onNext(message);\n              }\n else {\n                stubMethod.invoke(grpcStub,message,responseObserver);\n              }\n            }\n          }\n catch (          Exception e) {\n            websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n            grpcCall.incomingStream=null;\n            log.error(\"Failure returned by gRPC service\",e);\n          }\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 722,
      "astHeight" : 28
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8824,
        "startLineNumber" : 48,
        "startColumnNumber" : 8,
        "endLineNumber" : 196,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  JsonObject grpcRequest=new JsonObject(input);\n  Integer id=grpcRequest.getInteger(\"id\");\n  String serviceName=grpcRequest.getString(\"serviceName\");\n  String methodName=grpcRequest.getString(\"methodName\");\n  if (\"DISCONNECT\".equals(grpcRequest.getString(\"command\"))) {\n    GrpcCallData grpcCall=websocketData.callsInProgress.get(id);\n    if (grpcCall != null && grpcCall.incomingStream != null) {\n      grpcCall.incomingStream.onCompleted();\n    }\n    return;\n  }\n  GrpcCallData grpcCall;\n  if (websocketData.callsInProgress.containsKey(id)) {\n    grpcCall=websocketData.callsInProgress.get(id);\n  }\n else {\n    Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n    maybeOldCall.ifPresent(call -> {\n      if (call.incomingStream != null) {\n        call.incomingStream.onCompleted();\n      }\n      websocketData.callsInProgress.remove(call.requestId);\n    }\n);\n    grpcCall=new GrpcCallData();\n    grpcCall.serviceName=serviceName;\n    grpcCall.methodName=methodName;\n    grpcCall.requestId=id;\n    websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n  }\n  String testJsonData=grpcRequest.getString(\"content\");\n  Object grpcStub=grpcClientStubs.get(serviceName);\n  if (grpcStub == null) {\n    websocketData.responseConsumer.accept(jsonResponse(id,\"NO_STUB\").encode());\n  }\n else {\n    ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n    MethodDescriptor<?,?> methodDescriptor=null;\n    for (    MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n      if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n        methodDescriptor=method;\n      }\n    }\n    if (methodDescriptor == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n    }\n else {\n      Method stubMethod=null;\n      String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n      for (      Method method : grpcStub.getClass().getDeclaredMethods()) {\n        if (method.getName().equals(realMethodName)) {\n          stubMethod=method;\n        }\n      }\n      if (stubMethod == null) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n        log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n      }\n else {\n        MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n        if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n          MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n          Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n          try {\n            Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n            Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n            JsonFormat.parser().merge(testJsonData,builder);\n            Message message=builder.build();\n            if (grpcCall.incomingStream != null) {\n              grpcCall.incomingStream.onNext(message);\n            }\n else {\n              StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n                @Override public void onNext(                Object value){\n                  String body=null;\n                  try {\n                    body=JsonFormat.printer().print((MessageOrBuilder)value);\n                  }\n catch (                  InvalidProtocolBufferException e) {\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                    log.error(\"Failed to transform response to JSON\",e);\n                  }\n                  JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                  reply.put(\"body\",body);\n                  websocketData.responseConsumer.accept(reply.encode());\n                }\n                @Override public void onError(                Throwable t){\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                  grpcCall.incomingStream=null;\n                  log.error(\"Failure returned by gRPC service\",t);\n                }\n                @Override public void onCompleted(){\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                  grpcCall.incomingStream=null;\n                }\n              }\n;\n              if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n                grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n                grpcCall.incomingStream.onNext(message);\n              }\n else {\n                stubMethod.invoke(grpcStub,message,responseObserver);\n              }\n            }\n          }\n catch (          Exception e) {\n            websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n            grpcCall.incomingStream=null;\n            log.error(\"Failure returned by gRPC service\",e);\n          }\n        }\n      }\n    }\n  }\n}\n  finally {\n  Thread.currentThread().setContextClassLoader(originalCl);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 731,
      "astHeight" : 29
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8998,
        "startLineNumber" : 45,
        "startColumnNumber" : 67,
        "endLineNumber" : 197,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ClassLoader originalCl=Thread.currentThread().getContextClassLoader();\n  Thread.currentThread().setContextClassLoader(deploymentClassLoader);\n  try {\n    JsonObject grpcRequest=new JsonObject(input);\n    Integer id=grpcRequest.getInteger(\"id\");\n    String serviceName=grpcRequest.getString(\"serviceName\");\n    String methodName=grpcRequest.getString(\"methodName\");\n    if (\"DISCONNECT\".equals(grpcRequest.getString(\"command\"))) {\n      GrpcCallData grpcCall=websocketData.callsInProgress.get(id);\n      if (grpcCall != null && grpcCall.incomingStream != null) {\n        grpcCall.incomingStream.onCompleted();\n      }\n      return;\n    }\n    GrpcCallData grpcCall;\n    if (websocketData.callsInProgress.containsKey(id)) {\n      grpcCall=websocketData.callsInProgress.get(id);\n    }\n else {\n      Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n      maybeOldCall.ifPresent(call -> {\n        if (call.incomingStream != null) {\n          call.incomingStream.onCompleted();\n        }\n        websocketData.callsInProgress.remove(call.requestId);\n      }\n);\n      grpcCall=new GrpcCallData();\n      grpcCall.serviceName=serviceName;\n      grpcCall.methodName=methodName;\n      grpcCall.requestId=id;\n      websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n    }\n    String testJsonData=grpcRequest.getString(\"content\");\n    Object grpcStub=grpcClientStubs.get(serviceName);\n    if (grpcStub == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_STUB\").encode());\n    }\n else {\n      ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n      MethodDescriptor<?,?> methodDescriptor=null;\n      for (      MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n        if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n          methodDescriptor=method;\n        }\n      }\n      if (methodDescriptor == null) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n      }\n else {\n        Method stubMethod=null;\n        String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n        for (        Method method : grpcStub.getClass().getDeclaredMethods()) {\n          if (method.getName().equals(realMethodName)) {\n            stubMethod=method;\n          }\n        }\n        if (stubMethod == null) {\n          websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n          log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n        }\n else {\n          MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n          if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n            MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n            Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n            try {\n              Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n              Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n              JsonFormat.parser().merge(testJsonData,builder);\n              Message message=builder.build();\n              if (grpcCall.incomingStream != null) {\n                grpcCall.incomingStream.onNext(message);\n              }\n else {\n                StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n                  @Override public void onNext(                  Object value){\n                    String body=null;\n                    try {\n                      body=JsonFormat.printer().print((MessageOrBuilder)value);\n                    }\n catch (                    InvalidProtocolBufferException e) {\n                      websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                      log.error(\"Failed to transform response to JSON\",e);\n                    }\n                    JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                    reply.put(\"body\",body);\n                    websocketData.responseConsumer.accept(reply.encode());\n                  }\n                  @Override public void onError(                  Throwable t){\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                    grpcCall.incomingStream=null;\n                    log.error(\"Failure returned by gRPC service\",t);\n                  }\n                  @Override public void onCompleted(){\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                    grpcCall.incomingStream=null;\n                  }\n                }\n;\n                if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n                  grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n                  grpcCall.incomingStream.onNext(message);\n                }\n else {\n                  stubMethod.invoke(grpcStub,message,responseObserver);\n                }\n              }\n            }\n catch (            Exception e) {\n              websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n              grpcCall.incomingStream=null;\n              log.error(\"Failure returned by gRPC service\",e);\n            }\n          }\n        }\n      }\n    }\n  }\n  finally {\n    Thread.currentThread().setContextClassLoader(originalCl);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 749,
      "astHeight" : 30
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 9061,
        "startLineNumber" : 45,
        "startColumnNumber" : 4,
        "endLineNumber" : 197,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void handle(String input,WebSocketData websocketData){\n  ClassLoader originalCl=Thread.currentThread().getContextClassLoader();\n  Thread.currentThread().setContextClassLoader(deploymentClassLoader);\n  try {\n    JsonObject grpcRequest=new JsonObject(input);\n    Integer id=grpcRequest.getInteger(\"id\");\n    String serviceName=grpcRequest.getString(\"serviceName\");\n    String methodName=grpcRequest.getString(\"methodName\");\n    if (\"DISCONNECT\".equals(grpcRequest.getString(\"command\"))) {\n      GrpcCallData grpcCall=websocketData.callsInProgress.get(id);\n      if (grpcCall != null && grpcCall.incomingStream != null) {\n        grpcCall.incomingStream.onCompleted();\n      }\n      return;\n    }\n    GrpcCallData grpcCall;\n    if (websocketData.callsInProgress.containsKey(id)) {\n      grpcCall=websocketData.callsInProgress.get(id);\n    }\n else {\n      Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n      maybeOldCall.ifPresent(call -> {\n        if (call.incomingStream != null) {\n          call.incomingStream.onCompleted();\n        }\n        websocketData.callsInProgress.remove(call.requestId);\n      }\n);\n      grpcCall=new GrpcCallData();\n      grpcCall.serviceName=serviceName;\n      grpcCall.methodName=methodName;\n      grpcCall.requestId=id;\n      websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n    }\n    String testJsonData=grpcRequest.getString(\"content\");\n    Object grpcStub=grpcClientStubs.get(serviceName);\n    if (grpcStub == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_STUB\").encode());\n    }\n else {\n      ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n      MethodDescriptor<?,?> methodDescriptor=null;\n      for (      MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n        if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n          methodDescriptor=method;\n        }\n      }\n      if (methodDescriptor == null) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n      }\n else {\n        Method stubMethod=null;\n        String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n        for (        Method method : grpcStub.getClass().getDeclaredMethods()) {\n          if (method.getName().equals(realMethodName)) {\n            stubMethod=method;\n          }\n        }\n        if (stubMethod == null) {\n          websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n          log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n        }\n else {\n          MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n          if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n            MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n            Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n            try {\n              Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n              Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n              JsonFormat.parser().merge(testJsonData,builder);\n              Message message=builder.build();\n              if (grpcCall.incomingStream != null) {\n                grpcCall.incomingStream.onNext(message);\n              }\n else {\n                StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n                  @Override public void onNext(                  Object value){\n                    String body=null;\n                    try {\n                      body=JsonFormat.printer().print((MessageOrBuilder)value);\n                    }\n catch (                    InvalidProtocolBufferException e) {\n                      websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                      log.error(\"Failed to transform response to JSON\",e);\n                    }\n                    JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                    reply.put(\"body\",body);\n                    websocketData.responseConsumer.accept(reply.encode());\n                  }\n                  @Override public void onError(                  Throwable t){\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                    grpcCall.incomingStream=null;\n                    log.error(\"Failure returned by gRPC service\",t);\n                  }\n                  @Override public void onCompleted(){\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                    grpcCall.incomingStream=null;\n                  }\n                }\n;\n                if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n                  grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n                  grpcCall.incomingStream.onNext(message);\n                }\n else {\n                  stubMethod.invoke(grpcStub,message,responseObserver);\n                }\n              }\n            }\n catch (            Exception e) {\n              websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n              grpcCall.incomingStream=null;\n              log.error(\"Failure returned by gRPC service\",e);\n            }\n          }\n        }\n      }\n    }\n  }\n  finally {\n    Thread.currentThread().setContextClassLoader(originalCl);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 761,
      "astHeight" : 31
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 176,
        "startColumnNumber" : 40,
        "endLineNumber" : 176,
        "endColumnNumber" : 80
      },
      "nodeContext" : "grpcCall.incomingStream.onNext(message);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "io.quarkus.grpc.deployment.devmode.GrpcDevConsoleWebSocketListener.GrpcCallData"
  }, {
    "nodeContext" : "grpcCall",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 187,
      "startColumnNumber" : 32,
      "endLineNumber" : 187,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 187,
        "startColumnNumber" : 32,
        "endLineNumber" : 187,
        "endColumnNumber" : 55
      },
      "nodeContext" : "grpcCall.incomingStream",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 187,
        "startColumnNumber" : 32,
        "endLineNumber" : 187,
        "endColumnNumber" : 62
      },
      "nodeContext" : "grpcCall.incomingStream=null",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 187,
        "startColumnNumber" : 32,
        "endLineNumber" : 187,
        "endColumnNumber" : 63
      },
      "nodeContext" : "grpcCall.incomingStream=null;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 495,
        "startLineNumber" : 182,
        "startColumnNumber" : 50,
        "endLineNumber" : 189,
        "endColumnNumber" : 29
      },
      "nodeContext" : "{\n  websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n  grpcCall.incomingStream=null;\n  log.error(\"Failure returned by gRPC service\",e);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 33,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 515,
        "startLineNumber" : 182,
        "startColumnNumber" : 30,
        "endLineNumber" : 189,
        "endColumnNumber" : 29
      },
      "nodeContext" : "catch (Exception e) {\n  websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n  grpcCall.incomingStream=null;\n  log.error(\"Failure returned by gRPC service\",e);\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 38,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4632,
        "startLineNumber" : 124,
        "startColumnNumber" : 28,
        "endLineNumber" : 189,
        "endColumnNumber" : 29
      },
      "nodeContext" : "try {\n  Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n  Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n  JsonFormat.parser().merge(testJsonData,builder);\n  Message message=builder.build();\n  if (grpcCall.incomingStream != null) {\n    grpcCall.incomingStream.onNext(message);\n  }\n else {\n    StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n      @Override public void onNext(      Object value){\n        String body=null;\n        try {\n          body=JsonFormat.printer().print((MessageOrBuilder)value);\n        }\n catch (        InvalidProtocolBufferException e) {\n          websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n          log.error(\"Failed to transform response to JSON\",e);\n        }\n        JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n        reply.put(\"body\",body);\n        websocketData.responseConsumer.accept(reply.encode());\n      }\n      @Override public void onError(      Throwable t){\n        websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n        grpcCall.incomingStream=null;\n        log.error(\"Failure returned by gRPC service\",t);\n      }\n      @Override public void onCompleted(){\n        websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n        grpcCall.incomingStream=null;\n      }\n    }\n;\n    if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n      grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n      grpcCall.incomingStream.onNext(message);\n    }\n else {\n      stubMethod.invoke(grpcStub,message,responseObserver);\n    }\n  }\n}\n catch (Exception e) {\n  websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n  grpcCall.incomingStream=null;\n  log.error(\"Failure returned by gRPC service\",e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 307,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 4937,
        "startLineNumber" : 120,
        "startColumnNumber" : 95,
        "endLineNumber" : 190,
        "endColumnNumber" : 25
      },
      "nodeContext" : "{\n  MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n  Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n  try {\n    Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n    Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n    JsonFormat.parser().merge(testJsonData,builder);\n    Message message=builder.build();\n    if (grpcCall.incomingStream != null) {\n      grpcCall.incomingStream.onNext(message);\n    }\n else {\n      StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n        @Override public void onNext(        Object value){\n          String body=null;\n          try {\n            body=JsonFormat.printer().print((MessageOrBuilder)value);\n          }\n catch (          InvalidProtocolBufferException e) {\n            websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n            log.error(\"Failed to transform response to JSON\",e);\n          }\n          JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n          reply.put(\"body\",body);\n          websocketData.responseConsumer.accept(reply.encode());\n        }\n        @Override public void onError(        Throwable t){\n          websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n          grpcCall.incomingStream=null;\n          log.error(\"Failure returned by gRPC service\",t);\n        }\n        @Override public void onCompleted(){\n          websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n          grpcCall.incomingStream=null;\n        }\n      }\n;\n      if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n        grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n        grpcCall.incomingStream.onNext(message);\n      }\n else {\n        stubMethod.invoke(grpcStub,message,responseObserver);\n      }\n    }\n  }\n catch (  Exception e) {\n    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n    grpcCall.incomingStream=null;\n    log.error(\"Failure returned by gRPC service\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 337,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5008,
        "startLineNumber" : 120,
        "startColumnNumber" : 24,
        "endLineNumber" : 190,
        "endColumnNumber" : 25
      },
      "nodeContext" : "if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n  MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n  Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n  try {\n    Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n    Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n    JsonFormat.parser().merge(testJsonData,builder);\n    Message message=builder.build();\n    if (grpcCall.incomingStream != null) {\n      grpcCall.incomingStream.onNext(message);\n    }\n else {\n      StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n        @Override public void onNext(        Object value){\n          String body=null;\n          try {\n            body=JsonFormat.printer().print((MessageOrBuilder)value);\n          }\n catch (          InvalidProtocolBufferException e) {\n            websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n            log.error(\"Failed to transform response to JSON\",e);\n          }\n          JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n          reply.put(\"body\",body);\n          websocketData.responseConsumer.accept(reply.encode());\n        }\n        @Override public void onError(        Throwable t){\n          websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n          grpcCall.incomingStream=null;\n          log.error(\"Failure returned by gRPC service\",t);\n        }\n        @Override public void onCompleted(){\n          websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n          grpcCall.incomingStream=null;\n        }\n      }\n;\n      if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n        grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n        grpcCall.incomingStream.onNext(message);\n      }\n else {\n        stubMethod.invoke(grpcStub,message,responseObserver);\n      }\n    }\n  }\n catch (  Exception e) {\n    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n    grpcCall.incomingStream=null;\n    log.error(\"Failure returned by gRPC service\",e);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 344,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 5227,
        "startLineNumber" : 116,
        "startColumnNumber" : 27,
        "endLineNumber" : 191,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n  if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n    MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n    Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n    try {\n      Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n      Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n      JsonFormat.parser().merge(testJsonData,builder);\n      Message message=builder.build();\n      if (grpcCall.incomingStream != null) {\n        grpcCall.incomingStream.onNext(message);\n      }\n else {\n        StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n          @Override public void onNext(          Object value){\n            String body=null;\n            try {\n              body=JsonFormat.printer().print((MessageOrBuilder)value);\n            }\n catch (            InvalidProtocolBufferException e) {\n              websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n              log.error(\"Failed to transform response to JSON\",e);\n            }\n            JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n            reply.put(\"body\",body);\n            websocketData.responseConsumer.accept(reply.encode());\n          }\n          @Override public void onError(          Throwable t){\n            websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n            grpcCall.incomingStream=null;\n            log.error(\"Failure returned by gRPC service\",t);\n          }\n          @Override public void onCompleted(){\n            websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n            grpcCall.incomingStream=null;\n          }\n        }\n;\n        if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n          grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n          grpcCall.incomingStream.onNext(message);\n        }\n else {\n          stubMethod.invoke(grpcStub,message,responseObserver);\n        }\n      }\n    }\n catch (    Exception e) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n      grpcCall.incomingStream=null;\n      log.error(\"Failure returned by gRPC service\",e);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 357,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5489,
        "startLineNumber" : 113,
        "startColumnNumber" : 20,
        "endLineNumber" : 191,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (stubMethod == null) {\n  websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n  log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n}\n else {\n  MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n  if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n    MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n    Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n    try {\n      Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n      Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n      JsonFormat.parser().merge(testJsonData,builder);\n      Message message=builder.build();\n      if (grpcCall.incomingStream != null) {\n        grpcCall.incomingStream.onNext(message);\n      }\n else {\n        StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n          @Override public void onNext(          Object value){\n            String body=null;\n            try {\n              body=JsonFormat.printer().print((MessageOrBuilder)value);\n            }\n catch (            InvalidProtocolBufferException e) {\n              websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n              log.error(\"Failed to transform response to JSON\",e);\n            }\n            JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n            reply.put(\"body\",body);\n            websocketData.responseConsumer.accept(reply.encode());\n          }\n          @Override public void onError(          Throwable t){\n            websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n            grpcCall.incomingStream=null;\n            log.error(\"Failure returned by gRPC service\",t);\n          }\n          @Override public void onCompleted(){\n            websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n            grpcCall.incomingStream=null;\n          }\n        }\n;\n        if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n          grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n          grpcCall.incomingStream.onNext(message);\n        }\n else {\n          stubMethod.invoke(grpcStub,message,responseObserver);\n        }\n      }\n    }\n catch (    Exception e) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n      grpcCall.incomingStream=null;\n      log.error(\"Failure returned by gRPC service\",e);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 384,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 5926,
        "startLineNumber" : 103,
        "startColumnNumber" : 23,
        "endLineNumber" : 192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  Method stubMethod=null;\n  String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n  for (  Method method : grpcStub.getClass().getDeclaredMethods()) {\n    if (method.getName().equals(realMethodName)) {\n      stubMethod=method;\n    }\n  }\n  if (stubMethod == null) {\n    websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n    log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n  }\n else {\n    MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n    if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n      MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n      Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n      try {\n        Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n        Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n        JsonFormat.parser().merge(testJsonData,builder);\n        Message message=builder.build();\n        if (grpcCall.incomingStream != null) {\n          grpcCall.incomingStream.onNext(message);\n        }\n else {\n          StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n            @Override public void onNext(            Object value){\n              String body=null;\n              try {\n                body=JsonFormat.printer().print((MessageOrBuilder)value);\n              }\n catch (              InvalidProtocolBufferException e) {\n                websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                log.error(\"Failed to transform response to JSON\",e);\n              }\n              JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n              reply.put(\"body\",body);\n              websocketData.responseConsumer.accept(reply.encode());\n            }\n            @Override public void onError(            Throwable t){\n              websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n              grpcCall.incomingStream=null;\n              log.error(\"Failure returned by gRPC service\",t);\n            }\n            @Override public void onCompleted(){\n              websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n              grpcCall.incomingStream=null;\n            }\n          }\n;\n          if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n            grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n            grpcCall.incomingStream.onNext(message);\n          }\n else {\n            stubMethod.invoke(grpcStub,message,responseObserver);\n          }\n        }\n      }\n catch (      Exception e) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n        grpcCall.incomingStream=null;\n        log.error(\"Failure returned by gRPC service\",e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 424,
      "astHeight" : 24
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6084,
        "startLineNumber" : 101,
        "startColumnNumber" : 16,
        "endLineNumber" : 192,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (methodDescriptor == null) {\n  websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n}\n else {\n  Method stubMethod=null;\n  String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n  for (  Method method : grpcStub.getClass().getDeclaredMethods()) {\n    if (method.getName().equals(realMethodName)) {\n      stubMethod=method;\n    }\n  }\n  if (stubMethod == null) {\n    websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n    log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n  }\n else {\n    MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n    if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n      MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n      Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n      try {\n        Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n        Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n        JsonFormat.parser().merge(testJsonData,builder);\n        Message message=builder.build();\n        if (grpcCall.incomingStream != null) {\n          grpcCall.incomingStream.onNext(message);\n        }\n else {\n          StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n            @Override public void onNext(            Object value){\n              String body=null;\n              try {\n                body=JsonFormat.printer().print((MessageOrBuilder)value);\n              }\n catch (              InvalidProtocolBufferException e) {\n                websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                log.error(\"Failed to transform response to JSON\",e);\n              }\n              JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n              reply.put(\"body\",body);\n              websocketData.responseConsumer.accept(reply.encode());\n            }\n            @Override public void onError(            Throwable t){\n              websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n              grpcCall.incomingStream=null;\n              log.error(\"Failure returned by gRPC service\",t);\n            }\n            @Override public void onCompleted(){\n              websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n              grpcCall.incomingStream=null;\n            }\n          }\n;\n          if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n            grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n            grpcCall.incomingStream.onNext(message);\n          }\n else {\n            stubMethod.invoke(grpcStub,message,responseObserver);\n          }\n        }\n      }\n catch (      Exception e) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n        grpcCall.incomingStream=null;\n        log.error(\"Failure returned by gRPC service\",e);\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 441,
      "astHeight" : 25
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 6560,
        "startLineNumber" : 93,
        "startColumnNumber" : 19,
        "endLineNumber" : 193,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n  MethodDescriptor<?,?> methodDescriptor=null;\n  for (  MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n    if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n      methodDescriptor=method;\n    }\n  }\n  if (methodDescriptor == null) {\n    websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n  }\n else {\n    Method stubMethod=null;\n    String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n    for (    Method method : grpcStub.getClass().getDeclaredMethods()) {\n      if (method.getName().equals(realMethodName)) {\n        stubMethod=method;\n      }\n    }\n    if (stubMethod == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n      log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n    }\n else {\n      MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n      if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n        MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n        Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n        try {\n          Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n          Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n          JsonFormat.parser().merge(testJsonData,builder);\n          Message message=builder.build();\n          if (grpcCall.incomingStream != null) {\n            grpcCall.incomingStream.onNext(message);\n          }\n else {\n            StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n              @Override public void onNext(              Object value){\n                String body=null;\n                try {\n                  body=JsonFormat.printer().print((MessageOrBuilder)value);\n                }\n catch (                InvalidProtocolBufferException e) {\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                  log.error(\"Failed to transform response to JSON\",e);\n                }\n                JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                reply.put(\"body\",body);\n                websocketData.responseConsumer.accept(reply.encode());\n              }\n              @Override public void onError(              Throwable t){\n                websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                grpcCall.incomingStream=null;\n                log.error(\"Failure returned by gRPC service\",t);\n              }\n              @Override public void onCompleted(){\n                websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                grpcCall.incomingStream=null;\n              }\n            }\n;\n            if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n              grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n              grpcCall.incomingStream.onNext(message);\n            }\n else {\n              stubMethod.invoke(grpcStub,message,responseObserver);\n            }\n          }\n        }\n catch (        Exception e) {\n          websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n          grpcCall.incomingStream=null;\n          log.error(\"Failure returned by gRPC service\",e);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 490,
      "astHeight" : 26
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6696,
        "startLineNumber" : 91,
        "startColumnNumber" : 12,
        "endLineNumber" : 193,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (grpcStub == null) {\n  websocketData.responseConsumer.accept(jsonResponse(id,\"NO_STUB\").encode());\n}\n else {\n  ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n  MethodDescriptor<?,?> methodDescriptor=null;\n  for (  MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n    if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n      methodDescriptor=method;\n    }\n  }\n  if (methodDescriptor == null) {\n    websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n  }\n else {\n    Method stubMethod=null;\n    String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n    for (    Method method : grpcStub.getClass().getDeclaredMethods()) {\n      if (method.getName().equals(realMethodName)) {\n        stubMethod=method;\n      }\n    }\n    if (stubMethod == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n      log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n    }\n else {\n      MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n      if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n        MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n        Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n        try {\n          Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n          Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n          JsonFormat.parser().merge(testJsonData,builder);\n          Message message=builder.build();\n          if (grpcCall.incomingStream != null) {\n            grpcCall.incomingStream.onNext(message);\n          }\n else {\n            StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n              @Override public void onNext(              Object value){\n                String body=null;\n                try {\n                  body=JsonFormat.printer().print((MessageOrBuilder)value);\n                }\n catch (                InvalidProtocolBufferException e) {\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                  log.error(\"Failed to transform response to JSON\",e);\n                }\n                JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                reply.put(\"body\",body);\n                websocketData.responseConsumer.accept(reply.encode());\n              }\n              @Override public void onError(              Throwable t){\n                websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                grpcCall.incomingStream=null;\n                log.error(\"Failure returned by gRPC service\",t);\n              }\n              @Override public void onCompleted(){\n                websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                grpcCall.incomingStream=null;\n              }\n            }\n;\n            if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n              grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n              grpcCall.incomingStream.onNext(message);\n            }\n else {\n              stubMethod.invoke(grpcStub,message,responseObserver);\n            }\n          }\n        }\n catch (        Exception e) {\n          websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n          grpcCall.incomingStream=null;\n          log.error(\"Failure returned by gRPC service\",e);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 507,
      "astHeight" : 27
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 8730,
        "startLineNumber" : 48,
        "startColumnNumber" : 12,
        "endLineNumber" : 194,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  JsonObject grpcRequest=new JsonObject(input);\n  Integer id=grpcRequest.getInteger(\"id\");\n  String serviceName=grpcRequest.getString(\"serviceName\");\n  String methodName=grpcRequest.getString(\"methodName\");\n  if (\"DISCONNECT\".equals(grpcRequest.getString(\"command\"))) {\n    GrpcCallData grpcCall=websocketData.callsInProgress.get(id);\n    if (grpcCall != null && grpcCall.incomingStream != null) {\n      grpcCall.incomingStream.onCompleted();\n    }\n    return;\n  }\n  GrpcCallData grpcCall;\n  if (websocketData.callsInProgress.containsKey(id)) {\n    grpcCall=websocketData.callsInProgress.get(id);\n  }\n else {\n    Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n    maybeOldCall.ifPresent(call -> {\n      if (call.incomingStream != null) {\n        call.incomingStream.onCompleted();\n      }\n      websocketData.callsInProgress.remove(call.requestId);\n    }\n);\n    grpcCall=new GrpcCallData();\n    grpcCall.serviceName=serviceName;\n    grpcCall.methodName=methodName;\n    grpcCall.requestId=id;\n    websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n  }\n  String testJsonData=grpcRequest.getString(\"content\");\n  Object grpcStub=grpcClientStubs.get(serviceName);\n  if (grpcStub == null) {\n    websocketData.responseConsumer.accept(jsonResponse(id,\"NO_STUB\").encode());\n  }\n else {\n    ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n    MethodDescriptor<?,?> methodDescriptor=null;\n    for (    MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n      if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n        methodDescriptor=method;\n      }\n    }\n    if (methodDescriptor == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n    }\n else {\n      Method stubMethod=null;\n      String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n      for (      Method method : grpcStub.getClass().getDeclaredMethods()) {\n        if (method.getName().equals(realMethodName)) {\n          stubMethod=method;\n        }\n      }\n      if (stubMethod == null) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n        log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n      }\n else {\n        MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n        if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n          MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n          Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n          try {\n            Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n            Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n            JsonFormat.parser().merge(testJsonData,builder);\n            Message message=builder.build();\n            if (grpcCall.incomingStream != null) {\n              grpcCall.incomingStream.onNext(message);\n            }\n else {\n              StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n                @Override public void onNext(                Object value){\n                  String body=null;\n                  try {\n                    body=JsonFormat.printer().print((MessageOrBuilder)value);\n                  }\n catch (                  InvalidProtocolBufferException e) {\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                    log.error(\"Failed to transform response to JSON\",e);\n                  }\n                  JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                  reply.put(\"body\",body);\n                  websocketData.responseConsumer.accept(reply.encode());\n                }\n                @Override public void onError(                Throwable t){\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                  grpcCall.incomingStream=null;\n                  log.error(\"Failure returned by gRPC service\",t);\n                }\n                @Override public void onCompleted(){\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                  grpcCall.incomingStream=null;\n                }\n              }\n;\n              if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n                grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n                grpcCall.incomingStream.onNext(message);\n              }\n else {\n                stubMethod.invoke(grpcStub,message,responseObserver);\n              }\n            }\n          }\n catch (          Exception e) {\n            websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n            grpcCall.incomingStream=null;\n            log.error(\"Failure returned by gRPC service\",e);\n          }\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 722,
      "astHeight" : 28
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8824,
        "startLineNumber" : 48,
        "startColumnNumber" : 8,
        "endLineNumber" : 196,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  JsonObject grpcRequest=new JsonObject(input);\n  Integer id=grpcRequest.getInteger(\"id\");\n  String serviceName=grpcRequest.getString(\"serviceName\");\n  String methodName=grpcRequest.getString(\"methodName\");\n  if (\"DISCONNECT\".equals(grpcRequest.getString(\"command\"))) {\n    GrpcCallData grpcCall=websocketData.callsInProgress.get(id);\n    if (grpcCall != null && grpcCall.incomingStream != null) {\n      grpcCall.incomingStream.onCompleted();\n    }\n    return;\n  }\n  GrpcCallData grpcCall;\n  if (websocketData.callsInProgress.containsKey(id)) {\n    grpcCall=websocketData.callsInProgress.get(id);\n  }\n else {\n    Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n    maybeOldCall.ifPresent(call -> {\n      if (call.incomingStream != null) {\n        call.incomingStream.onCompleted();\n      }\n      websocketData.callsInProgress.remove(call.requestId);\n    }\n);\n    grpcCall=new GrpcCallData();\n    grpcCall.serviceName=serviceName;\n    grpcCall.methodName=methodName;\n    grpcCall.requestId=id;\n    websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n  }\n  String testJsonData=grpcRequest.getString(\"content\");\n  Object grpcStub=grpcClientStubs.get(serviceName);\n  if (grpcStub == null) {\n    websocketData.responseConsumer.accept(jsonResponse(id,\"NO_STUB\").encode());\n  }\n else {\n    ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n    MethodDescriptor<?,?> methodDescriptor=null;\n    for (    MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n      if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n        methodDescriptor=method;\n      }\n    }\n    if (methodDescriptor == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n    }\n else {\n      Method stubMethod=null;\n      String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n      for (      Method method : grpcStub.getClass().getDeclaredMethods()) {\n        if (method.getName().equals(realMethodName)) {\n          stubMethod=method;\n        }\n      }\n      if (stubMethod == null) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n        log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n      }\n else {\n        MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n        if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n          MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n          Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n          try {\n            Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n            Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n            JsonFormat.parser().merge(testJsonData,builder);\n            Message message=builder.build();\n            if (grpcCall.incomingStream != null) {\n              grpcCall.incomingStream.onNext(message);\n            }\n else {\n              StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n                @Override public void onNext(                Object value){\n                  String body=null;\n                  try {\n                    body=JsonFormat.printer().print((MessageOrBuilder)value);\n                  }\n catch (                  InvalidProtocolBufferException e) {\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                    log.error(\"Failed to transform response to JSON\",e);\n                  }\n                  JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                  reply.put(\"body\",body);\n                  websocketData.responseConsumer.accept(reply.encode());\n                }\n                @Override public void onError(                Throwable t){\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                  grpcCall.incomingStream=null;\n                  log.error(\"Failure returned by gRPC service\",t);\n                }\n                @Override public void onCompleted(){\n                  websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                  grpcCall.incomingStream=null;\n                }\n              }\n;\n              if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n                grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n                grpcCall.incomingStream.onNext(message);\n              }\n else {\n                stubMethod.invoke(grpcStub,message,responseObserver);\n              }\n            }\n          }\n catch (          Exception e) {\n            websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n            grpcCall.incomingStream=null;\n            log.error(\"Failure returned by gRPC service\",e);\n          }\n        }\n      }\n    }\n  }\n}\n  finally {\n  Thread.currentThread().setContextClassLoader(originalCl);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 731,
      "astHeight" : 29
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8998,
        "startLineNumber" : 45,
        "startColumnNumber" : 67,
        "endLineNumber" : 197,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ClassLoader originalCl=Thread.currentThread().getContextClassLoader();\n  Thread.currentThread().setContextClassLoader(deploymentClassLoader);\n  try {\n    JsonObject grpcRequest=new JsonObject(input);\n    Integer id=grpcRequest.getInteger(\"id\");\n    String serviceName=grpcRequest.getString(\"serviceName\");\n    String methodName=grpcRequest.getString(\"methodName\");\n    if (\"DISCONNECT\".equals(grpcRequest.getString(\"command\"))) {\n      GrpcCallData grpcCall=websocketData.callsInProgress.get(id);\n      if (grpcCall != null && grpcCall.incomingStream != null) {\n        grpcCall.incomingStream.onCompleted();\n      }\n      return;\n    }\n    GrpcCallData grpcCall;\n    if (websocketData.callsInProgress.containsKey(id)) {\n      grpcCall=websocketData.callsInProgress.get(id);\n    }\n else {\n      Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n      maybeOldCall.ifPresent(call -> {\n        if (call.incomingStream != null) {\n          call.incomingStream.onCompleted();\n        }\n        websocketData.callsInProgress.remove(call.requestId);\n      }\n);\n      grpcCall=new GrpcCallData();\n      grpcCall.serviceName=serviceName;\n      grpcCall.methodName=methodName;\n      grpcCall.requestId=id;\n      websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n    }\n    String testJsonData=grpcRequest.getString(\"content\");\n    Object grpcStub=grpcClientStubs.get(serviceName);\n    if (grpcStub == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_STUB\").encode());\n    }\n else {\n      ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n      MethodDescriptor<?,?> methodDescriptor=null;\n      for (      MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n        if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n          methodDescriptor=method;\n        }\n      }\n      if (methodDescriptor == null) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n      }\n else {\n        Method stubMethod=null;\n        String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n        for (        Method method : grpcStub.getClass().getDeclaredMethods()) {\n          if (method.getName().equals(realMethodName)) {\n            stubMethod=method;\n          }\n        }\n        if (stubMethod == null) {\n          websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n          log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n        }\n else {\n          MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n          if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n            MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n            Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n            try {\n              Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n              Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n              JsonFormat.parser().merge(testJsonData,builder);\n              Message message=builder.build();\n              if (grpcCall.incomingStream != null) {\n                grpcCall.incomingStream.onNext(message);\n              }\n else {\n                StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n                  @Override public void onNext(                  Object value){\n                    String body=null;\n                    try {\n                      body=JsonFormat.printer().print((MessageOrBuilder)value);\n                    }\n catch (                    InvalidProtocolBufferException e) {\n                      websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                      log.error(\"Failed to transform response to JSON\",e);\n                    }\n                    JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                    reply.put(\"body\",body);\n                    websocketData.responseConsumer.accept(reply.encode());\n                  }\n                  @Override public void onError(                  Throwable t){\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                    grpcCall.incomingStream=null;\n                    log.error(\"Failure returned by gRPC service\",t);\n                  }\n                  @Override public void onCompleted(){\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                    grpcCall.incomingStream=null;\n                  }\n                }\n;\n                if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n                  grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n                  grpcCall.incomingStream.onNext(message);\n                }\n else {\n                  stubMethod.invoke(grpcStub,message,responseObserver);\n                }\n              }\n            }\n catch (            Exception e) {\n              websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n              grpcCall.incomingStream=null;\n              log.error(\"Failure returned by gRPC service\",e);\n            }\n          }\n        }\n      }\n    }\n  }\n  finally {\n    Thread.currentThread().setContextClassLoader(originalCl);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 749,
      "astHeight" : 30
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 9061,
        "startLineNumber" : 45,
        "startColumnNumber" : 4,
        "endLineNumber" : 197,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void handle(String input,WebSocketData websocketData){\n  ClassLoader originalCl=Thread.currentThread().getContextClassLoader();\n  Thread.currentThread().setContextClassLoader(deploymentClassLoader);\n  try {\n    JsonObject grpcRequest=new JsonObject(input);\n    Integer id=grpcRequest.getInteger(\"id\");\n    String serviceName=grpcRequest.getString(\"serviceName\");\n    String methodName=grpcRequest.getString(\"methodName\");\n    if (\"DISCONNECT\".equals(grpcRequest.getString(\"command\"))) {\n      GrpcCallData grpcCall=websocketData.callsInProgress.get(id);\n      if (grpcCall != null && grpcCall.incomingStream != null) {\n        grpcCall.incomingStream.onCompleted();\n      }\n      return;\n    }\n    GrpcCallData grpcCall;\n    if (websocketData.callsInProgress.containsKey(id)) {\n      grpcCall=websocketData.callsInProgress.get(id);\n    }\n else {\n      Optional<GrpcCallData> maybeOldCall=websocketData.callsInProgress.values().stream().filter(call -> call.methodName.equals(methodName) && call.serviceName.equals(serviceName)).findAny();\n      maybeOldCall.ifPresent(call -> {\n        if (call.incomingStream != null) {\n          call.incomingStream.onCompleted();\n        }\n        websocketData.callsInProgress.remove(call.requestId);\n      }\n);\n      grpcCall=new GrpcCallData();\n      grpcCall.serviceName=serviceName;\n      grpcCall.methodName=methodName;\n      grpcCall.requestId=id;\n      websocketData.callsInProgress.put(grpcCall.requestId,grpcCall);\n    }\n    String testJsonData=grpcRequest.getString(\"content\");\n    Object grpcStub=grpcClientStubs.get(serviceName);\n    if (grpcStub == null) {\n      websocketData.responseConsumer.accept(jsonResponse(id,\"NO_STUB\").encode());\n    }\n else {\n      ServiceDescriptor serviceDescriptor=serviceDescriptors.get(serviceName);\n      MethodDescriptor<?,?> methodDescriptor=null;\n      for (      MethodDescriptor<?,?> method : serviceDescriptor.getMethods()) {\n        if (method.getBareMethodName() != null && method.getBareMethodName().equals(methodName)) {\n          methodDescriptor=method;\n        }\n      }\n      if (methodDescriptor == null) {\n        websocketData.responseConsumer.accept(jsonResponse(id,\"NO_DESCRIPTOR\").encode());\n      }\n else {\n        Method stubMethod=null;\n        String realMethodName=decapitalize(methodDescriptor.getBareMethodName());\n        for (        Method method : grpcStub.getClass().getDeclaredMethods()) {\n          if (method.getName().equals(realMethodName)) {\n            stubMethod=method;\n          }\n        }\n        if (stubMethod == null) {\n          websocketData.responseConsumer.accept(jsonResponse(id,\"NO_METHOD\").encode());\n          log.error(realMethodName + \" method not declared on the \" + grpcStub.getClass());\n        }\n else {\n          MethodDescriptor.Marshaller<?> requestMarshaller=methodDescriptor.getRequestMarshaller();\n          if (requestMarshaller instanceof MethodDescriptor.PrototypeMarshaller) {\n            MethodDescriptor.PrototypeMarshaller<?> protoMarshaller=(MethodDescriptor.PrototypeMarshaller<?>)requestMarshaller;\n            Class<?> requestType=protoMarshaller.getMessagePrototype().getClass();\n            try {\n              Method newBuilderMethod=requestType.getDeclaredMethod(\"newBuilder\");\n              Message.Builder builder=(Message.Builder)newBuilderMethod.invoke(null);\n              JsonFormat.parser().merge(testJsonData,builder);\n              Message message=builder.build();\n              if (grpcCall.incomingStream != null) {\n                grpcCall.incomingStream.onNext(message);\n              }\n else {\n                StreamObserver<?> responseObserver=new StreamObserver<Object>(){\n                  @Override public void onNext(                  Object value){\n                    String body=null;\n                    try {\n                      body=JsonFormat.printer().print((MessageOrBuilder)value);\n                    }\n catch (                    InvalidProtocolBufferException e) {\n                      websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage()).encode());\n                      log.error(\"Failed to transform response to JSON\",e);\n                    }\n                    JsonObject reply=jsonResponse(id,\"PAYLOAD\");\n                    reply.put(\"body\",body);\n                    websocketData.responseConsumer.accept(reply.encode());\n                  }\n                  @Override public void onError(                  Throwable t){\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",t.getMessage()).encode());\n                    grpcCall.incomingStream=null;\n                    log.error(\"Failure returned by gRPC service\",t);\n                  }\n                  @Override public void onCompleted(){\n                    websocketData.responseConsumer.accept(jsonResponse(id,\"COMPLETED\").encode());\n                    grpcCall.incomingStream=null;\n                  }\n                }\n;\n                if (stubMethod.getParameterCount() == 1 && stubMethod.getReturnType() == StreamObserver.class) {\n                  grpcCall.incomingStream=(StreamObserver<Message>)stubMethod.invoke(grpcStub,responseObserver);\n                  grpcCall.incomingStream.onNext(message);\n                }\n else {\n                  stubMethod.invoke(grpcStub,message,responseObserver);\n                }\n              }\n            }\n catch (            Exception e) {\n              websocketData.responseConsumer.accept(jsonResponse(id,\"ERROR\").put(\"body\",e.getMessage() + \"\\nCheck application log for more details\").encode());\n              grpcCall.incomingStream=null;\n              log.error(\"Failure returned by gRPC service\",e);\n            }\n          }\n        }\n      }\n    }\n  }\n  finally {\n    Thread.currentThread().setContextClassLoader(originalCl);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 761,
      "astHeight" : 31
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 187,
        "startColumnNumber" : 32,
        "endLineNumber" : 187,
        "endColumnNumber" : 63
      },
      "nodeContext" : "grpcCall.incomingStream=null;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "io.quarkus.grpc.deployment.devmode.GrpcDevConsoleWebSocketListener.GrpcCallData"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 61,
    "startColumnNumber" : 20,
    "endLineNumber" : 61,
    "endColumnNumber" : 28
  }, {
    "charLength" : 8,
    "startLineNumber" : 61,
    "startColumnNumber" : 40,
    "endLineNumber" : 61,
    "endColumnNumber" : 48
  }, {
    "charLength" : 8,
    "startLineNumber" : 62,
    "startColumnNumber" : 20,
    "endLineNumber" : 62,
    "endColumnNumber" : 28
  }, {
    "charLength" : 8,
    "startLineNumber" : 82,
    "startColumnNumber" : 16,
    "endLineNumber" : 82,
    "endColumnNumber" : 24
  }, {
    "charLength" : 8,
    "startLineNumber" : 83,
    "startColumnNumber" : 16,
    "endLineNumber" : 83,
    "endColumnNumber" : 24
  }, {
    "charLength" : 8,
    "startLineNumber" : 84,
    "startColumnNumber" : 16,
    "endLineNumber" : 84,
    "endColumnNumber" : 24
  }, {
    "charLength" : 8,
    "startLineNumber" : 85,
    "startColumnNumber" : 50,
    "endLineNumber" : 85,
    "endColumnNumber" : 58
  }, {
    "charLength" : 8,
    "startLineNumber" : 85,
    "startColumnNumber" : 70,
    "endLineNumber" : 85,
    "endColumnNumber" : 78
  }, {
    "charLength" : 8,
    "startLineNumber" : 133,
    "startColumnNumber" : 36,
    "endLineNumber" : 133,
    "endColumnNumber" : 44
  }, {
    "charLength" : 8,
    "startLineNumber" : 135,
    "startColumnNumber" : 36,
    "endLineNumber" : 135,
    "endColumnNumber" : 44
  }, {
    "charLength" : 8,
    "startLineNumber" : 174,
    "startColumnNumber" : 40,
    "endLineNumber" : 174,
    "endColumnNumber" : 48
  }, {
    "charLength" : 8,
    "startLineNumber" : 176,
    "startColumnNumber" : 40,
    "endLineNumber" : 176,
    "endColumnNumber" : 48
  }, {
    "charLength" : 8,
    "startLineNumber" : 187,
    "startColumnNumber" : 32,
    "endLineNumber" : 187,
    "endColumnNumber" : 40
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 0
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 13
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 13
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 13
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 13
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 13
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 13
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 13
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 13
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 8,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 15
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 15
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 15
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 15
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 15
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 15
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 15
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 15
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 17
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 17
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 17
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 17
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 17
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 17
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 17
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 17
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 12,
    "layout" : 8
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 17
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 17
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 17
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 17
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 17
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 17
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 17
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 17
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 12,
    "layout" : 8
  }, {
    "firstKey" : 12,
    "secondKey" : 0,
    "layout" : 14
  }, {
    "firstKey" : 12,
    "secondKey" : 1,
    "layout" : 14
  }, {
    "firstKey" : 12,
    "secondKey" : 2,
    "layout" : 14
  }, {
    "firstKey" : 12,
    "secondKey" : 3,
    "layout" : 14
  }, {
    "firstKey" : 12,
    "secondKey" : 4,
    "layout" : 14
  }, {
    "firstKey" : 12,
    "secondKey" : 5,
    "layout" : 14
  }, {
    "firstKey" : 12,
    "secondKey" : 6,
    "layout" : 14
  }, {
    "firstKey" : 12,
    "secondKey" : 7,
    "layout" : 14
  }, {
    "firstKey" : 12,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 11,
    "layout" : 5
  } ]
}