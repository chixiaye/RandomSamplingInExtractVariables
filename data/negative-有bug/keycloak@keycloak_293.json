{
  "id" : 293,
  "expression" : "\"Starting iteration: %s . lastCreatedOn: %d, lastSessionId: %s\"",
  "projectName" : "keycloak@keycloak",
  "commitID" : "aacae9b9acb0fbedc49d4f88c9fbd7aa11922dce",
  "filePath" : "/testsuite/utils/src/main/java/org/keycloak/testsuite/util/cli/LoadPersistentSessionsCommand.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Starting iteration: %s . lastCreatedOn: %d, lastSessionId: %s\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 63,
      "startLineNumber" : 57,
      "startColumnNumber" : 26,
      "endLineNumber" : 57,
      "endColumnNumber" : 89
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 57,
        "startColumnNumber" : 16,
        "endLineNumber" : 57,
        "endColumnNumber" : 114
      },
      "nodeContext" : "log.infof(\"Starting iteration: %s . lastCreatedOn: %d, lastSessionId: %s\",i,lastSessionId.get())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 57,
        "startColumnNumber" : 16,
        "endLineNumber" : 57,
        "endColumnNumber" : 115
      },
      "nodeContext" : "log.infof(\"Starting iteration: %s . lastCreatedOn: %d, lastSessionId: %s\",i,lastSessionId.get());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 131,
        "startLineNumber" : 56,
        "startColumnNumber" : 29,
        "endLineNumber" : 58,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  log.infof(\"Starting iteration: %s . lastCreatedOn: %d, lastSessionId: %s\",i,lastSessionId.get());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 148,
        "startLineNumber" : 56,
        "startColumnNumber" : 12,
        "endLineNumber" : 58,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (i % 16 == 0) {\n  log.infof(\"Starting iteration: %s . lastCreatedOn: %d, lastSessionId: %s\",i,lastSessionId.get());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1272,
        "startLineNumber" : 55,
        "startColumnNumber" : 32,
        "endLineNumber" : 91,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (i % 16 == 0) {\n    log.infof(\"Starting iteration: %s . lastCreatedOn: %d, lastSessionId: %s\",i,lastSessionId.get());\n  }\n  i=i + workersCount;\n  List<Thread> workers=new LinkedList<>();\n  MyWorker lastWorker=null;\n  for (int workerId=0; workerId < workersCount; workerId++) {\n    lastWorker=new MyWorker(workerId,lastSessionId.get(),limit,sessionFactory);\n    Thread worker=new Thread(lastWorker);\n    workers.add(worker);\n  }\n  for (  Thread worker : workers) {\n    worker.start();\n  }\n  for (  Thread worker : workers) {\n    try {\n      worker.join();\n    }\n catch (    Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n  List<UserSessionModel> lastWorkerSessions=lastWorker.getLoadedSessions();\n  if (lastWorkerSessions.size() < limit) {\n    finished.set(true);\n  }\n else {\n    UserSessionModel lastSession=lastWorkerSessions.get(lastWorkerSessions.size() - 1);\n    lastSessionId.set(lastSession.getId());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 158,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1296,
        "startLineNumber" : 55,
        "startColumnNumber" : 8,
        "endLineNumber" : 91,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (!finished.get()) {\n  if (i % 16 == 0) {\n    log.infof(\"Starting iteration: %s . lastCreatedOn: %d, lastSessionId: %s\",i,lastSessionId.get());\n  }\n  i=i + workersCount;\n  List<Thread> workers=new LinkedList<>();\n  MyWorker lastWorker=null;\n  for (int workerId=0; workerId < workersCount; workerId++) {\n    lastWorker=new MyWorker(workerId,lastSessionId.get(),limit,sessionFactory);\n    Thread worker=new Thread(lastWorker);\n    workers.add(worker);\n  }\n  for (  Thread worker : workers) {\n    worker.start();\n  }\n  for (  Thread worker : workers) {\n    try {\n      worker.join();\n    }\n catch (    Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n  List<UserSessionModel> lastWorkerSessions=lastWorker.getLoadedSessions();\n  if (lastWorkerSessions.size() < limit) {\n    finished.set(true);\n  }\n else {\n    UserSessionModel lastSession=lastWorkerSessions.get(lastWorkerSessions.size() - 1);\n    lastSessionId.set(lastSession.getId());\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 163,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1680,
        "startLineNumber" : 44,
        "startColumnNumber" : 57,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int workersCount=getIntArg(0);\n  final int limit=getIntArg(1);\n  AtomicReference<String> lastSessionId=new AtomicReference<>(\"abc\");\n  AtomicBoolean finished=new AtomicBoolean(false);\n  int i=0;\n  while (!finished.get()) {\n    if (i % 16 == 0) {\n      log.infof(\"Starting iteration: %s . lastCreatedOn: %d, lastSessionId: %s\",i,lastSessionId.get());\n    }\n    i=i + workersCount;\n    List<Thread> workers=new LinkedList<>();\n    MyWorker lastWorker=null;\n    for (int workerId=0; workerId < workersCount; workerId++) {\n      lastWorker=new MyWorker(workerId,lastSessionId.get(),limit,sessionFactory);\n      Thread worker=new Thread(lastWorker);\n      workers.add(worker);\n    }\n    for (    Thread worker : workers) {\n      worker.start();\n    }\n    for (    Thread worker : workers) {\n      try {\n        worker.join();\n      }\n catch (      Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n    List<UserSessionModel> lastWorkerSessions=lastWorker.getLoadedSessions();\n    if (lastWorkerSessions.size() < limit) {\n      finished.set(true);\n    }\n else {\n      UserSessionModel lastSession=lastWorkerSessions.get(lastWorkerSessions.size() - 1);\n      lastSessionId.set(lastSession.getId());\n    }\n  }\n  log.info(\"All persistent sessions loaded successfully\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 212,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1747,
        "startLineNumber" : 43,
        "startColumnNumber" : 4,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override protected void doRunCommand(KeycloakSession session){\n  final int workersCount=getIntArg(0);\n  final int limit=getIntArg(1);\n  AtomicReference<String> lastSessionId=new AtomicReference<>(\"abc\");\n  AtomicBoolean finished=new AtomicBoolean(false);\n  int i=0;\n  while (!finished.get()) {\n    if (i % 16 == 0) {\n      log.infof(\"Starting iteration: %s . lastCreatedOn: %d, lastSessionId: %s\",i,lastSessionId.get());\n    }\n    i=i + workersCount;\n    List<Thread> workers=new LinkedList<>();\n    MyWorker lastWorker=null;\n    for (int workerId=0; workerId < workersCount; workerId++) {\n      lastWorker=new MyWorker(workerId,lastSessionId.get(),limit,sessionFactory);\n      Thread worker=new Thread(lastWorker);\n      workers.add(worker);\n    }\n    for (    Thread worker : workers) {\n      worker.start();\n    }\n    for (    Thread worker : workers) {\n      try {\n        worker.join();\n      }\n catch (      Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n    List<UserSessionModel> lastWorkerSessions=lastWorker.getLoadedSessions();\n    if (lastWorkerSessions.size() < limit) {\n      finished.set(true);\n    }\n else {\n      UserSessionModel lastSession=lastWorkerSessions.get(lastWorkerSessions.size() - 1);\n      lastSessionId.set(lastSession.getId());\n    }\n  }\n  log.info(\"All persistent sessions loaded successfully\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 222,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 57,
        "startColumnNumber" : 16,
        "endLineNumber" : 57,
        "endColumnNumber" : 115
      },
      "nodeContext" : "log.infof(\"Starting iteration: %s . lastCreatedOn: %d, lastSessionId: %s\",i,lastSessionId.get());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 7,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 63,
    "startLineNumber" : 57,
    "startColumnNumber" : 26,
    "endLineNumber" : 57,
    "endColumnNumber" : 89
  } ],
  "layoutRelationDataList" : [ ]
}