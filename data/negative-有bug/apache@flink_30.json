{
  "id" : 30,
  "expression" : "MemorySinkFunction",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-tests/src/test/java/org/apache/flink/test/streaming/api/StreamingOperatorsITCase.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "MemorySinkFunction",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 107,
      "startColumnNumber" : 8,
      "endLineNumber" : 107,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 107,
        "startColumnNumber" : 8,
        "endLineNumber" : 107,
        "endColumnNumber" : 63
      },
      "nodeContext" : "MemorySinkFunction.registerCollection(0,actualResult1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 107,
        "startColumnNumber" : 8,
        "endLineNumber" : 107,
        "endColumnNumber" : 64
      },
      "nodeContext" : "MemorySinkFunction.registerCollection(0,actualResult1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3172,
        "startLineNumber" : 57,
        "startColumnNumber" : 57,
        "endLineNumber" : 135,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int numElements=5;\n  final long timeout=1000L;\n  StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();\n  DataStream<Tuple2<Integer,NonSerializable>> input=env.addSource(new NonSerializableTupleSource(numElements));\n  AsyncFunction<Tuple2<Integer,NonSerializable>,Integer> function=new RichAsyncFunction<Tuple2<Integer,NonSerializable>,Integer>(){\n    private static final long serialVersionUID=7000343199829487985L;\n    transient ExecutorService executorService;\n    @Override public void open(    Configuration parameters) throws Exception {\n      super.open(parameters);\n      executorService=Executors.newFixedThreadPool(numElements);\n    }\n    @Override public void close() throws Exception {\n      super.close();\n      executorService.shutdownNow();\n    }\n    @Override public void asyncInvoke(    final Tuple2<Integer,NonSerializable> input,    final ResultFuture<Integer> resultFuture) throws Exception {\n      executorService.submit(new Runnable(){\n        @Override public void run(){\n          resultFuture.complete(Collections.singletonList(input.f0 + input.f0));\n        }\n      }\n);\n    }\n  }\n;\n  DataStream<Integer> orderedResult=AsyncDataStream.orderedWait(input,function,timeout,TimeUnit.MILLISECONDS,2).setParallelism(1);\n  final MemorySinkFunction sinkFunction1=new MemorySinkFunction(0);\n  final List<Integer> actualResult1=new ArrayList<>(numElements);\n  MemorySinkFunction.registerCollection(0,actualResult1);\n  orderedResult.addSink(sinkFunction1).setParallelism(1);\n  DataStream<Integer> unorderedResult=AsyncDataStream.unorderedWait(input,function,timeout,TimeUnit.MILLISECONDS,2);\n  final MemorySinkFunction sinkFunction2=new MemorySinkFunction(1);\n  final List<Integer> actualResult2=new ArrayList<>(numElements);\n  MemorySinkFunction.registerCollection(1,actualResult2);\n  unorderedResult.addSink(sinkFunction2);\n  Collection<Integer> expected=new ArrayList<>(10);\n  for (int i=0; i < numElements; i++) {\n    expected.add(i + i);\n  }\n  env.execute();\n  Assert.assertEquals(expected,actualResult1);\n  Collections.sort(actualResult2);\n  Assert.assertEquals(expected,actualResult2);\n  MemorySinkFunction.clear();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 349,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3440,
        "startLineNumber" : 52,
        "startColumnNumber" : 4,
        "endLineNumber" : 135,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Tests the basic functionality of the AsyncWaitOperator: Processing a limited stream of elements by doubling their value. This is tested in for the ordered and unordered mode.\n */\n@Test public void testAsyncWaitOperator() throws Exception {\n  final int numElements=5;\n  final long timeout=1000L;\n  StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();\n  DataStream<Tuple2<Integer,NonSerializable>> input=env.addSource(new NonSerializableTupleSource(numElements));\n  AsyncFunction<Tuple2<Integer,NonSerializable>,Integer> function=new RichAsyncFunction<Tuple2<Integer,NonSerializable>,Integer>(){\n    private static final long serialVersionUID=7000343199829487985L;\n    transient ExecutorService executorService;\n    @Override public void open(    Configuration parameters) throws Exception {\n      super.open(parameters);\n      executorService=Executors.newFixedThreadPool(numElements);\n    }\n    @Override public void close() throws Exception {\n      super.close();\n      executorService.shutdownNow();\n    }\n    @Override public void asyncInvoke(    final Tuple2<Integer,NonSerializable> input,    final ResultFuture<Integer> resultFuture) throws Exception {\n      executorService.submit(new Runnable(){\n        @Override public void run(){\n          resultFuture.complete(Collections.singletonList(input.f0 + input.f0));\n        }\n      }\n);\n    }\n  }\n;\n  DataStream<Integer> orderedResult=AsyncDataStream.orderedWait(input,function,timeout,TimeUnit.MILLISECONDS,2).setParallelism(1);\n  final MemorySinkFunction sinkFunction1=new MemorySinkFunction(0);\n  final List<Integer> actualResult1=new ArrayList<>(numElements);\n  MemorySinkFunction.registerCollection(0,actualResult1);\n  orderedResult.addSink(sinkFunction1).setParallelism(1);\n  DataStream<Integer> unorderedResult=AsyncDataStream.unorderedWait(input,function,timeout,TimeUnit.MILLISECONDS,2);\n  final MemorySinkFunction sinkFunction2=new MemorySinkFunction(1);\n  final List<Integer> actualResult2=new ArrayList<>(numElements);\n  MemorySinkFunction.registerCollection(1,actualResult2);\n  unorderedResult.addSink(sinkFunction2);\n  Collection<Integer> expected=new ArrayList<>(10);\n  for (int i=0; i < numElements; i++) {\n    expected.add(i + i);\n  }\n  env.execute();\n  Assert.assertEquals(expected,actualResult1);\n  Collections.sort(actualResult2);\n  Assert.assertEquals(expected,actualResult2);\n  MemorySinkFunction.clear();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 358,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 107,
        "startColumnNumber" : 8,
        "endLineNumber" : 107,
        "endColumnNumber" : 64
      },
      "nodeContext" : "MemorySinkFunction.registerCollection(0,actualResult1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.flink.test.streaming.api.StreamingOperatorsITCase.MemorySinkFunction"
  }, {
    "nodeContext" : "MemorySinkFunction",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 117,
      "startColumnNumber" : 8,
      "endLineNumber" : 117,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 117,
        "startColumnNumber" : 8,
        "endLineNumber" : 117,
        "endColumnNumber" : 63
      },
      "nodeContext" : "MemorySinkFunction.registerCollection(1,actualResult2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 117,
        "startColumnNumber" : 8,
        "endLineNumber" : 117,
        "endColumnNumber" : 64
      },
      "nodeContext" : "MemorySinkFunction.registerCollection(1,actualResult2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3172,
        "startLineNumber" : 57,
        "startColumnNumber" : 57,
        "endLineNumber" : 135,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int numElements=5;\n  final long timeout=1000L;\n  StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();\n  DataStream<Tuple2<Integer,NonSerializable>> input=env.addSource(new NonSerializableTupleSource(numElements));\n  AsyncFunction<Tuple2<Integer,NonSerializable>,Integer> function=new RichAsyncFunction<Tuple2<Integer,NonSerializable>,Integer>(){\n    private static final long serialVersionUID=7000343199829487985L;\n    transient ExecutorService executorService;\n    @Override public void open(    Configuration parameters) throws Exception {\n      super.open(parameters);\n      executorService=Executors.newFixedThreadPool(numElements);\n    }\n    @Override public void close() throws Exception {\n      super.close();\n      executorService.shutdownNow();\n    }\n    @Override public void asyncInvoke(    final Tuple2<Integer,NonSerializable> input,    final ResultFuture<Integer> resultFuture) throws Exception {\n      executorService.submit(new Runnable(){\n        @Override public void run(){\n          resultFuture.complete(Collections.singletonList(input.f0 + input.f0));\n        }\n      }\n);\n    }\n  }\n;\n  DataStream<Integer> orderedResult=AsyncDataStream.orderedWait(input,function,timeout,TimeUnit.MILLISECONDS,2).setParallelism(1);\n  final MemorySinkFunction sinkFunction1=new MemorySinkFunction(0);\n  final List<Integer> actualResult1=new ArrayList<>(numElements);\n  MemorySinkFunction.registerCollection(0,actualResult1);\n  orderedResult.addSink(sinkFunction1).setParallelism(1);\n  DataStream<Integer> unorderedResult=AsyncDataStream.unorderedWait(input,function,timeout,TimeUnit.MILLISECONDS,2);\n  final MemorySinkFunction sinkFunction2=new MemorySinkFunction(1);\n  final List<Integer> actualResult2=new ArrayList<>(numElements);\n  MemorySinkFunction.registerCollection(1,actualResult2);\n  unorderedResult.addSink(sinkFunction2);\n  Collection<Integer> expected=new ArrayList<>(10);\n  for (int i=0; i < numElements; i++) {\n    expected.add(i + i);\n  }\n  env.execute();\n  Assert.assertEquals(expected,actualResult1);\n  Collections.sort(actualResult2);\n  Assert.assertEquals(expected,actualResult2);\n  MemorySinkFunction.clear();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 349,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3440,
        "startLineNumber" : 52,
        "startColumnNumber" : 4,
        "endLineNumber" : 135,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Tests the basic functionality of the AsyncWaitOperator: Processing a limited stream of elements by doubling their value. This is tested in for the ordered and unordered mode.\n */\n@Test public void testAsyncWaitOperator() throws Exception {\n  final int numElements=5;\n  final long timeout=1000L;\n  StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();\n  DataStream<Tuple2<Integer,NonSerializable>> input=env.addSource(new NonSerializableTupleSource(numElements));\n  AsyncFunction<Tuple2<Integer,NonSerializable>,Integer> function=new RichAsyncFunction<Tuple2<Integer,NonSerializable>,Integer>(){\n    private static final long serialVersionUID=7000343199829487985L;\n    transient ExecutorService executorService;\n    @Override public void open(    Configuration parameters) throws Exception {\n      super.open(parameters);\n      executorService=Executors.newFixedThreadPool(numElements);\n    }\n    @Override public void close() throws Exception {\n      super.close();\n      executorService.shutdownNow();\n    }\n    @Override public void asyncInvoke(    final Tuple2<Integer,NonSerializable> input,    final ResultFuture<Integer> resultFuture) throws Exception {\n      executorService.submit(new Runnable(){\n        @Override public void run(){\n          resultFuture.complete(Collections.singletonList(input.f0 + input.f0));\n        }\n      }\n);\n    }\n  }\n;\n  DataStream<Integer> orderedResult=AsyncDataStream.orderedWait(input,function,timeout,TimeUnit.MILLISECONDS,2).setParallelism(1);\n  final MemorySinkFunction sinkFunction1=new MemorySinkFunction(0);\n  final List<Integer> actualResult1=new ArrayList<>(numElements);\n  MemorySinkFunction.registerCollection(0,actualResult1);\n  orderedResult.addSink(sinkFunction1).setParallelism(1);\n  DataStream<Integer> unorderedResult=AsyncDataStream.unorderedWait(input,function,timeout,TimeUnit.MILLISECONDS,2);\n  final MemorySinkFunction sinkFunction2=new MemorySinkFunction(1);\n  final List<Integer> actualResult2=new ArrayList<>(numElements);\n  MemorySinkFunction.registerCollection(1,actualResult2);\n  unorderedResult.addSink(sinkFunction2);\n  Collection<Integer> expected=new ArrayList<>(10);\n  for (int i=0; i < numElements; i++) {\n    expected.add(i + i);\n  }\n  env.execute();\n  Assert.assertEquals(expected,actualResult1);\n  Collections.sort(actualResult2);\n  Assert.assertEquals(expected,actualResult2);\n  MemorySinkFunction.clear();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 358,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 117,
        "startColumnNumber" : 8,
        "endLineNumber" : 117,
        "endColumnNumber" : 64
      },
      "nodeContext" : "MemorySinkFunction.registerCollection(1,actualResult2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.flink.test.streaming.api.StreamingOperatorsITCase.MemorySinkFunction"
  }, {
    "nodeContext" : "MemorySinkFunction",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 134,
      "startColumnNumber" : 8,
      "endLineNumber" : 134,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 134,
        "startColumnNumber" : 8,
        "endLineNumber" : 134,
        "endColumnNumber" : 34
      },
      "nodeContext" : "MemorySinkFunction.clear()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 134,
        "startColumnNumber" : 8,
        "endLineNumber" : 134,
        "endColumnNumber" : 35
      },
      "nodeContext" : "MemorySinkFunction.clear();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3172,
        "startLineNumber" : 57,
        "startColumnNumber" : 57,
        "endLineNumber" : 135,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int numElements=5;\n  final long timeout=1000L;\n  StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();\n  DataStream<Tuple2<Integer,NonSerializable>> input=env.addSource(new NonSerializableTupleSource(numElements));\n  AsyncFunction<Tuple2<Integer,NonSerializable>,Integer> function=new RichAsyncFunction<Tuple2<Integer,NonSerializable>,Integer>(){\n    private static final long serialVersionUID=7000343199829487985L;\n    transient ExecutorService executorService;\n    @Override public void open(    Configuration parameters) throws Exception {\n      super.open(parameters);\n      executorService=Executors.newFixedThreadPool(numElements);\n    }\n    @Override public void close() throws Exception {\n      super.close();\n      executorService.shutdownNow();\n    }\n    @Override public void asyncInvoke(    final Tuple2<Integer,NonSerializable> input,    final ResultFuture<Integer> resultFuture) throws Exception {\n      executorService.submit(new Runnable(){\n        @Override public void run(){\n          resultFuture.complete(Collections.singletonList(input.f0 + input.f0));\n        }\n      }\n);\n    }\n  }\n;\n  DataStream<Integer> orderedResult=AsyncDataStream.orderedWait(input,function,timeout,TimeUnit.MILLISECONDS,2).setParallelism(1);\n  final MemorySinkFunction sinkFunction1=new MemorySinkFunction(0);\n  final List<Integer> actualResult1=new ArrayList<>(numElements);\n  MemorySinkFunction.registerCollection(0,actualResult1);\n  orderedResult.addSink(sinkFunction1).setParallelism(1);\n  DataStream<Integer> unorderedResult=AsyncDataStream.unorderedWait(input,function,timeout,TimeUnit.MILLISECONDS,2);\n  final MemorySinkFunction sinkFunction2=new MemorySinkFunction(1);\n  final List<Integer> actualResult2=new ArrayList<>(numElements);\n  MemorySinkFunction.registerCollection(1,actualResult2);\n  unorderedResult.addSink(sinkFunction2);\n  Collection<Integer> expected=new ArrayList<>(10);\n  for (int i=0; i < numElements; i++) {\n    expected.add(i + i);\n  }\n  env.execute();\n  Assert.assertEquals(expected,actualResult1);\n  Collections.sort(actualResult2);\n  Assert.assertEquals(expected,actualResult2);\n  MemorySinkFunction.clear();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 349,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3440,
        "startLineNumber" : 52,
        "startColumnNumber" : 4,
        "endLineNumber" : 135,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Tests the basic functionality of the AsyncWaitOperator: Processing a limited stream of elements by doubling their value. This is tested in for the ordered and unordered mode.\n */\n@Test public void testAsyncWaitOperator() throws Exception {\n  final int numElements=5;\n  final long timeout=1000L;\n  StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();\n  DataStream<Tuple2<Integer,NonSerializable>> input=env.addSource(new NonSerializableTupleSource(numElements));\n  AsyncFunction<Tuple2<Integer,NonSerializable>,Integer> function=new RichAsyncFunction<Tuple2<Integer,NonSerializable>,Integer>(){\n    private static final long serialVersionUID=7000343199829487985L;\n    transient ExecutorService executorService;\n    @Override public void open(    Configuration parameters) throws Exception {\n      super.open(parameters);\n      executorService=Executors.newFixedThreadPool(numElements);\n    }\n    @Override public void close() throws Exception {\n      super.close();\n      executorService.shutdownNow();\n    }\n    @Override public void asyncInvoke(    final Tuple2<Integer,NonSerializable> input,    final ResultFuture<Integer> resultFuture) throws Exception {\n      executorService.submit(new Runnable(){\n        @Override public void run(){\n          resultFuture.complete(Collections.singletonList(input.f0 + input.f0));\n        }\n      }\n);\n    }\n  }\n;\n  DataStream<Integer> orderedResult=AsyncDataStream.orderedWait(input,function,timeout,TimeUnit.MILLISECONDS,2).setParallelism(1);\n  final MemorySinkFunction sinkFunction1=new MemorySinkFunction(0);\n  final List<Integer> actualResult1=new ArrayList<>(numElements);\n  MemorySinkFunction.registerCollection(0,actualResult1);\n  orderedResult.addSink(sinkFunction1).setParallelism(1);\n  DataStream<Integer> unorderedResult=AsyncDataStream.unorderedWait(input,function,timeout,TimeUnit.MILLISECONDS,2);\n  final MemorySinkFunction sinkFunction2=new MemorySinkFunction(1);\n  final List<Integer> actualResult2=new ArrayList<>(numElements);\n  MemorySinkFunction.registerCollection(1,actualResult2);\n  unorderedResult.addSink(sinkFunction2);\n  Collection<Integer> expected=new ArrayList<>(10);\n  for (int i=0; i < numElements; i++) {\n    expected.add(i + i);\n  }\n  env.execute();\n  Assert.assertEquals(expected,actualResult1);\n  Collections.sort(actualResult2);\n  Assert.assertEquals(expected,actualResult2);\n  MemorySinkFunction.clear();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 358,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 134,
        "startColumnNumber" : 8,
        "endLineNumber" : 134,
        "endColumnNumber" : 35
      },
      "nodeContext" : "MemorySinkFunction.clear();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.flink.test.streaming.api.StreamingOperatorsITCase.MemorySinkFunction"
  } ],
  "positionList" : [ {
    "charLength" : 18,
    "startLineNumber" : 107,
    "startColumnNumber" : 8,
    "endLineNumber" : 107,
    "endColumnNumber" : 26
  }, {
    "charLength" : 18,
    "startLineNumber" : 117,
    "startColumnNumber" : 8,
    "endLineNumber" : 117,
    "endColumnNumber" : 26
  }, {
    "charLength" : 18,
    "startLineNumber" : 134,
    "startColumnNumber" : 8,
    "endLineNumber" : 134,
    "endColumnNumber" : 26
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  } ]
}