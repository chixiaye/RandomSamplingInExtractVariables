{
  "id" : 242,
  "expression" : "zdt.toInstant()",
  "projectName" : "dbeaver@dbeaver",
  "commitID" : "aecf0da5baef5ea4aa1675578670cf057248123d",
  "filePath" : "/plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/stream/StreamTransferResultSet.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "zdt.toInstant()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 101,
      "startColumnNumber" : 48,
      "endLineNumber" : 101,
      "endColumnNumber" : 63
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 101,
        "startColumnNumber" : 28,
        "endLineNumber" : 101,
        "endColumnNumber" : 64
      },
      "nodeContext" : "java.util.Date.from(zdt.toInstant())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 101,
        "startColumnNumber" : 20,
        "endLineNumber" : 101,
        "endColumnNumber" : 64
      },
      "nodeContext" : "value=java.util.Date.from(zdt.toInstant())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 101,
        "startColumnNumber" : 20,
        "endLineNumber" : 101,
        "endColumnNumber" : 65
      },
      "nodeContext" : "value=java.util.Date.from(zdt.toInstant());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 149,
        "startLineNumber" : 99,
        "startColumnNumber" : 20,
        "endLineNumber" : 102,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  ZonedDateTime zdt=ZonedDateTime.from(ta);\n  value=java.util.Date.from(zdt.toInstant());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 23,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1387,
        "startLineNumber" : 99,
        "startColumnNumber" : 16,
        "endLineNumber" : 121,
        "endColumnNumber" : 17
      },
      "nodeContext" : "try {\n  ZonedDateTime zdt=ZonedDateTime.from(ta);\n  value=java.util.Date.from(zdt.toInstant());\n}\n catch (Exception e) {\n  LocalDateTime localDT;\n  if (ta.isSupported(ChronoField.NANO_OF_SECOND)) {\n    localDT=LocalDateTime.from(ta);\n  }\n else {\n    localDT=LocalDate.from(ta).atStartOfDay();\n    log.debug(\"No time present in datetime string, defaulting to the start of the day\");\n  }\n  if (dateTimeZoneId != null) {\n    localDT=localDT.atZone(ZoneId.systemDefault()).withZoneSameInstant(dateTimeZoneId).toLocalDateTime();\n  }\n  value=Timestamp.valueOf(localDT);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 91,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1663,
        "startLineNumber" : 93,
        "startColumnNumber" : 16,
        "endLineNumber" : 122,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  String strValue=CommonUtils.toString(value);\n  if (CommonUtils.isEmptyTrimmed(strValue)) {\n    return null;\n  }\n  TemporalAccessor ta=dateTimeFormat.parse(strValue);\n  try {\n    ZonedDateTime zdt=ZonedDateTime.from(ta);\n    value=java.util.Date.from(zdt.toInstant());\n  }\n catch (  Exception e) {\n    LocalDateTime localDT;\n    if (ta.isSupported(ChronoField.NANO_OF_SECOND)) {\n      localDT=LocalDateTime.from(ta);\n    }\n else {\n      localDT=LocalDate.from(ta).atStartOfDay();\n      log.debug(\"No time present in datetime string, defaulting to the start of the day\");\n    }\n    if (dateTimeZoneId != null) {\n      localDT=localDT.atZone(ZoneId.systemDefault()).withZoneSameInstant(dateTimeZoneId).toLocalDateTime();\n    }\n    value=Timestamp.valueOf(localDT);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 118,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1833,
        "startLineNumber" : 93,
        "startColumnNumber" : 12,
        "endLineNumber" : 125,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  String strValue=CommonUtils.toString(value);\n  if (CommonUtils.isEmptyTrimmed(strValue)) {\n    return null;\n  }\n  TemporalAccessor ta=dateTimeFormat.parse(strValue);\n  try {\n    ZonedDateTime zdt=ZonedDateTime.from(ta);\n    value=java.util.Date.from(zdt.toInstant());\n  }\n catch (  Exception e) {\n    LocalDateTime localDT;\n    if (ta.isSupported(ChronoField.NANO_OF_SECOND)) {\n      localDT=LocalDateTime.from(ta);\n    }\n else {\n      localDT=LocalDate.from(ta).atStartOfDay();\n      log.debug(\"No time present in datetime string, defaulting to the start of the day\");\n    }\n    if (dateTimeZoneId != null) {\n      localDT=localDT.atZone(ZoneId.systemDefault()).withZoneSameInstant(dateTimeZoneId).toLocalDateTime();\n    }\n    value=Timestamp.valueOf(localDT);\n  }\n}\n catch (Exception e) {\n  log.debug(\"Error parsing datetime string: \" + e.getMessage());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 134,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1900,
        "startLineNumber" : 91,
        "startColumnNumber" : 127,
        "endLineNumber" : 126,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    String strValue=CommonUtils.toString(value);\n    if (CommonUtils.isEmptyTrimmed(strValue)) {\n      return null;\n    }\n    TemporalAccessor ta=dateTimeFormat.parse(strValue);\n    try {\n      ZonedDateTime zdt=ZonedDateTime.from(ta);\n      value=java.util.Date.from(zdt.toInstant());\n    }\n catch (    Exception e) {\n      LocalDateTime localDT;\n      if (ta.isSupported(ChronoField.NANO_OF_SECOND)) {\n        localDT=LocalDateTime.from(ta);\n      }\n else {\n        localDT=LocalDate.from(ta).atStartOfDay();\n        log.debug(\"No time present in datetime string, defaulting to the start of the day\");\n      }\n      if (dateTimeZoneId != null) {\n        localDT=localDT.atZone(ZoneId.systemDefault()).withZoneSameInstant(dateTimeZoneId).toLocalDateTime();\n      }\n      value=Timestamp.valueOf(localDT);\n    }\n  }\n catch (  Exception e) {\n    log.debug(\"Error parsing datetime string: \" + e.getMessage());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 135,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2019,
        "startLineNumber" : 91,
        "startColumnNumber" : 8,
        "endLineNumber" : 126,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (value != null && dateTimeFormat != null && attr.getDataKind() == DBPDataKind.DATETIME && !(value instanceof Date)) {\n  try {\n    String strValue=CommonUtils.toString(value);\n    if (CommonUtils.isEmptyTrimmed(strValue)) {\n      return null;\n    }\n    TemporalAccessor ta=dateTimeFormat.parse(strValue);\n    try {\n      ZonedDateTime zdt=ZonedDateTime.from(ta);\n      value=java.util.Date.from(zdt.toInstant());\n    }\n catch (    Exception e) {\n      LocalDateTime localDT;\n      if (ta.isSupported(ChronoField.NANO_OF_SECOND)) {\n        localDT=LocalDateTime.from(ta);\n      }\n else {\n        localDT=LocalDate.from(ta).atStartOfDay();\n        log.debug(\"No time present in datetime string, defaulting to the start of the day\");\n      }\n      if (dateTimeZoneId != null) {\n        localDT=localDT.atZone(ZoneId.systemDefault()).withZoneSameInstant(dateTimeZoneId).toLocalDateTime();\n      }\n      value=Timestamp.valueOf(localDT);\n    }\n  }\n catch (  Exception e) {\n    log.debug(\"Error parsing datetime string: \" + e.getMessage());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 158,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2179,
        "startLineNumber" : 87,
        "startColumnNumber" : 67,
        "endLineNumber" : 129,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  StreamDataImporterColumnInfo attr=this.attributeMappings.get(index);\n  Object value=streamRow[index];\n  if (value != null && dateTimeFormat != null && attr.getDataKind() == DBPDataKind.DATETIME && !(value instanceof Date)) {\n    try {\n      String strValue=CommonUtils.toString(value);\n      if (CommonUtils.isEmptyTrimmed(strValue)) {\n        return null;\n      }\n      TemporalAccessor ta=dateTimeFormat.parse(strValue);\n      try {\n        ZonedDateTime zdt=ZonedDateTime.from(ta);\n        value=java.util.Date.from(zdt.toInstant());\n      }\n catch (      Exception e) {\n        LocalDateTime localDT;\n        if (ta.isSupported(ChronoField.NANO_OF_SECOND)) {\n          localDT=LocalDateTime.from(ta);\n        }\n else {\n          localDT=LocalDate.from(ta).atStartOfDay();\n          log.debug(\"No time present in datetime string, defaulting to the start of the day\");\n        }\n        if (dateTimeZoneId != null) {\n          localDT=localDT.atZone(ZoneId.systemDefault()).withZoneSameInstant(dateTimeZoneId).toLocalDateTime();\n        }\n        value=Timestamp.valueOf(localDT);\n      }\n    }\n catch (    Exception e) {\n      log.debug(\"Error parsing datetime string: \" + e.getMessage());\n    }\n  }\n  return value;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 180,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2256,
        "startLineNumber" : 86,
        "startColumnNumber" : 4,
        "endLineNumber" : 129,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Object getAttributeValue(int index) throws DBCException {\n  StreamDataImporterColumnInfo attr=this.attributeMappings.get(index);\n  Object value=streamRow[index];\n  if (value != null && dateTimeFormat != null && attr.getDataKind() == DBPDataKind.DATETIME && !(value instanceof Date)) {\n    try {\n      String strValue=CommonUtils.toString(value);\n      if (CommonUtils.isEmptyTrimmed(strValue)) {\n        return null;\n      }\n      TemporalAccessor ta=dateTimeFormat.parse(strValue);\n      try {\n        ZonedDateTime zdt=ZonedDateTime.from(ta);\n        value=java.util.Date.from(zdt.toInstant());\n      }\n catch (      Exception e) {\n        LocalDateTime localDT;\n        if (ta.isSupported(ChronoField.NANO_OF_SECOND)) {\n          localDT=LocalDateTime.from(ta);\n        }\n else {\n          localDT=LocalDate.from(ta).atStartOfDay();\n          log.debug(\"No time present in datetime string, defaulting to the start of the day\");\n        }\n        if (dateTimeZoneId != null) {\n          localDT=localDT.atZone(ZoneId.systemDefault()).withZoneSameInstant(dateTimeZoneId).toLocalDateTime();\n        }\n        value=Timestamp.valueOf(localDT);\n      }\n    }\n catch (    Exception e) {\n      log.debug(\"Error parsing datetime string: \" + e.getMessage());\n    }\n  }\n  return value;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 192,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 101,
        "startColumnNumber" : 20,
        "endLineNumber" : 101,
        "endColumnNumber" : 65
      },
      "nodeContext" : "value=java.util.Date.from(zdt.toInstant());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "java.time.Instant"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 101,
    "startColumnNumber" : 48,
    "endLineNumber" : 101,
    "endColumnNumber" : 63
  } ],
  "layoutRelationDataList" : [ ]
}