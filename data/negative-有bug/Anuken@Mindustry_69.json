{
  "id" : 69,
  "expression" : "type",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "a7188c48845dd423fc9b58bc6bcf6797f6d25b46",
  "filePath" : "/tools/src/mindustry/tools/Generators.java",
  "occurrences" : 30,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "type",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 399,
      "startColumnNumber" : 15,
      "endLineNumber" : 399,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 399,
        "startColumnNumber" : 15,
        "endLineNumber" : 399,
        "endColumnNumber" : 30
      },
      "nodeContext" : "type.isHidden()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 399,
        "startColumnNumber" : 12,
        "endLineNumber" : 399,
        "endColumnNumber" : 39
      },
      "nodeContext" : "if (type.isHidden()) return;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 5396,
        "startLineNumber" : 398,
        "startColumnNumber" : 78,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 912,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 5404,
        "startLineNumber" : 398,
        "startColumnNumber" : 70,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "type -> {\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 915,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 399,
        "startColumnNumber" : 12,
        "endLineNumber" : 399,
        "endColumnNumber" : 39
      },
      "nodeContext" : "if (type.isHidden()) return;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "type",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 404,
      "startColumnNumber" : 16,
      "endLineNumber" : 404,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 404,
        "startColumnNumber" : 16,
        "endLineNumber" : 404,
        "endColumnNumber" : 27
      },
      "nodeContext" : "type.load()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 404,
        "startColumnNumber" : 16,
        "endLineNumber" : 404,
        "endColumnNumber" : 28
      },
      "nodeContext" : "type.load();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5105,
        "startLineNumber" : 403,
        "startColumnNumber" : 15,
        "endLineNumber" : 515,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  type.load();\n  type.init();\n  Color outc=Pal.darkerMetal;\n  Func<Image,Image> outline=i -> i.outline(3,outc);\n  Cons<TextureRegion> outliner=t -> {\n    if (t != null && t.found()) {\n      ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n    }\n  }\n;\n  for (  Weapon weapon : type.weapons) {\n    if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n      outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n    }\n  }\n  outliner.get(type.jointRegion);\n  outliner.get(type.footRegion);\n  outliner.get(type.legBaseRegion);\n  outliner.get(type.baseJointRegion);\n  if (type.constructor.get() instanceof Legsc)   outliner.get(type.legRegion);\n  Image image=outline.get(ImagePacker.get(type.region));\n  image.save(type.name + \"-outline\");\n  if (type.constructor.get() instanceof Mechc) {\n    image.drawCenter(type.baseRegion);\n    image.drawCenter(type.legRegion);\n    image.drawCenter(type.legRegion,true,false);\n    image.draw(type.region);\n  }\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.draw(type.region);\n  Image baseCell=ImagePacker.get(type.cellRegion);\n  Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n  cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n  image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.save(\"unit-\" + type.name + \"-full\");\n  Rand rand=new Rand();\n  rand.setSeed(type.name.hashCode());\n  int splits=3;\n  float degrees=rand.random(360f);\n  float offsetRange=Math.max(image.width,image.height) * 0.15f;\n  Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n  Image[] wrecks=new Image[splits];\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i]=new Image(image.width,image.height);\n  }\n  RidgedPerlin r=new RidgedPerlin(1,3);\n  VoronoiNoise vn=new VoronoiNoise(type.id,true);\n  image.each((x,y) -> {\n    boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n    boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n    float dst=offset.dst(x,y);\n    float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n    int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n    if (!vval)     wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n  }\n);\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i].save(type.name + \"-wreck\" + i);\n  }\n  for (  Cicon icon : Cicon.scaled) {\n    Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n    Image scaled=new Image((int)size.x,(int)size.y);\n    scaled.drawScaled(image);\n    scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n    if (icon == logicIcon) {\n      scaled.save(type.name + \"-icon-logic\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 876,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5239,
        "startLineNumber" : 403,
        "startColumnNumber" : 12,
        "endLineNumber" : 517,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  type.load();\n  type.init();\n  Color outc=Pal.darkerMetal;\n  Func<Image,Image> outline=i -> i.outline(3,outc);\n  Cons<TextureRegion> outliner=t -> {\n    if (t != null && t.found()) {\n      ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n    }\n  }\n;\n  for (  Weapon weapon : type.weapons) {\n    if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n      outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n    }\n  }\n  outliner.get(type.jointRegion);\n  outliner.get(type.footRegion);\n  outliner.get(type.legBaseRegion);\n  outliner.get(type.baseJointRegion);\n  if (type.constructor.get() instanceof Legsc)   outliner.get(type.legRegion);\n  Image image=outline.get(ImagePacker.get(type.region));\n  image.save(type.name + \"-outline\");\n  if (type.constructor.get() instanceof Mechc) {\n    image.drawCenter(type.baseRegion);\n    image.drawCenter(type.legRegion);\n    image.drawCenter(type.legRegion,true,false);\n    image.draw(type.region);\n  }\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.draw(type.region);\n  Image baseCell=ImagePacker.get(type.cellRegion);\n  Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n  cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n  image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.save(\"unit-\" + type.name + \"-full\");\n  Rand rand=new Rand();\n  rand.setSeed(type.name.hashCode());\n  int splits=3;\n  float degrees=rand.random(360f);\n  float offsetRange=Math.max(image.width,image.height) * 0.15f;\n  Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n  Image[] wrecks=new Image[splits];\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i]=new Image(image.width,image.height);\n  }\n  RidgedPerlin r=new RidgedPerlin(1,3);\n  VoronoiNoise vn=new VoronoiNoise(type.id,true);\n  image.each((x,y) -> {\n    boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n    boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n    float dst=offset.dst(x,y);\n    float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n    int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n    if (!vval)     wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n  }\n);\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i].save(type.name + \"-wreck\" + i);\n  }\n  for (  Cicon icon : Cicon.scaled) {\n    Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n    Image scaled=new Image((int)size.x,(int)size.y);\n    scaled.drawScaled(image);\n    scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n    if (icon == logicIcon) {\n      scaled.save(type.name + \"-icon-logic\");\n    }\n  }\n}\n catch (IllegalArgumentException e) {\n  Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 894,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 5396,
        "startLineNumber" : 398,
        "startColumnNumber" : 78,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 912,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 5404,
        "startLineNumber" : 398,
        "startColumnNumber" : 70,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "type -> {\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 915,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 404,
        "startColumnNumber" : 16,
        "endLineNumber" : 404,
        "endColumnNumber" : 28
      },
      "nodeContext" : "type.load();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "type",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 405,
      "startColumnNumber" : 16,
      "endLineNumber" : 405,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 405,
        "startColumnNumber" : 16,
        "endLineNumber" : 405,
        "endColumnNumber" : 27
      },
      "nodeContext" : "type.init()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 405,
        "startColumnNumber" : 16,
        "endLineNumber" : 405,
        "endColumnNumber" : 28
      },
      "nodeContext" : "type.init();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5105,
        "startLineNumber" : 403,
        "startColumnNumber" : 15,
        "endLineNumber" : 515,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  type.load();\n  type.init();\n  Color outc=Pal.darkerMetal;\n  Func<Image,Image> outline=i -> i.outline(3,outc);\n  Cons<TextureRegion> outliner=t -> {\n    if (t != null && t.found()) {\n      ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n    }\n  }\n;\n  for (  Weapon weapon : type.weapons) {\n    if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n      outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n    }\n  }\n  outliner.get(type.jointRegion);\n  outliner.get(type.footRegion);\n  outliner.get(type.legBaseRegion);\n  outliner.get(type.baseJointRegion);\n  if (type.constructor.get() instanceof Legsc)   outliner.get(type.legRegion);\n  Image image=outline.get(ImagePacker.get(type.region));\n  image.save(type.name + \"-outline\");\n  if (type.constructor.get() instanceof Mechc) {\n    image.drawCenter(type.baseRegion);\n    image.drawCenter(type.legRegion);\n    image.drawCenter(type.legRegion,true,false);\n    image.draw(type.region);\n  }\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.draw(type.region);\n  Image baseCell=ImagePacker.get(type.cellRegion);\n  Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n  cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n  image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.save(\"unit-\" + type.name + \"-full\");\n  Rand rand=new Rand();\n  rand.setSeed(type.name.hashCode());\n  int splits=3;\n  float degrees=rand.random(360f);\n  float offsetRange=Math.max(image.width,image.height) * 0.15f;\n  Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n  Image[] wrecks=new Image[splits];\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i]=new Image(image.width,image.height);\n  }\n  RidgedPerlin r=new RidgedPerlin(1,3);\n  VoronoiNoise vn=new VoronoiNoise(type.id,true);\n  image.each((x,y) -> {\n    boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n    boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n    float dst=offset.dst(x,y);\n    float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n    int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n    if (!vval)     wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n  }\n);\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i].save(type.name + \"-wreck\" + i);\n  }\n  for (  Cicon icon : Cicon.scaled) {\n    Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n    Image scaled=new Image((int)size.x,(int)size.y);\n    scaled.drawScaled(image);\n    scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n    if (icon == logicIcon) {\n      scaled.save(type.name + \"-icon-logic\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 876,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5239,
        "startLineNumber" : 403,
        "startColumnNumber" : 12,
        "endLineNumber" : 517,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  type.load();\n  type.init();\n  Color outc=Pal.darkerMetal;\n  Func<Image,Image> outline=i -> i.outline(3,outc);\n  Cons<TextureRegion> outliner=t -> {\n    if (t != null && t.found()) {\n      ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n    }\n  }\n;\n  for (  Weapon weapon : type.weapons) {\n    if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n      outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n    }\n  }\n  outliner.get(type.jointRegion);\n  outliner.get(type.footRegion);\n  outliner.get(type.legBaseRegion);\n  outliner.get(type.baseJointRegion);\n  if (type.constructor.get() instanceof Legsc)   outliner.get(type.legRegion);\n  Image image=outline.get(ImagePacker.get(type.region));\n  image.save(type.name + \"-outline\");\n  if (type.constructor.get() instanceof Mechc) {\n    image.drawCenter(type.baseRegion);\n    image.drawCenter(type.legRegion);\n    image.drawCenter(type.legRegion,true,false);\n    image.draw(type.region);\n  }\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.draw(type.region);\n  Image baseCell=ImagePacker.get(type.cellRegion);\n  Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n  cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n  image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.save(\"unit-\" + type.name + \"-full\");\n  Rand rand=new Rand();\n  rand.setSeed(type.name.hashCode());\n  int splits=3;\n  float degrees=rand.random(360f);\n  float offsetRange=Math.max(image.width,image.height) * 0.15f;\n  Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n  Image[] wrecks=new Image[splits];\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i]=new Image(image.width,image.height);\n  }\n  RidgedPerlin r=new RidgedPerlin(1,3);\n  VoronoiNoise vn=new VoronoiNoise(type.id,true);\n  image.each((x,y) -> {\n    boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n    boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n    float dst=offset.dst(x,y);\n    float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n    int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n    if (!vval)     wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n  }\n);\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i].save(type.name + \"-wreck\" + i);\n  }\n  for (  Cicon icon : Cicon.scaled) {\n    Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n    Image scaled=new Image((int)size.x,(int)size.y);\n    scaled.drawScaled(image);\n    scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n    if (icon == logicIcon) {\n      scaled.save(type.name + \"-icon-logic\");\n    }\n  }\n}\n catch (IllegalArgumentException e) {\n  Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 894,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 5396,
        "startLineNumber" : 398,
        "startColumnNumber" : 78,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 912,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 5404,
        "startLineNumber" : 398,
        "startColumnNumber" : 70,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "type -> {\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 915,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 405,
        "startColumnNumber" : 16,
        "endLineNumber" : 405,
        "endColumnNumber" : 28
      },
      "nodeContext" : "type.init();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "type",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 415,
      "startColumnNumber" : 36,
      "endLineNumber" : 415,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 415,
        "startColumnNumber" : 36,
        "endLineNumber" : 415,
        "endColumnNumber" : 48
      },
      "nodeContext" : "type.weapons",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 255,
        "startLineNumber" : 415,
        "startColumnNumber" : 16,
        "endLineNumber" : 419,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (Weapon weapon : type.weapons) {\n  if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n    outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 41,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5105,
        "startLineNumber" : 403,
        "startColumnNumber" : 15,
        "endLineNumber" : 515,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  type.load();\n  type.init();\n  Color outc=Pal.darkerMetal;\n  Func<Image,Image> outline=i -> i.outline(3,outc);\n  Cons<TextureRegion> outliner=t -> {\n    if (t != null && t.found()) {\n      ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n    }\n  }\n;\n  for (  Weapon weapon : type.weapons) {\n    if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n      outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n    }\n  }\n  outliner.get(type.jointRegion);\n  outliner.get(type.footRegion);\n  outliner.get(type.legBaseRegion);\n  outliner.get(type.baseJointRegion);\n  if (type.constructor.get() instanceof Legsc)   outliner.get(type.legRegion);\n  Image image=outline.get(ImagePacker.get(type.region));\n  image.save(type.name + \"-outline\");\n  if (type.constructor.get() instanceof Mechc) {\n    image.drawCenter(type.baseRegion);\n    image.drawCenter(type.legRegion);\n    image.drawCenter(type.legRegion,true,false);\n    image.draw(type.region);\n  }\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.draw(type.region);\n  Image baseCell=ImagePacker.get(type.cellRegion);\n  Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n  cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n  image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.save(\"unit-\" + type.name + \"-full\");\n  Rand rand=new Rand();\n  rand.setSeed(type.name.hashCode());\n  int splits=3;\n  float degrees=rand.random(360f);\n  float offsetRange=Math.max(image.width,image.height) * 0.15f;\n  Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n  Image[] wrecks=new Image[splits];\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i]=new Image(image.width,image.height);\n  }\n  RidgedPerlin r=new RidgedPerlin(1,3);\n  VoronoiNoise vn=new VoronoiNoise(type.id,true);\n  image.each((x,y) -> {\n    boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n    boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n    float dst=offset.dst(x,y);\n    float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n    int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n    if (!vval)     wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n  }\n);\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i].save(type.name + \"-wreck\" + i);\n  }\n  for (  Cicon icon : Cicon.scaled) {\n    Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n    Image scaled=new Image((int)size.x,(int)size.y);\n    scaled.drawScaled(image);\n    scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n    if (icon == logicIcon) {\n      scaled.save(type.name + \"-icon-logic\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 876,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5239,
        "startLineNumber" : 403,
        "startColumnNumber" : 12,
        "endLineNumber" : 517,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  type.load();\n  type.init();\n  Color outc=Pal.darkerMetal;\n  Func<Image,Image> outline=i -> i.outline(3,outc);\n  Cons<TextureRegion> outliner=t -> {\n    if (t != null && t.found()) {\n      ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n    }\n  }\n;\n  for (  Weapon weapon : type.weapons) {\n    if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n      outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n    }\n  }\n  outliner.get(type.jointRegion);\n  outliner.get(type.footRegion);\n  outliner.get(type.legBaseRegion);\n  outliner.get(type.baseJointRegion);\n  if (type.constructor.get() instanceof Legsc)   outliner.get(type.legRegion);\n  Image image=outline.get(ImagePacker.get(type.region));\n  image.save(type.name + \"-outline\");\n  if (type.constructor.get() instanceof Mechc) {\n    image.drawCenter(type.baseRegion);\n    image.drawCenter(type.legRegion);\n    image.drawCenter(type.legRegion,true,false);\n    image.draw(type.region);\n  }\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.draw(type.region);\n  Image baseCell=ImagePacker.get(type.cellRegion);\n  Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n  cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n  image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.save(\"unit-\" + type.name + \"-full\");\n  Rand rand=new Rand();\n  rand.setSeed(type.name.hashCode());\n  int splits=3;\n  float degrees=rand.random(360f);\n  float offsetRange=Math.max(image.width,image.height) * 0.15f;\n  Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n  Image[] wrecks=new Image[splits];\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i]=new Image(image.width,image.height);\n  }\n  RidgedPerlin r=new RidgedPerlin(1,3);\n  VoronoiNoise vn=new VoronoiNoise(type.id,true);\n  image.each((x,y) -> {\n    boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n    boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n    float dst=offset.dst(x,y);\n    float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n    int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n    if (!vval)     wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n  }\n);\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i].save(type.name + \"-wreck\" + i);\n  }\n  for (  Cicon icon : Cicon.scaled) {\n    Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n    Image scaled=new Image((int)size.x,(int)size.y);\n    scaled.drawScaled(image);\n    scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n    if (icon == logicIcon) {\n      scaled.save(type.name + \"-icon-logic\");\n    }\n  }\n}\n catch (IllegalArgumentException e) {\n  Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 894,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 5396,
        "startLineNumber" : 398,
        "startColumnNumber" : 78,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 912,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 5404,
        "startLineNumber" : 398,
        "startColumnNumber" : 70,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "type -> {\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 915,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 415,
        "startColumnNumber" : 36,
        "endLineNumber" : 415,
        "endColumnNumber" : 48
      },
      "nodeContext" : "type.weapons",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "type",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 421,
      "startColumnNumber" : 29,
      "endLineNumber" : 421,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 421,
        "startColumnNumber" : 29,
        "endLineNumber" : 421,
        "endColumnNumber" : 45
      },
      "nodeContext" : "type.jointRegion",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 421,
        "startColumnNumber" : 16,
        "endLineNumber" : 421,
        "endColumnNumber" : 46
      },
      "nodeContext" : "outliner.get(type.jointRegion)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 421,
        "startColumnNumber" : 16,
        "endLineNumber" : 421,
        "endColumnNumber" : 47
      },
      "nodeContext" : "outliner.get(type.jointRegion);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5105,
        "startLineNumber" : 403,
        "startColumnNumber" : 15,
        "endLineNumber" : 515,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  type.load();\n  type.init();\n  Color outc=Pal.darkerMetal;\n  Func<Image,Image> outline=i -> i.outline(3,outc);\n  Cons<TextureRegion> outliner=t -> {\n    if (t != null && t.found()) {\n      ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n    }\n  }\n;\n  for (  Weapon weapon : type.weapons) {\n    if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n      outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n    }\n  }\n  outliner.get(type.jointRegion);\n  outliner.get(type.footRegion);\n  outliner.get(type.legBaseRegion);\n  outliner.get(type.baseJointRegion);\n  if (type.constructor.get() instanceof Legsc)   outliner.get(type.legRegion);\n  Image image=outline.get(ImagePacker.get(type.region));\n  image.save(type.name + \"-outline\");\n  if (type.constructor.get() instanceof Mechc) {\n    image.drawCenter(type.baseRegion);\n    image.drawCenter(type.legRegion);\n    image.drawCenter(type.legRegion,true,false);\n    image.draw(type.region);\n  }\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.draw(type.region);\n  Image baseCell=ImagePacker.get(type.cellRegion);\n  Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n  cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n  image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.save(\"unit-\" + type.name + \"-full\");\n  Rand rand=new Rand();\n  rand.setSeed(type.name.hashCode());\n  int splits=3;\n  float degrees=rand.random(360f);\n  float offsetRange=Math.max(image.width,image.height) * 0.15f;\n  Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n  Image[] wrecks=new Image[splits];\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i]=new Image(image.width,image.height);\n  }\n  RidgedPerlin r=new RidgedPerlin(1,3);\n  VoronoiNoise vn=new VoronoiNoise(type.id,true);\n  image.each((x,y) -> {\n    boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n    boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n    float dst=offset.dst(x,y);\n    float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n    int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n    if (!vval)     wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n  }\n);\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i].save(type.name + \"-wreck\" + i);\n  }\n  for (  Cicon icon : Cicon.scaled) {\n    Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n    Image scaled=new Image((int)size.x,(int)size.y);\n    scaled.drawScaled(image);\n    scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n    if (icon == logicIcon) {\n      scaled.save(type.name + \"-icon-logic\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 876,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5239,
        "startLineNumber" : 403,
        "startColumnNumber" : 12,
        "endLineNumber" : 517,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  type.load();\n  type.init();\n  Color outc=Pal.darkerMetal;\n  Func<Image,Image> outline=i -> i.outline(3,outc);\n  Cons<TextureRegion> outliner=t -> {\n    if (t != null && t.found()) {\n      ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n    }\n  }\n;\n  for (  Weapon weapon : type.weapons) {\n    if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n      outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n    }\n  }\n  outliner.get(type.jointRegion);\n  outliner.get(type.footRegion);\n  outliner.get(type.legBaseRegion);\n  outliner.get(type.baseJointRegion);\n  if (type.constructor.get() instanceof Legsc)   outliner.get(type.legRegion);\n  Image image=outline.get(ImagePacker.get(type.region));\n  image.save(type.name + \"-outline\");\n  if (type.constructor.get() instanceof Mechc) {\n    image.drawCenter(type.baseRegion);\n    image.drawCenter(type.legRegion);\n    image.drawCenter(type.legRegion,true,false);\n    image.draw(type.region);\n  }\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.draw(type.region);\n  Image baseCell=ImagePacker.get(type.cellRegion);\n  Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n  cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n  image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.save(\"unit-\" + type.name + \"-full\");\n  Rand rand=new Rand();\n  rand.setSeed(type.name.hashCode());\n  int splits=3;\n  float degrees=rand.random(360f);\n  float offsetRange=Math.max(image.width,image.height) * 0.15f;\n  Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n  Image[] wrecks=new Image[splits];\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i]=new Image(image.width,image.height);\n  }\n  RidgedPerlin r=new RidgedPerlin(1,3);\n  VoronoiNoise vn=new VoronoiNoise(type.id,true);\n  image.each((x,y) -> {\n    boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n    boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n    float dst=offset.dst(x,y);\n    float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n    int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n    if (!vval)     wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n  }\n);\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i].save(type.name + \"-wreck\" + i);\n  }\n  for (  Cicon icon : Cicon.scaled) {\n    Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n    Image scaled=new Image((int)size.x,(int)size.y);\n    scaled.drawScaled(image);\n    scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n    if (icon == logicIcon) {\n      scaled.save(type.name + \"-icon-logic\");\n    }\n  }\n}\n catch (IllegalArgumentException e) {\n  Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 894,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 5396,
        "startLineNumber" : 398,
        "startColumnNumber" : 78,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 912,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 5404,
        "startLineNumber" : 398,
        "startColumnNumber" : 70,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "type -> {\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 915,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 421,
        "startColumnNumber" : 16,
        "endLineNumber" : 421,
        "endColumnNumber" : 47
      },
      "nodeContext" : "outliner.get(type.jointRegion);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "type",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 422,
      "startColumnNumber" : 29,
      "endLineNumber" : 422,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 422,
        "startColumnNumber" : 29,
        "endLineNumber" : 422,
        "endColumnNumber" : 44
      },
      "nodeContext" : "type.footRegion",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 422,
        "startColumnNumber" : 16,
        "endLineNumber" : 422,
        "endColumnNumber" : 45
      },
      "nodeContext" : "outliner.get(type.footRegion)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 422,
        "startColumnNumber" : 16,
        "endLineNumber" : 422,
        "endColumnNumber" : 46
      },
      "nodeContext" : "outliner.get(type.footRegion);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5105,
        "startLineNumber" : 403,
        "startColumnNumber" : 15,
        "endLineNumber" : 515,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  type.load();\n  type.init();\n  Color outc=Pal.darkerMetal;\n  Func<Image,Image> outline=i -> i.outline(3,outc);\n  Cons<TextureRegion> outliner=t -> {\n    if (t != null && t.found()) {\n      ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n    }\n  }\n;\n  for (  Weapon weapon : type.weapons) {\n    if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n      outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n    }\n  }\n  outliner.get(type.jointRegion);\n  outliner.get(type.footRegion);\n  outliner.get(type.legBaseRegion);\n  outliner.get(type.baseJointRegion);\n  if (type.constructor.get() instanceof Legsc)   outliner.get(type.legRegion);\n  Image image=outline.get(ImagePacker.get(type.region));\n  image.save(type.name + \"-outline\");\n  if (type.constructor.get() instanceof Mechc) {\n    image.drawCenter(type.baseRegion);\n    image.drawCenter(type.legRegion);\n    image.drawCenter(type.legRegion,true,false);\n    image.draw(type.region);\n  }\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.draw(type.region);\n  Image baseCell=ImagePacker.get(type.cellRegion);\n  Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n  cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n  image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.save(\"unit-\" + type.name + \"-full\");\n  Rand rand=new Rand();\n  rand.setSeed(type.name.hashCode());\n  int splits=3;\n  float degrees=rand.random(360f);\n  float offsetRange=Math.max(image.width,image.height) * 0.15f;\n  Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n  Image[] wrecks=new Image[splits];\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i]=new Image(image.width,image.height);\n  }\n  RidgedPerlin r=new RidgedPerlin(1,3);\n  VoronoiNoise vn=new VoronoiNoise(type.id,true);\n  image.each((x,y) -> {\n    boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n    boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n    float dst=offset.dst(x,y);\n    float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n    int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n    if (!vval)     wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n  }\n);\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i].save(type.name + \"-wreck\" + i);\n  }\n  for (  Cicon icon : Cicon.scaled) {\n    Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n    Image scaled=new Image((int)size.x,(int)size.y);\n    scaled.drawScaled(image);\n    scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n    if (icon == logicIcon) {\n      scaled.save(type.name + \"-icon-logic\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 876,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5239,
        "startLineNumber" : 403,
        "startColumnNumber" : 12,
        "endLineNumber" : 517,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  type.load();\n  type.init();\n  Color outc=Pal.darkerMetal;\n  Func<Image,Image> outline=i -> i.outline(3,outc);\n  Cons<TextureRegion> outliner=t -> {\n    if (t != null && t.found()) {\n      ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n    }\n  }\n;\n  for (  Weapon weapon : type.weapons) {\n    if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n      outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n    }\n  }\n  outliner.get(type.jointRegion);\n  outliner.get(type.footRegion);\n  outliner.get(type.legBaseRegion);\n  outliner.get(type.baseJointRegion);\n  if (type.constructor.get() instanceof Legsc)   outliner.get(type.legRegion);\n  Image image=outline.get(ImagePacker.get(type.region));\n  image.save(type.name + \"-outline\");\n  if (type.constructor.get() instanceof Mechc) {\n    image.drawCenter(type.baseRegion);\n    image.drawCenter(type.legRegion);\n    image.drawCenter(type.legRegion,true,false);\n    image.draw(type.region);\n  }\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.draw(type.region);\n  Image baseCell=ImagePacker.get(type.cellRegion);\n  Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n  cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n  image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.save(\"unit-\" + type.name + \"-full\");\n  Rand rand=new Rand();\n  rand.setSeed(type.name.hashCode());\n  int splits=3;\n  float degrees=rand.random(360f);\n  float offsetRange=Math.max(image.width,image.height) * 0.15f;\n  Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n  Image[] wrecks=new Image[splits];\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i]=new Image(image.width,image.height);\n  }\n  RidgedPerlin r=new RidgedPerlin(1,3);\n  VoronoiNoise vn=new VoronoiNoise(type.id,true);\n  image.each((x,y) -> {\n    boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n    boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n    float dst=offset.dst(x,y);\n    float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n    int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n    if (!vval)     wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n  }\n);\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i].save(type.name + \"-wreck\" + i);\n  }\n  for (  Cicon icon : Cicon.scaled) {\n    Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n    Image scaled=new Image((int)size.x,(int)size.y);\n    scaled.drawScaled(image);\n    scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n    if (icon == logicIcon) {\n      scaled.save(type.name + \"-icon-logic\");\n    }\n  }\n}\n catch (IllegalArgumentException e) {\n  Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 894,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 5396,
        "startLineNumber" : 398,
        "startColumnNumber" : 78,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 912,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 5404,
        "startLineNumber" : 398,
        "startColumnNumber" : 70,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "type -> {\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 915,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 422,
        "startColumnNumber" : 16,
        "endLineNumber" : 422,
        "endColumnNumber" : 46
      },
      "nodeContext" : "outliner.get(type.footRegion);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "type",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 423,
      "startColumnNumber" : 29,
      "endLineNumber" : 423,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 423,
        "startColumnNumber" : 29,
        "endLineNumber" : 423,
        "endColumnNumber" : 47
      },
      "nodeContext" : "type.legBaseRegion",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 423,
        "startColumnNumber" : 16,
        "endLineNumber" : 423,
        "endColumnNumber" : 48
      },
      "nodeContext" : "outliner.get(type.legBaseRegion)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 423,
        "startColumnNumber" : 16,
        "endLineNumber" : 423,
        "endColumnNumber" : 49
      },
      "nodeContext" : "outliner.get(type.legBaseRegion);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5105,
        "startLineNumber" : 403,
        "startColumnNumber" : 15,
        "endLineNumber" : 515,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  type.load();\n  type.init();\n  Color outc=Pal.darkerMetal;\n  Func<Image,Image> outline=i -> i.outline(3,outc);\n  Cons<TextureRegion> outliner=t -> {\n    if (t != null && t.found()) {\n      ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n    }\n  }\n;\n  for (  Weapon weapon : type.weapons) {\n    if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n      outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n    }\n  }\n  outliner.get(type.jointRegion);\n  outliner.get(type.footRegion);\n  outliner.get(type.legBaseRegion);\n  outliner.get(type.baseJointRegion);\n  if (type.constructor.get() instanceof Legsc)   outliner.get(type.legRegion);\n  Image image=outline.get(ImagePacker.get(type.region));\n  image.save(type.name + \"-outline\");\n  if (type.constructor.get() instanceof Mechc) {\n    image.drawCenter(type.baseRegion);\n    image.drawCenter(type.legRegion);\n    image.drawCenter(type.legRegion,true,false);\n    image.draw(type.region);\n  }\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.draw(type.region);\n  Image baseCell=ImagePacker.get(type.cellRegion);\n  Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n  cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n  image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.save(\"unit-\" + type.name + \"-full\");\n  Rand rand=new Rand();\n  rand.setSeed(type.name.hashCode());\n  int splits=3;\n  float degrees=rand.random(360f);\n  float offsetRange=Math.max(image.width,image.height) * 0.15f;\n  Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n  Image[] wrecks=new Image[splits];\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i]=new Image(image.width,image.height);\n  }\n  RidgedPerlin r=new RidgedPerlin(1,3);\n  VoronoiNoise vn=new VoronoiNoise(type.id,true);\n  image.each((x,y) -> {\n    boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n    boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n    float dst=offset.dst(x,y);\n    float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n    int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n    if (!vval)     wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n  }\n);\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i].save(type.name + \"-wreck\" + i);\n  }\n  for (  Cicon icon : Cicon.scaled) {\n    Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n    Image scaled=new Image((int)size.x,(int)size.y);\n    scaled.drawScaled(image);\n    scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n    if (icon == logicIcon) {\n      scaled.save(type.name + \"-icon-logic\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 876,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5239,
        "startLineNumber" : 403,
        "startColumnNumber" : 12,
        "endLineNumber" : 517,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  type.load();\n  type.init();\n  Color outc=Pal.darkerMetal;\n  Func<Image,Image> outline=i -> i.outline(3,outc);\n  Cons<TextureRegion> outliner=t -> {\n    if (t != null && t.found()) {\n      ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n    }\n  }\n;\n  for (  Weapon weapon : type.weapons) {\n    if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n      outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n    }\n  }\n  outliner.get(type.jointRegion);\n  outliner.get(type.footRegion);\n  outliner.get(type.legBaseRegion);\n  outliner.get(type.baseJointRegion);\n  if (type.constructor.get() instanceof Legsc)   outliner.get(type.legRegion);\n  Image image=outline.get(ImagePacker.get(type.region));\n  image.save(type.name + \"-outline\");\n  if (type.constructor.get() instanceof Mechc) {\n    image.drawCenter(type.baseRegion);\n    image.drawCenter(type.legRegion);\n    image.drawCenter(type.legRegion,true,false);\n    image.draw(type.region);\n  }\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.draw(type.region);\n  Image baseCell=ImagePacker.get(type.cellRegion);\n  Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n  cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n  image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.save(\"unit-\" + type.name + \"-full\");\n  Rand rand=new Rand();\n  rand.setSeed(type.name.hashCode());\n  int splits=3;\n  float degrees=rand.random(360f);\n  float offsetRange=Math.max(image.width,image.height) * 0.15f;\n  Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n  Image[] wrecks=new Image[splits];\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i]=new Image(image.width,image.height);\n  }\n  RidgedPerlin r=new RidgedPerlin(1,3);\n  VoronoiNoise vn=new VoronoiNoise(type.id,true);\n  image.each((x,y) -> {\n    boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n    boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n    float dst=offset.dst(x,y);\n    float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n    int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n    if (!vval)     wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n  }\n);\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i].save(type.name + \"-wreck\" + i);\n  }\n  for (  Cicon icon : Cicon.scaled) {\n    Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n    Image scaled=new Image((int)size.x,(int)size.y);\n    scaled.drawScaled(image);\n    scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n    if (icon == logicIcon) {\n      scaled.save(type.name + \"-icon-logic\");\n    }\n  }\n}\n catch (IllegalArgumentException e) {\n  Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 894,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 5396,
        "startLineNumber" : 398,
        "startColumnNumber" : 78,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 912,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 5404,
        "startLineNumber" : 398,
        "startColumnNumber" : 70,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "type -> {\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 915,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 423,
        "startColumnNumber" : 16,
        "endLineNumber" : 423,
        "endColumnNumber" : 49
      },
      "nodeContext" : "outliner.get(type.legBaseRegion);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "type",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 424,
      "startColumnNumber" : 29,
      "endLineNumber" : 424,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 424,
        "startColumnNumber" : 29,
        "endLineNumber" : 424,
        "endColumnNumber" : 49
      },
      "nodeContext" : "type.baseJointRegion",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 424,
        "startColumnNumber" : 16,
        "endLineNumber" : 424,
        "endColumnNumber" : 50
      },
      "nodeContext" : "outliner.get(type.baseJointRegion)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 424,
        "startColumnNumber" : 16,
        "endLineNumber" : 424,
        "endColumnNumber" : 51
      },
      "nodeContext" : "outliner.get(type.baseJointRegion);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5105,
        "startLineNumber" : 403,
        "startColumnNumber" : 15,
        "endLineNumber" : 515,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  type.load();\n  type.init();\n  Color outc=Pal.darkerMetal;\n  Func<Image,Image> outline=i -> i.outline(3,outc);\n  Cons<TextureRegion> outliner=t -> {\n    if (t != null && t.found()) {\n      ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n    }\n  }\n;\n  for (  Weapon weapon : type.weapons) {\n    if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n      outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n    }\n  }\n  outliner.get(type.jointRegion);\n  outliner.get(type.footRegion);\n  outliner.get(type.legBaseRegion);\n  outliner.get(type.baseJointRegion);\n  if (type.constructor.get() instanceof Legsc)   outliner.get(type.legRegion);\n  Image image=outline.get(ImagePacker.get(type.region));\n  image.save(type.name + \"-outline\");\n  if (type.constructor.get() instanceof Mechc) {\n    image.drawCenter(type.baseRegion);\n    image.drawCenter(type.legRegion);\n    image.drawCenter(type.legRegion,true,false);\n    image.draw(type.region);\n  }\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.draw(type.region);\n  Image baseCell=ImagePacker.get(type.cellRegion);\n  Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n  cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n  image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.save(\"unit-\" + type.name + \"-full\");\n  Rand rand=new Rand();\n  rand.setSeed(type.name.hashCode());\n  int splits=3;\n  float degrees=rand.random(360f);\n  float offsetRange=Math.max(image.width,image.height) * 0.15f;\n  Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n  Image[] wrecks=new Image[splits];\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i]=new Image(image.width,image.height);\n  }\n  RidgedPerlin r=new RidgedPerlin(1,3);\n  VoronoiNoise vn=new VoronoiNoise(type.id,true);\n  image.each((x,y) -> {\n    boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n    boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n    float dst=offset.dst(x,y);\n    float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n    int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n    if (!vval)     wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n  }\n);\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i].save(type.name + \"-wreck\" + i);\n  }\n  for (  Cicon icon : Cicon.scaled) {\n    Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n    Image scaled=new Image((int)size.x,(int)size.y);\n    scaled.drawScaled(image);\n    scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n    if (icon == logicIcon) {\n      scaled.save(type.name + \"-icon-logic\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 876,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5239,
        "startLineNumber" : 403,
        "startColumnNumber" : 12,
        "endLineNumber" : 517,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  type.load();\n  type.init();\n  Color outc=Pal.darkerMetal;\n  Func<Image,Image> outline=i -> i.outline(3,outc);\n  Cons<TextureRegion> outliner=t -> {\n    if (t != null && t.found()) {\n      ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n    }\n  }\n;\n  for (  Weapon weapon : type.weapons) {\n    if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n      outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n    }\n  }\n  outliner.get(type.jointRegion);\n  outliner.get(type.footRegion);\n  outliner.get(type.legBaseRegion);\n  outliner.get(type.baseJointRegion);\n  if (type.constructor.get() instanceof Legsc)   outliner.get(type.legRegion);\n  Image image=outline.get(ImagePacker.get(type.region));\n  image.save(type.name + \"-outline\");\n  if (type.constructor.get() instanceof Mechc) {\n    image.drawCenter(type.baseRegion);\n    image.drawCenter(type.legRegion);\n    image.drawCenter(type.legRegion,true,false);\n    image.draw(type.region);\n  }\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.draw(type.region);\n  Image baseCell=ImagePacker.get(type.cellRegion);\n  Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n  cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n  image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.save(\"unit-\" + type.name + \"-full\");\n  Rand rand=new Rand();\n  rand.setSeed(type.name.hashCode());\n  int splits=3;\n  float degrees=rand.random(360f);\n  float offsetRange=Math.max(image.width,image.height) * 0.15f;\n  Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n  Image[] wrecks=new Image[splits];\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i]=new Image(image.width,image.height);\n  }\n  RidgedPerlin r=new RidgedPerlin(1,3);\n  VoronoiNoise vn=new VoronoiNoise(type.id,true);\n  image.each((x,y) -> {\n    boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n    boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n    float dst=offset.dst(x,y);\n    float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n    int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n    if (!vval)     wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n  }\n);\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i].save(type.name + \"-wreck\" + i);\n  }\n  for (  Cicon icon : Cicon.scaled) {\n    Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n    Image scaled=new Image((int)size.x,(int)size.y);\n    scaled.drawScaled(image);\n    scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n    if (icon == logicIcon) {\n      scaled.save(type.name + \"-icon-logic\");\n    }\n  }\n}\n catch (IllegalArgumentException e) {\n  Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 894,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 5396,
        "startLineNumber" : 398,
        "startColumnNumber" : 78,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 912,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 5404,
        "startLineNumber" : 398,
        "startColumnNumber" : 70,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "type -> {\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 915,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 424,
        "startColumnNumber" : 16,
        "endLineNumber" : 424,
        "endColumnNumber" : 51
      },
      "nodeContext" : "outliner.get(type.baseJointRegion);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "type",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 425,
      "startColumnNumber" : 19,
      "endLineNumber" : 425,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 425,
        "startColumnNumber" : 19,
        "endLineNumber" : 425,
        "endColumnNumber" : 35
      },
      "nodeContext" : "type.constructor",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InstanceofExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 425,
        "startColumnNumber" : 19,
        "endLineNumber" : 425,
        "endColumnNumber" : 41
      },
      "nodeContext" : "type.constructor.get()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 425,
        "startColumnNumber" : 19,
        "endLineNumber" : 425,
        "endColumnNumber" : 58
      },
      "nodeContext" : "type.constructor.get() instanceof Legsc",
      "nodeType" : "InstanceofExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 425,
        "startColumnNumber" : 16,
        "endLineNumber" : 425,
        "endColumnNumber" : 89
      },
      "nodeContext" : "if (type.constructor.get() instanceof Legsc) outliner.get(type.legRegion);\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5105,
        "startLineNumber" : 403,
        "startColumnNumber" : 15,
        "endLineNumber" : 515,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  type.load();\n  type.init();\n  Color outc=Pal.darkerMetal;\n  Func<Image,Image> outline=i -> i.outline(3,outc);\n  Cons<TextureRegion> outliner=t -> {\n    if (t != null && t.found()) {\n      ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n    }\n  }\n;\n  for (  Weapon weapon : type.weapons) {\n    if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n      outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n    }\n  }\n  outliner.get(type.jointRegion);\n  outliner.get(type.footRegion);\n  outliner.get(type.legBaseRegion);\n  outliner.get(type.baseJointRegion);\n  if (type.constructor.get() instanceof Legsc)   outliner.get(type.legRegion);\n  Image image=outline.get(ImagePacker.get(type.region));\n  image.save(type.name + \"-outline\");\n  if (type.constructor.get() instanceof Mechc) {\n    image.drawCenter(type.baseRegion);\n    image.drawCenter(type.legRegion);\n    image.drawCenter(type.legRegion,true,false);\n    image.draw(type.region);\n  }\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.draw(type.region);\n  Image baseCell=ImagePacker.get(type.cellRegion);\n  Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n  cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n  image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.save(\"unit-\" + type.name + \"-full\");\n  Rand rand=new Rand();\n  rand.setSeed(type.name.hashCode());\n  int splits=3;\n  float degrees=rand.random(360f);\n  float offsetRange=Math.max(image.width,image.height) * 0.15f;\n  Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n  Image[] wrecks=new Image[splits];\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i]=new Image(image.width,image.height);\n  }\n  RidgedPerlin r=new RidgedPerlin(1,3);\n  VoronoiNoise vn=new VoronoiNoise(type.id,true);\n  image.each((x,y) -> {\n    boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n    boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n    float dst=offset.dst(x,y);\n    float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n    int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n    if (!vval)     wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n  }\n);\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i].save(type.name + \"-wreck\" + i);\n  }\n  for (  Cicon icon : Cicon.scaled) {\n    Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n    Image scaled=new Image((int)size.x,(int)size.y);\n    scaled.drawScaled(image);\n    scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n    if (icon == logicIcon) {\n      scaled.save(type.name + \"-icon-logic\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 876,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5239,
        "startLineNumber" : 403,
        "startColumnNumber" : 12,
        "endLineNumber" : 517,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  type.load();\n  type.init();\n  Color outc=Pal.darkerMetal;\n  Func<Image,Image> outline=i -> i.outline(3,outc);\n  Cons<TextureRegion> outliner=t -> {\n    if (t != null && t.found()) {\n      ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n    }\n  }\n;\n  for (  Weapon weapon : type.weapons) {\n    if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n      outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n    }\n  }\n  outliner.get(type.jointRegion);\n  outliner.get(type.footRegion);\n  outliner.get(type.legBaseRegion);\n  outliner.get(type.baseJointRegion);\n  if (type.constructor.get() instanceof Legsc)   outliner.get(type.legRegion);\n  Image image=outline.get(ImagePacker.get(type.region));\n  image.save(type.name + \"-outline\");\n  if (type.constructor.get() instanceof Mechc) {\n    image.drawCenter(type.baseRegion);\n    image.drawCenter(type.legRegion);\n    image.drawCenter(type.legRegion,true,false);\n    image.draw(type.region);\n  }\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.draw(type.region);\n  Image baseCell=ImagePacker.get(type.cellRegion);\n  Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n  cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n  image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.save(\"unit-\" + type.name + \"-full\");\n  Rand rand=new Rand();\n  rand.setSeed(type.name.hashCode());\n  int splits=3;\n  float degrees=rand.random(360f);\n  float offsetRange=Math.max(image.width,image.height) * 0.15f;\n  Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n  Image[] wrecks=new Image[splits];\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i]=new Image(image.width,image.height);\n  }\n  RidgedPerlin r=new RidgedPerlin(1,3);\n  VoronoiNoise vn=new VoronoiNoise(type.id,true);\n  image.each((x,y) -> {\n    boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n    boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n    float dst=offset.dst(x,y);\n    float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n    int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n    if (!vval)     wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n  }\n);\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i].save(type.name + \"-wreck\" + i);\n  }\n  for (  Cicon icon : Cicon.scaled) {\n    Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n    Image scaled=new Image((int)size.x,(int)size.y);\n    scaled.drawScaled(image);\n    scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n    if (icon == logicIcon) {\n      scaled.save(type.name + \"-icon-logic\");\n    }\n  }\n}\n catch (IllegalArgumentException e) {\n  Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 894,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 5396,
        "startLineNumber" : 398,
        "startColumnNumber" : 78,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 912,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 5404,
        "startLineNumber" : 398,
        "startColumnNumber" : 70,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "type -> {\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 915,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 425,
        "startColumnNumber" : 16,
        "endLineNumber" : 425,
        "endColumnNumber" : 89
      },
      "nodeContext" : "if (type.constructor.get() instanceof Legsc) outliner.get(type.legRegion);\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "type",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 425,
      "startColumnNumber" : 73,
      "endLineNumber" : 425,
      "endColumnNumber" : 77
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 425,
        "startColumnNumber" : 73,
        "endLineNumber" : 425,
        "endColumnNumber" : 87
      },
      "nodeContext" : "type.legRegion",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 425,
        "startColumnNumber" : 60,
        "endLineNumber" : 425,
        "endColumnNumber" : 88
      },
      "nodeContext" : "outliner.get(type.legRegion)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 425,
        "startColumnNumber" : 60,
        "endLineNumber" : 425,
        "endColumnNumber" : 89
      },
      "nodeContext" : "outliner.get(type.legRegion);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 425,
        "startColumnNumber" : 16,
        "endLineNumber" : 425,
        "endColumnNumber" : 89
      },
      "nodeContext" : "if (type.constructor.get() instanceof Legsc) outliner.get(type.legRegion);\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5105,
        "startLineNumber" : 403,
        "startColumnNumber" : 15,
        "endLineNumber" : 515,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  type.load();\n  type.init();\n  Color outc=Pal.darkerMetal;\n  Func<Image,Image> outline=i -> i.outline(3,outc);\n  Cons<TextureRegion> outliner=t -> {\n    if (t != null && t.found()) {\n      ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n    }\n  }\n;\n  for (  Weapon weapon : type.weapons) {\n    if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n      outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n    }\n  }\n  outliner.get(type.jointRegion);\n  outliner.get(type.footRegion);\n  outliner.get(type.legBaseRegion);\n  outliner.get(type.baseJointRegion);\n  if (type.constructor.get() instanceof Legsc)   outliner.get(type.legRegion);\n  Image image=outline.get(ImagePacker.get(type.region));\n  image.save(type.name + \"-outline\");\n  if (type.constructor.get() instanceof Mechc) {\n    image.drawCenter(type.baseRegion);\n    image.drawCenter(type.legRegion);\n    image.drawCenter(type.legRegion,true,false);\n    image.draw(type.region);\n  }\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.draw(type.region);\n  Image baseCell=ImagePacker.get(type.cellRegion);\n  Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n  cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n  image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.save(\"unit-\" + type.name + \"-full\");\n  Rand rand=new Rand();\n  rand.setSeed(type.name.hashCode());\n  int splits=3;\n  float degrees=rand.random(360f);\n  float offsetRange=Math.max(image.width,image.height) * 0.15f;\n  Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n  Image[] wrecks=new Image[splits];\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i]=new Image(image.width,image.height);\n  }\n  RidgedPerlin r=new RidgedPerlin(1,3);\n  VoronoiNoise vn=new VoronoiNoise(type.id,true);\n  image.each((x,y) -> {\n    boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n    boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n    float dst=offset.dst(x,y);\n    float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n    int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n    if (!vval)     wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n  }\n);\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i].save(type.name + \"-wreck\" + i);\n  }\n  for (  Cicon icon : Cicon.scaled) {\n    Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n    Image scaled=new Image((int)size.x,(int)size.y);\n    scaled.drawScaled(image);\n    scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n    if (icon == logicIcon) {\n      scaled.save(type.name + \"-icon-logic\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 876,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5239,
        "startLineNumber" : 403,
        "startColumnNumber" : 12,
        "endLineNumber" : 517,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  type.load();\n  type.init();\n  Color outc=Pal.darkerMetal;\n  Func<Image,Image> outline=i -> i.outline(3,outc);\n  Cons<TextureRegion> outliner=t -> {\n    if (t != null && t.found()) {\n      ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n    }\n  }\n;\n  for (  Weapon weapon : type.weapons) {\n    if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n      outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n    }\n  }\n  outliner.get(type.jointRegion);\n  outliner.get(type.footRegion);\n  outliner.get(type.legBaseRegion);\n  outliner.get(type.baseJointRegion);\n  if (type.constructor.get() instanceof Legsc)   outliner.get(type.legRegion);\n  Image image=outline.get(ImagePacker.get(type.region));\n  image.save(type.name + \"-outline\");\n  if (type.constructor.get() instanceof Mechc) {\n    image.drawCenter(type.baseRegion);\n    image.drawCenter(type.legRegion);\n    image.drawCenter(type.legRegion,true,false);\n    image.draw(type.region);\n  }\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.draw(type.region);\n  Image baseCell=ImagePacker.get(type.cellRegion);\n  Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n  cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n  image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.save(\"unit-\" + type.name + \"-full\");\n  Rand rand=new Rand();\n  rand.setSeed(type.name.hashCode());\n  int splits=3;\n  float degrees=rand.random(360f);\n  float offsetRange=Math.max(image.width,image.height) * 0.15f;\n  Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n  Image[] wrecks=new Image[splits];\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i]=new Image(image.width,image.height);\n  }\n  RidgedPerlin r=new RidgedPerlin(1,3);\n  VoronoiNoise vn=new VoronoiNoise(type.id,true);\n  image.each((x,y) -> {\n    boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n    boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n    float dst=offset.dst(x,y);\n    float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n    int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n    if (!vval)     wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n  }\n);\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i].save(type.name + \"-wreck\" + i);\n  }\n  for (  Cicon icon : Cicon.scaled) {\n    Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n    Image scaled=new Image((int)size.x,(int)size.y);\n    scaled.drawScaled(image);\n    scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n    if (icon == logicIcon) {\n      scaled.save(type.name + \"-icon-logic\");\n    }\n  }\n}\n catch (IllegalArgumentException e) {\n  Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 894,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 5396,
        "startLineNumber" : 398,
        "startColumnNumber" : 78,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 912,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 5404,
        "startLineNumber" : 398,
        "startColumnNumber" : 70,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "type -> {\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 915,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 425,
        "startColumnNumber" : 16,
        "endLineNumber" : 425,
        "endColumnNumber" : 89
      },
      "nodeContext" : "if (type.constructor.get() instanceof Legsc) outliner.get(type.legRegion);\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "type",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 427,
      "startColumnNumber" : 58,
      "endLineNumber" : 427,
      "endColumnNumber" : 62
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 427,
        "startColumnNumber" : 58,
        "endLineNumber" : 427,
        "endColumnNumber" : 69
      },
      "nodeContext" : "type.region",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 427,
        "startColumnNumber" : 42,
        "endLineNumber" : 427,
        "endColumnNumber" : 70
      },
      "nodeContext" : "ImagePacker.get(type.region)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 427,
        "startColumnNumber" : 30,
        "endLineNumber" : 427,
        "endColumnNumber" : 71
      },
      "nodeContext" : "outline.get(ImagePacker.get(type.region))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 427,
        "startColumnNumber" : 22,
        "endLineNumber" : 427,
        "endColumnNumber" : 71
      },
      "nodeContext" : "image=outline.get(ImagePacker.get(type.region))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 427,
        "startColumnNumber" : 16,
        "endLineNumber" : 427,
        "endColumnNumber" : 72
      },
      "nodeContext" : "Image image=outline.get(ImagePacker.get(type.region));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5105,
        "startLineNumber" : 403,
        "startColumnNumber" : 15,
        "endLineNumber" : 515,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  type.load();\n  type.init();\n  Color outc=Pal.darkerMetal;\n  Func<Image,Image> outline=i -> i.outline(3,outc);\n  Cons<TextureRegion> outliner=t -> {\n    if (t != null && t.found()) {\n      ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n    }\n  }\n;\n  for (  Weapon weapon : type.weapons) {\n    if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n      outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n    }\n  }\n  outliner.get(type.jointRegion);\n  outliner.get(type.footRegion);\n  outliner.get(type.legBaseRegion);\n  outliner.get(type.baseJointRegion);\n  if (type.constructor.get() instanceof Legsc)   outliner.get(type.legRegion);\n  Image image=outline.get(ImagePacker.get(type.region));\n  image.save(type.name + \"-outline\");\n  if (type.constructor.get() instanceof Mechc) {\n    image.drawCenter(type.baseRegion);\n    image.drawCenter(type.legRegion);\n    image.drawCenter(type.legRegion,true,false);\n    image.draw(type.region);\n  }\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.draw(type.region);\n  Image baseCell=ImagePacker.get(type.cellRegion);\n  Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n  cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n  image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.save(\"unit-\" + type.name + \"-full\");\n  Rand rand=new Rand();\n  rand.setSeed(type.name.hashCode());\n  int splits=3;\n  float degrees=rand.random(360f);\n  float offsetRange=Math.max(image.width,image.height) * 0.15f;\n  Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n  Image[] wrecks=new Image[splits];\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i]=new Image(image.width,image.height);\n  }\n  RidgedPerlin r=new RidgedPerlin(1,3);\n  VoronoiNoise vn=new VoronoiNoise(type.id,true);\n  image.each((x,y) -> {\n    boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n    boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n    float dst=offset.dst(x,y);\n    float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n    int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n    if (!vval)     wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n  }\n);\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i].save(type.name + \"-wreck\" + i);\n  }\n  for (  Cicon icon : Cicon.scaled) {\n    Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n    Image scaled=new Image((int)size.x,(int)size.y);\n    scaled.drawScaled(image);\n    scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n    if (icon == logicIcon) {\n      scaled.save(type.name + \"-icon-logic\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 876,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5239,
        "startLineNumber" : 403,
        "startColumnNumber" : 12,
        "endLineNumber" : 517,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  type.load();\n  type.init();\n  Color outc=Pal.darkerMetal;\n  Func<Image,Image> outline=i -> i.outline(3,outc);\n  Cons<TextureRegion> outliner=t -> {\n    if (t != null && t.found()) {\n      ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n    }\n  }\n;\n  for (  Weapon weapon : type.weapons) {\n    if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n      outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n    }\n  }\n  outliner.get(type.jointRegion);\n  outliner.get(type.footRegion);\n  outliner.get(type.legBaseRegion);\n  outliner.get(type.baseJointRegion);\n  if (type.constructor.get() instanceof Legsc)   outliner.get(type.legRegion);\n  Image image=outline.get(ImagePacker.get(type.region));\n  image.save(type.name + \"-outline\");\n  if (type.constructor.get() instanceof Mechc) {\n    image.drawCenter(type.baseRegion);\n    image.drawCenter(type.legRegion);\n    image.drawCenter(type.legRegion,true,false);\n    image.draw(type.region);\n  }\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.draw(type.region);\n  Image baseCell=ImagePacker.get(type.cellRegion);\n  Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n  cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n  image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.save(\"unit-\" + type.name + \"-full\");\n  Rand rand=new Rand();\n  rand.setSeed(type.name.hashCode());\n  int splits=3;\n  float degrees=rand.random(360f);\n  float offsetRange=Math.max(image.width,image.height) * 0.15f;\n  Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n  Image[] wrecks=new Image[splits];\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i]=new Image(image.width,image.height);\n  }\n  RidgedPerlin r=new RidgedPerlin(1,3);\n  VoronoiNoise vn=new VoronoiNoise(type.id,true);\n  image.each((x,y) -> {\n    boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n    boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n    float dst=offset.dst(x,y);\n    float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n    int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n    if (!vval)     wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n  }\n);\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i].save(type.name + \"-wreck\" + i);\n  }\n  for (  Cicon icon : Cicon.scaled) {\n    Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n    Image scaled=new Image((int)size.x,(int)size.y);\n    scaled.drawScaled(image);\n    scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n    if (icon == logicIcon) {\n      scaled.save(type.name + \"-icon-logic\");\n    }\n  }\n}\n catch (IllegalArgumentException e) {\n  Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 894,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 5396,
        "startLineNumber" : 398,
        "startColumnNumber" : 78,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 912,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 5404,
        "startLineNumber" : 398,
        "startColumnNumber" : 70,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "type -> {\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 915,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 427,
        "startColumnNumber" : 16,
        "endLineNumber" : 427,
        "endColumnNumber" : 72
      },
      "nodeContext" : "Image image=outline.get(ImagePacker.get(type.region));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "type",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 429,
      "startColumnNumber" : 27,
      "endLineNumber" : 429,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 429,
        "startColumnNumber" : 27,
        "endLineNumber" : 429,
        "endColumnNumber" : 36
      },
      "nodeContext" : "type.name",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 429,
        "startColumnNumber" : 27,
        "endLineNumber" : 429,
        "endColumnNumber" : 49
      },
      "nodeContext" : "type.name + \"-outline\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 429,
        "startColumnNumber" : 16,
        "endLineNumber" : 429,
        "endColumnNumber" : 50
      },
      "nodeContext" : "image.save(type.name + \"-outline\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 429,
        "startColumnNumber" : 16,
        "endLineNumber" : 429,
        "endColumnNumber" : 51
      },
      "nodeContext" : "image.save(type.name + \"-outline\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5105,
        "startLineNumber" : 403,
        "startColumnNumber" : 15,
        "endLineNumber" : 515,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  type.load();\n  type.init();\n  Color outc=Pal.darkerMetal;\n  Func<Image,Image> outline=i -> i.outline(3,outc);\n  Cons<TextureRegion> outliner=t -> {\n    if (t != null && t.found()) {\n      ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n    }\n  }\n;\n  for (  Weapon weapon : type.weapons) {\n    if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n      outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n    }\n  }\n  outliner.get(type.jointRegion);\n  outliner.get(type.footRegion);\n  outliner.get(type.legBaseRegion);\n  outliner.get(type.baseJointRegion);\n  if (type.constructor.get() instanceof Legsc)   outliner.get(type.legRegion);\n  Image image=outline.get(ImagePacker.get(type.region));\n  image.save(type.name + \"-outline\");\n  if (type.constructor.get() instanceof Mechc) {\n    image.drawCenter(type.baseRegion);\n    image.drawCenter(type.legRegion);\n    image.drawCenter(type.legRegion,true,false);\n    image.draw(type.region);\n  }\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.draw(type.region);\n  Image baseCell=ImagePacker.get(type.cellRegion);\n  Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n  cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n  image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.save(\"unit-\" + type.name + \"-full\");\n  Rand rand=new Rand();\n  rand.setSeed(type.name.hashCode());\n  int splits=3;\n  float degrees=rand.random(360f);\n  float offsetRange=Math.max(image.width,image.height) * 0.15f;\n  Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n  Image[] wrecks=new Image[splits];\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i]=new Image(image.width,image.height);\n  }\n  RidgedPerlin r=new RidgedPerlin(1,3);\n  VoronoiNoise vn=new VoronoiNoise(type.id,true);\n  image.each((x,y) -> {\n    boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n    boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n    float dst=offset.dst(x,y);\n    float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n    int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n    if (!vval)     wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n  }\n);\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i].save(type.name + \"-wreck\" + i);\n  }\n  for (  Cicon icon : Cicon.scaled) {\n    Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n    Image scaled=new Image((int)size.x,(int)size.y);\n    scaled.drawScaled(image);\n    scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n    if (icon == logicIcon) {\n      scaled.save(type.name + \"-icon-logic\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 876,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5239,
        "startLineNumber" : 403,
        "startColumnNumber" : 12,
        "endLineNumber" : 517,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  type.load();\n  type.init();\n  Color outc=Pal.darkerMetal;\n  Func<Image,Image> outline=i -> i.outline(3,outc);\n  Cons<TextureRegion> outliner=t -> {\n    if (t != null && t.found()) {\n      ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n    }\n  }\n;\n  for (  Weapon weapon : type.weapons) {\n    if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n      outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n    }\n  }\n  outliner.get(type.jointRegion);\n  outliner.get(type.footRegion);\n  outliner.get(type.legBaseRegion);\n  outliner.get(type.baseJointRegion);\n  if (type.constructor.get() instanceof Legsc)   outliner.get(type.legRegion);\n  Image image=outline.get(ImagePacker.get(type.region));\n  image.save(type.name + \"-outline\");\n  if (type.constructor.get() instanceof Mechc) {\n    image.drawCenter(type.baseRegion);\n    image.drawCenter(type.legRegion);\n    image.drawCenter(type.legRegion,true,false);\n    image.draw(type.region);\n  }\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.draw(type.region);\n  Image baseCell=ImagePacker.get(type.cellRegion);\n  Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n  cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n  image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.save(\"unit-\" + type.name + \"-full\");\n  Rand rand=new Rand();\n  rand.setSeed(type.name.hashCode());\n  int splits=3;\n  float degrees=rand.random(360f);\n  float offsetRange=Math.max(image.width,image.height) * 0.15f;\n  Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n  Image[] wrecks=new Image[splits];\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i]=new Image(image.width,image.height);\n  }\n  RidgedPerlin r=new RidgedPerlin(1,3);\n  VoronoiNoise vn=new VoronoiNoise(type.id,true);\n  image.each((x,y) -> {\n    boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n    boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n    float dst=offset.dst(x,y);\n    float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n    int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n    if (!vval)     wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n  }\n);\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i].save(type.name + \"-wreck\" + i);\n  }\n  for (  Cicon icon : Cicon.scaled) {\n    Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n    Image scaled=new Image((int)size.x,(int)size.y);\n    scaled.drawScaled(image);\n    scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n    if (icon == logicIcon) {\n      scaled.save(type.name + \"-icon-logic\");\n    }\n  }\n}\n catch (IllegalArgumentException e) {\n  Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 894,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 5396,
        "startLineNumber" : 398,
        "startColumnNumber" : 78,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 912,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 5404,
        "startLineNumber" : 398,
        "startColumnNumber" : 70,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "type -> {\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 915,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 429,
        "startColumnNumber" : 16,
        "endLineNumber" : 429,
        "endColumnNumber" : 51
      },
      "nodeContext" : "image.save(type.name + \"-outline\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "type",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 432,
      "startColumnNumber" : 19,
      "endLineNumber" : 432,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 432,
        "startColumnNumber" : 19,
        "endLineNumber" : 432,
        "endColumnNumber" : 35
      },
      "nodeContext" : "type.constructor",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InstanceofExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 432,
        "startColumnNumber" : 19,
        "endLineNumber" : 432,
        "endColumnNumber" : 41
      },
      "nodeContext" : "type.constructor.get()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 432,
        "startColumnNumber" : 19,
        "endLineNumber" : 432,
        "endColumnNumber" : 58
      },
      "nodeContext" : "type.constructor.get() instanceof Mechc",
      "nodeType" : "InstanceofExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 283,
        "startLineNumber" : 432,
        "startColumnNumber" : 16,
        "endLineNumber" : 437,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (type.constructor.get() instanceof Mechc) {\n  image.drawCenter(type.baseRegion);\n  image.drawCenter(type.legRegion);\n  image.drawCenter(type.legRegion,true,false);\n  image.draw(type.region);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 40,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5105,
        "startLineNumber" : 403,
        "startColumnNumber" : 15,
        "endLineNumber" : 515,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  type.load();\n  type.init();\n  Color outc=Pal.darkerMetal;\n  Func<Image,Image> outline=i -> i.outline(3,outc);\n  Cons<TextureRegion> outliner=t -> {\n    if (t != null && t.found()) {\n      ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n    }\n  }\n;\n  for (  Weapon weapon : type.weapons) {\n    if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n      outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n    }\n  }\n  outliner.get(type.jointRegion);\n  outliner.get(type.footRegion);\n  outliner.get(type.legBaseRegion);\n  outliner.get(type.baseJointRegion);\n  if (type.constructor.get() instanceof Legsc)   outliner.get(type.legRegion);\n  Image image=outline.get(ImagePacker.get(type.region));\n  image.save(type.name + \"-outline\");\n  if (type.constructor.get() instanceof Mechc) {\n    image.drawCenter(type.baseRegion);\n    image.drawCenter(type.legRegion);\n    image.drawCenter(type.legRegion,true,false);\n    image.draw(type.region);\n  }\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.draw(type.region);\n  Image baseCell=ImagePacker.get(type.cellRegion);\n  Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n  cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n  image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.save(\"unit-\" + type.name + \"-full\");\n  Rand rand=new Rand();\n  rand.setSeed(type.name.hashCode());\n  int splits=3;\n  float degrees=rand.random(360f);\n  float offsetRange=Math.max(image.width,image.height) * 0.15f;\n  Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n  Image[] wrecks=new Image[splits];\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i]=new Image(image.width,image.height);\n  }\n  RidgedPerlin r=new RidgedPerlin(1,3);\n  VoronoiNoise vn=new VoronoiNoise(type.id,true);\n  image.each((x,y) -> {\n    boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n    boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n    float dst=offset.dst(x,y);\n    float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n    int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n    if (!vval)     wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n  }\n);\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i].save(type.name + \"-wreck\" + i);\n  }\n  for (  Cicon icon : Cicon.scaled) {\n    Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n    Image scaled=new Image((int)size.x,(int)size.y);\n    scaled.drawScaled(image);\n    scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n    if (icon == logicIcon) {\n      scaled.save(type.name + \"-icon-logic\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 876,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5239,
        "startLineNumber" : 403,
        "startColumnNumber" : 12,
        "endLineNumber" : 517,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  type.load();\n  type.init();\n  Color outc=Pal.darkerMetal;\n  Func<Image,Image> outline=i -> i.outline(3,outc);\n  Cons<TextureRegion> outliner=t -> {\n    if (t != null && t.found()) {\n      ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n    }\n  }\n;\n  for (  Weapon weapon : type.weapons) {\n    if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n      outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n    }\n  }\n  outliner.get(type.jointRegion);\n  outliner.get(type.footRegion);\n  outliner.get(type.legBaseRegion);\n  outliner.get(type.baseJointRegion);\n  if (type.constructor.get() instanceof Legsc)   outliner.get(type.legRegion);\n  Image image=outline.get(ImagePacker.get(type.region));\n  image.save(type.name + \"-outline\");\n  if (type.constructor.get() instanceof Mechc) {\n    image.drawCenter(type.baseRegion);\n    image.drawCenter(type.legRegion);\n    image.drawCenter(type.legRegion,true,false);\n    image.draw(type.region);\n  }\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.draw(type.region);\n  Image baseCell=ImagePacker.get(type.cellRegion);\n  Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n  cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n  image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.save(\"unit-\" + type.name + \"-full\");\n  Rand rand=new Rand();\n  rand.setSeed(type.name.hashCode());\n  int splits=3;\n  float degrees=rand.random(360f);\n  float offsetRange=Math.max(image.width,image.height) * 0.15f;\n  Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n  Image[] wrecks=new Image[splits];\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i]=new Image(image.width,image.height);\n  }\n  RidgedPerlin r=new RidgedPerlin(1,3);\n  VoronoiNoise vn=new VoronoiNoise(type.id,true);\n  image.each((x,y) -> {\n    boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n    boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n    float dst=offset.dst(x,y);\n    float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n    int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n    if (!vval)     wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n  }\n);\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i].save(type.name + \"-wreck\" + i);\n  }\n  for (  Cicon icon : Cicon.scaled) {\n    Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n    Image scaled=new Image((int)size.x,(int)size.y);\n    scaled.drawScaled(image);\n    scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n    if (icon == logicIcon) {\n      scaled.save(type.name + \"-icon-logic\");\n    }\n  }\n}\n catch (IllegalArgumentException e) {\n  Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 894,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 5396,
        "startLineNumber" : 398,
        "startColumnNumber" : 78,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 912,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 5404,
        "startLineNumber" : 398,
        "startColumnNumber" : 70,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "type -> {\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 915,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 432,
        "startColumnNumber" : 19,
        "endLineNumber" : 432,
        "endColumnNumber" : 58
      },
      "nodeContext" : "type.constructor.get() instanceof Mechc",
      "nodeType" : "InstanceofExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "type",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 433,
      "startColumnNumber" : 37,
      "endLineNumber" : 433,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 433,
        "startColumnNumber" : 37,
        "endLineNumber" : 433,
        "endColumnNumber" : 52
      },
      "nodeContext" : "type.baseRegion",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 433,
        "startColumnNumber" : 20,
        "endLineNumber" : 433,
        "endColumnNumber" : 53
      },
      "nodeContext" : "image.drawCenter(type.baseRegion)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 433,
        "startColumnNumber" : 20,
        "endLineNumber" : 433,
        "endColumnNumber" : 54
      },
      "nodeContext" : "image.drawCenter(type.baseRegion);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 240,
        "startLineNumber" : 432,
        "startColumnNumber" : 59,
        "endLineNumber" : 437,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  image.drawCenter(type.baseRegion);\n  image.drawCenter(type.legRegion);\n  image.drawCenter(type.legRegion,true,false);\n  image.draw(type.region);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 31,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 283,
        "startLineNumber" : 432,
        "startColumnNumber" : 16,
        "endLineNumber" : 437,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (type.constructor.get() instanceof Mechc) {\n  image.drawCenter(type.baseRegion);\n  image.drawCenter(type.legRegion);\n  image.drawCenter(type.legRegion,true,false);\n  image.draw(type.region);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 40,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5105,
        "startLineNumber" : 403,
        "startColumnNumber" : 15,
        "endLineNumber" : 515,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  type.load();\n  type.init();\n  Color outc=Pal.darkerMetal;\n  Func<Image,Image> outline=i -> i.outline(3,outc);\n  Cons<TextureRegion> outliner=t -> {\n    if (t != null && t.found()) {\n      ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n    }\n  }\n;\n  for (  Weapon weapon : type.weapons) {\n    if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n      outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n    }\n  }\n  outliner.get(type.jointRegion);\n  outliner.get(type.footRegion);\n  outliner.get(type.legBaseRegion);\n  outliner.get(type.baseJointRegion);\n  if (type.constructor.get() instanceof Legsc)   outliner.get(type.legRegion);\n  Image image=outline.get(ImagePacker.get(type.region));\n  image.save(type.name + \"-outline\");\n  if (type.constructor.get() instanceof Mechc) {\n    image.drawCenter(type.baseRegion);\n    image.drawCenter(type.legRegion);\n    image.drawCenter(type.legRegion,true,false);\n    image.draw(type.region);\n  }\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.draw(type.region);\n  Image baseCell=ImagePacker.get(type.cellRegion);\n  Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n  cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n  image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.save(\"unit-\" + type.name + \"-full\");\n  Rand rand=new Rand();\n  rand.setSeed(type.name.hashCode());\n  int splits=3;\n  float degrees=rand.random(360f);\n  float offsetRange=Math.max(image.width,image.height) * 0.15f;\n  Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n  Image[] wrecks=new Image[splits];\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i]=new Image(image.width,image.height);\n  }\n  RidgedPerlin r=new RidgedPerlin(1,3);\n  VoronoiNoise vn=new VoronoiNoise(type.id,true);\n  image.each((x,y) -> {\n    boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n    boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n    float dst=offset.dst(x,y);\n    float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n    int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n    if (!vval)     wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n  }\n);\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i].save(type.name + \"-wreck\" + i);\n  }\n  for (  Cicon icon : Cicon.scaled) {\n    Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n    Image scaled=new Image((int)size.x,(int)size.y);\n    scaled.drawScaled(image);\n    scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n    if (icon == logicIcon) {\n      scaled.save(type.name + \"-icon-logic\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 876,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5239,
        "startLineNumber" : 403,
        "startColumnNumber" : 12,
        "endLineNumber" : 517,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  type.load();\n  type.init();\n  Color outc=Pal.darkerMetal;\n  Func<Image,Image> outline=i -> i.outline(3,outc);\n  Cons<TextureRegion> outliner=t -> {\n    if (t != null && t.found()) {\n      ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n    }\n  }\n;\n  for (  Weapon weapon : type.weapons) {\n    if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n      outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n    }\n  }\n  outliner.get(type.jointRegion);\n  outliner.get(type.footRegion);\n  outliner.get(type.legBaseRegion);\n  outliner.get(type.baseJointRegion);\n  if (type.constructor.get() instanceof Legsc)   outliner.get(type.legRegion);\n  Image image=outline.get(ImagePacker.get(type.region));\n  image.save(type.name + \"-outline\");\n  if (type.constructor.get() instanceof Mechc) {\n    image.drawCenter(type.baseRegion);\n    image.drawCenter(type.legRegion);\n    image.drawCenter(type.legRegion,true,false);\n    image.draw(type.region);\n  }\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.draw(type.region);\n  Image baseCell=ImagePacker.get(type.cellRegion);\n  Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n  cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n  image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.save(\"unit-\" + type.name + \"-full\");\n  Rand rand=new Rand();\n  rand.setSeed(type.name.hashCode());\n  int splits=3;\n  float degrees=rand.random(360f);\n  float offsetRange=Math.max(image.width,image.height) * 0.15f;\n  Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n  Image[] wrecks=new Image[splits];\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i]=new Image(image.width,image.height);\n  }\n  RidgedPerlin r=new RidgedPerlin(1,3);\n  VoronoiNoise vn=new VoronoiNoise(type.id,true);\n  image.each((x,y) -> {\n    boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n    boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n    float dst=offset.dst(x,y);\n    float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n    int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n    if (!vval)     wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n  }\n);\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i].save(type.name + \"-wreck\" + i);\n  }\n  for (  Cicon icon : Cicon.scaled) {\n    Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n    Image scaled=new Image((int)size.x,(int)size.y);\n    scaled.drawScaled(image);\n    scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n    if (icon == logicIcon) {\n      scaled.save(type.name + \"-icon-logic\");\n    }\n  }\n}\n catch (IllegalArgumentException e) {\n  Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 894,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 5396,
        "startLineNumber" : 398,
        "startColumnNumber" : 78,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 912,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 5404,
        "startLineNumber" : 398,
        "startColumnNumber" : 70,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "type -> {\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 915,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 433,
        "startColumnNumber" : 20,
        "endLineNumber" : 433,
        "endColumnNumber" : 54
      },
      "nodeContext" : "image.drawCenter(type.baseRegion);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "type",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 434,
      "startColumnNumber" : 37,
      "endLineNumber" : 434,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 434,
        "startColumnNumber" : 37,
        "endLineNumber" : 434,
        "endColumnNumber" : 51
      },
      "nodeContext" : "type.legRegion",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 434,
        "startColumnNumber" : 20,
        "endLineNumber" : 434,
        "endColumnNumber" : 52
      },
      "nodeContext" : "image.drawCenter(type.legRegion)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 434,
        "startColumnNumber" : 20,
        "endLineNumber" : 434,
        "endColumnNumber" : 53
      },
      "nodeContext" : "image.drawCenter(type.legRegion);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 240,
        "startLineNumber" : 432,
        "startColumnNumber" : 59,
        "endLineNumber" : 437,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  image.drawCenter(type.baseRegion);\n  image.drawCenter(type.legRegion);\n  image.drawCenter(type.legRegion,true,false);\n  image.draw(type.region);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 31,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 283,
        "startLineNumber" : 432,
        "startColumnNumber" : 16,
        "endLineNumber" : 437,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (type.constructor.get() instanceof Mechc) {\n  image.drawCenter(type.baseRegion);\n  image.drawCenter(type.legRegion);\n  image.drawCenter(type.legRegion,true,false);\n  image.draw(type.region);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 40,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5105,
        "startLineNumber" : 403,
        "startColumnNumber" : 15,
        "endLineNumber" : 515,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  type.load();\n  type.init();\n  Color outc=Pal.darkerMetal;\n  Func<Image,Image> outline=i -> i.outline(3,outc);\n  Cons<TextureRegion> outliner=t -> {\n    if (t != null && t.found()) {\n      ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n    }\n  }\n;\n  for (  Weapon weapon : type.weapons) {\n    if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n      outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n    }\n  }\n  outliner.get(type.jointRegion);\n  outliner.get(type.footRegion);\n  outliner.get(type.legBaseRegion);\n  outliner.get(type.baseJointRegion);\n  if (type.constructor.get() instanceof Legsc)   outliner.get(type.legRegion);\n  Image image=outline.get(ImagePacker.get(type.region));\n  image.save(type.name + \"-outline\");\n  if (type.constructor.get() instanceof Mechc) {\n    image.drawCenter(type.baseRegion);\n    image.drawCenter(type.legRegion);\n    image.drawCenter(type.legRegion,true,false);\n    image.draw(type.region);\n  }\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.draw(type.region);\n  Image baseCell=ImagePacker.get(type.cellRegion);\n  Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n  cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n  image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.save(\"unit-\" + type.name + \"-full\");\n  Rand rand=new Rand();\n  rand.setSeed(type.name.hashCode());\n  int splits=3;\n  float degrees=rand.random(360f);\n  float offsetRange=Math.max(image.width,image.height) * 0.15f;\n  Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n  Image[] wrecks=new Image[splits];\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i]=new Image(image.width,image.height);\n  }\n  RidgedPerlin r=new RidgedPerlin(1,3);\n  VoronoiNoise vn=new VoronoiNoise(type.id,true);\n  image.each((x,y) -> {\n    boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n    boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n    float dst=offset.dst(x,y);\n    float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n    int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n    if (!vval)     wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n  }\n);\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i].save(type.name + \"-wreck\" + i);\n  }\n  for (  Cicon icon : Cicon.scaled) {\n    Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n    Image scaled=new Image((int)size.x,(int)size.y);\n    scaled.drawScaled(image);\n    scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n    if (icon == logicIcon) {\n      scaled.save(type.name + \"-icon-logic\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 876,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5239,
        "startLineNumber" : 403,
        "startColumnNumber" : 12,
        "endLineNumber" : 517,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  type.load();\n  type.init();\n  Color outc=Pal.darkerMetal;\n  Func<Image,Image> outline=i -> i.outline(3,outc);\n  Cons<TextureRegion> outliner=t -> {\n    if (t != null && t.found()) {\n      ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n    }\n  }\n;\n  for (  Weapon weapon : type.weapons) {\n    if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n      outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n    }\n  }\n  outliner.get(type.jointRegion);\n  outliner.get(type.footRegion);\n  outliner.get(type.legBaseRegion);\n  outliner.get(type.baseJointRegion);\n  if (type.constructor.get() instanceof Legsc)   outliner.get(type.legRegion);\n  Image image=outline.get(ImagePacker.get(type.region));\n  image.save(type.name + \"-outline\");\n  if (type.constructor.get() instanceof Mechc) {\n    image.drawCenter(type.baseRegion);\n    image.drawCenter(type.legRegion);\n    image.drawCenter(type.legRegion,true,false);\n    image.draw(type.region);\n  }\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.draw(type.region);\n  Image baseCell=ImagePacker.get(type.cellRegion);\n  Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n  cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n  image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.save(\"unit-\" + type.name + \"-full\");\n  Rand rand=new Rand();\n  rand.setSeed(type.name.hashCode());\n  int splits=3;\n  float degrees=rand.random(360f);\n  float offsetRange=Math.max(image.width,image.height) * 0.15f;\n  Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n  Image[] wrecks=new Image[splits];\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i]=new Image(image.width,image.height);\n  }\n  RidgedPerlin r=new RidgedPerlin(1,3);\n  VoronoiNoise vn=new VoronoiNoise(type.id,true);\n  image.each((x,y) -> {\n    boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n    boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n    float dst=offset.dst(x,y);\n    float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n    int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n    if (!vval)     wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n  }\n);\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i].save(type.name + \"-wreck\" + i);\n  }\n  for (  Cicon icon : Cicon.scaled) {\n    Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n    Image scaled=new Image((int)size.x,(int)size.y);\n    scaled.drawScaled(image);\n    scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n    if (icon == logicIcon) {\n      scaled.save(type.name + \"-icon-logic\");\n    }\n  }\n}\n catch (IllegalArgumentException e) {\n  Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 894,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 5396,
        "startLineNumber" : 398,
        "startColumnNumber" : 78,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 912,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 5404,
        "startLineNumber" : 398,
        "startColumnNumber" : 70,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "type -> {\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 915,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 434,
        "startColumnNumber" : 20,
        "endLineNumber" : 434,
        "endColumnNumber" : 53
      },
      "nodeContext" : "image.drawCenter(type.legRegion);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "type",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 435,
      "startColumnNumber" : 37,
      "endLineNumber" : 435,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 435,
        "startColumnNumber" : 37,
        "endLineNumber" : 435,
        "endColumnNumber" : 51
      },
      "nodeContext" : "type.legRegion",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 435,
        "startColumnNumber" : 20,
        "endLineNumber" : 435,
        "endColumnNumber" : 65
      },
      "nodeContext" : "image.drawCenter(type.legRegion,true,false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 435,
        "startColumnNumber" : 20,
        "endLineNumber" : 435,
        "endColumnNumber" : 66
      },
      "nodeContext" : "image.drawCenter(type.legRegion,true,false);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 240,
        "startLineNumber" : 432,
        "startColumnNumber" : 59,
        "endLineNumber" : 437,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  image.drawCenter(type.baseRegion);\n  image.drawCenter(type.legRegion);\n  image.drawCenter(type.legRegion,true,false);\n  image.draw(type.region);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 31,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 283,
        "startLineNumber" : 432,
        "startColumnNumber" : 16,
        "endLineNumber" : 437,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (type.constructor.get() instanceof Mechc) {\n  image.drawCenter(type.baseRegion);\n  image.drawCenter(type.legRegion);\n  image.drawCenter(type.legRegion,true,false);\n  image.draw(type.region);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 40,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5105,
        "startLineNumber" : 403,
        "startColumnNumber" : 15,
        "endLineNumber" : 515,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  type.load();\n  type.init();\n  Color outc=Pal.darkerMetal;\n  Func<Image,Image> outline=i -> i.outline(3,outc);\n  Cons<TextureRegion> outliner=t -> {\n    if (t != null && t.found()) {\n      ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n    }\n  }\n;\n  for (  Weapon weapon : type.weapons) {\n    if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n      outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n    }\n  }\n  outliner.get(type.jointRegion);\n  outliner.get(type.footRegion);\n  outliner.get(type.legBaseRegion);\n  outliner.get(type.baseJointRegion);\n  if (type.constructor.get() instanceof Legsc)   outliner.get(type.legRegion);\n  Image image=outline.get(ImagePacker.get(type.region));\n  image.save(type.name + \"-outline\");\n  if (type.constructor.get() instanceof Mechc) {\n    image.drawCenter(type.baseRegion);\n    image.drawCenter(type.legRegion);\n    image.drawCenter(type.legRegion,true,false);\n    image.draw(type.region);\n  }\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.draw(type.region);\n  Image baseCell=ImagePacker.get(type.cellRegion);\n  Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n  cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n  image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.save(\"unit-\" + type.name + \"-full\");\n  Rand rand=new Rand();\n  rand.setSeed(type.name.hashCode());\n  int splits=3;\n  float degrees=rand.random(360f);\n  float offsetRange=Math.max(image.width,image.height) * 0.15f;\n  Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n  Image[] wrecks=new Image[splits];\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i]=new Image(image.width,image.height);\n  }\n  RidgedPerlin r=new RidgedPerlin(1,3);\n  VoronoiNoise vn=new VoronoiNoise(type.id,true);\n  image.each((x,y) -> {\n    boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n    boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n    float dst=offset.dst(x,y);\n    float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n    int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n    if (!vval)     wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n  }\n);\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i].save(type.name + \"-wreck\" + i);\n  }\n  for (  Cicon icon : Cicon.scaled) {\n    Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n    Image scaled=new Image((int)size.x,(int)size.y);\n    scaled.drawScaled(image);\n    scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n    if (icon == logicIcon) {\n      scaled.save(type.name + \"-icon-logic\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 876,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5239,
        "startLineNumber" : 403,
        "startColumnNumber" : 12,
        "endLineNumber" : 517,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  type.load();\n  type.init();\n  Color outc=Pal.darkerMetal;\n  Func<Image,Image> outline=i -> i.outline(3,outc);\n  Cons<TextureRegion> outliner=t -> {\n    if (t != null && t.found()) {\n      ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n    }\n  }\n;\n  for (  Weapon weapon : type.weapons) {\n    if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n      outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n    }\n  }\n  outliner.get(type.jointRegion);\n  outliner.get(type.footRegion);\n  outliner.get(type.legBaseRegion);\n  outliner.get(type.baseJointRegion);\n  if (type.constructor.get() instanceof Legsc)   outliner.get(type.legRegion);\n  Image image=outline.get(ImagePacker.get(type.region));\n  image.save(type.name + \"-outline\");\n  if (type.constructor.get() instanceof Mechc) {\n    image.drawCenter(type.baseRegion);\n    image.drawCenter(type.legRegion);\n    image.drawCenter(type.legRegion,true,false);\n    image.draw(type.region);\n  }\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.draw(type.region);\n  Image baseCell=ImagePacker.get(type.cellRegion);\n  Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n  cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n  image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.save(\"unit-\" + type.name + \"-full\");\n  Rand rand=new Rand();\n  rand.setSeed(type.name.hashCode());\n  int splits=3;\n  float degrees=rand.random(360f);\n  float offsetRange=Math.max(image.width,image.height) * 0.15f;\n  Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n  Image[] wrecks=new Image[splits];\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i]=new Image(image.width,image.height);\n  }\n  RidgedPerlin r=new RidgedPerlin(1,3);\n  VoronoiNoise vn=new VoronoiNoise(type.id,true);\n  image.each((x,y) -> {\n    boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n    boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n    float dst=offset.dst(x,y);\n    float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n    int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n    if (!vval)     wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n  }\n);\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i].save(type.name + \"-wreck\" + i);\n  }\n  for (  Cicon icon : Cicon.scaled) {\n    Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n    Image scaled=new Image((int)size.x,(int)size.y);\n    scaled.drawScaled(image);\n    scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n    if (icon == logicIcon) {\n      scaled.save(type.name + \"-icon-logic\");\n    }\n  }\n}\n catch (IllegalArgumentException e) {\n  Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 894,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 5396,
        "startLineNumber" : 398,
        "startColumnNumber" : 78,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 912,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 5404,
        "startLineNumber" : 398,
        "startColumnNumber" : 70,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "type -> {\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 915,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 435,
        "startColumnNumber" : 20,
        "endLineNumber" : 435,
        "endColumnNumber" : 66
      },
      "nodeContext" : "image.drawCenter(type.legRegion,true,false);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "type",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 436,
      "startColumnNumber" : 31,
      "endLineNumber" : 436,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 436,
        "startColumnNumber" : 31,
        "endLineNumber" : 436,
        "endColumnNumber" : 42
      },
      "nodeContext" : "type.region",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 436,
        "startColumnNumber" : 20,
        "endLineNumber" : 436,
        "endColumnNumber" : 43
      },
      "nodeContext" : "image.draw(type.region)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 436,
        "startColumnNumber" : 20,
        "endLineNumber" : 436,
        "endColumnNumber" : 44
      },
      "nodeContext" : "image.draw(type.region);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 240,
        "startLineNumber" : 432,
        "startColumnNumber" : 59,
        "endLineNumber" : 437,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  image.drawCenter(type.baseRegion);\n  image.drawCenter(type.legRegion);\n  image.drawCenter(type.legRegion,true,false);\n  image.draw(type.region);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 31,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 283,
        "startLineNumber" : 432,
        "startColumnNumber" : 16,
        "endLineNumber" : 437,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (type.constructor.get() instanceof Mechc) {\n  image.drawCenter(type.baseRegion);\n  image.drawCenter(type.legRegion);\n  image.drawCenter(type.legRegion,true,false);\n  image.draw(type.region);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 40,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5105,
        "startLineNumber" : 403,
        "startColumnNumber" : 15,
        "endLineNumber" : 515,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  type.load();\n  type.init();\n  Color outc=Pal.darkerMetal;\n  Func<Image,Image> outline=i -> i.outline(3,outc);\n  Cons<TextureRegion> outliner=t -> {\n    if (t != null && t.found()) {\n      ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n    }\n  }\n;\n  for (  Weapon weapon : type.weapons) {\n    if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n      outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n    }\n  }\n  outliner.get(type.jointRegion);\n  outliner.get(type.footRegion);\n  outliner.get(type.legBaseRegion);\n  outliner.get(type.baseJointRegion);\n  if (type.constructor.get() instanceof Legsc)   outliner.get(type.legRegion);\n  Image image=outline.get(ImagePacker.get(type.region));\n  image.save(type.name + \"-outline\");\n  if (type.constructor.get() instanceof Mechc) {\n    image.drawCenter(type.baseRegion);\n    image.drawCenter(type.legRegion);\n    image.drawCenter(type.legRegion,true,false);\n    image.draw(type.region);\n  }\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.draw(type.region);\n  Image baseCell=ImagePacker.get(type.cellRegion);\n  Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n  cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n  image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.save(\"unit-\" + type.name + \"-full\");\n  Rand rand=new Rand();\n  rand.setSeed(type.name.hashCode());\n  int splits=3;\n  float degrees=rand.random(360f);\n  float offsetRange=Math.max(image.width,image.height) * 0.15f;\n  Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n  Image[] wrecks=new Image[splits];\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i]=new Image(image.width,image.height);\n  }\n  RidgedPerlin r=new RidgedPerlin(1,3);\n  VoronoiNoise vn=new VoronoiNoise(type.id,true);\n  image.each((x,y) -> {\n    boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n    boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n    float dst=offset.dst(x,y);\n    float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n    int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n    if (!vval)     wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n  }\n);\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i].save(type.name + \"-wreck\" + i);\n  }\n  for (  Cicon icon : Cicon.scaled) {\n    Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n    Image scaled=new Image((int)size.x,(int)size.y);\n    scaled.drawScaled(image);\n    scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n    if (icon == logicIcon) {\n      scaled.save(type.name + \"-icon-logic\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 876,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5239,
        "startLineNumber" : 403,
        "startColumnNumber" : 12,
        "endLineNumber" : 517,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  type.load();\n  type.init();\n  Color outc=Pal.darkerMetal;\n  Func<Image,Image> outline=i -> i.outline(3,outc);\n  Cons<TextureRegion> outliner=t -> {\n    if (t != null && t.found()) {\n      ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n    }\n  }\n;\n  for (  Weapon weapon : type.weapons) {\n    if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n      outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n    }\n  }\n  outliner.get(type.jointRegion);\n  outliner.get(type.footRegion);\n  outliner.get(type.legBaseRegion);\n  outliner.get(type.baseJointRegion);\n  if (type.constructor.get() instanceof Legsc)   outliner.get(type.legRegion);\n  Image image=outline.get(ImagePacker.get(type.region));\n  image.save(type.name + \"-outline\");\n  if (type.constructor.get() instanceof Mechc) {\n    image.drawCenter(type.baseRegion);\n    image.drawCenter(type.legRegion);\n    image.drawCenter(type.legRegion,true,false);\n    image.draw(type.region);\n  }\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.draw(type.region);\n  Image baseCell=ImagePacker.get(type.cellRegion);\n  Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n  cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n  image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.save(\"unit-\" + type.name + \"-full\");\n  Rand rand=new Rand();\n  rand.setSeed(type.name.hashCode());\n  int splits=3;\n  float degrees=rand.random(360f);\n  float offsetRange=Math.max(image.width,image.height) * 0.15f;\n  Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n  Image[] wrecks=new Image[splits];\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i]=new Image(image.width,image.height);\n  }\n  RidgedPerlin r=new RidgedPerlin(1,3);\n  VoronoiNoise vn=new VoronoiNoise(type.id,true);\n  image.each((x,y) -> {\n    boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n    boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n    float dst=offset.dst(x,y);\n    float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n    int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n    if (!vval)     wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n  }\n);\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i].save(type.name + \"-wreck\" + i);\n  }\n  for (  Cicon icon : Cicon.scaled) {\n    Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n    Image scaled=new Image((int)size.x,(int)size.y);\n    scaled.drawScaled(image);\n    scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n    if (icon == logicIcon) {\n      scaled.save(type.name + \"-icon-logic\");\n    }\n  }\n}\n catch (IllegalArgumentException e) {\n  Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 894,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 5396,
        "startLineNumber" : 398,
        "startColumnNumber" : 78,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 912,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 5404,
        "startLineNumber" : 398,
        "startColumnNumber" : 70,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "type -> {\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 915,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 436,
        "startColumnNumber" : 20,
        "endLineNumber" : 436,
        "endColumnNumber" : 44
      },
      "nodeContext" : "image.draw(type.region);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "type",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 440,
      "startColumnNumber" : 36,
      "endLineNumber" : 440,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 440,
        "startColumnNumber" : 36,
        "endLineNumber" : 440,
        "endColumnNumber" : 48
      },
      "nodeContext" : "type.weapons",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 402,
        "startLineNumber" : 440,
        "startColumnNumber" : 16,
        "endLineNumber" : 447,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (Weapon weapon : type.weapons) {\n  weapon.load();\n  image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 79,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5105,
        "startLineNumber" : 403,
        "startColumnNumber" : 15,
        "endLineNumber" : 515,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  type.load();\n  type.init();\n  Color outc=Pal.darkerMetal;\n  Func<Image,Image> outline=i -> i.outline(3,outc);\n  Cons<TextureRegion> outliner=t -> {\n    if (t != null && t.found()) {\n      ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n    }\n  }\n;\n  for (  Weapon weapon : type.weapons) {\n    if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n      outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n    }\n  }\n  outliner.get(type.jointRegion);\n  outliner.get(type.footRegion);\n  outliner.get(type.legBaseRegion);\n  outliner.get(type.baseJointRegion);\n  if (type.constructor.get() instanceof Legsc)   outliner.get(type.legRegion);\n  Image image=outline.get(ImagePacker.get(type.region));\n  image.save(type.name + \"-outline\");\n  if (type.constructor.get() instanceof Mechc) {\n    image.drawCenter(type.baseRegion);\n    image.drawCenter(type.legRegion);\n    image.drawCenter(type.legRegion,true,false);\n    image.draw(type.region);\n  }\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.draw(type.region);\n  Image baseCell=ImagePacker.get(type.cellRegion);\n  Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n  cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n  image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.save(\"unit-\" + type.name + \"-full\");\n  Rand rand=new Rand();\n  rand.setSeed(type.name.hashCode());\n  int splits=3;\n  float degrees=rand.random(360f);\n  float offsetRange=Math.max(image.width,image.height) * 0.15f;\n  Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n  Image[] wrecks=new Image[splits];\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i]=new Image(image.width,image.height);\n  }\n  RidgedPerlin r=new RidgedPerlin(1,3);\n  VoronoiNoise vn=new VoronoiNoise(type.id,true);\n  image.each((x,y) -> {\n    boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n    boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n    float dst=offset.dst(x,y);\n    float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n    int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n    if (!vval)     wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n  }\n);\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i].save(type.name + \"-wreck\" + i);\n  }\n  for (  Cicon icon : Cicon.scaled) {\n    Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n    Image scaled=new Image((int)size.x,(int)size.y);\n    scaled.drawScaled(image);\n    scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n    if (icon == logicIcon) {\n      scaled.save(type.name + \"-icon-logic\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 876,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5239,
        "startLineNumber" : 403,
        "startColumnNumber" : 12,
        "endLineNumber" : 517,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  type.load();\n  type.init();\n  Color outc=Pal.darkerMetal;\n  Func<Image,Image> outline=i -> i.outline(3,outc);\n  Cons<TextureRegion> outliner=t -> {\n    if (t != null && t.found()) {\n      ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n    }\n  }\n;\n  for (  Weapon weapon : type.weapons) {\n    if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n      outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n    }\n  }\n  outliner.get(type.jointRegion);\n  outliner.get(type.footRegion);\n  outliner.get(type.legBaseRegion);\n  outliner.get(type.baseJointRegion);\n  if (type.constructor.get() instanceof Legsc)   outliner.get(type.legRegion);\n  Image image=outline.get(ImagePacker.get(type.region));\n  image.save(type.name + \"-outline\");\n  if (type.constructor.get() instanceof Mechc) {\n    image.drawCenter(type.baseRegion);\n    image.drawCenter(type.legRegion);\n    image.drawCenter(type.legRegion,true,false);\n    image.draw(type.region);\n  }\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.draw(type.region);\n  Image baseCell=ImagePacker.get(type.cellRegion);\n  Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n  cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n  image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.save(\"unit-\" + type.name + \"-full\");\n  Rand rand=new Rand();\n  rand.setSeed(type.name.hashCode());\n  int splits=3;\n  float degrees=rand.random(360f);\n  float offsetRange=Math.max(image.width,image.height) * 0.15f;\n  Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n  Image[] wrecks=new Image[splits];\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i]=new Image(image.width,image.height);\n  }\n  RidgedPerlin r=new RidgedPerlin(1,3);\n  VoronoiNoise vn=new VoronoiNoise(type.id,true);\n  image.each((x,y) -> {\n    boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n    boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n    float dst=offset.dst(x,y);\n    float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n    int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n    if (!vval)     wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n  }\n);\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i].save(type.name + \"-wreck\" + i);\n  }\n  for (  Cicon icon : Cicon.scaled) {\n    Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n    Image scaled=new Image((int)size.x,(int)size.y);\n    scaled.drawScaled(image);\n    scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n    if (icon == logicIcon) {\n      scaled.save(type.name + \"-icon-logic\");\n    }\n  }\n}\n catch (IllegalArgumentException e) {\n  Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 894,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 5396,
        "startLineNumber" : 398,
        "startColumnNumber" : 78,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 912,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 5404,
        "startLineNumber" : 398,
        "startColumnNumber" : 70,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "type -> {\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 915,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 440,
        "startColumnNumber" : 36,
        "endLineNumber" : 440,
        "endColumnNumber" : 48
      },
      "nodeContext" : "type.weapons",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "type",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 450,
      "startColumnNumber" : 27,
      "endLineNumber" : 450,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 450,
        "startColumnNumber" : 27,
        "endLineNumber" : 450,
        "endColumnNumber" : 38
      },
      "nodeContext" : "type.region",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 450,
        "startColumnNumber" : 16,
        "endLineNumber" : 450,
        "endColumnNumber" : 39
      },
      "nodeContext" : "image.draw(type.region)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 450,
        "startColumnNumber" : 16,
        "endLineNumber" : 450,
        "endColumnNumber" : 40
      },
      "nodeContext" : "image.draw(type.region);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5105,
        "startLineNumber" : 403,
        "startColumnNumber" : 15,
        "endLineNumber" : 515,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  type.load();\n  type.init();\n  Color outc=Pal.darkerMetal;\n  Func<Image,Image> outline=i -> i.outline(3,outc);\n  Cons<TextureRegion> outliner=t -> {\n    if (t != null && t.found()) {\n      ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n    }\n  }\n;\n  for (  Weapon weapon : type.weapons) {\n    if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n      outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n    }\n  }\n  outliner.get(type.jointRegion);\n  outliner.get(type.footRegion);\n  outliner.get(type.legBaseRegion);\n  outliner.get(type.baseJointRegion);\n  if (type.constructor.get() instanceof Legsc)   outliner.get(type.legRegion);\n  Image image=outline.get(ImagePacker.get(type.region));\n  image.save(type.name + \"-outline\");\n  if (type.constructor.get() instanceof Mechc) {\n    image.drawCenter(type.baseRegion);\n    image.drawCenter(type.legRegion);\n    image.drawCenter(type.legRegion,true,false);\n    image.draw(type.region);\n  }\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.draw(type.region);\n  Image baseCell=ImagePacker.get(type.cellRegion);\n  Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n  cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n  image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.save(\"unit-\" + type.name + \"-full\");\n  Rand rand=new Rand();\n  rand.setSeed(type.name.hashCode());\n  int splits=3;\n  float degrees=rand.random(360f);\n  float offsetRange=Math.max(image.width,image.height) * 0.15f;\n  Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n  Image[] wrecks=new Image[splits];\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i]=new Image(image.width,image.height);\n  }\n  RidgedPerlin r=new RidgedPerlin(1,3);\n  VoronoiNoise vn=new VoronoiNoise(type.id,true);\n  image.each((x,y) -> {\n    boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n    boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n    float dst=offset.dst(x,y);\n    float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n    int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n    if (!vval)     wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n  }\n);\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i].save(type.name + \"-wreck\" + i);\n  }\n  for (  Cicon icon : Cicon.scaled) {\n    Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n    Image scaled=new Image((int)size.x,(int)size.y);\n    scaled.drawScaled(image);\n    scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n    if (icon == logicIcon) {\n      scaled.save(type.name + \"-icon-logic\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 876,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5239,
        "startLineNumber" : 403,
        "startColumnNumber" : 12,
        "endLineNumber" : 517,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  type.load();\n  type.init();\n  Color outc=Pal.darkerMetal;\n  Func<Image,Image> outline=i -> i.outline(3,outc);\n  Cons<TextureRegion> outliner=t -> {\n    if (t != null && t.found()) {\n      ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n    }\n  }\n;\n  for (  Weapon weapon : type.weapons) {\n    if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n      outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n    }\n  }\n  outliner.get(type.jointRegion);\n  outliner.get(type.footRegion);\n  outliner.get(type.legBaseRegion);\n  outliner.get(type.baseJointRegion);\n  if (type.constructor.get() instanceof Legsc)   outliner.get(type.legRegion);\n  Image image=outline.get(ImagePacker.get(type.region));\n  image.save(type.name + \"-outline\");\n  if (type.constructor.get() instanceof Mechc) {\n    image.drawCenter(type.baseRegion);\n    image.drawCenter(type.legRegion);\n    image.drawCenter(type.legRegion,true,false);\n    image.draw(type.region);\n  }\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.draw(type.region);\n  Image baseCell=ImagePacker.get(type.cellRegion);\n  Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n  cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n  image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.save(\"unit-\" + type.name + \"-full\");\n  Rand rand=new Rand();\n  rand.setSeed(type.name.hashCode());\n  int splits=3;\n  float degrees=rand.random(360f);\n  float offsetRange=Math.max(image.width,image.height) * 0.15f;\n  Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n  Image[] wrecks=new Image[splits];\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i]=new Image(image.width,image.height);\n  }\n  RidgedPerlin r=new RidgedPerlin(1,3);\n  VoronoiNoise vn=new VoronoiNoise(type.id,true);\n  image.each((x,y) -> {\n    boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n    boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n    float dst=offset.dst(x,y);\n    float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n    int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n    if (!vval)     wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n  }\n);\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i].save(type.name + \"-wreck\" + i);\n  }\n  for (  Cicon icon : Cicon.scaled) {\n    Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n    Image scaled=new Image((int)size.x,(int)size.y);\n    scaled.drawScaled(image);\n    scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n    if (icon == logicIcon) {\n      scaled.save(type.name + \"-icon-logic\");\n    }\n  }\n}\n catch (IllegalArgumentException e) {\n  Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 894,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 5396,
        "startLineNumber" : 398,
        "startColumnNumber" : 78,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 912,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 5404,
        "startLineNumber" : 398,
        "startColumnNumber" : 70,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "type -> {\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 915,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 450,
        "startColumnNumber" : 16,
        "endLineNumber" : 450,
        "endColumnNumber" : 40
      },
      "nodeContext" : "image.draw(type.region);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "type",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 452,
      "startColumnNumber" : 49,
      "endLineNumber" : 452,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 452,
        "startColumnNumber" : 49,
        "endLineNumber" : 452,
        "endColumnNumber" : 64
      },
      "nodeContext" : "type.cellRegion",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 452,
        "startColumnNumber" : 33,
        "endLineNumber" : 452,
        "endColumnNumber" : 65
      },
      "nodeContext" : "ImagePacker.get(type.cellRegion)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 452,
        "startColumnNumber" : 22,
        "endLineNumber" : 452,
        "endColumnNumber" : 65
      },
      "nodeContext" : "baseCell=ImagePacker.get(type.cellRegion)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 452,
        "startColumnNumber" : 16,
        "endLineNumber" : 452,
        "endColumnNumber" : 66
      },
      "nodeContext" : "Image baseCell=ImagePacker.get(type.cellRegion);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5105,
        "startLineNumber" : 403,
        "startColumnNumber" : 15,
        "endLineNumber" : 515,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  type.load();\n  type.init();\n  Color outc=Pal.darkerMetal;\n  Func<Image,Image> outline=i -> i.outline(3,outc);\n  Cons<TextureRegion> outliner=t -> {\n    if (t != null && t.found()) {\n      ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n    }\n  }\n;\n  for (  Weapon weapon : type.weapons) {\n    if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n      outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n    }\n  }\n  outliner.get(type.jointRegion);\n  outliner.get(type.footRegion);\n  outliner.get(type.legBaseRegion);\n  outliner.get(type.baseJointRegion);\n  if (type.constructor.get() instanceof Legsc)   outliner.get(type.legRegion);\n  Image image=outline.get(ImagePacker.get(type.region));\n  image.save(type.name + \"-outline\");\n  if (type.constructor.get() instanceof Mechc) {\n    image.drawCenter(type.baseRegion);\n    image.drawCenter(type.legRegion);\n    image.drawCenter(type.legRegion,true,false);\n    image.draw(type.region);\n  }\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.draw(type.region);\n  Image baseCell=ImagePacker.get(type.cellRegion);\n  Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n  cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n  image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.save(\"unit-\" + type.name + \"-full\");\n  Rand rand=new Rand();\n  rand.setSeed(type.name.hashCode());\n  int splits=3;\n  float degrees=rand.random(360f);\n  float offsetRange=Math.max(image.width,image.height) * 0.15f;\n  Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n  Image[] wrecks=new Image[splits];\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i]=new Image(image.width,image.height);\n  }\n  RidgedPerlin r=new RidgedPerlin(1,3);\n  VoronoiNoise vn=new VoronoiNoise(type.id,true);\n  image.each((x,y) -> {\n    boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n    boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n    float dst=offset.dst(x,y);\n    float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n    int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n    if (!vval)     wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n  }\n);\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i].save(type.name + \"-wreck\" + i);\n  }\n  for (  Cicon icon : Cicon.scaled) {\n    Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n    Image scaled=new Image((int)size.x,(int)size.y);\n    scaled.drawScaled(image);\n    scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n    if (icon == logicIcon) {\n      scaled.save(type.name + \"-icon-logic\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 876,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5239,
        "startLineNumber" : 403,
        "startColumnNumber" : 12,
        "endLineNumber" : 517,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  type.load();\n  type.init();\n  Color outc=Pal.darkerMetal;\n  Func<Image,Image> outline=i -> i.outline(3,outc);\n  Cons<TextureRegion> outliner=t -> {\n    if (t != null && t.found()) {\n      ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n    }\n  }\n;\n  for (  Weapon weapon : type.weapons) {\n    if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n      outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n    }\n  }\n  outliner.get(type.jointRegion);\n  outliner.get(type.footRegion);\n  outliner.get(type.legBaseRegion);\n  outliner.get(type.baseJointRegion);\n  if (type.constructor.get() instanceof Legsc)   outliner.get(type.legRegion);\n  Image image=outline.get(ImagePacker.get(type.region));\n  image.save(type.name + \"-outline\");\n  if (type.constructor.get() instanceof Mechc) {\n    image.drawCenter(type.baseRegion);\n    image.drawCenter(type.legRegion);\n    image.drawCenter(type.legRegion,true,false);\n    image.draw(type.region);\n  }\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.draw(type.region);\n  Image baseCell=ImagePacker.get(type.cellRegion);\n  Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n  cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n  image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.save(\"unit-\" + type.name + \"-full\");\n  Rand rand=new Rand();\n  rand.setSeed(type.name.hashCode());\n  int splits=3;\n  float degrees=rand.random(360f);\n  float offsetRange=Math.max(image.width,image.height) * 0.15f;\n  Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n  Image[] wrecks=new Image[splits];\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i]=new Image(image.width,image.height);\n  }\n  RidgedPerlin r=new RidgedPerlin(1,3);\n  VoronoiNoise vn=new VoronoiNoise(type.id,true);\n  image.each((x,y) -> {\n    boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n    boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n    float dst=offset.dst(x,y);\n    float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n    int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n    if (!vval)     wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n  }\n);\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i].save(type.name + \"-wreck\" + i);\n  }\n  for (  Cicon icon : Cicon.scaled) {\n    Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n    Image scaled=new Image((int)size.x,(int)size.y);\n    scaled.drawScaled(image);\n    scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n    if (icon == logicIcon) {\n      scaled.save(type.name + \"-icon-logic\");\n    }\n  }\n}\n catch (IllegalArgumentException e) {\n  Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 894,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 5396,
        "startLineNumber" : 398,
        "startColumnNumber" : 78,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 912,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 5404,
        "startLineNumber" : 398,
        "startColumnNumber" : 70,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "type -> {\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 915,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 452,
        "startColumnNumber" : 16,
        "endLineNumber" : 452,
        "endColumnNumber" : 66
      },
      "nodeContext" : "Image baseCell=ImagePacker.get(type.cellRegion);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "type",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 453,
      "startColumnNumber" : 39,
      "endLineNumber" : 453,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 453,
        "startColumnNumber" : 39,
        "endLineNumber" : 453,
        "endColumnNumber" : 54
      },
      "nodeContext" : "type.cellRegion",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 453,
        "startColumnNumber" : 39,
        "endLineNumber" : 453,
        "endColumnNumber" : 60
      },
      "nodeContext" : "type.cellRegion.width",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 453,
        "startColumnNumber" : 29,
        "endLineNumber" : 453,
        "endColumnNumber" : 85
      },
      "nodeContext" : "new Image(type.cellRegion.width,type.cellRegion.height)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 453,
        "startColumnNumber" : 22,
        "endLineNumber" : 453,
        "endColumnNumber" : 85
      },
      "nodeContext" : "cell=new Image(type.cellRegion.width,type.cellRegion.height)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 453,
        "startColumnNumber" : 16,
        "endLineNumber" : 453,
        "endColumnNumber" : 86
      },
      "nodeContext" : "Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5105,
        "startLineNumber" : 403,
        "startColumnNumber" : 15,
        "endLineNumber" : 515,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  type.load();\n  type.init();\n  Color outc=Pal.darkerMetal;\n  Func<Image,Image> outline=i -> i.outline(3,outc);\n  Cons<TextureRegion> outliner=t -> {\n    if (t != null && t.found()) {\n      ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n    }\n  }\n;\n  for (  Weapon weapon : type.weapons) {\n    if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n      outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n    }\n  }\n  outliner.get(type.jointRegion);\n  outliner.get(type.footRegion);\n  outliner.get(type.legBaseRegion);\n  outliner.get(type.baseJointRegion);\n  if (type.constructor.get() instanceof Legsc)   outliner.get(type.legRegion);\n  Image image=outline.get(ImagePacker.get(type.region));\n  image.save(type.name + \"-outline\");\n  if (type.constructor.get() instanceof Mechc) {\n    image.drawCenter(type.baseRegion);\n    image.drawCenter(type.legRegion);\n    image.drawCenter(type.legRegion,true,false);\n    image.draw(type.region);\n  }\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.draw(type.region);\n  Image baseCell=ImagePacker.get(type.cellRegion);\n  Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n  cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n  image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.save(\"unit-\" + type.name + \"-full\");\n  Rand rand=new Rand();\n  rand.setSeed(type.name.hashCode());\n  int splits=3;\n  float degrees=rand.random(360f);\n  float offsetRange=Math.max(image.width,image.height) * 0.15f;\n  Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n  Image[] wrecks=new Image[splits];\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i]=new Image(image.width,image.height);\n  }\n  RidgedPerlin r=new RidgedPerlin(1,3);\n  VoronoiNoise vn=new VoronoiNoise(type.id,true);\n  image.each((x,y) -> {\n    boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n    boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n    float dst=offset.dst(x,y);\n    float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n    int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n    if (!vval)     wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n  }\n);\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i].save(type.name + \"-wreck\" + i);\n  }\n  for (  Cicon icon : Cicon.scaled) {\n    Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n    Image scaled=new Image((int)size.x,(int)size.y);\n    scaled.drawScaled(image);\n    scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n    if (icon == logicIcon) {\n      scaled.save(type.name + \"-icon-logic\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 876,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5239,
        "startLineNumber" : 403,
        "startColumnNumber" : 12,
        "endLineNumber" : 517,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  type.load();\n  type.init();\n  Color outc=Pal.darkerMetal;\n  Func<Image,Image> outline=i -> i.outline(3,outc);\n  Cons<TextureRegion> outliner=t -> {\n    if (t != null && t.found()) {\n      ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n    }\n  }\n;\n  for (  Weapon weapon : type.weapons) {\n    if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n      outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n    }\n  }\n  outliner.get(type.jointRegion);\n  outliner.get(type.footRegion);\n  outliner.get(type.legBaseRegion);\n  outliner.get(type.baseJointRegion);\n  if (type.constructor.get() instanceof Legsc)   outliner.get(type.legRegion);\n  Image image=outline.get(ImagePacker.get(type.region));\n  image.save(type.name + \"-outline\");\n  if (type.constructor.get() instanceof Mechc) {\n    image.drawCenter(type.baseRegion);\n    image.drawCenter(type.legRegion);\n    image.drawCenter(type.legRegion,true,false);\n    image.draw(type.region);\n  }\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.draw(type.region);\n  Image baseCell=ImagePacker.get(type.cellRegion);\n  Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n  cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n  image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.save(\"unit-\" + type.name + \"-full\");\n  Rand rand=new Rand();\n  rand.setSeed(type.name.hashCode());\n  int splits=3;\n  float degrees=rand.random(360f);\n  float offsetRange=Math.max(image.width,image.height) * 0.15f;\n  Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n  Image[] wrecks=new Image[splits];\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i]=new Image(image.width,image.height);\n  }\n  RidgedPerlin r=new RidgedPerlin(1,3);\n  VoronoiNoise vn=new VoronoiNoise(type.id,true);\n  image.each((x,y) -> {\n    boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n    boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n    float dst=offset.dst(x,y);\n    float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n    int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n    if (!vval)     wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n  }\n);\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i].save(type.name + \"-wreck\" + i);\n  }\n  for (  Cicon icon : Cicon.scaled) {\n    Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n    Image scaled=new Image((int)size.x,(int)size.y);\n    scaled.drawScaled(image);\n    scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n    if (icon == logicIcon) {\n      scaled.save(type.name + \"-icon-logic\");\n    }\n  }\n}\n catch (IllegalArgumentException e) {\n  Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 894,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 5396,
        "startLineNumber" : 398,
        "startColumnNumber" : 78,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 912,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 5404,
        "startLineNumber" : 398,
        "startColumnNumber" : 70,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "type -> {\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 915,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 453,
        "startColumnNumber" : 16,
        "endLineNumber" : 453,
        "endColumnNumber" : 86
      },
      "nodeContext" : "Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "type",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 453,
      "startColumnNumber" : 62,
      "endLineNumber" : 453,
      "endColumnNumber" : 66
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 453,
        "startColumnNumber" : 62,
        "endLineNumber" : 453,
        "endColumnNumber" : 77
      },
      "nodeContext" : "type.cellRegion",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 453,
        "startColumnNumber" : 62,
        "endLineNumber" : 453,
        "endColumnNumber" : 84
      },
      "nodeContext" : "type.cellRegion.height",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 453,
        "startColumnNumber" : 29,
        "endLineNumber" : 453,
        "endColumnNumber" : 85
      },
      "nodeContext" : "new Image(type.cellRegion.width,type.cellRegion.height)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 453,
        "startColumnNumber" : 22,
        "endLineNumber" : 453,
        "endColumnNumber" : 85
      },
      "nodeContext" : "cell=new Image(type.cellRegion.width,type.cellRegion.height)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 453,
        "startColumnNumber" : 16,
        "endLineNumber" : 453,
        "endColumnNumber" : 86
      },
      "nodeContext" : "Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5105,
        "startLineNumber" : 403,
        "startColumnNumber" : 15,
        "endLineNumber" : 515,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  type.load();\n  type.init();\n  Color outc=Pal.darkerMetal;\n  Func<Image,Image> outline=i -> i.outline(3,outc);\n  Cons<TextureRegion> outliner=t -> {\n    if (t != null && t.found()) {\n      ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n    }\n  }\n;\n  for (  Weapon weapon : type.weapons) {\n    if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n      outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n    }\n  }\n  outliner.get(type.jointRegion);\n  outliner.get(type.footRegion);\n  outliner.get(type.legBaseRegion);\n  outliner.get(type.baseJointRegion);\n  if (type.constructor.get() instanceof Legsc)   outliner.get(type.legRegion);\n  Image image=outline.get(ImagePacker.get(type.region));\n  image.save(type.name + \"-outline\");\n  if (type.constructor.get() instanceof Mechc) {\n    image.drawCenter(type.baseRegion);\n    image.drawCenter(type.legRegion);\n    image.drawCenter(type.legRegion,true,false);\n    image.draw(type.region);\n  }\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.draw(type.region);\n  Image baseCell=ImagePacker.get(type.cellRegion);\n  Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n  cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n  image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.save(\"unit-\" + type.name + \"-full\");\n  Rand rand=new Rand();\n  rand.setSeed(type.name.hashCode());\n  int splits=3;\n  float degrees=rand.random(360f);\n  float offsetRange=Math.max(image.width,image.height) * 0.15f;\n  Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n  Image[] wrecks=new Image[splits];\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i]=new Image(image.width,image.height);\n  }\n  RidgedPerlin r=new RidgedPerlin(1,3);\n  VoronoiNoise vn=new VoronoiNoise(type.id,true);\n  image.each((x,y) -> {\n    boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n    boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n    float dst=offset.dst(x,y);\n    float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n    int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n    if (!vval)     wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n  }\n);\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i].save(type.name + \"-wreck\" + i);\n  }\n  for (  Cicon icon : Cicon.scaled) {\n    Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n    Image scaled=new Image((int)size.x,(int)size.y);\n    scaled.drawScaled(image);\n    scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n    if (icon == logicIcon) {\n      scaled.save(type.name + \"-icon-logic\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 876,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5239,
        "startLineNumber" : 403,
        "startColumnNumber" : 12,
        "endLineNumber" : 517,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  type.load();\n  type.init();\n  Color outc=Pal.darkerMetal;\n  Func<Image,Image> outline=i -> i.outline(3,outc);\n  Cons<TextureRegion> outliner=t -> {\n    if (t != null && t.found()) {\n      ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n    }\n  }\n;\n  for (  Weapon weapon : type.weapons) {\n    if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n      outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n    }\n  }\n  outliner.get(type.jointRegion);\n  outliner.get(type.footRegion);\n  outliner.get(type.legBaseRegion);\n  outliner.get(type.baseJointRegion);\n  if (type.constructor.get() instanceof Legsc)   outliner.get(type.legRegion);\n  Image image=outline.get(ImagePacker.get(type.region));\n  image.save(type.name + \"-outline\");\n  if (type.constructor.get() instanceof Mechc) {\n    image.drawCenter(type.baseRegion);\n    image.drawCenter(type.legRegion);\n    image.drawCenter(type.legRegion,true,false);\n    image.draw(type.region);\n  }\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.draw(type.region);\n  Image baseCell=ImagePacker.get(type.cellRegion);\n  Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n  cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n  image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.save(\"unit-\" + type.name + \"-full\");\n  Rand rand=new Rand();\n  rand.setSeed(type.name.hashCode());\n  int splits=3;\n  float degrees=rand.random(360f);\n  float offsetRange=Math.max(image.width,image.height) * 0.15f;\n  Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n  Image[] wrecks=new Image[splits];\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i]=new Image(image.width,image.height);\n  }\n  RidgedPerlin r=new RidgedPerlin(1,3);\n  VoronoiNoise vn=new VoronoiNoise(type.id,true);\n  image.each((x,y) -> {\n    boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n    boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n    float dst=offset.dst(x,y);\n    float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n    int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n    if (!vval)     wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n  }\n);\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i].save(type.name + \"-wreck\" + i);\n  }\n  for (  Cicon icon : Cicon.scaled) {\n    Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n    Image scaled=new Image((int)size.x,(int)size.y);\n    scaled.drawScaled(image);\n    scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n    if (icon == logicIcon) {\n      scaled.save(type.name + \"-icon-logic\");\n    }\n  }\n}\n catch (IllegalArgumentException e) {\n  Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 894,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 5396,
        "startLineNumber" : 398,
        "startColumnNumber" : 78,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 912,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 5404,
        "startLineNumber" : 398,
        "startColumnNumber" : 70,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "type -> {\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 915,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 453,
        "startColumnNumber" : 16,
        "endLineNumber" : 453,
        "endColumnNumber" : 86
      },
      "nodeContext" : "Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "type",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 458,
      "startColumnNumber" : 36,
      "endLineNumber" : 458,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 458,
        "startColumnNumber" : 36,
        "endLineNumber" : 458,
        "endColumnNumber" : 48
      },
      "nodeContext" : "type.weapons",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 448,
        "startLineNumber" : 458,
        "startColumnNumber" : 16,
        "endLineNumber" : 465,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (Weapon weapon : type.weapons) {\n  weapon.load();\n  image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 89,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5105,
        "startLineNumber" : 403,
        "startColumnNumber" : 15,
        "endLineNumber" : 515,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  type.load();\n  type.init();\n  Color outc=Pal.darkerMetal;\n  Func<Image,Image> outline=i -> i.outline(3,outc);\n  Cons<TextureRegion> outliner=t -> {\n    if (t != null && t.found()) {\n      ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n    }\n  }\n;\n  for (  Weapon weapon : type.weapons) {\n    if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n      outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n    }\n  }\n  outliner.get(type.jointRegion);\n  outliner.get(type.footRegion);\n  outliner.get(type.legBaseRegion);\n  outliner.get(type.baseJointRegion);\n  if (type.constructor.get() instanceof Legsc)   outliner.get(type.legRegion);\n  Image image=outline.get(ImagePacker.get(type.region));\n  image.save(type.name + \"-outline\");\n  if (type.constructor.get() instanceof Mechc) {\n    image.drawCenter(type.baseRegion);\n    image.drawCenter(type.legRegion);\n    image.drawCenter(type.legRegion,true,false);\n    image.draw(type.region);\n  }\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.draw(type.region);\n  Image baseCell=ImagePacker.get(type.cellRegion);\n  Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n  cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n  image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.save(\"unit-\" + type.name + \"-full\");\n  Rand rand=new Rand();\n  rand.setSeed(type.name.hashCode());\n  int splits=3;\n  float degrees=rand.random(360f);\n  float offsetRange=Math.max(image.width,image.height) * 0.15f;\n  Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n  Image[] wrecks=new Image[splits];\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i]=new Image(image.width,image.height);\n  }\n  RidgedPerlin r=new RidgedPerlin(1,3);\n  VoronoiNoise vn=new VoronoiNoise(type.id,true);\n  image.each((x,y) -> {\n    boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n    boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n    float dst=offset.dst(x,y);\n    float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n    int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n    if (!vval)     wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n  }\n);\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i].save(type.name + \"-wreck\" + i);\n  }\n  for (  Cicon icon : Cicon.scaled) {\n    Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n    Image scaled=new Image((int)size.x,(int)size.y);\n    scaled.drawScaled(image);\n    scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n    if (icon == logicIcon) {\n      scaled.save(type.name + \"-icon-logic\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 876,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5239,
        "startLineNumber" : 403,
        "startColumnNumber" : 12,
        "endLineNumber" : 517,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  type.load();\n  type.init();\n  Color outc=Pal.darkerMetal;\n  Func<Image,Image> outline=i -> i.outline(3,outc);\n  Cons<TextureRegion> outliner=t -> {\n    if (t != null && t.found()) {\n      ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n    }\n  }\n;\n  for (  Weapon weapon : type.weapons) {\n    if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n      outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n    }\n  }\n  outliner.get(type.jointRegion);\n  outliner.get(type.footRegion);\n  outliner.get(type.legBaseRegion);\n  outliner.get(type.baseJointRegion);\n  if (type.constructor.get() instanceof Legsc)   outliner.get(type.legRegion);\n  Image image=outline.get(ImagePacker.get(type.region));\n  image.save(type.name + \"-outline\");\n  if (type.constructor.get() instanceof Mechc) {\n    image.drawCenter(type.baseRegion);\n    image.drawCenter(type.legRegion);\n    image.drawCenter(type.legRegion,true,false);\n    image.draw(type.region);\n  }\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.draw(type.region);\n  Image baseCell=ImagePacker.get(type.cellRegion);\n  Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n  cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n  image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.save(\"unit-\" + type.name + \"-full\");\n  Rand rand=new Rand();\n  rand.setSeed(type.name.hashCode());\n  int splits=3;\n  float degrees=rand.random(360f);\n  float offsetRange=Math.max(image.width,image.height) * 0.15f;\n  Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n  Image[] wrecks=new Image[splits];\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i]=new Image(image.width,image.height);\n  }\n  RidgedPerlin r=new RidgedPerlin(1,3);\n  VoronoiNoise vn=new VoronoiNoise(type.id,true);\n  image.each((x,y) -> {\n    boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n    boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n    float dst=offset.dst(x,y);\n    float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n    int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n    if (!vval)     wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n  }\n);\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i].save(type.name + \"-wreck\" + i);\n  }\n  for (  Cicon icon : Cicon.scaled) {\n    Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n    Image scaled=new Image((int)size.x,(int)size.y);\n    scaled.drawScaled(image);\n    scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n    if (icon == logicIcon) {\n      scaled.save(type.name + \"-icon-logic\");\n    }\n  }\n}\n catch (IllegalArgumentException e) {\n  Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 894,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 5396,
        "startLineNumber" : 398,
        "startColumnNumber" : 78,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 912,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 5404,
        "startLineNumber" : 398,
        "startColumnNumber" : 70,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "type -> {\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 915,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 458,
        "startColumnNumber" : 36,
        "endLineNumber" : 458,
        "endColumnNumber" : 48
      },
      "nodeContext" : "type.weapons",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "type",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 467,
      "startColumnNumber" : 37,
      "endLineNumber" : 467,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 467,
        "startColumnNumber" : 37,
        "endLineNumber" : 467,
        "endColumnNumber" : 46
      },
      "nodeContext" : "type.name",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 467,
        "startColumnNumber" : 27,
        "endLineNumber" : 467,
        "endColumnNumber" : 56
      },
      "nodeContext" : "\"unit-\" + type.name + \"-full\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 467,
        "startColumnNumber" : 16,
        "endLineNumber" : 467,
        "endColumnNumber" : 57
      },
      "nodeContext" : "image.save(\"unit-\" + type.name + \"-full\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 467,
        "startColumnNumber" : 16,
        "endLineNumber" : 467,
        "endColumnNumber" : 58
      },
      "nodeContext" : "image.save(\"unit-\" + type.name + \"-full\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5105,
        "startLineNumber" : 403,
        "startColumnNumber" : 15,
        "endLineNumber" : 515,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  type.load();\n  type.init();\n  Color outc=Pal.darkerMetal;\n  Func<Image,Image> outline=i -> i.outline(3,outc);\n  Cons<TextureRegion> outliner=t -> {\n    if (t != null && t.found()) {\n      ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n    }\n  }\n;\n  for (  Weapon weapon : type.weapons) {\n    if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n      outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n    }\n  }\n  outliner.get(type.jointRegion);\n  outliner.get(type.footRegion);\n  outliner.get(type.legBaseRegion);\n  outliner.get(type.baseJointRegion);\n  if (type.constructor.get() instanceof Legsc)   outliner.get(type.legRegion);\n  Image image=outline.get(ImagePacker.get(type.region));\n  image.save(type.name + \"-outline\");\n  if (type.constructor.get() instanceof Mechc) {\n    image.drawCenter(type.baseRegion);\n    image.drawCenter(type.legRegion);\n    image.drawCenter(type.legRegion,true,false);\n    image.draw(type.region);\n  }\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.draw(type.region);\n  Image baseCell=ImagePacker.get(type.cellRegion);\n  Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n  cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n  image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.save(\"unit-\" + type.name + \"-full\");\n  Rand rand=new Rand();\n  rand.setSeed(type.name.hashCode());\n  int splits=3;\n  float degrees=rand.random(360f);\n  float offsetRange=Math.max(image.width,image.height) * 0.15f;\n  Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n  Image[] wrecks=new Image[splits];\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i]=new Image(image.width,image.height);\n  }\n  RidgedPerlin r=new RidgedPerlin(1,3);\n  VoronoiNoise vn=new VoronoiNoise(type.id,true);\n  image.each((x,y) -> {\n    boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n    boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n    float dst=offset.dst(x,y);\n    float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n    int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n    if (!vval)     wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n  }\n);\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i].save(type.name + \"-wreck\" + i);\n  }\n  for (  Cicon icon : Cicon.scaled) {\n    Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n    Image scaled=new Image((int)size.x,(int)size.y);\n    scaled.drawScaled(image);\n    scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n    if (icon == logicIcon) {\n      scaled.save(type.name + \"-icon-logic\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 876,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5239,
        "startLineNumber" : 403,
        "startColumnNumber" : 12,
        "endLineNumber" : 517,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  type.load();\n  type.init();\n  Color outc=Pal.darkerMetal;\n  Func<Image,Image> outline=i -> i.outline(3,outc);\n  Cons<TextureRegion> outliner=t -> {\n    if (t != null && t.found()) {\n      ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n    }\n  }\n;\n  for (  Weapon weapon : type.weapons) {\n    if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n      outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n    }\n  }\n  outliner.get(type.jointRegion);\n  outliner.get(type.footRegion);\n  outliner.get(type.legBaseRegion);\n  outliner.get(type.baseJointRegion);\n  if (type.constructor.get() instanceof Legsc)   outliner.get(type.legRegion);\n  Image image=outline.get(ImagePacker.get(type.region));\n  image.save(type.name + \"-outline\");\n  if (type.constructor.get() instanceof Mechc) {\n    image.drawCenter(type.baseRegion);\n    image.drawCenter(type.legRegion);\n    image.drawCenter(type.legRegion,true,false);\n    image.draw(type.region);\n  }\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.draw(type.region);\n  Image baseCell=ImagePacker.get(type.cellRegion);\n  Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n  cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n  image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.save(\"unit-\" + type.name + \"-full\");\n  Rand rand=new Rand();\n  rand.setSeed(type.name.hashCode());\n  int splits=3;\n  float degrees=rand.random(360f);\n  float offsetRange=Math.max(image.width,image.height) * 0.15f;\n  Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n  Image[] wrecks=new Image[splits];\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i]=new Image(image.width,image.height);\n  }\n  RidgedPerlin r=new RidgedPerlin(1,3);\n  VoronoiNoise vn=new VoronoiNoise(type.id,true);\n  image.each((x,y) -> {\n    boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n    boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n    float dst=offset.dst(x,y);\n    float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n    int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n    if (!vval)     wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n  }\n);\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i].save(type.name + \"-wreck\" + i);\n  }\n  for (  Cicon icon : Cicon.scaled) {\n    Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n    Image scaled=new Image((int)size.x,(int)size.y);\n    scaled.drawScaled(image);\n    scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n    if (icon == logicIcon) {\n      scaled.save(type.name + \"-icon-logic\");\n    }\n  }\n}\n catch (IllegalArgumentException e) {\n  Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 894,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 5396,
        "startLineNumber" : 398,
        "startColumnNumber" : 78,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 912,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 5404,
        "startLineNumber" : 398,
        "startColumnNumber" : 70,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "type -> {\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 915,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 467,
        "startColumnNumber" : 16,
        "endLineNumber" : 467,
        "endColumnNumber" : 58
      },
      "nodeContext" : "image.save(\"unit-\" + type.name + \"-full\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "type",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 470,
      "startColumnNumber" : 29,
      "endLineNumber" : 470,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 470,
        "startColumnNumber" : 29,
        "endLineNumber" : 470,
        "endColumnNumber" : 38
      },
      "nodeContext" : "type.name",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 470,
        "startColumnNumber" : 29,
        "endLineNumber" : 470,
        "endColumnNumber" : 49
      },
      "nodeContext" : "type.name.hashCode()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 470,
        "startColumnNumber" : 16,
        "endLineNumber" : 470,
        "endColumnNumber" : 50
      },
      "nodeContext" : "rand.setSeed(type.name.hashCode())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 470,
        "startColumnNumber" : 16,
        "endLineNumber" : 470,
        "endColumnNumber" : 51
      },
      "nodeContext" : "rand.setSeed(type.name.hashCode());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5105,
        "startLineNumber" : 403,
        "startColumnNumber" : 15,
        "endLineNumber" : 515,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  type.load();\n  type.init();\n  Color outc=Pal.darkerMetal;\n  Func<Image,Image> outline=i -> i.outline(3,outc);\n  Cons<TextureRegion> outliner=t -> {\n    if (t != null && t.found()) {\n      ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n    }\n  }\n;\n  for (  Weapon weapon : type.weapons) {\n    if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n      outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n    }\n  }\n  outliner.get(type.jointRegion);\n  outliner.get(type.footRegion);\n  outliner.get(type.legBaseRegion);\n  outliner.get(type.baseJointRegion);\n  if (type.constructor.get() instanceof Legsc)   outliner.get(type.legRegion);\n  Image image=outline.get(ImagePacker.get(type.region));\n  image.save(type.name + \"-outline\");\n  if (type.constructor.get() instanceof Mechc) {\n    image.drawCenter(type.baseRegion);\n    image.drawCenter(type.legRegion);\n    image.drawCenter(type.legRegion,true,false);\n    image.draw(type.region);\n  }\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.draw(type.region);\n  Image baseCell=ImagePacker.get(type.cellRegion);\n  Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n  cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n  image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.save(\"unit-\" + type.name + \"-full\");\n  Rand rand=new Rand();\n  rand.setSeed(type.name.hashCode());\n  int splits=3;\n  float degrees=rand.random(360f);\n  float offsetRange=Math.max(image.width,image.height) * 0.15f;\n  Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n  Image[] wrecks=new Image[splits];\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i]=new Image(image.width,image.height);\n  }\n  RidgedPerlin r=new RidgedPerlin(1,3);\n  VoronoiNoise vn=new VoronoiNoise(type.id,true);\n  image.each((x,y) -> {\n    boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n    boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n    float dst=offset.dst(x,y);\n    float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n    int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n    if (!vval)     wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n  }\n);\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i].save(type.name + \"-wreck\" + i);\n  }\n  for (  Cicon icon : Cicon.scaled) {\n    Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n    Image scaled=new Image((int)size.x,(int)size.y);\n    scaled.drawScaled(image);\n    scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n    if (icon == logicIcon) {\n      scaled.save(type.name + \"-icon-logic\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 876,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5239,
        "startLineNumber" : 403,
        "startColumnNumber" : 12,
        "endLineNumber" : 517,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  type.load();\n  type.init();\n  Color outc=Pal.darkerMetal;\n  Func<Image,Image> outline=i -> i.outline(3,outc);\n  Cons<TextureRegion> outliner=t -> {\n    if (t != null && t.found()) {\n      ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n    }\n  }\n;\n  for (  Weapon weapon : type.weapons) {\n    if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n      outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n    }\n  }\n  outliner.get(type.jointRegion);\n  outliner.get(type.footRegion);\n  outliner.get(type.legBaseRegion);\n  outliner.get(type.baseJointRegion);\n  if (type.constructor.get() instanceof Legsc)   outliner.get(type.legRegion);\n  Image image=outline.get(ImagePacker.get(type.region));\n  image.save(type.name + \"-outline\");\n  if (type.constructor.get() instanceof Mechc) {\n    image.drawCenter(type.baseRegion);\n    image.drawCenter(type.legRegion);\n    image.drawCenter(type.legRegion,true,false);\n    image.draw(type.region);\n  }\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.draw(type.region);\n  Image baseCell=ImagePacker.get(type.cellRegion);\n  Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n  cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n  image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.save(\"unit-\" + type.name + \"-full\");\n  Rand rand=new Rand();\n  rand.setSeed(type.name.hashCode());\n  int splits=3;\n  float degrees=rand.random(360f);\n  float offsetRange=Math.max(image.width,image.height) * 0.15f;\n  Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n  Image[] wrecks=new Image[splits];\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i]=new Image(image.width,image.height);\n  }\n  RidgedPerlin r=new RidgedPerlin(1,3);\n  VoronoiNoise vn=new VoronoiNoise(type.id,true);\n  image.each((x,y) -> {\n    boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n    boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n    float dst=offset.dst(x,y);\n    float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n    int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n    if (!vval)     wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n  }\n);\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i].save(type.name + \"-wreck\" + i);\n  }\n  for (  Cicon icon : Cicon.scaled) {\n    Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n    Image scaled=new Image((int)size.x,(int)size.y);\n    scaled.drawScaled(image);\n    scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n    if (icon == logicIcon) {\n      scaled.save(type.name + \"-icon-logic\");\n    }\n  }\n}\n catch (IllegalArgumentException e) {\n  Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 894,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 5396,
        "startLineNumber" : 398,
        "startColumnNumber" : 78,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 912,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 5404,
        "startLineNumber" : 398,
        "startColumnNumber" : 70,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "type -> {\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 915,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 470,
        "startColumnNumber" : 16,
        "endLineNumber" : 470,
        "endColumnNumber" : 51
      },
      "nodeContext" : "rand.setSeed(type.name.hashCode());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "type",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 485,
      "startColumnNumber" : 51,
      "endLineNumber" : 485,
      "endColumnNumber" : 55
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 485,
        "startColumnNumber" : 51,
        "endLineNumber" : 485,
        "endColumnNumber" : 58
      },
      "nodeContext" : "type.id",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 485,
        "startColumnNumber" : 34,
        "endLineNumber" : 485,
        "endColumnNumber" : 65
      },
      "nodeContext" : "new VoronoiNoise(type.id,true)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 485,
        "startColumnNumber" : 29,
        "endLineNumber" : 485,
        "endColumnNumber" : 65
      },
      "nodeContext" : "vn=new VoronoiNoise(type.id,true)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 485,
        "startColumnNumber" : 16,
        "endLineNumber" : 485,
        "endColumnNumber" : 66
      },
      "nodeContext" : "VoronoiNoise vn=new VoronoiNoise(type.id,true);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5105,
        "startLineNumber" : 403,
        "startColumnNumber" : 15,
        "endLineNumber" : 515,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  type.load();\n  type.init();\n  Color outc=Pal.darkerMetal;\n  Func<Image,Image> outline=i -> i.outline(3,outc);\n  Cons<TextureRegion> outliner=t -> {\n    if (t != null && t.found()) {\n      ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n    }\n  }\n;\n  for (  Weapon weapon : type.weapons) {\n    if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n      outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n    }\n  }\n  outliner.get(type.jointRegion);\n  outliner.get(type.footRegion);\n  outliner.get(type.legBaseRegion);\n  outliner.get(type.baseJointRegion);\n  if (type.constructor.get() instanceof Legsc)   outliner.get(type.legRegion);\n  Image image=outline.get(ImagePacker.get(type.region));\n  image.save(type.name + \"-outline\");\n  if (type.constructor.get() instanceof Mechc) {\n    image.drawCenter(type.baseRegion);\n    image.drawCenter(type.legRegion);\n    image.drawCenter(type.legRegion,true,false);\n    image.draw(type.region);\n  }\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.draw(type.region);\n  Image baseCell=ImagePacker.get(type.cellRegion);\n  Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n  cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n  image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.save(\"unit-\" + type.name + \"-full\");\n  Rand rand=new Rand();\n  rand.setSeed(type.name.hashCode());\n  int splits=3;\n  float degrees=rand.random(360f);\n  float offsetRange=Math.max(image.width,image.height) * 0.15f;\n  Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n  Image[] wrecks=new Image[splits];\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i]=new Image(image.width,image.height);\n  }\n  RidgedPerlin r=new RidgedPerlin(1,3);\n  VoronoiNoise vn=new VoronoiNoise(type.id,true);\n  image.each((x,y) -> {\n    boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n    boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n    float dst=offset.dst(x,y);\n    float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n    int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n    if (!vval)     wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n  }\n);\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i].save(type.name + \"-wreck\" + i);\n  }\n  for (  Cicon icon : Cicon.scaled) {\n    Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n    Image scaled=new Image((int)size.x,(int)size.y);\n    scaled.drawScaled(image);\n    scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n    if (icon == logicIcon) {\n      scaled.save(type.name + \"-icon-logic\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 876,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5239,
        "startLineNumber" : 403,
        "startColumnNumber" : 12,
        "endLineNumber" : 517,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  type.load();\n  type.init();\n  Color outc=Pal.darkerMetal;\n  Func<Image,Image> outline=i -> i.outline(3,outc);\n  Cons<TextureRegion> outliner=t -> {\n    if (t != null && t.found()) {\n      ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n    }\n  }\n;\n  for (  Weapon weapon : type.weapons) {\n    if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n      outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n    }\n  }\n  outliner.get(type.jointRegion);\n  outliner.get(type.footRegion);\n  outliner.get(type.legBaseRegion);\n  outliner.get(type.baseJointRegion);\n  if (type.constructor.get() instanceof Legsc)   outliner.get(type.legRegion);\n  Image image=outline.get(ImagePacker.get(type.region));\n  image.save(type.name + \"-outline\");\n  if (type.constructor.get() instanceof Mechc) {\n    image.drawCenter(type.baseRegion);\n    image.drawCenter(type.legRegion);\n    image.drawCenter(type.legRegion,true,false);\n    image.draw(type.region);\n  }\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.draw(type.region);\n  Image baseCell=ImagePacker.get(type.cellRegion);\n  Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n  cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n  image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.save(\"unit-\" + type.name + \"-full\");\n  Rand rand=new Rand();\n  rand.setSeed(type.name.hashCode());\n  int splits=3;\n  float degrees=rand.random(360f);\n  float offsetRange=Math.max(image.width,image.height) * 0.15f;\n  Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n  Image[] wrecks=new Image[splits];\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i]=new Image(image.width,image.height);\n  }\n  RidgedPerlin r=new RidgedPerlin(1,3);\n  VoronoiNoise vn=new VoronoiNoise(type.id,true);\n  image.each((x,y) -> {\n    boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n    boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n    float dst=offset.dst(x,y);\n    float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n    int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n    if (!vval)     wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n  }\n);\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i].save(type.name + \"-wreck\" + i);\n  }\n  for (  Cicon icon : Cicon.scaled) {\n    Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n    Image scaled=new Image((int)size.x,(int)size.y);\n    scaled.drawScaled(image);\n    scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n    if (icon == logicIcon) {\n      scaled.save(type.name + \"-icon-logic\");\n    }\n  }\n}\n catch (IllegalArgumentException e) {\n  Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 894,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 5396,
        "startLineNumber" : 398,
        "startColumnNumber" : 78,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 912,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 5404,
        "startLineNumber" : 398,
        "startColumnNumber" : 70,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "type -> {\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 915,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 485,
        "startColumnNumber" : 16,
        "endLineNumber" : 485,
        "endColumnNumber" : 66
      },
      "nodeContext" : "VoronoiNoise vn=new VoronoiNoise(type.id,true);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "type",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 501,
      "startColumnNumber" : 35,
      "endLineNumber" : 501,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 501,
        "startColumnNumber" : 35,
        "endLineNumber" : 501,
        "endColumnNumber" : 44
      },
      "nodeContext" : "type.name",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 501,
        "startColumnNumber" : 35,
        "endLineNumber" : 501,
        "endColumnNumber" : 59
      },
      "nodeContext" : "type.name + \"-wreck\" + i",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 501,
        "startColumnNumber" : 20,
        "endLineNumber" : 501,
        "endColumnNumber" : 60
      },
      "nodeContext" : "wrecks[i].save(type.name + \"-wreck\" + i)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 501,
        "startColumnNumber" : 20,
        "endLineNumber" : 501,
        "endColumnNumber" : 61
      },
      "nodeContext" : "wrecks[i].save(type.name + \"-wreck\" + i);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 500,
        "startColumnNumber" : 54,
        "endLineNumber" : 502,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  wrecks[i].save(type.name + \"-wreck\" + i);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 119,
        "startLineNumber" : 500,
        "startColumnNumber" : 16,
        "endLineNumber" : 502,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (int i=0; i < wrecks.length; i++) {\n  wrecks[i].save(type.name + \"-wreck\" + i);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 26,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5105,
        "startLineNumber" : 403,
        "startColumnNumber" : 15,
        "endLineNumber" : 515,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  type.load();\n  type.init();\n  Color outc=Pal.darkerMetal;\n  Func<Image,Image> outline=i -> i.outline(3,outc);\n  Cons<TextureRegion> outliner=t -> {\n    if (t != null && t.found()) {\n      ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n    }\n  }\n;\n  for (  Weapon weapon : type.weapons) {\n    if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n      outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n    }\n  }\n  outliner.get(type.jointRegion);\n  outliner.get(type.footRegion);\n  outliner.get(type.legBaseRegion);\n  outliner.get(type.baseJointRegion);\n  if (type.constructor.get() instanceof Legsc)   outliner.get(type.legRegion);\n  Image image=outline.get(ImagePacker.get(type.region));\n  image.save(type.name + \"-outline\");\n  if (type.constructor.get() instanceof Mechc) {\n    image.drawCenter(type.baseRegion);\n    image.drawCenter(type.legRegion);\n    image.drawCenter(type.legRegion,true,false);\n    image.draw(type.region);\n  }\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.draw(type.region);\n  Image baseCell=ImagePacker.get(type.cellRegion);\n  Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n  cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n  image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.save(\"unit-\" + type.name + \"-full\");\n  Rand rand=new Rand();\n  rand.setSeed(type.name.hashCode());\n  int splits=3;\n  float degrees=rand.random(360f);\n  float offsetRange=Math.max(image.width,image.height) * 0.15f;\n  Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n  Image[] wrecks=new Image[splits];\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i]=new Image(image.width,image.height);\n  }\n  RidgedPerlin r=new RidgedPerlin(1,3);\n  VoronoiNoise vn=new VoronoiNoise(type.id,true);\n  image.each((x,y) -> {\n    boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n    boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n    float dst=offset.dst(x,y);\n    float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n    int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n    if (!vval)     wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n  }\n);\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i].save(type.name + \"-wreck\" + i);\n  }\n  for (  Cicon icon : Cicon.scaled) {\n    Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n    Image scaled=new Image((int)size.x,(int)size.y);\n    scaled.drawScaled(image);\n    scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n    if (icon == logicIcon) {\n      scaled.save(type.name + \"-icon-logic\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 876,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5239,
        "startLineNumber" : 403,
        "startColumnNumber" : 12,
        "endLineNumber" : 517,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  type.load();\n  type.init();\n  Color outc=Pal.darkerMetal;\n  Func<Image,Image> outline=i -> i.outline(3,outc);\n  Cons<TextureRegion> outliner=t -> {\n    if (t != null && t.found()) {\n      ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n    }\n  }\n;\n  for (  Weapon weapon : type.weapons) {\n    if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n      outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n    }\n  }\n  outliner.get(type.jointRegion);\n  outliner.get(type.footRegion);\n  outliner.get(type.legBaseRegion);\n  outliner.get(type.baseJointRegion);\n  if (type.constructor.get() instanceof Legsc)   outliner.get(type.legRegion);\n  Image image=outline.get(ImagePacker.get(type.region));\n  image.save(type.name + \"-outline\");\n  if (type.constructor.get() instanceof Mechc) {\n    image.drawCenter(type.baseRegion);\n    image.drawCenter(type.legRegion);\n    image.drawCenter(type.legRegion,true,false);\n    image.draw(type.region);\n  }\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.draw(type.region);\n  Image baseCell=ImagePacker.get(type.cellRegion);\n  Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n  cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n  image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.save(\"unit-\" + type.name + \"-full\");\n  Rand rand=new Rand();\n  rand.setSeed(type.name.hashCode());\n  int splits=3;\n  float degrees=rand.random(360f);\n  float offsetRange=Math.max(image.width,image.height) * 0.15f;\n  Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n  Image[] wrecks=new Image[splits];\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i]=new Image(image.width,image.height);\n  }\n  RidgedPerlin r=new RidgedPerlin(1,3);\n  VoronoiNoise vn=new VoronoiNoise(type.id,true);\n  image.each((x,y) -> {\n    boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n    boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n    float dst=offset.dst(x,y);\n    float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n    int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n    if (!vval)     wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n  }\n);\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i].save(type.name + \"-wreck\" + i);\n  }\n  for (  Cicon icon : Cicon.scaled) {\n    Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n    Image scaled=new Image((int)size.x,(int)size.y);\n    scaled.drawScaled(image);\n    scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n    if (icon == logicIcon) {\n      scaled.save(type.name + \"-icon-logic\");\n    }\n  }\n}\n catch (IllegalArgumentException e) {\n  Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 894,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 5396,
        "startLineNumber" : 398,
        "startColumnNumber" : 78,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 912,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 5404,
        "startLineNumber" : 398,
        "startColumnNumber" : 70,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "type -> {\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 915,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 501,
        "startColumnNumber" : 20,
        "endLineNumber" : 501,
        "endColumnNumber" : 61
      },
      "nodeContext" : "wrecks[i].save(type.name + \"-wreck\" + i);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "type",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 509,
      "startColumnNumber" : 48,
      "endLineNumber" : 509,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 509,
        "startColumnNumber" : 48,
        "endLineNumber" : 509,
        "endColumnNumber" : 57
      },
      "nodeContext" : "type.name",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 509,
        "startColumnNumber" : 32,
        "endLineNumber" : 509,
        "endColumnNumber" : 77
      },
      "nodeContext" : "\"../ui/unit-\" + type.name + \"-\"+ icon.name()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 509,
        "startColumnNumber" : 20,
        "endLineNumber" : 509,
        "endColumnNumber" : 78
      },
      "nodeContext" : "scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 509,
        "startColumnNumber" : 20,
        "endLineNumber" : 509,
        "endColumnNumber" : 79
      },
      "nodeContext" : "scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 448,
        "startLineNumber" : 504,
        "startColumnNumber" : 46,
        "endLineNumber" : 514,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n  Image scaled=new Image((int)size.x,(int)size.y);\n  scaled.drawScaled(image);\n  scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n  if (icon == logicIcon) {\n    scaled.save(type.name + \"-icon-logic\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 73,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 478,
        "startLineNumber" : 504,
        "startColumnNumber" : 16,
        "endLineNumber" : 514,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (Cicon icon : Cicon.scaled) {\n  Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n  Image scaled=new Image((int)size.x,(int)size.y);\n  scaled.drawScaled(image);\n  scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n  if (icon == logicIcon) {\n    scaled.save(type.name + \"-icon-logic\");\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 81,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5105,
        "startLineNumber" : 403,
        "startColumnNumber" : 15,
        "endLineNumber" : 515,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  type.load();\n  type.init();\n  Color outc=Pal.darkerMetal;\n  Func<Image,Image> outline=i -> i.outline(3,outc);\n  Cons<TextureRegion> outliner=t -> {\n    if (t != null && t.found()) {\n      ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n    }\n  }\n;\n  for (  Weapon weapon : type.weapons) {\n    if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n      outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n    }\n  }\n  outliner.get(type.jointRegion);\n  outliner.get(type.footRegion);\n  outliner.get(type.legBaseRegion);\n  outliner.get(type.baseJointRegion);\n  if (type.constructor.get() instanceof Legsc)   outliner.get(type.legRegion);\n  Image image=outline.get(ImagePacker.get(type.region));\n  image.save(type.name + \"-outline\");\n  if (type.constructor.get() instanceof Mechc) {\n    image.drawCenter(type.baseRegion);\n    image.drawCenter(type.legRegion);\n    image.drawCenter(type.legRegion,true,false);\n    image.draw(type.region);\n  }\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.draw(type.region);\n  Image baseCell=ImagePacker.get(type.cellRegion);\n  Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n  cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n  image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.save(\"unit-\" + type.name + \"-full\");\n  Rand rand=new Rand();\n  rand.setSeed(type.name.hashCode());\n  int splits=3;\n  float degrees=rand.random(360f);\n  float offsetRange=Math.max(image.width,image.height) * 0.15f;\n  Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n  Image[] wrecks=new Image[splits];\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i]=new Image(image.width,image.height);\n  }\n  RidgedPerlin r=new RidgedPerlin(1,3);\n  VoronoiNoise vn=new VoronoiNoise(type.id,true);\n  image.each((x,y) -> {\n    boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n    boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n    float dst=offset.dst(x,y);\n    float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n    int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n    if (!vval)     wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n  }\n);\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i].save(type.name + \"-wreck\" + i);\n  }\n  for (  Cicon icon : Cicon.scaled) {\n    Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n    Image scaled=new Image((int)size.x,(int)size.y);\n    scaled.drawScaled(image);\n    scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n    if (icon == logicIcon) {\n      scaled.save(type.name + \"-icon-logic\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 876,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5239,
        "startLineNumber" : 403,
        "startColumnNumber" : 12,
        "endLineNumber" : 517,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  type.load();\n  type.init();\n  Color outc=Pal.darkerMetal;\n  Func<Image,Image> outline=i -> i.outline(3,outc);\n  Cons<TextureRegion> outliner=t -> {\n    if (t != null && t.found()) {\n      ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n    }\n  }\n;\n  for (  Weapon weapon : type.weapons) {\n    if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n      outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n    }\n  }\n  outliner.get(type.jointRegion);\n  outliner.get(type.footRegion);\n  outliner.get(type.legBaseRegion);\n  outliner.get(type.baseJointRegion);\n  if (type.constructor.get() instanceof Legsc)   outliner.get(type.legRegion);\n  Image image=outline.get(ImagePacker.get(type.region));\n  image.save(type.name + \"-outline\");\n  if (type.constructor.get() instanceof Mechc) {\n    image.drawCenter(type.baseRegion);\n    image.drawCenter(type.legRegion);\n    image.drawCenter(type.legRegion,true,false);\n    image.draw(type.region);\n  }\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.draw(type.region);\n  Image baseCell=ImagePacker.get(type.cellRegion);\n  Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n  cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n  image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.save(\"unit-\" + type.name + \"-full\");\n  Rand rand=new Rand();\n  rand.setSeed(type.name.hashCode());\n  int splits=3;\n  float degrees=rand.random(360f);\n  float offsetRange=Math.max(image.width,image.height) * 0.15f;\n  Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n  Image[] wrecks=new Image[splits];\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i]=new Image(image.width,image.height);\n  }\n  RidgedPerlin r=new RidgedPerlin(1,3);\n  VoronoiNoise vn=new VoronoiNoise(type.id,true);\n  image.each((x,y) -> {\n    boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n    boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n    float dst=offset.dst(x,y);\n    float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n    int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n    if (!vval)     wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n  }\n);\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i].save(type.name + \"-wreck\" + i);\n  }\n  for (  Cicon icon : Cicon.scaled) {\n    Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n    Image scaled=new Image((int)size.x,(int)size.y);\n    scaled.drawScaled(image);\n    scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n    if (icon == logicIcon) {\n      scaled.save(type.name + \"-icon-logic\");\n    }\n  }\n}\n catch (IllegalArgumentException e) {\n  Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 894,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 5396,
        "startLineNumber" : 398,
        "startColumnNumber" : 78,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 912,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 5404,
        "startLineNumber" : 398,
        "startColumnNumber" : 70,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "type -> {\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 915,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 509,
        "startColumnNumber" : 20,
        "endLineNumber" : 509,
        "endColumnNumber" : 79
      },
      "nodeContext" : "scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "type",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 512,
      "startColumnNumber" : 36,
      "endLineNumber" : 512,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 512,
        "startColumnNumber" : 36,
        "endLineNumber" : 512,
        "endColumnNumber" : 45
      },
      "nodeContext" : "type.name",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 512,
        "startColumnNumber" : 36,
        "endLineNumber" : 512,
        "endColumnNumber" : 61
      },
      "nodeContext" : "type.name + \"-icon-logic\"",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 512,
        "startColumnNumber" : 24,
        "endLineNumber" : 512,
        "endColumnNumber" : 62
      },
      "nodeContext" : "scaled.save(type.name + \"-icon-logic\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 512,
        "startColumnNumber" : 24,
        "endLineNumber" : 512,
        "endColumnNumber" : 63
      },
      "nodeContext" : "scaled.save(type.name + \"-icon-logic\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 511,
        "startColumnNumber" : 41,
        "endLineNumber" : 513,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  scaled.save(type.name + \"-icon-logic\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 108,
        "startLineNumber" : 511,
        "startColumnNumber" : 20,
        "endLineNumber" : 513,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (icon == logicIcon) {\n  scaled.save(type.name + \"-icon-logic\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 448,
        "startLineNumber" : 504,
        "startColumnNumber" : 46,
        "endLineNumber" : 514,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n  Image scaled=new Image((int)size.x,(int)size.y);\n  scaled.drawScaled(image);\n  scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n  if (icon == logicIcon) {\n    scaled.save(type.name + \"-icon-logic\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 73,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 478,
        "startLineNumber" : 504,
        "startColumnNumber" : 16,
        "endLineNumber" : 514,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (Cicon icon : Cicon.scaled) {\n  Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n  Image scaled=new Image((int)size.x,(int)size.y);\n  scaled.drawScaled(image);\n  scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n  if (icon == logicIcon) {\n    scaled.save(type.name + \"-icon-logic\");\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 81,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5105,
        "startLineNumber" : 403,
        "startColumnNumber" : 15,
        "endLineNumber" : 515,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  type.load();\n  type.init();\n  Color outc=Pal.darkerMetal;\n  Func<Image,Image> outline=i -> i.outline(3,outc);\n  Cons<TextureRegion> outliner=t -> {\n    if (t != null && t.found()) {\n      ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n    }\n  }\n;\n  for (  Weapon weapon : type.weapons) {\n    if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n      outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n    }\n  }\n  outliner.get(type.jointRegion);\n  outliner.get(type.footRegion);\n  outliner.get(type.legBaseRegion);\n  outliner.get(type.baseJointRegion);\n  if (type.constructor.get() instanceof Legsc)   outliner.get(type.legRegion);\n  Image image=outline.get(ImagePacker.get(type.region));\n  image.save(type.name + \"-outline\");\n  if (type.constructor.get() instanceof Mechc) {\n    image.drawCenter(type.baseRegion);\n    image.drawCenter(type.legRegion);\n    image.drawCenter(type.legRegion,true,false);\n    image.draw(type.region);\n  }\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.draw(type.region);\n  Image baseCell=ImagePacker.get(type.cellRegion);\n  Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n  cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n  image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.save(\"unit-\" + type.name + \"-full\");\n  Rand rand=new Rand();\n  rand.setSeed(type.name.hashCode());\n  int splits=3;\n  float degrees=rand.random(360f);\n  float offsetRange=Math.max(image.width,image.height) * 0.15f;\n  Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n  Image[] wrecks=new Image[splits];\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i]=new Image(image.width,image.height);\n  }\n  RidgedPerlin r=new RidgedPerlin(1,3);\n  VoronoiNoise vn=new VoronoiNoise(type.id,true);\n  image.each((x,y) -> {\n    boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n    boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n    float dst=offset.dst(x,y);\n    float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n    int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n    if (!vval)     wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n  }\n);\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i].save(type.name + \"-wreck\" + i);\n  }\n  for (  Cicon icon : Cicon.scaled) {\n    Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n    Image scaled=new Image((int)size.x,(int)size.y);\n    scaled.drawScaled(image);\n    scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n    if (icon == logicIcon) {\n      scaled.save(type.name + \"-icon-logic\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 876,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5239,
        "startLineNumber" : 403,
        "startColumnNumber" : 12,
        "endLineNumber" : 517,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  type.load();\n  type.init();\n  Color outc=Pal.darkerMetal;\n  Func<Image,Image> outline=i -> i.outline(3,outc);\n  Cons<TextureRegion> outliner=t -> {\n    if (t != null && t.found()) {\n      ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n    }\n  }\n;\n  for (  Weapon weapon : type.weapons) {\n    if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n      outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n    }\n  }\n  outliner.get(type.jointRegion);\n  outliner.get(type.footRegion);\n  outliner.get(type.legBaseRegion);\n  outliner.get(type.baseJointRegion);\n  if (type.constructor.get() instanceof Legsc)   outliner.get(type.legRegion);\n  Image image=outline.get(ImagePacker.get(type.region));\n  image.save(type.name + \"-outline\");\n  if (type.constructor.get() instanceof Mechc) {\n    image.drawCenter(type.baseRegion);\n    image.drawCenter(type.legRegion);\n    image.drawCenter(type.legRegion,true,false);\n    image.draw(type.region);\n  }\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.draw(type.region);\n  Image baseCell=ImagePacker.get(type.cellRegion);\n  Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n  cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n  image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.save(\"unit-\" + type.name + \"-full\");\n  Rand rand=new Rand();\n  rand.setSeed(type.name.hashCode());\n  int splits=3;\n  float degrees=rand.random(360f);\n  float offsetRange=Math.max(image.width,image.height) * 0.15f;\n  Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n  Image[] wrecks=new Image[splits];\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i]=new Image(image.width,image.height);\n  }\n  RidgedPerlin r=new RidgedPerlin(1,3);\n  VoronoiNoise vn=new VoronoiNoise(type.id,true);\n  image.each((x,y) -> {\n    boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n    boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n    float dst=offset.dst(x,y);\n    float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n    int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n    if (!vval)     wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n  }\n);\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i].save(type.name + \"-wreck\" + i);\n  }\n  for (  Cicon icon : Cicon.scaled) {\n    Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n    Image scaled=new Image((int)size.x,(int)size.y);\n    scaled.drawScaled(image);\n    scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n    if (icon == logicIcon) {\n      scaled.save(type.name + \"-icon-logic\");\n    }\n  }\n}\n catch (IllegalArgumentException e) {\n  Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 894,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 5396,
        "startLineNumber" : 398,
        "startColumnNumber" : 78,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 912,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 5404,
        "startLineNumber" : 398,
        "startColumnNumber" : 70,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "type -> {\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 915,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 512,
        "startColumnNumber" : 24,
        "endLineNumber" : 512,
        "endColumnNumber" : 63
      },
      "nodeContext" : "scaled.save(type.name + \"-icon-logic\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "type",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 516,
      "startColumnNumber" : 55,
      "endLineNumber" : 516,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 516,
        "startColumnNumber" : 55,
        "endLineNumber" : 516,
        "endColumnNumber" : 64
      },
      "nodeContext" : "type.name",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 516,
        "startColumnNumber" : 16,
        "endLineNumber" : 516,
        "endColumnNumber" : 81
      },
      "nodeContext" : "Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 516,
        "startColumnNumber" : 16,
        "endLineNumber" : 516,
        "endColumnNumber" : 82
      },
      "nodeContext" : "Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 515,
        "startColumnNumber" : 46,
        "endLineNumber" : 517,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 131,
        "startLineNumber" : 515,
        "startColumnNumber" : 13,
        "endLineNumber" : 517,
        "endColumnNumber" : 13
      },
      "nodeContext" : "catch (IllegalArgumentException e) {\n  Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5239,
        "startLineNumber" : 403,
        "startColumnNumber" : 12,
        "endLineNumber" : 517,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  type.load();\n  type.init();\n  Color outc=Pal.darkerMetal;\n  Func<Image,Image> outline=i -> i.outline(3,outc);\n  Cons<TextureRegion> outliner=t -> {\n    if (t != null && t.found()) {\n      ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n    }\n  }\n;\n  for (  Weapon weapon : type.weapons) {\n    if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n      outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n    }\n  }\n  outliner.get(type.jointRegion);\n  outliner.get(type.footRegion);\n  outliner.get(type.legBaseRegion);\n  outliner.get(type.baseJointRegion);\n  if (type.constructor.get() instanceof Legsc)   outliner.get(type.legRegion);\n  Image image=outline.get(ImagePacker.get(type.region));\n  image.save(type.name + \"-outline\");\n  if (type.constructor.get() instanceof Mechc) {\n    image.drawCenter(type.baseRegion);\n    image.drawCenter(type.legRegion);\n    image.drawCenter(type.legRegion,true,false);\n    image.draw(type.region);\n  }\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.draw(type.region);\n  Image baseCell=ImagePacker.get(type.cellRegion);\n  Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n  cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n  image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n  for (  Weapon weapon : type.weapons) {\n    weapon.load();\n    image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n  }\n  image.save(\"unit-\" + type.name + \"-full\");\n  Rand rand=new Rand();\n  rand.setSeed(type.name.hashCode());\n  int splits=3;\n  float degrees=rand.random(360f);\n  float offsetRange=Math.max(image.width,image.height) * 0.15f;\n  Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n  Image[] wrecks=new Image[splits];\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i]=new Image(image.width,image.height);\n  }\n  RidgedPerlin r=new RidgedPerlin(1,3);\n  VoronoiNoise vn=new VoronoiNoise(type.id,true);\n  image.each((x,y) -> {\n    boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n    boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n    float dst=offset.dst(x,y);\n    float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n    int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n    if (!vval)     wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n  }\n);\n  for (int i=0; i < wrecks.length; i++) {\n    wrecks[i].save(type.name + \"-wreck\" + i);\n  }\n  for (  Cicon icon : Cicon.scaled) {\n    Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n    Image scaled=new Image((int)size.x,(int)size.y);\n    scaled.drawScaled(image);\n    scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n    if (icon == logicIcon) {\n      scaled.save(type.name + \"-icon-logic\");\n    }\n  }\n}\n catch (IllegalArgumentException e) {\n  Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 894,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 5396,
        "startLineNumber" : 398,
        "startColumnNumber" : 78,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 912,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 5404,
        "startLineNumber" : 398,
        "startColumnNumber" : 70,
        "endLineNumber" : 519,
        "endColumnNumber" : 9
      },
      "nodeContext" : "type -> {\n  if (type.isHidden())   return;\n  ObjectSet<String> outlined=new ObjectSet<>();\n  try {\n    type.load();\n    type.init();\n    Color outc=Pal.darkerMetal;\n    Func<Image,Image> outline=i -> i.outline(3,outc);\n    Cons<TextureRegion> outliner=t -> {\n      if (t != null && t.found()) {\n        ImagePacker.replace(t,outline.get(ImagePacker.get(t)));\n      }\n    }\n;\n    for (    Weapon weapon : type.weapons) {\n      if (outlined.add(weapon.name) && ImagePacker.has(weapon.name)) {\n        outline.get(ImagePacker.get(weapon.name)).save(weapon.name + \"-outline\");\n      }\n    }\n    outliner.get(type.jointRegion);\n    outliner.get(type.footRegion);\n    outliner.get(type.legBaseRegion);\n    outliner.get(type.baseJointRegion);\n    if (type.constructor.get() instanceof Legsc)     outliner.get(type.legRegion);\n    Image image=outline.get(ImagePacker.get(type.region));\n    image.save(type.name + \"-outline\");\n    if (type.constructor.get() instanceof Mechc) {\n      image.drawCenter(type.baseRegion);\n      image.drawCenter(type.legRegion);\n      image.drawCenter(type.legRegion,true,false);\n      image.draw(type.region);\n    }\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(outline.get(ImagePacker.get(weapon.region)),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.draw(type.region);\n    Image baseCell=ImagePacker.get(type.cellRegion);\n    Image cell=new Image(type.cellRegion.width,type.cellRegion.height);\n    cell.each((x,y) -> cell.draw(x,y,baseCell.getColor(x,y).mul(Color.valueOf(\"ffa665\"))));\n    image.draw(cell,image.width / 2 - cell.width / 2,image.height / 2 - cell.height / 2);\n    for (    Weapon weapon : type.weapons) {\n      weapon.load();\n      image.draw(weapon.top ? outline.get(ImagePacker.get(weapon.region)) : ImagePacker.get(weapon.region),(int)(weapon.x / Draw.scl + image.width / 2f - weapon.region.width / 2f),(int)(-weapon.y / Draw.scl + image.height / 2f - weapon.region.height / 2f),weapon.flipSprite,false);\n    }\n    image.save(\"unit-\" + type.name + \"-full\");\n    Rand rand=new Rand();\n    rand.setSeed(type.name.hashCode());\n    int splits=3;\n    float degrees=rand.random(360f);\n    float offsetRange=Math.max(image.width,image.height) * 0.15f;\n    Vec2 offset=new Vec2(1,1).rotate(rand.random(360f)).setLength(rand.random(0,offsetRange)).add(image.width / 2f,image.height / 2f);\n    Image[] wrecks=new Image[splits];\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i]=new Image(image.width,image.height);\n    }\n    RidgedPerlin r=new RidgedPerlin(1,3);\n    VoronoiNoise vn=new VoronoiNoise(type.id,true);\n    image.each((x,y) -> {\n      boolean rValue=Math.max(r.getValue(x,y,1f / (20f + image.width / 8f)),0) > 0.16f;\n      boolean vval=vn.noise(x,y,1f / (14f + image.width / 40f)) > 0.47;\n      float dst=offset.dst(x,y);\n      float noise=(float)Noise.rawNoise(dst / (9f + image.width / 70f)) * (60 + image.width / 30f);\n      int section=(int)Mathf.clamp(Mathf.mod(offset.angleTo(x,y) + noise + degrees,360f) / 360f * splits,0,splits - 1);\n      if (!vval)       wrecks[section].draw(x,y,image.getColor(x,y).mul(rValue ? 0.7f : 1f));\n    }\n);\n    for (int i=0; i < wrecks.length; i++) {\n      wrecks[i].save(type.name + \"-wreck\" + i);\n    }\n    for (    Cicon icon : Cicon.scaled) {\n      Vec2 size=Scaling.fit.apply(image.width,image.height,icon.size,icon.size);\n      Image scaled=new Image((int)size.x,(int)size.y);\n      scaled.drawScaled(image);\n      scaled.save(\"../ui/unit-\" + type.name + \"-\"+ icon.name());\n      if (icon == logicIcon) {\n        scaled.save(type.name + \"-icon-logic\");\n      }\n    }\n  }\n catch (  IllegalArgumentException e) {\n    Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n  }\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 915,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 516,
        "startColumnNumber" : 16,
        "endLineNumber" : 516,
        "endColumnNumber" : 82
      },
      "nodeContext" : "Log.err(\"WARNING: Skipping unit @: @\",type.name,e.getMessage());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 399,
    "startColumnNumber" : 15,
    "endLineNumber" : 399,
    "endColumnNumber" : 19
  }, {
    "charLength" : 4,
    "startLineNumber" : 404,
    "startColumnNumber" : 16,
    "endLineNumber" : 404,
    "endColumnNumber" : 20
  }, {
    "charLength" : 4,
    "startLineNumber" : 405,
    "startColumnNumber" : 16,
    "endLineNumber" : 405,
    "endColumnNumber" : 20
  }, {
    "charLength" : 4,
    "startLineNumber" : 415,
    "startColumnNumber" : 36,
    "endLineNumber" : 415,
    "endColumnNumber" : 40
  }, {
    "charLength" : 4,
    "startLineNumber" : 421,
    "startColumnNumber" : 29,
    "endLineNumber" : 421,
    "endColumnNumber" : 33
  }, {
    "charLength" : 4,
    "startLineNumber" : 422,
    "startColumnNumber" : 29,
    "endLineNumber" : 422,
    "endColumnNumber" : 33
  }, {
    "charLength" : 4,
    "startLineNumber" : 423,
    "startColumnNumber" : 29,
    "endLineNumber" : 423,
    "endColumnNumber" : 33
  }, {
    "charLength" : 4,
    "startLineNumber" : 424,
    "startColumnNumber" : 29,
    "endLineNumber" : 424,
    "endColumnNumber" : 33
  }, {
    "charLength" : 4,
    "startLineNumber" : 425,
    "startColumnNumber" : 19,
    "endLineNumber" : 425,
    "endColumnNumber" : 23
  }, {
    "charLength" : 4,
    "startLineNumber" : 425,
    "startColumnNumber" : 73,
    "endLineNumber" : 425,
    "endColumnNumber" : 77
  }, {
    "charLength" : 4,
    "startLineNumber" : 427,
    "startColumnNumber" : 58,
    "endLineNumber" : 427,
    "endColumnNumber" : 62
  }, {
    "charLength" : 4,
    "startLineNumber" : 429,
    "startColumnNumber" : 27,
    "endLineNumber" : 429,
    "endColumnNumber" : 31
  }, {
    "charLength" : 4,
    "startLineNumber" : 432,
    "startColumnNumber" : 19,
    "endLineNumber" : 432,
    "endColumnNumber" : 23
  }, {
    "charLength" : 4,
    "startLineNumber" : 433,
    "startColumnNumber" : 37,
    "endLineNumber" : 433,
    "endColumnNumber" : 41
  }, {
    "charLength" : 4,
    "startLineNumber" : 434,
    "startColumnNumber" : 37,
    "endLineNumber" : 434,
    "endColumnNumber" : 41
  }, {
    "charLength" : 4,
    "startLineNumber" : 435,
    "startColumnNumber" : 37,
    "endLineNumber" : 435,
    "endColumnNumber" : 41
  }, {
    "charLength" : 4,
    "startLineNumber" : 436,
    "startColumnNumber" : 31,
    "endLineNumber" : 436,
    "endColumnNumber" : 35
  }, {
    "charLength" : 4,
    "startLineNumber" : 440,
    "startColumnNumber" : 36,
    "endLineNumber" : 440,
    "endColumnNumber" : 40
  }, {
    "charLength" : 4,
    "startLineNumber" : 450,
    "startColumnNumber" : 27,
    "endLineNumber" : 450,
    "endColumnNumber" : 31
  }, {
    "charLength" : 4,
    "startLineNumber" : 452,
    "startColumnNumber" : 49,
    "endLineNumber" : 452,
    "endColumnNumber" : 53
  }, {
    "charLength" : 4,
    "startLineNumber" : 453,
    "startColumnNumber" : 39,
    "endLineNumber" : 453,
    "endColumnNumber" : 43
  }, {
    "charLength" : 4,
    "startLineNumber" : 453,
    "startColumnNumber" : 62,
    "endLineNumber" : 453,
    "endColumnNumber" : 66
  }, {
    "charLength" : 4,
    "startLineNumber" : 458,
    "startColumnNumber" : 36,
    "endLineNumber" : 458,
    "endColumnNumber" : 40
  }, {
    "charLength" : 4,
    "startLineNumber" : 467,
    "startColumnNumber" : 37,
    "endLineNumber" : 467,
    "endColumnNumber" : 41
  }, {
    "charLength" : 4,
    "startLineNumber" : 470,
    "startColumnNumber" : 29,
    "endLineNumber" : 470,
    "endColumnNumber" : 33
  }, {
    "charLength" : 4,
    "startLineNumber" : 485,
    "startColumnNumber" : 51,
    "endLineNumber" : 485,
    "endColumnNumber" : 55
  }, {
    "charLength" : 4,
    "startLineNumber" : 501,
    "startColumnNumber" : 35,
    "endLineNumber" : 501,
    "endColumnNumber" : 39
  }, {
    "charLength" : 4,
    "startLineNumber" : 509,
    "startColumnNumber" : 48,
    "endLineNumber" : 509,
    "endColumnNumber" : 52
  }, {
    "charLength" : 4,
    "startLineNumber" : 512,
    "startColumnNumber" : 36,
    "endLineNumber" : 512,
    "endColumnNumber" : 40
  }, {
    "charLength" : 4,
    "startLineNumber" : 516,
    "startColumnNumber" : 55,
    "endLineNumber" : 516,
    "endColumnNumber" : 59
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 29,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 29,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 29,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 24,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 25,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 26,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 27,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 28,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 29,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 11,
    "secondKey" : 29,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 12,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 12,
    "secondKey" : 29,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 13,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 13,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 24,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 25,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 26,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 27,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 28,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 29,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 14,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 24,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 25,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 26,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 27,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 28,
    "layout" : 5
  }, {
    "firstKey" : 14,
    "secondKey" : 29,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 15,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 24,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 25,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 26,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 27,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 28,
    "layout" : 5
  }, {
    "firstKey" : 15,
    "secondKey" : 29,
    "layout" : 6
  }, {
    "firstKey" : 16,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 16,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 24,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 25,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 26,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 27,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 28,
    "layout" : 5
  }, {
    "firstKey" : 16,
    "secondKey" : 29,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 17,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 23,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 24,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 25,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 26,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 27,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 28,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 29,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 29,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 24,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 25,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 26,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 27,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 28,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 29,
    "layout" : 6
  }, {
    "firstKey" : 21,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 21,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 24,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 25,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 26,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 27,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 28,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 29,
    "layout" : 6
  }, {
    "firstKey" : 22,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 22,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 12,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 23,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 24,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 25,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 26,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 27,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 28,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 29,
    "layout" : 3
  }, {
    "firstKey" : 23,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 23,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 23,
    "secondKey" : 29,
    "layout" : 5
  }, {
    "firstKey" : 24,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 24,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 25,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 24,
    "secondKey" : 29,
    "layout" : 5
  }, {
    "firstKey" : 25,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 25,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 23,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 24,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 26,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 27,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 25,
    "secondKey" : 29,
    "layout" : 5
  }, {
    "firstKey" : 26,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 26,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 25,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 27,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 28,
    "layout" : 6
  }, {
    "firstKey" : 26,
    "secondKey" : 29,
    "layout" : 7
  }, {
    "firstKey" : 27,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 27,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 22,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 23,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 24,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 25,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 26,
    "layout" : 6
  }, {
    "firstKey" : 27,
    "secondKey" : 28,
    "layout" : 4
  }, {
    "firstKey" : 27,
    "secondKey" : 29,
    "layout" : 7
  }, {
    "firstKey" : 28,
    "secondKey" : 0,
    "layout" : 10
  }, {
    "firstKey" : 28,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 28,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 28,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 28,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 28,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 28,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 28,
    "secondKey" : 7,
    "layout" : 8
  }, {
    "firstKey" : 28,
    "secondKey" : 8,
    "layout" : 8
  }, {
    "firstKey" : 28,
    "secondKey" : 9,
    "layout" : 8
  }, {
    "firstKey" : 28,
    "secondKey" : 10,
    "layout" : 8
  }, {
    "firstKey" : 28,
    "secondKey" : 11,
    "layout" : 8
  }, {
    "firstKey" : 28,
    "secondKey" : 12,
    "layout" : 8
  }, {
    "firstKey" : 28,
    "secondKey" : 13,
    "layout" : 8
  }, {
    "firstKey" : 28,
    "secondKey" : 14,
    "layout" : 8
  }, {
    "firstKey" : 28,
    "secondKey" : 15,
    "layout" : 8
  }, {
    "firstKey" : 28,
    "secondKey" : 16,
    "layout" : 8
  }, {
    "firstKey" : 28,
    "secondKey" : 17,
    "layout" : 8
  }, {
    "firstKey" : 28,
    "secondKey" : 18,
    "layout" : 8
  }, {
    "firstKey" : 28,
    "secondKey" : 19,
    "layout" : 8
  }, {
    "firstKey" : 28,
    "secondKey" : 20,
    "layout" : 8
  }, {
    "firstKey" : 28,
    "secondKey" : 21,
    "layout" : 8
  }, {
    "firstKey" : 28,
    "secondKey" : 22,
    "layout" : 8
  }, {
    "firstKey" : 28,
    "secondKey" : 23,
    "layout" : 8
  }, {
    "firstKey" : 28,
    "secondKey" : 24,
    "layout" : 8
  }, {
    "firstKey" : 28,
    "secondKey" : 25,
    "layout" : 8
  }, {
    "firstKey" : 28,
    "secondKey" : 26,
    "layout" : 8
  }, {
    "firstKey" : 28,
    "secondKey" : 27,
    "layout" : 6
  }, {
    "firstKey" : 28,
    "secondKey" : 29,
    "layout" : 9
  }, {
    "firstKey" : 29,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 29,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 23,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 24,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 25,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 26,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 27,
    "layout" : 5
  }, {
    "firstKey" : 29,
    "secondKey" : 28,
    "layout" : 5
  } ]
}