{
  "id" : 206,
  "expression" : "(CertPemCredentials)credentials",
  "projectName" : "thingsboard@thingsboard",
  "commitID" : "7c2b3a9fbf84cc58aa7546029c5c7c10a662c55a",
  "filePath" : "/rule-engine/rule-engine-components/src/main/java/org/thingsboard/rule/engine/mqtt/azure/TbAzureIotHubNode.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "(CertPemCredentials)credentials",
    "nodeType" : "CastExpression",
    "nodePosition" : {
      "charLength" : 32,
      "startLineNumber" : 58,
      "startColumnNumber" : 52,
      "endLineNumber" : 58,
      "endColumnNumber" : 84
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 58,
        "startColumnNumber" : 35,
        "endLineNumber" : 58,
        "endColumnNumber" : 84
      },
      "nodeContext" : "pemCredentials=(CertPemCredentials)credentials",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 58,
        "startColumnNumber" : 16,
        "endLineNumber" : 58,
        "endColumnNumber" : 85
      },
      "nodeContext" : "CertPemCredentials pemCredentials=(CertPemCredentials)credentials;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 299,
        "startLineNumber" : 57,
        "startColumnNumber" : 67,
        "endLineNumber" : 62,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  CertPemCredentials pemCredentials=(CertPemCredentials)credentials;\n  if (pemCredentials.getCaCert() == null || pemCredentials.getCaCert().isEmpty()) {\n    pemCredentials.setCaCert(AzureIotHubUtil.getDefaultCaCert());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 30,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 354,
        "startLineNumber" : 57,
        "startColumnNumber" : 12,
        "endLineNumber" : 62,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (CredentialsType.CERT_PEM == credentials.getType()) {\n  CertPemCredentials pemCredentials=(CertPemCredentials)credentials;\n  if (pemCredentials.getCaCert() == null || pemCredentials.getCaCert().isEmpty()) {\n    pemCredentials.setCaCert(AzureIotHubUtil.getDefaultCaCert());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 38,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 723,
        "startLineNumber" : 52,
        "startColumnNumber" : 12,
        "endLineNumber" : 64,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  this.mqttNodeConfiguration=TbNodeUtils.convert(configuration,TbMqttNodeConfiguration.class);\n  mqttNodeConfiguration.setPort(8883);\n  mqttNodeConfiguration.setCleanSession(true);\n  ClientCredentials credentials=mqttNodeConfiguration.getCredentials();\n  if (CredentialsType.CERT_PEM == credentials.getType()) {\n    CertPemCredentials pemCredentials=(CertPemCredentials)credentials;\n    if (pemCredentials.getCaCert() == null || pemCredentials.getCaCert().isEmpty()) {\n      pemCredentials.setCaCert(AzureIotHubUtil.getDefaultCaCert());\n    }\n  }\n  this.mqttClient=initClient(ctx);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 77,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 801,
        "startLineNumber" : 52,
        "startColumnNumber" : 8,
        "endLineNumber" : 66,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  this.mqttNodeConfiguration=TbNodeUtils.convert(configuration,TbMqttNodeConfiguration.class);\n  mqttNodeConfiguration.setPort(8883);\n  mqttNodeConfiguration.setCleanSession(true);\n  ClientCredentials credentials=mqttNodeConfiguration.getCredentials();\n  if (CredentialsType.CERT_PEM == credentials.getType()) {\n    CertPemCredentials pemCredentials=(CertPemCredentials)credentials;\n    if (pemCredentials.getCaCert() == null || pemCredentials.getCaCert().isEmpty()) {\n      pemCredentials.setCaCert(AzureIotHubUtil.getDefaultCaCert());\n    }\n  }\n  this.mqttClient=initClient(ctx);\n}\n catch (Exception e) {\n  throw new TbNodeException(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 89,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 817,
        "startLineNumber" : 51,
        "startColumnNumber" : 94,
        "endLineNumber" : 67,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    this.mqttNodeConfiguration=TbNodeUtils.convert(configuration,TbMqttNodeConfiguration.class);\n    mqttNodeConfiguration.setPort(8883);\n    mqttNodeConfiguration.setCleanSession(true);\n    ClientCredentials credentials=mqttNodeConfiguration.getCredentials();\n    if (CredentialsType.CERT_PEM == credentials.getType()) {\n      CertPemCredentials pemCredentials=(CertPemCredentials)credentials;\n      if (pemCredentials.getCaCert() == null || pemCredentials.getCaCert().isEmpty()) {\n        pemCredentials.setCaCert(AzureIotHubUtil.getDefaultCaCert());\n      }\n    }\n    this.mqttClient=initClient(ctx);\n  }\n catch (  Exception e) {\n    throw new TbNodeException(e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 90,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 921,
        "startLineNumber" : 50,
        "startColumnNumber" : 4,
        "endLineNumber" : 67,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void init(TbContext ctx,TbNodeConfiguration configuration) throws TbNodeException {\n  try {\n    this.mqttNodeConfiguration=TbNodeUtils.convert(configuration,TbMqttNodeConfiguration.class);\n    mqttNodeConfiguration.setPort(8883);\n    mqttNodeConfiguration.setCleanSession(true);\n    ClientCredentials credentials=mqttNodeConfiguration.getCredentials();\n    if (CredentialsType.CERT_PEM == credentials.getType()) {\n      CertPemCredentials pemCredentials=(CertPemCredentials)credentials;\n      if (pemCredentials.getCaCert() == null || pemCredentials.getCaCert().isEmpty()) {\n        pemCredentials.setCaCert(AzureIotHubUtil.getDefaultCaCert());\n      }\n    }\n    this.mqttClient=initClient(ctx);\n  }\n catch (  Exception e) {\n    throw new TbNodeException(e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 106,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 58,
        "startColumnNumber" : 16,
        "endLineNumber" : 58,
        "endColumnNumber" : 85
      },
      "nodeContext" : "CertPemCredentials pemCredentials=(CertPemCredentials)credentials;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "org.thingsboard.rule.engine.credentials.CertPemCredentials"
  } ],
  "positionList" : [ {
    "charLength" : 32,
    "startLineNumber" : 58,
    "startColumnNumber" : 52,
    "endLineNumber" : 58,
    "endColumnNumber" : 84
  } ],
  "layoutRelationDataList" : [ ]
}