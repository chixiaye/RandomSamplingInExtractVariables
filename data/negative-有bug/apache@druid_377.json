{
  "id" : 377,
  "expression" : "DateTimes.of(\"1970-01-01T00:00:00.000Z\")",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/server/src/test/java/org/apache/druid/segment/realtime/plumber/RealtimePlumberSchoolTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "DateTimes.of(\"1970-01-01T00:00:00.000Z\")",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 40,
      "startLineNumber" : 437,
      "startColumnNumber" : 25,
      "endLineNumber" : 437,
      "endColumnNumber" : 65
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 437,
        "startColumnNumber" : 13,
        "endLineNumber" : 437,
        "endColumnNumber" : 65
      },
      "nodeContext" : "startTime=DateTimes.of(\"1970-01-01T00:00:00.000Z\")",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 437,
        "startColumnNumber" : 4,
        "endLineNumber" : 437,
        "endColumnNumber" : 66
      },
      "nodeContext" : "DateTime startTime=DateTimes.of(\"1970-01-01T00:00:00.000Z\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3454,
        "startLineNumber" : 372,
        "startColumnNumber" : 2,
        "endLineNumber" : 467,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Interval testInterval=new Interval(DateTimes.of(\"1970-01-01\"),DateTimes.of(\"1971-01-01\"));\n  RealtimePlumber plumber2=(RealtimePlumber)realtimePlumberSchool.findPlumber(schema2,tuningConfig,metrics);\n  Sink sink=new Sink(testInterval,schema2,tuningConfig.getShardSpec(),DateTimes.of(\"2014-12-01T12:34:56.789\").toString(),tuningConfig.getAppendableIndexSpec(),tuningConfig.getMaxRowsInMemory(),tuningConfig.getMaxBytesInMemoryOrDefault(),tuningConfig.getDedupColumn());\n  plumber2.getSinks().put(0L,sink);\n  Assert.assertNull(plumber2.startJob());\n  final CountDownLatch doneSignal=new CountDownLatch(1);\n  final Committer committer=new Committer(){\n    @Override public Object getMetadata(){\n      return commitMetadata;\n    }\n    @Override public void run(){\n      doneSignal.countDown();\n    }\n  }\n;\n  plumber2.add(getTestInputRow(\"1970-01-01\"),Suppliers.ofInstance(committer));\n  plumber2.add(getTestInputRow(\"1970-02-01\"),Suppliers.ofInstance(committer));\n  plumber2.add(getTestInputRow(\"1970-03-01\"),Suppliers.ofInstance(committer));\n  plumber2.add(getTestInputRow(\"1970-04-01\"),Suppliers.ofInstance(committer));\n  plumber2.add(getTestInputRow(\"1970-05-01\"),Suppliers.ofInstance(committer));\n  plumber2.persist(committer);\n  doneSignal.await();\n  plumber2.getSinks().clear();\n  plumber2.finishJob();\n  File persistDir=plumber2.computePersistDir(schema2,testInterval);\n  for (int i=0; i < 5; i++) {\n    Assert.assertTrue(new File(persistDir,String.valueOf(i)).exists());\n  }\n  FileUtils.deleteDirectory(new File(persistDir,\"1\"));\n  FileUtils.deleteDirectory(new File(persistDir,\"3\"));\n  RealtimePlumber restoredPlumber=(RealtimePlumber)realtimePlumberSchool.findPlumber(schema2,tuningConfig,metrics);\n  restoredPlumber.bootstrapSinksFromDisk();\n  Map<Long,Sink> sinks=restoredPlumber.getSinks();\n  Assert.assertEquals(1,sinks.size());\n  List<FireHydrant> hydrants=Lists.newArrayList(sinks.get(new Long(0)));\n  DateTime startTime=DateTimes.of(\"1970-01-01T00:00:00.000Z\");\n  Interval expectedInterval=new Interval(startTime,DateTimes.of(\"1971-01-01T00:00:00.000Z\"));\n  Assert.assertEquals(0,hydrants.get(0).getCount());\n  Assert.assertEquals(expectedInterval,hydrants.get(0).getSegmentDataInterval());\n  Assert.assertEquals(2,hydrants.get(1).getCount());\n  Assert.assertEquals(expectedInterval,hydrants.get(1).getSegmentDataInterval());\n  Assert.assertEquals(4,hydrants.get(2).getCount());\n  Assert.assertEquals(expectedInterval,hydrants.get(2).getSegmentDataInterval());\n  FileUtils.deleteDirectory(new File(persistDir,\"0\"));\n  FileUtils.deleteDirectory(new File(persistDir,\"2\"));\n  FileUtils.deleteDirectory(new File(persistDir,\"4\"));\n  RealtimePlumber restoredPlumber2=(RealtimePlumber)realtimePlumberSchool.findPlumber(schema2,tuningConfig,metrics);\n  restoredPlumber2.bootstrapSinksFromDisk();\n  Assert.assertEquals(0,restoredPlumber2.getSinks().size());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 446,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3544,
        "startLineNumber" : 371,
        "startColumnNumber" : 2,
        "endLineNumber" : 467,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void testPersistHydrantGapsHelper(final Object commitMetadata) throws Exception {\n  Interval testInterval=new Interval(DateTimes.of(\"1970-01-01\"),DateTimes.of(\"1971-01-01\"));\n  RealtimePlumber plumber2=(RealtimePlumber)realtimePlumberSchool.findPlumber(schema2,tuningConfig,metrics);\n  Sink sink=new Sink(testInterval,schema2,tuningConfig.getShardSpec(),DateTimes.of(\"2014-12-01T12:34:56.789\").toString(),tuningConfig.getAppendableIndexSpec(),tuningConfig.getMaxRowsInMemory(),tuningConfig.getMaxBytesInMemoryOrDefault(),tuningConfig.getDedupColumn());\n  plumber2.getSinks().put(0L,sink);\n  Assert.assertNull(plumber2.startJob());\n  final CountDownLatch doneSignal=new CountDownLatch(1);\n  final Committer committer=new Committer(){\n    @Override public Object getMetadata(){\n      return commitMetadata;\n    }\n    @Override public void run(){\n      doneSignal.countDown();\n    }\n  }\n;\n  plumber2.add(getTestInputRow(\"1970-01-01\"),Suppliers.ofInstance(committer));\n  plumber2.add(getTestInputRow(\"1970-02-01\"),Suppliers.ofInstance(committer));\n  plumber2.add(getTestInputRow(\"1970-03-01\"),Suppliers.ofInstance(committer));\n  plumber2.add(getTestInputRow(\"1970-04-01\"),Suppliers.ofInstance(committer));\n  plumber2.add(getTestInputRow(\"1970-05-01\"),Suppliers.ofInstance(committer));\n  plumber2.persist(committer);\n  doneSignal.await();\n  plumber2.getSinks().clear();\n  plumber2.finishJob();\n  File persistDir=plumber2.computePersistDir(schema2,testInterval);\n  for (int i=0; i < 5; i++) {\n    Assert.assertTrue(new File(persistDir,String.valueOf(i)).exists());\n  }\n  FileUtils.deleteDirectory(new File(persistDir,\"1\"));\n  FileUtils.deleteDirectory(new File(persistDir,\"3\"));\n  RealtimePlumber restoredPlumber=(RealtimePlumber)realtimePlumberSchool.findPlumber(schema2,tuningConfig,metrics);\n  restoredPlumber.bootstrapSinksFromDisk();\n  Map<Long,Sink> sinks=restoredPlumber.getSinks();\n  Assert.assertEquals(1,sinks.size());\n  List<FireHydrant> hydrants=Lists.newArrayList(sinks.get(new Long(0)));\n  DateTime startTime=DateTimes.of(\"1970-01-01T00:00:00.000Z\");\n  Interval expectedInterval=new Interval(startTime,DateTimes.of(\"1971-01-01T00:00:00.000Z\"));\n  Assert.assertEquals(0,hydrants.get(0).getCount());\n  Assert.assertEquals(expectedInterval,hydrants.get(0).getSegmentDataInterval());\n  Assert.assertEquals(2,hydrants.get(1).getCount());\n  Assert.assertEquals(expectedInterval,hydrants.get(1).getSegmentDataInterval());\n  Assert.assertEquals(4,hydrants.get(2).getCount());\n  Assert.assertEquals(expectedInterval,hydrants.get(2).getSegmentDataInterval());\n  FileUtils.deleteDirectory(new File(persistDir,\"0\"));\n  FileUtils.deleteDirectory(new File(persistDir,\"2\"));\n  FileUtils.deleteDirectory(new File(persistDir,\"4\"));\n  RealtimePlumber restoredPlumber2=(RealtimePlumber)realtimePlumberSchool.findPlumber(schema2,tuningConfig,metrics);\n  restoredPlumber2.bootstrapSinksFromDisk();\n  Assert.assertEquals(0,restoredPlumber2.getSinks().size());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 457,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 437,
        "startColumnNumber" : 4,
        "endLineNumber" : 437,
        "endColumnNumber" : 66
      },
      "nodeContext" : "DateTime startTime=DateTimes.of(\"1970-01-01T00:00:00.000Z\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 6,
    "type" : "org.apache.druid.java.util.common.DateTime"
  } ],
  "positionList" : [ {
    "charLength" : 40,
    "startLineNumber" : 437,
    "startColumnNumber" : 25,
    "endLineNumber" : 437,
    "endColumnNumber" : 65
  } ],
  "layoutRelationDataList" : [ ]
}