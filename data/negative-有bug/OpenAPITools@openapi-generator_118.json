{
  "id" : 118,
  "expression" : "codegen.reservedWords()",
  "projectName" : "OpenAPITools@openapi-generator",
  "commitID" : "9e1972bb1d3a4f1e3f47c87613f4050feada0146",
  "filePath" : "/modules/openapi-generator/src/test/java/org/openapitools/codegen/dart/dio/DartDioClientCodegenTest.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "codegen.reservedWords()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 79,
      "startColumnNumber" : 28,
      "endLineNumber" : 79,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 79,
        "startColumnNumber" : 28,
        "endLineNumber" : 79,
        "endColumnNumber" : 58
      },
      "nodeContext" : "codegen.reservedWords().size()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 79,
        "endColumnNumber" : 85
      },
      "nodeContext" : "Assert.assertEquals(codegen.reservedWords().size(),reservedWordsList.size())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 79,
        "endColumnNumber" : 86
      },
      "nodeContext" : "Assert.assertEquals(codegen.reservedWords().size(),reservedWordsList.size());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1110,
        "startLineNumber" : 65,
        "startColumnNumber" : 48,
        "endLineNumber" : 84,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final DartDioClientCodegen codegen=new DartDioClientCodegen();\n  List<String> reservedWordsList=new ArrayList<String>();\n  try {\n    BufferedReader reader=new BufferedReader(new InputStreamReader(new FileInputStream(\"src/main/resources/dart/dart-keywords.txt\"),StandardCharsets.UTF_8));\n    while (reader.ready()) {\n      reservedWordsList.add(reader.readLine());\n    }\n    reader.close();\n  }\n catch (  Exception e) {\n    String errorString=String.format(Locale.ROOT,\"Error reading dart keywords: %s\",e);\n    Assert.fail(errorString,e);\n  }\n  Assert.assertTrue(reservedWordsList.size() > 20);\n  Assert.assertEquals(codegen.reservedWords().size(),reservedWordsList.size());\n  for (  String keyword : reservedWordsList) {\n    Assert.assertTrue(codegen.reservedWords().contains(keyword.toLowerCase(Locale.ROOT)),String.format(Locale.ROOT,\"%s, part of %s, was not found in %s\",keyword,reservedWordsList,codegen.reservedWords().toString()));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 142,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1164,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 84,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testKeywords() throws Exception {\n  final DartDioClientCodegen codegen=new DartDioClientCodegen();\n  List<String> reservedWordsList=new ArrayList<String>();\n  try {\n    BufferedReader reader=new BufferedReader(new InputStreamReader(new FileInputStream(\"src/main/resources/dart/dart-keywords.txt\"),StandardCharsets.UTF_8));\n    while (reader.ready()) {\n      reservedWordsList.add(reader.readLine());\n    }\n    reader.close();\n  }\n catch (  Exception e) {\n    String errorString=String.format(Locale.ROOT,\"Error reading dart keywords: %s\",e);\n    Assert.fail(errorString,e);\n  }\n  Assert.assertTrue(reservedWordsList.size() > 20);\n  Assert.assertEquals(codegen.reservedWords().size(),reservedWordsList.size());\n  for (  String keyword : reservedWordsList) {\n    Assert.assertTrue(codegen.reservedWords().contains(keyword.toLowerCase(Locale.ROOT)),String.format(Locale.ROOT,\"%s, part of %s, was not found in %s\",keyword,reservedWordsList,codegen.reservedWords().toString()));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 150,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 79,
        "endColumnNumber" : 86
      },
      "nodeContext" : "Assert.assertEquals(codegen.reservedWords().size(),reservedWordsList.size());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "java.util.Set<java.lang.String>"
  }, {
    "nodeContext" : "codegen.reservedWords()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 82,
      "startColumnNumber" : 30,
      "endLineNumber" : 82,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 82,
        "startColumnNumber" : 30,
        "endLineNumber" : 82,
        "endColumnNumber" : 96
      },
      "nodeContext" : "codegen.reservedWords().contains(keyword.toLowerCase(Locale.ROOT))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 216,
        "startLineNumber" : 82,
        "startColumnNumber" : 12,
        "endLineNumber" : 82,
        "endColumnNumber" : 228
      },
      "nodeContext" : "Assert.assertTrue(codegen.reservedWords().contains(keyword.toLowerCase(Locale.ROOT)),String.format(Locale.ROOT,\"%s, part of %s, was not found in %s\",keyword,reservedWordsList,codegen.reservedWords().toString()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 28,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 217,
        "startLineNumber" : 82,
        "startColumnNumber" : 12,
        "endLineNumber" : 82,
        "endColumnNumber" : 229
      },
      "nodeContext" : "Assert.assertTrue(codegen.reservedWords().contains(keyword.toLowerCase(Locale.ROOT)),String.format(Locale.ROOT,\"%s, part of %s, was not found in %s\",keyword,reservedWordsList,codegen.reservedWords().toString()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 29,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 295,
        "startLineNumber" : 80,
        "startColumnNumber" : 48,
        "endLineNumber" : 83,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Assert.assertTrue(codegen.reservedWords().contains(keyword.toLowerCase(Locale.ROOT)),String.format(Locale.ROOT,\"%s, part of %s, was not found in %s\",keyword,reservedWordsList,codegen.reservedWords().toString()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 30,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 335,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 83,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (String keyword : reservedWordsList) {\n  Assert.assertTrue(codegen.reservedWords().contains(keyword.toLowerCase(Locale.ROOT)),String.format(Locale.ROOT,\"%s, part of %s, was not found in %s\",keyword,reservedWordsList,codegen.reservedWords().toString()));\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 36,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1110,
        "startLineNumber" : 65,
        "startColumnNumber" : 48,
        "endLineNumber" : 84,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final DartDioClientCodegen codegen=new DartDioClientCodegen();\n  List<String> reservedWordsList=new ArrayList<String>();\n  try {\n    BufferedReader reader=new BufferedReader(new InputStreamReader(new FileInputStream(\"src/main/resources/dart/dart-keywords.txt\"),StandardCharsets.UTF_8));\n    while (reader.ready()) {\n      reservedWordsList.add(reader.readLine());\n    }\n    reader.close();\n  }\n catch (  Exception e) {\n    String errorString=String.format(Locale.ROOT,\"Error reading dart keywords: %s\",e);\n    Assert.fail(errorString,e);\n  }\n  Assert.assertTrue(reservedWordsList.size() > 20);\n  Assert.assertEquals(codegen.reservedWords().size(),reservedWordsList.size());\n  for (  String keyword : reservedWordsList) {\n    Assert.assertTrue(codegen.reservedWords().contains(keyword.toLowerCase(Locale.ROOT)),String.format(Locale.ROOT,\"%s, part of %s, was not found in %s\",keyword,reservedWordsList,codegen.reservedWords().toString()));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 142,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1164,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 84,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testKeywords() throws Exception {\n  final DartDioClientCodegen codegen=new DartDioClientCodegen();\n  List<String> reservedWordsList=new ArrayList<String>();\n  try {\n    BufferedReader reader=new BufferedReader(new InputStreamReader(new FileInputStream(\"src/main/resources/dart/dart-keywords.txt\"),StandardCharsets.UTF_8));\n    while (reader.ready()) {\n      reservedWordsList.add(reader.readLine());\n    }\n    reader.close();\n  }\n catch (  Exception e) {\n    String errorString=String.format(Locale.ROOT,\"Error reading dart keywords: %s\",e);\n    Assert.fail(errorString,e);\n  }\n  Assert.assertTrue(reservedWordsList.size() > 20);\n  Assert.assertEquals(codegen.reservedWords().size(),reservedWordsList.size());\n  for (  String keyword : reservedWordsList) {\n    Assert.assertTrue(codegen.reservedWords().contains(keyword.toLowerCase(Locale.ROOT)),String.format(Locale.ROOT,\"%s, part of %s, was not found in %s\",keyword,reservedWordsList,codegen.reservedWords().toString()));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 150,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 217,
        "startLineNumber" : 82,
        "startColumnNumber" : 12,
        "endLineNumber" : 82,
        "endColumnNumber" : 229
      },
      "nodeContext" : "Assert.assertTrue(codegen.reservedWords().contains(keyword.toLowerCase(Locale.ROOT)),String.format(Locale.ROOT,\"%s, part of %s, was not found in %s\",keyword,reservedWordsList,codegen.reservedWords().toString()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 29,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "java.util.Set<java.lang.String>"
  }, {
    "nodeContext" : "codegen.reservedWords()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 82,
      "startColumnNumber" : 192,
      "endLineNumber" : 82,
      "endColumnNumber" : 215
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 82,
        "startColumnNumber" : 192,
        "endLineNumber" : 82,
        "endColumnNumber" : 226
      },
      "nodeContext" : "codegen.reservedWords().toString()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 129,
        "startLineNumber" : 82,
        "startColumnNumber" : 98,
        "endLineNumber" : 82,
        "endColumnNumber" : 227
      },
      "nodeContext" : "String.format(Locale.ROOT,\"%s, part of %s, was not found in %s\",keyword,reservedWordsList,codegen.reservedWords().toString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 216,
        "startLineNumber" : 82,
        "startColumnNumber" : 12,
        "endLineNumber" : 82,
        "endColumnNumber" : 228
      },
      "nodeContext" : "Assert.assertTrue(codegen.reservedWords().contains(keyword.toLowerCase(Locale.ROOT)),String.format(Locale.ROOT,\"%s, part of %s, was not found in %s\",keyword,reservedWordsList,codegen.reservedWords().toString()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 28,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 217,
        "startLineNumber" : 82,
        "startColumnNumber" : 12,
        "endLineNumber" : 82,
        "endColumnNumber" : 229
      },
      "nodeContext" : "Assert.assertTrue(codegen.reservedWords().contains(keyword.toLowerCase(Locale.ROOT)),String.format(Locale.ROOT,\"%s, part of %s, was not found in %s\",keyword,reservedWordsList,codegen.reservedWords().toString()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 29,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 295,
        "startLineNumber" : 80,
        "startColumnNumber" : 48,
        "endLineNumber" : 83,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Assert.assertTrue(codegen.reservedWords().contains(keyword.toLowerCase(Locale.ROOT)),String.format(Locale.ROOT,\"%s, part of %s, was not found in %s\",keyword,reservedWordsList,codegen.reservedWords().toString()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 30,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 335,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 83,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (String keyword : reservedWordsList) {\n  Assert.assertTrue(codegen.reservedWords().contains(keyword.toLowerCase(Locale.ROOT)),String.format(Locale.ROOT,\"%s, part of %s, was not found in %s\",keyword,reservedWordsList,codegen.reservedWords().toString()));\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 36,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1110,
        "startLineNumber" : 65,
        "startColumnNumber" : 48,
        "endLineNumber" : 84,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final DartDioClientCodegen codegen=new DartDioClientCodegen();\n  List<String> reservedWordsList=new ArrayList<String>();\n  try {\n    BufferedReader reader=new BufferedReader(new InputStreamReader(new FileInputStream(\"src/main/resources/dart/dart-keywords.txt\"),StandardCharsets.UTF_8));\n    while (reader.ready()) {\n      reservedWordsList.add(reader.readLine());\n    }\n    reader.close();\n  }\n catch (  Exception e) {\n    String errorString=String.format(Locale.ROOT,\"Error reading dart keywords: %s\",e);\n    Assert.fail(errorString,e);\n  }\n  Assert.assertTrue(reservedWordsList.size() > 20);\n  Assert.assertEquals(codegen.reservedWords().size(),reservedWordsList.size());\n  for (  String keyword : reservedWordsList) {\n    Assert.assertTrue(codegen.reservedWords().contains(keyword.toLowerCase(Locale.ROOT)),String.format(Locale.ROOT,\"%s, part of %s, was not found in %s\",keyword,reservedWordsList,codegen.reservedWords().toString()));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 142,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1164,
        "startLineNumber" : 64,
        "startColumnNumber" : 4,
        "endLineNumber" : 84,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testKeywords() throws Exception {\n  final DartDioClientCodegen codegen=new DartDioClientCodegen();\n  List<String> reservedWordsList=new ArrayList<String>();\n  try {\n    BufferedReader reader=new BufferedReader(new InputStreamReader(new FileInputStream(\"src/main/resources/dart/dart-keywords.txt\"),StandardCharsets.UTF_8));\n    while (reader.ready()) {\n      reservedWordsList.add(reader.readLine());\n    }\n    reader.close();\n  }\n catch (  Exception e) {\n    String errorString=String.format(Locale.ROOT,\"Error reading dart keywords: %s\",e);\n    Assert.fail(errorString,e);\n  }\n  Assert.assertTrue(reservedWordsList.size() > 20);\n  Assert.assertEquals(codegen.reservedWords().size(),reservedWordsList.size());\n  for (  String keyword : reservedWordsList) {\n    Assert.assertTrue(codegen.reservedWords().contains(keyword.toLowerCase(Locale.ROOT)),String.format(Locale.ROOT,\"%s, part of %s, was not found in %s\",keyword,reservedWordsList,codegen.reservedWords().toString()));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 150,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 217,
        "startLineNumber" : 82,
        "startColumnNumber" : 12,
        "endLineNumber" : 82,
        "endColumnNumber" : 229
      },
      "nodeContext" : "Assert.assertTrue(codegen.reservedWords().contains(keyword.toLowerCase(Locale.ROOT)),String.format(Locale.ROOT,\"%s, part of %s, was not found in %s\",keyword,reservedWordsList,codegen.reservedWords().toString()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 29,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "java.util.Set<java.lang.String>"
  } ],
  "positionList" : [ {
    "charLength" : 23,
    "startLineNumber" : 79,
    "startColumnNumber" : 28,
    "endLineNumber" : 79,
    "endColumnNumber" : 51
  }, {
    "charLength" : 23,
    "startLineNumber" : 82,
    "startColumnNumber" : 30,
    "endLineNumber" : 82,
    "endColumnNumber" : 53
  }, {
    "charLength" : 23,
    "startLineNumber" : 82,
    "startColumnNumber" : 192,
    "endLineNumber" : 82,
    "endColumnNumber" : 215
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  } ]
}