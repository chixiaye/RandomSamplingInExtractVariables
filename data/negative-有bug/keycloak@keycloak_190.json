{
  "id" : 190,
  "expression" : "\"Single Value Attribute\"",
  "projectName" : "keycloak@keycloak",
  "commitID" : "aacae9b9acb0fbedc49d4f88c9fbd7aa11922dce",
  "filePath" : "/services/src/main/java/org/keycloak/protocol/saml/mappers/ScriptBasedMapper.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Single Value Attribute\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 24,
      "startLineNumber" : 64,
      "startColumnNumber" : 26,
      "endLineNumber" : 64,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 64,
        "startColumnNumber" : 8,
        "endLineNumber" : 64,
        "endColumnNumber" : 51
      },
      "nodeContext" : "property.setLabel(\"Single Value Attribute\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 64,
        "startColumnNumber" : 8,
        "endLineNumber" : 64,
        "endColumnNumber" : 52
      },
      "nodeContext" : "property.setLabel(\"Single Value Attribute\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Initializer,body]",
      "nodePosition" : {
        "charLength" : 2244,
        "startLineNumber" : 34,
        "startColumnNumber" : 11,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ProviderConfigProperty property=new ProviderConfigProperty();\n  property.setType(ProviderConfigProperty.SCRIPT_TYPE);\n  property.setLabel(ProviderConfigProperty.SCRIPT_TYPE);\n  property.setName(ProviderConfigProperty.SCRIPT_TYPE);\n  property.setHelpText(\"Script to compute the attribute value. \\n\" + \" Available variables: \\n\" + \" 'user' - the current user.\\n\"+ \" 'realm' - the current realm.\\n\"+ \" 'clientSession' - the current clientSession.\\n\"+ \" 'userSession' - the current userSession.\\n\"+ \" 'keycloakSession' - the current keycloakSession.\\n\\n\"+ \"To use: the last statement is the value returned to Java.\\n\"+ \"The result will be tested if it can be iterated upon (e.g. an array or a collection).\\n\"+ \" - If it is not, toString() will be called on the object to get the value of the attribute\\n\"+ \" - If it is, toString() will be called on all elements to return multiple attribute values.\\n\");\n  property.setDefaultValue(\"/**\\n\" + \" * Available variables: \\n\" + \" * user - the current user\\n\"+ \" * realm - the current realm\\n\"+ \" * clientSession - the current clientSession\\n\"+ \" * userSession - the current userSession\\n\"+ \" * keycloakSession - the current keycloakSession\\n\"+ \" */\\n\\n\\n//insert your code here...\");\n  configProperties.add(property);\n  property=new ProviderConfigProperty();\n  property.setName(SINGLE_VALUE_ATTRIBUTE);\n  property.setLabel(\"Single Value Attribute\");\n  property.setType(ProviderConfigProperty.BOOLEAN_TYPE);\n  property.setDefaultValue(\"true\");\n  property.setHelpText(\"If true, all values will be stored under one attribute with multiple attribute values.\");\n  configProperties.add(property);\n  AttributeStatementHelper.setConfigProperties(configProperties);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 107,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2251,
        "startLineNumber" : 34,
        "startColumnNumber" : 4,
        "endLineNumber" : 70,
        "endColumnNumber" : 5
      },
      "nodeContext" : "static {\n  ProviderConfigProperty property=new ProviderConfigProperty();\n  property.setType(ProviderConfigProperty.SCRIPT_TYPE);\n  property.setLabel(ProviderConfigProperty.SCRIPT_TYPE);\n  property.setName(ProviderConfigProperty.SCRIPT_TYPE);\n  property.setHelpText(\"Script to compute the attribute value. \\n\" + \" Available variables: \\n\" + \" 'user' - the current user.\\n\"+ \" 'realm' - the current realm.\\n\"+ \" 'clientSession' - the current clientSession.\\n\"+ \" 'userSession' - the current userSession.\\n\"+ \" 'keycloakSession' - the current keycloakSession.\\n\\n\"+ \"To use: the last statement is the value returned to Java.\\n\"+ \"The result will be tested if it can be iterated upon (e.g. an array or a collection).\\n\"+ \" - If it is not, toString() will be called on the object to get the value of the attribute\\n\"+ \" - If it is, toString() will be called on all elements to return multiple attribute values.\\n\");\n  property.setDefaultValue(\"/**\\n\" + \" * Available variables: \\n\" + \" * user - the current user\\n\"+ \" * realm - the current realm\\n\"+ \" * clientSession - the current clientSession\\n\"+ \" * userSession - the current userSession\\n\"+ \" * keycloakSession - the current keycloakSession\\n\"+ \" */\\n\\n\\n//insert your code here...\");\n  configProperties.add(property);\n  property=new ProviderConfigProperty();\n  property.setName(SINGLE_VALUE_ATTRIBUTE);\n  property.setLabel(\"Single Value Attribute\");\n  property.setType(ProviderConfigProperty.BOOLEAN_TYPE);\n  property.setDefaultValue(\"true\");\n  property.setHelpText(\"If true, all values will be stored under one attribute with multiple attribute values.\");\n  configProperties.add(property);\n  AttributeStatementHelper.setConfigProperties(configProperties);\n}\n",
      "nodeType" : "Initializer",
      "astNodeNumber" : 109,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 64,
        "startColumnNumber" : 8,
        "endLineNumber" : 64,
        "endColumnNumber" : 52
      },
      "nodeContext" : "property.setLabel(\"Single Value Attribute\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 24,
    "startLineNumber" : 64,
    "startColumnNumber" : 26,
    "endLineNumber" : 64,
    "endColumnNumber" : 50
  } ],
  "layoutRelationDataList" : [ ]
}