{
  "id" : 318,
  "expression" : "exporters",
  "projectName" : "SeleniumHQ@selenium",
  "commitID" : "c146621f39dbec94114835aa1f6af6a0e1fa4cd0",
  "filePath" : "/java/server/src/org/openqa/selenium/grid/log/LoggingOptions.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "exporters",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 142,
      "startColumnNumber" : 4,
      "endLineNumber" : 142,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 1634,
        "startLineNumber" : 142,
        "startColumnNumber" : 4,
        "endLineNumber" : 188,
        "endColumnNumber" : 15
      },
      "nodeContext" : "exporters.add(SimpleSpanProcessor.builder(new SpanExporter(){\n  @Override public CompletableResultCode export(  Collection<SpanData> spans){\n    spans.forEach(span -> {\n      LOG.fine(String.valueOf(span));\n      String traceId=span.getTraceId();\n      String spanId=span.getSpanId();\n      SpanData.Status status=span.getStatus();\n      List<Event> eventList=span.getEvents();\n      eventList.forEach(event -> {\n        Map<String,Object> map=new HashMap<>();\n        map.put(\"eventTime\",event.getEpochNanos());\n        map.put(\"traceId\",traceId);\n        map.put(\"spanId\",spanId);\n        map.put(\"spanKind\",span.getKind().toString());\n        map.put(\"eventName\",event.getName());\n        Attributes attributes=event.getAttributes();\n        Map<String,Object> attributeMap=new HashMap<>();\n        attributes.forEach((attributeKey,value) -> attributeMap.put(attributeKey.getKey(),value));\n        map.put(\"attributes\",attributeMap);\n        String jsonString=getJsonString(map);\n        if (status.isOk()) {\n          LOG.log(Level.FINE,jsonString);\n        }\n else {\n          LOG.log(Level.WARNING,jsonString);\n        }\n      }\n);\n    }\n);\n    return CompletableResultCode.ofSuccess();\n  }\n  @Override public CompletableResultCode flush(){\n    return CompletableResultCode.ofSuccess();\n  }\n  @Override public CompletableResultCode shutdown(){\n    return CompletableResultCode.ofSuccess();\n  }\n}\n).build())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 242,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1635,
        "startLineNumber" : 142,
        "startColumnNumber" : 4,
        "endLineNumber" : 188,
        "endColumnNumber" : 16
      },
      "nodeContext" : "exporters.add(SimpleSpanProcessor.builder(new SpanExporter(){\n  @Override public CompletableResultCode export(  Collection<SpanData> spans){\n    spans.forEach(span -> {\n      LOG.fine(String.valueOf(span));\n      String traceId=span.getTraceId();\n      String spanId=span.getSpanId();\n      SpanData.Status status=span.getStatus();\n      List<Event> eventList=span.getEvents();\n      eventList.forEach(event -> {\n        Map<String,Object> map=new HashMap<>();\n        map.put(\"eventTime\",event.getEpochNanos());\n        map.put(\"traceId\",traceId);\n        map.put(\"spanId\",spanId);\n        map.put(\"spanKind\",span.getKind().toString());\n        map.put(\"eventName\",event.getName());\n        Attributes attributes=event.getAttributes();\n        Map<String,Object> attributeMap=new HashMap<>();\n        attributes.forEach((attributeKey,value) -> attributeMap.put(attributeKey.getKey(),value));\n        map.put(\"attributes\",attributeMap);\n        String jsonString=getJsonString(map);\n        if (status.isOk()) {\n          LOG.log(Level.FINE,jsonString);\n        }\n else {\n          LOG.log(Level.WARNING,jsonString);\n        }\n      }\n);\n    }\n);\n    return CompletableResultCode.ofSuccess();\n  }\n  @Override public CompletableResultCode flush(){\n    return CompletableResultCode.ofSuccess();\n  }\n  @Override public CompletableResultCode shutdown(){\n    return CompletableResultCode.ofSuccess();\n  }\n}\n).build());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 243,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2669,
        "startLineNumber" : 137,
        "startColumnNumber" : 32,
        "endLineNumber" : 206,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  LOG.info(\"Using OpenTelemetry for tracing\");\n  TracerSdkManagement tracerManagement=OpenTelemetrySdk.getGlobalTracerManagement();\n  List<SpanProcessor> exporters=new LinkedList<>();\n  exporters.add(SimpleSpanProcessor.builder(new SpanExporter(){\n    @Override public CompletableResultCode export(    Collection<SpanData> spans){\n      spans.forEach(span -> {\n        LOG.fine(String.valueOf(span));\n        String traceId=span.getTraceId();\n        String spanId=span.getSpanId();\n        SpanData.Status status=span.getStatus();\n        List<Event> eventList=span.getEvents();\n        eventList.forEach(event -> {\n          Map<String,Object> map=new HashMap<>();\n          map.put(\"eventTime\",event.getEpochNanos());\n          map.put(\"traceId\",traceId);\n          map.put(\"spanId\",spanId);\n          map.put(\"spanKind\",span.getKind().toString());\n          map.put(\"eventName\",event.getName());\n          Attributes attributes=event.getAttributes();\n          Map<String,Object> attributeMap=new HashMap<>();\n          attributes.forEach((attributeKey,value) -> attributeMap.put(attributeKey.getKey(),value));\n          map.put(\"attributes\",attributeMap);\n          String jsonString=getJsonString(map);\n          if (status.isOk()) {\n            LOG.log(Level.FINE,jsonString);\n          }\n else {\n            LOG.log(Level.WARNING,jsonString);\n          }\n        }\n);\n      }\n);\n      return CompletableResultCode.ofSuccess();\n    }\n    @Override public CompletableResultCode flush(){\n      return CompletableResultCode.ofSuccess();\n    }\n    @Override public CompletableResultCode shutdown(){\n      return CompletableResultCode.ofSuccess();\n    }\n  }\n).build());\n  Optional<SpanExporter> maybeJaeger=JaegerTracing.findJaegerExporter();\n  maybeJaeger.ifPresent(exporter -> exporters.add(SimpleSpanProcessor.builder(exporter).build()));\n  tracerManagement.addSpanProcessor(SpanProcessor.composite(exporters));\n  ContextPropagators propagators=ContextPropagators.create(TextMapPropagator.composite(W3CTraceContextPropagator.getInstance()));\n  return new OpenTelemetryTracer(OpenTelemetry.getGlobalTracer(\"default\"),propagators.getTextMapPropagator());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 329,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2699,
        "startLineNumber" : 137,
        "startColumnNumber" : 2,
        "endLineNumber" : 206,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private Tracer createTracer(){\n  LOG.info(\"Using OpenTelemetry for tracing\");\n  TracerSdkManagement tracerManagement=OpenTelemetrySdk.getGlobalTracerManagement();\n  List<SpanProcessor> exporters=new LinkedList<>();\n  exporters.add(SimpleSpanProcessor.builder(new SpanExporter(){\n    @Override public CompletableResultCode export(    Collection<SpanData> spans){\n      spans.forEach(span -> {\n        LOG.fine(String.valueOf(span));\n        String traceId=span.getTraceId();\n        String spanId=span.getSpanId();\n        SpanData.Status status=span.getStatus();\n        List<Event> eventList=span.getEvents();\n        eventList.forEach(event -> {\n          Map<String,Object> map=new HashMap<>();\n          map.put(\"eventTime\",event.getEpochNanos());\n          map.put(\"traceId\",traceId);\n          map.put(\"spanId\",spanId);\n          map.put(\"spanKind\",span.getKind().toString());\n          map.put(\"eventName\",event.getName());\n          Attributes attributes=event.getAttributes();\n          Map<String,Object> attributeMap=new HashMap<>();\n          attributes.forEach((attributeKey,value) -> attributeMap.put(attributeKey.getKey(),value));\n          map.put(\"attributes\",attributeMap);\n          String jsonString=getJsonString(map);\n          if (status.isOk()) {\n            LOG.log(Level.FINE,jsonString);\n          }\n else {\n            LOG.log(Level.WARNING,jsonString);\n          }\n        }\n);\n      }\n);\n      return CompletableResultCode.ofSuccess();\n    }\n    @Override public CompletableResultCode flush(){\n      return CompletableResultCode.ofSuccess();\n    }\n    @Override public CompletableResultCode shutdown(){\n      return CompletableResultCode.ofSuccess();\n    }\n  }\n).build());\n  Optional<SpanExporter> maybeJaeger=JaegerTracing.findJaegerExporter();\n  maybeJaeger.ifPresent(exporter -> exporters.add(SimpleSpanProcessor.builder(exporter).build()));\n  tracerManagement.addSpanProcessor(SpanProcessor.composite(exporters));\n  ContextPropagators propagators=ContextPropagators.create(TextMapPropagator.composite(W3CTraceContextPropagator.getInstance()));\n  return new OpenTelemetryTracer(OpenTelemetry.getGlobalTracer(\"default\"),propagators.getTextMapPropagator());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 334,
      "astHeight" : 24
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 1634,
        "startLineNumber" : 142,
        "startColumnNumber" : 4,
        "endLineNumber" : 188,
        "endColumnNumber" : 15
      },
      "nodeContext" : "exporters.add(SimpleSpanProcessor.builder(new SpanExporter(){\n  @Override public CompletableResultCode export(  Collection<SpanData> spans){\n    spans.forEach(span -> {\n      LOG.fine(String.valueOf(span));\n      String traceId=span.getTraceId();\n      String spanId=span.getSpanId();\n      SpanData.Status status=span.getStatus();\n      List<Event> eventList=span.getEvents();\n      eventList.forEach(event -> {\n        Map<String,Object> map=new HashMap<>();\n        map.put(\"eventTime\",event.getEpochNanos());\n        map.put(\"traceId\",traceId);\n        map.put(\"spanId\",spanId);\n        map.put(\"spanKind\",span.getKind().toString());\n        map.put(\"eventName\",event.getName());\n        Attributes attributes=event.getAttributes();\n        Map<String,Object> attributeMap=new HashMap<>();\n        attributes.forEach((attributeKey,value) -> attributeMap.put(attributeKey.getKey(),value));\n        map.put(\"attributes\",attributeMap);\n        String jsonString=getJsonString(map);\n        if (status.isOk()) {\n          LOG.log(Level.FINE,jsonString);\n        }\n else {\n          LOG.log(Level.WARNING,jsonString);\n        }\n      }\n);\n    }\n);\n    return CompletableResultCode.ofSuccess();\n  }\n  @Override public CompletableResultCode flush(){\n    return CompletableResultCode.ofSuccess();\n  }\n  @Override public CompletableResultCode shutdown(){\n    return CompletableResultCode.ofSuccess();\n  }\n}\n).build())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 242,
      "astHeight" : 21
    },
    "tokenLength" : 1,
    "type" : "java.util.List<org.openqa.selenium.grid.log.SpanProcessor>"
  }, {
    "nodeContext" : "exporters",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 196,
      "startColumnNumber" : 62,
      "endLineNumber" : 196,
      "endColumnNumber" : 71
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 196,
        "startColumnNumber" : 38,
        "endLineNumber" : 196,
        "endColumnNumber" : 72
      },
      "nodeContext" : "SpanProcessor.composite(exporters)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 196,
        "startColumnNumber" : 4,
        "endLineNumber" : 196,
        "endColumnNumber" : 73
      },
      "nodeContext" : "tracerManagement.addSpanProcessor(SpanProcessor.composite(exporters))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 196,
        "startColumnNumber" : 4,
        "endLineNumber" : 196,
        "endColumnNumber" : 74
      },
      "nodeContext" : "tracerManagement.addSpanProcessor(SpanProcessor.composite(exporters));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2669,
        "startLineNumber" : 137,
        "startColumnNumber" : 32,
        "endLineNumber" : 206,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  LOG.info(\"Using OpenTelemetry for tracing\");\n  TracerSdkManagement tracerManagement=OpenTelemetrySdk.getGlobalTracerManagement();\n  List<SpanProcessor> exporters=new LinkedList<>();\n  exporters.add(SimpleSpanProcessor.builder(new SpanExporter(){\n    @Override public CompletableResultCode export(    Collection<SpanData> spans){\n      spans.forEach(span -> {\n        LOG.fine(String.valueOf(span));\n        String traceId=span.getTraceId();\n        String spanId=span.getSpanId();\n        SpanData.Status status=span.getStatus();\n        List<Event> eventList=span.getEvents();\n        eventList.forEach(event -> {\n          Map<String,Object> map=new HashMap<>();\n          map.put(\"eventTime\",event.getEpochNanos());\n          map.put(\"traceId\",traceId);\n          map.put(\"spanId\",spanId);\n          map.put(\"spanKind\",span.getKind().toString());\n          map.put(\"eventName\",event.getName());\n          Attributes attributes=event.getAttributes();\n          Map<String,Object> attributeMap=new HashMap<>();\n          attributes.forEach((attributeKey,value) -> attributeMap.put(attributeKey.getKey(),value));\n          map.put(\"attributes\",attributeMap);\n          String jsonString=getJsonString(map);\n          if (status.isOk()) {\n            LOG.log(Level.FINE,jsonString);\n          }\n else {\n            LOG.log(Level.WARNING,jsonString);\n          }\n        }\n);\n      }\n);\n      return CompletableResultCode.ofSuccess();\n    }\n    @Override public CompletableResultCode flush(){\n      return CompletableResultCode.ofSuccess();\n    }\n    @Override public CompletableResultCode shutdown(){\n      return CompletableResultCode.ofSuccess();\n    }\n  }\n).build());\n  Optional<SpanExporter> maybeJaeger=JaegerTracing.findJaegerExporter();\n  maybeJaeger.ifPresent(exporter -> exporters.add(SimpleSpanProcessor.builder(exporter).build()));\n  tracerManagement.addSpanProcessor(SpanProcessor.composite(exporters));\n  ContextPropagators propagators=ContextPropagators.create(TextMapPropagator.composite(W3CTraceContextPropagator.getInstance()));\n  return new OpenTelemetryTracer(OpenTelemetry.getGlobalTracer(\"default\"),propagators.getTextMapPropagator());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 329,
      "astHeight" : 23
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2699,
        "startLineNumber" : 137,
        "startColumnNumber" : 2,
        "endLineNumber" : 206,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private Tracer createTracer(){\n  LOG.info(\"Using OpenTelemetry for tracing\");\n  TracerSdkManagement tracerManagement=OpenTelemetrySdk.getGlobalTracerManagement();\n  List<SpanProcessor> exporters=new LinkedList<>();\n  exporters.add(SimpleSpanProcessor.builder(new SpanExporter(){\n    @Override public CompletableResultCode export(    Collection<SpanData> spans){\n      spans.forEach(span -> {\n        LOG.fine(String.valueOf(span));\n        String traceId=span.getTraceId();\n        String spanId=span.getSpanId();\n        SpanData.Status status=span.getStatus();\n        List<Event> eventList=span.getEvents();\n        eventList.forEach(event -> {\n          Map<String,Object> map=new HashMap<>();\n          map.put(\"eventTime\",event.getEpochNanos());\n          map.put(\"traceId\",traceId);\n          map.put(\"spanId\",spanId);\n          map.put(\"spanKind\",span.getKind().toString());\n          map.put(\"eventName\",event.getName());\n          Attributes attributes=event.getAttributes();\n          Map<String,Object> attributeMap=new HashMap<>();\n          attributes.forEach((attributeKey,value) -> attributeMap.put(attributeKey.getKey(),value));\n          map.put(\"attributes\",attributeMap);\n          String jsonString=getJsonString(map);\n          if (status.isOk()) {\n            LOG.log(Level.FINE,jsonString);\n          }\n else {\n            LOG.log(Level.WARNING,jsonString);\n          }\n        }\n);\n      }\n);\n      return CompletableResultCode.ofSuccess();\n    }\n    @Override public CompletableResultCode flush(){\n      return CompletableResultCode.ofSuccess();\n    }\n    @Override public CompletableResultCode shutdown(){\n      return CompletableResultCode.ofSuccess();\n    }\n  }\n).build());\n  Optional<SpanExporter> maybeJaeger=JaegerTracing.findJaegerExporter();\n  maybeJaeger.ifPresent(exporter -> exporters.add(SimpleSpanProcessor.builder(exporter).build()));\n  tracerManagement.addSpanProcessor(SpanProcessor.composite(exporters));\n  ContextPropagators propagators=ContextPropagators.create(TextMapPropagator.composite(W3CTraceContextPropagator.getInstance()));\n  return new OpenTelemetryTracer(OpenTelemetry.getGlobalTracer(\"default\"),propagators.getTextMapPropagator());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 334,
      "astHeight" : 24
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 196,
        "startColumnNumber" : 4,
        "endLineNumber" : 196,
        "endColumnNumber" : 74
      },
      "nodeContext" : "tracerManagement.addSpanProcessor(SpanProcessor.composite(exporters));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.List<org.openqa.selenium.grid.log.SpanProcessor>"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 142,
    "startColumnNumber" : 4,
    "endLineNumber" : 142,
    "endColumnNumber" : 13
  }, {
    "charLength" : 9,
    "startLineNumber" : 196,
    "startColumnNumber" : 62,
    "endLineNumber" : 196,
    "endColumnNumber" : 71
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}