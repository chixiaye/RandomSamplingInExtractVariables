{
  "id" : 178,
  "expression" : "totalServerBytesWritten / numReadsPerReadLoop + 10 > clientReadCompletes.get()",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/testsuite/src/main/java/io/netty/testsuite/transport/socket/SocketHalfClosedTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "totalServerBytesWritten / numReadsPerReadLoop + 10 > clientReadCompletes.get()",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 78,
      "startLineNumber" : 212,
      "startColumnNumber" : 23,
      "endLineNumber" : 212,
      "endColumnNumber" : 101
    },
    "astNodeNumber" : 9,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 170,
        "startLineNumber" : 212,
        "startColumnNumber" : 12,
        "endLineNumber" : 213,
        "endColumnNumber" : 78
      },
      "nodeContext" : "assertTrue(totalServerBytesWritten / numReadsPerReadLoop + 10 > clientReadCompletes.get(),\"too many read complete events: \" + clientReadCompletes.get())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 171,
        "startLineNumber" : 212,
        "startColumnNumber" : 12,
        "endLineNumber" : 213,
        "endColumnNumber" : 79
      },
      "nodeContext" : "assertTrue(totalServerBytesWritten / numReadsPerReadLoop + 10 > clientReadCompletes.get(),\"too many read complete events: \" + clientReadCompletes.get());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 3619,
        "startLineNumber" : 138,
        "startColumnNumber" : 12,
        "endLineNumber" : 214,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  cb.option(ChannelOption.ALLOW_HALF_CLOSURE,true).option(ChannelOption.AUTO_READ,autoRead).option(ChannelOption.RCVBUF_ALLOCATOR,new TestNumReadsRecvByteBufAllocator(numReadsPerReadLoop));\n  sb.childHandler(new ChannelInitializer<Channel>(){\n    @Override protected void initChannel(    Channel ch) throws Exception {\n      ch.pipeline().addLast(new ChannelHandler(){\n        @Override public void channelActive(        ChannelHandlerContext ctx) throws Exception {\n          ByteBuf buf=ctx.alloc().buffer(totalServerBytesWritten);\n          buf.writerIndex(buf.capacity());\n          ctx.writeAndFlush(buf).addListener((DuplexChannel)ctx.channel(),(c,f) -> c.shutdownOutput());\n          serverInitializedLatch.countDown();\n        }\n        @Override public void exceptionCaught(        ChannelHandlerContext ctx,        Throwable cause){\n          ctx.close();\n        }\n      }\n);\n    }\n  }\n);\n  cb.handler(new ChannelInitializer<Channel>(){\n    @Override protected void initChannel(    Channel ch) throws Exception {\n      ch.pipeline().addLast(new ChannelHandler(){\n        private int bytesRead;\n        @Override public void channelRead(        ChannelHandlerContext ctx,        Object msg){\n          ByteBuf buf=(ByteBuf)msg;\n          bytesRead+=buf.readableBytes();\n          buf.release();\n        }\n        @Override public void userEventTriggered(        ChannelHandlerContext ctx,        Object evt){\n          if (evt == ChannelInputShutdownEvent.INSTANCE) {\n            clientHalfClosedLatch.countDown();\n          }\n else           if (evt == ChannelInputShutdownReadComplete.INSTANCE) {\n            ctx.close();\n          }\n        }\n        @Override public void channelReadComplete(        ChannelHandlerContext ctx){\n          clientReadCompletes.incrementAndGet();\n          if (bytesRead == totalServerBytesWritten) {\n            clientReadAllDataLatch.countDown();\n          }\n          if (!autoRead) {\n            ctx.read();\n          }\n        }\n        @Override public void exceptionCaught(        ChannelHandlerContext ctx,        Throwable cause){\n          ctx.close();\n        }\n      }\n);\n    }\n  }\n);\n  serverChannel=sb.bind().get();\n  clientChannel=cb.connect(serverChannel.localAddress()).get();\n  clientChannel.read();\n  serverInitializedLatch.await();\n  clientReadAllDataLatch.await();\n  clientHalfClosedLatch.await();\n  assertTrue(totalServerBytesWritten / numReadsPerReadLoop + 10 > clientReadCompletes.get(),\"too many read complete events: \" + clientReadCompletes.get());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 346,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3852,
        "startLineNumber" : 138,
        "startColumnNumber" : 8,
        "endLineNumber" : 221,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  cb.option(ChannelOption.ALLOW_HALF_CLOSURE,true).option(ChannelOption.AUTO_READ,autoRead).option(ChannelOption.RCVBUF_ALLOCATOR,new TestNumReadsRecvByteBufAllocator(numReadsPerReadLoop));\n  sb.childHandler(new ChannelInitializer<Channel>(){\n    @Override protected void initChannel(    Channel ch) throws Exception {\n      ch.pipeline().addLast(new ChannelHandler(){\n        @Override public void channelActive(        ChannelHandlerContext ctx) throws Exception {\n          ByteBuf buf=ctx.alloc().buffer(totalServerBytesWritten);\n          buf.writerIndex(buf.capacity());\n          ctx.writeAndFlush(buf).addListener((DuplexChannel)ctx.channel(),(c,f) -> c.shutdownOutput());\n          serverInitializedLatch.countDown();\n        }\n        @Override public void exceptionCaught(        ChannelHandlerContext ctx,        Throwable cause){\n          ctx.close();\n        }\n      }\n);\n    }\n  }\n);\n  cb.handler(new ChannelInitializer<Channel>(){\n    @Override protected void initChannel(    Channel ch) throws Exception {\n      ch.pipeline().addLast(new ChannelHandler(){\n        private int bytesRead;\n        @Override public void channelRead(        ChannelHandlerContext ctx,        Object msg){\n          ByteBuf buf=(ByteBuf)msg;\n          bytesRead+=buf.readableBytes();\n          buf.release();\n        }\n        @Override public void userEventTriggered(        ChannelHandlerContext ctx,        Object evt){\n          if (evt == ChannelInputShutdownEvent.INSTANCE) {\n            clientHalfClosedLatch.countDown();\n          }\n else           if (evt == ChannelInputShutdownReadComplete.INSTANCE) {\n            ctx.close();\n          }\n        }\n        @Override public void channelReadComplete(        ChannelHandlerContext ctx){\n          clientReadCompletes.incrementAndGet();\n          if (bytesRead == totalServerBytesWritten) {\n            clientReadAllDataLatch.countDown();\n          }\n          if (!autoRead) {\n            ctx.read();\n          }\n        }\n        @Override public void exceptionCaught(        ChannelHandlerContext ctx,        Throwable cause){\n          ctx.close();\n        }\n      }\n);\n    }\n  }\n);\n  serverChannel=sb.bind().get();\n  clientChannel=cb.connect(serverChannel.localAddress()).get();\n  clientChannel.read();\n  serverInitializedLatch.await();\n  clientReadAllDataLatch.await();\n  clientHalfClosedLatch.await();\n  assertTrue(totalServerBytesWritten / numReadsPerReadLoop + 10 > clientReadCompletes.get(),\"too many read complete events: \" + clientReadCompletes.get());\n}\n  finally {\n  if (clientChannel != null) {\n    clientChannel.close().sync();\n  }\n  if (serverChannel != null) {\n    serverChannel.close().sync();\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 370,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4353,
        "startLineNumber" : 129,
        "startColumnNumber" : 107,
        "endLineNumber" : 222,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final int totalServerBytesWritten=1024 * 16;\n  final int numReadsPerReadLoop=2;\n  final CountDownLatch serverInitializedLatch=new CountDownLatch(1);\n  final CountDownLatch clientReadAllDataLatch=new CountDownLatch(1);\n  final CountDownLatch clientHalfClosedLatch=new CountDownLatch(1);\n  final AtomicInteger clientReadCompletes=new AtomicInteger();\n  Channel serverChannel=null;\n  Channel clientChannel=null;\n  try {\n    cb.option(ChannelOption.ALLOW_HALF_CLOSURE,true).option(ChannelOption.AUTO_READ,autoRead).option(ChannelOption.RCVBUF_ALLOCATOR,new TestNumReadsRecvByteBufAllocator(numReadsPerReadLoop));\n    sb.childHandler(new ChannelInitializer<Channel>(){\n      @Override protected void initChannel(      Channel ch) throws Exception {\n        ch.pipeline().addLast(new ChannelHandler(){\n          @Override public void channelActive(          ChannelHandlerContext ctx) throws Exception {\n            ByteBuf buf=ctx.alloc().buffer(totalServerBytesWritten);\n            buf.writerIndex(buf.capacity());\n            ctx.writeAndFlush(buf).addListener((DuplexChannel)ctx.channel(),(c,f) -> c.shutdownOutput());\n            serverInitializedLatch.countDown();\n          }\n          @Override public void exceptionCaught(          ChannelHandlerContext ctx,          Throwable cause){\n            ctx.close();\n          }\n        }\n);\n      }\n    }\n);\n    cb.handler(new ChannelInitializer<Channel>(){\n      @Override protected void initChannel(      Channel ch) throws Exception {\n        ch.pipeline().addLast(new ChannelHandler(){\n          private int bytesRead;\n          @Override public void channelRead(          ChannelHandlerContext ctx,          Object msg){\n            ByteBuf buf=(ByteBuf)msg;\n            bytesRead+=buf.readableBytes();\n            buf.release();\n          }\n          @Override public void userEventTriggered(          ChannelHandlerContext ctx,          Object evt){\n            if (evt == ChannelInputShutdownEvent.INSTANCE) {\n              clientHalfClosedLatch.countDown();\n            }\n else             if (evt == ChannelInputShutdownReadComplete.INSTANCE) {\n              ctx.close();\n            }\n          }\n          @Override public void channelReadComplete(          ChannelHandlerContext ctx){\n            clientReadCompletes.incrementAndGet();\n            if (bytesRead == totalServerBytesWritten) {\n              clientReadAllDataLatch.countDown();\n            }\n            if (!autoRead) {\n              ctx.read();\n            }\n          }\n          @Override public void exceptionCaught(          ChannelHandlerContext ctx,          Throwable cause){\n            ctx.close();\n          }\n        }\n);\n      }\n    }\n);\n    serverChannel=sb.bind().get();\n    clientChannel=cb.connect(serverChannel.localAddress()).get();\n    clientChannel.read();\n    serverInitializedLatch.await();\n    clientReadAllDataLatch.await();\n    clientHalfClosedLatch.await();\n    assertTrue(totalServerBytesWritten / numReadsPerReadLoop + 10 > clientReadCompletes.get(),\"too many read complete events: \" + clientReadCompletes.get());\n  }\n  finally {\n    if (clientChannel != null) {\n      clientChannel.close().sync();\n    }\n    if (serverChannel != null) {\n      serverChannel.close().sync();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 436,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4537,
        "startLineNumber" : 128,
        "startColumnNumber" : 4,
        "endLineNumber" : 222,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private static void testAllDataReadAfterHalfClosure(final boolean autoRead,ServerBootstrap sb,Bootstrap cb) throws Throwable {\n  final int totalServerBytesWritten=1024 * 16;\n  final int numReadsPerReadLoop=2;\n  final CountDownLatch serverInitializedLatch=new CountDownLatch(1);\n  final CountDownLatch clientReadAllDataLatch=new CountDownLatch(1);\n  final CountDownLatch clientHalfClosedLatch=new CountDownLatch(1);\n  final AtomicInteger clientReadCompletes=new AtomicInteger();\n  Channel serverChannel=null;\n  Channel clientChannel=null;\n  try {\n    cb.option(ChannelOption.ALLOW_HALF_CLOSURE,true).option(ChannelOption.AUTO_READ,autoRead).option(ChannelOption.RCVBUF_ALLOCATOR,new TestNumReadsRecvByteBufAllocator(numReadsPerReadLoop));\n    sb.childHandler(new ChannelInitializer<Channel>(){\n      @Override protected void initChannel(      Channel ch) throws Exception {\n        ch.pipeline().addLast(new ChannelHandler(){\n          @Override public void channelActive(          ChannelHandlerContext ctx) throws Exception {\n            ByteBuf buf=ctx.alloc().buffer(totalServerBytesWritten);\n            buf.writerIndex(buf.capacity());\n            ctx.writeAndFlush(buf).addListener((DuplexChannel)ctx.channel(),(c,f) -> c.shutdownOutput());\n            serverInitializedLatch.countDown();\n          }\n          @Override public void exceptionCaught(          ChannelHandlerContext ctx,          Throwable cause){\n            ctx.close();\n          }\n        }\n);\n      }\n    }\n);\n    cb.handler(new ChannelInitializer<Channel>(){\n      @Override protected void initChannel(      Channel ch) throws Exception {\n        ch.pipeline().addLast(new ChannelHandler(){\n          private int bytesRead;\n          @Override public void channelRead(          ChannelHandlerContext ctx,          Object msg){\n            ByteBuf buf=(ByteBuf)msg;\n            bytesRead+=buf.readableBytes();\n            buf.release();\n          }\n          @Override public void userEventTriggered(          ChannelHandlerContext ctx,          Object evt){\n            if (evt == ChannelInputShutdownEvent.INSTANCE) {\n              clientHalfClosedLatch.countDown();\n            }\n else             if (evt == ChannelInputShutdownReadComplete.INSTANCE) {\n              ctx.close();\n            }\n          }\n          @Override public void channelReadComplete(          ChannelHandlerContext ctx){\n            clientReadCompletes.incrementAndGet();\n            if (bytesRead == totalServerBytesWritten) {\n              clientReadAllDataLatch.countDown();\n            }\n            if (!autoRead) {\n              ctx.read();\n            }\n          }\n          @Override public void exceptionCaught(          ChannelHandlerContext ctx,          Throwable cause){\n            ctx.close();\n          }\n        }\n);\n      }\n    }\n);\n    serverChannel=sb.bind().get();\n    clientChannel=cb.connect(serverChannel.localAddress()).get();\n    clientChannel.read();\n    serverInitializedLatch.await();\n    clientReadAllDataLatch.await();\n    clientHalfClosedLatch.await();\n    assertTrue(totalServerBytesWritten / numReadsPerReadLoop + 10 > clientReadCompletes.get(),\"too many read complete events: \" + clientReadCompletes.get());\n  }\n  finally {\n    if (clientChannel != null) {\n      clientChannel.close().sync();\n    }\n    if (serverChannel != null) {\n      serverChannel.close().sync();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 455,
      "astHeight" : 22
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 170,
        "startLineNumber" : 212,
        "startColumnNumber" : 12,
        "endLineNumber" : 213,
        "endColumnNumber" : 78
      },
      "nodeContext" : "assertTrue(totalServerBytesWritten / numReadsPerReadLoop + 10 > clientReadCompletes.get(),\"too many read complete events: \" + clientReadCompletes.get())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 8,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 78,
    "startLineNumber" : 212,
    "startColumnNumber" : 23,
    "endLineNumber" : 212,
    "endColumnNumber" : 101
  } ],
  "layoutRelationDataList" : [ ]
}