{
  "id" : 494,
  "expression" : "0",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-beans/src/main/java/org/springframework/beans/factory/support/PropertiesBeanDefinitionReader.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 359,
      "startColumnNumber" : 18,
      "endLineNumber" : 359,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 359,
        "startColumnNumber" : 6,
        "endLineNumber" : 359,
        "endColumnNumber" : 19
      },
      "nodeContext" : "beanCount=0",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 359,
        "startColumnNumber" : 2,
        "endLineNumber" : 359,
        "endColumnNumber" : 20
      },
      "nodeContext" : "int beanCount=0;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1469,
        "startLineNumber" : 354,
        "startColumnNumber" : 25,
        "endLineNumber" : 400,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (prefix == null) {\n    prefix=\"\";\n  }\n  int beanCount=0;\n  for (  Object key : map.keySet()) {\n    if (!(key instanceof String)) {\n      throw new IllegalArgumentException(\"Illegal key [\" + key + \"]: only Strings allowed\");\n    }\n    String keyString=(String)key;\n    if (keyString.startsWith(prefix)) {\n      String nameAndProperty=keyString.substring(prefix.length());\n      int sepIdx=-1;\n      int propKeyIdx=nameAndProperty.indexOf(PropertyAccessor.PROPERTY_KEY_PREFIX);\n      if (propKeyIdx != -1) {\n        sepIdx=nameAndProperty.lastIndexOf(SEPARATOR,propKeyIdx);\n      }\n else {\n        sepIdx=nameAndProperty.lastIndexOf(SEPARATOR);\n      }\n      if (sepIdx != -1) {\n        String beanName=nameAndProperty.substring(0,sepIdx);\n        if (logger.isTraceEnabled()) {\n          logger.trace(\"Found bean name '\" + beanName + \"'\");\n        }\n        if (!getRegistry().containsBeanDefinition(beanName)) {\n          registerBeanDefinition(beanName,map,prefix + beanName,resourceDescription);\n          ++beanCount;\n        }\n      }\n else {\n        if (logger.isDebugEnabled()) {\n          logger.debug(\"Invalid bean name and property [\" + nameAndProperty + \"]\");\n        }\n      }\n    }\n  }\n  return beanCount;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 169,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2293,
        "startLineNumber" : 339,
        "startColumnNumber" : 1,
        "endLineNumber" : 400,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Register bean definitions contained in a Map. Ignore ineligible properties.\n * @param map a map of {@code name} to {@code property} (String or Object). Propertyvalues will be strings if coming from a Properties file etc. Property names (keys) <b>must</b> be Strings. Class keys must be Strings.\n * @param prefix a filter within the keys in the map: e.g. 'beans.'(can be empty or  {@code null})\n * @param resourceDescription description of the resource that theMap came from (for logging purposes)\n * @return the number of bean definitions found\n * @throws BeansException in case of loading or parsing errors\n * @see #registerBeanDefinitions(Map,String)\n */\npublic int registerBeanDefinitions(Map<?,?> map,@Nullable String prefix,String resourceDescription) throws BeansException {\n  if (prefix == null) {\n    prefix=\"\";\n  }\n  int beanCount=0;\n  for (  Object key : map.keySet()) {\n    if (!(key instanceof String)) {\n      throw new IllegalArgumentException(\"Illegal key [\" + key + \"]: only Strings allowed\");\n    }\n    String keyString=(String)key;\n    if (keyString.startsWith(prefix)) {\n      String nameAndProperty=keyString.substring(prefix.length());\n      int sepIdx=-1;\n      int propKeyIdx=nameAndProperty.indexOf(PropertyAccessor.PROPERTY_KEY_PREFIX);\n      if (propKeyIdx != -1) {\n        sepIdx=nameAndProperty.lastIndexOf(SEPARATOR,propKeyIdx);\n      }\n else {\n        sepIdx=nameAndProperty.lastIndexOf(SEPARATOR);\n      }\n      if (sepIdx != -1) {\n        String beanName=nameAndProperty.substring(0,sepIdx);\n        if (logger.isTraceEnabled()) {\n          logger.trace(\"Found bean name '\" + beanName + \"'\");\n        }\n        if (!getRegistry().containsBeanDefinition(beanName)) {\n          registerBeanDefinition(beanName,map,prefix + beanName,resourceDescription);\n          ++beanCount;\n        }\n      }\n else {\n        if (logger.isDebugEnabled()) {\n          logger.debug(\"Invalid bean name and property [\" + nameAndProperty + \"]\");\n        }\n      }\n    }\n  }\n  return beanCount;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 193,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 359,
        "startColumnNumber" : 2,
        "endLineNumber" : 359,
        "endColumnNumber" : 20
      },
      "nodeContext" : "int beanCount=0;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 379,
      "startColumnNumber" : 49,
      "endLineNumber" : 379,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 379,
        "startColumnNumber" : 23,
        "endLineNumber" : 379,
        "endColumnNumber" : 59
      },
      "nodeContext" : "nameAndProperty.substring(0,sepIdx)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 379,
        "startColumnNumber" : 12,
        "endLineNumber" : 379,
        "endColumnNumber" : 59
      },
      "nodeContext" : "beanName=nameAndProperty.substring(0,sepIdx)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 379,
        "startColumnNumber" : 5,
        "endLineNumber" : 379,
        "endColumnNumber" : 60
      },
      "nodeContext" : "String beanName=nameAndProperty.substring(0,sepIdx);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 388,
        "startLineNumber" : 378,
        "startColumnNumber" : 22,
        "endLineNumber" : 388,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String beanName=nameAndProperty.substring(0,sepIdx);\n  if (logger.isTraceEnabled()) {\n    logger.trace(\"Found bean name '\" + beanName + \"'\");\n  }\n  if (!getRegistry().containsBeanDefinition(beanName)) {\n    registerBeanDefinition(beanName,map,prefix + beanName,resourceDescription);\n    ++beanCount;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 44,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 663,
        "startLineNumber" : 378,
        "startColumnNumber" : 4,
        "endLineNumber" : 395,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (sepIdx != -1) {\n  String beanName=nameAndProperty.substring(0,sepIdx);\n  if (logger.isTraceEnabled()) {\n    logger.trace(\"Found bean name '\" + beanName + \"'\");\n  }\n  if (!getRegistry().containsBeanDefinition(beanName)) {\n    registerBeanDefinition(beanName,map,prefix + beanName,resourceDescription);\n    ++beanCount;\n  }\n}\n else {\n  if (logger.isDebugEnabled()) {\n    logger.debug(\"Invalid bean name and property [\" + nameAndProperty + \"]\");\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 63,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1132,
        "startLineNumber" : 366,
        "startColumnNumber" : 37,
        "endLineNumber" : 396,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  String nameAndProperty=keyString.substring(prefix.length());\n  int sepIdx=-1;\n  int propKeyIdx=nameAndProperty.indexOf(PropertyAccessor.PROPERTY_KEY_PREFIX);\n  if (propKeyIdx != -1) {\n    sepIdx=nameAndProperty.lastIndexOf(SEPARATOR,propKeyIdx);\n  }\n else {\n    sepIdx=nameAndProperty.lastIndexOf(SEPARATOR);\n  }\n  if (sepIdx != -1) {\n    String beanName=nameAndProperty.substring(0,sepIdx);\n    if (logger.isTraceEnabled()) {\n      logger.trace(\"Found bean name '\" + beanName + \"'\");\n    }\n    if (!getRegistry().containsBeanDefinition(beanName)) {\n      registerBeanDefinition(beanName,map,prefix + beanName,resourceDescription);\n      ++beanCount;\n    }\n  }\n else {\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"Invalid bean name and property [\" + nameAndProperty + \"]\");\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 113,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1166,
        "startLineNumber" : 366,
        "startColumnNumber" : 3,
        "endLineNumber" : 396,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (keyString.startsWith(prefix)) {\n  String nameAndProperty=keyString.substring(prefix.length());\n  int sepIdx=-1;\n  int propKeyIdx=nameAndProperty.indexOf(PropertyAccessor.PROPERTY_KEY_PREFIX);\n  if (propKeyIdx != -1) {\n    sepIdx=nameAndProperty.lastIndexOf(SEPARATOR,propKeyIdx);\n  }\n else {\n    sepIdx=nameAndProperty.lastIndexOf(SEPARATOR);\n  }\n  if (sepIdx != -1) {\n    String beanName=nameAndProperty.substring(0,sepIdx);\n    if (logger.isTraceEnabled()) {\n      logger.trace(\"Found bean name '\" + beanName + \"'\");\n    }\n    if (!getRegistry().containsBeanDefinition(beanName)) {\n      registerBeanDefinition(beanName,map,prefix + beanName,resourceDescription);\n      ++beanCount;\n    }\n  }\n else {\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"Invalid bean name and property [\" + nameAndProperty + \"]\");\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 118,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1342,
        "startLineNumber" : 361,
        "startColumnNumber" : 34,
        "endLineNumber" : 397,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!(key instanceof String)) {\n    throw new IllegalArgumentException(\"Illegal key [\" + key + \"]: only Strings allowed\");\n  }\n  String keyString=(String)key;\n  if (keyString.startsWith(prefix)) {\n    String nameAndProperty=keyString.substring(prefix.length());\n    int sepIdx=-1;\n    int propKeyIdx=nameAndProperty.indexOf(PropertyAccessor.PROPERTY_KEY_PREFIX);\n    if (propKeyIdx != -1) {\n      sepIdx=nameAndProperty.lastIndexOf(SEPARATOR,propKeyIdx);\n    }\n else {\n      sepIdx=nameAndProperty.lastIndexOf(SEPARATOR);\n    }\n    if (sepIdx != -1) {\n      String beanName=nameAndProperty.substring(0,sepIdx);\n      if (logger.isTraceEnabled()) {\n        logger.trace(\"Found bean name '\" + beanName + \"'\");\n      }\n      if (!getRegistry().containsBeanDefinition(beanName)) {\n        registerBeanDefinition(beanName,map,prefix + beanName,resourceDescription);\n        ++beanCount;\n      }\n    }\n else {\n      if (logger.isDebugEnabled()) {\n        logger.debug(\"Invalid bean name and property [\" + nameAndProperty + \"]\");\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 144,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1374,
        "startLineNumber" : 361,
        "startColumnNumber" : 2,
        "endLineNumber" : 397,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (Object key : map.keySet()) {\n  if (!(key instanceof String)) {\n    throw new IllegalArgumentException(\"Illegal key [\" + key + \"]: only Strings allowed\");\n  }\n  String keyString=(String)key;\n  if (keyString.startsWith(prefix)) {\n    String nameAndProperty=keyString.substring(prefix.length());\n    int sepIdx=-1;\n    int propKeyIdx=nameAndProperty.indexOf(PropertyAccessor.PROPERTY_KEY_PREFIX);\n    if (propKeyIdx != -1) {\n      sepIdx=nameAndProperty.lastIndexOf(SEPARATOR,propKeyIdx);\n    }\n else {\n      sepIdx=nameAndProperty.lastIndexOf(SEPARATOR);\n    }\n    if (sepIdx != -1) {\n      String beanName=nameAndProperty.substring(0,sepIdx);\n      if (logger.isTraceEnabled()) {\n        logger.trace(\"Found bean name '\" + beanName + \"'\");\n      }\n      if (!getRegistry().containsBeanDefinition(beanName)) {\n        registerBeanDefinition(beanName,map,prefix + beanName,resourceDescription);\n        ++beanCount;\n      }\n    }\n else {\n      if (logger.isDebugEnabled()) {\n        logger.debug(\"Invalid bean name and property [\" + nameAndProperty + \"]\");\n      }\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 152,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1469,
        "startLineNumber" : 354,
        "startColumnNumber" : 25,
        "endLineNumber" : 400,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (prefix == null) {\n    prefix=\"\";\n  }\n  int beanCount=0;\n  for (  Object key : map.keySet()) {\n    if (!(key instanceof String)) {\n      throw new IllegalArgumentException(\"Illegal key [\" + key + \"]: only Strings allowed\");\n    }\n    String keyString=(String)key;\n    if (keyString.startsWith(prefix)) {\n      String nameAndProperty=keyString.substring(prefix.length());\n      int sepIdx=-1;\n      int propKeyIdx=nameAndProperty.indexOf(PropertyAccessor.PROPERTY_KEY_PREFIX);\n      if (propKeyIdx != -1) {\n        sepIdx=nameAndProperty.lastIndexOf(SEPARATOR,propKeyIdx);\n      }\n else {\n        sepIdx=nameAndProperty.lastIndexOf(SEPARATOR);\n      }\n      if (sepIdx != -1) {\n        String beanName=nameAndProperty.substring(0,sepIdx);\n        if (logger.isTraceEnabled()) {\n          logger.trace(\"Found bean name '\" + beanName + \"'\");\n        }\n        if (!getRegistry().containsBeanDefinition(beanName)) {\n          registerBeanDefinition(beanName,map,prefix + beanName,resourceDescription);\n          ++beanCount;\n        }\n      }\n else {\n        if (logger.isDebugEnabled()) {\n          logger.debug(\"Invalid bean name and property [\" + nameAndProperty + \"]\");\n        }\n      }\n    }\n  }\n  return beanCount;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 169,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2293,
        "startLineNumber" : 339,
        "startColumnNumber" : 1,
        "endLineNumber" : 400,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Register bean definitions contained in a Map. Ignore ineligible properties.\n * @param map a map of {@code name} to {@code property} (String or Object). Propertyvalues will be strings if coming from a Properties file etc. Property names (keys) <b>must</b> be Strings. Class keys must be Strings.\n * @param prefix a filter within the keys in the map: e.g. 'beans.'(can be empty or  {@code null})\n * @param resourceDescription description of the resource that theMap came from (for logging purposes)\n * @return the number of bean definitions found\n * @throws BeansException in case of loading or parsing errors\n * @see #registerBeanDefinitions(Map,String)\n */\npublic int registerBeanDefinitions(Map<?,?> map,@Nullable String prefix,String resourceDescription) throws BeansException {\n  if (prefix == null) {\n    prefix=\"\";\n  }\n  int beanCount=0;\n  for (  Object key : map.keySet()) {\n    if (!(key instanceof String)) {\n      throw new IllegalArgumentException(\"Illegal key [\" + key + \"]: only Strings allowed\");\n    }\n    String keyString=(String)key;\n    if (keyString.startsWith(prefix)) {\n      String nameAndProperty=keyString.substring(prefix.length());\n      int sepIdx=-1;\n      int propKeyIdx=nameAndProperty.indexOf(PropertyAccessor.PROPERTY_KEY_PREFIX);\n      if (propKeyIdx != -1) {\n        sepIdx=nameAndProperty.lastIndexOf(SEPARATOR,propKeyIdx);\n      }\n else {\n        sepIdx=nameAndProperty.lastIndexOf(SEPARATOR);\n      }\n      if (sepIdx != -1) {\n        String beanName=nameAndProperty.substring(0,sepIdx);\n        if (logger.isTraceEnabled()) {\n          logger.trace(\"Found bean name '\" + beanName + \"'\");\n        }\n        if (!getRegistry().containsBeanDefinition(beanName)) {\n          registerBeanDefinition(beanName,map,prefix + beanName,resourceDescription);\n          ++beanCount;\n        }\n      }\n else {\n        if (logger.isDebugEnabled()) {\n          logger.debug(\"Invalid bean name and property [\" + nameAndProperty + \"]\");\n        }\n      }\n    }\n  }\n  return beanCount;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 193,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 379,
        "startColumnNumber" : 5,
        "endLineNumber" : 379,
        "endColumnNumber" : 60
      },
      "nodeContext" : "String beanName=nameAndProperty.substring(0,sepIdx);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 359,
    "startColumnNumber" : 18,
    "endLineNumber" : 359,
    "endColumnNumber" : 19
  }, {
    "charLength" : 1,
    "startLineNumber" : 379,
    "startColumnNumber" : 49,
    "endLineNumber" : 379,
    "endColumnNumber" : 50
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 9
  } ]
}