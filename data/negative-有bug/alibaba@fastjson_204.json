{
  "id" : 204,
  "expression" : "26 * blockSize",
  "projectName" : "alibaba@fastjson",
  "commitID" : "d3797da65a3d9f804c9e275c25395c59e31f097d",
  "filePath" : "/src/test/java/com/alibaba/json/bvt/serializer/stream/StreamWriterTest_writeString.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "26 * blockSize",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 30,
      "startColumnNumber" : 28,
      "endLineNumber" : 30,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 30,
        "startColumnNumber" : 8,
        "endLineNumber" : 30,
        "endColumnNumber" : 58
      },
      "nodeContext" : "Assert.assertEquals(26 * blockSize,text.length())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 30,
        "startColumnNumber" : 8,
        "endLineNumber" : 30,
        "endColumnNumber" : 59
      },
      "nodeContext" : "Assert.assertEquals(26 * blockSize,text.length());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 816,
        "startLineNumber" : 13,
        "startColumnNumber" : 42,
        "endLineNumber" : 37,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  StringWriter out=new StringWriter();\n  SerializeWriter writer=new SerializeWriter(out,10);\n  Assert.assertEquals(10,SerializeWriterTestUtils.getBufferLength(writer));\n  int blockSize=21;\n  for (char ch='a'; ch <= 'z'; ++ch) {\n    char[] chars=new char[blockSize];\n    for (int i=0; i < blockSize; ++i) {\n      chars[i]=ch;\n    }\n    writer.write(new String(chars),0,chars.length);\n  }\n  writer.close();\n  String text=out.toString();\n  Assert.assertEquals(26 * blockSize,text.length());\n  for (int i=0; i < 26; ++i) {\n    for (int j=0; j < blockSize; ++j) {\n      Assert.assertEquals(text.charAt(i * blockSize + j),(char)('a' + i));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 150,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 854,
        "startLineNumber" : 13,
        "startColumnNumber" : 4,
        "endLineNumber" : 37,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void test_0() throws Exception {\n  StringWriter out=new StringWriter();\n  SerializeWriter writer=new SerializeWriter(out,10);\n  Assert.assertEquals(10,SerializeWriterTestUtils.getBufferLength(writer));\n  int blockSize=21;\n  for (char ch='a'; ch <= 'z'; ++ch) {\n    char[] chars=new char[blockSize];\n    for (int i=0; i < blockSize; ++i) {\n      chars[i]=ch;\n    }\n    writer.write(new String(chars),0,chars.length);\n  }\n  writer.close();\n  String text=out.toString();\n  Assert.assertEquals(26 * blockSize,text.length());\n  for (int i=0; i < 26; ++i) {\n    for (int j=0; j < blockSize; ++j) {\n      Assert.assertEquals(text.charAt(i * blockSize + j),(char)('a' + i));\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 156,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 30,
        "startColumnNumber" : 8,
        "endLineNumber" : 30,
        "endColumnNumber" : 59
      },
      "nodeContext" : "Assert.assertEquals(26 * blockSize,text.length());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 30,
    "startColumnNumber" : 28,
    "endLineNumber" : 30,
    "endColumnNumber" : 42
  } ],
  "layoutRelationDataList" : [ ]
}