{
  "id" : 41,
  "expression" : "relocation.getType()",
  "projectName" : "NationalSecurityAgency@ghidra",
  "commitID" : "a54d0e28d652c48502551a88278808549aed5f98",
  "filePath" : "/Ghidra/Processors/SuperH4/src/main/java/ghidra/app/util/bin/format/elf/relocation/SH_ElfRelocationHandler.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "relocation.getType()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 45,
      "startColumnNumber" : 13,
      "endLineNumber" : 45,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 45,
        "startColumnNumber" : 6,
        "endLineNumber" : 45,
        "endColumnNumber" : 33
      },
      "nodeContext" : "type=relocation.getType()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 45,
        "startColumnNumber" : 2,
        "endLineNumber" : 45,
        "endColumnNumber" : 34
      },
      "nodeContext" : "int type=relocation.getType();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4021,
        "startLineNumber" : 34,
        "startColumnNumber" : 78,
        "endLineNumber" : 143,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  ElfHeader elf=elfRelocationContext.getElfHeader();\n  if (elf.e_machine() != ElfConstants.EM_SH || !elf.is32Bit()) {\n    return;\n  }\n  Program program=elfRelocationContext.getProgram();\n  Memory memory=program.getMemory();\n  int type=relocation.getType();\n  if (type == SH_ElfRelocationConstants.R_SH_NONE) {\n    return;\n  }\n  int symbolIndex=relocation.getSymbolIndex();\n  int addend=(int)relocation.getAddend();\n  ElfSymbol sym=elfRelocationContext.getSymbol(symbolIndex);\n  String symbolName=sym.getNameAsString();\n  int offset=(int)relocationAddress.getOffset();\n  Address symbolAddr=elfRelocationContext.getSymbolAddress(sym);\n  int symbolValue=(int)elfRelocationContext.getSymbolValue(sym);\n  int newValue=0;\n  int oldValue;\nswitch (type) {\ncase SH_ElfRelocationConstants.R_SH_DIR32:case SH_ElfRelocationConstants.R_SH_GLOB_DAT:case SH_ElfRelocationConstants.R_SH_JMP_SLOT:    if (elfRelocationContext.extractAddend()) {\n      addend=memory.getInt(relocationAddress);\n    }\n  if (addend != 0 && isUnsupportedExternalRelocation(program,relocationAddress,symbolAddr,symbolName,addend,elfRelocationContext.getLog())) {\n    addend=0;\n  }\nnewValue=symbolValue + addend;\nmemory.setInt(relocationAddress,newValue);\nbreak;\ncase SH_ElfRelocationConstants.R_SH_REL32:if (elfRelocationContext.extractAddend()) {\naddend=memory.getInt(relocationAddress);\n}\nnewValue=(symbolValue + addend) - offset;\nmemory.setInt(relocationAddress,newValue);\nbreak;\ncase SH_ElfRelocationConstants.R_SH_DIR8WPN:case SH_ElfRelocationConstants.R_SH_DIR8WPZ:oldValue=memory.getShort(relocationAddress);\nif (elfRelocationContext.extractAddend()) {\naddend=oldValue & 0xff;\nif (type == SH_ElfRelocationConstants.R_SH_DIR8WPN && (addend & 0x80) != 0) {\naddend-=0x100;\n}\n}\nnewValue=((symbolValue + addend) - offset) >> 1;\nnewValue=(oldValue & 0xff00) | (newValue & 0xff);\nmemory.setShort(relocationAddress,(short)newValue);\nbreak;\ncase SH_ElfRelocationConstants.R_SH_IND12W:oldValue=memory.getShort(relocationAddress);\nif (elfRelocationContext.extractAddend()) {\naddend=oldValue & 0xfff;\nif ((addend & 0x800) != 0) {\naddend-=0x1000;\n}\n}\nnewValue=((symbolValue + addend) - offset) >> 1;\nnewValue=(oldValue & 0xf000) | (newValue & 0xfff);\nmemory.setShort(relocationAddress,(short)newValue);\nbreak;\ncase SH_ElfRelocationConstants.R_SH_DIR8WPL:oldValue=memory.getShort(relocationAddress);\nif (elfRelocationContext.extractAddend()) {\naddend=oldValue & 0xff;\n}\nnewValue=((symbolValue + addend) - offset) >> 2;\nnewValue=(oldValue & 0xff00) | (newValue & 0xff);\nmemory.setShort(relocationAddress,(short)newValue);\nbreak;\ncase SH_ElfRelocationConstants.R_SH_COPY:markAsWarning(program,relocationAddress,\"R_SH_COPY\",symbolName,symbolIndex,\"Runtime copy not supported\",elfRelocationContext.getLog());\nbreak;\ncase SH_ElfRelocationConstants.R_SH_RELATIVE:if (elfRelocationContext.extractAddend()) {\naddend=memory.getInt(relocationAddress);\n}\nnewValue=(int)(elfRelocationContext.getImageBaseWordAdjustmentOffset()) + addend;\nmemory.setInt(relocationAddress,newValue);\nbreak;\ndefault:markAsUnhandled(program,relocationAddress,type,symbolIndex,symbolName,elfRelocationContext.getLog());\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 479,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4202,
        "startLineNumber" : 32,
        "startColumnNumber" : 1,
        "endLineNumber" : 143,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public void relocate(ElfRelocationContext elfRelocationContext,ElfRelocation relocation,Address relocationAddress) throws MemoryAccessException, NotFoundException {\n  ElfHeader elf=elfRelocationContext.getElfHeader();\n  if (elf.e_machine() != ElfConstants.EM_SH || !elf.is32Bit()) {\n    return;\n  }\n  Program program=elfRelocationContext.getProgram();\n  Memory memory=program.getMemory();\n  int type=relocation.getType();\n  if (type == SH_ElfRelocationConstants.R_SH_NONE) {\n    return;\n  }\n  int symbolIndex=relocation.getSymbolIndex();\n  int addend=(int)relocation.getAddend();\n  ElfSymbol sym=elfRelocationContext.getSymbol(symbolIndex);\n  String symbolName=sym.getNameAsString();\n  int offset=(int)relocationAddress.getOffset();\n  Address symbolAddr=elfRelocationContext.getSymbolAddress(sym);\n  int symbolValue=(int)elfRelocationContext.getSymbolValue(sym);\n  int newValue=0;\n  int oldValue;\nswitch (type) {\ncase SH_ElfRelocationConstants.R_SH_DIR32:case SH_ElfRelocationConstants.R_SH_GLOB_DAT:case SH_ElfRelocationConstants.R_SH_JMP_SLOT:    if (elfRelocationContext.extractAddend()) {\n      addend=memory.getInt(relocationAddress);\n    }\n  if (addend != 0 && isUnsupportedExternalRelocation(program,relocationAddress,symbolAddr,symbolName,addend,elfRelocationContext.getLog())) {\n    addend=0;\n  }\nnewValue=symbolValue + addend;\nmemory.setInt(relocationAddress,newValue);\nbreak;\ncase SH_ElfRelocationConstants.R_SH_REL32:if (elfRelocationContext.extractAddend()) {\naddend=memory.getInt(relocationAddress);\n}\nnewValue=(symbolValue + addend) - offset;\nmemory.setInt(relocationAddress,newValue);\nbreak;\ncase SH_ElfRelocationConstants.R_SH_DIR8WPN:case SH_ElfRelocationConstants.R_SH_DIR8WPZ:oldValue=memory.getShort(relocationAddress);\nif (elfRelocationContext.extractAddend()) {\naddend=oldValue & 0xff;\nif (type == SH_ElfRelocationConstants.R_SH_DIR8WPN && (addend & 0x80) != 0) {\naddend-=0x100;\n}\n}\nnewValue=((symbolValue + addend) - offset) >> 1;\nnewValue=(oldValue & 0xff00) | (newValue & 0xff);\nmemory.setShort(relocationAddress,(short)newValue);\nbreak;\ncase SH_ElfRelocationConstants.R_SH_IND12W:oldValue=memory.getShort(relocationAddress);\nif (elfRelocationContext.extractAddend()) {\naddend=oldValue & 0xfff;\nif ((addend & 0x800) != 0) {\naddend-=0x1000;\n}\n}\nnewValue=((symbolValue + addend) - offset) >> 1;\nnewValue=(oldValue & 0xf000) | (newValue & 0xfff);\nmemory.setShort(relocationAddress,(short)newValue);\nbreak;\ncase SH_ElfRelocationConstants.R_SH_DIR8WPL:oldValue=memory.getShort(relocationAddress);\nif (elfRelocationContext.extractAddend()) {\naddend=oldValue & 0xff;\n}\nnewValue=((symbolValue + addend) - offset) >> 2;\nnewValue=(oldValue & 0xff00) | (newValue & 0xff);\nmemory.setShort(relocationAddress,(short)newValue);\nbreak;\ncase SH_ElfRelocationConstants.R_SH_COPY:markAsWarning(program,relocationAddress,\"R_SH_COPY\",symbolName,symbolIndex,\"Runtime copy not supported\",elfRelocationContext.getLog());\nbreak;\ncase SH_ElfRelocationConstants.R_SH_RELATIVE:if (elfRelocationContext.extractAddend()) {\naddend=memory.getInt(relocationAddress);\n}\nnewValue=(int)(elfRelocationContext.getImageBaseWordAdjustmentOffset()) + addend;\nmemory.setInt(relocationAddress,newValue);\nbreak;\ndefault:markAsUnhandled(program,relocationAddress,type,symbolIndex,symbolName,elfRelocationContext.getLog());\nbreak;\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 501,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 45,
        "startColumnNumber" : 2,
        "endLineNumber" : 45,
        "endColumnNumber" : 34
      },
      "nodeContext" : "int type=relocation.getType();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 20,
    "startLineNumber" : 45,
    "startColumnNumber" : 13,
    "endLineNumber" : 45,
    "endColumnNumber" : 33
  } ],
  "layoutRelationDataList" : [ ]
}