{
  "id" : 305,
  "expression" : "httpURLConnection.getOutputStream()",
  "projectName" : "TeamNewPipe@NewPipe",
  "commitID" : "d7574973e97fa7a3a21aa59967311f6091941830",
  "filePath" : "/app/src/main/java/org/schabi/newpipe/player/datasource/YoutubeHttpDataSource.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "httpURLConnection.getOutputStream()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 35,
      "startLineNumber" : 700,
      "startColumnNumber" : 36,
      "endLineNumber" : 700,
      "endColumnNumber" : 71
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 700,
        "startColumnNumber" : 31,
        "endLineNumber" : 700,
        "endColumnNumber" : 71
      },
      "nodeContext" : "os=httpURLConnection.getOutputStream()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 700,
        "startColumnNumber" : 12,
        "endLineNumber" : 700,
        "endColumnNumber" : 72
      },
      "nodeContext" : "final OutputStream os=httpURLConnection.getOutputStream();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 263,
        "startLineNumber" : 697,
        "startColumnNumber" : 30,
        "endLineNumber" : 703,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  httpURLConnection.setFixedLengthStreamingMode(httpBody.length);\n  httpURLConnection.connect();\n  final OutputStream os=httpURLConnection.getOutputStream();\n  os.write(httpBody);\n  os.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 30,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 345,
        "startLineNumber" : 697,
        "startColumnNumber" : 8,
        "endLineNumber" : 705,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (httpBody != null) {\n  httpURLConnection.setFixedLengthStreamingMode(httpBody.length);\n  httpURLConnection.connect();\n  final OutputStream os=httpURLConnection.getOutputStream();\n  os.write(httpBody);\n  os.close();\n}\n else {\n  httpURLConnection.connect();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 39,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4265,
        "startLineNumber" : 619,
        "startColumnNumber" : 76,
        "endLineNumber" : 707,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String requestUrl=url.toString();\n  final boolean isVideoPlaybackUrl=url.getPath().startsWith(\"/videoplayback\");\n  if (isVideoPlaybackUrl && rnParameterEnabled && !requestUrl.contains(RN_PARAMETER)) {\n    requestUrl+=RN_PARAMETER + requestNumber;\n    ++requestNumber;\n  }\n  if (rangeParameterEnabled && isVideoPlaybackUrl) {\n    final String rangeParameterBuilt=buildRangeParameter(position,length);\n    if (rangeParameterBuilt != null) {\n      requestUrl+=rangeParameterBuilt;\n    }\n  }\n  final HttpURLConnection httpURLConnection=openConnection(new URL(requestUrl));\n  httpURLConnection.setConnectTimeout(connectTimeoutMillis);\n  httpURLConnection.setReadTimeout(readTimeoutMillis);\n  final Map<String,String> requestHeaders=new HashMap<>();\n  if (defaultRequestProperties != null) {\n    requestHeaders.putAll(defaultRequestProperties.getSnapshot());\n  }\n  requestHeaders.putAll(requestProperties.getSnapshot());\n  requestHeaders.putAll(requestParameters);\n  for (  final Map.Entry<String,String> property : requestHeaders.entrySet()) {\n    httpURLConnection.setRequestProperty(property.getKey(),property.getValue());\n  }\n  if (!rangeParameterEnabled) {\n    final String rangeHeader=buildRangeRequestHeader(position,length);\n    if (rangeHeader != null) {\n      httpURLConnection.setRequestProperty(HttpHeaders.RANGE,rangeHeader);\n    }\n  }\n  if (isWebStreamingUrl(requestUrl) || isTvHtml5SimplyEmbeddedPlayerStreamingUrl(requestUrl)) {\n    httpURLConnection.setRequestProperty(HttpHeaders.ORIGIN,YOUTUBE_BASE_URL);\n    httpURLConnection.setRequestProperty(HttpHeaders.REFERER,YOUTUBE_BASE_URL);\n    httpURLConnection.setRequestProperty(HttpHeaders.SEC_FETCH_DEST,\"empty\");\n    httpURLConnection.setRequestProperty(HttpHeaders.SEC_FETCH_MODE,\"cors\");\n    httpURLConnection.setRequestProperty(HttpHeaders.SEC_FETCH_SITE,\"cross-site\");\n  }\n  httpURLConnection.setRequestProperty(HttpHeaders.TE,\"trailers\");\n  final boolean isAndroidStreamingUrl=isAndroidStreamingUrl(requestUrl);\n  final boolean isIosStreamingUrl=isIosStreamingUrl(requestUrl);\n  if (isAndroidStreamingUrl) {\n    httpURLConnection.setRequestProperty(HttpHeaders.USER_AGENT,getAndroidUserAgent(null));\n  }\n else   if (isIosStreamingUrl) {\n    httpURLConnection.setRequestProperty(HttpHeaders.USER_AGENT,getIosUserAgent(null));\n  }\n else {\n    httpURLConnection.setRequestProperty(HttpHeaders.USER_AGENT,DownloaderImpl.USER_AGENT);\n  }\n  httpURLConnection.setRequestProperty(HttpHeaders.ACCEPT_ENCODING,allowGzip ? \"gzip\" : \"identity\");\n  httpURLConnection.setInstanceFollowRedirects(followRedirects);\n  httpURLConnection.setDoOutput(httpBody != null);\n  httpURLConnection.setRequestMethod(isAndroidStreamingUrl || isIosStreamingUrl ? \"POST\" : DataSpec.getStringForHttpMethod(httpMethod));\n  if (httpBody != null) {\n    httpURLConnection.setFixedLengthStreamingMode(httpBody.length);\n    httpURLConnection.connect();\n    final OutputStream os=httpURLConnection.getOutputStream();\n    os.write(httpBody);\n    os.close();\n  }\n else {\n    httpURLConnection.connect();\n  }\n  return httpURLConnection;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 365,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5403,
        "startLineNumber" : 596,
        "startColumnNumber" : 4,
        "endLineNumber" : 707,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Configures a connection and opens it.\n * @param url               The url to connect to.\n * @param httpMethod        The http method.\n * @param httpBody          The body data, or {@code null} if not required.\n * @param position          The byte offset of the requested data.\n * @param length            The length of the requested data, or {@link C#LENGTH_UNSET}.\n * @param allowGzip         Whether to allow the use of gzip.\n * @param followRedirects   Whether to follow redirects.\n * @param requestParameters parameters (HTTP headers) to include in request.\n * @return the connection opened\n */\n@SuppressWarnings(\"checkstyle:ParameterNumber\") @NonNull private HttpURLConnection makeConnection(@NonNull final URL url,@HttpMethod final int httpMethod,@Nullable final byte[] httpBody,final long position,final long length,final boolean allowGzip,final boolean followRedirects,final Map<String,String> requestParameters) throws IOException {\n  String requestUrl=url.toString();\n  final boolean isVideoPlaybackUrl=url.getPath().startsWith(\"/videoplayback\");\n  if (isVideoPlaybackUrl && rnParameterEnabled && !requestUrl.contains(RN_PARAMETER)) {\n    requestUrl+=RN_PARAMETER + requestNumber;\n    ++requestNumber;\n  }\n  if (rangeParameterEnabled && isVideoPlaybackUrl) {\n    final String rangeParameterBuilt=buildRangeParameter(position,length);\n    if (rangeParameterBuilt != null) {\n      requestUrl+=rangeParameterBuilt;\n    }\n  }\n  final HttpURLConnection httpURLConnection=openConnection(new URL(requestUrl));\n  httpURLConnection.setConnectTimeout(connectTimeoutMillis);\n  httpURLConnection.setReadTimeout(readTimeoutMillis);\n  final Map<String,String> requestHeaders=new HashMap<>();\n  if (defaultRequestProperties != null) {\n    requestHeaders.putAll(defaultRequestProperties.getSnapshot());\n  }\n  requestHeaders.putAll(requestProperties.getSnapshot());\n  requestHeaders.putAll(requestParameters);\n  for (  final Map.Entry<String,String> property : requestHeaders.entrySet()) {\n    httpURLConnection.setRequestProperty(property.getKey(),property.getValue());\n  }\n  if (!rangeParameterEnabled) {\n    final String rangeHeader=buildRangeRequestHeader(position,length);\n    if (rangeHeader != null) {\n      httpURLConnection.setRequestProperty(HttpHeaders.RANGE,rangeHeader);\n    }\n  }\n  if (isWebStreamingUrl(requestUrl) || isTvHtml5SimplyEmbeddedPlayerStreamingUrl(requestUrl)) {\n    httpURLConnection.setRequestProperty(HttpHeaders.ORIGIN,YOUTUBE_BASE_URL);\n    httpURLConnection.setRequestProperty(HttpHeaders.REFERER,YOUTUBE_BASE_URL);\n    httpURLConnection.setRequestProperty(HttpHeaders.SEC_FETCH_DEST,\"empty\");\n    httpURLConnection.setRequestProperty(HttpHeaders.SEC_FETCH_MODE,\"cors\");\n    httpURLConnection.setRequestProperty(HttpHeaders.SEC_FETCH_SITE,\"cross-site\");\n  }\n  httpURLConnection.setRequestProperty(HttpHeaders.TE,\"trailers\");\n  final boolean isAndroidStreamingUrl=isAndroidStreamingUrl(requestUrl);\n  final boolean isIosStreamingUrl=isIosStreamingUrl(requestUrl);\n  if (isAndroidStreamingUrl) {\n    httpURLConnection.setRequestProperty(HttpHeaders.USER_AGENT,getAndroidUserAgent(null));\n  }\n else   if (isIosStreamingUrl) {\n    httpURLConnection.setRequestProperty(HttpHeaders.USER_AGENT,getIosUserAgent(null));\n  }\n else {\n    httpURLConnection.setRequestProperty(HttpHeaders.USER_AGENT,DownloaderImpl.USER_AGENT);\n  }\n  httpURLConnection.setRequestProperty(HttpHeaders.ACCEPT_ENCODING,allowGzip ? \"gzip\" : \"identity\");\n  httpURLConnection.setInstanceFollowRedirects(followRedirects);\n  httpURLConnection.setDoOutput(httpBody != null);\n  httpURLConnection.setRequestMethod(isAndroidStreamingUrl || isIosStreamingUrl ? \"POST\" : DataSpec.getStringForHttpMethod(httpMethod));\n  if (httpBody != null) {\n    httpURLConnection.setFixedLengthStreamingMode(httpBody.length);\n    httpURLConnection.connect();\n    final OutputStream os=httpURLConnection.getOutputStream();\n    os.write(httpBody);\n    os.close();\n  }\n else {\n    httpURLConnection.connect();\n  }\n  return httpURLConnection;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 425,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 700,
        "startColumnNumber" : 12,
        "endLineNumber" : 700,
        "endColumnNumber" : 72
      },
      "nodeContext" : "final OutputStream os=httpURLConnection.getOutputStream();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.io.OutputStream"
  } ],
  "positionList" : [ {
    "charLength" : 35,
    "startLineNumber" : 700,
    "startColumnNumber" : 36,
    "endLineNumber" : 700,
    "endColumnNumber" : 71
  } ],
  "layoutRelationDataList" : [ ]
}