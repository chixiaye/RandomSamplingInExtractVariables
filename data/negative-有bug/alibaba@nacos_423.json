{
  "id" : 423,
  "expression" : "properties != null",
  "projectName" : "alibaba@nacos",
  "commitID" : "4e7346db1d6657ffe07c96bebd2d348229c2812f",
  "filePath" : "/client/src/main/java/com/alibaba/nacos/client/naming/utils/InitUtils.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "properties != null",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 89,
      "startColumnNumber" : 49,
      "endLineNumber" : 89,
      "endColumnNumber" : 67
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 89,
        "startColumnNumber" : 12,
        "endLineNumber" : 89,
        "endColumnNumber" : 67
      },
      "nodeContext" : "StringUtils.isEmpty(tmpNamespace) && properties != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 151,
        "startLineNumber" : 89,
        "startColumnNumber" : 8,
        "endLineNumber" : 91,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (StringUtils.isEmpty(tmpNamespace) && properties != null) {\n  tmpNamespace=properties.getProperty(PropertyKeyConst.NAMESPACE);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2294,
        "startLineNumber" : 51,
        "startColumnNumber" : 71,
        "endLineNumber" : 100,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String tmpNamespace=null;\n  String isUseCloudNamespaceParsing=properties.getProperty(PropertyKeyConst.IS_USE_CLOUD_NAMESPACE_PARSING,System.getProperty(SystemPropertyKeyConst.IS_USE_CLOUD_NAMESPACE_PARSING,String.valueOf(Constants.DEFAULT_USE_CLOUD_NAMESPACE_PARSING)));\n  if (Boolean.parseBoolean(isUseCloudNamespaceParsing)) {\n    tmpNamespace=TenantUtil.getUserTenantForAns();\n    tmpNamespace=TemplateUtils.stringEmptyAndThenExecute(tmpNamespace,new Callable<String>(){\n      @Override public String call(){\n        String namespace=System.getProperty(SystemPropertyKeyConst.ANS_NAMESPACE);\n        LogUtils.NAMING_LOGGER.info(\"initializer namespace from System Property :\" + namespace);\n        return namespace;\n      }\n    }\n);\n    tmpNamespace=TemplateUtils.stringEmptyAndThenExecute(tmpNamespace,new Callable<String>(){\n      @Override public String call(){\n        String namespace=System.getenv(PropertyKeyConst.SystemEnv.ALIBABA_ALIWARE_NAMESPACE);\n        LogUtils.NAMING_LOGGER.info(\"initializer namespace from System Environment :\" + namespace);\n        return namespace;\n      }\n    }\n);\n  }\n  tmpNamespace=TemplateUtils.stringEmptyAndThenExecute(tmpNamespace,new Callable<String>(){\n    @Override public String call(){\n      String namespace=System.getProperty(PropertyKeyConst.NAMESPACE);\n      LogUtils.NAMING_LOGGER.info(\"initializer namespace from System Property :\" + namespace);\n      return namespace;\n    }\n  }\n);\n  if (StringUtils.isEmpty(tmpNamespace) && properties != null) {\n    tmpNamespace=properties.getProperty(PropertyKeyConst.NAMESPACE);\n  }\n  tmpNamespace=TemplateUtils.stringEmptyAndThenExecute(tmpNamespace,new Callable<String>(){\n    @Override public String call(){\n      return UtilAndComs.DEFAULT_NAMESPACE_ID;\n    }\n  }\n);\n  return tmpNamespace;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 223,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2625,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 100,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Add a difference to the name naming. This method simply initializes the namespace for Naming. Config initialization is not the same, so it cannot be reused directly.\n * @param properties properties\n * @return namespace\n */\npublic static String initNamespaceForNaming(Properties properties){\n  String tmpNamespace=null;\n  String isUseCloudNamespaceParsing=properties.getProperty(PropertyKeyConst.IS_USE_CLOUD_NAMESPACE_PARSING,System.getProperty(SystemPropertyKeyConst.IS_USE_CLOUD_NAMESPACE_PARSING,String.valueOf(Constants.DEFAULT_USE_CLOUD_NAMESPACE_PARSING)));\n  if (Boolean.parseBoolean(isUseCloudNamespaceParsing)) {\n    tmpNamespace=TenantUtil.getUserTenantForAns();\n    tmpNamespace=TemplateUtils.stringEmptyAndThenExecute(tmpNamespace,new Callable<String>(){\n      @Override public String call(){\n        String namespace=System.getProperty(SystemPropertyKeyConst.ANS_NAMESPACE);\n        LogUtils.NAMING_LOGGER.info(\"initializer namespace from System Property :\" + namespace);\n        return namespace;\n      }\n    }\n);\n    tmpNamespace=TemplateUtils.stringEmptyAndThenExecute(tmpNamespace,new Callable<String>(){\n      @Override public String call(){\n        String namespace=System.getenv(PropertyKeyConst.SystemEnv.ALIBABA_ALIWARE_NAMESPACE);\n        LogUtils.NAMING_LOGGER.info(\"initializer namespace from System Environment :\" + namespace);\n        return namespace;\n      }\n    }\n);\n  }\n  tmpNamespace=TemplateUtils.stringEmptyAndThenExecute(tmpNamespace,new Callable<String>(){\n    @Override public String call(){\n      String namespace=System.getProperty(PropertyKeyConst.NAMESPACE);\n      LogUtils.NAMING_LOGGER.info(\"initializer namespace from System Property :\" + namespace);\n      return namespace;\n    }\n  }\n);\n  if (StringUtils.isEmpty(tmpNamespace) && properties != null) {\n    tmpNamespace=properties.getProperty(PropertyKeyConst.NAMESPACE);\n  }\n  tmpNamespace=TemplateUtils.stringEmptyAndThenExecute(tmpNamespace,new Callable<String>(){\n    @Override public String call(){\n      return UtilAndComs.DEFAULT_NAMESPACE_ID;\n    }\n  }\n);\n  return tmpNamespace;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 234,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 89,
        "startColumnNumber" : 12,
        "endLineNumber" : 89,
        "endColumnNumber" : 67
      },
      "nodeContext" : "StringUtils.isEmpty(tmpNamespace) && properties != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 3
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 18,
    "startLineNumber" : 89,
    "startColumnNumber" : 49,
    "endLineNumber" : 89,
    "endColumnNumber" : 67
  } ],
  "layoutRelationDataList" : [ ]
}