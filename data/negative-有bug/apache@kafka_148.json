{
  "id" : 148,
  "expression" : "\"topic-2 test\"",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/streams/src/test/java/org/apache/kafka/streams/integration/RegexSourceIntegrationTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"topic-2 test\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 323,
      "startColumnNumber" : 41,
      "endLineNumber" : 323,
      "endColumnNumber" : 55
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 323,
        "startColumnNumber" : 21,
        "endLineNumber" : 323,
        "endColumnNumber" : 55
      },
      "nodeContext" : "topic2TestMessage=\"topic-2 test\"",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 323,
        "startColumnNumber" : 8,
        "endLineNumber" : 323,
        "endColumnNumber" : 56
      },
      "nodeContext" : "final String topic2TestMessage=\"topic-2 test\";\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2937,
        "startLineNumber" : 321,
        "startColumnNumber" : 73,
        "endLineNumber" : 367,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String topic1TestMessage=\"topic-1 test\";\n  final String topic2TestMessage=\"topic-2 test\";\n  final String topicATestMessage=\"topic-A test\";\n  final String topicCTestMessage=\"topic-C test\";\n  final String topicYTestMessage=\"topic-Y test\";\n  final String topicZTestMessage=\"topic-Z test\";\n  final Serde<String> stringSerde=Serdes.String();\n  final StreamsBuilder builder=new StreamsBuilder();\n  final KStream<String,String> pattern1Stream=builder.stream(Pattern.compile(\"topic-\\\\d\"));\n  final KStream<String,String> pattern2Stream=builder.stream(Pattern.compile(\"topic-[A-D]\"));\n  final KStream<String,String> namedTopicsStream=builder.stream(Arrays.asList(TOPIC_Y,TOPIC_Z));\n  pattern1Stream.to(outputTopic,Produced.with(stringSerde,stringSerde));\n  pattern2Stream.to(outputTopic,Produced.with(stringSerde,stringSerde));\n  namedTopicsStream.to(outputTopic,Produced.with(stringSerde,stringSerde));\n  streams=new KafkaStreams(builder.build(),streamsConfiguration);\n  streams.start();\n  final Properties producerConfig=TestUtils.producerConfig(CLUSTER.bootstrapServers(),StringSerializer.class,StringSerializer.class);\n  IntegrationTestUtils.produceValuesSynchronously(TOPIC_1,Collections.singleton(topic1TestMessage),producerConfig,mockTime);\n  IntegrationTestUtils.produceValuesSynchronously(TOPIC_2,Collections.singleton(topic2TestMessage),producerConfig,mockTime);\n  IntegrationTestUtils.produceValuesSynchronously(TOPIC_A,Collections.singleton(topicATestMessage),producerConfig,mockTime);\n  IntegrationTestUtils.produceValuesSynchronously(TOPIC_C,Collections.singleton(topicCTestMessage),producerConfig,mockTime);\n  IntegrationTestUtils.produceValuesSynchronously(TOPIC_Y,Collections.singleton(topicYTestMessage),producerConfig,mockTime);\n  IntegrationTestUtils.produceValuesSynchronously(TOPIC_Z,Collections.singleton(topicZTestMessage),producerConfig,mockTime);\n  final Properties consumerConfig=TestUtils.consumerConfig(CLUSTER.bootstrapServers(),StringDeserializer.class,StringDeserializer.class);\n  final List<String> expectedReceivedValues=Arrays.asList(topicATestMessage,topic1TestMessage,topic2TestMessage,topicCTestMessage,topicYTestMessage,topicZTestMessage);\n  final List<KeyValue<String,String>> receivedKeyValues=IntegrationTestUtils.waitUntilMinKeyValueRecordsReceived(consumerConfig,outputTopic,6);\n  final List<String> actualValues=new ArrayList<>(6);\n  for (  final KeyValue<String,String> receivedKeyValue : receivedKeyValues) {\n    actualValues.add(receivedKeyValue.value);\n  }\n  Collections.sort(actualValues);\n  Collections.sort(expectedReceivedValues);\n  assertThat(actualValues,equalTo(expectedReceivedValues));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 354,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3016,
        "startLineNumber" : 320,
        "startColumnNumber" : 4,
        "endLineNumber" : 367,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testShouldReadFromRegexAndNamedTopics() throws Exception {\n  final String topic1TestMessage=\"topic-1 test\";\n  final String topic2TestMessage=\"topic-2 test\";\n  final String topicATestMessage=\"topic-A test\";\n  final String topicCTestMessage=\"topic-C test\";\n  final String topicYTestMessage=\"topic-Y test\";\n  final String topicZTestMessage=\"topic-Z test\";\n  final Serde<String> stringSerde=Serdes.String();\n  final StreamsBuilder builder=new StreamsBuilder();\n  final KStream<String,String> pattern1Stream=builder.stream(Pattern.compile(\"topic-\\\\d\"));\n  final KStream<String,String> pattern2Stream=builder.stream(Pattern.compile(\"topic-[A-D]\"));\n  final KStream<String,String> namedTopicsStream=builder.stream(Arrays.asList(TOPIC_Y,TOPIC_Z));\n  pattern1Stream.to(outputTopic,Produced.with(stringSerde,stringSerde));\n  pattern2Stream.to(outputTopic,Produced.with(stringSerde,stringSerde));\n  namedTopicsStream.to(outputTopic,Produced.with(stringSerde,stringSerde));\n  streams=new KafkaStreams(builder.build(),streamsConfiguration);\n  streams.start();\n  final Properties producerConfig=TestUtils.producerConfig(CLUSTER.bootstrapServers(),StringSerializer.class,StringSerializer.class);\n  IntegrationTestUtils.produceValuesSynchronously(TOPIC_1,Collections.singleton(topic1TestMessage),producerConfig,mockTime);\n  IntegrationTestUtils.produceValuesSynchronously(TOPIC_2,Collections.singleton(topic2TestMessage),producerConfig,mockTime);\n  IntegrationTestUtils.produceValuesSynchronously(TOPIC_A,Collections.singleton(topicATestMessage),producerConfig,mockTime);\n  IntegrationTestUtils.produceValuesSynchronously(TOPIC_C,Collections.singleton(topicCTestMessage),producerConfig,mockTime);\n  IntegrationTestUtils.produceValuesSynchronously(TOPIC_Y,Collections.singleton(topicYTestMessage),producerConfig,mockTime);\n  IntegrationTestUtils.produceValuesSynchronously(TOPIC_Z,Collections.singleton(topicZTestMessage),producerConfig,mockTime);\n  final Properties consumerConfig=TestUtils.consumerConfig(CLUSTER.bootstrapServers(),StringDeserializer.class,StringDeserializer.class);\n  final List<String> expectedReceivedValues=Arrays.asList(topicATestMessage,topic1TestMessage,topic2TestMessage,topicCTestMessage,topicYTestMessage,topicZTestMessage);\n  final List<KeyValue<String,String>> receivedKeyValues=IntegrationTestUtils.waitUntilMinKeyValueRecordsReceived(consumerConfig,outputTopic,6);\n  final List<String> actualValues=new ArrayList<>(6);\n  for (  final KeyValue<String,String> receivedKeyValue : receivedKeyValues) {\n    actualValues.add(receivedKeyValue.value);\n  }\n  Collections.sort(actualValues);\n  Collections.sort(expectedReceivedValues);\n  assertThat(actualValues,equalTo(expectedReceivedValues));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 362,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 323,
        "startColumnNumber" : 8,
        "endLineNumber" : 323,
        "endColumnNumber" : 56
      },
      "nodeContext" : "final String topic2TestMessage=\"topic-2 test\";\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 323,
    "startColumnNumber" : 41,
    "endLineNumber" : 323,
    "endColumnNumber" : 55
  } ],
  "layoutRelationDataList" : [ ]
}