{
  "id" : 261,
  "expression" : "stroke",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "a7188c48845dd423fc9b58bc6bcf6797f6d25b46",
  "filePath" : "/core/src/mindustry/entities/part/HaloPart.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "stroke",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 39,
      "startColumnNumber" : 29,
      "endLineNumber" : 39,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 39,
        "startColumnNumber" : 14,
        "endLineNumber" : 39,
        "endColumnNumber" : 72
      },
      "nodeContext" : "strokeTo < 0 ? stroke : Mathf.lerp(stroke,strokeTo,prog)",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 39,
        "startColumnNumber" : 8,
        "endLineNumber" : 39,
        "endColumnNumber" : 72
      },
      "nodeContext" : "str=strokeTo < 0 ? stroke : Mathf.lerp(stroke,strokeTo,prog)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 427,
        "startLineNumber" : 34,
        "startColumnNumber" : 8,
        "endLineNumber" : 40,
        "endColumnNumber" : 93
      },
      "nodeContext" : "float prog=progress.getClamp(params), baseRot=Time.time * rotateSpeed, rad=radiusTo < 0 ? radius : Mathf.lerp(radius,radiusTo,prog), triLen=triLengthTo < 0 ? triLength : Mathf.lerp(triLength,triLengthTo,prog), str=strokeTo < 0 ? stroke : Mathf.lerp(stroke,strokeTo,prog), haloRad=haloRadiusTo < 0 ? haloRadius : Mathf.lerp(haloRadius,haloRadiusTo,prog);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 67,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2383,
        "startLineNumber" : 27,
        "startColumnNumber" : 39,
        "endLineNumber" : 87,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  float z=Draw.z();\n  if (layer > 0)   Draw.z(layer);\n  if (under && turretShading)   Draw.z(z - 0.0001f);\n  Draw.z(Draw.z() + layerOffset);\n  float prog=progress.getClamp(params), baseRot=Time.time * rotateSpeed, rad=radiusTo < 0 ? radius : Mathf.lerp(radius,radiusTo,prog), triLen=triLengthTo < 0 ? triLength : Mathf.lerp(triLength,triLengthTo,prog), str=strokeTo < 0 ? stroke : Mathf.lerp(stroke,strokeTo,prog), haloRad=haloRadiusTo < 0 ? haloRadius : Mathf.lerp(haloRadius,haloRadiusTo,prog);\n  int len=mirror && params.sideOverride == -1 ? 2 : 1;\n  for (int s=0; s < len; s++) {\n    int i=params.sideOverride == -1 ? s : params.sideOverride;\n    float sign=(i == 0 ? 1 : -1) * params.sideMultiplier;\n    Tmp.v1.set((x + moveX * prog) * sign,y + moveY * prog).rotate(params.rotation - 90);\n    float rx=params.x + Tmp.v1.x, ry=params.y + Tmp.v1.y;\n    if (color != null && colorTo != null) {\n      Draw.color(color,colorTo,prog);\n    }\n else     if (color != null) {\n      Draw.color(color);\n    }\n    float haloRot=(haloRotation + haloRotateSpeed * Time.time) * sign;\n    for (int v=0; v < shapes; v++) {\n      float rot=haloRot + v * 360f / shapes + params.rotation;\n      float shapeX=Angles.trnsx(rot,haloRad) + rx, shapeY=Angles.trnsy(rot,haloRad) + ry;\n      float pointRot=rot + shapeMoveRot * prog * sign + shapeRotation * sign + baseRot * sign;\n      if (tri) {\n        if (rad > 0.001 && triLen > 0.001) {\n          Drawf.tri(shapeX,shapeY,rad,triLen,pointRot);\n        }\n      }\n else       if (!hollow) {\n        if (rad > 0.001) {\n          Fill.poly(shapeX,shapeY,sides,rad,pointRot);\n        }\n      }\n else       if (str > 0.001) {\n        Lines.stroke(str);\n        Lines.poly(shapeX,shapeY,sides,rad,pointRot);\n        Lines.stroke(1f);\n      }\n    }\n    if (color != null)     Draw.color();\n  }\n  Draw.z(z);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 393,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2433,
        "startLineNumber" : 26,
        "startColumnNumber" : 4,
        "endLineNumber" : 87,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void draw(PartParams params){\n  float z=Draw.z();\n  if (layer > 0)   Draw.z(layer);\n  if (under && turretShading)   Draw.z(z - 0.0001f);\n  Draw.z(Draw.z() + layerOffset);\n  float prog=progress.getClamp(params), baseRot=Time.time * rotateSpeed, rad=radiusTo < 0 ? radius : Mathf.lerp(radius,radiusTo,prog), triLen=triLengthTo < 0 ? triLength : Mathf.lerp(triLength,triLengthTo,prog), str=strokeTo < 0 ? stroke : Mathf.lerp(stroke,strokeTo,prog), haloRad=haloRadiusTo < 0 ? haloRadius : Mathf.lerp(haloRadius,haloRadiusTo,prog);\n  int len=mirror && params.sideOverride == -1 ? 2 : 1;\n  for (int s=0; s < len; s++) {\n    int i=params.sideOverride == -1 ? s : params.sideOverride;\n    float sign=(i == 0 ? 1 : -1) * params.sideMultiplier;\n    Tmp.v1.set((x + moveX * prog) * sign,y + moveY * prog).rotate(params.rotation - 90);\n    float rx=params.x + Tmp.v1.x, ry=params.y + Tmp.v1.y;\n    if (color != null && colorTo != null) {\n      Draw.color(color,colorTo,prog);\n    }\n else     if (color != null) {\n      Draw.color(color);\n    }\n    float haloRot=(haloRotation + haloRotateSpeed * Time.time) * sign;\n    for (int v=0; v < shapes; v++) {\n      float rot=haloRot + v * 360f / shapes + params.rotation;\n      float shapeX=Angles.trnsx(rot,haloRad) + rx, shapeY=Angles.trnsy(rot,haloRad) + ry;\n      float pointRot=rot + shapeMoveRot * prog * sign + shapeRotation * sign + baseRot * sign;\n      if (tri) {\n        if (rad > 0.001 && triLen > 0.001) {\n          Drawf.tri(shapeX,shapeY,rad,triLen,pointRot);\n        }\n      }\n else       if (!hollow) {\n        if (rad > 0.001) {\n          Fill.poly(shapeX,shapeY,sides,rad,pointRot);\n        }\n      }\n else       if (str > 0.001) {\n        Lines.stroke(str);\n        Lines.poly(shapeX,shapeY,sides,rad,pointRot);\n        Lines.stroke(1f);\n      }\n    }\n    if (color != null)     Draw.color();\n  }\n  Draw.z(z);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 403,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 39,
        "startColumnNumber" : 8,
        "endLineNumber" : 39,
        "endColumnNumber" : 72
      },
      "nodeContext" : "str=strokeTo < 0 ? stroke : Mathf.lerp(stroke,strokeTo,prog)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "float"
  }, {
    "nodeContext" : "stroke",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 39,
      "startColumnNumber" : 49,
      "endLineNumber" : 39,
      "endColumnNumber" : 55
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,elseExpression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 39,
        "startColumnNumber" : 38,
        "endLineNumber" : 39,
        "endColumnNumber" : 72
      },
      "nodeContext" : "Mathf.lerp(stroke,strokeTo,prog)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 39,
        "startColumnNumber" : 14,
        "endLineNumber" : 39,
        "endColumnNumber" : 72
      },
      "nodeContext" : "strokeTo < 0 ? stroke : Mathf.lerp(stroke,strokeTo,prog)",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 39,
        "startColumnNumber" : 8,
        "endLineNumber" : 39,
        "endColumnNumber" : 72
      },
      "nodeContext" : "str=strokeTo < 0 ? stroke : Mathf.lerp(stroke,strokeTo,prog)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 427,
        "startLineNumber" : 34,
        "startColumnNumber" : 8,
        "endLineNumber" : 40,
        "endColumnNumber" : 93
      },
      "nodeContext" : "float prog=progress.getClamp(params), baseRot=Time.time * rotateSpeed, rad=radiusTo < 0 ? radius : Mathf.lerp(radius,radiusTo,prog), triLen=triLengthTo < 0 ? triLength : Mathf.lerp(triLength,triLengthTo,prog), str=strokeTo < 0 ? stroke : Mathf.lerp(stroke,strokeTo,prog), haloRad=haloRadiusTo < 0 ? haloRadius : Mathf.lerp(haloRadius,haloRadiusTo,prog);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 67,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2383,
        "startLineNumber" : 27,
        "startColumnNumber" : 39,
        "endLineNumber" : 87,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  float z=Draw.z();\n  if (layer > 0)   Draw.z(layer);\n  if (under && turretShading)   Draw.z(z - 0.0001f);\n  Draw.z(Draw.z() + layerOffset);\n  float prog=progress.getClamp(params), baseRot=Time.time * rotateSpeed, rad=radiusTo < 0 ? radius : Mathf.lerp(radius,radiusTo,prog), triLen=triLengthTo < 0 ? triLength : Mathf.lerp(triLength,triLengthTo,prog), str=strokeTo < 0 ? stroke : Mathf.lerp(stroke,strokeTo,prog), haloRad=haloRadiusTo < 0 ? haloRadius : Mathf.lerp(haloRadius,haloRadiusTo,prog);\n  int len=mirror && params.sideOverride == -1 ? 2 : 1;\n  for (int s=0; s < len; s++) {\n    int i=params.sideOverride == -1 ? s : params.sideOverride;\n    float sign=(i == 0 ? 1 : -1) * params.sideMultiplier;\n    Tmp.v1.set((x + moveX * prog) * sign,y + moveY * prog).rotate(params.rotation - 90);\n    float rx=params.x + Tmp.v1.x, ry=params.y + Tmp.v1.y;\n    if (color != null && colorTo != null) {\n      Draw.color(color,colorTo,prog);\n    }\n else     if (color != null) {\n      Draw.color(color);\n    }\n    float haloRot=(haloRotation + haloRotateSpeed * Time.time) * sign;\n    for (int v=0; v < shapes; v++) {\n      float rot=haloRot + v * 360f / shapes + params.rotation;\n      float shapeX=Angles.trnsx(rot,haloRad) + rx, shapeY=Angles.trnsy(rot,haloRad) + ry;\n      float pointRot=rot + shapeMoveRot * prog * sign + shapeRotation * sign + baseRot * sign;\n      if (tri) {\n        if (rad > 0.001 && triLen > 0.001) {\n          Drawf.tri(shapeX,shapeY,rad,triLen,pointRot);\n        }\n      }\n else       if (!hollow) {\n        if (rad > 0.001) {\n          Fill.poly(shapeX,shapeY,sides,rad,pointRot);\n        }\n      }\n else       if (str > 0.001) {\n        Lines.stroke(str);\n        Lines.poly(shapeX,shapeY,sides,rad,pointRot);\n        Lines.stroke(1f);\n      }\n    }\n    if (color != null)     Draw.color();\n  }\n  Draw.z(z);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 393,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2433,
        "startLineNumber" : 26,
        "startColumnNumber" : 4,
        "endLineNumber" : 87,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void draw(PartParams params){\n  float z=Draw.z();\n  if (layer > 0)   Draw.z(layer);\n  if (under && turretShading)   Draw.z(z - 0.0001f);\n  Draw.z(Draw.z() + layerOffset);\n  float prog=progress.getClamp(params), baseRot=Time.time * rotateSpeed, rad=radiusTo < 0 ? radius : Mathf.lerp(radius,radiusTo,prog), triLen=triLengthTo < 0 ? triLength : Mathf.lerp(triLength,triLengthTo,prog), str=strokeTo < 0 ? stroke : Mathf.lerp(stroke,strokeTo,prog), haloRad=haloRadiusTo < 0 ? haloRadius : Mathf.lerp(haloRadius,haloRadiusTo,prog);\n  int len=mirror && params.sideOverride == -1 ? 2 : 1;\n  for (int s=0; s < len; s++) {\n    int i=params.sideOverride == -1 ? s : params.sideOverride;\n    float sign=(i == 0 ? 1 : -1) * params.sideMultiplier;\n    Tmp.v1.set((x + moveX * prog) * sign,y + moveY * prog).rotate(params.rotation - 90);\n    float rx=params.x + Tmp.v1.x, ry=params.y + Tmp.v1.y;\n    if (color != null && colorTo != null) {\n      Draw.color(color,colorTo,prog);\n    }\n else     if (color != null) {\n      Draw.color(color);\n    }\n    float haloRot=(haloRotation + haloRotateSpeed * Time.time) * sign;\n    for (int v=0; v < shapes; v++) {\n      float rot=haloRot + v * 360f / shapes + params.rotation;\n      float shapeX=Angles.trnsx(rot,haloRad) + rx, shapeY=Angles.trnsy(rot,haloRad) + ry;\n      float pointRot=rot + shapeMoveRot * prog * sign + shapeRotation * sign + baseRot * sign;\n      if (tri) {\n        if (rad > 0.001 && triLen > 0.001) {\n          Drawf.tri(shapeX,shapeY,rad,triLen,pointRot);\n        }\n      }\n else       if (!hollow) {\n        if (rad > 0.001) {\n          Fill.poly(shapeX,shapeY,sides,rad,pointRot);\n        }\n      }\n else       if (str > 0.001) {\n        Lines.stroke(str);\n        Lines.poly(shapeX,shapeY,sides,rad,pointRot);\n        Lines.stroke(1f);\n      }\n    }\n    if (color != null)     Draw.color();\n  }\n  Draw.z(z);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 403,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 39,
        "startColumnNumber" : 8,
        "endLineNumber" : 39,
        "endColumnNumber" : 72
      },
      "nodeContext" : "str=strokeTo < 0 ? stroke : Mathf.lerp(stroke,strokeTo,prog)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "float"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 39,
    "startColumnNumber" : 29,
    "endLineNumber" : 39,
    "endColumnNumber" : 35
  }, {
    "charLength" : 6,
    "startLineNumber" : 39,
    "startColumnNumber" : 49,
    "endLineNumber" : 39,
    "endColumnNumber" : 55
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 0
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  } ]
}