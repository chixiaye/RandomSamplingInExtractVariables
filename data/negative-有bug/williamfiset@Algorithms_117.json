{
  "id" : 117,
  "expression" : "new RuntimeException(\"Wrong answer!\")",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/linearalgebra/LinearRecurrenceSolver.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new RuntimeException(\"Wrong answer!\")",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 37,
      "startLineNumber" : 189,
      "startColumnNumber" : 31,
      "endLineNumber" : 189,
      "endColumnNumber" : 68
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 189,
        "startColumnNumber" : 25,
        "endLineNumber" : 189,
        "endColumnNumber" : 69
      },
      "nodeContext" : "throw new RuntimeException(\"Wrong answer!\");\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 189,
        "startColumnNumber" : 4,
        "endLineNumber" : 189,
        "endColumnNumber" : 69
      },
      "nodeContext" : "if (DP[N] != answer) throw new RuntimeException(\"Wrong answer!\");\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1029,
        "startLineNumber" : 160,
        "startColumnNumber" : 41,
        "endLineNumber" : 191,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  long[] coefficients={1,1};\n  long k=0;\n  for (int i=0; i <= 10; i++) {\n    long fib=solveRecurrence(coefficients,1,k,i);\n    System.out.println(fib);\n  }\n  long[] coefficients2={2,0,1};\n  k=2;\n  final int N=25;\n  long[] DP=new long[N + 1];\n  for (int n=0; n <= N; n++) {\n    if (n - 1 >= 0)     DP[n]+=2 * DP[n - 1];\n    if (n - 3 >= 0)     DP[n]+=DP[n - 3];\n    DP[n]+=k;\n  }\n  long answer=solveRecurrence(coefficients2,k,k,N);\n  if (DP[N] != answer)   throw new RuntimeException(\"Wrong answer!\");\n  System.out.printf(\"f(%d) = %d\\n\",N,answer);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 159,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1068,
        "startLineNumber" : 160,
        "startColumnNumber" : 2,
        "endLineNumber" : 191,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public static void main(String[] args){\n  long[] coefficients={1,1};\n  long k=0;\n  for (int i=0; i <= 10; i++) {\n    long fib=solveRecurrence(coefficients,1,k,i);\n    System.out.println(fib);\n  }\n  long[] coefficients2={2,0,1};\n  k=2;\n  final int N=25;\n  long[] DP=new long[N + 1];\n  for (int n=0; n <= N; n++) {\n    if (n - 1 >= 0)     DP[n]+=2 * DP[n - 1];\n    if (n - 3 >= 0)     DP[n]+=DP[n - 3];\n    DP[n]+=k;\n  }\n  long answer=solveRecurrence(coefficients2,k,k,N);\n  if (DP[N] != answer)   throw new RuntimeException(\"Wrong answer!\");\n  System.out.printf(\"f(%d) = %d\\n\",N,answer);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 170,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 189,
        "startColumnNumber" : 4,
        "endLineNumber" : 189,
        "endColumnNumber" : 69
      },
      "nodeContext" : "if (DP[N] != answer) throw new RuntimeException(\"Wrong answer!\");\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "java.lang.RuntimeException"
  } ],
  "positionList" : [ {
    "charLength" : 37,
    "startLineNumber" : 189,
    "startColumnNumber" : 31,
    "endLineNumber" : 189,
    "endColumnNumber" : 68
  } ],
  "layoutRelationDataList" : [ ]
}