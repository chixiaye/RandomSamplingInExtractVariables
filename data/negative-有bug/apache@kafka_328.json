{
  "id" : 328,
  "expression" : "record",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/streams/src/main/java/org/apache/kafka/streams/processor/ExtractRecordMetadataTimestamp.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "record",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 56,
      "startColumnNumber" : 31,
      "endLineNumber" : 56,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 56,
        "startColumnNumber" : 31,
        "endLineNumber" : 56,
        "endColumnNumber" : 49
      },
      "nodeContext" : "record.timestamp()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 56,
        "startColumnNumber" : 19,
        "endLineNumber" : 56,
        "endColumnNumber" : 49
      },
      "nodeContext" : "timestamp=record.timestamp()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 56,
        "startColumnNumber" : 8,
        "endLineNumber" : 56,
        "endColumnNumber" : 50
      },
      "nodeContext" : "final long timestamp=record.timestamp();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 198,
        "startLineNumber" : 55,
        "startColumnNumber" : 95,
        "endLineNumber" : 63,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final long timestamp=record.timestamp();\n  if (timestamp < 0) {\n    return onInvalidTimestamp(record,timestamp,partitionTime);\n  }\n  return timestamp;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 657,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 63,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Extracts the embedded metadata timestamp from the given  {@link ConsumerRecord}.\n * @param record a data record\n * @param partitionTime the highest extracted valid timestamp of the current record's partition˙ (could be -1 if unknown)\n * @return the embedded metadata timestamp of the given {@link ConsumerRecord}\n */\n@Override public long extract(final ConsumerRecord<Object,Object> record,final long partitionTime){\n  final long timestamp=record.timestamp();\n  if (timestamp < 0) {\n    return onInvalidTimestamp(record,timestamp,partitionTime);\n  }\n  return timestamp;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 43,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 56,
        "startColumnNumber" : 8,
        "endLineNumber" : 56,
        "endColumnNumber" : 50
      },
      "nodeContext" : "final long timestamp=record.timestamp();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object,java.lang.Object>"
  }, {
    "nodeContext" : "record",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 59,
      "startColumnNumber" : 38,
      "endLineNumber" : 59,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 59,
        "startColumnNumber" : 19,
        "endLineNumber" : 59,
        "endColumnNumber" : 71
      },
      "nodeContext" : "onInvalidTimestamp(record,timestamp,partitionTime)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 59,
        "startColumnNumber" : 12,
        "endLineNumber" : 59,
        "endColumnNumber" : 72
      },
      "nodeContext" : "return onInvalidTimestamp(record,timestamp,partitionTime);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 58,
        "startColumnNumber" : 27,
        "endLineNumber" : 60,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  return onInvalidTimestamp(record,timestamp,partitionTime);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 58,
        "startColumnNumber" : 8,
        "endLineNumber" : 60,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (timestamp < 0) {\n  return onInvalidTimestamp(record,timestamp,partitionTime);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 198,
        "startLineNumber" : 55,
        "startColumnNumber" : 95,
        "endLineNumber" : 63,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final long timestamp=record.timestamp();\n  if (timestamp < 0) {\n    return onInvalidTimestamp(record,timestamp,partitionTime);\n  }\n  return timestamp;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 657,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 63,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Extracts the embedded metadata timestamp from the given  {@link ConsumerRecord}.\n * @param record a data record\n * @param partitionTime the highest extracted valid timestamp of the current record's partition˙ (could be -1 if unknown)\n * @return the embedded metadata timestamp of the given {@link ConsumerRecord}\n */\n@Override public long extract(final ConsumerRecord<Object,Object> record,final long partitionTime){\n  final long timestamp=record.timestamp();\n  if (timestamp < 0) {\n    return onInvalidTimestamp(record,timestamp,partitionTime);\n  }\n  return timestamp;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 43,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 59,
        "startColumnNumber" : 12,
        "endLineNumber" : 59,
        "endColumnNumber" : 72
      },
      "nodeContext" : "return onInvalidTimestamp(record,timestamp,partitionTime);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object,java.lang.Object>"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 56,
    "startColumnNumber" : 31,
    "endLineNumber" : 56,
    "endColumnNumber" : 37
  }, {
    "charLength" : 6,
    "startLineNumber" : 59,
    "startColumnNumber" : 38,
    "endLineNumber" : 59,
    "endColumnNumber" : 44
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}