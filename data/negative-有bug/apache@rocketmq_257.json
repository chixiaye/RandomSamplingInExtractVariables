{
  "id" : 257,
  "expression" : "\"%s pop receive msg count: %d%n\"",
  "projectName" : "apache@rocketmq",
  "commitID" : "7692d466e1fda6c29d52a61617cab1d82de8b884",
  "filePath" : "/test/src/test/java/org/apache/rocketmq/test/container/PopSlaveActingMasterIT.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"%s pop receive msg count: %d%n\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 32,
      "startLineNumber" : 142,
      "startColumnNumber" : 26,
      "endLineNumber" : 142,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 142,
        "startColumnNumber" : 8,
        "endLineNumber" : 142,
        "endColumnNumber" : 105
      },
      "nodeContext" : "System.out.printf(\"%s pop receive msg count: %d%n\",LocalDateTime.now(),consumedMessages.size())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 142,
        "startColumnNumber" : 8,
        "endLineNumber" : 142,
        "endColumnNumber" : 106
      },
      "nodeContext" : "System.out.printf(\"%s pop receive msg count: %d%n\",LocalDateTime.now(),consumedMessages.size());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3070,
        "startLineNumber" : 99,
        "startColumnNumber" : 60,
        "endLineNumber" : 167,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String topic=PopSlaveActingMasterIT.class.getSimpleName() + random.nextInt(65535);\n  createTopic(topic);\n  String retryTopic=KeyBuilder.buildPopRetryTopic(topic,CONSUME_GROUP);\n  createTopic(retryTopic);\n  this.switchPop(topic);\n  producer.getDefaultMQProducerImpl().getmQClientFactory().updateTopicRouteInfoFromNameServer(topic);\n  MessageQueue messageQueue=new MessageQueue(topic,master1With3Replicas.getBrokerConfig().getBrokerName(),0);\n  int sendSuccess=0;\n  for (int i=0; i < MESSAGE_COUNT; i++) {\n    Message msg=new Message(topic,MESSAGE_BODY);\n    SendResult sendResult=producer.send(msg,messageQueue);\n    if (sendResult.getSendStatus() == SendStatus.SEND_OK) {\n      System.out.println(\"send message id: \" + sendResult.getMsgId());\n      sendSuccess++;\n    }\n  }\n  System.out.printf(\"send success %d%n\",sendSuccess);\n  final int finalSendSuccess=sendSuccess;\n  await().atMost(Duration.ofMinutes(1)).until(() -> finalSendSuccess >= MESSAGE_COUNT);\n  isolateBroker(master1With3Replicas);\n  System.out.printf(\"isolate master1%n\");\n  DefaultMQPushConsumer consumer=createPushConsumer(CONSUME_GROUP);\n  consumer.subscribe(topic,\"*\");\n  consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n  List<String> consumedMessages=new CopyOnWriteArrayList<>();\n  consumer.registerMessageListener((MessageListenerConcurrently)(msgs,context) -> {\n    msgs.forEach(msg -> {\n      System.out.println(\"receive msg id: \" + msg.getMsgId());\n      consumedMessages.add(msg.getMsgId());\n    }\n);\n    return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n  }\n);\n  consumer.setClientRebalance(false);\n  consumer.start();\n  await().atMost(Duration.ofMinutes(1)).until(() -> consumedMessages.size() >= MESSAGE_COUNT);\n  System.out.printf(\"%s pop receive msg count: %d%n\",LocalDateTime.now(),consumedMessages.size());\n  consumer.shutdown();\n  List<String> retryMsgList=new CopyOnWriteArrayList<>();\n  DefaultMQPushConsumer pushConsumer=createPushConsumer(CONSUME_GROUP);\n  pushConsumer.subscribe(retryTopic,\"*\");\n  pushConsumer.registerMessageListener((MessageListenerConcurrently)(msgs,context) -> {\n    for (    MessageExt msg : msgs) {\n      System.out.printf(\"receive retry msg: %s %s%n\",new String(msg.getBody()),msg);\n      retryMsgList.add(new String(msg.getBody()));\n    }\n    return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n  }\n);\n  pushConsumer.start();\n  System.out.printf(\"wait for ack revive%n\");\n  Thread.sleep(10000L);\n  assertThat(retryMsgList.size()).isEqualTo(0);\n  cancelIsolatedBroker(master1With3Replicas);\n  awaitUntilSlaveOK();\n  pushConsumer.shutdown();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 392,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3137,
        "startLineNumber" : 98,
        "startColumnNumber" : 4,
        "endLineNumber" : 167,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testLocalActing_ackSlave() throws Exception {\n  String topic=PopSlaveActingMasterIT.class.getSimpleName() + random.nextInt(65535);\n  createTopic(topic);\n  String retryTopic=KeyBuilder.buildPopRetryTopic(topic,CONSUME_GROUP);\n  createTopic(retryTopic);\n  this.switchPop(topic);\n  producer.getDefaultMQProducerImpl().getmQClientFactory().updateTopicRouteInfoFromNameServer(topic);\n  MessageQueue messageQueue=new MessageQueue(topic,master1With3Replicas.getBrokerConfig().getBrokerName(),0);\n  int sendSuccess=0;\n  for (int i=0; i < MESSAGE_COUNT; i++) {\n    Message msg=new Message(topic,MESSAGE_BODY);\n    SendResult sendResult=producer.send(msg,messageQueue);\n    if (sendResult.getSendStatus() == SendStatus.SEND_OK) {\n      System.out.println(\"send message id: \" + sendResult.getMsgId());\n      sendSuccess++;\n    }\n  }\n  System.out.printf(\"send success %d%n\",sendSuccess);\n  final int finalSendSuccess=sendSuccess;\n  await().atMost(Duration.ofMinutes(1)).until(() -> finalSendSuccess >= MESSAGE_COUNT);\n  isolateBroker(master1With3Replicas);\n  System.out.printf(\"isolate master1%n\");\n  DefaultMQPushConsumer consumer=createPushConsumer(CONSUME_GROUP);\n  consumer.subscribe(topic,\"*\");\n  consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n  List<String> consumedMessages=new CopyOnWriteArrayList<>();\n  consumer.registerMessageListener((MessageListenerConcurrently)(msgs,context) -> {\n    msgs.forEach(msg -> {\n      System.out.println(\"receive msg id: \" + msg.getMsgId());\n      consumedMessages.add(msg.getMsgId());\n    }\n);\n    return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n  }\n);\n  consumer.setClientRebalance(false);\n  consumer.start();\n  await().atMost(Duration.ofMinutes(1)).until(() -> consumedMessages.size() >= MESSAGE_COUNT);\n  System.out.printf(\"%s pop receive msg count: %d%n\",LocalDateTime.now(),consumedMessages.size());\n  consumer.shutdown();\n  List<String> retryMsgList=new CopyOnWriteArrayList<>();\n  DefaultMQPushConsumer pushConsumer=createPushConsumer(CONSUME_GROUP);\n  pushConsumer.subscribe(retryTopic,\"*\");\n  pushConsumer.registerMessageListener((MessageListenerConcurrently)(msgs,context) -> {\n    for (    MessageExt msg : msgs) {\n      System.out.printf(\"receive retry msg: %s %s%n\",new String(msg.getBody()),msg);\n      retryMsgList.add(new String(msg.getBody()));\n    }\n    return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n  }\n);\n  pushConsumer.start();\n  System.out.printf(\"wait for ack revive%n\");\n  Thread.sleep(10000L);\n  assertThat(retryMsgList.size()).isEqualTo(0);\n  cancelIsolatedBroker(master1With3Replicas);\n  awaitUntilSlaveOK();\n  pushConsumer.shutdown();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 400,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 142,
        "startColumnNumber" : 8,
        "endLineNumber" : 142,
        "endColumnNumber" : 106
      },
      "nodeContext" : "System.out.printf(\"%s pop receive msg count: %d%n\",LocalDateTime.now(),consumedMessages.size());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 6,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 32,
    "startLineNumber" : 142,
    "startColumnNumber" : 26,
    "endLineNumber" : 142,
    "endColumnNumber" : 58
  } ],
  "layoutRelationDataList" : [ ]
}