{
  "id" : 367,
  "expression" : "null",
  "projectName" : "keycloak@keycloak",
  "commitID" : "aacae9b9acb0fbedc49d4f88c9fbd7aa11922dce",
  "filePath" : "/integration/client-cli/admin-cli/src/main/java/org/keycloak/client/admin/cli/commands/RemoveRolesCmd.java",
  "occurrences" : 23,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 116,
      "startColumnNumber" : 23,
      "endLineNumber" : 116,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 116,
        "startColumnNumber" : 16,
        "endLineNumber" : 116,
        "endColumnNumber" : 27
      },
      "nodeContext" : "uid != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 116,
        "startColumnNumber" : 16,
        "endLineNumber" : 116,
        "endColumnNumber" : 48
      },
      "nodeContext" : "uid != null && uusername != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 175,
        "startLineNumber" : 116,
        "startColumnNumber" : 12,
        "endLineNumber" : 118,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (uid != null && uusername != null) {\n  throw new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 7830,
        "startLineNumber" : 88,
        "startColumnNumber" : 12,
        "endLineNumber" : 255,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (printHelp()) {\n    return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n  }\n  processGlobalOptions();\n  Iterator<String> it=args.iterator();\n  while (it.hasNext()) {\n    String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n        optionRequiresValueCheck(it,option);\n        roleNames.add(it.next());\n        break;\n      }\ncase \"--roleid\":{\n      optionRequiresValueCheck(it,option);\n      roleIds.add(it.next());\n      break;\n    }\ndefault:{\n    throw new IllegalArgumentException(\"Invalid option: \" + option);\n  }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\nuid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nUserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nUserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\ngid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\ngid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nGroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nGroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\nrid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nRoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nRoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 694,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8022,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 259,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (printHelp()) {\n    return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n  }\n  processGlobalOptions();\n  Iterator<String> it=args.iterator();\n  while (it.hasNext()) {\n    String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n        optionRequiresValueCheck(it,option);\n        roleNames.add(it.next());\n        break;\n      }\ncase \"--roleid\":{\n      optionRequiresValueCheck(it,option);\n      roleIds.add(it.next());\n      break;\n    }\ndefault:{\n    throw new IllegalArgumentException(\"Invalid option: \" + option);\n  }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\nuid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nUserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nUserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\ngid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\ngid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nGroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nGroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\nrid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nRoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nRoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 717,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8144,
        "startLineNumber" : 83,
        "startColumnNumber" : 116,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<String> roleNames=new LinkedList<>();\n  List<String> roleIds=new LinkedList<>();\n  try {\n    if (printHelp()) {\n      return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n    }\n    processGlobalOptions();\n    Iterator<String> it=args.iterator();\n    while (it.hasNext()) {\n      String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n          optionRequiresValueCheck(it,option);\n          roleNames.add(it.next());\n          break;\n        }\ncase \"--roleid\":{\n        optionRequiresValueCheck(it,option);\n        roleIds.add(it.next());\n        break;\n      }\ndefault:{\n      throw new IllegalArgumentException(\"Invalid option: \" + option);\n    }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\n  uid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  UserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  UserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\n  gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\n  gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\n  rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 742,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8270,
        "startLineNumber" : 82,
        "startColumnNumber" : 4,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public CommandResult execute(CommandInvocation commandInvocation) throws CommandException, InterruptedException {\n  List<String> roleNames=new LinkedList<>();\n  List<String> roleIds=new LinkedList<>();\n  try {\n    if (printHelp()) {\n      return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n    }\n    processGlobalOptions();\n    Iterator<String> it=args.iterator();\n    while (it.hasNext()) {\n      String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n          optionRequiresValueCheck(it,option);\n          roleNames.add(it.next());\n          break;\n        }\ncase \"--roleid\":{\n        optionRequiresValueCheck(it,option);\n        roleIds.add(it.next());\n        break;\n      }\ndefault:{\n      throw new IllegalArgumentException(\"Invalid option: \" + option);\n    }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\n  uid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  UserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  UserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\n  gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\n  gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\n  rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 757,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 116,
        "startColumnNumber" : 16,
        "endLineNumber" : 116,
        "endColumnNumber" : 48
      },
      "nodeContext" : "uid != null && uusername != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 116,
      "startColumnNumber" : 44,
      "endLineNumber" : 116,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 116,
        "startColumnNumber" : 31,
        "endLineNumber" : 116,
        "endColumnNumber" : 48
      },
      "nodeContext" : "uusername != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 116,
        "startColumnNumber" : 16,
        "endLineNumber" : 116,
        "endColumnNumber" : 48
      },
      "nodeContext" : "uid != null && uusername != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 175,
        "startLineNumber" : 116,
        "startColumnNumber" : 12,
        "endLineNumber" : 118,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (uid != null && uusername != null) {\n  throw new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 7830,
        "startLineNumber" : 88,
        "startColumnNumber" : 12,
        "endLineNumber" : 255,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (printHelp()) {\n    return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n  }\n  processGlobalOptions();\n  Iterator<String> it=args.iterator();\n  while (it.hasNext()) {\n    String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n        optionRequiresValueCheck(it,option);\n        roleNames.add(it.next());\n        break;\n      }\ncase \"--roleid\":{\n      optionRequiresValueCheck(it,option);\n      roleIds.add(it.next());\n      break;\n    }\ndefault:{\n    throw new IllegalArgumentException(\"Invalid option: \" + option);\n  }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\nuid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nUserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nUserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\ngid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\ngid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nGroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nGroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\nrid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nRoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nRoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 694,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8022,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 259,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (printHelp()) {\n    return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n  }\n  processGlobalOptions();\n  Iterator<String> it=args.iterator();\n  while (it.hasNext()) {\n    String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n        optionRequiresValueCheck(it,option);\n        roleNames.add(it.next());\n        break;\n      }\ncase \"--roleid\":{\n      optionRequiresValueCheck(it,option);\n      roleIds.add(it.next());\n      break;\n    }\ndefault:{\n    throw new IllegalArgumentException(\"Invalid option: \" + option);\n  }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\nuid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nUserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nUserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\ngid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\ngid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nGroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nGroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\nrid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nRoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nRoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 717,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8144,
        "startLineNumber" : 83,
        "startColumnNumber" : 116,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<String> roleNames=new LinkedList<>();\n  List<String> roleIds=new LinkedList<>();\n  try {\n    if (printHelp()) {\n      return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n    }\n    processGlobalOptions();\n    Iterator<String> it=args.iterator();\n    while (it.hasNext()) {\n      String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n          optionRequiresValueCheck(it,option);\n          roleNames.add(it.next());\n          break;\n        }\ncase \"--roleid\":{\n        optionRequiresValueCheck(it,option);\n        roleIds.add(it.next());\n        break;\n      }\ndefault:{\n      throw new IllegalArgumentException(\"Invalid option: \" + option);\n    }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\n  uid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  UserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  UserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\n  gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\n  gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\n  rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 742,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8270,
        "startLineNumber" : 82,
        "startColumnNumber" : 4,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public CommandResult execute(CommandInvocation commandInvocation) throws CommandException, InterruptedException {\n  List<String> roleNames=new LinkedList<>();\n  List<String> roleIds=new LinkedList<>();\n  try {\n    if (printHelp()) {\n      return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n    }\n    processGlobalOptions();\n    Iterator<String> it=args.iterator();\n    while (it.hasNext()) {\n      String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n          optionRequiresValueCheck(it,option);\n          roleNames.add(it.next());\n          break;\n        }\ncase \"--roleid\":{\n        optionRequiresValueCheck(it,option);\n        roleIds.add(it.next());\n        break;\n      }\ndefault:{\n      throw new IllegalArgumentException(\"Invalid option: \" + option);\n    }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\n  uid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  UserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  UserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\n  gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\n  gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\n  rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 757,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 116,
        "startColumnNumber" : 16,
        "endLineNumber" : 116,
        "endColumnNumber" : 48
      },
      "nodeContext" : "uid != null && uusername != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 120,
      "startColumnNumber" : 24,
      "endLineNumber" : 120,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 120,
        "startColumnNumber" : 17,
        "endLineNumber" : 120,
        "endColumnNumber" : 28
      },
      "nodeContext" : "gid != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 120,
        "startColumnNumber" : 17,
        "endLineNumber" : 120,
        "endColumnNumber" : 45
      },
      "nodeContext" : "gid != null && gname != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 120,
        "startColumnNumber" : 16,
        "endLineNumber" : 120,
        "endColumnNumber" : 46
      },
      "nodeContext" : "(gid != null && gname != null)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 120,
        "startColumnNumber" : 16,
        "endLineNumber" : 120,
        "endColumnNumber" : 116
      },
      "nodeContext" : "(gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 25,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 248,
        "startLineNumber" : 120,
        "startColumnNumber" : 12,
        "endLineNumber" : 122,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\n  throw new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 32,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 7830,
        "startLineNumber" : 88,
        "startColumnNumber" : 12,
        "endLineNumber" : 255,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (printHelp()) {\n    return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n  }\n  processGlobalOptions();\n  Iterator<String> it=args.iterator();\n  while (it.hasNext()) {\n    String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n        optionRequiresValueCheck(it,option);\n        roleNames.add(it.next());\n        break;\n      }\ncase \"--roleid\":{\n      optionRequiresValueCheck(it,option);\n      roleIds.add(it.next());\n      break;\n    }\ndefault:{\n    throw new IllegalArgumentException(\"Invalid option: \" + option);\n  }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\nuid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nUserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nUserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\ngid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\ngid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nGroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nGroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\nrid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nRoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nRoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 694,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8022,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 259,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (printHelp()) {\n    return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n  }\n  processGlobalOptions();\n  Iterator<String> it=args.iterator();\n  while (it.hasNext()) {\n    String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n        optionRequiresValueCheck(it,option);\n        roleNames.add(it.next());\n        break;\n      }\ncase \"--roleid\":{\n      optionRequiresValueCheck(it,option);\n      roleIds.add(it.next());\n      break;\n    }\ndefault:{\n    throw new IllegalArgumentException(\"Invalid option: \" + option);\n  }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\nuid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nUserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nUserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\ngid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\ngid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nGroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nGroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\nrid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nRoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nRoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 717,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8144,
        "startLineNumber" : 83,
        "startColumnNumber" : 116,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<String> roleNames=new LinkedList<>();\n  List<String> roleIds=new LinkedList<>();\n  try {\n    if (printHelp()) {\n      return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n    }\n    processGlobalOptions();\n    Iterator<String> it=args.iterator();\n    while (it.hasNext()) {\n      String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n          optionRequiresValueCheck(it,option);\n          roleNames.add(it.next());\n          break;\n        }\ncase \"--roleid\":{\n        optionRequiresValueCheck(it,option);\n        roleIds.add(it.next());\n        break;\n      }\ndefault:{\n      throw new IllegalArgumentException(\"Invalid option: \" + option);\n    }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\n  uid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  UserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  UserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\n  gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\n  gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\n  rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 742,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8270,
        "startLineNumber" : 82,
        "startColumnNumber" : 4,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public CommandResult execute(CommandInvocation commandInvocation) throws CommandException, InterruptedException {\n  List<String> roleNames=new LinkedList<>();\n  List<String> roleIds=new LinkedList<>();\n  try {\n    if (printHelp()) {\n      return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n    }\n    processGlobalOptions();\n    Iterator<String> it=args.iterator();\n    while (it.hasNext()) {\n      String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n          optionRequiresValueCheck(it,option);\n          roleNames.add(it.next());\n          break;\n        }\ncase \"--roleid\":{\n        optionRequiresValueCheck(it,option);\n        roleIds.add(it.next());\n        break;\n      }\ndefault:{\n      throw new IllegalArgumentException(\"Invalid option: \" + option);\n    }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\n  uid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  UserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  UserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\n  gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\n  gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\n  rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 757,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 120,
        "startColumnNumber" : 16,
        "endLineNumber" : 120,
        "endColumnNumber" : 116
      },
      "nodeContext" : "(gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 25,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 120,
      "startColumnNumber" : 41,
      "endLineNumber" : 120,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 120,
        "startColumnNumber" : 32,
        "endLineNumber" : 120,
        "endColumnNumber" : 45
      },
      "nodeContext" : "gname != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 120,
        "startColumnNumber" : 17,
        "endLineNumber" : 120,
        "endColumnNumber" : 45
      },
      "nodeContext" : "gid != null && gname != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 120,
        "startColumnNumber" : 16,
        "endLineNumber" : 120,
        "endColumnNumber" : 46
      },
      "nodeContext" : "(gid != null && gname != null)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 120,
        "startColumnNumber" : 16,
        "endLineNumber" : 120,
        "endColumnNumber" : 116
      },
      "nodeContext" : "(gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 25,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 248,
        "startLineNumber" : 120,
        "startColumnNumber" : 12,
        "endLineNumber" : 122,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\n  throw new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 32,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 7830,
        "startLineNumber" : 88,
        "startColumnNumber" : 12,
        "endLineNumber" : 255,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (printHelp()) {\n    return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n  }\n  processGlobalOptions();\n  Iterator<String> it=args.iterator();\n  while (it.hasNext()) {\n    String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n        optionRequiresValueCheck(it,option);\n        roleNames.add(it.next());\n        break;\n      }\ncase \"--roleid\":{\n      optionRequiresValueCheck(it,option);\n      roleIds.add(it.next());\n      break;\n    }\ndefault:{\n    throw new IllegalArgumentException(\"Invalid option: \" + option);\n  }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\nuid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nUserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nUserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\ngid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\ngid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nGroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nGroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\nrid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nRoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nRoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 694,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8022,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 259,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (printHelp()) {\n    return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n  }\n  processGlobalOptions();\n  Iterator<String> it=args.iterator();\n  while (it.hasNext()) {\n    String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n        optionRequiresValueCheck(it,option);\n        roleNames.add(it.next());\n        break;\n      }\ncase \"--roleid\":{\n      optionRequiresValueCheck(it,option);\n      roleIds.add(it.next());\n      break;\n    }\ndefault:{\n    throw new IllegalArgumentException(\"Invalid option: \" + option);\n  }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\nuid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nUserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nUserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\ngid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\ngid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nGroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nGroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\nrid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nRoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nRoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 717,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8144,
        "startLineNumber" : 83,
        "startColumnNumber" : 116,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<String> roleNames=new LinkedList<>();\n  List<String> roleIds=new LinkedList<>();\n  try {\n    if (printHelp()) {\n      return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n    }\n    processGlobalOptions();\n    Iterator<String> it=args.iterator();\n    while (it.hasNext()) {\n      String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n          optionRequiresValueCheck(it,option);\n          roleNames.add(it.next());\n          break;\n        }\ncase \"--roleid\":{\n        optionRequiresValueCheck(it,option);\n        roleIds.add(it.next());\n        break;\n      }\ndefault:{\n      throw new IllegalArgumentException(\"Invalid option: \" + option);\n    }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\n  uid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  UserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  UserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\n  gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\n  gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\n  rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 742,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8270,
        "startLineNumber" : 82,
        "startColumnNumber" : 4,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public CommandResult execute(CommandInvocation commandInvocation) throws CommandException, InterruptedException {\n  List<String> roleNames=new LinkedList<>();\n  List<String> roleIds=new LinkedList<>();\n  try {\n    if (printHelp()) {\n      return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n    }\n    processGlobalOptions();\n    Iterator<String> it=args.iterator();\n    while (it.hasNext()) {\n      String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n          optionRequiresValueCheck(it,option);\n          roleNames.add(it.next());\n          break;\n        }\ncase \"--roleid\":{\n        optionRequiresValueCheck(it,option);\n        roleIds.add(it.next());\n        break;\n      }\ndefault:{\n      throw new IllegalArgumentException(\"Invalid option: \" + option);\n    }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\n  uid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  UserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  UserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\n  gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\n  gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\n  rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 757,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 120,
        "startColumnNumber" : 16,
        "endLineNumber" : 120,
        "endColumnNumber" : 116
      },
      "nodeContext" : "(gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 25,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 120,
      "startColumnNumber" : 58,
      "endLineNumber" : 120,
      "endColumnNumber" : 62
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 120,
        "startColumnNumber" : 51,
        "endLineNumber" : 120,
        "endColumnNumber" : 62
      },
      "nodeContext" : "gid != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 120,
        "startColumnNumber" : 51,
        "endLineNumber" : 120,
        "endColumnNumber" : 79
      },
      "nodeContext" : "gid != null && gpath != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 120,
        "startColumnNumber" : 50,
        "endLineNumber" : 120,
        "endColumnNumber" : 80
      },
      "nodeContext" : "(gid != null && gpath != null)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 120,
        "startColumnNumber" : 16,
        "endLineNumber" : 120,
        "endColumnNumber" : 116
      },
      "nodeContext" : "(gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 25,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 248,
        "startLineNumber" : 120,
        "startColumnNumber" : 12,
        "endLineNumber" : 122,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\n  throw new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 32,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 7830,
        "startLineNumber" : 88,
        "startColumnNumber" : 12,
        "endLineNumber" : 255,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (printHelp()) {\n    return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n  }\n  processGlobalOptions();\n  Iterator<String> it=args.iterator();\n  while (it.hasNext()) {\n    String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n        optionRequiresValueCheck(it,option);\n        roleNames.add(it.next());\n        break;\n      }\ncase \"--roleid\":{\n      optionRequiresValueCheck(it,option);\n      roleIds.add(it.next());\n      break;\n    }\ndefault:{\n    throw new IllegalArgumentException(\"Invalid option: \" + option);\n  }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\nuid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nUserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nUserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\ngid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\ngid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nGroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nGroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\nrid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nRoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nRoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 694,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8022,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 259,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (printHelp()) {\n    return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n  }\n  processGlobalOptions();\n  Iterator<String> it=args.iterator();\n  while (it.hasNext()) {\n    String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n        optionRequiresValueCheck(it,option);\n        roleNames.add(it.next());\n        break;\n      }\ncase \"--roleid\":{\n      optionRequiresValueCheck(it,option);\n      roleIds.add(it.next());\n      break;\n    }\ndefault:{\n    throw new IllegalArgumentException(\"Invalid option: \" + option);\n  }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\nuid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nUserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nUserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\ngid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\ngid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nGroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nGroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\nrid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nRoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nRoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 717,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8144,
        "startLineNumber" : 83,
        "startColumnNumber" : 116,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<String> roleNames=new LinkedList<>();\n  List<String> roleIds=new LinkedList<>();\n  try {\n    if (printHelp()) {\n      return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n    }\n    processGlobalOptions();\n    Iterator<String> it=args.iterator();\n    while (it.hasNext()) {\n      String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n          optionRequiresValueCheck(it,option);\n          roleNames.add(it.next());\n          break;\n        }\ncase \"--roleid\":{\n        optionRequiresValueCheck(it,option);\n        roleIds.add(it.next());\n        break;\n      }\ndefault:{\n      throw new IllegalArgumentException(\"Invalid option: \" + option);\n    }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\n  uid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  UserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  UserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\n  gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\n  gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\n  rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 742,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8270,
        "startLineNumber" : 82,
        "startColumnNumber" : 4,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public CommandResult execute(CommandInvocation commandInvocation) throws CommandException, InterruptedException {\n  List<String> roleNames=new LinkedList<>();\n  List<String> roleIds=new LinkedList<>();\n  try {\n    if (printHelp()) {\n      return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n    }\n    processGlobalOptions();\n    Iterator<String> it=args.iterator();\n    while (it.hasNext()) {\n      String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n          optionRequiresValueCheck(it,option);\n          roleNames.add(it.next());\n          break;\n        }\ncase \"--roleid\":{\n        optionRequiresValueCheck(it,option);\n        roleIds.add(it.next());\n        break;\n      }\ndefault:{\n      throw new IllegalArgumentException(\"Invalid option: \" + option);\n    }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\n  uid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  UserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  UserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\n  gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\n  gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\n  rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 757,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 120,
        "startColumnNumber" : 16,
        "endLineNumber" : 120,
        "endColumnNumber" : 116
      },
      "nodeContext" : "(gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 25,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 120,
      "startColumnNumber" : 75,
      "endLineNumber" : 120,
      "endColumnNumber" : 79
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 120,
        "startColumnNumber" : 66,
        "endLineNumber" : 120,
        "endColumnNumber" : 79
      },
      "nodeContext" : "gpath != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 120,
        "startColumnNumber" : 51,
        "endLineNumber" : 120,
        "endColumnNumber" : 79
      },
      "nodeContext" : "gid != null && gpath != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 120,
        "startColumnNumber" : 50,
        "endLineNumber" : 120,
        "endColumnNumber" : 80
      },
      "nodeContext" : "(gid != null && gpath != null)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 120,
        "startColumnNumber" : 16,
        "endLineNumber" : 120,
        "endColumnNumber" : 116
      },
      "nodeContext" : "(gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 25,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 248,
        "startLineNumber" : 120,
        "startColumnNumber" : 12,
        "endLineNumber" : 122,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\n  throw new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 32,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 7830,
        "startLineNumber" : 88,
        "startColumnNumber" : 12,
        "endLineNumber" : 255,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (printHelp()) {\n    return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n  }\n  processGlobalOptions();\n  Iterator<String> it=args.iterator();\n  while (it.hasNext()) {\n    String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n        optionRequiresValueCheck(it,option);\n        roleNames.add(it.next());\n        break;\n      }\ncase \"--roleid\":{\n      optionRequiresValueCheck(it,option);\n      roleIds.add(it.next());\n      break;\n    }\ndefault:{\n    throw new IllegalArgumentException(\"Invalid option: \" + option);\n  }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\nuid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nUserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nUserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\ngid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\ngid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nGroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nGroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\nrid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nRoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nRoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 694,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8022,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 259,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (printHelp()) {\n    return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n  }\n  processGlobalOptions();\n  Iterator<String> it=args.iterator();\n  while (it.hasNext()) {\n    String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n        optionRequiresValueCheck(it,option);\n        roleNames.add(it.next());\n        break;\n      }\ncase \"--roleid\":{\n      optionRequiresValueCheck(it,option);\n      roleIds.add(it.next());\n      break;\n    }\ndefault:{\n    throw new IllegalArgumentException(\"Invalid option: \" + option);\n  }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\nuid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nUserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nUserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\ngid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\ngid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nGroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nGroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\nrid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nRoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nRoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 717,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8144,
        "startLineNumber" : 83,
        "startColumnNumber" : 116,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<String> roleNames=new LinkedList<>();\n  List<String> roleIds=new LinkedList<>();\n  try {\n    if (printHelp()) {\n      return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n    }\n    processGlobalOptions();\n    Iterator<String> it=args.iterator();\n    while (it.hasNext()) {\n      String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n          optionRequiresValueCheck(it,option);\n          roleNames.add(it.next());\n          break;\n        }\ncase \"--roleid\":{\n        optionRequiresValueCheck(it,option);\n        roleIds.add(it.next());\n        break;\n      }\ndefault:{\n      throw new IllegalArgumentException(\"Invalid option: \" + option);\n    }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\n  uid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  UserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  UserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\n  gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\n  gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\n  rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 742,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8270,
        "startLineNumber" : 82,
        "startColumnNumber" : 4,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public CommandResult execute(CommandInvocation commandInvocation) throws CommandException, InterruptedException {\n  List<String> roleNames=new LinkedList<>();\n  List<String> roleIds=new LinkedList<>();\n  try {\n    if (printHelp()) {\n      return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n    }\n    processGlobalOptions();\n    Iterator<String> it=args.iterator();\n    while (it.hasNext()) {\n      String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n          optionRequiresValueCheck(it,option);\n          roleNames.add(it.next());\n          break;\n        }\ncase \"--roleid\":{\n        optionRequiresValueCheck(it,option);\n        roleIds.add(it.next());\n        break;\n      }\ndefault:{\n      throw new IllegalArgumentException(\"Invalid option: \" + option);\n    }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\n  uid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  UserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  UserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\n  gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\n  gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\n  rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 757,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 120,
        "startColumnNumber" : 16,
        "endLineNumber" : 120,
        "endColumnNumber" : 116
      },
      "nodeContext" : "(gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 25,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 120,
      "startColumnNumber" : 94,
      "endLineNumber" : 120,
      "endColumnNumber" : 98
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 120,
        "startColumnNumber" : 85,
        "endLineNumber" : 120,
        "endColumnNumber" : 98
      },
      "nodeContext" : "gname != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 120,
        "startColumnNumber" : 85,
        "endLineNumber" : 120,
        "endColumnNumber" : 115
      },
      "nodeContext" : "gname != null && gpath != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.InfixExpression,extendedOperands]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 120,
        "startColumnNumber" : 84,
        "endLineNumber" : 120,
        "endColumnNumber" : 116
      },
      "nodeContext" : "(gname != null && gpath != null)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 120,
        "startColumnNumber" : 16,
        "endLineNumber" : 120,
        "endColumnNumber" : 116
      },
      "nodeContext" : "(gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 25,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 248,
        "startLineNumber" : 120,
        "startColumnNumber" : 12,
        "endLineNumber" : 122,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\n  throw new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 32,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 7830,
        "startLineNumber" : 88,
        "startColumnNumber" : 12,
        "endLineNumber" : 255,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (printHelp()) {\n    return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n  }\n  processGlobalOptions();\n  Iterator<String> it=args.iterator();\n  while (it.hasNext()) {\n    String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n        optionRequiresValueCheck(it,option);\n        roleNames.add(it.next());\n        break;\n      }\ncase \"--roleid\":{\n      optionRequiresValueCheck(it,option);\n      roleIds.add(it.next());\n      break;\n    }\ndefault:{\n    throw new IllegalArgumentException(\"Invalid option: \" + option);\n  }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\nuid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nUserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nUserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\ngid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\ngid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nGroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nGroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\nrid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nRoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nRoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 694,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8022,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 259,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (printHelp()) {\n    return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n  }\n  processGlobalOptions();\n  Iterator<String> it=args.iterator();\n  while (it.hasNext()) {\n    String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n        optionRequiresValueCheck(it,option);\n        roleNames.add(it.next());\n        break;\n      }\ncase \"--roleid\":{\n      optionRequiresValueCheck(it,option);\n      roleIds.add(it.next());\n      break;\n    }\ndefault:{\n    throw new IllegalArgumentException(\"Invalid option: \" + option);\n  }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\nuid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nUserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nUserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\ngid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\ngid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nGroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nGroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\nrid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nRoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nRoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 717,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8144,
        "startLineNumber" : 83,
        "startColumnNumber" : 116,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<String> roleNames=new LinkedList<>();\n  List<String> roleIds=new LinkedList<>();\n  try {\n    if (printHelp()) {\n      return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n    }\n    processGlobalOptions();\n    Iterator<String> it=args.iterator();\n    while (it.hasNext()) {\n      String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n          optionRequiresValueCheck(it,option);\n          roleNames.add(it.next());\n          break;\n        }\ncase \"--roleid\":{\n        optionRequiresValueCheck(it,option);\n        roleIds.add(it.next());\n        break;\n      }\ndefault:{\n      throw new IllegalArgumentException(\"Invalid option: \" + option);\n    }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\n  uid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  UserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  UserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\n  gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\n  gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\n  rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 742,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8270,
        "startLineNumber" : 82,
        "startColumnNumber" : 4,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public CommandResult execute(CommandInvocation commandInvocation) throws CommandException, InterruptedException {\n  List<String> roleNames=new LinkedList<>();\n  List<String> roleIds=new LinkedList<>();\n  try {\n    if (printHelp()) {\n      return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n    }\n    processGlobalOptions();\n    Iterator<String> it=args.iterator();\n    while (it.hasNext()) {\n      String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n          optionRequiresValueCheck(it,option);\n          roleNames.add(it.next());\n          break;\n        }\ncase \"--roleid\":{\n        optionRequiresValueCheck(it,option);\n        roleIds.add(it.next());\n        break;\n      }\ndefault:{\n      throw new IllegalArgumentException(\"Invalid option: \" + option);\n    }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\n  uid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  UserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  UserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\n  gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\n  gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\n  rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 757,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 120,
        "startColumnNumber" : 16,
        "endLineNumber" : 120,
        "endColumnNumber" : 116
      },
      "nodeContext" : "(gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 25,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 120,
      "startColumnNumber" : 111,
      "endLineNumber" : 120,
      "endColumnNumber" : 115
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 120,
        "startColumnNumber" : 102,
        "endLineNumber" : 120,
        "endColumnNumber" : 115
      },
      "nodeContext" : "gpath != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 120,
        "startColumnNumber" : 85,
        "endLineNumber" : 120,
        "endColumnNumber" : 115
      },
      "nodeContext" : "gname != null && gpath != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.InfixExpression,extendedOperands]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 120,
        "startColumnNumber" : 84,
        "endLineNumber" : 120,
        "endColumnNumber" : 116
      },
      "nodeContext" : "(gname != null && gpath != null)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 120,
        "startColumnNumber" : 16,
        "endLineNumber" : 120,
        "endColumnNumber" : 116
      },
      "nodeContext" : "(gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 25,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 248,
        "startLineNumber" : 120,
        "startColumnNumber" : 12,
        "endLineNumber" : 122,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\n  throw new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 32,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 7830,
        "startLineNumber" : 88,
        "startColumnNumber" : 12,
        "endLineNumber" : 255,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (printHelp()) {\n    return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n  }\n  processGlobalOptions();\n  Iterator<String> it=args.iterator();\n  while (it.hasNext()) {\n    String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n        optionRequiresValueCheck(it,option);\n        roleNames.add(it.next());\n        break;\n      }\ncase \"--roleid\":{\n      optionRequiresValueCheck(it,option);\n      roleIds.add(it.next());\n      break;\n    }\ndefault:{\n    throw new IllegalArgumentException(\"Invalid option: \" + option);\n  }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\nuid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nUserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nUserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\ngid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\ngid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nGroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nGroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\nrid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nRoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nRoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 694,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8022,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 259,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (printHelp()) {\n    return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n  }\n  processGlobalOptions();\n  Iterator<String> it=args.iterator();\n  while (it.hasNext()) {\n    String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n        optionRequiresValueCheck(it,option);\n        roleNames.add(it.next());\n        break;\n      }\ncase \"--roleid\":{\n      optionRequiresValueCheck(it,option);\n      roleIds.add(it.next());\n      break;\n    }\ndefault:{\n    throw new IllegalArgumentException(\"Invalid option: \" + option);\n  }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\nuid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nUserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nUserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\ngid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\ngid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nGroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nGroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\nrid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nRoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nRoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 717,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8144,
        "startLineNumber" : 83,
        "startColumnNumber" : 116,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<String> roleNames=new LinkedList<>();\n  List<String> roleIds=new LinkedList<>();\n  try {\n    if (printHelp()) {\n      return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n    }\n    processGlobalOptions();\n    Iterator<String> it=args.iterator();\n    while (it.hasNext()) {\n      String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n          optionRequiresValueCheck(it,option);\n          roleNames.add(it.next());\n          break;\n        }\ncase \"--roleid\":{\n        optionRequiresValueCheck(it,option);\n        roleIds.add(it.next());\n        break;\n      }\ndefault:{\n      throw new IllegalArgumentException(\"Invalid option: \" + option);\n    }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\n  uid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  UserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  UserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\n  gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\n  gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\n  rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 742,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8270,
        "startLineNumber" : 82,
        "startColumnNumber" : 4,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public CommandResult execute(CommandInvocation commandInvocation) throws CommandException, InterruptedException {\n  List<String> roleNames=new LinkedList<>();\n  List<String> roleIds=new LinkedList<>();\n  try {\n    if (printHelp()) {\n      return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n    }\n    processGlobalOptions();\n    Iterator<String> it=args.iterator();\n    while (it.hasNext()) {\n      String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n          optionRequiresValueCheck(it,option);\n          roleNames.add(it.next());\n          break;\n        }\ncase \"--roleid\":{\n        optionRequiresValueCheck(it,option);\n        roleIds.add(it.next());\n        break;\n      }\ndefault:{\n      throw new IllegalArgumentException(\"Invalid option: \" + option);\n    }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\n  uid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  UserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  UserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\n  gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\n  gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\n  rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 757,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 120,
        "startColumnNumber" : 16,
        "endLineNumber" : 120,
        "endColumnNumber" : 116
      },
      "nodeContext" : "(gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 25,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 128,
      "startColumnNumber" : 23,
      "endLineNumber" : 128,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 128,
        "startColumnNumber" : 16,
        "endLineNumber" : 128,
        "endColumnNumber" : 27
      },
      "nodeContext" : "cid != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 128,
        "startColumnNumber" : 16,
        "endLineNumber" : 128,
        "endColumnNumber" : 48
      },
      "nodeContext" : "cid != null && cclientid != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 175,
        "startLineNumber" : 128,
        "startColumnNumber" : 12,
        "endLineNumber" : 130,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (cid != null && cclientid != null) {\n  throw new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 7830,
        "startLineNumber" : 88,
        "startColumnNumber" : 12,
        "endLineNumber" : 255,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (printHelp()) {\n    return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n  }\n  processGlobalOptions();\n  Iterator<String> it=args.iterator();\n  while (it.hasNext()) {\n    String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n        optionRequiresValueCheck(it,option);\n        roleNames.add(it.next());\n        break;\n      }\ncase \"--roleid\":{\n      optionRequiresValueCheck(it,option);\n      roleIds.add(it.next());\n      break;\n    }\ndefault:{\n    throw new IllegalArgumentException(\"Invalid option: \" + option);\n  }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\nuid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nUserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nUserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\ngid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\ngid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nGroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nGroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\nrid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nRoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nRoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 694,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8022,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 259,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (printHelp()) {\n    return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n  }\n  processGlobalOptions();\n  Iterator<String> it=args.iterator();\n  while (it.hasNext()) {\n    String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n        optionRequiresValueCheck(it,option);\n        roleNames.add(it.next());\n        break;\n      }\ncase \"--roleid\":{\n      optionRequiresValueCheck(it,option);\n      roleIds.add(it.next());\n      break;\n    }\ndefault:{\n    throw new IllegalArgumentException(\"Invalid option: \" + option);\n  }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\nuid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nUserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nUserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\ngid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\ngid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nGroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nGroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\nrid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nRoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nRoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 717,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8144,
        "startLineNumber" : 83,
        "startColumnNumber" : 116,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<String> roleNames=new LinkedList<>();\n  List<String> roleIds=new LinkedList<>();\n  try {\n    if (printHelp()) {\n      return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n    }\n    processGlobalOptions();\n    Iterator<String> it=args.iterator();\n    while (it.hasNext()) {\n      String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n          optionRequiresValueCheck(it,option);\n          roleNames.add(it.next());\n          break;\n        }\ncase \"--roleid\":{\n        optionRequiresValueCheck(it,option);\n        roleIds.add(it.next());\n        break;\n      }\ndefault:{\n      throw new IllegalArgumentException(\"Invalid option: \" + option);\n    }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\n  uid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  UserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  UserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\n  gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\n  gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\n  rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 742,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8270,
        "startLineNumber" : 82,
        "startColumnNumber" : 4,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public CommandResult execute(CommandInvocation commandInvocation) throws CommandException, InterruptedException {\n  List<String> roleNames=new LinkedList<>();\n  List<String> roleIds=new LinkedList<>();\n  try {\n    if (printHelp()) {\n      return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n    }\n    processGlobalOptions();\n    Iterator<String> it=args.iterator();\n    while (it.hasNext()) {\n      String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n          optionRequiresValueCheck(it,option);\n          roleNames.add(it.next());\n          break;\n        }\ncase \"--roleid\":{\n        optionRequiresValueCheck(it,option);\n        roleIds.add(it.next());\n        break;\n      }\ndefault:{\n      throw new IllegalArgumentException(\"Invalid option: \" + option);\n    }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\n  uid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  UserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  UserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\n  gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\n  gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\n  rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 757,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 128,
        "startColumnNumber" : 16,
        "endLineNumber" : 128,
        "endColumnNumber" : 48
      },
      "nodeContext" : "cid != null && cclientid != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 128,
      "startColumnNumber" : 44,
      "endLineNumber" : 128,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 128,
        "startColumnNumber" : 31,
        "endLineNumber" : 128,
        "endColumnNumber" : 48
      },
      "nodeContext" : "cclientid != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 128,
        "startColumnNumber" : 16,
        "endLineNumber" : 128,
        "endColumnNumber" : 48
      },
      "nodeContext" : "cid != null && cclientid != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 175,
        "startLineNumber" : 128,
        "startColumnNumber" : 12,
        "endLineNumber" : 130,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (cid != null && cclientid != null) {\n  throw new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 7830,
        "startLineNumber" : 88,
        "startColumnNumber" : 12,
        "endLineNumber" : 255,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (printHelp()) {\n    return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n  }\n  processGlobalOptions();\n  Iterator<String> it=args.iterator();\n  while (it.hasNext()) {\n    String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n        optionRequiresValueCheck(it,option);\n        roleNames.add(it.next());\n        break;\n      }\ncase \"--roleid\":{\n      optionRequiresValueCheck(it,option);\n      roleIds.add(it.next());\n      break;\n    }\ndefault:{\n    throw new IllegalArgumentException(\"Invalid option: \" + option);\n  }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\nuid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nUserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nUserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\ngid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\ngid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nGroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nGroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\nrid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nRoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nRoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 694,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8022,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 259,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (printHelp()) {\n    return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n  }\n  processGlobalOptions();\n  Iterator<String> it=args.iterator();\n  while (it.hasNext()) {\n    String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n        optionRequiresValueCheck(it,option);\n        roleNames.add(it.next());\n        break;\n      }\ncase \"--roleid\":{\n      optionRequiresValueCheck(it,option);\n      roleIds.add(it.next());\n      break;\n    }\ndefault:{\n    throw new IllegalArgumentException(\"Invalid option: \" + option);\n  }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\nuid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nUserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nUserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\ngid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\ngid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nGroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nGroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\nrid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nRoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nRoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 717,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8144,
        "startLineNumber" : 83,
        "startColumnNumber" : 116,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<String> roleNames=new LinkedList<>();\n  List<String> roleIds=new LinkedList<>();\n  try {\n    if (printHelp()) {\n      return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n    }\n    processGlobalOptions();\n    Iterator<String> it=args.iterator();\n    while (it.hasNext()) {\n      String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n          optionRequiresValueCheck(it,option);\n          roleNames.add(it.next());\n          break;\n        }\ncase \"--roleid\":{\n        optionRequiresValueCheck(it,option);\n        roleIds.add(it.next());\n        break;\n      }\ndefault:{\n      throw new IllegalArgumentException(\"Invalid option: \" + option);\n    }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\n  uid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  UserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  UserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\n  gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\n  gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\n  rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 742,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8270,
        "startLineNumber" : 82,
        "startColumnNumber" : 4,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public CommandResult execute(CommandInvocation commandInvocation) throws CommandException, InterruptedException {\n  List<String> roleNames=new LinkedList<>();\n  List<String> roleIds=new LinkedList<>();\n  try {\n    if (printHelp()) {\n      return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n    }\n    processGlobalOptions();\n    Iterator<String> it=args.iterator();\n    while (it.hasNext()) {\n      String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n          optionRequiresValueCheck(it,option);\n          roleNames.add(it.next());\n          break;\n        }\ncase \"--roleid\":{\n        optionRequiresValueCheck(it,option);\n        roleIds.add(it.next());\n        break;\n      }\ndefault:{\n      throw new IllegalArgumentException(\"Invalid option: \" + option);\n    }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\n  uid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  UserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  UserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\n  gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\n  gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\n  rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 757,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 128,
        "startColumnNumber" : 16,
        "endLineNumber" : 128,
        "endColumnNumber" : 48
      },
      "nodeContext" : "cid != null && cclientid != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 132,
      "startColumnNumber" : 23,
      "endLineNumber" : 132,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 132,
        "startColumnNumber" : 16,
        "endLineNumber" : 132,
        "endColumnNumber" : 27
      },
      "nodeContext" : "rid != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 132,
        "startColumnNumber" : 16,
        "endLineNumber" : 132,
        "endColumnNumber" : 44
      },
      "nodeContext" : "rid != null && rname != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 167,
        "startLineNumber" : 132,
        "startColumnNumber" : 12,
        "endLineNumber" : 134,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (rid != null && rname != null) {\n  throw new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 7830,
        "startLineNumber" : 88,
        "startColumnNumber" : 12,
        "endLineNumber" : 255,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (printHelp()) {\n    return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n  }\n  processGlobalOptions();\n  Iterator<String> it=args.iterator();\n  while (it.hasNext()) {\n    String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n        optionRequiresValueCheck(it,option);\n        roleNames.add(it.next());\n        break;\n      }\ncase \"--roleid\":{\n      optionRequiresValueCheck(it,option);\n      roleIds.add(it.next());\n      break;\n    }\ndefault:{\n    throw new IllegalArgumentException(\"Invalid option: \" + option);\n  }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\nuid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nUserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nUserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\ngid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\ngid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nGroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nGroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\nrid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nRoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nRoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 694,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8022,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 259,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (printHelp()) {\n    return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n  }\n  processGlobalOptions();\n  Iterator<String> it=args.iterator();\n  while (it.hasNext()) {\n    String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n        optionRequiresValueCheck(it,option);\n        roleNames.add(it.next());\n        break;\n      }\ncase \"--roleid\":{\n      optionRequiresValueCheck(it,option);\n      roleIds.add(it.next());\n      break;\n    }\ndefault:{\n    throw new IllegalArgumentException(\"Invalid option: \" + option);\n  }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\nuid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nUserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nUserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\ngid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\ngid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nGroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nGroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\nrid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nRoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nRoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 717,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8144,
        "startLineNumber" : 83,
        "startColumnNumber" : 116,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<String> roleNames=new LinkedList<>();\n  List<String> roleIds=new LinkedList<>();\n  try {\n    if (printHelp()) {\n      return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n    }\n    processGlobalOptions();\n    Iterator<String> it=args.iterator();\n    while (it.hasNext()) {\n      String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n          optionRequiresValueCheck(it,option);\n          roleNames.add(it.next());\n          break;\n        }\ncase \"--roleid\":{\n        optionRequiresValueCheck(it,option);\n        roleIds.add(it.next());\n        break;\n      }\ndefault:{\n      throw new IllegalArgumentException(\"Invalid option: \" + option);\n    }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\n  uid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  UserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  UserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\n  gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\n  gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\n  rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 742,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8270,
        "startLineNumber" : 82,
        "startColumnNumber" : 4,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public CommandResult execute(CommandInvocation commandInvocation) throws CommandException, InterruptedException {\n  List<String> roleNames=new LinkedList<>();\n  List<String> roleIds=new LinkedList<>();\n  try {\n    if (printHelp()) {\n      return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n    }\n    processGlobalOptions();\n    Iterator<String> it=args.iterator();\n    while (it.hasNext()) {\n      String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n          optionRequiresValueCheck(it,option);\n          roleNames.add(it.next());\n          break;\n        }\ncase \"--roleid\":{\n        optionRequiresValueCheck(it,option);\n        roleIds.add(it.next());\n        break;\n      }\ndefault:{\n      throw new IllegalArgumentException(\"Invalid option: \" + option);\n    }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\n  uid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  UserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  UserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\n  gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\n  gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\n  rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 757,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 132,
        "startColumnNumber" : 16,
        "endLineNumber" : 132,
        "endColumnNumber" : 44
      },
      "nodeContext" : "rid != null && rname != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 132,
      "startColumnNumber" : 40,
      "endLineNumber" : 132,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 132,
        "startColumnNumber" : 31,
        "endLineNumber" : 132,
        "endColumnNumber" : 44
      },
      "nodeContext" : "rname != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 132,
        "startColumnNumber" : 16,
        "endLineNumber" : 132,
        "endColumnNumber" : 44
      },
      "nodeContext" : "rid != null && rname != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 167,
        "startLineNumber" : 132,
        "startColumnNumber" : 12,
        "endLineNumber" : 134,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (rid != null && rname != null) {\n  throw new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 7830,
        "startLineNumber" : 88,
        "startColumnNumber" : 12,
        "endLineNumber" : 255,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (printHelp()) {\n    return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n  }\n  processGlobalOptions();\n  Iterator<String> it=args.iterator();\n  while (it.hasNext()) {\n    String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n        optionRequiresValueCheck(it,option);\n        roleNames.add(it.next());\n        break;\n      }\ncase \"--roleid\":{\n      optionRequiresValueCheck(it,option);\n      roleIds.add(it.next());\n      break;\n    }\ndefault:{\n    throw new IllegalArgumentException(\"Invalid option: \" + option);\n  }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\nuid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nUserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nUserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\ngid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\ngid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nGroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nGroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\nrid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nRoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nRoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 694,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8022,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 259,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (printHelp()) {\n    return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n  }\n  processGlobalOptions();\n  Iterator<String> it=args.iterator();\n  while (it.hasNext()) {\n    String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n        optionRequiresValueCheck(it,option);\n        roleNames.add(it.next());\n        break;\n      }\ncase \"--roleid\":{\n      optionRequiresValueCheck(it,option);\n      roleIds.add(it.next());\n      break;\n    }\ndefault:{\n    throw new IllegalArgumentException(\"Invalid option: \" + option);\n  }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\nuid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nUserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nUserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\ngid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\ngid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nGroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nGroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\nrid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nRoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nRoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 717,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8144,
        "startLineNumber" : 83,
        "startColumnNumber" : 116,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<String> roleNames=new LinkedList<>();\n  List<String> roleIds=new LinkedList<>();\n  try {\n    if (printHelp()) {\n      return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n    }\n    processGlobalOptions();\n    Iterator<String> it=args.iterator();\n    while (it.hasNext()) {\n      String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n          optionRequiresValueCheck(it,option);\n          roleNames.add(it.next());\n          break;\n        }\ncase \"--roleid\":{\n        optionRequiresValueCheck(it,option);\n        roleIds.add(it.next());\n        break;\n      }\ndefault:{\n      throw new IllegalArgumentException(\"Invalid option: \" + option);\n    }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\n  uid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  UserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  UserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\n  gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\n  gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\n  rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 742,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8270,
        "startLineNumber" : 82,
        "startColumnNumber" : 4,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public CommandResult execute(CommandInvocation commandInvocation) throws CommandException, InterruptedException {\n  List<String> roleNames=new LinkedList<>();\n  List<String> roleIds=new LinkedList<>();\n  try {\n    if (printHelp()) {\n      return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n    }\n    processGlobalOptions();\n    Iterator<String> it=args.iterator();\n    while (it.hasNext()) {\n      String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n          optionRequiresValueCheck(it,option);\n          roleNames.add(it.next());\n          break;\n        }\ncase \"--roleid\":{\n        optionRequiresValueCheck(it,option);\n        roleIds.add(it.next());\n        break;\n      }\ndefault:{\n      throw new IllegalArgumentException(\"Invalid option: \" + option);\n    }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\n  uid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  UserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  UserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\n  gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\n  gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\n  rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 757,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 132,
        "startColumnNumber" : 16,
        "endLineNumber" : 132,
        "endColumnNumber" : 44
      },
      "nodeContext" : "rid != null && rname != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 158,
      "startColumnNumber" : 26,
      "endLineNumber" : 158,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 158,
        "startColumnNumber" : 19,
        "endLineNumber" : 158,
        "endColumnNumber" : 30
      },
      "nodeContext" : "auth=null",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 158,
        "startColumnNumber" : 12,
        "endLineNumber" : 158,
        "endColumnNumber" : 31
      },
      "nodeContext" : "String auth=null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 7830,
        "startLineNumber" : 88,
        "startColumnNumber" : 12,
        "endLineNumber" : 255,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (printHelp()) {\n    return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n  }\n  processGlobalOptions();\n  Iterator<String> it=args.iterator();\n  while (it.hasNext()) {\n    String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n        optionRequiresValueCheck(it,option);\n        roleNames.add(it.next());\n        break;\n      }\ncase \"--roleid\":{\n      optionRequiresValueCheck(it,option);\n      roleIds.add(it.next());\n      break;\n    }\ndefault:{\n    throw new IllegalArgumentException(\"Invalid option: \" + option);\n  }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\nuid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nUserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nUserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\ngid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\ngid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nGroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nGroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\nrid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nRoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nRoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 694,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8022,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 259,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (printHelp()) {\n    return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n  }\n  processGlobalOptions();\n  Iterator<String> it=args.iterator();\n  while (it.hasNext()) {\n    String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n        optionRequiresValueCheck(it,option);\n        roleNames.add(it.next());\n        break;\n      }\ncase \"--roleid\":{\n      optionRequiresValueCheck(it,option);\n      roleIds.add(it.next());\n      break;\n    }\ndefault:{\n    throw new IllegalArgumentException(\"Invalid option: \" + option);\n  }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\nuid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nUserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nUserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\ngid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\ngid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nGroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nGroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\nrid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nRoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nRoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 717,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8144,
        "startLineNumber" : 83,
        "startColumnNumber" : 116,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<String> roleNames=new LinkedList<>();\n  List<String> roleIds=new LinkedList<>();\n  try {\n    if (printHelp()) {\n      return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n    }\n    processGlobalOptions();\n    Iterator<String> it=args.iterator();\n    while (it.hasNext()) {\n      String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n          optionRequiresValueCheck(it,option);\n          roleNames.add(it.next());\n          break;\n        }\ncase \"--roleid\":{\n        optionRequiresValueCheck(it,option);\n        roleIds.add(it.next());\n        break;\n      }\ndefault:{\n      throw new IllegalArgumentException(\"Invalid option: \" + option);\n    }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\n  uid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  UserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  UserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\n  gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\n  gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\n  rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 742,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8270,
        "startLineNumber" : 82,
        "startColumnNumber" : 4,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public CommandResult execute(CommandInvocation commandInvocation) throws CommandException, InterruptedException {\n  List<String> roleNames=new LinkedList<>();\n  List<String> roleIds=new LinkedList<>();\n  try {\n    if (printHelp()) {\n      return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n    }\n    processGlobalOptions();\n    Iterator<String> it=args.iterator();\n    while (it.hasNext()) {\n      String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n          optionRequiresValueCheck(it,option);\n          roleNames.add(it.next());\n          break;\n        }\ncase \"--roleid\":{\n        optionRequiresValueCheck(it,option);\n        roleIds.add(it.next());\n        break;\n      }\ndefault:{\n      throw new IllegalArgumentException(\"Invalid option: \" + option);\n    }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\n  uid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  UserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  UserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\n  gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\n  gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\n  rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 757,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 158,
        "startColumnNumber" : 12,
        "endLineNumber" : 158,
        "endColumnNumber" : 31
      },
      "nodeContext" : "String auth=null;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 166,
      "startColumnNumber" : 27,
      "endLineNumber" : 166,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 166,
        "startColumnNumber" : 19,
        "endLineNumber" : 166,
        "endColumnNumber" : 31
      },
      "nodeContext" : "auth != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 166,
        "startColumnNumber" : 19,
        "endLineNumber" : 166,
        "endColumnNumber" : 57
      },
      "nodeContext" : "auth != null ? \"Bearer \" + auth : null",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 166,
        "startColumnNumber" : 12,
        "endLineNumber" : 166,
        "endColumnNumber" : 57
      },
      "nodeContext" : "auth=auth != null ? \"Bearer \" + auth : null",
      "nodeType" : "Assignment",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 166,
        "startColumnNumber" : 12,
        "endLineNumber" : 166,
        "endColumnNumber" : 58
      },
      "nodeContext" : "auth=auth != null ? \"Bearer \" + auth : null;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 7830,
        "startLineNumber" : 88,
        "startColumnNumber" : 12,
        "endLineNumber" : 255,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (printHelp()) {\n    return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n  }\n  processGlobalOptions();\n  Iterator<String> it=args.iterator();\n  while (it.hasNext()) {\n    String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n        optionRequiresValueCheck(it,option);\n        roleNames.add(it.next());\n        break;\n      }\ncase \"--roleid\":{\n      optionRequiresValueCheck(it,option);\n      roleIds.add(it.next());\n      break;\n    }\ndefault:{\n    throw new IllegalArgumentException(\"Invalid option: \" + option);\n  }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\nuid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nUserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nUserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\ngid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\ngid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nGroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nGroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\nrid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nRoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nRoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 694,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8022,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 259,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (printHelp()) {\n    return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n  }\n  processGlobalOptions();\n  Iterator<String> it=args.iterator();\n  while (it.hasNext()) {\n    String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n        optionRequiresValueCheck(it,option);\n        roleNames.add(it.next());\n        break;\n      }\ncase \"--roleid\":{\n      optionRequiresValueCheck(it,option);\n      roleIds.add(it.next());\n      break;\n    }\ndefault:{\n    throw new IllegalArgumentException(\"Invalid option: \" + option);\n  }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\nuid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nUserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nUserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\ngid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\ngid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nGroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nGroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\nrid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nRoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nRoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 717,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8144,
        "startLineNumber" : 83,
        "startColumnNumber" : 116,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<String> roleNames=new LinkedList<>();\n  List<String> roleIds=new LinkedList<>();\n  try {\n    if (printHelp()) {\n      return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n    }\n    processGlobalOptions();\n    Iterator<String> it=args.iterator();\n    while (it.hasNext()) {\n      String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n          optionRequiresValueCheck(it,option);\n          roleNames.add(it.next());\n          break;\n        }\ncase \"--roleid\":{\n        optionRequiresValueCheck(it,option);\n        roleIds.add(it.next());\n        break;\n      }\ndefault:{\n      throw new IllegalArgumentException(\"Invalid option: \" + option);\n    }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\n  uid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  UserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  UserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\n  gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\n  gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\n  rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 742,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8270,
        "startLineNumber" : 82,
        "startColumnNumber" : 4,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public CommandResult execute(CommandInvocation commandInvocation) throws CommandException, InterruptedException {\n  List<String> roleNames=new LinkedList<>();\n  List<String> roleIds=new LinkedList<>();\n  try {\n    if (printHelp()) {\n      return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n    }\n    processGlobalOptions();\n    Iterator<String> it=args.iterator();\n    while (it.hasNext()) {\n      String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n          optionRequiresValueCheck(it,option);\n          roleNames.add(it.next());\n          break;\n        }\ncase \"--roleid\":{\n        optionRequiresValueCheck(it,option);\n        roleIds.add(it.next());\n        break;\n      }\ndefault:{\n      throw new IllegalArgumentException(\"Invalid option: \" + option);\n    }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\n  uid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  UserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  UserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\n  gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\n  gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\n  rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 757,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 166,
        "startColumnNumber" : 12,
        "endLineNumber" : 166,
        "endColumnNumber" : 58
      },
      "nodeContext" : "auth=auth != null ? \"Bearer \" + auth : null;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 166,
      "startColumnNumber" : 53,
      "endLineNumber" : 166,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 166,
        "startColumnNumber" : 19,
        "endLineNumber" : 166,
        "endColumnNumber" : 57
      },
      "nodeContext" : "auth != null ? \"Bearer \" + auth : null",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 166,
        "startColumnNumber" : 12,
        "endLineNumber" : 166,
        "endColumnNumber" : 57
      },
      "nodeContext" : "auth=auth != null ? \"Bearer \" + auth : null",
      "nodeType" : "Assignment",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 166,
        "startColumnNumber" : 12,
        "endLineNumber" : 166,
        "endColumnNumber" : 58
      },
      "nodeContext" : "auth=auth != null ? \"Bearer \" + auth : null;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 7830,
        "startLineNumber" : 88,
        "startColumnNumber" : 12,
        "endLineNumber" : 255,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (printHelp()) {\n    return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n  }\n  processGlobalOptions();\n  Iterator<String> it=args.iterator();\n  while (it.hasNext()) {\n    String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n        optionRequiresValueCheck(it,option);\n        roleNames.add(it.next());\n        break;\n      }\ncase \"--roleid\":{\n      optionRequiresValueCheck(it,option);\n      roleIds.add(it.next());\n      break;\n    }\ndefault:{\n    throw new IllegalArgumentException(\"Invalid option: \" + option);\n  }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\nuid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nUserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nUserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\ngid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\ngid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nGroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nGroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\nrid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nRoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nRoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 694,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8022,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 259,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (printHelp()) {\n    return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n  }\n  processGlobalOptions();\n  Iterator<String> it=args.iterator();\n  while (it.hasNext()) {\n    String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n        optionRequiresValueCheck(it,option);\n        roleNames.add(it.next());\n        break;\n      }\ncase \"--roleid\":{\n      optionRequiresValueCheck(it,option);\n      roleIds.add(it.next());\n      break;\n    }\ndefault:{\n    throw new IllegalArgumentException(\"Invalid option: \" + option);\n  }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\nuid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nUserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nUserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\ngid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\ngid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nGroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nGroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\nrid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nRoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nRoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 717,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8144,
        "startLineNumber" : 83,
        "startColumnNumber" : 116,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<String> roleNames=new LinkedList<>();\n  List<String> roleIds=new LinkedList<>();\n  try {\n    if (printHelp()) {\n      return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n    }\n    processGlobalOptions();\n    Iterator<String> it=args.iterator();\n    while (it.hasNext()) {\n      String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n          optionRequiresValueCheck(it,option);\n          roleNames.add(it.next());\n          break;\n        }\ncase \"--roleid\":{\n        optionRequiresValueCheck(it,option);\n        roleIds.add(it.next());\n        break;\n      }\ndefault:{\n      throw new IllegalArgumentException(\"Invalid option: \" + option);\n    }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\n  uid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  UserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  UserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\n  gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\n  gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\n  rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 742,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8270,
        "startLineNumber" : 82,
        "startColumnNumber" : 4,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public CommandResult execute(CommandInvocation commandInvocation) throws CommandException, InterruptedException {\n  List<String> roleNames=new LinkedList<>();\n  List<String> roleIds=new LinkedList<>();\n  try {\n    if (printHelp()) {\n      return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n    }\n    processGlobalOptions();\n    Iterator<String> it=args.iterator();\n    while (it.hasNext()) {\n      String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n          optionRequiresValueCheck(it,option);\n          roleNames.add(it.next());\n          break;\n        }\ncase \"--roleid\":{\n        optionRequiresValueCheck(it,option);\n        roleIds.add(it.next());\n        break;\n      }\ndefault:{\n      throw new IllegalArgumentException(\"Invalid option: \" + option);\n    }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\n  uid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  UserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  UserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\n  gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\n  gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\n  rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 757,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 166,
        "startColumnNumber" : 12,
        "endLineNumber" : 166,
        "endColumnNumber" : 58
      },
      "nodeContext" : "auth=auth != null ? \"Bearer \" + auth : null;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 170,
      "startColumnNumber" : 54,
      "endLineNumber" : 170,
      "endColumnNumber" : 58
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 170,
        "startColumnNumber" : 37,
        "endLineNumber" : 170,
        "endColumnNumber" : 58
      },
      "nodeContext" : "adminRestRoot != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 170,
        "startColumnNumber" : 37,
        "endLineNumber" : 170,
        "endColumnNumber" : 101
      },
      "nodeContext" : "adminRestRoot != null ? adminRestRoot : composeAdminRoot(server)",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 170,
        "startColumnNumber" : 25,
        "endLineNumber" : 170,
        "endColumnNumber" : 101
      },
      "nodeContext" : "adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 170,
        "startColumnNumber" : 12,
        "endLineNumber" : 170,
        "endColumnNumber" : 102
      },
      "nodeContext" : "final String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 7830,
        "startLineNumber" : 88,
        "startColumnNumber" : 12,
        "endLineNumber" : 255,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (printHelp()) {\n    return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n  }\n  processGlobalOptions();\n  Iterator<String> it=args.iterator();\n  while (it.hasNext()) {\n    String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n        optionRequiresValueCheck(it,option);\n        roleNames.add(it.next());\n        break;\n      }\ncase \"--roleid\":{\n      optionRequiresValueCheck(it,option);\n      roleIds.add(it.next());\n      break;\n    }\ndefault:{\n    throw new IllegalArgumentException(\"Invalid option: \" + option);\n  }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\nuid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nUserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nUserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\ngid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\ngid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nGroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nGroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\nrid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nRoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nRoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 694,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8022,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 259,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (printHelp()) {\n    return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n  }\n  processGlobalOptions();\n  Iterator<String> it=args.iterator();\n  while (it.hasNext()) {\n    String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n        optionRequiresValueCheck(it,option);\n        roleNames.add(it.next());\n        break;\n      }\ncase \"--roleid\":{\n      optionRequiresValueCheck(it,option);\n      roleIds.add(it.next());\n      break;\n    }\ndefault:{\n    throw new IllegalArgumentException(\"Invalid option: \" + option);\n  }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\nuid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nUserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nUserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\ngid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\ngid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nGroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nGroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\nrid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nRoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nRoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 717,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8144,
        "startLineNumber" : 83,
        "startColumnNumber" : 116,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<String> roleNames=new LinkedList<>();\n  List<String> roleIds=new LinkedList<>();\n  try {\n    if (printHelp()) {\n      return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n    }\n    processGlobalOptions();\n    Iterator<String> it=args.iterator();\n    while (it.hasNext()) {\n      String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n          optionRequiresValueCheck(it,option);\n          roleNames.add(it.next());\n          break;\n        }\ncase \"--roleid\":{\n        optionRequiresValueCheck(it,option);\n        roleIds.add(it.next());\n        break;\n      }\ndefault:{\n      throw new IllegalArgumentException(\"Invalid option: \" + option);\n    }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\n  uid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  UserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  UserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\n  gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\n  gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\n  rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 742,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8270,
        "startLineNumber" : 82,
        "startColumnNumber" : 4,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public CommandResult execute(CommandInvocation commandInvocation) throws CommandException, InterruptedException {\n  List<String> roleNames=new LinkedList<>();\n  List<String> roleIds=new LinkedList<>();\n  try {\n    if (printHelp()) {\n      return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n    }\n    processGlobalOptions();\n    Iterator<String> it=args.iterator();\n    while (it.hasNext()) {\n      String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n          optionRequiresValueCheck(it,option);\n          roleNames.add(it.next());\n          break;\n        }\ncase \"--roleid\":{\n        optionRequiresValueCheck(it,option);\n        roleIds.add(it.next());\n        break;\n      }\ndefault:{\n      throw new IllegalArgumentException(\"Invalid option: \" + option);\n    }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\n  uid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  UserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  UserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\n  gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\n  gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\n  rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 757,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 170,
        "startColumnNumber" : 12,
        "endLineNumber" : 170,
        "endColumnNumber" : 102
      },
      "nodeContext" : "final String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 174,
      "startColumnNumber" : 27,
      "endLineNumber" : 174,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 174,
        "startColumnNumber" : 20,
        "endLineNumber" : 174,
        "endColumnNumber" : 31
      },
      "nodeContext" : "uid == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 131,
        "startLineNumber" : 174,
        "startColumnNumber" : 16,
        "endLineNumber" : 176,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (uid == null) {\n  uid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1209,
        "startLineNumber" : 173,
        "startColumnNumber" : 35,
        "endLineNumber" : 198,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (uid == null) {\n    uid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n  }\n  if (isClientSpecified()) {\n    if (cid == null) {\n      cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n    }\n    List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n    UserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n  }\n else {\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n    UserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 115,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4096,
        "startLineNumber" : 173,
        "startColumnNumber" : 12,
        "endLineNumber" : 251,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isUserSpecified()) {\n  if (uid == null) {\n    uid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n  }\n  if (isClientSpecified()) {\n    if (cid == null) {\n      cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n    }\n    List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n    UserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n  }\n else {\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n    UserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n  }\n}\n else if (isGroupSpecified()) {\n  if (gname != null) {\n    gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n  }\n else   if (gpath != null) {\n    gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n  }\n  if (isClientSpecified()) {\n    if (cid == null) {\n      cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n    }\n    List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n    GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n  }\n else {\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n    GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n  }\n}\n else if (isCompositeRoleSpecified()) {\n  if (rid == null) {\n    rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n  }\n  if (isClientSpecified()) {\n    if (cid == null) {\n      cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n    }\n    List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n    RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n  }\n else {\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n    RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n  }\n}\n else {\n  throw new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 374,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 7830,
        "startLineNumber" : 88,
        "startColumnNumber" : 12,
        "endLineNumber" : 255,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (printHelp()) {\n    return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n  }\n  processGlobalOptions();\n  Iterator<String> it=args.iterator();\n  while (it.hasNext()) {\n    String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n        optionRequiresValueCheck(it,option);\n        roleNames.add(it.next());\n        break;\n      }\ncase \"--roleid\":{\n      optionRequiresValueCheck(it,option);\n      roleIds.add(it.next());\n      break;\n    }\ndefault:{\n    throw new IllegalArgumentException(\"Invalid option: \" + option);\n  }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\nuid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nUserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nUserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\ngid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\ngid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nGroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nGroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\nrid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nRoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nRoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 694,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8022,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 259,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (printHelp()) {\n    return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n  }\n  processGlobalOptions();\n  Iterator<String> it=args.iterator();\n  while (it.hasNext()) {\n    String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n        optionRequiresValueCheck(it,option);\n        roleNames.add(it.next());\n        break;\n      }\ncase \"--roleid\":{\n      optionRequiresValueCheck(it,option);\n      roleIds.add(it.next());\n      break;\n    }\ndefault:{\n    throw new IllegalArgumentException(\"Invalid option: \" + option);\n  }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\nuid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nUserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nUserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\ngid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\ngid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nGroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nGroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\nrid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nRoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nRoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 717,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8144,
        "startLineNumber" : 83,
        "startColumnNumber" : 116,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<String> roleNames=new LinkedList<>();\n  List<String> roleIds=new LinkedList<>();\n  try {\n    if (printHelp()) {\n      return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n    }\n    processGlobalOptions();\n    Iterator<String> it=args.iterator();\n    while (it.hasNext()) {\n      String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n          optionRequiresValueCheck(it,option);\n          roleNames.add(it.next());\n          break;\n        }\ncase \"--roleid\":{\n        optionRequiresValueCheck(it,option);\n        roleIds.add(it.next());\n        break;\n      }\ndefault:{\n      throw new IllegalArgumentException(\"Invalid option: \" + option);\n    }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\n  uid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  UserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  UserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\n  gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\n  gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\n  rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 742,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8270,
        "startLineNumber" : 82,
        "startColumnNumber" : 4,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public CommandResult execute(CommandInvocation commandInvocation) throws CommandException, InterruptedException {\n  List<String> roleNames=new LinkedList<>();\n  List<String> roleIds=new LinkedList<>();\n  try {\n    if (printHelp()) {\n      return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n    }\n    processGlobalOptions();\n    Iterator<String> it=args.iterator();\n    while (it.hasNext()) {\n      String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n          optionRequiresValueCheck(it,option);\n          roleNames.add(it.next());\n          break;\n        }\ncase \"--roleid\":{\n        optionRequiresValueCheck(it,option);\n        roleIds.add(it.next());\n        break;\n      }\ndefault:{\n      throw new IllegalArgumentException(\"Invalid option: \" + option);\n    }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\n  uid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  UserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  UserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\n  gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\n  gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\n  rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 757,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 174,
        "startColumnNumber" : 20,
        "endLineNumber" : 174,
        "endColumnNumber" : 31
      },
      "nodeContext" : "uid == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 179,
      "startColumnNumber" : 31,
      "endLineNumber" : 179,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 179,
        "startColumnNumber" : 24,
        "endLineNumber" : 179,
        "endColumnNumber" : 35
      },
      "nodeContext" : "cid == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 141,
        "startLineNumber" : 179,
        "startColumnNumber" : 20,
        "endLineNumber" : 181,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 622,
        "startLineNumber" : 177,
        "startColumnNumber" : 41,
        "endLineNumber" : 189,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  UserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 61,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1028,
        "startLineNumber" : 177,
        "startColumnNumber" : 16,
        "endLineNumber" : 196,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  UserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  UserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 99,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1209,
        "startLineNumber" : 173,
        "startColumnNumber" : 35,
        "endLineNumber" : 198,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (uid == null) {\n    uid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n  }\n  if (isClientSpecified()) {\n    if (cid == null) {\n      cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n    }\n    List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n    UserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n  }\n else {\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n    UserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 115,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4096,
        "startLineNumber" : 173,
        "startColumnNumber" : 12,
        "endLineNumber" : 251,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isUserSpecified()) {\n  if (uid == null) {\n    uid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n  }\n  if (isClientSpecified()) {\n    if (cid == null) {\n      cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n    }\n    List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n    UserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n  }\n else {\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n    UserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n  }\n}\n else if (isGroupSpecified()) {\n  if (gname != null) {\n    gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n  }\n else   if (gpath != null) {\n    gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n  }\n  if (isClientSpecified()) {\n    if (cid == null) {\n      cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n    }\n    List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n    GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n  }\n else {\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n    GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n  }\n}\n else if (isCompositeRoleSpecified()) {\n  if (rid == null) {\n    rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n  }\n  if (isClientSpecified()) {\n    if (cid == null) {\n      cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n    }\n    List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n    RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n  }\n else {\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n    RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n  }\n}\n else {\n  throw new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 374,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 7830,
        "startLineNumber" : 88,
        "startColumnNumber" : 12,
        "endLineNumber" : 255,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (printHelp()) {\n    return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n  }\n  processGlobalOptions();\n  Iterator<String> it=args.iterator();\n  while (it.hasNext()) {\n    String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n        optionRequiresValueCheck(it,option);\n        roleNames.add(it.next());\n        break;\n      }\ncase \"--roleid\":{\n      optionRequiresValueCheck(it,option);\n      roleIds.add(it.next());\n      break;\n    }\ndefault:{\n    throw new IllegalArgumentException(\"Invalid option: \" + option);\n  }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\nuid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nUserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nUserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\ngid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\ngid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nGroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nGroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\nrid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nRoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nRoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 694,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8022,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 259,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (printHelp()) {\n    return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n  }\n  processGlobalOptions();\n  Iterator<String> it=args.iterator();\n  while (it.hasNext()) {\n    String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n        optionRequiresValueCheck(it,option);\n        roleNames.add(it.next());\n        break;\n      }\ncase \"--roleid\":{\n      optionRequiresValueCheck(it,option);\n      roleIds.add(it.next());\n      break;\n    }\ndefault:{\n    throw new IllegalArgumentException(\"Invalid option: \" + option);\n  }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\nuid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nUserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nUserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\ngid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\ngid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nGroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nGroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\nrid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nRoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nRoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 717,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8144,
        "startLineNumber" : 83,
        "startColumnNumber" : 116,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<String> roleNames=new LinkedList<>();\n  List<String> roleIds=new LinkedList<>();\n  try {\n    if (printHelp()) {\n      return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n    }\n    processGlobalOptions();\n    Iterator<String> it=args.iterator();\n    while (it.hasNext()) {\n      String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n          optionRequiresValueCheck(it,option);\n          roleNames.add(it.next());\n          break;\n        }\ncase \"--roleid\":{\n        optionRequiresValueCheck(it,option);\n        roleIds.add(it.next());\n        break;\n      }\ndefault:{\n      throw new IllegalArgumentException(\"Invalid option: \" + option);\n    }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\n  uid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  UserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  UserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\n  gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\n  gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\n  rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 742,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8270,
        "startLineNumber" : 82,
        "startColumnNumber" : 4,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public CommandResult execute(CommandInvocation commandInvocation) throws CommandException, InterruptedException {\n  List<String> roleNames=new LinkedList<>();\n  List<String> roleIds=new LinkedList<>();\n  try {\n    if (printHelp()) {\n      return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n    }\n    processGlobalOptions();\n    Iterator<String> it=args.iterator();\n    while (it.hasNext()) {\n      String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n          optionRequiresValueCheck(it,option);\n          roleNames.add(it.next());\n          break;\n        }\ncase \"--roleid\":{\n        optionRequiresValueCheck(it,option);\n        roleIds.add(it.next());\n        break;\n      }\ndefault:{\n      throw new IllegalArgumentException(\"Invalid option: \" + option);\n    }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\n  uid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  UserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  UserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\n  gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\n  gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\n  rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 757,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 179,
        "startColumnNumber" : 24,
        "endLineNumber" : 179,
        "endColumnNumber" : 35
      },
      "nodeContext" : "cid == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 199,
      "startColumnNumber" : 29,
      "endLineNumber" : 199,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 199,
        "startColumnNumber" : 20,
        "endLineNumber" : 199,
        "endColumnNumber" : 33
      },
      "nodeContext" : "gname != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 258,
        "startLineNumber" : 199,
        "startColumnNumber" : 16,
        "endLineNumber" : 203,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (gname != null) {\n  gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\n  gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 30,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1339,
        "startLineNumber" : 198,
        "startColumnNumber" : 43,
        "endLineNumber" : 225,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (gname != null) {\n    gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n  }\n else   if (gpath != null) {\n    gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n  }\n  if (isClientSpecified()) {\n    if (cid == null) {\n      cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n    }\n    List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n    GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n  }\n else {\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n    GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 130,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2858,
        "startLineNumber" : 198,
        "startColumnNumber" : 19,
        "endLineNumber" : 251,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isGroupSpecified()) {\n  if (gname != null) {\n    gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n  }\n else   if (gpath != null) {\n    gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n  }\n  if (isClientSpecified()) {\n    if (cid == null) {\n      cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n    }\n    List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n    GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n  }\n else {\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n    GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n  }\n}\n else if (isCompositeRoleSpecified()) {\n  if (rid == null) {\n    rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n  }\n  if (isClientSpecified()) {\n    if (cid == null) {\n      cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n    }\n    List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n    RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n  }\n else {\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n    RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n  }\n}\n else {\n  throw new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 256,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4096,
        "startLineNumber" : 173,
        "startColumnNumber" : 12,
        "endLineNumber" : 251,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isUserSpecified()) {\n  if (uid == null) {\n    uid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n  }\n  if (isClientSpecified()) {\n    if (cid == null) {\n      cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n    }\n    List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n    UserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n  }\n else {\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n    UserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n  }\n}\n else if (isGroupSpecified()) {\n  if (gname != null) {\n    gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n  }\n else   if (gpath != null) {\n    gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n  }\n  if (isClientSpecified()) {\n    if (cid == null) {\n      cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n    }\n    List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n    GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n  }\n else {\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n    GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n  }\n}\n else if (isCompositeRoleSpecified()) {\n  if (rid == null) {\n    rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n  }\n  if (isClientSpecified()) {\n    if (cid == null) {\n      cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n    }\n    List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n    RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n  }\n else {\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n    RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n  }\n}\n else {\n  throw new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 374,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 7830,
        "startLineNumber" : 88,
        "startColumnNumber" : 12,
        "endLineNumber" : 255,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (printHelp()) {\n    return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n  }\n  processGlobalOptions();\n  Iterator<String> it=args.iterator();\n  while (it.hasNext()) {\n    String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n        optionRequiresValueCheck(it,option);\n        roleNames.add(it.next());\n        break;\n      }\ncase \"--roleid\":{\n      optionRequiresValueCheck(it,option);\n      roleIds.add(it.next());\n      break;\n    }\ndefault:{\n    throw new IllegalArgumentException(\"Invalid option: \" + option);\n  }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\nuid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nUserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nUserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\ngid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\ngid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nGroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nGroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\nrid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nRoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nRoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 694,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8022,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 259,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (printHelp()) {\n    return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n  }\n  processGlobalOptions();\n  Iterator<String> it=args.iterator();\n  while (it.hasNext()) {\n    String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n        optionRequiresValueCheck(it,option);\n        roleNames.add(it.next());\n        break;\n      }\ncase \"--roleid\":{\n      optionRequiresValueCheck(it,option);\n      roleIds.add(it.next());\n      break;\n    }\ndefault:{\n    throw new IllegalArgumentException(\"Invalid option: \" + option);\n  }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\nuid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nUserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nUserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\ngid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\ngid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nGroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nGroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\nrid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nRoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nRoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 717,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8144,
        "startLineNumber" : 83,
        "startColumnNumber" : 116,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<String> roleNames=new LinkedList<>();\n  List<String> roleIds=new LinkedList<>();\n  try {\n    if (printHelp()) {\n      return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n    }\n    processGlobalOptions();\n    Iterator<String> it=args.iterator();\n    while (it.hasNext()) {\n      String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n          optionRequiresValueCheck(it,option);\n          roleNames.add(it.next());\n          break;\n        }\ncase \"--roleid\":{\n        optionRequiresValueCheck(it,option);\n        roleIds.add(it.next());\n        break;\n      }\ndefault:{\n      throw new IllegalArgumentException(\"Invalid option: \" + option);\n    }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\n  uid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  UserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  UserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\n  gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\n  gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\n  rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 742,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8270,
        "startLineNumber" : 82,
        "startColumnNumber" : 4,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public CommandResult execute(CommandInvocation commandInvocation) throws CommandException, InterruptedException {\n  List<String> roleNames=new LinkedList<>();\n  List<String> roleIds=new LinkedList<>();\n  try {\n    if (printHelp()) {\n      return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n    }\n    processGlobalOptions();\n    Iterator<String> it=args.iterator();\n    while (it.hasNext()) {\n      String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n          optionRequiresValueCheck(it,option);\n          roleNames.add(it.next());\n          break;\n        }\ncase \"--roleid\":{\n        optionRequiresValueCheck(it,option);\n        roleIds.add(it.next());\n        break;\n      }\ndefault:{\n      throw new IllegalArgumentException(\"Invalid option: \" + option);\n    }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\n  uid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  UserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  UserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\n  gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\n  gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\n  rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 757,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 199,
        "startColumnNumber" : 20,
        "endLineNumber" : 199,
        "endColumnNumber" : 33
      },
      "nodeContext" : "gname != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 201,
      "startColumnNumber" : 36,
      "endLineNumber" : 201,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 201,
        "startColumnNumber" : 27,
        "endLineNumber" : 201,
        "endColumnNumber" : 40
      },
      "nodeContext" : "gpath != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 126,
        "startLineNumber" : 201,
        "startColumnNumber" : 23,
        "endLineNumber" : 203,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (gpath != null) {\n  gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 258,
        "startLineNumber" : 199,
        "startColumnNumber" : 16,
        "endLineNumber" : 203,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (gname != null) {\n  gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\n  gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 30,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1339,
        "startLineNumber" : 198,
        "startColumnNumber" : 43,
        "endLineNumber" : 225,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (gname != null) {\n    gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n  }\n else   if (gpath != null) {\n    gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n  }\n  if (isClientSpecified()) {\n    if (cid == null) {\n      cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n    }\n    List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n    GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n  }\n else {\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n    GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 130,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2858,
        "startLineNumber" : 198,
        "startColumnNumber" : 19,
        "endLineNumber" : 251,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isGroupSpecified()) {\n  if (gname != null) {\n    gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n  }\n else   if (gpath != null) {\n    gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n  }\n  if (isClientSpecified()) {\n    if (cid == null) {\n      cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n    }\n    List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n    GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n  }\n else {\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n    GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n  }\n}\n else if (isCompositeRoleSpecified()) {\n  if (rid == null) {\n    rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n  }\n  if (isClientSpecified()) {\n    if (cid == null) {\n      cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n    }\n    List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n    RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n  }\n else {\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n    RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n  }\n}\n else {\n  throw new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 256,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4096,
        "startLineNumber" : 173,
        "startColumnNumber" : 12,
        "endLineNumber" : 251,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isUserSpecified()) {\n  if (uid == null) {\n    uid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n  }\n  if (isClientSpecified()) {\n    if (cid == null) {\n      cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n    }\n    List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n    UserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n  }\n else {\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n    UserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n  }\n}\n else if (isGroupSpecified()) {\n  if (gname != null) {\n    gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n  }\n else   if (gpath != null) {\n    gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n  }\n  if (isClientSpecified()) {\n    if (cid == null) {\n      cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n    }\n    List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n    GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n  }\n else {\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n    GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n  }\n}\n else if (isCompositeRoleSpecified()) {\n  if (rid == null) {\n    rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n  }\n  if (isClientSpecified()) {\n    if (cid == null) {\n      cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n    }\n    List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n    RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n  }\n else {\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n    RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n  }\n}\n else {\n  throw new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 374,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 7830,
        "startLineNumber" : 88,
        "startColumnNumber" : 12,
        "endLineNumber" : 255,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (printHelp()) {\n    return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n  }\n  processGlobalOptions();\n  Iterator<String> it=args.iterator();\n  while (it.hasNext()) {\n    String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n        optionRequiresValueCheck(it,option);\n        roleNames.add(it.next());\n        break;\n      }\ncase \"--roleid\":{\n      optionRequiresValueCheck(it,option);\n      roleIds.add(it.next());\n      break;\n    }\ndefault:{\n    throw new IllegalArgumentException(\"Invalid option: \" + option);\n  }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\nuid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nUserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nUserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\ngid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\ngid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nGroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nGroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\nrid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nRoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nRoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 694,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8022,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 259,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (printHelp()) {\n    return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n  }\n  processGlobalOptions();\n  Iterator<String> it=args.iterator();\n  while (it.hasNext()) {\n    String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n        optionRequiresValueCheck(it,option);\n        roleNames.add(it.next());\n        break;\n      }\ncase \"--roleid\":{\n      optionRequiresValueCheck(it,option);\n      roleIds.add(it.next());\n      break;\n    }\ndefault:{\n    throw new IllegalArgumentException(\"Invalid option: \" + option);\n  }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\nuid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nUserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nUserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\ngid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\ngid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nGroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nGroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\nrid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nRoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nRoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 717,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8144,
        "startLineNumber" : 83,
        "startColumnNumber" : 116,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<String> roleNames=new LinkedList<>();\n  List<String> roleIds=new LinkedList<>();\n  try {\n    if (printHelp()) {\n      return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n    }\n    processGlobalOptions();\n    Iterator<String> it=args.iterator();\n    while (it.hasNext()) {\n      String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n          optionRequiresValueCheck(it,option);\n          roleNames.add(it.next());\n          break;\n        }\ncase \"--roleid\":{\n        optionRequiresValueCheck(it,option);\n        roleIds.add(it.next());\n        break;\n      }\ndefault:{\n      throw new IllegalArgumentException(\"Invalid option: \" + option);\n    }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\n  uid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  UserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  UserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\n  gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\n  gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\n  rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 742,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8270,
        "startLineNumber" : 82,
        "startColumnNumber" : 4,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public CommandResult execute(CommandInvocation commandInvocation) throws CommandException, InterruptedException {\n  List<String> roleNames=new LinkedList<>();\n  List<String> roleIds=new LinkedList<>();\n  try {\n    if (printHelp()) {\n      return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n    }\n    processGlobalOptions();\n    Iterator<String> it=args.iterator();\n    while (it.hasNext()) {\n      String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n          optionRequiresValueCheck(it,option);\n          roleNames.add(it.next());\n          break;\n        }\ncase \"--roleid\":{\n        optionRequiresValueCheck(it,option);\n        roleIds.add(it.next());\n        break;\n      }\ndefault:{\n      throw new IllegalArgumentException(\"Invalid option: \" + option);\n    }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\n  uid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  UserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  UserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\n  gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\n  gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\n  rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 757,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 201,
        "startColumnNumber" : 27,
        "endLineNumber" : 201,
        "endColumnNumber" : 40
      },
      "nodeContext" : "gpath != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 206,
      "startColumnNumber" : 31,
      "endLineNumber" : 206,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 206,
        "startColumnNumber" : 24,
        "endLineNumber" : 206,
        "endColumnNumber" : 35
      },
      "nodeContext" : "cid == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 141,
        "startLineNumber" : 206,
        "startColumnNumber" : 20,
        "endLineNumber" : 208,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 624,
        "startLineNumber" : 204,
        "startColumnNumber" : 41,
        "endLineNumber" : 216,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 61,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1031,
        "startLineNumber" : 204,
        "startColumnNumber" : 16,
        "endLineNumber" : 223,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 99,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1339,
        "startLineNumber" : 198,
        "startColumnNumber" : 43,
        "endLineNumber" : 225,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (gname != null) {\n    gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n  }\n else   if (gpath != null) {\n    gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n  }\n  if (isClientSpecified()) {\n    if (cid == null) {\n      cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n    }\n    List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n    GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n  }\n else {\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n    GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 130,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2858,
        "startLineNumber" : 198,
        "startColumnNumber" : 19,
        "endLineNumber" : 251,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isGroupSpecified()) {\n  if (gname != null) {\n    gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n  }\n else   if (gpath != null) {\n    gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n  }\n  if (isClientSpecified()) {\n    if (cid == null) {\n      cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n    }\n    List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n    GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n  }\n else {\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n    GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n  }\n}\n else if (isCompositeRoleSpecified()) {\n  if (rid == null) {\n    rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n  }\n  if (isClientSpecified()) {\n    if (cid == null) {\n      cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n    }\n    List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n    RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n  }\n else {\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n    RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n  }\n}\n else {\n  throw new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 256,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4096,
        "startLineNumber" : 173,
        "startColumnNumber" : 12,
        "endLineNumber" : 251,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isUserSpecified()) {\n  if (uid == null) {\n    uid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n  }\n  if (isClientSpecified()) {\n    if (cid == null) {\n      cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n    }\n    List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n    UserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n  }\n else {\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n    UserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n  }\n}\n else if (isGroupSpecified()) {\n  if (gname != null) {\n    gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n  }\n else   if (gpath != null) {\n    gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n  }\n  if (isClientSpecified()) {\n    if (cid == null) {\n      cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n    }\n    List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n    GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n  }\n else {\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n    GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n  }\n}\n else if (isCompositeRoleSpecified()) {\n  if (rid == null) {\n    rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n  }\n  if (isClientSpecified()) {\n    if (cid == null) {\n      cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n    }\n    List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n    RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n  }\n else {\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n    RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n  }\n}\n else {\n  throw new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 374,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 7830,
        "startLineNumber" : 88,
        "startColumnNumber" : 12,
        "endLineNumber" : 255,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (printHelp()) {\n    return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n  }\n  processGlobalOptions();\n  Iterator<String> it=args.iterator();\n  while (it.hasNext()) {\n    String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n        optionRequiresValueCheck(it,option);\n        roleNames.add(it.next());\n        break;\n      }\ncase \"--roleid\":{\n      optionRequiresValueCheck(it,option);\n      roleIds.add(it.next());\n      break;\n    }\ndefault:{\n    throw new IllegalArgumentException(\"Invalid option: \" + option);\n  }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\nuid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nUserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nUserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\ngid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\ngid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nGroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nGroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\nrid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nRoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nRoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 694,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8022,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 259,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (printHelp()) {\n    return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n  }\n  processGlobalOptions();\n  Iterator<String> it=args.iterator();\n  while (it.hasNext()) {\n    String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n        optionRequiresValueCheck(it,option);\n        roleNames.add(it.next());\n        break;\n      }\ncase \"--roleid\":{\n      optionRequiresValueCheck(it,option);\n      roleIds.add(it.next());\n      break;\n    }\ndefault:{\n    throw new IllegalArgumentException(\"Invalid option: \" + option);\n  }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\nuid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nUserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nUserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\ngid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\ngid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nGroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nGroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\nrid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nRoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nRoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 717,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8144,
        "startLineNumber" : 83,
        "startColumnNumber" : 116,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<String> roleNames=new LinkedList<>();\n  List<String> roleIds=new LinkedList<>();\n  try {\n    if (printHelp()) {\n      return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n    }\n    processGlobalOptions();\n    Iterator<String> it=args.iterator();\n    while (it.hasNext()) {\n      String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n          optionRequiresValueCheck(it,option);\n          roleNames.add(it.next());\n          break;\n        }\ncase \"--roleid\":{\n        optionRequiresValueCheck(it,option);\n        roleIds.add(it.next());\n        break;\n      }\ndefault:{\n      throw new IllegalArgumentException(\"Invalid option: \" + option);\n    }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\n  uid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  UserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  UserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\n  gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\n  gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\n  rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 742,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8270,
        "startLineNumber" : 82,
        "startColumnNumber" : 4,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public CommandResult execute(CommandInvocation commandInvocation) throws CommandException, InterruptedException {\n  List<String> roleNames=new LinkedList<>();\n  List<String> roleIds=new LinkedList<>();\n  try {\n    if (printHelp()) {\n      return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n    }\n    processGlobalOptions();\n    Iterator<String> it=args.iterator();\n    while (it.hasNext()) {\n      String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n          optionRequiresValueCheck(it,option);\n          roleNames.add(it.next());\n          break;\n        }\ncase \"--roleid\":{\n        optionRequiresValueCheck(it,option);\n        roleIds.add(it.next());\n        break;\n      }\ndefault:{\n      throw new IllegalArgumentException(\"Invalid option: \" + option);\n    }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\n  uid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  UserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  UserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\n  gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\n  gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\n  rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 757,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 206,
        "startColumnNumber" : 24,
        "endLineNumber" : 206,
        "endColumnNumber" : 35
      },
      "nodeContext" : "cid == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 226,
      "startColumnNumber" : 27,
      "endLineNumber" : 226,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 226,
        "startColumnNumber" : 20,
        "endLineNumber" : 226,
        "endColumnNumber" : 31
      },
      "nodeContext" : "rid == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 127,
        "startLineNumber" : 226,
        "startColumnNumber" : 16,
        "endLineNumber" : 228,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (rid == null) {\n  rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1199,
        "startLineNumber" : 225,
        "startColumnNumber" : 51,
        "endLineNumber" : 249,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (rid == null) {\n    rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n  }\n  if (isClientSpecified()) {\n    if (cid == null) {\n      cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n    }\n    List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n    RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n  }\n else {\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n    RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 114,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1489,
        "startLineNumber" : 225,
        "startColumnNumber" : 19,
        "endLineNumber" : 251,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isCompositeRoleSpecified()) {\n  if (rid == null) {\n    rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n  }\n  if (isClientSpecified()) {\n    if (cid == null) {\n      cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n    }\n    List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n    RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n  }\n else {\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n    RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n  }\n}\n else {\n  throw new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 123,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2858,
        "startLineNumber" : 198,
        "startColumnNumber" : 19,
        "endLineNumber" : 251,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isGroupSpecified()) {\n  if (gname != null) {\n    gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n  }\n else   if (gpath != null) {\n    gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n  }\n  if (isClientSpecified()) {\n    if (cid == null) {\n      cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n    }\n    List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n    GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n  }\n else {\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n    GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n  }\n}\n else if (isCompositeRoleSpecified()) {\n  if (rid == null) {\n    rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n  }\n  if (isClientSpecified()) {\n    if (cid == null) {\n      cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n    }\n    List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n    RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n  }\n else {\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n    RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n  }\n}\n else {\n  throw new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 256,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4096,
        "startLineNumber" : 173,
        "startColumnNumber" : 12,
        "endLineNumber" : 251,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isUserSpecified()) {\n  if (uid == null) {\n    uid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n  }\n  if (isClientSpecified()) {\n    if (cid == null) {\n      cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n    }\n    List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n    UserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n  }\n else {\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n    UserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n  }\n}\n else if (isGroupSpecified()) {\n  if (gname != null) {\n    gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n  }\n else   if (gpath != null) {\n    gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n  }\n  if (isClientSpecified()) {\n    if (cid == null) {\n      cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n    }\n    List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n    GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n  }\n else {\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n    GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n  }\n}\n else if (isCompositeRoleSpecified()) {\n  if (rid == null) {\n    rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n  }\n  if (isClientSpecified()) {\n    if (cid == null) {\n      cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n    }\n    List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n    RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n  }\n else {\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n    RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n  }\n}\n else {\n  throw new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 374,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 7830,
        "startLineNumber" : 88,
        "startColumnNumber" : 12,
        "endLineNumber" : 255,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (printHelp()) {\n    return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n  }\n  processGlobalOptions();\n  Iterator<String> it=args.iterator();\n  while (it.hasNext()) {\n    String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n        optionRequiresValueCheck(it,option);\n        roleNames.add(it.next());\n        break;\n      }\ncase \"--roleid\":{\n      optionRequiresValueCheck(it,option);\n      roleIds.add(it.next());\n      break;\n    }\ndefault:{\n    throw new IllegalArgumentException(\"Invalid option: \" + option);\n  }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\nuid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nUserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nUserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\ngid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\ngid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nGroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nGroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\nrid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nRoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nRoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 694,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8022,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 259,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (printHelp()) {\n    return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n  }\n  processGlobalOptions();\n  Iterator<String> it=args.iterator();\n  while (it.hasNext()) {\n    String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n        optionRequiresValueCheck(it,option);\n        roleNames.add(it.next());\n        break;\n      }\ncase \"--roleid\":{\n      optionRequiresValueCheck(it,option);\n      roleIds.add(it.next());\n      break;\n    }\ndefault:{\n    throw new IllegalArgumentException(\"Invalid option: \" + option);\n  }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\nuid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nUserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nUserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\ngid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\ngid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nGroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nGroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\nrid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nRoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nRoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 717,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8144,
        "startLineNumber" : 83,
        "startColumnNumber" : 116,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<String> roleNames=new LinkedList<>();\n  List<String> roleIds=new LinkedList<>();\n  try {\n    if (printHelp()) {\n      return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n    }\n    processGlobalOptions();\n    Iterator<String> it=args.iterator();\n    while (it.hasNext()) {\n      String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n          optionRequiresValueCheck(it,option);\n          roleNames.add(it.next());\n          break;\n        }\ncase \"--roleid\":{\n        optionRequiresValueCheck(it,option);\n        roleIds.add(it.next());\n        break;\n      }\ndefault:{\n      throw new IllegalArgumentException(\"Invalid option: \" + option);\n    }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\n  uid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  UserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  UserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\n  gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\n  gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\n  rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 742,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8270,
        "startLineNumber" : 82,
        "startColumnNumber" : 4,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public CommandResult execute(CommandInvocation commandInvocation) throws CommandException, InterruptedException {\n  List<String> roleNames=new LinkedList<>();\n  List<String> roleIds=new LinkedList<>();\n  try {\n    if (printHelp()) {\n      return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n    }\n    processGlobalOptions();\n    Iterator<String> it=args.iterator();\n    while (it.hasNext()) {\n      String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n          optionRequiresValueCheck(it,option);\n          roleNames.add(it.next());\n          break;\n        }\ncase \"--roleid\":{\n        optionRequiresValueCheck(it,option);\n        roleIds.add(it.next());\n        break;\n      }\ndefault:{\n      throw new IllegalArgumentException(\"Invalid option: \" + option);\n    }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\n  uid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  UserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  UserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\n  gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\n  gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\n  rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 757,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 226,
        "startColumnNumber" : 20,
        "endLineNumber" : 226,
        "endColumnNumber" : 31
      },
      "nodeContext" : "rid == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  }, {
    "nodeContext" : "null",
    "nodeType" : "NullLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 231,
      "startColumnNumber" : 31,
      "endLineNumber" : 231,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 231,
        "startColumnNumber" : 24,
        "endLineNumber" : 231,
        "endColumnNumber" : 35
      },
      "nodeContext" : "cid == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 141,
        "startLineNumber" : 231,
        "startColumnNumber" : 20,
        "endLineNumber" : 233,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 617,
        "startLineNumber" : 229,
        "startColumnNumber" : 41,
        "endLineNumber" : 241,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 60,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1022,
        "startLineNumber" : 229,
        "startColumnNumber" : 16,
        "endLineNumber" : 247,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 98,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1199,
        "startLineNumber" : 225,
        "startColumnNumber" : 51,
        "endLineNumber" : 249,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (rid == null) {\n    rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n  }\n  if (isClientSpecified()) {\n    if (cid == null) {\n      cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n    }\n    List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n    RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n  }\n else {\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n    RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 114,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1489,
        "startLineNumber" : 225,
        "startColumnNumber" : 19,
        "endLineNumber" : 251,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isCompositeRoleSpecified()) {\n  if (rid == null) {\n    rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n  }\n  if (isClientSpecified()) {\n    if (cid == null) {\n      cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n    }\n    List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n    RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n  }\n else {\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n    RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n  }\n}\n else {\n  throw new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 123,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 2858,
        "startLineNumber" : 198,
        "startColumnNumber" : 19,
        "endLineNumber" : 251,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isGroupSpecified()) {\n  if (gname != null) {\n    gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n  }\n else   if (gpath != null) {\n    gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n  }\n  if (isClientSpecified()) {\n    if (cid == null) {\n      cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n    }\n    List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n    GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n  }\n else {\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n    GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n  }\n}\n else if (isCompositeRoleSpecified()) {\n  if (rid == null) {\n    rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n  }\n  if (isClientSpecified()) {\n    if (cid == null) {\n      cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n    }\n    List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n    RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n  }\n else {\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n    RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n  }\n}\n else {\n  throw new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 256,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4096,
        "startLineNumber" : 173,
        "startColumnNumber" : 12,
        "endLineNumber" : 251,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isUserSpecified()) {\n  if (uid == null) {\n    uid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n  }\n  if (isClientSpecified()) {\n    if (cid == null) {\n      cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n    }\n    List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n    UserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n  }\n else {\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n    UserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n  }\n}\n else if (isGroupSpecified()) {\n  if (gname != null) {\n    gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n  }\n else   if (gpath != null) {\n    gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n  }\n  if (isClientSpecified()) {\n    if (cid == null) {\n      cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n    }\n    List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n    GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n  }\n else {\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n    GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n  }\n}\n else if (isCompositeRoleSpecified()) {\n  if (rid == null) {\n    rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n  }\n  if (isClientSpecified()) {\n    if (cid == null) {\n      cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n    }\n    List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n    RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n  }\n else {\n    Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n    RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n  }\n}\n else {\n  throw new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 374,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 7830,
        "startLineNumber" : 88,
        "startColumnNumber" : 12,
        "endLineNumber" : 255,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (printHelp()) {\n    return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n  }\n  processGlobalOptions();\n  Iterator<String> it=args.iterator();\n  while (it.hasNext()) {\n    String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n        optionRequiresValueCheck(it,option);\n        roleNames.add(it.next());\n        break;\n      }\ncase \"--roleid\":{\n      optionRequiresValueCheck(it,option);\n      roleIds.add(it.next());\n      break;\n    }\ndefault:{\n    throw new IllegalArgumentException(\"Invalid option: \" + option);\n  }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\nuid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nUserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nUserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\ngid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\ngid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nGroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nGroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\nrid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nRoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nRoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 694,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 8022,
        "startLineNumber" : 88,
        "startColumnNumber" : 8,
        "endLineNumber" : 259,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  if (printHelp()) {\n    return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n  }\n  processGlobalOptions();\n  Iterator<String> it=args.iterator();\n  while (it.hasNext()) {\n    String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n        optionRequiresValueCheck(it,option);\n        roleNames.add(it.next());\n        break;\n      }\ncase \"--roleid\":{\n      optionRequiresValueCheck(it,option);\n      roleIds.add(it.next());\n      break;\n    }\ndefault:{\n    throw new IllegalArgumentException(\"Invalid option: \" + option);\n  }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\nuid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nUserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nUserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\ngid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\ngid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nGroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nGroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\nrid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\nif (cid == null) {\n  cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n}\nList<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\nRoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\nSet<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\nRoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 717,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 8144,
        "startLineNumber" : 83,
        "startColumnNumber" : 116,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<String> roleNames=new LinkedList<>();\n  List<String> roleIds=new LinkedList<>();\n  try {\n    if (printHelp()) {\n      return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n    }\n    processGlobalOptions();\n    Iterator<String> it=args.iterator();\n    while (it.hasNext()) {\n      String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n          optionRequiresValueCheck(it,option);\n          roleNames.add(it.next());\n          break;\n        }\ncase \"--roleid\":{\n        optionRequiresValueCheck(it,option);\n        roleIds.add(it.next());\n        break;\n      }\ndefault:{\n      throw new IllegalArgumentException(\"Invalid option: \" + option);\n    }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\n  uid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  UserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  UserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\n  gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\n  gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\n  rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 742,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 8270,
        "startLineNumber" : 82,
        "startColumnNumber" : 4,
        "endLineNumber" : 260,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public CommandResult execute(CommandInvocation commandInvocation) throws CommandException, InterruptedException {\n  List<String> roleNames=new LinkedList<>();\n  List<String> roleIds=new LinkedList<>();\n  try {\n    if (printHelp()) {\n      return help ? CommandResult.SUCCESS : CommandResult.FAILURE;\n    }\n    processGlobalOptions();\n    Iterator<String> it=args.iterator();\n    while (it.hasNext()) {\n      String option=it.next();\nswitch (option) {\ncase \"--rolename\":{\n          optionRequiresValueCheck(it,option);\n          roleNames.add(it.next());\n          break;\n        }\ncase \"--roleid\":{\n        optionRequiresValueCheck(it,option);\n        roleIds.add(it.next());\n        break;\n      }\ndefault:{\n      throw new IllegalArgumentException(\"Invalid option: \" + option);\n    }\n}\n}\nif (uid != null && uusername != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --uid and --uusername are mutually exclusive\");\n}\nif ((gid != null && gname != null) || (gid != null && gpath != null) || (gname != null && gpath != null)) {\nthrow new IllegalArgumentException(\"Incompatible options: --gid, --gname and --gpath are mutually exclusive\");\n}\nif (roleNames.isEmpty() && roleIds.isEmpty()) {\nthrow new IllegalArgumentException(\"No role to remove specified. Use --rolename or --roleid to specify roles to remove\");\n}\nif (cid != null && cclientid != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --cid and --cclientid are mutually exclusive\");\n}\nif (rid != null && rname != null) {\nthrow new IllegalArgumentException(\"Incompatible options: --rid and --rname are mutually exclusive\");\n}\nif (isUserSpecified() && isGroupSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (isUserSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --uusername / --uid can't be used at the same time as --rname / --rid\");\n}\nif (isGroupSpecified() && isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"Incompatible options: --rname / --rid can't be used at the same time as --gname / --gid / --gpath\");\n}\nif (!isUserSpecified() && !isGroupSpecified() && !isCompositeRoleSpecified()) {\nthrow new IllegalArgumentException(\"No user nor group nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nConfigData config=loadConfig();\nconfig=copyWithServerInfo(config);\nsetupTruststore(config,commandInvocation);\nString auth=null;\nconfig=ensureAuthInfo(config,commandInvocation);\nconfig=copyWithServerInfo(config);\nif (credentialsAvailable(config)) {\nauth=ensureToken(config);\n}\nauth=auth != null ? \"Bearer \" + auth : null;\nfinal String server=config.getServerUrl();\nfinal String realm=getTargetRealm(config);\nfinal String adminRoot=adminRestRoot != null ? adminRestRoot : composeAdminRoot(server);\nif (isUserSpecified()) {\nif (uid == null) {\n  uid=UserOperations.getIdFromUsername(adminRoot,realm,auth,uusername);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  UserOperations.removeClientRoles(adminRoot,realm,auth,uid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  UserOperations.removeRealmRoles(adminRoot,realm,auth,uid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isGroupSpecified()) {\nif (gname != null) {\n  gid=GroupOperations.getIdFromName(adminRoot,realm,auth,gname);\n}\n else if (gpath != null) {\n  gid=GroupOperations.getIdFromPath(adminRoot,realm,auth,gpath);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  GroupOperations.removeClientRoles(adminRoot,realm,auth,gid,cid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  GroupOperations.removeRealmRoles(adminRoot,realm,auth,gid,new ArrayList<>(rolesToAdd));\n}\n}\n else if (isCompositeRoleSpecified()) {\nif (rid == null) {\n  rid=RoleOperations.getIdFromRoleName(adminRoot,realm,auth,rname);\n}\nif (isClientSpecified()) {\n  if (cid == null) {\n    cid=ClientOperations.getIdFromClientId(adminRoot,realm,auth,cclientid);\n  }\n  List<ObjectNode> roles=RoleOperations.getClientRoles(adminRoot,realm,cid,auth);\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(roles));\n  RoleOperations.removeClientRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n else {\n  Set<ObjectNode> rolesToAdd=getRoleRepresentations(roleNames,roleIds,new LocalSearch(RoleOperations.getRealmRolesAsNodes(adminRoot,realm,auth)));\n  RoleOperations.removeRealmRoles(adminRoot,realm,auth,rid,new ArrayList<>(rolesToAdd));\n}\n}\n else {\nthrow new IllegalArgumentException(\"No user nor group, nor composite role specified. Use --uusername / --uid to specify user or --gname / --gid / --gpath to specify group or --rname / --rid to specify a composite role\");\n}\nreturn CommandResult.SUCCESS;\n}\n catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(e.getMessage() + suggestHelp(),e);\n}\n finally {\ncommandInvocation.stop();\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 757,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 231,
        "startColumnNumber" : 24,
        "endLineNumber" : 231,
        "endColumnNumber" : 35
      },
      "nodeContext" : "cid == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "null"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 116,
    "startColumnNumber" : 23,
    "endLineNumber" : 116,
    "endColumnNumber" : 27
  }, {
    "charLength" : 4,
    "startLineNumber" : 116,
    "startColumnNumber" : 44,
    "endLineNumber" : 116,
    "endColumnNumber" : 48
  }, {
    "charLength" : 4,
    "startLineNumber" : 120,
    "startColumnNumber" : 24,
    "endLineNumber" : 120,
    "endColumnNumber" : 28
  }, {
    "charLength" : 4,
    "startLineNumber" : 120,
    "startColumnNumber" : 41,
    "endLineNumber" : 120,
    "endColumnNumber" : 45
  }, {
    "charLength" : 4,
    "startLineNumber" : 120,
    "startColumnNumber" : 58,
    "endLineNumber" : 120,
    "endColumnNumber" : 62
  }, {
    "charLength" : 4,
    "startLineNumber" : 120,
    "startColumnNumber" : 75,
    "endLineNumber" : 120,
    "endColumnNumber" : 79
  }, {
    "charLength" : 4,
    "startLineNumber" : 120,
    "startColumnNumber" : 94,
    "endLineNumber" : 120,
    "endColumnNumber" : 98
  }, {
    "charLength" : 4,
    "startLineNumber" : 120,
    "startColumnNumber" : 111,
    "endLineNumber" : 120,
    "endColumnNumber" : 115
  }, {
    "charLength" : 4,
    "startLineNumber" : 128,
    "startColumnNumber" : 23,
    "endLineNumber" : 128,
    "endColumnNumber" : 27
  }, {
    "charLength" : 4,
    "startLineNumber" : 128,
    "startColumnNumber" : 44,
    "endLineNumber" : 128,
    "endColumnNumber" : 48
  }, {
    "charLength" : 4,
    "startLineNumber" : 132,
    "startColumnNumber" : 23,
    "endLineNumber" : 132,
    "endColumnNumber" : 27
  }, {
    "charLength" : 4,
    "startLineNumber" : 132,
    "startColumnNumber" : 40,
    "endLineNumber" : 132,
    "endColumnNumber" : 44
  }, {
    "charLength" : 4,
    "startLineNumber" : 158,
    "startColumnNumber" : 26,
    "endLineNumber" : 158,
    "endColumnNumber" : 30
  }, {
    "charLength" : 4,
    "startLineNumber" : 166,
    "startColumnNumber" : 27,
    "endLineNumber" : 166,
    "endColumnNumber" : 31
  }, {
    "charLength" : 4,
    "startLineNumber" : 166,
    "startColumnNumber" : 53,
    "endLineNumber" : 166,
    "endColumnNumber" : 57
  }, {
    "charLength" : 4,
    "startLineNumber" : 170,
    "startColumnNumber" : 54,
    "endLineNumber" : 170,
    "endColumnNumber" : 58
  }, {
    "charLength" : 4,
    "startLineNumber" : 174,
    "startColumnNumber" : 27,
    "endLineNumber" : 174,
    "endColumnNumber" : 31
  }, {
    "charLength" : 4,
    "startLineNumber" : 179,
    "startColumnNumber" : 31,
    "endLineNumber" : 179,
    "endColumnNumber" : 35
  }, {
    "charLength" : 4,
    "startLineNumber" : 199,
    "startColumnNumber" : 29,
    "endLineNumber" : 199,
    "endColumnNumber" : 33
  }, {
    "charLength" : 4,
    "startLineNumber" : 201,
    "startColumnNumber" : 36,
    "endLineNumber" : 201,
    "endColumnNumber" : 40
  }, {
    "charLength" : 4,
    "startLineNumber" : 206,
    "startColumnNumber" : 31,
    "endLineNumber" : 206,
    "endColumnNumber" : 35
  }, {
    "charLength" : 4,
    "startLineNumber" : 226,
    "startColumnNumber" : 27,
    "endLineNumber" : 226,
    "endColumnNumber" : 31
  }, {
    "charLength" : 4,
    "startLineNumber" : 231,
    "startColumnNumber" : 31,
    "endLineNumber" : 231,
    "endColumnNumber" : 35
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 1
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 1
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 1
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 1
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 1
  }, {
    "firstKey" : 10,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 10,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 1
  }, {
    "firstKey" : 11,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 11,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 12,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 8,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 9,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 10,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 11,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 12,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 14,
    "layout" : 1
  }, {
    "firstKey" : 13,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 13,
    "layout" : 0
  }, {
    "firstKey" : 14,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 15,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 16,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 17,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 18,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 19,
    "layout" : 1
  }, {
    "firstKey" : 18,
    "secondKey" : 20,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 18,
    "secondKey" : 22,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 19,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 19,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 19,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 19,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 22,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 0,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 5,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 6,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 7,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 8,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 9,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 10,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 11,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 12,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 13,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 14,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 15,
    "layout" : 7
  }, {
    "firstKey" : 20,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 20,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 20,
    "secondKey" : 22,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 21,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 21,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 21,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 21,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 21,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 21,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 21,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 21,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 21,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 21,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 21,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 21,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 21,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 21,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 21,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 21,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 21,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 22,
    "layout" : 2
  }, {
    "firstKey" : 22,
    "secondKey" : 0,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 1,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 2,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 3,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 4,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 5,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 6,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 7,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 8,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 9,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 10,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 11,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 12,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 13,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 14,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 15,
    "layout" : 8
  }, {
    "firstKey" : 22,
    "secondKey" : 16,
    "layout" : 7
  }, {
    "firstKey" : 22,
    "secondKey" : 17,
    "layout" : 7
  }, {
    "firstKey" : 22,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 22,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 22,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 22,
    "secondKey" : 21,
    "layout" : 4
  } ]
}