{
  "id" : 298,
  "expression" : "CompatibleTypeUtils.compatibleTypeConvert(3F,double.class)",
  "projectName" : "apache@dubbo",
  "commitID" : "4ea0a09846fa74b7b1a6a1a548f31859a2cddcc8",
  "filePath" : "/dubbo-common/src/test/java/org/apache/dubbo/common/utils/CompatibleTypeUtilsTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "CompatibleTypeUtils.compatibleTypeConvert(3F,double.class)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 59,
      "startLineNumber" : 135,
      "startColumnNumber" : 21,
      "endLineNumber" : 135,
      "endColumnNumber" : 80
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 135,
        "startColumnNumber" : 12,
        "endLineNumber" : 135,
        "endColumnNumber" : 80
      },
      "nodeContext" : "result=CompatibleTypeUtils.compatibleTypeConvert(3F,double.class)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 135,
        "startColumnNumber" : 12,
        "endLineNumber" : 135,
        "endColumnNumber" : 81
      },
      "nodeContext" : "result=CompatibleTypeUtils.compatibleTypeConvert(3F,double.class);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 780,
        "startLineNumber" : 131,
        "startColumnNumber" : 8,
        "endLineNumber" : 146,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  result=CompatibleTypeUtils.compatibleTypeConvert(3D,float.class);\n  assertEquals(Float.valueOf(3),(Float)result);\n  result=CompatibleTypeUtils.compatibleTypeConvert(3F,double.class);\n  assertEquals(Double.valueOf(3),(Double)result);\n  result=CompatibleTypeUtils.compatibleTypeConvert(3D,double.class);\n  assertEquals(Double.valueOf(3),(Double)result);\n  result=CompatibleTypeUtils.compatibleTypeConvert(3D,BigDecimal.class);\n  assertEquals(BigDecimal.valueOf(3D),(BigDecimal)result);\n  result=CompatibleTypeUtils.compatibleTypeConvert(BigDecimal.valueOf(3D),double.class);\n  assertEquals(Double.valueOf(3),(Double)result);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 105,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 9266,
        "startLineNumber" : 41,
        "startColumnNumber" : 61,
        "endLineNumber" : 221,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Object result;\n{\n    Object input=new Object();\n    result=CompatibleTypeUtils.compatibleTypeConvert(input,Date.class);\n    assertSame(input,result);\n    result=CompatibleTypeUtils.compatibleTypeConvert(input,null);\n    assertSame(input,result);\n    result=CompatibleTypeUtils.compatibleTypeConvert(null,Date.class);\n    assertNull(result);\n  }\n{\n    result=CompatibleTypeUtils.compatibleTypeConvert(\"a\",char.class);\n    assertEquals(Character.valueOf('a'),(Character)result);\n    result=CompatibleTypeUtils.compatibleTypeConvert(\"A\",MyEnum.class);\n    assertEquals(MyEnum.A,(MyEnum)result);\n    result=CompatibleTypeUtils.compatibleTypeConvert(\"3\",BigInteger.class);\n    assertEquals(new BigInteger(\"3\"),(BigInteger)result);\n    result=CompatibleTypeUtils.compatibleTypeConvert(\"3\",BigDecimal.class);\n    assertEquals(new BigDecimal(\"3\"),(BigDecimal)result);\n    result=CompatibleTypeUtils.compatibleTypeConvert(\"2011-12-11 12:24:12\",Date.class);\n    assertEquals(new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").parse(\"2011-12-11 12:24:12\"),(Date)result);\n    result=CompatibleTypeUtils.compatibleTypeConvert(\"2011-12-11 12:24:12\",java.sql.Date.class);\n    assertEquals(new SimpleDateFormat(\"yyyy-MM-dd\").format((java.sql.Date)result),\"2011-12-11\");\n    result=CompatibleTypeUtils.compatibleTypeConvert(\"2011-12-11 12:24:12\",java.sql.Time.class);\n    assertEquals(new SimpleDateFormat(\"HH:mm:ss\").format((java.sql.Time)result),\"12:24:12\");\n    result=CompatibleTypeUtils.compatibleTypeConvert(\"2011-12-11 12:24:12\",java.sql.Timestamp.class);\n    assertEquals(new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format((java.sql.Timestamp)result),\"2011-12-11 12:24:12\");\n    result=CompatibleTypeUtils.compatibleTypeConvert(\"2011-12-11T12:24:12.047\",java.time.LocalDateTime.class);\n    assertEquals(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\").format((java.time.LocalDateTime)result),\"2011-12-11 12:24:12\");\n    result=CompatibleTypeUtils.compatibleTypeConvert(\"2011-12-11T12:24:12.047\",java.time.LocalTime.class);\n    assertEquals(DateTimeFormatter.ofPattern(\"HH:mm:ss\").format((java.time.LocalTime)result),\"12:24:12\");\n    result=CompatibleTypeUtils.compatibleTypeConvert(\"2011-12-11T12:24:12.047\",java.time.LocalDate.class);\n    assertEquals(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\").format((java.time.LocalDate)result),\"2011-12-11\");\n    result=CompatibleTypeUtils.compatibleTypeConvert(\"ab\",char[].class);\n    assertEquals(2,((char[])result).length);\n    assertEquals('a',((char[])result)[0]);\n    assertEquals('b',((char[])result)[1]);\n    result=CompatibleTypeUtils.compatibleTypeConvert(\"\",char[].class);\n    assertEquals(0,((char[])result).length);\n    result=CompatibleTypeUtils.compatibleTypeConvert(null,char[].class);\n    assertNull(result);\n  }\n{\n    result=CompatibleTypeUtils.compatibleTypeConvert(3,byte.class);\n    assertEquals(Byte.valueOf((byte)3),(Byte)result);\n    result=CompatibleTypeUtils.compatibleTypeConvert((byte)3,int.class);\n    assertEquals(Integer.valueOf(3),(Integer)result);\n    result=CompatibleTypeUtils.compatibleTypeConvert(3,short.class);\n    assertEquals(Short.valueOf((short)3),(Short)result);\n    result=CompatibleTypeUtils.compatibleTypeConvert((short)3,int.class);\n    assertEquals(Integer.valueOf(3),(Integer)result);\n    result=CompatibleTypeUtils.compatibleTypeConvert(3,int.class);\n    assertEquals(Integer.valueOf(3),(Integer)result);\n    result=CompatibleTypeUtils.compatibleTypeConvert(3,long.class);\n    assertEquals(Long.valueOf(3),(Long)result);\n    result=CompatibleTypeUtils.compatibleTypeConvert(3L,int.class);\n    assertEquals(Integer.valueOf(3),(Integer)result);\n    result=CompatibleTypeUtils.compatibleTypeConvert(3L,BigInteger.class);\n    assertEquals(BigInteger.valueOf(3L),(BigInteger)result);\n    result=CompatibleTypeUtils.compatibleTypeConvert(BigInteger.valueOf(3L),int.class);\n    assertEquals(Integer.valueOf(3),(Integer)result);\n  }\n{\n    result=CompatibleTypeUtils.compatibleTypeConvert(3D,float.class);\n    assertEquals(Float.valueOf(3),(Float)result);\n    result=CompatibleTypeUtils.compatibleTypeConvert(3F,double.class);\n    assertEquals(Double.valueOf(3),(Double)result);\n    result=CompatibleTypeUtils.compatibleTypeConvert(3D,double.class);\n    assertEquals(Double.valueOf(3),(Double)result);\n    result=CompatibleTypeUtils.compatibleTypeConvert(3D,BigDecimal.class);\n    assertEquals(BigDecimal.valueOf(3D),(BigDecimal)result);\n    result=CompatibleTypeUtils.compatibleTypeConvert(BigDecimal.valueOf(3D),double.class);\n    assertEquals(Double.valueOf(3),(Double)result);\n  }\n{\n    List<String> list=new ArrayList<String>();\n    list.add(\"a\");\n    list.add(\"b\");\n    Set<String> set=new HashSet<String>();\n    set.add(\"a\");\n    set.add(\"b\");\n    String[] array=new String[]{\"a\",\"b\"};\n    result=CompatibleTypeUtils.compatibleTypeConvert(array,List.class);\n    assertEquals(ArrayList.class,result.getClass());\n    assertEquals(2,((List<String>)result).size());\n    assertTrue(((List<String>)result).contains(\"a\"));\n    assertTrue(((List<String>)result).contains(\"b\"));\n    result=CompatibleTypeUtils.compatibleTypeConvert(set,List.class);\n    assertEquals(ArrayList.class,result.getClass());\n    assertEquals(2,((List<String>)result).size());\n    assertTrue(((List<String>)result).contains(\"a\"));\n    assertTrue(((List<String>)result).contains(\"b\"));\n    result=CompatibleTypeUtils.compatibleTypeConvert(array,CopyOnWriteArrayList.class);\n    assertEquals(CopyOnWriteArrayList.class,result.getClass());\n    assertEquals(2,((List<String>)result).size());\n    assertTrue(((List<String>)result).contains(\"a\"));\n    assertTrue(((List<String>)result).contains(\"b\"));\n    result=CompatibleTypeUtils.compatibleTypeConvert(set,CopyOnWriteArrayList.class);\n    assertEquals(CopyOnWriteArrayList.class,result.getClass());\n    assertEquals(2,((List<String>)result).size());\n    assertTrue(((List<String>)result).contains(\"a\"));\n    assertTrue(((List<String>)result).contains(\"b\"));\n    result=CompatibleTypeUtils.compatibleTypeConvert(set,String[].class);\n    assertEquals(String[].class,result.getClass());\n    assertEquals(2,((String[])result).length);\n    assertTrue(((String[])result)[0].equals(\"a\") || ((String[])result)[0].equals(\"b\"));\n    assertTrue(((String[])result)[1].equals(\"a\") || ((String[])result)[1].equals(\"b\"));\n    result=CompatibleTypeUtils.compatibleTypeConvert(array,Set.class);\n    assertEquals(HashSet.class,result.getClass());\n    assertEquals(2,((Set<String>)result).size());\n    assertTrue(((Set<String>)result).contains(\"a\"));\n    assertTrue(((Set<String>)result).contains(\"b\"));\n    result=CompatibleTypeUtils.compatibleTypeConvert(list,Set.class);\n    assertEquals(HashSet.class,result.getClass());\n    assertEquals(2,((Set<String>)result).size());\n    assertTrue(((Set<String>)result).contains(\"a\"));\n    assertTrue(((Set<String>)result).contains(\"b\"));\n    result=CompatibleTypeUtils.compatibleTypeConvert(array,ConcurrentHashSet.class);\n    assertEquals(ConcurrentHashSet.class,result.getClass());\n    assertEquals(2,((Set<String>)result).size());\n    assertTrue(((Set<String>)result).contains(\"a\"));\n    assertTrue(((Set<String>)result).contains(\"b\"));\n    result=CompatibleTypeUtils.compatibleTypeConvert(list,ConcurrentHashSet.class);\n    assertEquals(ConcurrentHashSet.class,result.getClass());\n    assertEquals(2,((Set<String>)result).size());\n    assertTrue(((Set<String>)result).contains(\"a\"));\n    assertTrue(((Set<String>)result).contains(\"b\"));\n    result=CompatibleTypeUtils.compatibleTypeConvert(list,String[].class);\n    assertEquals(String[].class,result.getClass());\n    assertEquals(2,((String[])result).length);\n    assertTrue(((String[])result)[0].equals(\"a\"));\n    assertTrue(((String[])result)[1].equals(\"b\"));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1449,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 9370,
        "startLineNumber" : 39,
        "startColumnNumber" : 4,
        "endLineNumber" : 221,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") @Test public void testCompatibleTypeConvert() throws Exception {\n  Object result;\n{\n    Object input=new Object();\n    result=CompatibleTypeUtils.compatibleTypeConvert(input,Date.class);\n    assertSame(input,result);\n    result=CompatibleTypeUtils.compatibleTypeConvert(input,null);\n    assertSame(input,result);\n    result=CompatibleTypeUtils.compatibleTypeConvert(null,Date.class);\n    assertNull(result);\n  }\n{\n    result=CompatibleTypeUtils.compatibleTypeConvert(\"a\",char.class);\n    assertEquals(Character.valueOf('a'),(Character)result);\n    result=CompatibleTypeUtils.compatibleTypeConvert(\"A\",MyEnum.class);\n    assertEquals(MyEnum.A,(MyEnum)result);\n    result=CompatibleTypeUtils.compatibleTypeConvert(\"3\",BigInteger.class);\n    assertEquals(new BigInteger(\"3\"),(BigInteger)result);\n    result=CompatibleTypeUtils.compatibleTypeConvert(\"3\",BigDecimal.class);\n    assertEquals(new BigDecimal(\"3\"),(BigDecimal)result);\n    result=CompatibleTypeUtils.compatibleTypeConvert(\"2011-12-11 12:24:12\",Date.class);\n    assertEquals(new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").parse(\"2011-12-11 12:24:12\"),(Date)result);\n    result=CompatibleTypeUtils.compatibleTypeConvert(\"2011-12-11 12:24:12\",java.sql.Date.class);\n    assertEquals(new SimpleDateFormat(\"yyyy-MM-dd\").format((java.sql.Date)result),\"2011-12-11\");\n    result=CompatibleTypeUtils.compatibleTypeConvert(\"2011-12-11 12:24:12\",java.sql.Time.class);\n    assertEquals(new SimpleDateFormat(\"HH:mm:ss\").format((java.sql.Time)result),\"12:24:12\");\n    result=CompatibleTypeUtils.compatibleTypeConvert(\"2011-12-11 12:24:12\",java.sql.Timestamp.class);\n    assertEquals(new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format((java.sql.Timestamp)result),\"2011-12-11 12:24:12\");\n    result=CompatibleTypeUtils.compatibleTypeConvert(\"2011-12-11T12:24:12.047\",java.time.LocalDateTime.class);\n    assertEquals(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\").format((java.time.LocalDateTime)result),\"2011-12-11 12:24:12\");\n    result=CompatibleTypeUtils.compatibleTypeConvert(\"2011-12-11T12:24:12.047\",java.time.LocalTime.class);\n    assertEquals(DateTimeFormatter.ofPattern(\"HH:mm:ss\").format((java.time.LocalTime)result),\"12:24:12\");\n    result=CompatibleTypeUtils.compatibleTypeConvert(\"2011-12-11T12:24:12.047\",java.time.LocalDate.class);\n    assertEquals(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\").format((java.time.LocalDate)result),\"2011-12-11\");\n    result=CompatibleTypeUtils.compatibleTypeConvert(\"ab\",char[].class);\n    assertEquals(2,((char[])result).length);\n    assertEquals('a',((char[])result)[0]);\n    assertEquals('b',((char[])result)[1]);\n    result=CompatibleTypeUtils.compatibleTypeConvert(\"\",char[].class);\n    assertEquals(0,((char[])result).length);\n    result=CompatibleTypeUtils.compatibleTypeConvert(null,char[].class);\n    assertNull(result);\n  }\n{\n    result=CompatibleTypeUtils.compatibleTypeConvert(3,byte.class);\n    assertEquals(Byte.valueOf((byte)3),(Byte)result);\n    result=CompatibleTypeUtils.compatibleTypeConvert((byte)3,int.class);\n    assertEquals(Integer.valueOf(3),(Integer)result);\n    result=CompatibleTypeUtils.compatibleTypeConvert(3,short.class);\n    assertEquals(Short.valueOf((short)3),(Short)result);\n    result=CompatibleTypeUtils.compatibleTypeConvert((short)3,int.class);\n    assertEquals(Integer.valueOf(3),(Integer)result);\n    result=CompatibleTypeUtils.compatibleTypeConvert(3,int.class);\n    assertEquals(Integer.valueOf(3),(Integer)result);\n    result=CompatibleTypeUtils.compatibleTypeConvert(3,long.class);\n    assertEquals(Long.valueOf(3),(Long)result);\n    result=CompatibleTypeUtils.compatibleTypeConvert(3L,int.class);\n    assertEquals(Integer.valueOf(3),(Integer)result);\n    result=CompatibleTypeUtils.compatibleTypeConvert(3L,BigInteger.class);\n    assertEquals(BigInteger.valueOf(3L),(BigInteger)result);\n    result=CompatibleTypeUtils.compatibleTypeConvert(BigInteger.valueOf(3L),int.class);\n    assertEquals(Integer.valueOf(3),(Integer)result);\n  }\n{\n    result=CompatibleTypeUtils.compatibleTypeConvert(3D,float.class);\n    assertEquals(Float.valueOf(3),(Float)result);\n    result=CompatibleTypeUtils.compatibleTypeConvert(3F,double.class);\n    assertEquals(Double.valueOf(3),(Double)result);\n    result=CompatibleTypeUtils.compatibleTypeConvert(3D,double.class);\n    assertEquals(Double.valueOf(3),(Double)result);\n    result=CompatibleTypeUtils.compatibleTypeConvert(3D,BigDecimal.class);\n    assertEquals(BigDecimal.valueOf(3D),(BigDecimal)result);\n    result=CompatibleTypeUtils.compatibleTypeConvert(BigDecimal.valueOf(3D),double.class);\n    assertEquals(Double.valueOf(3),(Double)result);\n  }\n{\n    List<String> list=new ArrayList<String>();\n    list.add(\"a\");\n    list.add(\"b\");\n    Set<String> set=new HashSet<String>();\n    set.add(\"a\");\n    set.add(\"b\");\n    String[] array=new String[]{\"a\",\"b\"};\n    result=CompatibleTypeUtils.compatibleTypeConvert(array,List.class);\n    assertEquals(ArrayList.class,result.getClass());\n    assertEquals(2,((List<String>)result).size());\n    assertTrue(((List<String>)result).contains(\"a\"));\n    assertTrue(((List<String>)result).contains(\"b\"));\n    result=CompatibleTypeUtils.compatibleTypeConvert(set,List.class);\n    assertEquals(ArrayList.class,result.getClass());\n    assertEquals(2,((List<String>)result).size());\n    assertTrue(((List<String>)result).contains(\"a\"));\n    assertTrue(((List<String>)result).contains(\"b\"));\n    result=CompatibleTypeUtils.compatibleTypeConvert(array,CopyOnWriteArrayList.class);\n    assertEquals(CopyOnWriteArrayList.class,result.getClass());\n    assertEquals(2,((List<String>)result).size());\n    assertTrue(((List<String>)result).contains(\"a\"));\n    assertTrue(((List<String>)result).contains(\"b\"));\n    result=CompatibleTypeUtils.compatibleTypeConvert(set,CopyOnWriteArrayList.class);\n    assertEquals(CopyOnWriteArrayList.class,result.getClass());\n    assertEquals(2,((List<String>)result).size());\n    assertTrue(((List<String>)result).contains(\"a\"));\n    assertTrue(((List<String>)result).contains(\"b\"));\n    result=CompatibleTypeUtils.compatibleTypeConvert(set,String[].class);\n    assertEquals(String[].class,result.getClass());\n    assertEquals(2,((String[])result).length);\n    assertTrue(((String[])result)[0].equals(\"a\") || ((String[])result)[0].equals(\"b\"));\n    assertTrue(((String[])result)[1].equals(\"a\") || ((String[])result)[1].equals(\"b\"));\n    result=CompatibleTypeUtils.compatibleTypeConvert(array,Set.class);\n    assertEquals(HashSet.class,result.getClass());\n    assertEquals(2,((Set<String>)result).size());\n    assertTrue(((Set<String>)result).contains(\"a\"));\n    assertTrue(((Set<String>)result).contains(\"b\"));\n    result=CompatibleTypeUtils.compatibleTypeConvert(list,Set.class);\n    assertEquals(HashSet.class,result.getClass());\n    assertEquals(2,((Set<String>)result).size());\n    assertTrue(((Set<String>)result).contains(\"a\"));\n    assertTrue(((Set<String>)result).contains(\"b\"));\n    result=CompatibleTypeUtils.compatibleTypeConvert(array,ConcurrentHashSet.class);\n    assertEquals(ConcurrentHashSet.class,result.getClass());\n    assertEquals(2,((Set<String>)result).size());\n    assertTrue(((Set<String>)result).contains(\"a\"));\n    assertTrue(((Set<String>)result).contains(\"b\"));\n    result=CompatibleTypeUtils.compatibleTypeConvert(list,ConcurrentHashSet.class);\n    assertEquals(ConcurrentHashSet.class,result.getClass());\n    assertEquals(2,((Set<String>)result).size());\n    assertTrue(((Set<String>)result).contains(\"a\"));\n    assertTrue(((Set<String>)result).contains(\"b\"));\n    result=CompatibleTypeUtils.compatibleTypeConvert(list,String[].class);\n    assertEquals(String[].class,result.getClass());\n    assertEquals(2,((String[])result).length);\n    assertTrue(((String[])result)[0].equals(\"a\"));\n    assertTrue(((String[])result)[1].equals(\"b\"));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1460,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 135,
        "startColumnNumber" : 12,
        "endLineNumber" : 135,
        "endColumnNumber" : 81
      },
      "nodeContext" : "result=CompatibleTypeUtils.compatibleTypeConvert(3F,double.class);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "java.lang.Object"
  } ],
  "positionList" : [ {
    "charLength" : 59,
    "startLineNumber" : 135,
    "startColumnNumber" : 21,
    "endLineNumber" : 135,
    "endColumnNumber" : 80
  } ],
  "layoutRelationDataList" : [ ]
}