{
  "id" : 329,
  "expression" : "result",
  "projectName" : "prestodb@presto",
  "commitID" : "eff77883d0d24dc6022ecde252612d1430c9fbac",
  "filePath" : "/presto-iceberg/src/main/java/com/facebook/presto/iceberg/TableStatisticsMaker.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "result",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 171,
      "startColumnNumber" : 8,
      "endLineNumber" : 171,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 171,
        "startColumnNumber" : 8,
        "endLineNumber" : 171,
        "endColumnNumber" : 52
      },
      "nodeContext" : "result.setRowCount(Estimate.of(recordCount))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 171,
        "startColumnNumber" : 8,
        "endLineNumber" : 171,
        "endColumnNumber" : 53
      },
      "nodeContext" : "result.setRowCount(Estimate.of(recordCount));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5969,
        "startLineNumber" : 74,
        "startColumnNumber" : 4,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!tableHandle.getSnapshotId().isPresent() || constraint.getSummary().isNone()) {\n    return TableStatistics.empty();\n  }\n  TupleDomain<IcebergColumnHandle> intersection=constraint.getSummary().transform(IcebergColumnHandle.class::cast).intersect(tableHandle.getPredicate());\n  if (intersection.isNone()) {\n    return TableStatistics.empty();\n  }\n  List<Types.NestedField> columns=icebergTable.schema().columns();\n  Map<Integer,Type.PrimitiveType> idToTypeMapping=columns.stream().filter(column -> column.type().isPrimitiveType()).collect(Collectors.toMap(Types.NestedField::fieldId,column -> column.type().asPrimitiveType()));\n  List<PartitionField> partitionFields=icebergTable.spec().fields();\n  Set<Integer> identityPartitionIds=getIdentityPartitions(icebergTable.spec()).keySet().stream().map(PartitionField::sourceId).collect(toSet());\n  List<Types.NestedField> nonPartitionPrimitiveColumns=columns.stream().filter(column -> !identityPartitionIds.contains(column.fieldId()) && column.type().isPrimitiveType()).collect(toImmutableList());\n  List<Type> icebergPartitionTypes=partitionTypes(partitionFields,idToTypeMapping);\n  List<IcebergColumnHandle> columnHandles=getColumns(icebergTable.schema(),typeManager);\n  Map<Integer,IcebergColumnHandle> idToColumnHandle=columnHandles.stream().collect(toImmutableMap(IcebergColumnHandle::getId,identity()));\n  ImmutableMap.Builder<Integer,ColumnFieldDetails> idToDetailsBuilder=ImmutableMap.builder();\n  for (int index=0; index < partitionFields.size(); index++) {\n    PartitionField field=partitionFields.get(index);\n    Type type=icebergPartitionTypes.get(index);\n    idToDetailsBuilder.put(field.sourceId(),new ColumnFieldDetails(field,idToColumnHandle.get(field.sourceId()),type,toPrestoType(type,typeManager),type.typeId().javaClass()));\n  }\n  Map<Integer,ColumnFieldDetails> idToDetails=idToDetailsBuilder.build();\n  TableScan tableScan=icebergTable.newScan().filter(toIcebergExpression(intersection)).useSnapshot(tableHandle.getSnapshotId().get()).includeColumnStats();\n  Partition summary=null;\n  try (CloseableIterable<FileScanTask> fileScanTasks=tableScan.planFiles()){\n    for (    FileScanTask fileScanTask : fileScanTasks) {\n      DataFile dataFile=fileScanTask.file();\n      if (!dataFileMatches(dataFile,constraint,idToTypeMapping,partitionFields,idToDetails)) {\n        continue;\n      }\n      if (summary == null) {\n        summary=new Partition(idToTypeMapping,nonPartitionPrimitiveColumns,dataFile.partition(),dataFile.recordCount(),dataFile.fileSizeInBytes(),toMap(idToTypeMapping,dataFile.lowerBounds()),toMap(idToTypeMapping,dataFile.upperBounds()),dataFile.nullValueCounts(),dataFile.columnSizes());\n      }\n else {\n        summary.incrementFileCount();\n        summary.incrementRecordCount(dataFile.recordCount());\n        summary.incrementSize(dataFile.fileSizeInBytes());\n        updateSummaryMin(summary,partitionFields,toMap(idToTypeMapping,dataFile.lowerBounds()),dataFile.nullValueCounts(),dataFile.recordCount());\n        updateSummaryMax(summary,partitionFields,toMap(idToTypeMapping,dataFile.upperBounds()),dataFile.nullValueCounts(),dataFile.recordCount());\n        summary.updateNullCount(dataFile.nullValueCounts());\n        updateColumnSizes(summary,dataFile.columnSizes());\n      }\n    }\n  }\n catch (  IOException e) {\n    throw new UncheckedIOException(e);\n  }\n  if (summary == null) {\n    return TableStatistics.empty();\n  }\n  double recordCount=summary.getRecordCount();\n  TableStatistics.Builder result=TableStatistics.builder();\n  result.setRowCount(Estimate.of(recordCount));\n  result.setTotalSize(Estimate.of(summary.getSize()));\n  for (  IcebergColumnHandle columnHandle : idToColumnHandle.values()) {\n    int fieldId=columnHandle.getId();\n    ColumnStatistics.Builder columnBuilder=new ColumnStatistics.Builder();\n    Long nullCount=summary.getNullCounts().get(fieldId);\n    if (nullCount != null) {\n      columnBuilder.setNullsFraction(Estimate.of(nullCount / recordCount));\n    }\n    if (summary.getColumnSizes() != null) {\n      Long columnSize=summary.getColumnSizes().get(fieldId);\n      if (columnSize != null) {\n        columnBuilder.setDataSize(Estimate.of(columnSize));\n      }\n    }\n    Object min=summary.getMinValues().get(fieldId);\n    Object max=summary.getMaxValues().get(fieldId);\n    if (min instanceof Number && max instanceof Number) {\n      columnBuilder.setRange(Optional.of(new DoubleRange(((Number)min).doubleValue(),((Number)max).doubleValue())));\n    }\n    result.setColumnStatistics(columnHandle,columnBuilder.build());\n  }\n  return result.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 701,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6072,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private TableStatistics makeTableStatistics(IcebergTableHandle tableHandle,Constraint constraint){\n  if (!tableHandle.getSnapshotId().isPresent() || constraint.getSummary().isNone()) {\n    return TableStatistics.empty();\n  }\n  TupleDomain<IcebergColumnHandle> intersection=constraint.getSummary().transform(IcebergColumnHandle.class::cast).intersect(tableHandle.getPredicate());\n  if (intersection.isNone()) {\n    return TableStatistics.empty();\n  }\n  List<Types.NestedField> columns=icebergTable.schema().columns();\n  Map<Integer,Type.PrimitiveType> idToTypeMapping=columns.stream().filter(column -> column.type().isPrimitiveType()).collect(Collectors.toMap(Types.NestedField::fieldId,column -> column.type().asPrimitiveType()));\n  List<PartitionField> partitionFields=icebergTable.spec().fields();\n  Set<Integer> identityPartitionIds=getIdentityPartitions(icebergTable.spec()).keySet().stream().map(PartitionField::sourceId).collect(toSet());\n  List<Types.NestedField> nonPartitionPrimitiveColumns=columns.stream().filter(column -> !identityPartitionIds.contains(column.fieldId()) && column.type().isPrimitiveType()).collect(toImmutableList());\n  List<Type> icebergPartitionTypes=partitionTypes(partitionFields,idToTypeMapping);\n  List<IcebergColumnHandle> columnHandles=getColumns(icebergTable.schema(),typeManager);\n  Map<Integer,IcebergColumnHandle> idToColumnHandle=columnHandles.stream().collect(toImmutableMap(IcebergColumnHandle::getId,identity()));\n  ImmutableMap.Builder<Integer,ColumnFieldDetails> idToDetailsBuilder=ImmutableMap.builder();\n  for (int index=0; index < partitionFields.size(); index++) {\n    PartitionField field=partitionFields.get(index);\n    Type type=icebergPartitionTypes.get(index);\n    idToDetailsBuilder.put(field.sourceId(),new ColumnFieldDetails(field,idToColumnHandle.get(field.sourceId()),type,toPrestoType(type,typeManager),type.typeId().javaClass()));\n  }\n  Map<Integer,ColumnFieldDetails> idToDetails=idToDetailsBuilder.build();\n  TableScan tableScan=icebergTable.newScan().filter(toIcebergExpression(intersection)).useSnapshot(tableHandle.getSnapshotId().get()).includeColumnStats();\n  Partition summary=null;\n  try (CloseableIterable<FileScanTask> fileScanTasks=tableScan.planFiles()){\n    for (    FileScanTask fileScanTask : fileScanTasks) {\n      DataFile dataFile=fileScanTask.file();\n      if (!dataFileMatches(dataFile,constraint,idToTypeMapping,partitionFields,idToDetails)) {\n        continue;\n      }\n      if (summary == null) {\n        summary=new Partition(idToTypeMapping,nonPartitionPrimitiveColumns,dataFile.partition(),dataFile.recordCount(),dataFile.fileSizeInBytes(),toMap(idToTypeMapping,dataFile.lowerBounds()),toMap(idToTypeMapping,dataFile.upperBounds()),dataFile.nullValueCounts(),dataFile.columnSizes());\n      }\n else {\n        summary.incrementFileCount();\n        summary.incrementRecordCount(dataFile.recordCount());\n        summary.incrementSize(dataFile.fileSizeInBytes());\n        updateSummaryMin(summary,partitionFields,toMap(idToTypeMapping,dataFile.lowerBounds()),dataFile.nullValueCounts(),dataFile.recordCount());\n        updateSummaryMax(summary,partitionFields,toMap(idToTypeMapping,dataFile.upperBounds()),dataFile.nullValueCounts(),dataFile.recordCount());\n        summary.updateNullCount(dataFile.nullValueCounts());\n        updateColumnSizes(summary,dataFile.columnSizes());\n      }\n    }\n  }\n catch (  IOException e) {\n    throw new UncheckedIOException(e);\n  }\n  if (summary == null) {\n    return TableStatistics.empty();\n  }\n  double recordCount=summary.getRecordCount();\n  TableStatistics.Builder result=TableStatistics.builder();\n  result.setRowCount(Estimate.of(recordCount));\n  result.setTotalSize(Estimate.of(summary.getSize()));\n  for (  IcebergColumnHandle columnHandle : idToColumnHandle.values()) {\n    int fieldId=columnHandle.getId();\n    ColumnStatistics.Builder columnBuilder=new ColumnStatistics.Builder();\n    Long nullCount=summary.getNullCounts().get(fieldId);\n    if (nullCount != null) {\n      columnBuilder.setNullsFraction(Estimate.of(nullCount / recordCount));\n    }\n    if (summary.getColumnSizes() != null) {\n      Long columnSize=summary.getColumnSizes().get(fieldId);\n      if (columnSize != null) {\n        columnBuilder.setDataSize(Estimate.of(columnSize));\n      }\n    }\n    Object min=summary.getMinValues().get(fieldId);\n    Object max=summary.getMaxValues().get(fieldId);\n    if (min instanceof Number && max instanceof Number) {\n      columnBuilder.setRange(Optional.of(new DoubleRange(((Number)min).doubleValue(),((Number)max).doubleValue())));\n    }\n    result.setColumnStatistics(columnHandle,columnBuilder.build());\n  }\n  return result.build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 714,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 171,
        "startColumnNumber" : 8,
        "endLineNumber" : 171,
        "endColumnNumber" : 53
      },
      "nodeContext" : "result.setRowCount(Estimate.of(recordCount));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.facebook.presto.spi.statistics.TableStatistics.Builder"
  }, {
    "nodeContext" : "result",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 172,
      "startColumnNumber" : 8,
      "endLineNumber" : 172,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 172,
        "startColumnNumber" : 8,
        "endLineNumber" : 172,
        "endColumnNumber" : 59
      },
      "nodeContext" : "result.setTotalSize(Estimate.of(summary.getSize()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 172,
        "startColumnNumber" : 8,
        "endLineNumber" : 172,
        "endColumnNumber" : 60
      },
      "nodeContext" : "result.setTotalSize(Estimate.of(summary.getSize()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5969,
        "startLineNumber" : 74,
        "startColumnNumber" : 4,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!tableHandle.getSnapshotId().isPresent() || constraint.getSummary().isNone()) {\n    return TableStatistics.empty();\n  }\n  TupleDomain<IcebergColumnHandle> intersection=constraint.getSummary().transform(IcebergColumnHandle.class::cast).intersect(tableHandle.getPredicate());\n  if (intersection.isNone()) {\n    return TableStatistics.empty();\n  }\n  List<Types.NestedField> columns=icebergTable.schema().columns();\n  Map<Integer,Type.PrimitiveType> idToTypeMapping=columns.stream().filter(column -> column.type().isPrimitiveType()).collect(Collectors.toMap(Types.NestedField::fieldId,column -> column.type().asPrimitiveType()));\n  List<PartitionField> partitionFields=icebergTable.spec().fields();\n  Set<Integer> identityPartitionIds=getIdentityPartitions(icebergTable.spec()).keySet().stream().map(PartitionField::sourceId).collect(toSet());\n  List<Types.NestedField> nonPartitionPrimitiveColumns=columns.stream().filter(column -> !identityPartitionIds.contains(column.fieldId()) && column.type().isPrimitiveType()).collect(toImmutableList());\n  List<Type> icebergPartitionTypes=partitionTypes(partitionFields,idToTypeMapping);\n  List<IcebergColumnHandle> columnHandles=getColumns(icebergTable.schema(),typeManager);\n  Map<Integer,IcebergColumnHandle> idToColumnHandle=columnHandles.stream().collect(toImmutableMap(IcebergColumnHandle::getId,identity()));\n  ImmutableMap.Builder<Integer,ColumnFieldDetails> idToDetailsBuilder=ImmutableMap.builder();\n  for (int index=0; index < partitionFields.size(); index++) {\n    PartitionField field=partitionFields.get(index);\n    Type type=icebergPartitionTypes.get(index);\n    idToDetailsBuilder.put(field.sourceId(),new ColumnFieldDetails(field,idToColumnHandle.get(field.sourceId()),type,toPrestoType(type,typeManager),type.typeId().javaClass()));\n  }\n  Map<Integer,ColumnFieldDetails> idToDetails=idToDetailsBuilder.build();\n  TableScan tableScan=icebergTable.newScan().filter(toIcebergExpression(intersection)).useSnapshot(tableHandle.getSnapshotId().get()).includeColumnStats();\n  Partition summary=null;\n  try (CloseableIterable<FileScanTask> fileScanTasks=tableScan.planFiles()){\n    for (    FileScanTask fileScanTask : fileScanTasks) {\n      DataFile dataFile=fileScanTask.file();\n      if (!dataFileMatches(dataFile,constraint,idToTypeMapping,partitionFields,idToDetails)) {\n        continue;\n      }\n      if (summary == null) {\n        summary=new Partition(idToTypeMapping,nonPartitionPrimitiveColumns,dataFile.partition(),dataFile.recordCount(),dataFile.fileSizeInBytes(),toMap(idToTypeMapping,dataFile.lowerBounds()),toMap(idToTypeMapping,dataFile.upperBounds()),dataFile.nullValueCounts(),dataFile.columnSizes());\n      }\n else {\n        summary.incrementFileCount();\n        summary.incrementRecordCount(dataFile.recordCount());\n        summary.incrementSize(dataFile.fileSizeInBytes());\n        updateSummaryMin(summary,partitionFields,toMap(idToTypeMapping,dataFile.lowerBounds()),dataFile.nullValueCounts(),dataFile.recordCount());\n        updateSummaryMax(summary,partitionFields,toMap(idToTypeMapping,dataFile.upperBounds()),dataFile.nullValueCounts(),dataFile.recordCount());\n        summary.updateNullCount(dataFile.nullValueCounts());\n        updateColumnSizes(summary,dataFile.columnSizes());\n      }\n    }\n  }\n catch (  IOException e) {\n    throw new UncheckedIOException(e);\n  }\n  if (summary == null) {\n    return TableStatistics.empty();\n  }\n  double recordCount=summary.getRecordCount();\n  TableStatistics.Builder result=TableStatistics.builder();\n  result.setRowCount(Estimate.of(recordCount));\n  result.setTotalSize(Estimate.of(summary.getSize()));\n  for (  IcebergColumnHandle columnHandle : idToColumnHandle.values()) {\n    int fieldId=columnHandle.getId();\n    ColumnStatistics.Builder columnBuilder=new ColumnStatistics.Builder();\n    Long nullCount=summary.getNullCounts().get(fieldId);\n    if (nullCount != null) {\n      columnBuilder.setNullsFraction(Estimate.of(nullCount / recordCount));\n    }\n    if (summary.getColumnSizes() != null) {\n      Long columnSize=summary.getColumnSizes().get(fieldId);\n      if (columnSize != null) {\n        columnBuilder.setDataSize(Estimate.of(columnSize));\n      }\n    }\n    Object min=summary.getMinValues().get(fieldId);\n    Object max=summary.getMaxValues().get(fieldId);\n    if (min instanceof Number && max instanceof Number) {\n      columnBuilder.setRange(Optional.of(new DoubleRange(((Number)min).doubleValue(),((Number)max).doubleValue())));\n    }\n    result.setColumnStatistics(columnHandle,columnBuilder.build());\n  }\n  return result.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 701,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6072,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private TableStatistics makeTableStatistics(IcebergTableHandle tableHandle,Constraint constraint){\n  if (!tableHandle.getSnapshotId().isPresent() || constraint.getSummary().isNone()) {\n    return TableStatistics.empty();\n  }\n  TupleDomain<IcebergColumnHandle> intersection=constraint.getSummary().transform(IcebergColumnHandle.class::cast).intersect(tableHandle.getPredicate());\n  if (intersection.isNone()) {\n    return TableStatistics.empty();\n  }\n  List<Types.NestedField> columns=icebergTable.schema().columns();\n  Map<Integer,Type.PrimitiveType> idToTypeMapping=columns.stream().filter(column -> column.type().isPrimitiveType()).collect(Collectors.toMap(Types.NestedField::fieldId,column -> column.type().asPrimitiveType()));\n  List<PartitionField> partitionFields=icebergTable.spec().fields();\n  Set<Integer> identityPartitionIds=getIdentityPartitions(icebergTable.spec()).keySet().stream().map(PartitionField::sourceId).collect(toSet());\n  List<Types.NestedField> nonPartitionPrimitiveColumns=columns.stream().filter(column -> !identityPartitionIds.contains(column.fieldId()) && column.type().isPrimitiveType()).collect(toImmutableList());\n  List<Type> icebergPartitionTypes=partitionTypes(partitionFields,idToTypeMapping);\n  List<IcebergColumnHandle> columnHandles=getColumns(icebergTable.schema(),typeManager);\n  Map<Integer,IcebergColumnHandle> idToColumnHandle=columnHandles.stream().collect(toImmutableMap(IcebergColumnHandle::getId,identity()));\n  ImmutableMap.Builder<Integer,ColumnFieldDetails> idToDetailsBuilder=ImmutableMap.builder();\n  for (int index=0; index < partitionFields.size(); index++) {\n    PartitionField field=partitionFields.get(index);\n    Type type=icebergPartitionTypes.get(index);\n    idToDetailsBuilder.put(field.sourceId(),new ColumnFieldDetails(field,idToColumnHandle.get(field.sourceId()),type,toPrestoType(type,typeManager),type.typeId().javaClass()));\n  }\n  Map<Integer,ColumnFieldDetails> idToDetails=idToDetailsBuilder.build();\n  TableScan tableScan=icebergTable.newScan().filter(toIcebergExpression(intersection)).useSnapshot(tableHandle.getSnapshotId().get()).includeColumnStats();\n  Partition summary=null;\n  try (CloseableIterable<FileScanTask> fileScanTasks=tableScan.planFiles()){\n    for (    FileScanTask fileScanTask : fileScanTasks) {\n      DataFile dataFile=fileScanTask.file();\n      if (!dataFileMatches(dataFile,constraint,idToTypeMapping,partitionFields,idToDetails)) {\n        continue;\n      }\n      if (summary == null) {\n        summary=new Partition(idToTypeMapping,nonPartitionPrimitiveColumns,dataFile.partition(),dataFile.recordCount(),dataFile.fileSizeInBytes(),toMap(idToTypeMapping,dataFile.lowerBounds()),toMap(idToTypeMapping,dataFile.upperBounds()),dataFile.nullValueCounts(),dataFile.columnSizes());\n      }\n else {\n        summary.incrementFileCount();\n        summary.incrementRecordCount(dataFile.recordCount());\n        summary.incrementSize(dataFile.fileSizeInBytes());\n        updateSummaryMin(summary,partitionFields,toMap(idToTypeMapping,dataFile.lowerBounds()),dataFile.nullValueCounts(),dataFile.recordCount());\n        updateSummaryMax(summary,partitionFields,toMap(idToTypeMapping,dataFile.upperBounds()),dataFile.nullValueCounts(),dataFile.recordCount());\n        summary.updateNullCount(dataFile.nullValueCounts());\n        updateColumnSizes(summary,dataFile.columnSizes());\n      }\n    }\n  }\n catch (  IOException e) {\n    throw new UncheckedIOException(e);\n  }\n  if (summary == null) {\n    return TableStatistics.empty();\n  }\n  double recordCount=summary.getRecordCount();\n  TableStatistics.Builder result=TableStatistics.builder();\n  result.setRowCount(Estimate.of(recordCount));\n  result.setTotalSize(Estimate.of(summary.getSize()));\n  for (  IcebergColumnHandle columnHandle : idToColumnHandle.values()) {\n    int fieldId=columnHandle.getId();\n    ColumnStatistics.Builder columnBuilder=new ColumnStatistics.Builder();\n    Long nullCount=summary.getNullCounts().get(fieldId);\n    if (nullCount != null) {\n      columnBuilder.setNullsFraction(Estimate.of(nullCount / recordCount));\n    }\n    if (summary.getColumnSizes() != null) {\n      Long columnSize=summary.getColumnSizes().get(fieldId);\n      if (columnSize != null) {\n        columnBuilder.setDataSize(Estimate.of(columnSize));\n      }\n    }\n    Object min=summary.getMinValues().get(fieldId);\n    Object max=summary.getMaxValues().get(fieldId);\n    if (min instanceof Number && max instanceof Number) {\n      columnBuilder.setRange(Optional.of(new DoubleRange(((Number)min).doubleValue(),((Number)max).doubleValue())));\n    }\n    result.setColumnStatistics(columnHandle,columnBuilder.build());\n  }\n  return result.build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 714,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 172,
        "startColumnNumber" : 8,
        "endLineNumber" : 172,
        "endColumnNumber" : 60
      },
      "nodeContext" : "result.setTotalSize(Estimate.of(summary.getSize()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "com.facebook.presto.spi.statistics.TableStatistics.Builder"
  }, {
    "nodeContext" : "result",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 191,
      "startColumnNumber" : 12,
      "endLineNumber" : 191,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 191,
        "startColumnNumber" : 12,
        "endLineNumber" : 191,
        "endColumnNumber" : 75
      },
      "nodeContext" : "result.setColumnStatistics(columnHandle,columnBuilder.build())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 191,
        "startColumnNumber" : 12,
        "endLineNumber" : 191,
        "endColumnNumber" : 76
      },
      "nodeContext" : "result.setColumnStatistics(columnHandle,columnBuilder.build());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1030,
        "startLineNumber" : 173,
        "startColumnNumber" : 75,
        "endLineNumber" : 192,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int fieldId=columnHandle.getId();\n  ColumnStatistics.Builder columnBuilder=new ColumnStatistics.Builder();\n  Long nullCount=summary.getNullCounts().get(fieldId);\n  if (nullCount != null) {\n    columnBuilder.setNullsFraction(Estimate.of(nullCount / recordCount));\n  }\n  if (summary.getColumnSizes() != null) {\n    Long columnSize=summary.getColumnSizes().get(fieldId);\n    if (columnSize != null) {\n      columnBuilder.setDataSize(Estimate.of(columnSize));\n    }\n  }\n  Object min=summary.getMinValues().get(fieldId);\n  Object max=summary.getMaxValues().get(fieldId);\n  if (min instanceof Number && max instanceof Number) {\n    columnBuilder.setRange(Optional.of(new DoubleRange(((Number)min).doubleValue(),((Number)max).doubleValue())));\n  }\n  result.setColumnStatistics(columnHandle,columnBuilder.build());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 142,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1097,
        "startLineNumber" : 173,
        "startColumnNumber" : 8,
        "endLineNumber" : 192,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (IcebergColumnHandle columnHandle : idToColumnHandle.values()) {\n  int fieldId=columnHandle.getId();\n  ColumnStatistics.Builder columnBuilder=new ColumnStatistics.Builder();\n  Long nullCount=summary.getNullCounts().get(fieldId);\n  if (nullCount != null) {\n    columnBuilder.setNullsFraction(Estimate.of(nullCount / recordCount));\n  }\n  if (summary.getColumnSizes() != null) {\n    Long columnSize=summary.getColumnSizes().get(fieldId);\n    if (columnSize != null) {\n      columnBuilder.setDataSize(Estimate.of(columnSize));\n    }\n  }\n  Object min=summary.getMinValues().get(fieldId);\n  Object max=summary.getMaxValues().get(fieldId);\n  if (min instanceof Number && max instanceof Number) {\n    columnBuilder.setRange(Optional.of(new DoubleRange(((Number)min).doubleValue(),((Number)max).doubleValue())));\n  }\n  result.setColumnStatistics(columnHandle,columnBuilder.build());\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 150,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5969,
        "startLineNumber" : 74,
        "startColumnNumber" : 4,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!tableHandle.getSnapshotId().isPresent() || constraint.getSummary().isNone()) {\n    return TableStatistics.empty();\n  }\n  TupleDomain<IcebergColumnHandle> intersection=constraint.getSummary().transform(IcebergColumnHandle.class::cast).intersect(tableHandle.getPredicate());\n  if (intersection.isNone()) {\n    return TableStatistics.empty();\n  }\n  List<Types.NestedField> columns=icebergTable.schema().columns();\n  Map<Integer,Type.PrimitiveType> idToTypeMapping=columns.stream().filter(column -> column.type().isPrimitiveType()).collect(Collectors.toMap(Types.NestedField::fieldId,column -> column.type().asPrimitiveType()));\n  List<PartitionField> partitionFields=icebergTable.spec().fields();\n  Set<Integer> identityPartitionIds=getIdentityPartitions(icebergTable.spec()).keySet().stream().map(PartitionField::sourceId).collect(toSet());\n  List<Types.NestedField> nonPartitionPrimitiveColumns=columns.stream().filter(column -> !identityPartitionIds.contains(column.fieldId()) && column.type().isPrimitiveType()).collect(toImmutableList());\n  List<Type> icebergPartitionTypes=partitionTypes(partitionFields,idToTypeMapping);\n  List<IcebergColumnHandle> columnHandles=getColumns(icebergTable.schema(),typeManager);\n  Map<Integer,IcebergColumnHandle> idToColumnHandle=columnHandles.stream().collect(toImmutableMap(IcebergColumnHandle::getId,identity()));\n  ImmutableMap.Builder<Integer,ColumnFieldDetails> idToDetailsBuilder=ImmutableMap.builder();\n  for (int index=0; index < partitionFields.size(); index++) {\n    PartitionField field=partitionFields.get(index);\n    Type type=icebergPartitionTypes.get(index);\n    idToDetailsBuilder.put(field.sourceId(),new ColumnFieldDetails(field,idToColumnHandle.get(field.sourceId()),type,toPrestoType(type,typeManager),type.typeId().javaClass()));\n  }\n  Map<Integer,ColumnFieldDetails> idToDetails=idToDetailsBuilder.build();\n  TableScan tableScan=icebergTable.newScan().filter(toIcebergExpression(intersection)).useSnapshot(tableHandle.getSnapshotId().get()).includeColumnStats();\n  Partition summary=null;\n  try (CloseableIterable<FileScanTask> fileScanTasks=tableScan.planFiles()){\n    for (    FileScanTask fileScanTask : fileScanTasks) {\n      DataFile dataFile=fileScanTask.file();\n      if (!dataFileMatches(dataFile,constraint,idToTypeMapping,partitionFields,idToDetails)) {\n        continue;\n      }\n      if (summary == null) {\n        summary=new Partition(idToTypeMapping,nonPartitionPrimitiveColumns,dataFile.partition(),dataFile.recordCount(),dataFile.fileSizeInBytes(),toMap(idToTypeMapping,dataFile.lowerBounds()),toMap(idToTypeMapping,dataFile.upperBounds()),dataFile.nullValueCounts(),dataFile.columnSizes());\n      }\n else {\n        summary.incrementFileCount();\n        summary.incrementRecordCount(dataFile.recordCount());\n        summary.incrementSize(dataFile.fileSizeInBytes());\n        updateSummaryMin(summary,partitionFields,toMap(idToTypeMapping,dataFile.lowerBounds()),dataFile.nullValueCounts(),dataFile.recordCount());\n        updateSummaryMax(summary,partitionFields,toMap(idToTypeMapping,dataFile.upperBounds()),dataFile.nullValueCounts(),dataFile.recordCount());\n        summary.updateNullCount(dataFile.nullValueCounts());\n        updateColumnSizes(summary,dataFile.columnSizes());\n      }\n    }\n  }\n catch (  IOException e) {\n    throw new UncheckedIOException(e);\n  }\n  if (summary == null) {\n    return TableStatistics.empty();\n  }\n  double recordCount=summary.getRecordCount();\n  TableStatistics.Builder result=TableStatistics.builder();\n  result.setRowCount(Estimate.of(recordCount));\n  result.setTotalSize(Estimate.of(summary.getSize()));\n  for (  IcebergColumnHandle columnHandle : idToColumnHandle.values()) {\n    int fieldId=columnHandle.getId();\n    ColumnStatistics.Builder columnBuilder=new ColumnStatistics.Builder();\n    Long nullCount=summary.getNullCounts().get(fieldId);\n    if (nullCount != null) {\n      columnBuilder.setNullsFraction(Estimate.of(nullCount / recordCount));\n    }\n    if (summary.getColumnSizes() != null) {\n      Long columnSize=summary.getColumnSizes().get(fieldId);\n      if (columnSize != null) {\n        columnBuilder.setDataSize(Estimate.of(columnSize));\n      }\n    }\n    Object min=summary.getMinValues().get(fieldId);\n    Object max=summary.getMaxValues().get(fieldId);\n    if (min instanceof Number && max instanceof Number) {\n      columnBuilder.setRange(Optional.of(new DoubleRange(((Number)min).doubleValue(),((Number)max).doubleValue())));\n    }\n    result.setColumnStatistics(columnHandle,columnBuilder.build());\n  }\n  return result.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 701,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6072,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private TableStatistics makeTableStatistics(IcebergTableHandle tableHandle,Constraint constraint){\n  if (!tableHandle.getSnapshotId().isPresent() || constraint.getSummary().isNone()) {\n    return TableStatistics.empty();\n  }\n  TupleDomain<IcebergColumnHandle> intersection=constraint.getSummary().transform(IcebergColumnHandle.class::cast).intersect(tableHandle.getPredicate());\n  if (intersection.isNone()) {\n    return TableStatistics.empty();\n  }\n  List<Types.NestedField> columns=icebergTable.schema().columns();\n  Map<Integer,Type.PrimitiveType> idToTypeMapping=columns.stream().filter(column -> column.type().isPrimitiveType()).collect(Collectors.toMap(Types.NestedField::fieldId,column -> column.type().asPrimitiveType()));\n  List<PartitionField> partitionFields=icebergTable.spec().fields();\n  Set<Integer> identityPartitionIds=getIdentityPartitions(icebergTable.spec()).keySet().stream().map(PartitionField::sourceId).collect(toSet());\n  List<Types.NestedField> nonPartitionPrimitiveColumns=columns.stream().filter(column -> !identityPartitionIds.contains(column.fieldId()) && column.type().isPrimitiveType()).collect(toImmutableList());\n  List<Type> icebergPartitionTypes=partitionTypes(partitionFields,idToTypeMapping);\n  List<IcebergColumnHandle> columnHandles=getColumns(icebergTable.schema(),typeManager);\n  Map<Integer,IcebergColumnHandle> idToColumnHandle=columnHandles.stream().collect(toImmutableMap(IcebergColumnHandle::getId,identity()));\n  ImmutableMap.Builder<Integer,ColumnFieldDetails> idToDetailsBuilder=ImmutableMap.builder();\n  for (int index=0; index < partitionFields.size(); index++) {\n    PartitionField field=partitionFields.get(index);\n    Type type=icebergPartitionTypes.get(index);\n    idToDetailsBuilder.put(field.sourceId(),new ColumnFieldDetails(field,idToColumnHandle.get(field.sourceId()),type,toPrestoType(type,typeManager),type.typeId().javaClass()));\n  }\n  Map<Integer,ColumnFieldDetails> idToDetails=idToDetailsBuilder.build();\n  TableScan tableScan=icebergTable.newScan().filter(toIcebergExpression(intersection)).useSnapshot(tableHandle.getSnapshotId().get()).includeColumnStats();\n  Partition summary=null;\n  try (CloseableIterable<FileScanTask> fileScanTasks=tableScan.planFiles()){\n    for (    FileScanTask fileScanTask : fileScanTasks) {\n      DataFile dataFile=fileScanTask.file();\n      if (!dataFileMatches(dataFile,constraint,idToTypeMapping,partitionFields,idToDetails)) {\n        continue;\n      }\n      if (summary == null) {\n        summary=new Partition(idToTypeMapping,nonPartitionPrimitiveColumns,dataFile.partition(),dataFile.recordCount(),dataFile.fileSizeInBytes(),toMap(idToTypeMapping,dataFile.lowerBounds()),toMap(idToTypeMapping,dataFile.upperBounds()),dataFile.nullValueCounts(),dataFile.columnSizes());\n      }\n else {\n        summary.incrementFileCount();\n        summary.incrementRecordCount(dataFile.recordCount());\n        summary.incrementSize(dataFile.fileSizeInBytes());\n        updateSummaryMin(summary,partitionFields,toMap(idToTypeMapping,dataFile.lowerBounds()),dataFile.nullValueCounts(),dataFile.recordCount());\n        updateSummaryMax(summary,partitionFields,toMap(idToTypeMapping,dataFile.upperBounds()),dataFile.nullValueCounts(),dataFile.recordCount());\n        summary.updateNullCount(dataFile.nullValueCounts());\n        updateColumnSizes(summary,dataFile.columnSizes());\n      }\n    }\n  }\n catch (  IOException e) {\n    throw new UncheckedIOException(e);\n  }\n  if (summary == null) {\n    return TableStatistics.empty();\n  }\n  double recordCount=summary.getRecordCount();\n  TableStatistics.Builder result=TableStatistics.builder();\n  result.setRowCount(Estimate.of(recordCount));\n  result.setTotalSize(Estimate.of(summary.getSize()));\n  for (  IcebergColumnHandle columnHandle : idToColumnHandle.values()) {\n    int fieldId=columnHandle.getId();\n    ColumnStatistics.Builder columnBuilder=new ColumnStatistics.Builder();\n    Long nullCount=summary.getNullCounts().get(fieldId);\n    if (nullCount != null) {\n      columnBuilder.setNullsFraction(Estimate.of(nullCount / recordCount));\n    }\n    if (summary.getColumnSizes() != null) {\n      Long columnSize=summary.getColumnSizes().get(fieldId);\n      if (columnSize != null) {\n        columnBuilder.setDataSize(Estimate.of(columnSize));\n      }\n    }\n    Object min=summary.getMinValues().get(fieldId);\n    Object max=summary.getMaxValues().get(fieldId);\n    if (min instanceof Number && max instanceof Number) {\n      columnBuilder.setRange(Optional.of(new DoubleRange(((Number)min).doubleValue(),((Number)max).doubleValue())));\n    }\n    result.setColumnStatistics(columnHandle,columnBuilder.build());\n  }\n  return result.build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 714,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 191,
        "startColumnNumber" : 12,
        "endLineNumber" : 191,
        "endColumnNumber" : 76
      },
      "nodeContext" : "result.setColumnStatistics(columnHandle,columnBuilder.build());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.facebook.presto.spi.statistics.TableStatistics.Builder"
  }, {
    "nodeContext" : "result",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 193,
      "startColumnNumber" : 15,
      "endLineNumber" : 193,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 193,
        "startColumnNumber" : 15,
        "endLineNumber" : 193,
        "endColumnNumber" : 29
      },
      "nodeContext" : "result.build()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 193,
        "startColumnNumber" : 8,
        "endLineNumber" : 193,
        "endColumnNumber" : 30
      },
      "nodeContext" : "return result.build();\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5969,
        "startLineNumber" : 74,
        "startColumnNumber" : 4,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!tableHandle.getSnapshotId().isPresent() || constraint.getSummary().isNone()) {\n    return TableStatistics.empty();\n  }\n  TupleDomain<IcebergColumnHandle> intersection=constraint.getSummary().transform(IcebergColumnHandle.class::cast).intersect(tableHandle.getPredicate());\n  if (intersection.isNone()) {\n    return TableStatistics.empty();\n  }\n  List<Types.NestedField> columns=icebergTable.schema().columns();\n  Map<Integer,Type.PrimitiveType> idToTypeMapping=columns.stream().filter(column -> column.type().isPrimitiveType()).collect(Collectors.toMap(Types.NestedField::fieldId,column -> column.type().asPrimitiveType()));\n  List<PartitionField> partitionFields=icebergTable.spec().fields();\n  Set<Integer> identityPartitionIds=getIdentityPartitions(icebergTable.spec()).keySet().stream().map(PartitionField::sourceId).collect(toSet());\n  List<Types.NestedField> nonPartitionPrimitiveColumns=columns.stream().filter(column -> !identityPartitionIds.contains(column.fieldId()) && column.type().isPrimitiveType()).collect(toImmutableList());\n  List<Type> icebergPartitionTypes=partitionTypes(partitionFields,idToTypeMapping);\n  List<IcebergColumnHandle> columnHandles=getColumns(icebergTable.schema(),typeManager);\n  Map<Integer,IcebergColumnHandle> idToColumnHandle=columnHandles.stream().collect(toImmutableMap(IcebergColumnHandle::getId,identity()));\n  ImmutableMap.Builder<Integer,ColumnFieldDetails> idToDetailsBuilder=ImmutableMap.builder();\n  for (int index=0; index < partitionFields.size(); index++) {\n    PartitionField field=partitionFields.get(index);\n    Type type=icebergPartitionTypes.get(index);\n    idToDetailsBuilder.put(field.sourceId(),new ColumnFieldDetails(field,idToColumnHandle.get(field.sourceId()),type,toPrestoType(type,typeManager),type.typeId().javaClass()));\n  }\n  Map<Integer,ColumnFieldDetails> idToDetails=idToDetailsBuilder.build();\n  TableScan tableScan=icebergTable.newScan().filter(toIcebergExpression(intersection)).useSnapshot(tableHandle.getSnapshotId().get()).includeColumnStats();\n  Partition summary=null;\n  try (CloseableIterable<FileScanTask> fileScanTasks=tableScan.planFiles()){\n    for (    FileScanTask fileScanTask : fileScanTasks) {\n      DataFile dataFile=fileScanTask.file();\n      if (!dataFileMatches(dataFile,constraint,idToTypeMapping,partitionFields,idToDetails)) {\n        continue;\n      }\n      if (summary == null) {\n        summary=new Partition(idToTypeMapping,nonPartitionPrimitiveColumns,dataFile.partition(),dataFile.recordCount(),dataFile.fileSizeInBytes(),toMap(idToTypeMapping,dataFile.lowerBounds()),toMap(idToTypeMapping,dataFile.upperBounds()),dataFile.nullValueCounts(),dataFile.columnSizes());\n      }\n else {\n        summary.incrementFileCount();\n        summary.incrementRecordCount(dataFile.recordCount());\n        summary.incrementSize(dataFile.fileSizeInBytes());\n        updateSummaryMin(summary,partitionFields,toMap(idToTypeMapping,dataFile.lowerBounds()),dataFile.nullValueCounts(),dataFile.recordCount());\n        updateSummaryMax(summary,partitionFields,toMap(idToTypeMapping,dataFile.upperBounds()),dataFile.nullValueCounts(),dataFile.recordCount());\n        summary.updateNullCount(dataFile.nullValueCounts());\n        updateColumnSizes(summary,dataFile.columnSizes());\n      }\n    }\n  }\n catch (  IOException e) {\n    throw new UncheckedIOException(e);\n  }\n  if (summary == null) {\n    return TableStatistics.empty();\n  }\n  double recordCount=summary.getRecordCount();\n  TableStatistics.Builder result=TableStatistics.builder();\n  result.setRowCount(Estimate.of(recordCount));\n  result.setTotalSize(Estimate.of(summary.getSize()));\n  for (  IcebergColumnHandle columnHandle : idToColumnHandle.values()) {\n    int fieldId=columnHandle.getId();\n    ColumnStatistics.Builder columnBuilder=new ColumnStatistics.Builder();\n    Long nullCount=summary.getNullCounts().get(fieldId);\n    if (nullCount != null) {\n      columnBuilder.setNullsFraction(Estimate.of(nullCount / recordCount));\n    }\n    if (summary.getColumnSizes() != null) {\n      Long columnSize=summary.getColumnSizes().get(fieldId);\n      if (columnSize != null) {\n        columnBuilder.setDataSize(Estimate.of(columnSize));\n      }\n    }\n    Object min=summary.getMinValues().get(fieldId);\n    Object max=summary.getMaxValues().get(fieldId);\n    if (min instanceof Number && max instanceof Number) {\n      columnBuilder.setRange(Optional.of(new DoubleRange(((Number)min).doubleValue(),((Number)max).doubleValue())));\n    }\n    result.setColumnStatistics(columnHandle,columnBuilder.build());\n  }\n  return result.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 701,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6072,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 194,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private TableStatistics makeTableStatistics(IcebergTableHandle tableHandle,Constraint constraint){\n  if (!tableHandle.getSnapshotId().isPresent() || constraint.getSummary().isNone()) {\n    return TableStatistics.empty();\n  }\n  TupleDomain<IcebergColumnHandle> intersection=constraint.getSummary().transform(IcebergColumnHandle.class::cast).intersect(tableHandle.getPredicate());\n  if (intersection.isNone()) {\n    return TableStatistics.empty();\n  }\n  List<Types.NestedField> columns=icebergTable.schema().columns();\n  Map<Integer,Type.PrimitiveType> idToTypeMapping=columns.stream().filter(column -> column.type().isPrimitiveType()).collect(Collectors.toMap(Types.NestedField::fieldId,column -> column.type().asPrimitiveType()));\n  List<PartitionField> partitionFields=icebergTable.spec().fields();\n  Set<Integer> identityPartitionIds=getIdentityPartitions(icebergTable.spec()).keySet().stream().map(PartitionField::sourceId).collect(toSet());\n  List<Types.NestedField> nonPartitionPrimitiveColumns=columns.stream().filter(column -> !identityPartitionIds.contains(column.fieldId()) && column.type().isPrimitiveType()).collect(toImmutableList());\n  List<Type> icebergPartitionTypes=partitionTypes(partitionFields,idToTypeMapping);\n  List<IcebergColumnHandle> columnHandles=getColumns(icebergTable.schema(),typeManager);\n  Map<Integer,IcebergColumnHandle> idToColumnHandle=columnHandles.stream().collect(toImmutableMap(IcebergColumnHandle::getId,identity()));\n  ImmutableMap.Builder<Integer,ColumnFieldDetails> idToDetailsBuilder=ImmutableMap.builder();\n  for (int index=0; index < partitionFields.size(); index++) {\n    PartitionField field=partitionFields.get(index);\n    Type type=icebergPartitionTypes.get(index);\n    idToDetailsBuilder.put(field.sourceId(),new ColumnFieldDetails(field,idToColumnHandle.get(field.sourceId()),type,toPrestoType(type,typeManager),type.typeId().javaClass()));\n  }\n  Map<Integer,ColumnFieldDetails> idToDetails=idToDetailsBuilder.build();\n  TableScan tableScan=icebergTable.newScan().filter(toIcebergExpression(intersection)).useSnapshot(tableHandle.getSnapshotId().get()).includeColumnStats();\n  Partition summary=null;\n  try (CloseableIterable<FileScanTask> fileScanTasks=tableScan.planFiles()){\n    for (    FileScanTask fileScanTask : fileScanTasks) {\n      DataFile dataFile=fileScanTask.file();\n      if (!dataFileMatches(dataFile,constraint,idToTypeMapping,partitionFields,idToDetails)) {\n        continue;\n      }\n      if (summary == null) {\n        summary=new Partition(idToTypeMapping,nonPartitionPrimitiveColumns,dataFile.partition(),dataFile.recordCount(),dataFile.fileSizeInBytes(),toMap(idToTypeMapping,dataFile.lowerBounds()),toMap(idToTypeMapping,dataFile.upperBounds()),dataFile.nullValueCounts(),dataFile.columnSizes());\n      }\n else {\n        summary.incrementFileCount();\n        summary.incrementRecordCount(dataFile.recordCount());\n        summary.incrementSize(dataFile.fileSizeInBytes());\n        updateSummaryMin(summary,partitionFields,toMap(idToTypeMapping,dataFile.lowerBounds()),dataFile.nullValueCounts(),dataFile.recordCount());\n        updateSummaryMax(summary,partitionFields,toMap(idToTypeMapping,dataFile.upperBounds()),dataFile.nullValueCounts(),dataFile.recordCount());\n        summary.updateNullCount(dataFile.nullValueCounts());\n        updateColumnSizes(summary,dataFile.columnSizes());\n      }\n    }\n  }\n catch (  IOException e) {\n    throw new UncheckedIOException(e);\n  }\n  if (summary == null) {\n    return TableStatistics.empty();\n  }\n  double recordCount=summary.getRecordCount();\n  TableStatistics.Builder result=TableStatistics.builder();\n  result.setRowCount(Estimate.of(recordCount));\n  result.setTotalSize(Estimate.of(summary.getSize()));\n  for (  IcebergColumnHandle columnHandle : idToColumnHandle.values()) {\n    int fieldId=columnHandle.getId();\n    ColumnStatistics.Builder columnBuilder=new ColumnStatistics.Builder();\n    Long nullCount=summary.getNullCounts().get(fieldId);\n    if (nullCount != null) {\n      columnBuilder.setNullsFraction(Estimate.of(nullCount / recordCount));\n    }\n    if (summary.getColumnSizes() != null) {\n      Long columnSize=summary.getColumnSizes().get(fieldId);\n      if (columnSize != null) {\n        columnBuilder.setDataSize(Estimate.of(columnSize));\n      }\n    }\n    Object min=summary.getMinValues().get(fieldId);\n    Object max=summary.getMaxValues().get(fieldId);\n    if (min instanceof Number && max instanceof Number) {\n      columnBuilder.setRange(Optional.of(new DoubleRange(((Number)min).doubleValue(),((Number)max).doubleValue())));\n    }\n    result.setColumnStatistics(columnHandle,columnBuilder.build());\n  }\n  return result.build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 714,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 193,
        "startColumnNumber" : 8,
        "endLineNumber" : 193,
        "endColumnNumber" : 30
      },
      "nodeContext" : "return result.build();\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.facebook.presto.spi.statistics.TableStatistics.Builder"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 171,
    "startColumnNumber" : 8,
    "endLineNumber" : 171,
    "endColumnNumber" : 14
  }, {
    "charLength" : 6,
    "startLineNumber" : 172,
    "startColumnNumber" : 8,
    "endLineNumber" : 172,
    "endColumnNumber" : 14
  }, {
    "charLength" : 6,
    "startLineNumber" : 191,
    "startColumnNumber" : 12,
    "endLineNumber" : 191,
    "endColumnNumber" : 18
  }, {
    "charLength" : 6,
    "startLineNumber" : 193,
    "startColumnNumber" : 15,
    "endLineNumber" : 193,
    "endColumnNumber" : 21
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  } ]
}