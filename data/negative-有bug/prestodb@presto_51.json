{
  "id" : 51,
  "expression" : "0",
  "projectName" : "prestodb@presto",
  "commitID" : "eff77883d0d24dc6022ecde252612d1430c9fbac",
  "filePath" : "/presto-main/src/main/java/com/facebook/presto/operator/scalar/SplitToMultimapFunction.java",
  "occurrences" : 8,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 50,
      "startColumnNumber" : 49,
      "endLineNumber" : 50,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 50,
        "startColumnNumber" : 23,
        "endLineNumber" : 50,
        "endColumnNumber" : 50
      },
      "nodeContext" : "entryDelimiter.length() > 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 50,
        "startColumnNumber" : 8,
        "endLineNumber" : 50,
        "endColumnNumber" : 105
      },
      "nodeContext" : "checkCondition(entryDelimiter.length() > 0,INVALID_FUNCTION_ARGUMENT,\"entryDelimiter is empty\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 50,
        "startColumnNumber" : 8,
        "endLineNumber" : 50,
        "endColumnNumber" : 106
      },
      "nodeContext" : "checkCondition(entryDelimiter.length() > 0,INVALID_FUNCTION_ARGUMENT,\"entryDelimiter is empty\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2886,
        "startLineNumber" : 49,
        "startColumnNumber" : 4,
        "endLineNumber" : 105,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  checkCondition(entryDelimiter.length() > 0,INVALID_FUNCTION_ARGUMENT,\"entryDelimiter is empty\");\n  checkCondition(keyValueDelimiter.length() > 0,INVALID_FUNCTION_ARGUMENT,\"keyValueDelimiter is empty\");\n  checkCondition(!entryDelimiter.equals(keyValueDelimiter),INVALID_FUNCTION_ARGUMENT,\"entryDelimiter and keyValueDelimiter must not be the same\");\n  Multimap<Slice,Slice> multimap=ArrayListMultimap.create();\n  int entryStart=0;\n  while (entryStart < string.length()) {\n    Slice keyValuePair;\n    int entryEnd=string.indexOf(entryDelimiter,entryStart);\n    if (entryEnd >= 0) {\n      keyValuePair=string.slice(entryStart,entryEnd - entryStart);\n    }\n else {\n      keyValuePair=string.slice(entryStart,string.length() - entryStart);\n    }\n    int keyEnd=keyValuePair.indexOf(keyValueDelimiter);\n    if (keyEnd < 0) {\n      throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"Key-value delimiter must appear exactly once in each entry. Bad input: \" + keyValuePair.toStringUtf8());\n    }\n    int valueStart=keyEnd + keyValueDelimiter.length();\n    Slice key=keyValuePair.slice(0,keyEnd);\n    Slice value=keyValuePair.slice(valueStart,keyValuePair.length() - valueStart);\n    if (value.indexOf(keyValueDelimiter) >= 0) {\n      throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"Key-value delimiter must appear exactly once in each entry. Bad input: \" + keyValuePair.toStringUtf8());\n    }\n    multimap.put(key,value);\n    if (entryEnd < 0) {\n      break;\n    }\n    entryStart=entryEnd + entryDelimiter.length();\n  }\n  BlockBuilder blockBuilder=mapType.createBlockBuilder(null,10);\n  BlockBuilder singleMapBlockBuilder=blockBuilder.beginBlockEntry();\n  for (  Map.Entry<Slice,Collection<Slice>> entry : multimap.asMap().entrySet()) {\n    VARCHAR.writeSlice(singleMapBlockBuilder,entry.getKey());\n    Collection<Slice> values=entry.getValue();\n    BlockBuilder valueBlockBuilder=singleMapBlockBuilder.beginBlockEntry();\n    for (    Slice value : values) {\n      VARCHAR.writeSlice(valueBlockBuilder,value);\n    }\n    singleMapBlockBuilder.closeEntry();\n  }\n  blockBuilder.closeEntry();\n  return (Block)mapType.getObject(blockBuilder,blockBuilder.getPositionCount() - 1);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 292,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3229,
        "startLineNumber" : 43,
        "startColumnNumber" : 4,
        "endLineNumber" : 105,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SqlType(\"map(varchar,array(varchar))\") public Block splitToMultimap(@TypeParameter(\"map(varchar,array(varchar))\") Type mapType,@SqlType(StandardTypes.VARCHAR) Slice string,@SqlType(StandardTypes.VARCHAR) Slice entryDelimiter,@SqlType(StandardTypes.VARCHAR) Slice keyValueDelimiter){\n  checkCondition(entryDelimiter.length() > 0,INVALID_FUNCTION_ARGUMENT,\"entryDelimiter is empty\");\n  checkCondition(keyValueDelimiter.length() > 0,INVALID_FUNCTION_ARGUMENT,\"keyValueDelimiter is empty\");\n  checkCondition(!entryDelimiter.equals(keyValueDelimiter),INVALID_FUNCTION_ARGUMENT,\"entryDelimiter and keyValueDelimiter must not be the same\");\n  Multimap<Slice,Slice> multimap=ArrayListMultimap.create();\n  int entryStart=0;\n  while (entryStart < string.length()) {\n    Slice keyValuePair;\n    int entryEnd=string.indexOf(entryDelimiter,entryStart);\n    if (entryEnd >= 0) {\n      keyValuePair=string.slice(entryStart,entryEnd - entryStart);\n    }\n else {\n      keyValuePair=string.slice(entryStart,string.length() - entryStart);\n    }\n    int keyEnd=keyValuePair.indexOf(keyValueDelimiter);\n    if (keyEnd < 0) {\n      throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"Key-value delimiter must appear exactly once in each entry. Bad input: \" + keyValuePair.toStringUtf8());\n    }\n    int valueStart=keyEnd + keyValueDelimiter.length();\n    Slice key=keyValuePair.slice(0,keyEnd);\n    Slice value=keyValuePair.slice(valueStart,keyValuePair.length() - valueStart);\n    if (value.indexOf(keyValueDelimiter) >= 0) {\n      throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"Key-value delimiter must appear exactly once in each entry. Bad input: \" + keyValuePair.toStringUtf8());\n    }\n    multimap.put(key,value);\n    if (entryEnd < 0) {\n      break;\n    }\n    entryStart=entryEnd + entryDelimiter.length();\n  }\n  BlockBuilder blockBuilder=mapType.createBlockBuilder(null,10);\n  BlockBuilder singleMapBlockBuilder=blockBuilder.beginBlockEntry();\n  for (  Map.Entry<Slice,Collection<Slice>> entry : multimap.asMap().entrySet()) {\n    VARCHAR.writeSlice(singleMapBlockBuilder,entry.getKey());\n    Collection<Slice> values=entry.getValue();\n    BlockBuilder valueBlockBuilder=singleMapBlockBuilder.beginBlockEntry();\n    for (    Slice value : values) {\n      VARCHAR.writeSlice(valueBlockBuilder,value);\n    }\n    singleMapBlockBuilder.closeEntry();\n  }\n  blockBuilder.closeEntry();\n  return (Block)mapType.getObject(blockBuilder,blockBuilder.getPositionCount() - 1);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 334,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 50,
        "startColumnNumber" : 8,
        "endLineNumber" : 50,
        "endColumnNumber" : 106
      },
      "nodeContext" : "checkCondition(entryDelimiter.length() > 0,INVALID_FUNCTION_ARGUMENT,\"entryDelimiter is empty\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 51,
      "startColumnNumber" : 52,
      "endLineNumber" : 51,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 51,
        "startColumnNumber" : 23,
        "endLineNumber" : 51,
        "endColumnNumber" : 53
      },
      "nodeContext" : "keyValueDelimiter.length() > 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 51,
        "startColumnNumber" : 8,
        "endLineNumber" : 51,
        "endColumnNumber" : 111
      },
      "nodeContext" : "checkCondition(keyValueDelimiter.length() > 0,INVALID_FUNCTION_ARGUMENT,\"keyValueDelimiter is empty\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 51,
        "startColumnNumber" : 8,
        "endLineNumber" : 51,
        "endColumnNumber" : 112
      },
      "nodeContext" : "checkCondition(keyValueDelimiter.length() > 0,INVALID_FUNCTION_ARGUMENT,\"keyValueDelimiter is empty\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2886,
        "startLineNumber" : 49,
        "startColumnNumber" : 4,
        "endLineNumber" : 105,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  checkCondition(entryDelimiter.length() > 0,INVALID_FUNCTION_ARGUMENT,\"entryDelimiter is empty\");\n  checkCondition(keyValueDelimiter.length() > 0,INVALID_FUNCTION_ARGUMENT,\"keyValueDelimiter is empty\");\n  checkCondition(!entryDelimiter.equals(keyValueDelimiter),INVALID_FUNCTION_ARGUMENT,\"entryDelimiter and keyValueDelimiter must not be the same\");\n  Multimap<Slice,Slice> multimap=ArrayListMultimap.create();\n  int entryStart=0;\n  while (entryStart < string.length()) {\n    Slice keyValuePair;\n    int entryEnd=string.indexOf(entryDelimiter,entryStart);\n    if (entryEnd >= 0) {\n      keyValuePair=string.slice(entryStart,entryEnd - entryStart);\n    }\n else {\n      keyValuePair=string.slice(entryStart,string.length() - entryStart);\n    }\n    int keyEnd=keyValuePair.indexOf(keyValueDelimiter);\n    if (keyEnd < 0) {\n      throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"Key-value delimiter must appear exactly once in each entry. Bad input: \" + keyValuePair.toStringUtf8());\n    }\n    int valueStart=keyEnd + keyValueDelimiter.length();\n    Slice key=keyValuePair.slice(0,keyEnd);\n    Slice value=keyValuePair.slice(valueStart,keyValuePair.length() - valueStart);\n    if (value.indexOf(keyValueDelimiter) >= 0) {\n      throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"Key-value delimiter must appear exactly once in each entry. Bad input: \" + keyValuePair.toStringUtf8());\n    }\n    multimap.put(key,value);\n    if (entryEnd < 0) {\n      break;\n    }\n    entryStart=entryEnd + entryDelimiter.length();\n  }\n  BlockBuilder blockBuilder=mapType.createBlockBuilder(null,10);\n  BlockBuilder singleMapBlockBuilder=blockBuilder.beginBlockEntry();\n  for (  Map.Entry<Slice,Collection<Slice>> entry : multimap.asMap().entrySet()) {\n    VARCHAR.writeSlice(singleMapBlockBuilder,entry.getKey());\n    Collection<Slice> values=entry.getValue();\n    BlockBuilder valueBlockBuilder=singleMapBlockBuilder.beginBlockEntry();\n    for (    Slice value : values) {\n      VARCHAR.writeSlice(valueBlockBuilder,value);\n    }\n    singleMapBlockBuilder.closeEntry();\n  }\n  blockBuilder.closeEntry();\n  return (Block)mapType.getObject(blockBuilder,blockBuilder.getPositionCount() - 1);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 292,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3229,
        "startLineNumber" : 43,
        "startColumnNumber" : 4,
        "endLineNumber" : 105,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SqlType(\"map(varchar,array(varchar))\") public Block splitToMultimap(@TypeParameter(\"map(varchar,array(varchar))\") Type mapType,@SqlType(StandardTypes.VARCHAR) Slice string,@SqlType(StandardTypes.VARCHAR) Slice entryDelimiter,@SqlType(StandardTypes.VARCHAR) Slice keyValueDelimiter){\n  checkCondition(entryDelimiter.length() > 0,INVALID_FUNCTION_ARGUMENT,\"entryDelimiter is empty\");\n  checkCondition(keyValueDelimiter.length() > 0,INVALID_FUNCTION_ARGUMENT,\"keyValueDelimiter is empty\");\n  checkCondition(!entryDelimiter.equals(keyValueDelimiter),INVALID_FUNCTION_ARGUMENT,\"entryDelimiter and keyValueDelimiter must not be the same\");\n  Multimap<Slice,Slice> multimap=ArrayListMultimap.create();\n  int entryStart=0;\n  while (entryStart < string.length()) {\n    Slice keyValuePair;\n    int entryEnd=string.indexOf(entryDelimiter,entryStart);\n    if (entryEnd >= 0) {\n      keyValuePair=string.slice(entryStart,entryEnd - entryStart);\n    }\n else {\n      keyValuePair=string.slice(entryStart,string.length() - entryStart);\n    }\n    int keyEnd=keyValuePair.indexOf(keyValueDelimiter);\n    if (keyEnd < 0) {\n      throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"Key-value delimiter must appear exactly once in each entry. Bad input: \" + keyValuePair.toStringUtf8());\n    }\n    int valueStart=keyEnd + keyValueDelimiter.length();\n    Slice key=keyValuePair.slice(0,keyEnd);\n    Slice value=keyValuePair.slice(valueStart,keyValuePair.length() - valueStart);\n    if (value.indexOf(keyValueDelimiter) >= 0) {\n      throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"Key-value delimiter must appear exactly once in each entry. Bad input: \" + keyValuePair.toStringUtf8());\n    }\n    multimap.put(key,value);\n    if (entryEnd < 0) {\n      break;\n    }\n    entryStart=entryEnd + entryDelimiter.length();\n  }\n  BlockBuilder blockBuilder=mapType.createBlockBuilder(null,10);\n  BlockBuilder singleMapBlockBuilder=blockBuilder.beginBlockEntry();\n  for (  Map.Entry<Slice,Collection<Slice>> entry : multimap.asMap().entrySet()) {\n    VARCHAR.writeSlice(singleMapBlockBuilder,entry.getKey());\n    Collection<Slice> values=entry.getValue();\n    BlockBuilder valueBlockBuilder=singleMapBlockBuilder.beginBlockEntry();\n    for (    Slice value : values) {\n      VARCHAR.writeSlice(valueBlockBuilder,value);\n    }\n    singleMapBlockBuilder.closeEntry();\n  }\n  blockBuilder.closeEntry();\n  return (Block)mapType.getObject(blockBuilder,blockBuilder.getPositionCount() - 1);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 334,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 51,
        "startColumnNumber" : 8,
        "endLineNumber" : 51,
        "endColumnNumber" : 112
      },
      "nodeContext" : "checkCondition(keyValueDelimiter.length() > 0,INVALID_FUNCTION_ARGUMENT,\"keyValueDelimiter is empty\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 55,
      "startColumnNumber" : 25,
      "endLineNumber" : 55,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 55,
        "startColumnNumber" : 12,
        "endLineNumber" : 55,
        "endColumnNumber" : 26
      },
      "nodeContext" : "entryStart=0",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 55,
        "startColumnNumber" : 8,
        "endLineNumber" : 55,
        "endColumnNumber" : 27
      },
      "nodeContext" : "int entryStart=0;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2886,
        "startLineNumber" : 49,
        "startColumnNumber" : 4,
        "endLineNumber" : 105,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  checkCondition(entryDelimiter.length() > 0,INVALID_FUNCTION_ARGUMENT,\"entryDelimiter is empty\");\n  checkCondition(keyValueDelimiter.length() > 0,INVALID_FUNCTION_ARGUMENT,\"keyValueDelimiter is empty\");\n  checkCondition(!entryDelimiter.equals(keyValueDelimiter),INVALID_FUNCTION_ARGUMENT,\"entryDelimiter and keyValueDelimiter must not be the same\");\n  Multimap<Slice,Slice> multimap=ArrayListMultimap.create();\n  int entryStart=0;\n  while (entryStart < string.length()) {\n    Slice keyValuePair;\n    int entryEnd=string.indexOf(entryDelimiter,entryStart);\n    if (entryEnd >= 0) {\n      keyValuePair=string.slice(entryStart,entryEnd - entryStart);\n    }\n else {\n      keyValuePair=string.slice(entryStart,string.length() - entryStart);\n    }\n    int keyEnd=keyValuePair.indexOf(keyValueDelimiter);\n    if (keyEnd < 0) {\n      throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"Key-value delimiter must appear exactly once in each entry. Bad input: \" + keyValuePair.toStringUtf8());\n    }\n    int valueStart=keyEnd + keyValueDelimiter.length();\n    Slice key=keyValuePair.slice(0,keyEnd);\n    Slice value=keyValuePair.slice(valueStart,keyValuePair.length() - valueStart);\n    if (value.indexOf(keyValueDelimiter) >= 0) {\n      throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"Key-value delimiter must appear exactly once in each entry. Bad input: \" + keyValuePair.toStringUtf8());\n    }\n    multimap.put(key,value);\n    if (entryEnd < 0) {\n      break;\n    }\n    entryStart=entryEnd + entryDelimiter.length();\n  }\n  BlockBuilder blockBuilder=mapType.createBlockBuilder(null,10);\n  BlockBuilder singleMapBlockBuilder=blockBuilder.beginBlockEntry();\n  for (  Map.Entry<Slice,Collection<Slice>> entry : multimap.asMap().entrySet()) {\n    VARCHAR.writeSlice(singleMapBlockBuilder,entry.getKey());\n    Collection<Slice> values=entry.getValue();\n    BlockBuilder valueBlockBuilder=singleMapBlockBuilder.beginBlockEntry();\n    for (    Slice value : values) {\n      VARCHAR.writeSlice(valueBlockBuilder,value);\n    }\n    singleMapBlockBuilder.closeEntry();\n  }\n  blockBuilder.closeEntry();\n  return (Block)mapType.getObject(blockBuilder,blockBuilder.getPositionCount() - 1);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 292,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3229,
        "startLineNumber" : 43,
        "startColumnNumber" : 4,
        "endLineNumber" : 105,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SqlType(\"map(varchar,array(varchar))\") public Block splitToMultimap(@TypeParameter(\"map(varchar,array(varchar))\") Type mapType,@SqlType(StandardTypes.VARCHAR) Slice string,@SqlType(StandardTypes.VARCHAR) Slice entryDelimiter,@SqlType(StandardTypes.VARCHAR) Slice keyValueDelimiter){\n  checkCondition(entryDelimiter.length() > 0,INVALID_FUNCTION_ARGUMENT,\"entryDelimiter is empty\");\n  checkCondition(keyValueDelimiter.length() > 0,INVALID_FUNCTION_ARGUMENT,\"keyValueDelimiter is empty\");\n  checkCondition(!entryDelimiter.equals(keyValueDelimiter),INVALID_FUNCTION_ARGUMENT,\"entryDelimiter and keyValueDelimiter must not be the same\");\n  Multimap<Slice,Slice> multimap=ArrayListMultimap.create();\n  int entryStart=0;\n  while (entryStart < string.length()) {\n    Slice keyValuePair;\n    int entryEnd=string.indexOf(entryDelimiter,entryStart);\n    if (entryEnd >= 0) {\n      keyValuePair=string.slice(entryStart,entryEnd - entryStart);\n    }\n else {\n      keyValuePair=string.slice(entryStart,string.length() - entryStart);\n    }\n    int keyEnd=keyValuePair.indexOf(keyValueDelimiter);\n    if (keyEnd < 0) {\n      throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"Key-value delimiter must appear exactly once in each entry. Bad input: \" + keyValuePair.toStringUtf8());\n    }\n    int valueStart=keyEnd + keyValueDelimiter.length();\n    Slice key=keyValuePair.slice(0,keyEnd);\n    Slice value=keyValuePair.slice(valueStart,keyValuePair.length() - valueStart);\n    if (value.indexOf(keyValueDelimiter) >= 0) {\n      throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"Key-value delimiter must appear exactly once in each entry. Bad input: \" + keyValuePair.toStringUtf8());\n    }\n    multimap.put(key,value);\n    if (entryEnd < 0) {\n      break;\n    }\n    entryStart=entryEnd + entryDelimiter.length();\n  }\n  BlockBuilder blockBuilder=mapType.createBlockBuilder(null,10);\n  BlockBuilder singleMapBlockBuilder=blockBuilder.beginBlockEntry();\n  for (  Map.Entry<Slice,Collection<Slice>> entry : multimap.asMap().entrySet()) {\n    VARCHAR.writeSlice(singleMapBlockBuilder,entry.getKey());\n    Collection<Slice> values=entry.getValue();\n    BlockBuilder valueBlockBuilder=singleMapBlockBuilder.beginBlockEntry();\n    for (    Slice value : values) {\n      VARCHAR.writeSlice(valueBlockBuilder,value);\n    }\n    singleMapBlockBuilder.closeEntry();\n  }\n  blockBuilder.closeEntry();\n  return (Block)mapType.getObject(blockBuilder,blockBuilder.getPositionCount() - 1);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 334,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 55,
        "startColumnNumber" : 8,
        "endLineNumber" : 55,
        "endColumnNumber" : 27
      },
      "nodeContext" : "int entryStart=0;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 61,
      "startColumnNumber" : 28,
      "endLineNumber" : 61,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 61,
        "startColumnNumber" : 16,
        "endLineNumber" : 61,
        "endColumnNumber" : 29
      },
      "nodeContext" : "entryEnd >= 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 303,
        "startLineNumber" : 61,
        "startColumnNumber" : 12,
        "endLineNumber" : 67,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (entryEnd >= 0) {\n  keyValuePair=string.slice(entryStart,entryEnd - entryStart);\n}\n else {\n  keyValuePair=string.slice(entryStart,string.length() - entryStart);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 28,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1601,
        "startLineNumber" : 56,
        "startColumnNumber" : 45,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Slice keyValuePair;\n  int entryEnd=string.indexOf(entryDelimiter,entryStart);\n  if (entryEnd >= 0) {\n    keyValuePair=string.slice(entryStart,entryEnd - entryStart);\n  }\n else {\n    keyValuePair=string.slice(entryStart,string.length() - entryStart);\n  }\n  int keyEnd=keyValuePair.indexOf(keyValueDelimiter);\n  if (keyEnd < 0) {\n    throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"Key-value delimiter must appear exactly once in each entry. Bad input: \" + keyValuePair.toStringUtf8());\n  }\n  int valueStart=keyEnd + keyValueDelimiter.length();\n  Slice key=keyValuePair.slice(0,keyEnd);\n  Slice value=keyValuePair.slice(valueStart,keyValuePair.length() - valueStart);\n  if (value.indexOf(keyValueDelimiter) >= 0) {\n    throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"Key-value delimiter must appear exactly once in each entry. Bad input: \" + keyValuePair.toStringUtf8());\n  }\n  multimap.put(key,value);\n  if (entryEnd < 0) {\n    break;\n  }\n  entryStart=entryEnd + entryDelimiter.length();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 137,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1638,
        "startLineNumber" : 56,
        "startColumnNumber" : 8,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (entryStart < string.length()) {\n  Slice keyValuePair;\n  int entryEnd=string.indexOf(entryDelimiter,entryStart);\n  if (entryEnd >= 0) {\n    keyValuePair=string.slice(entryStart,entryEnd - entryStart);\n  }\n else {\n    keyValuePair=string.slice(entryStart,string.length() - entryStart);\n  }\n  int keyEnd=keyValuePair.indexOf(keyValueDelimiter);\n  if (keyEnd < 0) {\n    throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"Key-value delimiter must appear exactly once in each entry. Bad input: \" + keyValuePair.toStringUtf8());\n  }\n  int valueStart=keyEnd + keyValueDelimiter.length();\n  Slice key=keyValuePair.slice(0,keyEnd);\n  Slice value=keyValuePair.slice(valueStart,keyValuePair.length() - valueStart);\n  if (value.indexOf(keyValueDelimiter) >= 0) {\n    throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"Key-value delimiter must appear exactly once in each entry. Bad input: \" + keyValuePair.toStringUtf8());\n  }\n  multimap.put(key,value);\n  if (entryEnd < 0) {\n    break;\n  }\n  entryStart=entryEnd + entryDelimiter.length();\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 143,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2886,
        "startLineNumber" : 49,
        "startColumnNumber" : 4,
        "endLineNumber" : 105,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  checkCondition(entryDelimiter.length() > 0,INVALID_FUNCTION_ARGUMENT,\"entryDelimiter is empty\");\n  checkCondition(keyValueDelimiter.length() > 0,INVALID_FUNCTION_ARGUMENT,\"keyValueDelimiter is empty\");\n  checkCondition(!entryDelimiter.equals(keyValueDelimiter),INVALID_FUNCTION_ARGUMENT,\"entryDelimiter and keyValueDelimiter must not be the same\");\n  Multimap<Slice,Slice> multimap=ArrayListMultimap.create();\n  int entryStart=0;\n  while (entryStart < string.length()) {\n    Slice keyValuePair;\n    int entryEnd=string.indexOf(entryDelimiter,entryStart);\n    if (entryEnd >= 0) {\n      keyValuePair=string.slice(entryStart,entryEnd - entryStart);\n    }\n else {\n      keyValuePair=string.slice(entryStart,string.length() - entryStart);\n    }\n    int keyEnd=keyValuePair.indexOf(keyValueDelimiter);\n    if (keyEnd < 0) {\n      throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"Key-value delimiter must appear exactly once in each entry. Bad input: \" + keyValuePair.toStringUtf8());\n    }\n    int valueStart=keyEnd + keyValueDelimiter.length();\n    Slice key=keyValuePair.slice(0,keyEnd);\n    Slice value=keyValuePair.slice(valueStart,keyValuePair.length() - valueStart);\n    if (value.indexOf(keyValueDelimiter) >= 0) {\n      throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"Key-value delimiter must appear exactly once in each entry. Bad input: \" + keyValuePair.toStringUtf8());\n    }\n    multimap.put(key,value);\n    if (entryEnd < 0) {\n      break;\n    }\n    entryStart=entryEnd + entryDelimiter.length();\n  }\n  BlockBuilder blockBuilder=mapType.createBlockBuilder(null,10);\n  BlockBuilder singleMapBlockBuilder=blockBuilder.beginBlockEntry();\n  for (  Map.Entry<Slice,Collection<Slice>> entry : multimap.asMap().entrySet()) {\n    VARCHAR.writeSlice(singleMapBlockBuilder,entry.getKey());\n    Collection<Slice> values=entry.getValue();\n    BlockBuilder valueBlockBuilder=singleMapBlockBuilder.beginBlockEntry();\n    for (    Slice value : values) {\n      VARCHAR.writeSlice(valueBlockBuilder,value);\n    }\n    singleMapBlockBuilder.closeEntry();\n  }\n  blockBuilder.closeEntry();\n  return (Block)mapType.getObject(blockBuilder,blockBuilder.getPositionCount() - 1);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 292,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3229,
        "startLineNumber" : 43,
        "startColumnNumber" : 4,
        "endLineNumber" : 105,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SqlType(\"map(varchar,array(varchar))\") public Block splitToMultimap(@TypeParameter(\"map(varchar,array(varchar))\") Type mapType,@SqlType(StandardTypes.VARCHAR) Slice string,@SqlType(StandardTypes.VARCHAR) Slice entryDelimiter,@SqlType(StandardTypes.VARCHAR) Slice keyValueDelimiter){\n  checkCondition(entryDelimiter.length() > 0,INVALID_FUNCTION_ARGUMENT,\"entryDelimiter is empty\");\n  checkCondition(keyValueDelimiter.length() > 0,INVALID_FUNCTION_ARGUMENT,\"keyValueDelimiter is empty\");\n  checkCondition(!entryDelimiter.equals(keyValueDelimiter),INVALID_FUNCTION_ARGUMENT,\"entryDelimiter and keyValueDelimiter must not be the same\");\n  Multimap<Slice,Slice> multimap=ArrayListMultimap.create();\n  int entryStart=0;\n  while (entryStart < string.length()) {\n    Slice keyValuePair;\n    int entryEnd=string.indexOf(entryDelimiter,entryStart);\n    if (entryEnd >= 0) {\n      keyValuePair=string.slice(entryStart,entryEnd - entryStart);\n    }\n else {\n      keyValuePair=string.slice(entryStart,string.length() - entryStart);\n    }\n    int keyEnd=keyValuePair.indexOf(keyValueDelimiter);\n    if (keyEnd < 0) {\n      throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"Key-value delimiter must appear exactly once in each entry. Bad input: \" + keyValuePair.toStringUtf8());\n    }\n    int valueStart=keyEnd + keyValueDelimiter.length();\n    Slice key=keyValuePair.slice(0,keyEnd);\n    Slice value=keyValuePair.slice(valueStart,keyValuePair.length() - valueStart);\n    if (value.indexOf(keyValueDelimiter) >= 0) {\n      throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"Key-value delimiter must appear exactly once in each entry. Bad input: \" + keyValuePair.toStringUtf8());\n    }\n    multimap.put(key,value);\n    if (entryEnd < 0) {\n      break;\n    }\n    entryStart=entryEnd + entryDelimiter.length();\n  }\n  BlockBuilder blockBuilder=mapType.createBlockBuilder(null,10);\n  BlockBuilder singleMapBlockBuilder=blockBuilder.beginBlockEntry();\n  for (  Map.Entry<Slice,Collection<Slice>> entry : multimap.asMap().entrySet()) {\n    VARCHAR.writeSlice(singleMapBlockBuilder,entry.getKey());\n    Collection<Slice> values=entry.getValue();\n    BlockBuilder valueBlockBuilder=singleMapBlockBuilder.beginBlockEntry();\n    for (    Slice value : values) {\n      VARCHAR.writeSlice(valueBlockBuilder,value);\n    }\n    singleMapBlockBuilder.closeEntry();\n  }\n  blockBuilder.closeEntry();\n  return (Block)mapType.getObject(blockBuilder,blockBuilder.getPositionCount() - 1);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 334,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 61,
        "startColumnNumber" : 16,
        "endLineNumber" : 61,
        "endColumnNumber" : 29
      },
      "nodeContext" : "entryEnd >= 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 70,
      "startColumnNumber" : 25,
      "endLineNumber" : 70,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 70,
        "startColumnNumber" : 16,
        "endLineNumber" : 70,
        "endColumnNumber" : 26
      },
      "nodeContext" : "keyEnd < 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 206,
        "startLineNumber" : 70,
        "startColumnNumber" : 12,
        "endLineNumber" : 72,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (keyEnd < 0) {\n  throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"Key-value delimiter must appear exactly once in each entry. Bad input: \" + keyValuePair.toStringUtf8());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1601,
        "startLineNumber" : 56,
        "startColumnNumber" : 45,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Slice keyValuePair;\n  int entryEnd=string.indexOf(entryDelimiter,entryStart);\n  if (entryEnd >= 0) {\n    keyValuePair=string.slice(entryStart,entryEnd - entryStart);\n  }\n else {\n    keyValuePair=string.slice(entryStart,string.length() - entryStart);\n  }\n  int keyEnd=keyValuePair.indexOf(keyValueDelimiter);\n  if (keyEnd < 0) {\n    throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"Key-value delimiter must appear exactly once in each entry. Bad input: \" + keyValuePair.toStringUtf8());\n  }\n  int valueStart=keyEnd + keyValueDelimiter.length();\n  Slice key=keyValuePair.slice(0,keyEnd);\n  Slice value=keyValuePair.slice(valueStart,keyValuePair.length() - valueStart);\n  if (value.indexOf(keyValueDelimiter) >= 0) {\n    throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"Key-value delimiter must appear exactly once in each entry. Bad input: \" + keyValuePair.toStringUtf8());\n  }\n  multimap.put(key,value);\n  if (entryEnd < 0) {\n    break;\n  }\n  entryStart=entryEnd + entryDelimiter.length();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 137,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1638,
        "startLineNumber" : 56,
        "startColumnNumber" : 8,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (entryStart < string.length()) {\n  Slice keyValuePair;\n  int entryEnd=string.indexOf(entryDelimiter,entryStart);\n  if (entryEnd >= 0) {\n    keyValuePair=string.slice(entryStart,entryEnd - entryStart);\n  }\n else {\n    keyValuePair=string.slice(entryStart,string.length() - entryStart);\n  }\n  int keyEnd=keyValuePair.indexOf(keyValueDelimiter);\n  if (keyEnd < 0) {\n    throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"Key-value delimiter must appear exactly once in each entry. Bad input: \" + keyValuePair.toStringUtf8());\n  }\n  int valueStart=keyEnd + keyValueDelimiter.length();\n  Slice key=keyValuePair.slice(0,keyEnd);\n  Slice value=keyValuePair.slice(valueStart,keyValuePair.length() - valueStart);\n  if (value.indexOf(keyValueDelimiter) >= 0) {\n    throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"Key-value delimiter must appear exactly once in each entry. Bad input: \" + keyValuePair.toStringUtf8());\n  }\n  multimap.put(key,value);\n  if (entryEnd < 0) {\n    break;\n  }\n  entryStart=entryEnd + entryDelimiter.length();\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 143,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2886,
        "startLineNumber" : 49,
        "startColumnNumber" : 4,
        "endLineNumber" : 105,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  checkCondition(entryDelimiter.length() > 0,INVALID_FUNCTION_ARGUMENT,\"entryDelimiter is empty\");\n  checkCondition(keyValueDelimiter.length() > 0,INVALID_FUNCTION_ARGUMENT,\"keyValueDelimiter is empty\");\n  checkCondition(!entryDelimiter.equals(keyValueDelimiter),INVALID_FUNCTION_ARGUMENT,\"entryDelimiter and keyValueDelimiter must not be the same\");\n  Multimap<Slice,Slice> multimap=ArrayListMultimap.create();\n  int entryStart=0;\n  while (entryStart < string.length()) {\n    Slice keyValuePair;\n    int entryEnd=string.indexOf(entryDelimiter,entryStart);\n    if (entryEnd >= 0) {\n      keyValuePair=string.slice(entryStart,entryEnd - entryStart);\n    }\n else {\n      keyValuePair=string.slice(entryStart,string.length() - entryStart);\n    }\n    int keyEnd=keyValuePair.indexOf(keyValueDelimiter);\n    if (keyEnd < 0) {\n      throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"Key-value delimiter must appear exactly once in each entry. Bad input: \" + keyValuePair.toStringUtf8());\n    }\n    int valueStart=keyEnd + keyValueDelimiter.length();\n    Slice key=keyValuePair.slice(0,keyEnd);\n    Slice value=keyValuePair.slice(valueStart,keyValuePair.length() - valueStart);\n    if (value.indexOf(keyValueDelimiter) >= 0) {\n      throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"Key-value delimiter must appear exactly once in each entry. Bad input: \" + keyValuePair.toStringUtf8());\n    }\n    multimap.put(key,value);\n    if (entryEnd < 0) {\n      break;\n    }\n    entryStart=entryEnd + entryDelimiter.length();\n  }\n  BlockBuilder blockBuilder=mapType.createBlockBuilder(null,10);\n  BlockBuilder singleMapBlockBuilder=blockBuilder.beginBlockEntry();\n  for (  Map.Entry<Slice,Collection<Slice>> entry : multimap.asMap().entrySet()) {\n    VARCHAR.writeSlice(singleMapBlockBuilder,entry.getKey());\n    Collection<Slice> values=entry.getValue();\n    BlockBuilder valueBlockBuilder=singleMapBlockBuilder.beginBlockEntry();\n    for (    Slice value : values) {\n      VARCHAR.writeSlice(valueBlockBuilder,value);\n    }\n    singleMapBlockBuilder.closeEntry();\n  }\n  blockBuilder.closeEntry();\n  return (Block)mapType.getObject(blockBuilder,blockBuilder.getPositionCount() - 1);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 292,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3229,
        "startLineNumber" : 43,
        "startColumnNumber" : 4,
        "endLineNumber" : 105,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SqlType(\"map(varchar,array(varchar))\") public Block splitToMultimap(@TypeParameter(\"map(varchar,array(varchar))\") Type mapType,@SqlType(StandardTypes.VARCHAR) Slice string,@SqlType(StandardTypes.VARCHAR) Slice entryDelimiter,@SqlType(StandardTypes.VARCHAR) Slice keyValueDelimiter){\n  checkCondition(entryDelimiter.length() > 0,INVALID_FUNCTION_ARGUMENT,\"entryDelimiter is empty\");\n  checkCondition(keyValueDelimiter.length() > 0,INVALID_FUNCTION_ARGUMENT,\"keyValueDelimiter is empty\");\n  checkCondition(!entryDelimiter.equals(keyValueDelimiter),INVALID_FUNCTION_ARGUMENT,\"entryDelimiter and keyValueDelimiter must not be the same\");\n  Multimap<Slice,Slice> multimap=ArrayListMultimap.create();\n  int entryStart=0;\n  while (entryStart < string.length()) {\n    Slice keyValuePair;\n    int entryEnd=string.indexOf(entryDelimiter,entryStart);\n    if (entryEnd >= 0) {\n      keyValuePair=string.slice(entryStart,entryEnd - entryStart);\n    }\n else {\n      keyValuePair=string.slice(entryStart,string.length() - entryStart);\n    }\n    int keyEnd=keyValuePair.indexOf(keyValueDelimiter);\n    if (keyEnd < 0) {\n      throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"Key-value delimiter must appear exactly once in each entry. Bad input: \" + keyValuePair.toStringUtf8());\n    }\n    int valueStart=keyEnd + keyValueDelimiter.length();\n    Slice key=keyValuePair.slice(0,keyEnd);\n    Slice value=keyValuePair.slice(valueStart,keyValuePair.length() - valueStart);\n    if (value.indexOf(keyValueDelimiter) >= 0) {\n      throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"Key-value delimiter must appear exactly once in each entry. Bad input: \" + keyValuePair.toStringUtf8());\n    }\n    multimap.put(key,value);\n    if (entryEnd < 0) {\n      break;\n    }\n    entryStart=entryEnd + entryDelimiter.length();\n  }\n  BlockBuilder blockBuilder=mapType.createBlockBuilder(null,10);\n  BlockBuilder singleMapBlockBuilder=blockBuilder.beginBlockEntry();\n  for (  Map.Entry<Slice,Collection<Slice>> entry : multimap.asMap().entrySet()) {\n    VARCHAR.writeSlice(singleMapBlockBuilder,entry.getKey());\n    Collection<Slice> values=entry.getValue();\n    BlockBuilder valueBlockBuilder=singleMapBlockBuilder.beginBlockEntry();\n    for (    Slice value : values) {\n      VARCHAR.writeSlice(valueBlockBuilder,value);\n    }\n    singleMapBlockBuilder.closeEntry();\n  }\n  blockBuilder.closeEntry();\n  return (Block)mapType.getObject(blockBuilder,blockBuilder.getPositionCount() - 1);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 334,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 70,
        "startColumnNumber" : 16,
        "endLineNumber" : 70,
        "endColumnNumber" : 26
      },
      "nodeContext" : "keyEnd < 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 75,
      "startColumnNumber" : 43,
      "endLineNumber" : 75,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 75,
        "startColumnNumber" : 24,
        "endLineNumber" : 75,
        "endColumnNumber" : 53
      },
      "nodeContext" : "keyValuePair.slice(0,keyEnd)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 75,
        "startColumnNumber" : 18,
        "endLineNumber" : 75,
        "endColumnNumber" : 53
      },
      "nodeContext" : "key=keyValuePair.slice(0,keyEnd)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 75,
        "startColumnNumber" : 12,
        "endLineNumber" : 75,
        "endColumnNumber" : 54
      },
      "nodeContext" : "Slice key=keyValuePair.slice(0,keyEnd);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1601,
        "startLineNumber" : 56,
        "startColumnNumber" : 45,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Slice keyValuePair;\n  int entryEnd=string.indexOf(entryDelimiter,entryStart);\n  if (entryEnd >= 0) {\n    keyValuePair=string.slice(entryStart,entryEnd - entryStart);\n  }\n else {\n    keyValuePair=string.slice(entryStart,string.length() - entryStart);\n  }\n  int keyEnd=keyValuePair.indexOf(keyValueDelimiter);\n  if (keyEnd < 0) {\n    throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"Key-value delimiter must appear exactly once in each entry. Bad input: \" + keyValuePair.toStringUtf8());\n  }\n  int valueStart=keyEnd + keyValueDelimiter.length();\n  Slice key=keyValuePair.slice(0,keyEnd);\n  Slice value=keyValuePair.slice(valueStart,keyValuePair.length() - valueStart);\n  if (value.indexOf(keyValueDelimiter) >= 0) {\n    throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"Key-value delimiter must appear exactly once in each entry. Bad input: \" + keyValuePair.toStringUtf8());\n  }\n  multimap.put(key,value);\n  if (entryEnd < 0) {\n    break;\n  }\n  entryStart=entryEnd + entryDelimiter.length();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 137,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1638,
        "startLineNumber" : 56,
        "startColumnNumber" : 8,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (entryStart < string.length()) {\n  Slice keyValuePair;\n  int entryEnd=string.indexOf(entryDelimiter,entryStart);\n  if (entryEnd >= 0) {\n    keyValuePair=string.slice(entryStart,entryEnd - entryStart);\n  }\n else {\n    keyValuePair=string.slice(entryStart,string.length() - entryStart);\n  }\n  int keyEnd=keyValuePair.indexOf(keyValueDelimiter);\n  if (keyEnd < 0) {\n    throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"Key-value delimiter must appear exactly once in each entry. Bad input: \" + keyValuePair.toStringUtf8());\n  }\n  int valueStart=keyEnd + keyValueDelimiter.length();\n  Slice key=keyValuePair.slice(0,keyEnd);\n  Slice value=keyValuePair.slice(valueStart,keyValuePair.length() - valueStart);\n  if (value.indexOf(keyValueDelimiter) >= 0) {\n    throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"Key-value delimiter must appear exactly once in each entry. Bad input: \" + keyValuePair.toStringUtf8());\n  }\n  multimap.put(key,value);\n  if (entryEnd < 0) {\n    break;\n  }\n  entryStart=entryEnd + entryDelimiter.length();\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 143,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2886,
        "startLineNumber" : 49,
        "startColumnNumber" : 4,
        "endLineNumber" : 105,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  checkCondition(entryDelimiter.length() > 0,INVALID_FUNCTION_ARGUMENT,\"entryDelimiter is empty\");\n  checkCondition(keyValueDelimiter.length() > 0,INVALID_FUNCTION_ARGUMENT,\"keyValueDelimiter is empty\");\n  checkCondition(!entryDelimiter.equals(keyValueDelimiter),INVALID_FUNCTION_ARGUMENT,\"entryDelimiter and keyValueDelimiter must not be the same\");\n  Multimap<Slice,Slice> multimap=ArrayListMultimap.create();\n  int entryStart=0;\n  while (entryStart < string.length()) {\n    Slice keyValuePair;\n    int entryEnd=string.indexOf(entryDelimiter,entryStart);\n    if (entryEnd >= 0) {\n      keyValuePair=string.slice(entryStart,entryEnd - entryStart);\n    }\n else {\n      keyValuePair=string.slice(entryStart,string.length() - entryStart);\n    }\n    int keyEnd=keyValuePair.indexOf(keyValueDelimiter);\n    if (keyEnd < 0) {\n      throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"Key-value delimiter must appear exactly once in each entry. Bad input: \" + keyValuePair.toStringUtf8());\n    }\n    int valueStart=keyEnd + keyValueDelimiter.length();\n    Slice key=keyValuePair.slice(0,keyEnd);\n    Slice value=keyValuePair.slice(valueStart,keyValuePair.length() - valueStart);\n    if (value.indexOf(keyValueDelimiter) >= 0) {\n      throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"Key-value delimiter must appear exactly once in each entry. Bad input: \" + keyValuePair.toStringUtf8());\n    }\n    multimap.put(key,value);\n    if (entryEnd < 0) {\n      break;\n    }\n    entryStart=entryEnd + entryDelimiter.length();\n  }\n  BlockBuilder blockBuilder=mapType.createBlockBuilder(null,10);\n  BlockBuilder singleMapBlockBuilder=blockBuilder.beginBlockEntry();\n  for (  Map.Entry<Slice,Collection<Slice>> entry : multimap.asMap().entrySet()) {\n    VARCHAR.writeSlice(singleMapBlockBuilder,entry.getKey());\n    Collection<Slice> values=entry.getValue();\n    BlockBuilder valueBlockBuilder=singleMapBlockBuilder.beginBlockEntry();\n    for (    Slice value : values) {\n      VARCHAR.writeSlice(valueBlockBuilder,value);\n    }\n    singleMapBlockBuilder.closeEntry();\n  }\n  blockBuilder.closeEntry();\n  return (Block)mapType.getObject(blockBuilder,blockBuilder.getPositionCount() - 1);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 292,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3229,
        "startLineNumber" : 43,
        "startColumnNumber" : 4,
        "endLineNumber" : 105,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SqlType(\"map(varchar,array(varchar))\") public Block splitToMultimap(@TypeParameter(\"map(varchar,array(varchar))\") Type mapType,@SqlType(StandardTypes.VARCHAR) Slice string,@SqlType(StandardTypes.VARCHAR) Slice entryDelimiter,@SqlType(StandardTypes.VARCHAR) Slice keyValueDelimiter){\n  checkCondition(entryDelimiter.length() > 0,INVALID_FUNCTION_ARGUMENT,\"entryDelimiter is empty\");\n  checkCondition(keyValueDelimiter.length() > 0,INVALID_FUNCTION_ARGUMENT,\"keyValueDelimiter is empty\");\n  checkCondition(!entryDelimiter.equals(keyValueDelimiter),INVALID_FUNCTION_ARGUMENT,\"entryDelimiter and keyValueDelimiter must not be the same\");\n  Multimap<Slice,Slice> multimap=ArrayListMultimap.create();\n  int entryStart=0;\n  while (entryStart < string.length()) {\n    Slice keyValuePair;\n    int entryEnd=string.indexOf(entryDelimiter,entryStart);\n    if (entryEnd >= 0) {\n      keyValuePair=string.slice(entryStart,entryEnd - entryStart);\n    }\n else {\n      keyValuePair=string.slice(entryStart,string.length() - entryStart);\n    }\n    int keyEnd=keyValuePair.indexOf(keyValueDelimiter);\n    if (keyEnd < 0) {\n      throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"Key-value delimiter must appear exactly once in each entry. Bad input: \" + keyValuePair.toStringUtf8());\n    }\n    int valueStart=keyEnd + keyValueDelimiter.length();\n    Slice key=keyValuePair.slice(0,keyEnd);\n    Slice value=keyValuePair.slice(valueStart,keyValuePair.length() - valueStart);\n    if (value.indexOf(keyValueDelimiter) >= 0) {\n      throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"Key-value delimiter must appear exactly once in each entry. Bad input: \" + keyValuePair.toStringUtf8());\n    }\n    multimap.put(key,value);\n    if (entryEnd < 0) {\n      break;\n    }\n    entryStart=entryEnd + entryDelimiter.length();\n  }\n  BlockBuilder blockBuilder=mapType.createBlockBuilder(null,10);\n  BlockBuilder singleMapBlockBuilder=blockBuilder.beginBlockEntry();\n  for (  Map.Entry<Slice,Collection<Slice>> entry : multimap.asMap().entrySet()) {\n    VARCHAR.writeSlice(singleMapBlockBuilder,entry.getKey());\n    Collection<Slice> values=entry.getValue();\n    BlockBuilder valueBlockBuilder=singleMapBlockBuilder.beginBlockEntry();\n    for (    Slice value : values) {\n      VARCHAR.writeSlice(valueBlockBuilder,value);\n    }\n    singleMapBlockBuilder.closeEntry();\n  }\n  blockBuilder.closeEntry();\n  return (Block)mapType.getObject(blockBuilder,blockBuilder.getPositionCount() - 1);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 334,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 75,
        "startColumnNumber" : 12,
        "endLineNumber" : 75,
        "endColumnNumber" : 54
      },
      "nodeContext" : "Slice key=keyValuePair.slice(0,keyEnd);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 77,
      "startColumnNumber" : 52,
      "endLineNumber" : 77,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 77,
        "startColumnNumber" : 16,
        "endLineNumber" : 77,
        "endColumnNumber" : 53
      },
      "nodeContext" : "value.indexOf(keyValueDelimiter) >= 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 233,
        "startLineNumber" : 77,
        "startColumnNumber" : 12,
        "endLineNumber" : 79,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (value.indexOf(keyValueDelimiter) >= 0) {\n  throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"Key-value delimiter must appear exactly once in each entry. Bad input: \" + keyValuePair.toStringUtf8());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1601,
        "startLineNumber" : 56,
        "startColumnNumber" : 45,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Slice keyValuePair;\n  int entryEnd=string.indexOf(entryDelimiter,entryStart);\n  if (entryEnd >= 0) {\n    keyValuePair=string.slice(entryStart,entryEnd - entryStart);\n  }\n else {\n    keyValuePair=string.slice(entryStart,string.length() - entryStart);\n  }\n  int keyEnd=keyValuePair.indexOf(keyValueDelimiter);\n  if (keyEnd < 0) {\n    throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"Key-value delimiter must appear exactly once in each entry. Bad input: \" + keyValuePair.toStringUtf8());\n  }\n  int valueStart=keyEnd + keyValueDelimiter.length();\n  Slice key=keyValuePair.slice(0,keyEnd);\n  Slice value=keyValuePair.slice(valueStart,keyValuePair.length() - valueStart);\n  if (value.indexOf(keyValueDelimiter) >= 0) {\n    throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"Key-value delimiter must appear exactly once in each entry. Bad input: \" + keyValuePair.toStringUtf8());\n  }\n  multimap.put(key,value);\n  if (entryEnd < 0) {\n    break;\n  }\n  entryStart=entryEnd + entryDelimiter.length();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 137,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1638,
        "startLineNumber" : 56,
        "startColumnNumber" : 8,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (entryStart < string.length()) {\n  Slice keyValuePair;\n  int entryEnd=string.indexOf(entryDelimiter,entryStart);\n  if (entryEnd >= 0) {\n    keyValuePair=string.slice(entryStart,entryEnd - entryStart);\n  }\n else {\n    keyValuePair=string.slice(entryStart,string.length() - entryStart);\n  }\n  int keyEnd=keyValuePair.indexOf(keyValueDelimiter);\n  if (keyEnd < 0) {\n    throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"Key-value delimiter must appear exactly once in each entry. Bad input: \" + keyValuePair.toStringUtf8());\n  }\n  int valueStart=keyEnd + keyValueDelimiter.length();\n  Slice key=keyValuePair.slice(0,keyEnd);\n  Slice value=keyValuePair.slice(valueStart,keyValuePair.length() - valueStart);\n  if (value.indexOf(keyValueDelimiter) >= 0) {\n    throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"Key-value delimiter must appear exactly once in each entry. Bad input: \" + keyValuePair.toStringUtf8());\n  }\n  multimap.put(key,value);\n  if (entryEnd < 0) {\n    break;\n  }\n  entryStart=entryEnd + entryDelimiter.length();\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 143,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2886,
        "startLineNumber" : 49,
        "startColumnNumber" : 4,
        "endLineNumber" : 105,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  checkCondition(entryDelimiter.length() > 0,INVALID_FUNCTION_ARGUMENT,\"entryDelimiter is empty\");\n  checkCondition(keyValueDelimiter.length() > 0,INVALID_FUNCTION_ARGUMENT,\"keyValueDelimiter is empty\");\n  checkCondition(!entryDelimiter.equals(keyValueDelimiter),INVALID_FUNCTION_ARGUMENT,\"entryDelimiter and keyValueDelimiter must not be the same\");\n  Multimap<Slice,Slice> multimap=ArrayListMultimap.create();\n  int entryStart=0;\n  while (entryStart < string.length()) {\n    Slice keyValuePair;\n    int entryEnd=string.indexOf(entryDelimiter,entryStart);\n    if (entryEnd >= 0) {\n      keyValuePair=string.slice(entryStart,entryEnd - entryStart);\n    }\n else {\n      keyValuePair=string.slice(entryStart,string.length() - entryStart);\n    }\n    int keyEnd=keyValuePair.indexOf(keyValueDelimiter);\n    if (keyEnd < 0) {\n      throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"Key-value delimiter must appear exactly once in each entry. Bad input: \" + keyValuePair.toStringUtf8());\n    }\n    int valueStart=keyEnd + keyValueDelimiter.length();\n    Slice key=keyValuePair.slice(0,keyEnd);\n    Slice value=keyValuePair.slice(valueStart,keyValuePair.length() - valueStart);\n    if (value.indexOf(keyValueDelimiter) >= 0) {\n      throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"Key-value delimiter must appear exactly once in each entry. Bad input: \" + keyValuePair.toStringUtf8());\n    }\n    multimap.put(key,value);\n    if (entryEnd < 0) {\n      break;\n    }\n    entryStart=entryEnd + entryDelimiter.length();\n  }\n  BlockBuilder blockBuilder=mapType.createBlockBuilder(null,10);\n  BlockBuilder singleMapBlockBuilder=blockBuilder.beginBlockEntry();\n  for (  Map.Entry<Slice,Collection<Slice>> entry : multimap.asMap().entrySet()) {\n    VARCHAR.writeSlice(singleMapBlockBuilder,entry.getKey());\n    Collection<Slice> values=entry.getValue();\n    BlockBuilder valueBlockBuilder=singleMapBlockBuilder.beginBlockEntry();\n    for (    Slice value : values) {\n      VARCHAR.writeSlice(valueBlockBuilder,value);\n    }\n    singleMapBlockBuilder.closeEntry();\n  }\n  blockBuilder.closeEntry();\n  return (Block)mapType.getObject(blockBuilder,blockBuilder.getPositionCount() - 1);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 292,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3229,
        "startLineNumber" : 43,
        "startColumnNumber" : 4,
        "endLineNumber" : 105,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SqlType(\"map(varchar,array(varchar))\") public Block splitToMultimap(@TypeParameter(\"map(varchar,array(varchar))\") Type mapType,@SqlType(StandardTypes.VARCHAR) Slice string,@SqlType(StandardTypes.VARCHAR) Slice entryDelimiter,@SqlType(StandardTypes.VARCHAR) Slice keyValueDelimiter){\n  checkCondition(entryDelimiter.length() > 0,INVALID_FUNCTION_ARGUMENT,\"entryDelimiter is empty\");\n  checkCondition(keyValueDelimiter.length() > 0,INVALID_FUNCTION_ARGUMENT,\"keyValueDelimiter is empty\");\n  checkCondition(!entryDelimiter.equals(keyValueDelimiter),INVALID_FUNCTION_ARGUMENT,\"entryDelimiter and keyValueDelimiter must not be the same\");\n  Multimap<Slice,Slice> multimap=ArrayListMultimap.create();\n  int entryStart=0;\n  while (entryStart < string.length()) {\n    Slice keyValuePair;\n    int entryEnd=string.indexOf(entryDelimiter,entryStart);\n    if (entryEnd >= 0) {\n      keyValuePair=string.slice(entryStart,entryEnd - entryStart);\n    }\n else {\n      keyValuePair=string.slice(entryStart,string.length() - entryStart);\n    }\n    int keyEnd=keyValuePair.indexOf(keyValueDelimiter);\n    if (keyEnd < 0) {\n      throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"Key-value delimiter must appear exactly once in each entry. Bad input: \" + keyValuePair.toStringUtf8());\n    }\n    int valueStart=keyEnd + keyValueDelimiter.length();\n    Slice key=keyValuePair.slice(0,keyEnd);\n    Slice value=keyValuePair.slice(valueStart,keyValuePair.length() - valueStart);\n    if (value.indexOf(keyValueDelimiter) >= 0) {\n      throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"Key-value delimiter must appear exactly once in each entry. Bad input: \" + keyValuePair.toStringUtf8());\n    }\n    multimap.put(key,value);\n    if (entryEnd < 0) {\n      break;\n    }\n    entryStart=entryEnd + entryDelimiter.length();\n  }\n  BlockBuilder blockBuilder=mapType.createBlockBuilder(null,10);\n  BlockBuilder singleMapBlockBuilder=blockBuilder.beginBlockEntry();\n  for (  Map.Entry<Slice,Collection<Slice>> entry : multimap.asMap().entrySet()) {\n    VARCHAR.writeSlice(singleMapBlockBuilder,entry.getKey());\n    Collection<Slice> values=entry.getValue();\n    BlockBuilder valueBlockBuilder=singleMapBlockBuilder.beginBlockEntry();\n    for (    Slice value : values) {\n      VARCHAR.writeSlice(valueBlockBuilder,value);\n    }\n    singleMapBlockBuilder.closeEntry();\n  }\n  blockBuilder.closeEntry();\n  return (Block)mapType.getObject(blockBuilder,blockBuilder.getPositionCount() - 1);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 334,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 77,
        "startColumnNumber" : 16,
        "endLineNumber" : 77,
        "endColumnNumber" : 53
      },
      "nodeContext" : "value.indexOf(keyValueDelimiter) >= 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 83,
      "startColumnNumber" : 27,
      "endLineNumber" : 83,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 83,
        "startColumnNumber" : 16,
        "endLineNumber" : 83,
        "endColumnNumber" : 28
      },
      "nodeContext" : "entryEnd < 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 83,
        "startColumnNumber" : 12,
        "endLineNumber" : 86,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (entryEnd < 0) {\n  break;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1601,
        "startLineNumber" : 56,
        "startColumnNumber" : 45,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Slice keyValuePair;\n  int entryEnd=string.indexOf(entryDelimiter,entryStart);\n  if (entryEnd >= 0) {\n    keyValuePair=string.slice(entryStart,entryEnd - entryStart);\n  }\n else {\n    keyValuePair=string.slice(entryStart,string.length() - entryStart);\n  }\n  int keyEnd=keyValuePair.indexOf(keyValueDelimiter);\n  if (keyEnd < 0) {\n    throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"Key-value delimiter must appear exactly once in each entry. Bad input: \" + keyValuePair.toStringUtf8());\n  }\n  int valueStart=keyEnd + keyValueDelimiter.length();\n  Slice key=keyValuePair.slice(0,keyEnd);\n  Slice value=keyValuePair.slice(valueStart,keyValuePair.length() - valueStart);\n  if (value.indexOf(keyValueDelimiter) >= 0) {\n    throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"Key-value delimiter must appear exactly once in each entry. Bad input: \" + keyValuePair.toStringUtf8());\n  }\n  multimap.put(key,value);\n  if (entryEnd < 0) {\n    break;\n  }\n  entryStart=entryEnd + entryDelimiter.length();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 137,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1638,
        "startLineNumber" : 56,
        "startColumnNumber" : 8,
        "endLineNumber" : 89,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (entryStart < string.length()) {\n  Slice keyValuePair;\n  int entryEnd=string.indexOf(entryDelimiter,entryStart);\n  if (entryEnd >= 0) {\n    keyValuePair=string.slice(entryStart,entryEnd - entryStart);\n  }\n else {\n    keyValuePair=string.slice(entryStart,string.length() - entryStart);\n  }\n  int keyEnd=keyValuePair.indexOf(keyValueDelimiter);\n  if (keyEnd < 0) {\n    throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"Key-value delimiter must appear exactly once in each entry. Bad input: \" + keyValuePair.toStringUtf8());\n  }\n  int valueStart=keyEnd + keyValueDelimiter.length();\n  Slice key=keyValuePair.slice(0,keyEnd);\n  Slice value=keyValuePair.slice(valueStart,keyValuePair.length() - valueStart);\n  if (value.indexOf(keyValueDelimiter) >= 0) {\n    throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"Key-value delimiter must appear exactly once in each entry. Bad input: \" + keyValuePair.toStringUtf8());\n  }\n  multimap.put(key,value);\n  if (entryEnd < 0) {\n    break;\n  }\n  entryStart=entryEnd + entryDelimiter.length();\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 143,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2886,
        "startLineNumber" : 49,
        "startColumnNumber" : 4,
        "endLineNumber" : 105,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  checkCondition(entryDelimiter.length() > 0,INVALID_FUNCTION_ARGUMENT,\"entryDelimiter is empty\");\n  checkCondition(keyValueDelimiter.length() > 0,INVALID_FUNCTION_ARGUMENT,\"keyValueDelimiter is empty\");\n  checkCondition(!entryDelimiter.equals(keyValueDelimiter),INVALID_FUNCTION_ARGUMENT,\"entryDelimiter and keyValueDelimiter must not be the same\");\n  Multimap<Slice,Slice> multimap=ArrayListMultimap.create();\n  int entryStart=0;\n  while (entryStart < string.length()) {\n    Slice keyValuePair;\n    int entryEnd=string.indexOf(entryDelimiter,entryStart);\n    if (entryEnd >= 0) {\n      keyValuePair=string.slice(entryStart,entryEnd - entryStart);\n    }\n else {\n      keyValuePair=string.slice(entryStart,string.length() - entryStart);\n    }\n    int keyEnd=keyValuePair.indexOf(keyValueDelimiter);\n    if (keyEnd < 0) {\n      throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"Key-value delimiter must appear exactly once in each entry. Bad input: \" + keyValuePair.toStringUtf8());\n    }\n    int valueStart=keyEnd + keyValueDelimiter.length();\n    Slice key=keyValuePair.slice(0,keyEnd);\n    Slice value=keyValuePair.slice(valueStart,keyValuePair.length() - valueStart);\n    if (value.indexOf(keyValueDelimiter) >= 0) {\n      throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"Key-value delimiter must appear exactly once in each entry. Bad input: \" + keyValuePair.toStringUtf8());\n    }\n    multimap.put(key,value);\n    if (entryEnd < 0) {\n      break;\n    }\n    entryStart=entryEnd + entryDelimiter.length();\n  }\n  BlockBuilder blockBuilder=mapType.createBlockBuilder(null,10);\n  BlockBuilder singleMapBlockBuilder=blockBuilder.beginBlockEntry();\n  for (  Map.Entry<Slice,Collection<Slice>> entry : multimap.asMap().entrySet()) {\n    VARCHAR.writeSlice(singleMapBlockBuilder,entry.getKey());\n    Collection<Slice> values=entry.getValue();\n    BlockBuilder valueBlockBuilder=singleMapBlockBuilder.beginBlockEntry();\n    for (    Slice value : values) {\n      VARCHAR.writeSlice(valueBlockBuilder,value);\n    }\n    singleMapBlockBuilder.closeEntry();\n  }\n  blockBuilder.closeEntry();\n  return (Block)mapType.getObject(blockBuilder,blockBuilder.getPositionCount() - 1);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 292,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3229,
        "startLineNumber" : 43,
        "startColumnNumber" : 4,
        "endLineNumber" : 105,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SqlType(\"map(varchar,array(varchar))\") public Block splitToMultimap(@TypeParameter(\"map(varchar,array(varchar))\") Type mapType,@SqlType(StandardTypes.VARCHAR) Slice string,@SqlType(StandardTypes.VARCHAR) Slice entryDelimiter,@SqlType(StandardTypes.VARCHAR) Slice keyValueDelimiter){\n  checkCondition(entryDelimiter.length() > 0,INVALID_FUNCTION_ARGUMENT,\"entryDelimiter is empty\");\n  checkCondition(keyValueDelimiter.length() > 0,INVALID_FUNCTION_ARGUMENT,\"keyValueDelimiter is empty\");\n  checkCondition(!entryDelimiter.equals(keyValueDelimiter),INVALID_FUNCTION_ARGUMENT,\"entryDelimiter and keyValueDelimiter must not be the same\");\n  Multimap<Slice,Slice> multimap=ArrayListMultimap.create();\n  int entryStart=0;\n  while (entryStart < string.length()) {\n    Slice keyValuePair;\n    int entryEnd=string.indexOf(entryDelimiter,entryStart);\n    if (entryEnd >= 0) {\n      keyValuePair=string.slice(entryStart,entryEnd - entryStart);\n    }\n else {\n      keyValuePair=string.slice(entryStart,string.length() - entryStart);\n    }\n    int keyEnd=keyValuePair.indexOf(keyValueDelimiter);\n    if (keyEnd < 0) {\n      throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"Key-value delimiter must appear exactly once in each entry. Bad input: \" + keyValuePair.toStringUtf8());\n    }\n    int valueStart=keyEnd + keyValueDelimiter.length();\n    Slice key=keyValuePair.slice(0,keyEnd);\n    Slice value=keyValuePair.slice(valueStart,keyValuePair.length() - valueStart);\n    if (value.indexOf(keyValueDelimiter) >= 0) {\n      throw new PrestoException(INVALID_FUNCTION_ARGUMENT,\"Key-value delimiter must appear exactly once in each entry. Bad input: \" + keyValuePair.toStringUtf8());\n    }\n    multimap.put(key,value);\n    if (entryEnd < 0) {\n      break;\n    }\n    entryStart=entryEnd + entryDelimiter.length();\n  }\n  BlockBuilder blockBuilder=mapType.createBlockBuilder(null,10);\n  BlockBuilder singleMapBlockBuilder=blockBuilder.beginBlockEntry();\n  for (  Map.Entry<Slice,Collection<Slice>> entry : multimap.asMap().entrySet()) {\n    VARCHAR.writeSlice(singleMapBlockBuilder,entry.getKey());\n    Collection<Slice> values=entry.getValue();\n    BlockBuilder valueBlockBuilder=singleMapBlockBuilder.beginBlockEntry();\n    for (    Slice value : values) {\n      VARCHAR.writeSlice(valueBlockBuilder,value);\n    }\n    singleMapBlockBuilder.closeEntry();\n  }\n  blockBuilder.closeEntry();\n  return (Block)mapType.getObject(blockBuilder,blockBuilder.getPositionCount() - 1);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 334,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 83,
        "startColumnNumber" : 16,
        "endLineNumber" : 83,
        "endColumnNumber" : 28
      },
      "nodeContext" : "entryEnd < 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 50,
    "startColumnNumber" : 49,
    "endLineNumber" : 50,
    "endColumnNumber" : 50
  }, {
    "charLength" : 1,
    "startLineNumber" : 51,
    "startColumnNumber" : 52,
    "endLineNumber" : 51,
    "endColumnNumber" : 53
  }, {
    "charLength" : 1,
    "startLineNumber" : 55,
    "startColumnNumber" : 25,
    "endLineNumber" : 55,
    "endColumnNumber" : 26
  }, {
    "charLength" : 1,
    "startLineNumber" : 61,
    "startColumnNumber" : 28,
    "endLineNumber" : 61,
    "endColumnNumber" : 29
  }, {
    "charLength" : 1,
    "startLineNumber" : 70,
    "startColumnNumber" : 25,
    "endLineNumber" : 70,
    "endColumnNumber" : 26
  }, {
    "charLength" : 1,
    "startLineNumber" : 75,
    "startColumnNumber" : 43,
    "endLineNumber" : 75,
    "endColumnNumber" : 44
  }, {
    "charLength" : 1,
    "startLineNumber" : 77,
    "startColumnNumber" : 52,
    "endLineNumber" : 77,
    "endColumnNumber" : 53
  }, {
    "charLength" : 1,
    "startLineNumber" : 83,
    "startColumnNumber" : 27,
    "endLineNumber" : 83,
    "endColumnNumber" : 28
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 2
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 2
  } ]
}