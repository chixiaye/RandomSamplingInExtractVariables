{
  "id" : 59,
  "expression" : "destIndex + charsLeft",
  "projectName" : "google@guava",
  "commitID" : "68500b2c09fa6985eab2e41577e2992685b57f2b",
  "filePath" : "/guava/src/com/google/common/escape/CharEscaper.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "destIndex + charsLeft",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 149,
      "startColumnNumber" : 23,
      "endLineNumber" : 149,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 149,
        "startColumnNumber" : 10,
        "endLineNumber" : 149,
        "endColumnNumber" : 44
      },
      "nodeContext" : "sizeNeeded=destIndex + charsLeft",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 149,
        "startColumnNumber" : 6,
        "endLineNumber" : 149,
        "endColumnNumber" : 45
      },
      "nodeContext" : "int sizeNeeded=destIndex + charsLeft;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 322,
        "startLineNumber" : 148,
        "startColumnNumber" : 23,
        "endLineNumber" : 157,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int sizeNeeded=destIndex + charsLeft;\n  if (destSize < sizeNeeded) {\n    dest=growBuffer(dest,destIndex,sizeNeeded);\n  }\n  s.getChars(lastEscape,slen,dest,destIndex);\n  destIndex=sizeNeeded;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 33,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 341,
        "startLineNumber" : 148,
        "startColumnNumber" : 4,
        "endLineNumber" : 157,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (charsLeft > 0) {\n  int sizeNeeded=destIndex + charsLeft;\n  if (destSize < sizeNeeded) {\n    dest=growBuffer(dest,destIndex,sizeNeeded);\n  }\n  s.getChars(lastEscape,slen,dest,destIndex);\n  destIndex=sizeNeeded;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 37,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2073,
        "startLineNumber" : 99,
        "startColumnNumber" : 57,
        "endLineNumber" : 159,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int slen=s.length();\n  char[] dest=Platform.charBufferFromThreadLocal();\n  int destSize=dest.length;\n  int destIndex=0;\n  int lastEscape=0;\n  for (; index < slen; index++) {\n    char[] r=escape(s.charAt(index));\n    if (r == null) {\n      continue;\n    }\n    int rlen=r.length;\n    int charsSkipped=index - lastEscape;\n    int sizeNeeded=destIndex + charsSkipped + rlen;\n    if (destSize < sizeNeeded) {\n      destSize=sizeNeeded + DEST_PAD_MULTIPLIER * (slen - index);\n      dest=growBuffer(dest,destIndex,destSize);\n    }\n    if (charsSkipped > 0) {\n      s.getChars(lastEscape,index,dest,destIndex);\n      destIndex+=charsSkipped;\n    }\n    if (rlen > 0) {\n      System.arraycopy(r,0,dest,destIndex,rlen);\n      destIndex+=rlen;\n    }\n    lastEscape=index + 1;\n  }\n  int charsLeft=slen - lastEscape;\n  if (charsLeft > 0) {\n    int sizeNeeded=destIndex + charsLeft;\n    if (destSize < sizeNeeded) {\n      dest=growBuffer(dest,destIndex,sizeNeeded);\n    }\n    s.getChars(lastEscape,slen,dest,destIndex);\n    destIndex=sizeNeeded;\n  }\n  return new String(dest,0,destIndex);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 197,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2731,
        "startLineNumber" : 88,
        "startColumnNumber" : 2,
        "endLineNumber" : 159,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Returns the escaped form of a given literal string, starting at the given index. This method is called by the  {@link #escape(String)} method when it discovers that escaping is required. It isprotected to allow subclasses to override the fastpath escaping function to inline their escaping test. See  {@link CharEscaperBuilder} for an example usage.\n * @param s the literal string to be escaped\n * @param index the index to start escaping from\n * @return the escaped form of {@code string}\n * @throws NullPointerException if {@code string} is null\n */\nprotected final String escapeSlow(String s,int index){\n  int slen=s.length();\n  char[] dest=Platform.charBufferFromThreadLocal();\n  int destSize=dest.length;\n  int destIndex=0;\n  int lastEscape=0;\n  for (; index < slen; index++) {\n    char[] r=escape(s.charAt(index));\n    if (r == null) {\n      continue;\n    }\n    int rlen=r.length;\n    int charsSkipped=index - lastEscape;\n    int sizeNeeded=destIndex + charsSkipped + rlen;\n    if (destSize < sizeNeeded) {\n      destSize=sizeNeeded + DEST_PAD_MULTIPLIER * (slen - index);\n      dest=growBuffer(dest,destIndex,destSize);\n    }\n    if (charsSkipped > 0) {\n      s.getChars(lastEscape,index,dest,destIndex);\n      destIndex+=charsSkipped;\n    }\n    if (rlen > 0) {\n      System.arraycopy(r,0,dest,destIndex,rlen);\n      destIndex+=rlen;\n    }\n    lastEscape=index + 1;\n  }\n  int charsLeft=slen - lastEscape;\n  if (charsLeft > 0) {\n    int sizeNeeded=destIndex + charsLeft;\n    if (destSize < sizeNeeded) {\n      dest=growBuffer(dest,destIndex,sizeNeeded);\n    }\n    s.getChars(lastEscape,slen,dest,destIndex);\n    destIndex=sizeNeeded;\n  }\n  return new String(dest,0,destIndex);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 211,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 149,
        "startColumnNumber" : 6,
        "endLineNumber" : 149,
        "endColumnNumber" : 45
      },
      "nodeContext" : "int sizeNeeded=destIndex + charsLeft;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 149,
    "startColumnNumber" : 23,
    "endLineNumber" : 149,
    "endColumnNumber" : 44
  } ],
  "layoutRelationDataList" : [ ]
}