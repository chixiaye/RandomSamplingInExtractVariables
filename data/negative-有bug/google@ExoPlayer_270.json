{
  "id" : 270,
  "expression" : "new TrackGroup(formatAdaptive1,formatAdaptive2,formatAdaptive3,formatAdaptive4)",
  "projectName" : "google@ExoPlayer",
  "commitID" : "4803ab3bd12b71fc32150e96475c0e16aaf6ddc5",
  "filePath" : "/library/core/src/test/java/com/google/android/exoplayer2/trackselection/AdaptiveTrackSelectionTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new TrackGroup(formatAdaptive1,formatAdaptive2,formatAdaptive3,formatAdaptive4)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 82,
      "startLineNumber" : 534,
      "startColumnNumber" : 8,
      "endLineNumber" : 534,
      "endColumnNumber" : 90
    },
    "astNodeNumber" : 7,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 111,
        "startLineNumber" : 533,
        "startColumnNumber" : 15,
        "endLineNumber" : 534,
        "endColumnNumber" : 90
      },
      "nodeContext" : "trackGroupAdaptive=new TrackGroup(formatAdaptive1,formatAdaptive2,formatAdaptive3,formatAdaptive4)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 123,
        "startLineNumber" : 533,
        "startColumnNumber" : 4,
        "endLineNumber" : 534,
        "endColumnNumber" : 91
      },
      "nodeContext" : "TrackGroup trackGroupAdaptive=new TrackGroup(formatAdaptive1,formatAdaptive2,formatAdaptive3,formatAdaptive4);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2600,
        "startLineNumber" : 525,
        "startColumnNumber" : 94,
        "endLineNumber" : 570,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Format formatFixed1=new Format.Builder().setAverageBitrate(500).build();\n  Format formatFixed2=new Format.Builder().setAverageBitrate(1000).build();\n  Format formatAdaptive1=new Format.Builder().setAverageBitrate(2000).build();\n  Format formatAdaptive2=new Format.Builder().setAverageBitrate(3000).build();\n  Format formatAdaptive3=new Format.Builder().setAverageBitrate(4000).build();\n  Format formatAdaptive4=new Format.Builder().setAverageBitrate(5000).build();\n  TrackGroup trackGroupMultipleFixed=new TrackGroup(formatFixed1,formatFixed2);\n  TrackGroup trackGroupAdaptive=new TrackGroup(formatAdaptive1,formatAdaptive2,formatAdaptive3,formatAdaptive4);\n  Definition definitionFixed1=new Definition(trackGroupMultipleFixed,0);\n  Definition definitionFixed2=new Definition(trackGroupMultipleFixed,1);\n  Definition definitionAdaptive=new Definition(trackGroupAdaptive,1,2,3);\n  List<List<AdaptationCheckpoint>> checkPoints=new ArrayList<>();\n  AdaptiveTrackSelection.Factory factory=new AdaptiveTrackSelection.Factory(){\n    @Override protected AdaptiveTrackSelection createAdaptiveTrackSelection(    TrackGroup group,    int[] tracks,    int type,    BandwidthMeter bandwidthMeter,    ImmutableList<AdaptationCheckpoint> adaptationCheckpoints){\n      checkPoints.add(adaptationCheckpoints);\n      return super.createAdaptiveTrackSelection(group,tracks,TrackSelection.TYPE_UNSET,bandwidthMeter,adaptationCheckpoints);\n    }\n  }\n;\n  Timeline timeline=new FakeTimeline();\n  factory.createTrackSelections(new Definition[]{null,definitionFixed1,null,definitionFixed2,definitionAdaptive},mockBandwidthMeter,new MediaSource.MediaPeriodId(timeline.getUidOfPeriod(0)),timeline);\n  assertThat(checkPoints).hasSize(1);\n  assertThat(checkPoints.get(0)).containsExactly(new AdaptationCheckpoint(0,0),new AdaptationCheckpoint(4500,3000),new AdaptationCheckpoint(5500,4000),new AdaptationCheckpoint(6500,5000),new AdaptationCheckpoint(11500,10000)).inOrder();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 296,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2714,
        "startLineNumber" : 523,
        "startColumnNumber" : 2,
        "endLineNumber" : 570,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void builderCreateTrackSelections_withSingleAdaptiveGroup_usesCorrectAdaptationCheckpoints(){\n  Format formatFixed1=new Format.Builder().setAverageBitrate(500).build();\n  Format formatFixed2=new Format.Builder().setAverageBitrate(1000).build();\n  Format formatAdaptive1=new Format.Builder().setAverageBitrate(2000).build();\n  Format formatAdaptive2=new Format.Builder().setAverageBitrate(3000).build();\n  Format formatAdaptive3=new Format.Builder().setAverageBitrate(4000).build();\n  Format formatAdaptive4=new Format.Builder().setAverageBitrate(5000).build();\n  TrackGroup trackGroupMultipleFixed=new TrackGroup(formatFixed1,formatFixed2);\n  TrackGroup trackGroupAdaptive=new TrackGroup(formatAdaptive1,formatAdaptive2,formatAdaptive3,formatAdaptive4);\n  Definition definitionFixed1=new Definition(trackGroupMultipleFixed,0);\n  Definition definitionFixed2=new Definition(trackGroupMultipleFixed,1);\n  Definition definitionAdaptive=new Definition(trackGroupAdaptive,1,2,3);\n  List<List<AdaptationCheckpoint>> checkPoints=new ArrayList<>();\n  AdaptiveTrackSelection.Factory factory=new AdaptiveTrackSelection.Factory(){\n    @Override protected AdaptiveTrackSelection createAdaptiveTrackSelection(    TrackGroup group,    int[] tracks,    int type,    BandwidthMeter bandwidthMeter,    ImmutableList<AdaptationCheckpoint> adaptationCheckpoints){\n      checkPoints.add(adaptationCheckpoints);\n      return super.createAdaptiveTrackSelection(group,tracks,TrackSelection.TYPE_UNSET,bandwidthMeter,adaptationCheckpoints);\n    }\n  }\n;\n  Timeline timeline=new FakeTimeline();\n  factory.createTrackSelections(new Definition[]{null,definitionFixed1,null,definitionFixed2,definitionAdaptive},mockBandwidthMeter,new MediaSource.MediaPeriodId(timeline.getUidOfPeriod(0)),timeline);\n  assertThat(checkPoints).hasSize(1);\n  assertThat(checkPoints.get(0)).containsExactly(new AdaptationCheckpoint(0,0),new AdaptationCheckpoint(4500,3000),new AdaptationCheckpoint(5500,4000),new AdaptationCheckpoint(6500,5000),new AdaptationCheckpoint(11500,10000)).inOrder();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 302,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 111,
        "startLineNumber" : 533,
        "startColumnNumber" : 15,
        "endLineNumber" : 534,
        "endColumnNumber" : 90
      },
      "nodeContext" : "trackGroupAdaptive=new TrackGroup(formatAdaptive1,formatAdaptive2,formatAdaptive3,formatAdaptive4)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 5,
    "type" : "com.google.android.exoplayer2.source.TrackGroup"
  } ],
  "positionList" : [ {
    "charLength" : 82,
    "startLineNumber" : 534,
    "startColumnNumber" : 8,
    "endLineNumber" : 534,
    "endColumnNumber" : 90
  } ],
  "layoutRelationDataList" : [ ]
}