{
  "id" : 153,
  "expression" : "oldsize",
  "projectName" : "Tencent@tinker",
  "commitID" : "df9e1d29420d53a650ab73569d828a22e3cfe728",
  "filePath" : "/third-party/bsdiff-util/src/main/java/com/tencent/tinker/bsdiff/BSPatch.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "oldsize",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 103,
      "startColumnNumber" : 31,
      "endLineNumber" : 103,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 103,
        "startColumnNumber" : 31,
        "endLineNumber" : 103,
        "endColumnNumber" : 43
      },
      "nodeContext" : "oldsize <= 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 103,
        "startColumnNumber" : 12,
        "endLineNumber" : 103,
        "endColumnNumber" : 43
      },
      "nodeContext" : "oldFile == null || oldsize <= 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 103,
        "startColumnNumber" : 8,
        "endLineNumber" : 105,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (oldFile == null || oldsize <= 0) {\n  return RETURN_OLD_FILE_ERR;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3903,
        "startLineNumber" : 101,
        "startColumnNumber" : 152,
        "endLineNumber" : 209,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (oldFile == null || oldsize <= 0) {\n    return RETURN_OLD_FILE_ERR;\n  }\n  if (newFile == null) {\n    return RETURN_NEW_FILE_ERR;\n  }\n  if (diffBuf == null || diffSize <= 0) {\n    return RETURN_DIFF_FILE_ERR;\n  }\n  DataInputStream diffIn=new DataInputStream(new ByteArrayInputStream(diffBuf,0,diffSize));\n  diffIn.skip(8);\n  long ctrlBlockLen=diffIn.readLong();\n  long diffBlockLen=diffIn.readLong();\n  int newsize=(int)diffIn.readLong();\n  diffIn.close();\n  InputStream in=new ByteArrayInputStream(diffBuf,0,diffSize);\n  in.skip(BSUtil.HEADER_SIZE);\n  DataInputStream ctrlBlockIn=new DataInputStream(new GZIPInputStream(in));\n  in=new ByteArrayInputStream(diffBuf,0,diffSize);\n  in.skip(ctrlBlockLen + BSUtil.HEADER_SIZE);\n  InputStream diffBlockIn=new GZIPInputStream(in);\n  in=new ByteArrayInputStream(diffBuf,0,diffSize);\n  in.skip(diffBlockLen + ctrlBlockLen + BSUtil.HEADER_SIZE);\n  InputStream extraBlockIn=new GZIPInputStream(in);\n  OutputStream outStream=new FileOutputStream(newFile);\n  try {\n    int oldpos=0;\n    int newpos=0;\n    int[] ctrl=new int[3];\n    while (newpos < newsize) {\n      for (int i=0; i <= 2; i++) {\n        ctrl[i]=ctrlBlockIn.readInt();\n      }\n      if (newpos + ctrl[0] > newsize) {\n        outStream.close();\n        return RETURN_DIFF_FILE_ERR;\n      }\n      byte[] buffer=new byte[ctrl[0]];\n      if (!BSUtil.readFromStream(diffBlockIn,buffer,0,ctrl[0])) {\n        outStream.close();\n        return RETURN_DIFF_FILE_ERR;\n      }\n      byte[] oldBuffer=new byte[ctrl[0]];\n      if (oldFile.read(oldBuffer,0,ctrl[0]) < ctrl[0]) {\n        outStream.close();\n        return RETURN_DIFF_FILE_ERR;\n      }\n      for (int i=0; i < ctrl[0]; i++) {\n        if ((oldpos + i >= 0) && (oldpos + i < oldsize)) {\n          buffer[i]+=oldBuffer[i];\n        }\n      }\n      outStream.write(buffer);\n      newpos+=ctrl[0];\n      oldpos+=ctrl[0];\n      if (newpos + ctrl[1] > newsize) {\n        outStream.close();\n        return RETURN_DIFF_FILE_ERR;\n      }\n      buffer=new byte[ctrl[1]];\n      if (!BSUtil.readFromStream(extraBlockIn,buffer,0,ctrl[1])) {\n        outStream.close();\n        return RETURN_DIFF_FILE_ERR;\n      }\n      outStream.write(buffer);\n      outStream.flush();\n      newpos+=ctrl[1];\n      oldpos+=ctrl[2];\n      oldFile.seek(oldpos);\n    }\n    ctrlBlockIn.close();\n    diffBlockIn.close();\n    extraBlockIn.close();\n  }\n  finally {\n    oldFile.close();\n    outStream.close();\n  }\n  return RETURN_SUCCESS;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 443,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4242,
        "startLineNumber" : 96,
        "startColumnNumber" : 4,
        "endLineNumber" : 209,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * BSPatch using less memory size. Memory size = diffFile size + max block size extLen   the length of the apk external info. set 0 if has no external info.\n */\npublic static int patchLessMemory(RandomAccessFile oldFile,int oldsize,byte[] diffBuf,int diffSize,File newFile,int extLen) throws IOException {\n  if (oldFile == null || oldsize <= 0) {\n    return RETURN_OLD_FILE_ERR;\n  }\n  if (newFile == null) {\n    return RETURN_NEW_FILE_ERR;\n  }\n  if (diffBuf == null || diffSize <= 0) {\n    return RETURN_DIFF_FILE_ERR;\n  }\n  DataInputStream diffIn=new DataInputStream(new ByteArrayInputStream(diffBuf,0,diffSize));\n  diffIn.skip(8);\n  long ctrlBlockLen=diffIn.readLong();\n  long diffBlockLen=diffIn.readLong();\n  int newsize=(int)diffIn.readLong();\n  diffIn.close();\n  InputStream in=new ByteArrayInputStream(diffBuf,0,diffSize);\n  in.skip(BSUtil.HEADER_SIZE);\n  DataInputStream ctrlBlockIn=new DataInputStream(new GZIPInputStream(in));\n  in=new ByteArrayInputStream(diffBuf,0,diffSize);\n  in.skip(ctrlBlockLen + BSUtil.HEADER_SIZE);\n  InputStream diffBlockIn=new GZIPInputStream(in);\n  in=new ByteArrayInputStream(diffBuf,0,diffSize);\n  in.skip(diffBlockLen + ctrlBlockLen + BSUtil.HEADER_SIZE);\n  InputStream extraBlockIn=new GZIPInputStream(in);\n  OutputStream outStream=new FileOutputStream(newFile);\n  try {\n    int oldpos=0;\n    int newpos=0;\n    int[] ctrl=new int[3];\n    while (newpos < newsize) {\n      for (int i=0; i <= 2; i++) {\n        ctrl[i]=ctrlBlockIn.readInt();\n      }\n      if (newpos + ctrl[0] > newsize) {\n        outStream.close();\n        return RETURN_DIFF_FILE_ERR;\n      }\n      byte[] buffer=new byte[ctrl[0]];\n      if (!BSUtil.readFromStream(diffBlockIn,buffer,0,ctrl[0])) {\n        outStream.close();\n        return RETURN_DIFF_FILE_ERR;\n      }\n      byte[] oldBuffer=new byte[ctrl[0]];\n      if (oldFile.read(oldBuffer,0,ctrl[0]) < ctrl[0]) {\n        outStream.close();\n        return RETURN_DIFF_FILE_ERR;\n      }\n      for (int i=0; i < ctrl[0]; i++) {\n        if ((oldpos + i >= 0) && (oldpos + i < oldsize)) {\n          buffer[i]+=oldBuffer[i];\n        }\n      }\n      outStream.write(buffer);\n      newpos+=ctrl[0];\n      oldpos+=ctrl[0];\n      if (newpos + ctrl[1] > newsize) {\n        outStream.close();\n        return RETURN_DIFF_FILE_ERR;\n      }\n      buffer=new byte[ctrl[1]];\n      if (!BSUtil.readFromStream(extraBlockIn,buffer,0,ctrl[1])) {\n        outStream.close();\n        return RETURN_DIFF_FILE_ERR;\n      }\n      outStream.write(buffer);\n      outStream.flush();\n      newpos+=ctrl[1];\n      oldpos+=ctrl[2];\n      oldFile.seek(oldpos);\n    }\n    ctrlBlockIn.close();\n    diffBlockIn.close();\n    extraBlockIn.close();\n  }\n  finally {\n    oldFile.close();\n    outStream.close();\n  }\n  return RETURN_SUCCESS;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 473,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 103,
        "startColumnNumber" : 12,
        "endLineNumber" : 103,
        "endColumnNumber" : 43
      },
      "nodeContext" : "oldFile == null || oldsize <= 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "oldsize",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 175,
      "startColumnNumber" : 59,
      "endLineNumber" : 175,
      "endColumnNumber" : 66
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 175,
        "startColumnNumber" : 46,
        "endLineNumber" : 175,
        "endColumnNumber" : 66
      },
      "nodeContext" : "oldpos + i < oldsize",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 175,
        "startColumnNumber" : 45,
        "endLineNumber" : 175,
        "endColumnNumber" : 67
      },
      "nodeContext" : "(oldpos + i < oldsize)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 175,
        "startColumnNumber" : 24,
        "endLineNumber" : 175,
        "endColumnNumber" : 67
      },
      "nodeContext" : "(oldpos + i >= 0) && (oldpos + i < oldsize)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 123,
        "startLineNumber" : 175,
        "startColumnNumber" : 20,
        "endLineNumber" : 177,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if ((oldpos + i >= 0) && (oldpos + i < oldsize)) {\n  buffer[i]+=oldBuffer[i];\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 23,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 341,
        "startLineNumber" : 169,
        "startColumnNumber" : 50,
        "endLineNumber" : 178,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  if ((oldpos + i >= 0) && (oldpos + i < oldsize)) {\n    buffer[i]+=oldBuffer[i];\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 24,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 375,
        "startLineNumber" : 169,
        "startColumnNumber" : 16,
        "endLineNumber" : 178,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (int i=0; i < ctrl[0]; i++) {\n  if ((oldpos + i >= 0) && (oldpos + i < oldsize)) {\n    buffer[i]+=oldBuffer[i];\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 37,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1895,
        "startLineNumber" : 146,
        "startColumnNumber" : 37,
        "endLineNumber" : 200,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  for (int i=0; i <= 2; i++) {\n    ctrl[i]=ctrlBlockIn.readInt();\n  }\n  if (newpos + ctrl[0] > newsize) {\n    outStream.close();\n    return RETURN_DIFF_FILE_ERR;\n  }\n  byte[] buffer=new byte[ctrl[0]];\n  if (!BSUtil.readFromStream(diffBlockIn,buffer,0,ctrl[0])) {\n    outStream.close();\n    return RETURN_DIFF_FILE_ERR;\n  }\n  byte[] oldBuffer=new byte[ctrl[0]];\n  if (oldFile.read(oldBuffer,0,ctrl[0]) < ctrl[0]) {\n    outStream.close();\n    return RETURN_DIFF_FILE_ERR;\n  }\n  for (int i=0; i < ctrl[0]; i++) {\n    if ((oldpos + i >= 0) && (oldpos + i < oldsize)) {\n      buffer[i]+=oldBuffer[i];\n    }\n  }\n  outStream.write(buffer);\n  newpos+=ctrl[0];\n  oldpos+=ctrl[0];\n  if (newpos + ctrl[1] > newsize) {\n    outStream.close();\n    return RETURN_DIFF_FILE_ERR;\n  }\n  buffer=new byte[ctrl[1]];\n  if (!BSUtil.readFromStream(extraBlockIn,buffer,0,ctrl[1])) {\n    outStream.close();\n    return RETURN_DIFF_FILE_ERR;\n  }\n  outStream.write(buffer);\n  outStream.flush();\n  newpos+=ctrl[1];\n  oldpos+=ctrl[2];\n  oldFile.seek(oldpos);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 223,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1920,
        "startLineNumber" : 146,
        "startColumnNumber" : 12,
        "endLineNumber" : 200,
        "endColumnNumber" : 13
      },
      "nodeContext" : "while (newpos < newsize) {\n  for (int i=0; i <= 2; i++) {\n    ctrl[i]=ctrlBlockIn.readInt();\n  }\n  if (newpos + ctrl[0] > newsize) {\n    outStream.close();\n    return RETURN_DIFF_FILE_ERR;\n  }\n  byte[] buffer=new byte[ctrl[0]];\n  if (!BSUtil.readFromStream(diffBlockIn,buffer,0,ctrl[0])) {\n    outStream.close();\n    return RETURN_DIFF_FILE_ERR;\n  }\n  byte[] oldBuffer=new byte[ctrl[0]];\n  if (oldFile.read(oldBuffer,0,ctrl[0]) < ctrl[0]) {\n    outStream.close();\n    return RETURN_DIFF_FILE_ERR;\n  }\n  for (int i=0; i < ctrl[0]; i++) {\n    if ((oldpos + i >= 0) && (oldpos + i < oldsize)) {\n      buffer[i]+=oldBuffer[i];\n    }\n  }\n  outStream.write(buffer);\n  newpos+=ctrl[0];\n  oldpos+=ctrl[0];\n  if (newpos + ctrl[1] > newsize) {\n    outStream.close();\n    return RETURN_DIFF_FILE_ERR;\n  }\n  buffer=new byte[ctrl[1]];\n  if (!BSUtil.readFromStream(extraBlockIn,buffer,0,ctrl[1])) {\n    outStream.close();\n    return RETURN_DIFF_FILE_ERR;\n  }\n  outStream.write(buffer);\n  outStream.flush();\n  newpos+=ctrl[1];\n  oldpos+=ctrl[2];\n  oldFile.seek(oldpos);\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 227,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2165,
        "startLineNumber" : 140,
        "startColumnNumber" : 12,
        "endLineNumber" : 204,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int oldpos=0;\n  int newpos=0;\n  int[] ctrl=new int[3];\n  while (newpos < newsize) {\n    for (int i=0; i <= 2; i++) {\n      ctrl[i]=ctrlBlockIn.readInt();\n    }\n    if (newpos + ctrl[0] > newsize) {\n      outStream.close();\n      return RETURN_DIFF_FILE_ERR;\n    }\n    byte[] buffer=new byte[ctrl[0]];\n    if (!BSUtil.readFromStream(diffBlockIn,buffer,0,ctrl[0])) {\n      outStream.close();\n      return RETURN_DIFF_FILE_ERR;\n    }\n    byte[] oldBuffer=new byte[ctrl[0]];\n    if (oldFile.read(oldBuffer,0,ctrl[0]) < ctrl[0]) {\n      outStream.close();\n      return RETURN_DIFF_FILE_ERR;\n    }\n    for (int i=0; i < ctrl[0]; i++) {\n      if ((oldpos + i >= 0) && (oldpos + i < oldsize)) {\n        buffer[i]+=oldBuffer[i];\n      }\n    }\n    outStream.write(buffer);\n    newpos+=ctrl[0];\n    oldpos+=ctrl[0];\n    if (newpos + ctrl[1] > newsize) {\n      outStream.close();\n      return RETURN_DIFF_FILE_ERR;\n    }\n    buffer=new byte[ctrl[1]];\n    if (!BSUtil.readFromStream(extraBlockIn,buffer,0,ctrl[1])) {\n      outStream.close();\n      return RETURN_DIFF_FILE_ERR;\n    }\n    outStream.write(buffer);\n    outStream.flush();\n    newpos+=ctrl[1];\n    oldpos+=ctrl[2];\n    oldFile.seek(oldpos);\n  }\n  ctrlBlockIn.close();\n  diffBlockIn.close();\n  extraBlockIn.close();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 261,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2249,
        "startLineNumber" : 140,
        "startColumnNumber" : 8,
        "endLineNumber" : 207,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  int oldpos=0;\n  int newpos=0;\n  int[] ctrl=new int[3];\n  while (newpos < newsize) {\n    for (int i=0; i <= 2; i++) {\n      ctrl[i]=ctrlBlockIn.readInt();\n    }\n    if (newpos + ctrl[0] > newsize) {\n      outStream.close();\n      return RETURN_DIFF_FILE_ERR;\n    }\n    byte[] buffer=new byte[ctrl[0]];\n    if (!BSUtil.readFromStream(diffBlockIn,buffer,0,ctrl[0])) {\n      outStream.close();\n      return RETURN_DIFF_FILE_ERR;\n    }\n    byte[] oldBuffer=new byte[ctrl[0]];\n    if (oldFile.read(oldBuffer,0,ctrl[0]) < ctrl[0]) {\n      outStream.close();\n      return RETURN_DIFF_FILE_ERR;\n    }\n    for (int i=0; i < ctrl[0]; i++) {\n      if ((oldpos + i >= 0) && (oldpos + i < oldsize)) {\n        buffer[i]+=oldBuffer[i];\n      }\n    }\n    outStream.write(buffer);\n    newpos+=ctrl[0];\n    oldpos+=ctrl[0];\n    if (newpos + ctrl[1] > newsize) {\n      outStream.close();\n      return RETURN_DIFF_FILE_ERR;\n    }\n    buffer=new byte[ctrl[1]];\n    if (!BSUtil.readFromStream(extraBlockIn,buffer,0,ctrl[1])) {\n      outStream.close();\n      return RETURN_DIFF_FILE_ERR;\n    }\n    outStream.write(buffer);\n    outStream.flush();\n    newpos+=ctrl[1];\n    oldpos+=ctrl[2];\n    oldFile.seek(oldpos);\n  }\n  ctrlBlockIn.close();\n  diffBlockIn.close();\n  extraBlockIn.close();\n}\n  finally {\n  oldFile.close();\n  outStream.close();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 271,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3903,
        "startLineNumber" : 101,
        "startColumnNumber" : 152,
        "endLineNumber" : 209,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (oldFile == null || oldsize <= 0) {\n    return RETURN_OLD_FILE_ERR;\n  }\n  if (newFile == null) {\n    return RETURN_NEW_FILE_ERR;\n  }\n  if (diffBuf == null || diffSize <= 0) {\n    return RETURN_DIFF_FILE_ERR;\n  }\n  DataInputStream diffIn=new DataInputStream(new ByteArrayInputStream(diffBuf,0,diffSize));\n  diffIn.skip(8);\n  long ctrlBlockLen=diffIn.readLong();\n  long diffBlockLen=diffIn.readLong();\n  int newsize=(int)diffIn.readLong();\n  diffIn.close();\n  InputStream in=new ByteArrayInputStream(diffBuf,0,diffSize);\n  in.skip(BSUtil.HEADER_SIZE);\n  DataInputStream ctrlBlockIn=new DataInputStream(new GZIPInputStream(in));\n  in=new ByteArrayInputStream(diffBuf,0,diffSize);\n  in.skip(ctrlBlockLen + BSUtil.HEADER_SIZE);\n  InputStream diffBlockIn=new GZIPInputStream(in);\n  in=new ByteArrayInputStream(diffBuf,0,diffSize);\n  in.skip(diffBlockLen + ctrlBlockLen + BSUtil.HEADER_SIZE);\n  InputStream extraBlockIn=new GZIPInputStream(in);\n  OutputStream outStream=new FileOutputStream(newFile);\n  try {\n    int oldpos=0;\n    int newpos=0;\n    int[] ctrl=new int[3];\n    while (newpos < newsize) {\n      for (int i=0; i <= 2; i++) {\n        ctrl[i]=ctrlBlockIn.readInt();\n      }\n      if (newpos + ctrl[0] > newsize) {\n        outStream.close();\n        return RETURN_DIFF_FILE_ERR;\n      }\n      byte[] buffer=new byte[ctrl[0]];\n      if (!BSUtil.readFromStream(diffBlockIn,buffer,0,ctrl[0])) {\n        outStream.close();\n        return RETURN_DIFF_FILE_ERR;\n      }\n      byte[] oldBuffer=new byte[ctrl[0]];\n      if (oldFile.read(oldBuffer,0,ctrl[0]) < ctrl[0]) {\n        outStream.close();\n        return RETURN_DIFF_FILE_ERR;\n      }\n      for (int i=0; i < ctrl[0]; i++) {\n        if ((oldpos + i >= 0) && (oldpos + i < oldsize)) {\n          buffer[i]+=oldBuffer[i];\n        }\n      }\n      outStream.write(buffer);\n      newpos+=ctrl[0];\n      oldpos+=ctrl[0];\n      if (newpos + ctrl[1] > newsize) {\n        outStream.close();\n        return RETURN_DIFF_FILE_ERR;\n      }\n      buffer=new byte[ctrl[1]];\n      if (!BSUtil.readFromStream(extraBlockIn,buffer,0,ctrl[1])) {\n        outStream.close();\n        return RETURN_DIFF_FILE_ERR;\n      }\n      outStream.write(buffer);\n      outStream.flush();\n      newpos+=ctrl[1];\n      oldpos+=ctrl[2];\n      oldFile.seek(oldpos);\n    }\n    ctrlBlockIn.close();\n    diffBlockIn.close();\n    extraBlockIn.close();\n  }\n  finally {\n    oldFile.close();\n    outStream.close();\n  }\n  return RETURN_SUCCESS;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 443,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4242,
        "startLineNumber" : 96,
        "startColumnNumber" : 4,
        "endLineNumber" : 209,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * BSPatch using less memory size. Memory size = diffFile size + max block size extLen   the length of the apk external info. set 0 if has no external info.\n */\npublic static int patchLessMemory(RandomAccessFile oldFile,int oldsize,byte[] diffBuf,int diffSize,File newFile,int extLen) throws IOException {\n  if (oldFile == null || oldsize <= 0) {\n    return RETURN_OLD_FILE_ERR;\n  }\n  if (newFile == null) {\n    return RETURN_NEW_FILE_ERR;\n  }\n  if (diffBuf == null || diffSize <= 0) {\n    return RETURN_DIFF_FILE_ERR;\n  }\n  DataInputStream diffIn=new DataInputStream(new ByteArrayInputStream(diffBuf,0,diffSize));\n  diffIn.skip(8);\n  long ctrlBlockLen=diffIn.readLong();\n  long diffBlockLen=diffIn.readLong();\n  int newsize=(int)diffIn.readLong();\n  diffIn.close();\n  InputStream in=new ByteArrayInputStream(diffBuf,0,diffSize);\n  in.skip(BSUtil.HEADER_SIZE);\n  DataInputStream ctrlBlockIn=new DataInputStream(new GZIPInputStream(in));\n  in=new ByteArrayInputStream(diffBuf,0,diffSize);\n  in.skip(ctrlBlockLen + BSUtil.HEADER_SIZE);\n  InputStream diffBlockIn=new GZIPInputStream(in);\n  in=new ByteArrayInputStream(diffBuf,0,diffSize);\n  in.skip(diffBlockLen + ctrlBlockLen + BSUtil.HEADER_SIZE);\n  InputStream extraBlockIn=new GZIPInputStream(in);\n  OutputStream outStream=new FileOutputStream(newFile);\n  try {\n    int oldpos=0;\n    int newpos=0;\n    int[] ctrl=new int[3];\n    while (newpos < newsize) {\n      for (int i=0; i <= 2; i++) {\n        ctrl[i]=ctrlBlockIn.readInt();\n      }\n      if (newpos + ctrl[0] > newsize) {\n        outStream.close();\n        return RETURN_DIFF_FILE_ERR;\n      }\n      byte[] buffer=new byte[ctrl[0]];\n      if (!BSUtil.readFromStream(diffBlockIn,buffer,0,ctrl[0])) {\n        outStream.close();\n        return RETURN_DIFF_FILE_ERR;\n      }\n      byte[] oldBuffer=new byte[ctrl[0]];\n      if (oldFile.read(oldBuffer,0,ctrl[0]) < ctrl[0]) {\n        outStream.close();\n        return RETURN_DIFF_FILE_ERR;\n      }\n      for (int i=0; i < ctrl[0]; i++) {\n        if ((oldpos + i >= 0) && (oldpos + i < oldsize)) {\n          buffer[i]+=oldBuffer[i];\n        }\n      }\n      outStream.write(buffer);\n      newpos+=ctrl[0];\n      oldpos+=ctrl[0];\n      if (newpos + ctrl[1] > newsize) {\n        outStream.close();\n        return RETURN_DIFF_FILE_ERR;\n      }\n      buffer=new byte[ctrl[1]];\n      if (!BSUtil.readFromStream(extraBlockIn,buffer,0,ctrl[1])) {\n        outStream.close();\n        return RETURN_DIFF_FILE_ERR;\n      }\n      outStream.write(buffer);\n      outStream.flush();\n      newpos+=ctrl[1];\n      oldpos+=ctrl[2];\n      oldFile.seek(oldpos);\n    }\n    ctrlBlockIn.close();\n    diffBlockIn.close();\n    extraBlockIn.close();\n  }\n  finally {\n    oldFile.close();\n    outStream.close();\n  }\n  return RETURN_SUCCESS;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 473,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 175,
        "startColumnNumber" : 24,
        "endLineNumber" : 175,
        "endColumnNumber" : 67
      },
      "nodeContext" : "(oldpos + i >= 0) && (oldpos + i < oldsize)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 103,
    "startColumnNumber" : 31,
    "endLineNumber" : 103,
    "endColumnNumber" : 38
  }, {
    "charLength" : 7,
    "startLineNumber" : 175,
    "startColumnNumber" : 59,
    "endLineNumber" : 175,
    "endColumnNumber" : 66
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 10
  } ]
}