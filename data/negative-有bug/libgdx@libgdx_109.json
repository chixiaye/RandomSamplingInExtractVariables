{
  "id" : 109,
  "expression" : "false",
  "projectName" : "libgdx@libgdx",
  "commitID" : "3485b16e8979c0141421bc80cb8831b7a0403f67",
  "filePath" : "/gdx/test/com/badlogic/gdx/math/IntersectorTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "false",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 37,
      "startColumnNumber" : 11,
      "endLineNumber" : 37,
      "endColumnNumber" : 16
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 37,
        "startColumnNumber" : 4,
        "endLineNumber" : 37,
        "endColumnNumber" : 17
      },
      "nodeContext" : "return false;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 36,
        "startColumnNumber" : 53,
        "endLineNumber" : 38,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 3,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 166,
        "startLineNumber" : 35,
        "startColumnNumber" : 3,
        "endLineNumber" : 38,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (!MathUtils.isEqual(base[b],comp[c]) || !MathUtils.isEqual(base[b + 1],comp[c + 1]) || !MathUtils.isEqual(base[b + 2],comp[c + 2])) {\n  return false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 43,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 262,
        "startLineNumber" : 32,
        "startColumnNumber" : 30,
        "endLineNumber" : 39,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int b=baseOffset + ((offset + i) * stride) % (3 * stride);\n  int c=i * stride;\n  if (!MathUtils.isEqual(base[b],comp[c]) || !MathUtils.isEqual(base[b + 1],comp[c + 1]) || !MathUtils.isEqual(base[b + 2],comp[c + 2])) {\n    return false;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 69,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 290,
        "startLineNumber" : 32,
        "startColumnNumber" : 2,
        "endLineNumber" : 39,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0; i < 3; i++) {\n  int b=baseOffset + ((offset + i) * stride) % (3 * stride);\n  int c=i * stride;\n  if (!MathUtils.isEqual(base[b],comp[c]) || !MathUtils.isEqual(base[b + 1],comp[c + 1]) || !MathUtils.isEqual(base[b + 2],comp[c + 2])) {\n    return false;\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 80,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 817,
        "startLineNumber" : 15,
        "startColumnNumber" : 96,
        "endLineNumber" : 41,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  assertTrue(stride >= 3);\n  assertTrue(base.length - baseOffset >= 9);\n  assertTrue(comp.length == 9);\n  int offset=-1;\n  for (int i=0; i < 3; i++) {\n    int b=baseOffset + i * stride;\n    if (MathUtils.isEqual(base[b],comp[0]) && MathUtils.isEqual(base[b + 1],comp[1]) && MathUtils.isEqual(base[b + 2],comp[2])) {\n      offset=i;\n      break;\n    }\n  }\n  assertTrue(\"Triangles do not have common first vertex.\",offset != -1);\n  for (int i=0; i < 3; i++) {\n    int b=baseOffset + ((offset + i) * stride) % (3 * stride);\n    int c=i * stride;\n    if (!MathUtils.isEqual(base[b],comp[c]) || !MathUtils.isEqual(base[b + 1],comp[c + 1]) || !MathUtils.isEqual(base[b + 2],comp[c + 2])) {\n      return false;\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 181,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1158,
        "startLineNumber" : 13,
        "startColumnNumber" : 1,
        "endLineNumber" : 41,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Compares two triangles for equality. Triangles must have the same winding, but may begin with different vertex. Values are epsilon compared, with default tolerance. Triangles are assumed to be valid triangles - no duplicate vertices. \n */\nprivate static boolean triangleEquals(float[] base,int baseOffset,int stride,float[] comp){\n  assertTrue(stride >= 3);\n  assertTrue(base.length - baseOffset >= 9);\n  assertTrue(comp.length == 9);\n  int offset=-1;\n  for (int i=0; i < 3; i++) {\n    int b=baseOffset + i * stride;\n    if (MathUtils.isEqual(base[b],comp[0]) && MathUtils.isEqual(base[b + 1],comp[1]) && MathUtils.isEqual(base[b + 2],comp[2])) {\n      offset=i;\n      break;\n    }\n  }\n  assertTrue(\"Triangles do not have common first vertex.\",offset != -1);\n  for (int i=0; i < 3; i++) {\n    int b=baseOffset + ((offset + i) * stride) % (3 * stride);\n    int c=i * stride;\n    if (!MathUtils.isEqual(base[b],comp[c]) || !MathUtils.isEqual(base[b + 1],comp[c + 1]) || !MathUtils.isEqual(base[b + 2],comp[c + 2])) {\n      return false;\n    }\n  }\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 203,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 37,
        "startColumnNumber" : 4,
        "endLineNumber" : 37,
        "endColumnNumber" : 17
      },
      "nodeContext" : "return false;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 37,
    "startColumnNumber" : 11,
    "endLineNumber" : 37,
    "endColumnNumber" : 16
  } ],
  "layoutRelationDataList" : [ ]
}