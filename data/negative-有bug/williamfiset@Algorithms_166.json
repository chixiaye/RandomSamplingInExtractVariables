{
  "id" : 166,
  "expression" : "i",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/test/java/com/williamfiset/algorithms/graphtheory/TravelingSalesmanProblemTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "i",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 92,
      "startColumnNumber" : 22,
      "endLineNumber" : 92,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 6,
        "startLineNumber" : 92,
        "startColumnNumber" : 22,
        "endLineNumber" : 92,
        "endColumnNumber" : 28
      },
      "nodeContext" : "i < 10",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 606,
        "startLineNumber" : 92,
        "startColumnNumber" : 6,
        "endLineNumber" : 106,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < 10; i++) {\n  double[][] dist=new double[n][n];\n  randomFillDistMatrix(dist);\n  TspDynamicProgrammingRecursive dpRecursiveSolver=new TspDynamicProgrammingRecursive(dist);\n  TspDynamicProgrammingIterative dpIterativeSolver=new TspDynamicProgrammingIterative(dist);\n  double dp1=dpRecursiveSolver.getTourCost();\n  double dp2=dpIterativeSolver.getTourCost();\n  double bf=TspBruteForce.computeTourCost(TspBruteForce.tsp(dist),dist);\n  assertThat(dp1).isWithin(EPS).of(bf);\n  assertThat(dp2).isWithin(EPS).of(bf);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 94,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 620,
        "startLineNumber" : 91,
        "startColumnNumber" : 33,
        "endLineNumber" : 107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  for (int i=0; i < 10; i++) {\n    double[][] dist=new double[n][n];\n    randomFillDistMatrix(dist);\n    TspDynamicProgrammingRecursive dpRecursiveSolver=new TspDynamicProgrammingRecursive(dist);\n    TspDynamicProgrammingIterative dpIterativeSolver=new TspDynamicProgrammingIterative(dist);\n    double dp1=dpRecursiveSolver.getTourCost();\n    double dp2=dpIterativeSolver.getTourCost();\n    double bf=TspBruteForce.computeTourCost(TspBruteForce.tsp(dist),dist);\n    assertThat(dp1).isWithin(EPS).of(bf);\n    assertThat(dp2).isWithin(EPS).of(bf);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 95,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 649,
        "startLineNumber" : 91,
        "startColumnNumber" : 4,
        "endLineNumber" : 107,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int n=3; n <= 9; n++) {\n  for (int i=0; i < 10; i++) {\n    double[][] dist=new double[n][n];\n    randomFillDistMatrix(dist);\n    TspDynamicProgrammingRecursive dpRecursiveSolver=new TspDynamicProgrammingRecursive(dist);\n    TspDynamicProgrammingIterative dpIterativeSolver=new TspDynamicProgrammingIterative(dist);\n    double dp1=dpRecursiveSolver.getTourCost();\n    double dp2=dpIterativeSolver.getTourCost();\n    double bf=TspBruteForce.computeTourCost(TspBruteForce.tsp(dist),dist);\n    assertThat(dp1).isWithin(EPS).of(bf);\n    assertThat(dp2).isWithin(EPS).of(bf);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 106,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 659,
        "startLineNumber" : 90,
        "startColumnNumber" : 27,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (int n=3; n <= 9; n++) {\n    for (int i=0; i < 10; i++) {\n      double[][] dist=new double[n][n];\n      randomFillDistMatrix(dist);\n      TspDynamicProgrammingRecursive dpRecursiveSolver=new TspDynamicProgrammingRecursive(dist);\n      TspDynamicProgrammingIterative dpIterativeSolver=new TspDynamicProgrammingIterative(dist);\n      double dp1=dpRecursiveSolver.getTourCost();\n      double dp2=dpIterativeSolver.getTourCost();\n      double bf=TspBruteForce.computeTourCost(TspBruteForce.tsp(dist),dist);\n      assertThat(dp1).isWithin(EPS).of(bf);\n      assertThat(dp2).isWithin(EPS).of(bf);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 107,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 692,
        "startLineNumber" : 89,
        "startColumnNumber" : 2,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testDpVsBf(){\n  for (int n=3; n <= 9; n++) {\n    for (int i=0; i < 10; i++) {\n      double[][] dist=new double[n][n];\n      randomFillDistMatrix(dist);\n      TspDynamicProgrammingRecursive dpRecursiveSolver=new TspDynamicProgrammingRecursive(dist);\n      TspDynamicProgrammingIterative dpIterativeSolver=new TspDynamicProgrammingIterative(dist);\n      double dp1=dpRecursiveSolver.getTourCost();\n      double dp2=dpIterativeSolver.getTourCost();\n      double bf=TspBruteForce.computeTourCost(TspBruteForce.tsp(dist),dist);\n      assertThat(dp1).isWithin(EPS).of(bf);\n      assertThat(dp2).isWithin(EPS).of(bf);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 113,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 6,
        "startLineNumber" : 92,
        "startColumnNumber" : 22,
        "endLineNumber" : 92,
        "endColumnNumber" : 28
      },
      "nodeContext" : "i < 10",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 92,
    "startColumnNumber" : 22,
    "endLineNumber" : 92,
    "endColumnNumber" : 23
  } ],
  "layoutRelationDataList" : [ ]
}