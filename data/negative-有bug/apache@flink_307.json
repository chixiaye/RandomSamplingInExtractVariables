{
  "id" : 307,
  "expression" : "Math.min(left,runLenDecoder.currentCount)",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-formats/flink-parquet/src/main/java/org/apache/flink/formats/parquet/vector/reader/BooleanColumnReader.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Math.min(left,runLenDecoder.currentCount)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 42,
      "startLineNumber" : 68,
      "startColumnNumber" : 20,
      "endLineNumber" : 68,
      "endColumnNumber" : 62
    },
    "astNodeNumber" : 7,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 68,
        "startColumnNumber" : 16,
        "endLineNumber" : 68,
        "endColumnNumber" : 62
      },
      "nodeContext" : "n=Math.min(left,runLenDecoder.currentCount)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 68,
        "startColumnNumber" : 12,
        "endLineNumber" : 68,
        "endColumnNumber" : 63
      },
      "nodeContext" : "int n=Math.min(left,runLenDecoder.currentCount);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1169,
        "startLineNumber" : 64,
        "startColumnNumber" : 25,
        "endLineNumber" : 93,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (runLenDecoder.currentCount == 0) {\n    runLenDecoder.readNextGroup();\n  }\n  int n=Math.min(left,runLenDecoder.currentCount);\nswitch (runLenDecoder.mode) {\ncase RLE:    if (runLenDecoder.currentValue == maxDefLevel) {\n      for (int i=0; i < n; i++) {\n        column.setBoolean(rowId + i,readBoolean());\n      }\n    }\n else {\n      column.setNulls(rowId,n);\n    }\n  break;\ncase PACKED:for (int i=0; i < n; ++i) {\n  if (runLenDecoder.currentBuffer[runLenDecoder.currentBufferIdx++] == maxDefLevel) {\n    column.setBoolean(rowId + i,readBoolean());\n  }\n else {\n    column.setNullAt(rowId + i);\n  }\n}\nbreak;\n}\nrowId+=n;\nleft-=n;\nrunLenDecoder.currentCount-=n;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 123,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1186,
        "startLineNumber" : 64,
        "startColumnNumber" : 8,
        "endLineNumber" : 93,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (left > 0) {\n  if (runLenDecoder.currentCount == 0) {\n    runLenDecoder.readNextGroup();\n  }\n  int n=Math.min(left,runLenDecoder.currentCount);\nswitch (runLenDecoder.mode) {\ncase RLE:    if (runLenDecoder.currentValue == maxDefLevel) {\n      for (int i=0; i < n; i++) {\n        column.setBoolean(rowId + i,readBoolean());\n      }\n    }\n else {\n      column.setNulls(rowId,n);\n    }\n  break;\ncase PACKED:for (int i=0; i < n; ++i) {\n  if (runLenDecoder.currentBuffer[runLenDecoder.currentBufferIdx++] == maxDefLevel) {\n    column.setBoolean(rowId + i,readBoolean());\n  }\n else {\n    column.setNullAt(rowId + i);\n  }\n}\nbreak;\n}\nrowId+=n;\nleft-=n;\nrunLenDecoder.currentCount-=n;\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 127,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1226,
        "startLineNumber" : 62,
        "startColumnNumber" : 79,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int left=num;\n  while (left > 0) {\n    if (runLenDecoder.currentCount == 0) {\n      runLenDecoder.readNextGroup();\n    }\n    int n=Math.min(left,runLenDecoder.currentCount);\nswitch (runLenDecoder.mode) {\ncase RLE:      if (runLenDecoder.currentValue == maxDefLevel) {\n        for (int i=0; i < n; i++) {\n          column.setBoolean(rowId + i,readBoolean());\n        }\n      }\n else {\n        column.setNulls(rowId,n);\n      }\n    break;\ncase PACKED:  for (int i=0; i < n; ++i) {\n    if (runLenDecoder.currentBuffer[runLenDecoder.currentBufferIdx++] == maxDefLevel) {\n      column.setBoolean(rowId + i,readBoolean());\n    }\n else {\n      column.setNullAt(rowId + i);\n    }\n  }\nbreak;\n}\nrowId+=n;\nleft-=n;\nrunLenDecoder.currentCount-=n;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 133,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1315,
        "startLineNumber" : 61,
        "startColumnNumber" : 4,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override protected void readBatch(int rowId,int num,WritableBooleanVector column){\n  int left=num;\n  while (left > 0) {\n    if (runLenDecoder.currentCount == 0) {\n      runLenDecoder.readNextGroup();\n    }\n    int n=Math.min(left,runLenDecoder.currentCount);\nswitch (runLenDecoder.mode) {\ncase RLE:      if (runLenDecoder.currentValue == maxDefLevel) {\n        for (int i=0; i < n; i++) {\n          column.setBoolean(rowId + i,readBoolean());\n        }\n      }\n else {\n        column.setNulls(rowId,n);\n      }\n    break;\ncase PACKED:  for (int i=0; i < n; ++i) {\n    if (runLenDecoder.currentBuffer[runLenDecoder.currentBufferIdx++] == maxDefLevel) {\n      column.setBoolean(rowId + i,readBoolean());\n    }\n else {\n      column.setNullAt(rowId + i);\n    }\n  }\nbreak;\n}\nrowId+=n;\nleft-=n;\nrunLenDecoder.currentCount-=n;\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 149,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 68,
        "startColumnNumber" : 12,
        "endLineNumber" : 68,
        "endColumnNumber" : 63
      },
      "nodeContext" : "int n=Math.min(left,runLenDecoder.currentCount);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 5,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 42,
    "startLineNumber" : 68,
    "startColumnNumber" : 20,
    "endLineNumber" : 68,
    "endColumnNumber" : 62
  } ],
  "layoutRelationDataList" : [ ]
}