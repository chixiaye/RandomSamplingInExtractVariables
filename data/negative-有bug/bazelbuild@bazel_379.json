{
  "id" : 379,
  "expression" : "actionOwner.getExecutionPlatform() != null",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/main/java/com/google/devtools/build/lib/skyframe/actiongraph/v2/ActionGraphDump.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "actionOwner.getExecutionPlatform() != null",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 42,
      "startLineNumber" : 207,
      "startColumnNumber" : 10,
      "endLineNumber" : 207,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 156,
        "startLineNumber" : 207,
        "startColumnNumber" : 6,
        "endLineNumber" : 209,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (actionOwner.getExecutionPlatform() != null) {\n  actionBuilder.setExecutionPlatform(actionOwner.getExecutionPlatform().label().toString());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 867,
        "startLineNumber" : 204,
        "startColumnNumber" : 29,
        "endLineNumber" : 220,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  BuildEvent event=actionOwner.getConfiguration();\n  actionBuilder.setConfigurationId(knownConfigurations.dataToIdAndStreamOutputProto(event));\n  if (actionOwner.getExecutionPlatform() != null) {\n    actionBuilder.setExecutionPlatform(actionOwner.getExecutionPlatform().label().toString());\n  }\n  for (  AspectDescriptor aspectDescriptor : actionOwner.getAspectDescriptors().reverse()) {\n    actionBuilder.addAspectDescriptorIds(knownAspectDescriptors.dataToIdAndStreamOutputProto(aspectDescriptor));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 54,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 892,
        "startLineNumber" : 204,
        "startColumnNumber" : 4,
        "endLineNumber" : 220,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (actionOwner != null) {\n  BuildEvent event=actionOwner.getConfiguration();\n  actionBuilder.setConfigurationId(knownConfigurations.dataToIdAndStreamOutputProto(event));\n  if (actionOwner.getExecutionPlatform() != null) {\n    actionBuilder.setExecutionPlatform(actionOwner.getExecutionPlatform().label().toString());\n  }\n  for (  AspectDescriptor aspectDescriptor : actionOwner.getAspectDescriptors().reverse()) {\n    actionBuilder.addAspectDescriptorIds(knownAspectDescriptors.dataToIdAndStreamOutputProto(aspectDescriptor));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 58,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5525,
        "startLineNumber" : 123,
        "startColumnNumber" : 78,
        "endLineNumber" : 249,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (includeParamFiles && (action instanceof ParameterFileWriteAction)) {\n    ParameterFileWriteAction parameterFileWriteAction=(ParameterFileWriteAction)action;\n    Iterable<String> fileContent=parameterFileWriteAction.getArguments();\n    String paramFileExecPath=action.getPrimaryOutput().getExecPathString();\n    getParamFileNameToContentMap().put(paramFileExecPath,fileContent);\n  }\n  if (actionFilters != null && !AqueryUtils.matchesAqueryFilters(action,actionFilters)) {\n    return;\n  }\n  configuredTarget=configuredTarget.getActual();\n  Preconditions.checkState(configuredTarget instanceof RuleConfiguredTarget);\n  Pair<String,String> targetIdentifier=new Pair<>(configuredTarget.getLabel().toString(),((RuleConfiguredTarget)configuredTarget).getRuleClassString());\n  AnalysisProtosV2.Action.Builder actionBuilder=AnalysisProtosV2.Action.newBuilder().setMnemonic(action.getMnemonic()).setTargetId(knownTargets.dataToIdAndStreamOutputProto(targetIdentifier));\n  if (action instanceof ActionExecutionMetadata) {\n    ActionExecutionMetadata actionExecutionMetadata=(ActionExecutionMetadata)action;\n    actionBuilder.setActionKey(actionExecutionMetadata.getKey(getActionKeyContext(),null)).setDiscoversInputs(actionExecutionMetadata.discoversInputs());\n  }\n  if (action instanceof SpawnAction) {\n    SpawnAction spawnAction=(SpawnAction)action;\n    Map<String,String> fixedEnvironment=spawnAction.getEnvironment().getFixedEnv().toMap();\n    for (    Map.Entry<String,String> environmentVariable : fixedEnvironment.entrySet()) {\n      actionBuilder.addEnvironmentVariables(AnalysisProtosV2.KeyValuePair.newBuilder().setKey(environmentVariable.getKey()).setValue(environmentVariable.getValue()).build());\n    }\n  }\n  if (includeActionCmdLine && action instanceof CommandAction) {\n    CommandAction commandAction=(CommandAction)action;\n    actionBuilder.addAllArguments(commandAction.getArguments());\n  }\n  if (includeParamFiles) {\n    for (    Artifact input : action.getInputs().toList()) {\n      String inputFileExecPath=input.getExecPathString();\n      if (getParamFileNameToContentMap().containsKey(inputFileExecPath)) {\n        AnalysisProtosV2.ParamFile paramFile=AnalysisProtosV2.ParamFile.newBuilder().setExecPath(inputFileExecPath).addAllArguments(getParamFileNameToContentMap().get(inputFileExecPath)).build();\n        actionBuilder.addParamFiles(paramFile);\n      }\n    }\n  }\n  Map<String,String> executionInfo=action.getExecutionInfo();\n  for (  Map.Entry<String,String> info : executionInfo.entrySet()) {\n    actionBuilder.addExecutionInfo(AnalysisProtosV2.KeyValuePair.newBuilder().setKey(info.getKey()).setValue(info.getValue()));\n  }\n  ActionOwner actionOwner=action.getOwner();\n  if (actionOwner != null) {\n    BuildEvent event=actionOwner.getConfiguration();\n    actionBuilder.setConfigurationId(knownConfigurations.dataToIdAndStreamOutputProto(event));\n    if (actionOwner.getExecutionPlatform() != null) {\n      actionBuilder.setExecutionPlatform(actionOwner.getExecutionPlatform().label().toString());\n    }\n    for (    AspectDescriptor aspectDescriptor : actionOwner.getAspectDescriptors().reverse()) {\n      actionBuilder.addAspectDescriptorIds(knownAspectDescriptors.dataToIdAndStreamOutputProto(aspectDescriptor));\n    }\n  }\n  if (includeArtifacts) {\n    NestedSet<Artifact> inputs=action.getInputs();\n    if (!inputs.isEmpty()) {\n      actionBuilder.addInputDepSetIds(knownNestedSets.dataToIdAndStreamOutputProto(inputs));\n    }\n    for (    Artifact artifact : action.getOutputs()) {\n      actionBuilder.addOutputIds(knownArtifacts.dataToIdAndStreamOutputProto(artifact));\n    }\n    actionBuilder.setPrimaryOutputId(knownArtifacts.dataToIdAndStreamOutputProto(action.getPrimaryOutput()));\n  }\n  if (action instanceof TemplateExpansionAction) {\n    actionBuilder.setTemplateContent(((TemplateExpansionAction)action).getTemplate().toString());\n    for (    Substitution substitution : ((TemplateExpansionAction)action).getSubstitutions()) {\n      actionBuilder.addSubstitutions(AnalysisProtosV2.KeyValuePair.newBuilder().setKey(substitution.getKey()).setValue(substitution.getValue()));\n    }\n  }\n  aqueryOutputHandler.outputAction(actionBuilder.build());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 533,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5699,
        "startLineNumber" : 122,
        "startColumnNumber" : 2,
        "endLineNumber" : 249,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void dumpSingleAction(ConfiguredTarget configuredTarget,ActionAnalysisMetadata action) throws CommandLineExpansionException, InterruptedException, IOException {\n  if (includeParamFiles && (action instanceof ParameterFileWriteAction)) {\n    ParameterFileWriteAction parameterFileWriteAction=(ParameterFileWriteAction)action;\n    Iterable<String> fileContent=parameterFileWriteAction.getArguments();\n    String paramFileExecPath=action.getPrimaryOutput().getExecPathString();\n    getParamFileNameToContentMap().put(paramFileExecPath,fileContent);\n  }\n  if (actionFilters != null && !AqueryUtils.matchesAqueryFilters(action,actionFilters)) {\n    return;\n  }\n  configuredTarget=configuredTarget.getActual();\n  Preconditions.checkState(configuredTarget instanceof RuleConfiguredTarget);\n  Pair<String,String> targetIdentifier=new Pair<>(configuredTarget.getLabel().toString(),((RuleConfiguredTarget)configuredTarget).getRuleClassString());\n  AnalysisProtosV2.Action.Builder actionBuilder=AnalysisProtosV2.Action.newBuilder().setMnemonic(action.getMnemonic()).setTargetId(knownTargets.dataToIdAndStreamOutputProto(targetIdentifier));\n  if (action instanceof ActionExecutionMetadata) {\n    ActionExecutionMetadata actionExecutionMetadata=(ActionExecutionMetadata)action;\n    actionBuilder.setActionKey(actionExecutionMetadata.getKey(getActionKeyContext(),null)).setDiscoversInputs(actionExecutionMetadata.discoversInputs());\n  }\n  if (action instanceof SpawnAction) {\n    SpawnAction spawnAction=(SpawnAction)action;\n    Map<String,String> fixedEnvironment=spawnAction.getEnvironment().getFixedEnv().toMap();\n    for (    Map.Entry<String,String> environmentVariable : fixedEnvironment.entrySet()) {\n      actionBuilder.addEnvironmentVariables(AnalysisProtosV2.KeyValuePair.newBuilder().setKey(environmentVariable.getKey()).setValue(environmentVariable.getValue()).build());\n    }\n  }\n  if (includeActionCmdLine && action instanceof CommandAction) {\n    CommandAction commandAction=(CommandAction)action;\n    actionBuilder.addAllArguments(commandAction.getArguments());\n  }\n  if (includeParamFiles) {\n    for (    Artifact input : action.getInputs().toList()) {\n      String inputFileExecPath=input.getExecPathString();\n      if (getParamFileNameToContentMap().containsKey(inputFileExecPath)) {\n        AnalysisProtosV2.ParamFile paramFile=AnalysisProtosV2.ParamFile.newBuilder().setExecPath(inputFileExecPath).addAllArguments(getParamFileNameToContentMap().get(inputFileExecPath)).build();\n        actionBuilder.addParamFiles(paramFile);\n      }\n    }\n  }\n  Map<String,String> executionInfo=action.getExecutionInfo();\n  for (  Map.Entry<String,String> info : executionInfo.entrySet()) {\n    actionBuilder.addExecutionInfo(AnalysisProtosV2.KeyValuePair.newBuilder().setKey(info.getKey()).setValue(info.getValue()));\n  }\n  ActionOwner actionOwner=action.getOwner();\n  if (actionOwner != null) {\n    BuildEvent event=actionOwner.getConfiguration();\n    actionBuilder.setConfigurationId(knownConfigurations.dataToIdAndStreamOutputProto(event));\n    if (actionOwner.getExecutionPlatform() != null) {\n      actionBuilder.setExecutionPlatform(actionOwner.getExecutionPlatform().label().toString());\n    }\n    for (    AspectDescriptor aspectDescriptor : actionOwner.getAspectDescriptors().reverse()) {\n      actionBuilder.addAspectDescriptorIds(knownAspectDescriptors.dataToIdAndStreamOutputProto(aspectDescriptor));\n    }\n  }\n  if (includeArtifacts) {\n    NestedSet<Artifact> inputs=action.getInputs();\n    if (!inputs.isEmpty()) {\n      actionBuilder.addInputDepSetIds(knownNestedSets.dataToIdAndStreamOutputProto(inputs));\n    }\n    for (    Artifact artifact : action.getOutputs()) {\n      actionBuilder.addOutputIds(knownArtifacts.dataToIdAndStreamOutputProto(artifact));\n    }\n    actionBuilder.setPrimaryOutputId(knownArtifacts.dataToIdAndStreamOutputProto(action.getPrimaryOutput()));\n  }\n  if (action instanceof TemplateExpansionAction) {\n    actionBuilder.setTemplateContent(((TemplateExpansionAction)action).getTemplate().toString());\n    for (    Substitution substitution : ((TemplateExpansionAction)action).getSubstitutions()) {\n      actionBuilder.addSubstitutions(AnalysisProtosV2.KeyValuePair.newBuilder().setKey(substitution.getKey()).setValue(substitution.getValue()));\n    }\n  }\n  aqueryOutputHandler.outputAction(actionBuilder.build());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 551,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 156,
        "startLineNumber" : 207,
        "startColumnNumber" : 6,
        "endLineNumber" : 209,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (actionOwner.getExecutionPlatform() != null) {\n  actionBuilder.setExecutionPlatform(actionOwner.getExecutionPlatform().label().toString());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 8
    },
    "tokenLength" : 4,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 42,
    "startLineNumber" : 207,
    "startColumnNumber" : 10,
    "endLineNumber" : 207,
    "endColumnNumber" : 52
  } ],
  "layoutRelationDataList" : [ ]
}