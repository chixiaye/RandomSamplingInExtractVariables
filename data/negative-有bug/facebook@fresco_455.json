{
  "id" : 455,
  "expression" : "mInputBuf",
  "projectName" : "facebook@fresco",
  "commitID" : "22468d5b520df9b51572a6388a34e7f6bd5a22c1",
  "filePath" : "/imagepipeline-native/src/test/java/com/facebook/imagepipeline/platform/KitKatPurgeableDecoderTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "mInputBuf",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 111,
      "startColumnNumber" : 57,
      "endLineNumber" : 111,
      "endColumnNumber" : 66
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 111,
        "startColumnNumber" : 29,
        "endLineNumber" : 111,
        "endColumnNumber" : 76
      },
      "nodeContext" : "new TrivialPooledByteBuffer(mInputBuf,POINTER)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 111,
        "startColumnNumber" : 21,
        "endLineNumber" : 111,
        "endColumnNumber" : 76
      },
      "nodeContext" : "input=new TrivialPooledByteBuffer(mInputBuf,POINTER)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 111,
        "startColumnNumber" : 4,
        "endLineNumber" : 111,
        "endColumnNumber" : 77
      },
      "nodeContext" : "PooledByteBuffer input=new TrivialPooledByteBuffer(mInputBuf,POINTER);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1310,
        "startLineNumber" : 91,
        "startColumnNumber" : 22,
        "endLineNumber" : 121,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  mFlexByteArrayPool=mock(FlexByteArrayPool.class);\n  mBitmap=MockBitmapFactory.create();\n  mBitmapCounter=new BitmapCounter(MAX_BITMAP_COUNT,MAX_BITMAP_SIZE);\n  mockStatic(DalvikPurgeableDecoder.class);\n  when(DalvikPurgeableDecoder.getBitmapFactoryOptions(anyInt(),any(Bitmap.Config.class))).thenCallRealMethod();\n  when(DalvikPurgeableDecoder.endsWithEOI(any(CloseableReference.class),anyInt())).thenCallRealMethod();\n  mockStatic(BitmapCounterProvider.class);\n  when(BitmapCounterProvider.get()).thenReturn(mBitmapCounter);\n  mockStatic(BitmapFactory.class);\n  when(BitmapFactory.decodeByteArray(any(byte[].class),anyInt(),anyInt(),any(BitmapFactory.Options.class))).thenReturn(mBitmap);\n  mInputBuf=new byte[LENGTH];\n  PooledByteBuffer input=new TrivialPooledByteBuffer(mInputBuf,POINTER);\n  mByteBufferRef=CloseableReference.of(input);\n  mEncodedImage=new EncodedImage(mByteBufferRef);\n  mDecodeBuf=new byte[LENGTH + 2];\n  mDecodeBufRef=CloseableReference.of(mDecodeBuf,mock(ResourceReleaser.class));\n  when(mFlexByteArrayPool.get(Integer.valueOf(LENGTH))).thenReturn(mDecodeBufRef);\n  mockStatic(Bitmaps.class);\n  mKitKatPurgeableDecoder=new KitKatPurgeableDecoder(mFlexByteArrayPool);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 188,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1340,
        "startLineNumber" : 90,
        "startColumnNumber" : 2,
        "endLineNumber" : 121,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Before public void setUp(){\n  mFlexByteArrayPool=mock(FlexByteArrayPool.class);\n  mBitmap=MockBitmapFactory.create();\n  mBitmapCounter=new BitmapCounter(MAX_BITMAP_COUNT,MAX_BITMAP_SIZE);\n  mockStatic(DalvikPurgeableDecoder.class);\n  when(DalvikPurgeableDecoder.getBitmapFactoryOptions(anyInt(),any(Bitmap.Config.class))).thenCallRealMethod();\n  when(DalvikPurgeableDecoder.endsWithEOI(any(CloseableReference.class),anyInt())).thenCallRealMethod();\n  mockStatic(BitmapCounterProvider.class);\n  when(BitmapCounterProvider.get()).thenReturn(mBitmapCounter);\n  mockStatic(BitmapFactory.class);\n  when(BitmapFactory.decodeByteArray(any(byte[].class),anyInt(),anyInt(),any(BitmapFactory.Options.class))).thenReturn(mBitmap);\n  mInputBuf=new byte[LENGTH];\n  PooledByteBuffer input=new TrivialPooledByteBuffer(mInputBuf,POINTER);\n  mByteBufferRef=CloseableReference.of(input);\n  mEncodedImage=new EncodedImage(mByteBufferRef);\n  mDecodeBuf=new byte[LENGTH + 2];\n  mDecodeBufRef=CloseableReference.of(mDecodeBuf,mock(ResourceReleaser.class));\n  when(mFlexByteArrayPool.get(Integer.valueOf(LENGTH))).thenReturn(mDecodeBufRef);\n  mockStatic(Bitmaps.class);\n  mKitKatPurgeableDecoder=new KitKatPurgeableDecoder(mFlexByteArrayPool);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 194,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 111,
        "startColumnNumber" : 4,
        "endLineNumber" : 111,
        "endColumnNumber" : 77
      },
      "nodeContext" : "PooledByteBuffer input=new TrivialPooledByteBuffer(mInputBuf,POINTER);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "byte[]"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 111,
    "startColumnNumber" : 57,
    "endLineNumber" : 111,
    "endColumnNumber" : 66
  } ],
  "layoutRelationDataList" : [ ]
}