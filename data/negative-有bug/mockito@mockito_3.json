{
  "id" : 3,
  "expression" : "j",
  "projectName" : "mockito@mockito",
  "commitID" : "7f036eb9ed79444adcec3a6c635870222b109e50",
  "filePath" : "/subprojects/memory-test/src/test/java/org/mockito/memorytest/ShouldNotStarveMemoryOnLargeStackTraceInvocationsTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "j",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 47,
      "startColumnNumber" : 28,
      "endLineNumber" : 47,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 47,
        "startColumnNumber" : 28,
        "endLineNumber" : 47,
        "endColumnNumber" : 64
      },
      "nodeContext" : "j < INVOCATIONS_ON_STACK_TRACE_LEVEL",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 111,
        "startLineNumber" : 47,
        "startColumnNumber" : 12,
        "endLineNumber" : 49,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int j=0; j < INVOCATIONS_ON_STACK_TRACE_LEVEL; j++) {\n  mock.calculate(j);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 216,
        "startLineNumber" : 46,
        "startColumnNumber" : 19,
        "endLineNumber" : 52,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (int j=0; j < INVOCATIONS_ON_STACK_TRACE_LEVEL; j++) {\n    mock.calculate(j);\n  }\n  return mock.calculate(performComputationForDepth(mock,i - 1));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 28,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 227,
        "startLineNumber" : 46,
        "startColumnNumber" : 8,
        "endLineNumber" : 52,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (i > 0) {\n  for (int j=0; j < INVOCATIONS_ON_STACK_TRACE_LEVEL; j++) {\n    mock.calculate(j);\n  }\n  return mock.calculate(performComputationForDepth(mock,i - 1));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 32,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 266,
        "startLineNumber" : 45,
        "startColumnNumber" : 62,
        "endLineNumber" : 55,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (i > 0) {\n    for (int j=0; j < INVOCATIONS_ON_STACK_TRACE_LEVEL; j++) {\n      mock.calculate(j);\n    }\n    return mock.calculate(performComputationForDepth(mock,i - 1));\n  }\n  return 1;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 35,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 324,
        "startLineNumber" : 45,
        "startColumnNumber" : 4,
        "endLineNumber" : 55,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private int performComputationForDepth(Dummy mock,int i){\n  if (i > 0) {\n    for (int j=0; j < INVOCATIONS_ON_STACK_TRACE_LEVEL; j++) {\n      mock.calculate(j);\n    }\n    return mock.calculate(performComputationForDepth(mock,i - 1));\n  }\n  return 1;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 46,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 47,
        "startColumnNumber" : 28,
        "endLineNumber" : 47,
        "endColumnNumber" : 64
      },
      "nodeContext" : "j < INVOCATIONS_ON_STACK_TRACE_LEVEL",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "j",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 48,
      "startColumnNumber" : 31,
      "endLineNumber" : 48,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 48,
        "startColumnNumber" : 16,
        "endLineNumber" : 48,
        "endColumnNumber" : 33
      },
      "nodeContext" : "mock.calculate(j)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 48,
        "startColumnNumber" : 16,
        "endLineNumber" : 48,
        "endColumnNumber" : 34
      },
      "nodeContext" : "mock.calculate(j);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 47,
        "startColumnNumber" : 71,
        "endLineNumber" : 49,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  mock.calculate(j);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 111,
        "startLineNumber" : 47,
        "startColumnNumber" : 12,
        "endLineNumber" : 49,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int j=0; j < INVOCATIONS_ON_STACK_TRACE_LEVEL; j++) {\n  mock.calculate(j);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 216,
        "startLineNumber" : 46,
        "startColumnNumber" : 19,
        "endLineNumber" : 52,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (int j=0; j < INVOCATIONS_ON_STACK_TRACE_LEVEL; j++) {\n    mock.calculate(j);\n  }\n  return mock.calculate(performComputationForDepth(mock,i - 1));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 28,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 227,
        "startLineNumber" : 46,
        "startColumnNumber" : 8,
        "endLineNumber" : 52,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (i > 0) {\n  for (int j=0; j < INVOCATIONS_ON_STACK_TRACE_LEVEL; j++) {\n    mock.calculate(j);\n  }\n  return mock.calculate(performComputationForDepth(mock,i - 1));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 32,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 266,
        "startLineNumber" : 45,
        "startColumnNumber" : 62,
        "endLineNumber" : 55,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (i > 0) {\n    for (int j=0; j < INVOCATIONS_ON_STACK_TRACE_LEVEL; j++) {\n      mock.calculate(j);\n    }\n    return mock.calculate(performComputationForDepth(mock,i - 1));\n  }\n  return 1;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 35,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 324,
        "startLineNumber" : 45,
        "startColumnNumber" : 4,
        "endLineNumber" : 55,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private int performComputationForDepth(Dummy mock,int i){\n  if (i > 0) {\n    for (int j=0; j < INVOCATIONS_ON_STACK_TRACE_LEVEL; j++) {\n      mock.calculate(j);\n    }\n    return mock.calculate(performComputationForDepth(mock,i - 1));\n  }\n  return 1;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 46,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 48,
        "startColumnNumber" : 16,
        "endLineNumber" : 48,
        "endColumnNumber" : 34
      },
      "nodeContext" : "mock.calculate(j);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 47,
    "startColumnNumber" : 28,
    "endLineNumber" : 47,
    "endColumnNumber" : 29
  }, {
    "charLength" : 1,
    "startLineNumber" : 48,
    "startColumnNumber" : 31,
    "endLineNumber" : 48,
    "endColumnNumber" : 32
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}