{
  "id" : 17,
  "expression" : "nl",
  "projectName" : "Konloch@bytecode-viewer",
  "commitID" : "9ab8ec7f8c061fb1d9b1db3e901034d162a211ff",
  "filePath" : "/src/main/java/the/bytecode/club/bytecodeviewer/decompilers/impl/JADXDecompiler.java",
  "occurrences" : 6,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "nl",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 80,
      "startColumnNumber" : 64,
      "endLineNumber" : 80,
      "endColumnNumber" : 66
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 80,
        "startColumnNumber" : 24,
        "endLineNumber" : 80,
        "endColumnNumber" : 76
      },
      "nodeContext" : "\"Bytecode Viewer Version: \" + VERSION + nl+ nl+ sw",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 80,
        "startColumnNumber" : 12,
        "endLineNumber" : 80,
        "endColumnNumber" : 76
      },
      "nodeContext" : "exception=\"Bytecode Viewer Version: \" + VERSION + nl+ nl+ sw",
      "nodeType" : "Assignment",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 80,
        "startColumnNumber" : 12,
        "endLineNumber" : 80,
        "endColumnNumber" : 77
      },
      "nodeContext" : "exception=\"Bytecode Viewer Version: \" + VERSION + nl+ nl+ sw;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 224,
        "startLineNumber" : 76,
        "startColumnNumber" : 51,
        "endLineNumber" : 81,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  StringWriter sw=new StringWriter();\n  e.printStackTrace(new PrintWriter(sw));\n  e.printStackTrace();\n  exception=\"Bytecode Viewer Version: \" + VERSION + nl+ nl+ sw;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 30,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 265,
        "startLineNumber" : 76,
        "startColumnNumber" : 10,
        "endLineNumber" : 81,
        "endColumnNumber" : 9
      },
      "nodeContext" : "catch (StackOverflowError|Exception e) {\n  StringWriter sw=new StringWriter();\n  e.printStackTrace(new PrintWriter(sw));\n  e.printStackTrace();\n  exception=\"Bytecode Viewer Version: \" + VERSION + nl+ nl+ sw;\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 38,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 637,
        "startLineNumber" : 65,
        "startColumnNumber" : 8,
        "endLineNumber" : 81,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  JadxArgs args=new JadxArgs();\n  args.getInputFiles().add(tempClass);\n  args.setOutDir(fuckery);\n  args.setOutDirSrc(fuckery);\n  args.setOutDirRes(fuckery);\n  JadxDecompiler jadx=new JadxDecompiler(args);\n  jadx.load();\n  jadx.saveSources();\n}\n catch (StackOverflowError|Exception e) {\n  StringWriter sw=new StringWriter();\n  e.printStackTrace(new PrintWriter(sw));\n  e.printStackTrace();\n  exception=\"Bytecode Viewer Version: \" + VERSION + nl+ nl+ sw;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 87,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1557,
        "startLineNumber" : 49,
        "startColumnNumber" : 61,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String fileStart=tempDirectory + fs;\n  String exception=\"\";\n  final File tempClass=new File(MiscUtils.getUniqueName(fileStart,\".class\") + \".class\");\n  try {\n    final FileOutputStream fos=new FileOutputStream(tempClass);\n    fos.write(b);\n    fos.close();\n  }\n catch (  final IOException e) {\n    BytecodeViewer.handleException(e);\n  }\n  File fuckery=new File(fuckery(fileStart));\n  try {\n    JadxArgs args=new JadxArgs();\n    args.getInputFiles().add(tempClass);\n    args.setOutDir(fuckery);\n    args.setOutDirSrc(fuckery);\n    args.setOutDirRes(fuckery);\n    JadxDecompiler jadx=new JadxDecompiler(args);\n    jadx.load();\n    jadx.saveSources();\n  }\n catch (  StackOverflowError|Exception e) {\n    StringWriter sw=new StringWriter();\n    e.printStackTrace(new PrintWriter(sw));\n    e.printStackTrace();\n    exception=\"Bytecode Viewer Version: \" + VERSION + nl+ nl+ sw;\n  }\n  tempClass.delete();\n  if (fuckery.exists())   return findFile(Objects.requireNonNull(fuckery.listFiles()));\n  if (exception.isEmpty())   exception=\"Decompiled source file not found!\";\n  return JADX + \" \" + ERROR+ \"! \"+ ExceptionUI.SEND_STACKTRACE_TO+ nl+ nl+ TranslatedStrings.SUGGESTED_FIX_DECOMPILER_ERROR+ nl+ nl+ exception;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1628,
        "startLineNumber" : 48,
        "startColumnNumber" : 4,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public String decompileClassNode(ClassNode cn,byte[] b){\n  String fileStart=tempDirectory + fs;\n  String exception=\"\";\n  final File tempClass=new File(MiscUtils.getUniqueName(fileStart,\".class\") + \".class\");\n  try {\n    final FileOutputStream fos=new FileOutputStream(tempClass);\n    fos.write(b);\n    fos.close();\n  }\n catch (  final IOException e) {\n    BytecodeViewer.handleException(e);\n  }\n  File fuckery=new File(fuckery(fileStart));\n  try {\n    JadxArgs args=new JadxArgs();\n    args.getInputFiles().add(tempClass);\n    args.setOutDir(fuckery);\n    args.setOutDirSrc(fuckery);\n    args.setOutDirRes(fuckery);\n    JadxDecompiler jadx=new JadxDecompiler(args);\n    jadx.load();\n    jadx.saveSources();\n  }\n catch (  StackOverflowError|Exception e) {\n    StringWriter sw=new StringWriter();\n    e.printStackTrace(new PrintWriter(sw));\n    e.printStackTrace();\n    exception=\"Bytecode Viewer Version: \" + VERSION + nl+ nl+ sw;\n  }\n  tempClass.delete();\n  if (fuckery.exists())   return findFile(Objects.requireNonNull(fuckery.listFiles()));\n  if (exception.isEmpty())   exception=\"Decompiled source file not found!\";\n  return JADX + \" \" + ERROR+ \"! \"+ ExceptionUI.SEND_STACKTRACE_TO+ nl+ nl+ TranslatedStrings.SUGGESTED_FIX_DECOMPILER_ERROR+ nl+ nl+ exception;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 220,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 80,
        "startColumnNumber" : 12,
        "endLineNumber" : 80,
        "endColumnNumber" : 77
      },
      "nodeContext" : "exception=\"Bytecode Viewer Version: \" + VERSION + nl+ nl+ sw;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "nl",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 80,
      "startColumnNumber" : 69,
      "endLineNumber" : 80,
      "endColumnNumber" : 71
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 80,
        "startColumnNumber" : 24,
        "endLineNumber" : 80,
        "endColumnNumber" : 76
      },
      "nodeContext" : "\"Bytecode Viewer Version: \" + VERSION + nl+ nl+ sw",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 80,
        "startColumnNumber" : 12,
        "endLineNumber" : 80,
        "endColumnNumber" : 76
      },
      "nodeContext" : "exception=\"Bytecode Viewer Version: \" + VERSION + nl+ nl+ sw",
      "nodeType" : "Assignment",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 80,
        "startColumnNumber" : 12,
        "endLineNumber" : 80,
        "endColumnNumber" : 77
      },
      "nodeContext" : "exception=\"Bytecode Viewer Version: \" + VERSION + nl+ nl+ sw;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 224,
        "startLineNumber" : 76,
        "startColumnNumber" : 51,
        "endLineNumber" : 81,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  StringWriter sw=new StringWriter();\n  e.printStackTrace(new PrintWriter(sw));\n  e.printStackTrace();\n  exception=\"Bytecode Viewer Version: \" + VERSION + nl+ nl+ sw;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 30,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 265,
        "startLineNumber" : 76,
        "startColumnNumber" : 10,
        "endLineNumber" : 81,
        "endColumnNumber" : 9
      },
      "nodeContext" : "catch (StackOverflowError|Exception e) {\n  StringWriter sw=new StringWriter();\n  e.printStackTrace(new PrintWriter(sw));\n  e.printStackTrace();\n  exception=\"Bytecode Viewer Version: \" + VERSION + nl+ nl+ sw;\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 38,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 637,
        "startLineNumber" : 65,
        "startColumnNumber" : 8,
        "endLineNumber" : 81,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  JadxArgs args=new JadxArgs();\n  args.getInputFiles().add(tempClass);\n  args.setOutDir(fuckery);\n  args.setOutDirSrc(fuckery);\n  args.setOutDirRes(fuckery);\n  JadxDecompiler jadx=new JadxDecompiler(args);\n  jadx.load();\n  jadx.saveSources();\n}\n catch (StackOverflowError|Exception e) {\n  StringWriter sw=new StringWriter();\n  e.printStackTrace(new PrintWriter(sw));\n  e.printStackTrace();\n  exception=\"Bytecode Viewer Version: \" + VERSION + nl+ nl+ sw;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 87,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1557,
        "startLineNumber" : 49,
        "startColumnNumber" : 61,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String fileStart=tempDirectory + fs;\n  String exception=\"\";\n  final File tempClass=new File(MiscUtils.getUniqueName(fileStart,\".class\") + \".class\");\n  try {\n    final FileOutputStream fos=new FileOutputStream(tempClass);\n    fos.write(b);\n    fos.close();\n  }\n catch (  final IOException e) {\n    BytecodeViewer.handleException(e);\n  }\n  File fuckery=new File(fuckery(fileStart));\n  try {\n    JadxArgs args=new JadxArgs();\n    args.getInputFiles().add(tempClass);\n    args.setOutDir(fuckery);\n    args.setOutDirSrc(fuckery);\n    args.setOutDirRes(fuckery);\n    JadxDecompiler jadx=new JadxDecompiler(args);\n    jadx.load();\n    jadx.saveSources();\n  }\n catch (  StackOverflowError|Exception e) {\n    StringWriter sw=new StringWriter();\n    e.printStackTrace(new PrintWriter(sw));\n    e.printStackTrace();\n    exception=\"Bytecode Viewer Version: \" + VERSION + nl+ nl+ sw;\n  }\n  tempClass.delete();\n  if (fuckery.exists())   return findFile(Objects.requireNonNull(fuckery.listFiles()));\n  if (exception.isEmpty())   exception=\"Decompiled source file not found!\";\n  return JADX + \" \" + ERROR+ \"! \"+ ExceptionUI.SEND_STACKTRACE_TO+ nl+ nl+ TranslatedStrings.SUGGESTED_FIX_DECOMPILER_ERROR+ nl+ nl+ exception;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1628,
        "startLineNumber" : 48,
        "startColumnNumber" : 4,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public String decompileClassNode(ClassNode cn,byte[] b){\n  String fileStart=tempDirectory + fs;\n  String exception=\"\";\n  final File tempClass=new File(MiscUtils.getUniqueName(fileStart,\".class\") + \".class\");\n  try {\n    final FileOutputStream fos=new FileOutputStream(tempClass);\n    fos.write(b);\n    fos.close();\n  }\n catch (  final IOException e) {\n    BytecodeViewer.handleException(e);\n  }\n  File fuckery=new File(fuckery(fileStart));\n  try {\n    JadxArgs args=new JadxArgs();\n    args.getInputFiles().add(tempClass);\n    args.setOutDir(fuckery);\n    args.setOutDirSrc(fuckery);\n    args.setOutDirRes(fuckery);\n    JadxDecompiler jadx=new JadxDecompiler(args);\n    jadx.load();\n    jadx.saveSources();\n  }\n catch (  StackOverflowError|Exception e) {\n    StringWriter sw=new StringWriter();\n    e.printStackTrace(new PrintWriter(sw));\n    e.printStackTrace();\n    exception=\"Bytecode Viewer Version: \" + VERSION + nl+ nl+ sw;\n  }\n  tempClass.delete();\n  if (fuckery.exists())   return findFile(Objects.requireNonNull(fuckery.listFiles()));\n  if (exception.isEmpty())   exception=\"Decompiled source file not found!\";\n  return JADX + \" \" + ERROR+ \"! \"+ ExceptionUI.SEND_STACKTRACE_TO+ nl+ nl+ TranslatedStrings.SUGGESTED_FIX_DECOMPILER_ERROR+ nl+ nl+ exception;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 220,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 80,
        "startColumnNumber" : 12,
        "endLineNumber" : 80,
        "endColumnNumber" : 77
      },
      "nodeContext" : "exception=\"Bytecode Viewer Version: \" + VERSION + nl+ nl+ sw;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "nl",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 92,
      "startColumnNumber" : 16,
      "endLineNumber" : 92,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 173,
        "startLineNumber" : 91,
        "startColumnNumber" : 15,
        "endLineNumber" : 93,
        "endColumnNumber" : 35
      },
      "nodeContext" : "JADX + \" \" + ERROR+ \"! \"+ ExceptionUI.SEND_STACKTRACE_TO+ nl+ nl+ TranslatedStrings.SUGGESTED_FIX_DECOMPILER_ERROR+ nl+ nl+ exception",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 16,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 181,
        "startLineNumber" : 91,
        "startColumnNumber" : 8,
        "endLineNumber" : 93,
        "endColumnNumber" : 36
      },
      "nodeContext" : "return JADX + \" \" + ERROR+ \"! \"+ ExceptionUI.SEND_STACKTRACE_TO+ nl+ nl+ TranslatedStrings.SUGGESTED_FIX_DECOMPILER_ERROR+ nl+ nl+ exception;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 17,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1557,
        "startLineNumber" : 49,
        "startColumnNumber" : 61,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String fileStart=tempDirectory + fs;\n  String exception=\"\";\n  final File tempClass=new File(MiscUtils.getUniqueName(fileStart,\".class\") + \".class\");\n  try {\n    final FileOutputStream fos=new FileOutputStream(tempClass);\n    fos.write(b);\n    fos.close();\n  }\n catch (  final IOException e) {\n    BytecodeViewer.handleException(e);\n  }\n  File fuckery=new File(fuckery(fileStart));\n  try {\n    JadxArgs args=new JadxArgs();\n    args.getInputFiles().add(tempClass);\n    args.setOutDir(fuckery);\n    args.setOutDirSrc(fuckery);\n    args.setOutDirRes(fuckery);\n    JadxDecompiler jadx=new JadxDecompiler(args);\n    jadx.load();\n    jadx.saveSources();\n  }\n catch (  StackOverflowError|Exception e) {\n    StringWriter sw=new StringWriter();\n    e.printStackTrace(new PrintWriter(sw));\n    e.printStackTrace();\n    exception=\"Bytecode Viewer Version: \" + VERSION + nl+ nl+ sw;\n  }\n  tempClass.delete();\n  if (fuckery.exists())   return findFile(Objects.requireNonNull(fuckery.listFiles()));\n  if (exception.isEmpty())   exception=\"Decompiled source file not found!\";\n  return JADX + \" \" + ERROR+ \"! \"+ ExceptionUI.SEND_STACKTRACE_TO+ nl+ nl+ TranslatedStrings.SUGGESTED_FIX_DECOMPILER_ERROR+ nl+ nl+ exception;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1628,
        "startLineNumber" : 48,
        "startColumnNumber" : 4,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public String decompileClassNode(ClassNode cn,byte[] b){\n  String fileStart=tempDirectory + fs;\n  String exception=\"\";\n  final File tempClass=new File(MiscUtils.getUniqueName(fileStart,\".class\") + \".class\");\n  try {\n    final FileOutputStream fos=new FileOutputStream(tempClass);\n    fos.write(b);\n    fos.close();\n  }\n catch (  final IOException e) {\n    BytecodeViewer.handleException(e);\n  }\n  File fuckery=new File(fuckery(fileStart));\n  try {\n    JadxArgs args=new JadxArgs();\n    args.getInputFiles().add(tempClass);\n    args.setOutDir(fuckery);\n    args.setOutDirSrc(fuckery);\n    args.setOutDirRes(fuckery);\n    JadxDecompiler jadx=new JadxDecompiler(args);\n    jadx.load();\n    jadx.saveSources();\n  }\n catch (  StackOverflowError|Exception e) {\n    StringWriter sw=new StringWriter();\n    e.printStackTrace(new PrintWriter(sw));\n    e.printStackTrace();\n    exception=\"Bytecode Viewer Version: \" + VERSION + nl+ nl+ sw;\n  }\n  tempClass.delete();\n  if (fuckery.exists())   return findFile(Objects.requireNonNull(fuckery.listFiles()));\n  if (exception.isEmpty())   exception=\"Decompiled source file not found!\";\n  return JADX + \" \" + ERROR+ \"! \"+ ExceptionUI.SEND_STACKTRACE_TO+ nl+ nl+ TranslatedStrings.SUGGESTED_FIX_DECOMPILER_ERROR+ nl+ nl+ exception;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 220,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 173,
        "startLineNumber" : 91,
        "startColumnNumber" : 15,
        "endLineNumber" : 93,
        "endColumnNumber" : 35
      },
      "nodeContext" : "JADX + \" \" + ERROR+ \"! \"+ ExceptionUI.SEND_STACKTRACE_TO+ nl+ nl+ TranslatedStrings.SUGGESTED_FIX_DECOMPILER_ERROR+ nl+ nl+ exception",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 16,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "nl",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 92,
      "startColumnNumber" : 21,
      "endLineNumber" : 92,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 173,
        "startLineNumber" : 91,
        "startColumnNumber" : 15,
        "endLineNumber" : 93,
        "endColumnNumber" : 35
      },
      "nodeContext" : "JADX + \" \" + ERROR+ \"! \"+ ExceptionUI.SEND_STACKTRACE_TO+ nl+ nl+ TranslatedStrings.SUGGESTED_FIX_DECOMPILER_ERROR+ nl+ nl+ exception",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 16,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 181,
        "startLineNumber" : 91,
        "startColumnNumber" : 8,
        "endLineNumber" : 93,
        "endColumnNumber" : 36
      },
      "nodeContext" : "return JADX + \" \" + ERROR+ \"! \"+ ExceptionUI.SEND_STACKTRACE_TO+ nl+ nl+ TranslatedStrings.SUGGESTED_FIX_DECOMPILER_ERROR+ nl+ nl+ exception;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 17,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1557,
        "startLineNumber" : 49,
        "startColumnNumber" : 61,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String fileStart=tempDirectory + fs;\n  String exception=\"\";\n  final File tempClass=new File(MiscUtils.getUniqueName(fileStart,\".class\") + \".class\");\n  try {\n    final FileOutputStream fos=new FileOutputStream(tempClass);\n    fos.write(b);\n    fos.close();\n  }\n catch (  final IOException e) {\n    BytecodeViewer.handleException(e);\n  }\n  File fuckery=new File(fuckery(fileStart));\n  try {\n    JadxArgs args=new JadxArgs();\n    args.getInputFiles().add(tempClass);\n    args.setOutDir(fuckery);\n    args.setOutDirSrc(fuckery);\n    args.setOutDirRes(fuckery);\n    JadxDecompiler jadx=new JadxDecompiler(args);\n    jadx.load();\n    jadx.saveSources();\n  }\n catch (  StackOverflowError|Exception e) {\n    StringWriter sw=new StringWriter();\n    e.printStackTrace(new PrintWriter(sw));\n    e.printStackTrace();\n    exception=\"Bytecode Viewer Version: \" + VERSION + nl+ nl+ sw;\n  }\n  tempClass.delete();\n  if (fuckery.exists())   return findFile(Objects.requireNonNull(fuckery.listFiles()));\n  if (exception.isEmpty())   exception=\"Decompiled source file not found!\";\n  return JADX + \" \" + ERROR+ \"! \"+ ExceptionUI.SEND_STACKTRACE_TO+ nl+ nl+ TranslatedStrings.SUGGESTED_FIX_DECOMPILER_ERROR+ nl+ nl+ exception;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1628,
        "startLineNumber" : 48,
        "startColumnNumber" : 4,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public String decompileClassNode(ClassNode cn,byte[] b){\n  String fileStart=tempDirectory + fs;\n  String exception=\"\";\n  final File tempClass=new File(MiscUtils.getUniqueName(fileStart,\".class\") + \".class\");\n  try {\n    final FileOutputStream fos=new FileOutputStream(tempClass);\n    fos.write(b);\n    fos.close();\n  }\n catch (  final IOException e) {\n    BytecodeViewer.handleException(e);\n  }\n  File fuckery=new File(fuckery(fileStart));\n  try {\n    JadxArgs args=new JadxArgs();\n    args.getInputFiles().add(tempClass);\n    args.setOutDir(fuckery);\n    args.setOutDirSrc(fuckery);\n    args.setOutDirRes(fuckery);\n    JadxDecompiler jadx=new JadxDecompiler(args);\n    jadx.load();\n    jadx.saveSources();\n  }\n catch (  StackOverflowError|Exception e) {\n    StringWriter sw=new StringWriter();\n    e.printStackTrace(new PrintWriter(sw));\n    e.printStackTrace();\n    exception=\"Bytecode Viewer Version: \" + VERSION + nl+ nl+ sw;\n  }\n  tempClass.delete();\n  if (fuckery.exists())   return findFile(Objects.requireNonNull(fuckery.listFiles()));\n  if (exception.isEmpty())   exception=\"Decompiled source file not found!\";\n  return JADX + \" \" + ERROR+ \"! \"+ ExceptionUI.SEND_STACKTRACE_TO+ nl+ nl+ TranslatedStrings.SUGGESTED_FIX_DECOMPILER_ERROR+ nl+ nl+ exception;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 220,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 173,
        "startLineNumber" : 91,
        "startColumnNumber" : 15,
        "endLineNumber" : 93,
        "endColumnNumber" : 35
      },
      "nodeContext" : "JADX + \" \" + ERROR+ \"! \"+ ExceptionUI.SEND_STACKTRACE_TO+ nl+ nl+ TranslatedStrings.SUGGESTED_FIX_DECOMPILER_ERROR+ nl+ nl+ exception",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 16,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "nl",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 93,
      "startColumnNumber" : 16,
      "endLineNumber" : 93,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 173,
        "startLineNumber" : 91,
        "startColumnNumber" : 15,
        "endLineNumber" : 93,
        "endColumnNumber" : 35
      },
      "nodeContext" : "JADX + \" \" + ERROR+ \"! \"+ ExceptionUI.SEND_STACKTRACE_TO+ nl+ nl+ TranslatedStrings.SUGGESTED_FIX_DECOMPILER_ERROR+ nl+ nl+ exception",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 16,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 181,
        "startLineNumber" : 91,
        "startColumnNumber" : 8,
        "endLineNumber" : 93,
        "endColumnNumber" : 36
      },
      "nodeContext" : "return JADX + \" \" + ERROR+ \"! \"+ ExceptionUI.SEND_STACKTRACE_TO+ nl+ nl+ TranslatedStrings.SUGGESTED_FIX_DECOMPILER_ERROR+ nl+ nl+ exception;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 17,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1557,
        "startLineNumber" : 49,
        "startColumnNumber" : 61,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String fileStart=tempDirectory + fs;\n  String exception=\"\";\n  final File tempClass=new File(MiscUtils.getUniqueName(fileStart,\".class\") + \".class\");\n  try {\n    final FileOutputStream fos=new FileOutputStream(tempClass);\n    fos.write(b);\n    fos.close();\n  }\n catch (  final IOException e) {\n    BytecodeViewer.handleException(e);\n  }\n  File fuckery=new File(fuckery(fileStart));\n  try {\n    JadxArgs args=new JadxArgs();\n    args.getInputFiles().add(tempClass);\n    args.setOutDir(fuckery);\n    args.setOutDirSrc(fuckery);\n    args.setOutDirRes(fuckery);\n    JadxDecompiler jadx=new JadxDecompiler(args);\n    jadx.load();\n    jadx.saveSources();\n  }\n catch (  StackOverflowError|Exception e) {\n    StringWriter sw=new StringWriter();\n    e.printStackTrace(new PrintWriter(sw));\n    e.printStackTrace();\n    exception=\"Bytecode Viewer Version: \" + VERSION + nl+ nl+ sw;\n  }\n  tempClass.delete();\n  if (fuckery.exists())   return findFile(Objects.requireNonNull(fuckery.listFiles()));\n  if (exception.isEmpty())   exception=\"Decompiled source file not found!\";\n  return JADX + \" \" + ERROR+ \"! \"+ ExceptionUI.SEND_STACKTRACE_TO+ nl+ nl+ TranslatedStrings.SUGGESTED_FIX_DECOMPILER_ERROR+ nl+ nl+ exception;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1628,
        "startLineNumber" : 48,
        "startColumnNumber" : 4,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public String decompileClassNode(ClassNode cn,byte[] b){\n  String fileStart=tempDirectory + fs;\n  String exception=\"\";\n  final File tempClass=new File(MiscUtils.getUniqueName(fileStart,\".class\") + \".class\");\n  try {\n    final FileOutputStream fos=new FileOutputStream(tempClass);\n    fos.write(b);\n    fos.close();\n  }\n catch (  final IOException e) {\n    BytecodeViewer.handleException(e);\n  }\n  File fuckery=new File(fuckery(fileStart));\n  try {\n    JadxArgs args=new JadxArgs();\n    args.getInputFiles().add(tempClass);\n    args.setOutDir(fuckery);\n    args.setOutDirSrc(fuckery);\n    args.setOutDirRes(fuckery);\n    JadxDecompiler jadx=new JadxDecompiler(args);\n    jadx.load();\n    jadx.saveSources();\n  }\n catch (  StackOverflowError|Exception e) {\n    StringWriter sw=new StringWriter();\n    e.printStackTrace(new PrintWriter(sw));\n    e.printStackTrace();\n    exception=\"Bytecode Viewer Version: \" + VERSION + nl+ nl+ sw;\n  }\n  tempClass.delete();\n  if (fuckery.exists())   return findFile(Objects.requireNonNull(fuckery.listFiles()));\n  if (exception.isEmpty())   exception=\"Decompiled source file not found!\";\n  return JADX + \" \" + ERROR+ \"! \"+ ExceptionUI.SEND_STACKTRACE_TO+ nl+ nl+ TranslatedStrings.SUGGESTED_FIX_DECOMPILER_ERROR+ nl+ nl+ exception;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 220,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 173,
        "startLineNumber" : 91,
        "startColumnNumber" : 15,
        "endLineNumber" : 93,
        "endColumnNumber" : 35
      },
      "nodeContext" : "JADX + \" \" + ERROR+ \"! \"+ ExceptionUI.SEND_STACKTRACE_TO+ nl+ nl+ TranslatedStrings.SUGGESTED_FIX_DECOMPILER_ERROR+ nl+ nl+ exception",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 16,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "nl",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 93,
      "startColumnNumber" : 21,
      "endLineNumber" : 93,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 173,
        "startLineNumber" : 91,
        "startColumnNumber" : 15,
        "endLineNumber" : 93,
        "endColumnNumber" : 35
      },
      "nodeContext" : "JADX + \" \" + ERROR+ \"! \"+ ExceptionUI.SEND_STACKTRACE_TO+ nl+ nl+ TranslatedStrings.SUGGESTED_FIX_DECOMPILER_ERROR+ nl+ nl+ exception",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 16,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 181,
        "startLineNumber" : 91,
        "startColumnNumber" : 8,
        "endLineNumber" : 93,
        "endColumnNumber" : 36
      },
      "nodeContext" : "return JADX + \" \" + ERROR+ \"! \"+ ExceptionUI.SEND_STACKTRACE_TO+ nl+ nl+ TranslatedStrings.SUGGESTED_FIX_DECOMPILER_ERROR+ nl+ nl+ exception;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 17,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1557,
        "startLineNumber" : 49,
        "startColumnNumber" : 61,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String fileStart=tempDirectory + fs;\n  String exception=\"\";\n  final File tempClass=new File(MiscUtils.getUniqueName(fileStart,\".class\") + \".class\");\n  try {\n    final FileOutputStream fos=new FileOutputStream(tempClass);\n    fos.write(b);\n    fos.close();\n  }\n catch (  final IOException e) {\n    BytecodeViewer.handleException(e);\n  }\n  File fuckery=new File(fuckery(fileStart));\n  try {\n    JadxArgs args=new JadxArgs();\n    args.getInputFiles().add(tempClass);\n    args.setOutDir(fuckery);\n    args.setOutDirSrc(fuckery);\n    args.setOutDirRes(fuckery);\n    JadxDecompiler jadx=new JadxDecompiler(args);\n    jadx.load();\n    jadx.saveSources();\n  }\n catch (  StackOverflowError|Exception e) {\n    StringWriter sw=new StringWriter();\n    e.printStackTrace(new PrintWriter(sw));\n    e.printStackTrace();\n    exception=\"Bytecode Viewer Version: \" + VERSION + nl+ nl+ sw;\n  }\n  tempClass.delete();\n  if (fuckery.exists())   return findFile(Objects.requireNonNull(fuckery.listFiles()));\n  if (exception.isEmpty())   exception=\"Decompiled source file not found!\";\n  return JADX + \" \" + ERROR+ \"! \"+ ExceptionUI.SEND_STACKTRACE_TO+ nl+ nl+ TranslatedStrings.SUGGESTED_FIX_DECOMPILER_ERROR+ nl+ nl+ exception;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1628,
        "startLineNumber" : 48,
        "startColumnNumber" : 4,
        "endLineNumber" : 94,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public String decompileClassNode(ClassNode cn,byte[] b){\n  String fileStart=tempDirectory + fs;\n  String exception=\"\";\n  final File tempClass=new File(MiscUtils.getUniqueName(fileStart,\".class\") + \".class\");\n  try {\n    final FileOutputStream fos=new FileOutputStream(tempClass);\n    fos.write(b);\n    fos.close();\n  }\n catch (  final IOException e) {\n    BytecodeViewer.handleException(e);\n  }\n  File fuckery=new File(fuckery(fileStart));\n  try {\n    JadxArgs args=new JadxArgs();\n    args.getInputFiles().add(tempClass);\n    args.setOutDir(fuckery);\n    args.setOutDirSrc(fuckery);\n    args.setOutDirRes(fuckery);\n    JadxDecompiler jadx=new JadxDecompiler(args);\n    jadx.load();\n    jadx.saveSources();\n  }\n catch (  StackOverflowError|Exception e) {\n    StringWriter sw=new StringWriter();\n    e.printStackTrace(new PrintWriter(sw));\n    e.printStackTrace();\n    exception=\"Bytecode Viewer Version: \" + VERSION + nl+ nl+ sw;\n  }\n  tempClass.delete();\n  if (fuckery.exists())   return findFile(Objects.requireNonNull(fuckery.listFiles()));\n  if (exception.isEmpty())   exception=\"Decompiled source file not found!\";\n  return JADX + \" \" + ERROR+ \"! \"+ ExceptionUI.SEND_STACKTRACE_TO+ nl+ nl+ TranslatedStrings.SUGGESTED_FIX_DECOMPILER_ERROR+ nl+ nl+ exception;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 220,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 173,
        "startLineNumber" : 91,
        "startColumnNumber" : 15,
        "endLineNumber" : 93,
        "endColumnNumber" : 35
      },
      "nodeContext" : "JADX + \" \" + ERROR+ \"! \"+ ExceptionUI.SEND_STACKTRACE_TO+ nl+ nl+ TranslatedStrings.SUGGESTED_FIX_DECOMPILER_ERROR+ nl+ nl+ exception",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 16,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 80,
    "startColumnNumber" : 64,
    "endLineNumber" : 80,
    "endColumnNumber" : 66
  }, {
    "charLength" : 2,
    "startLineNumber" : 80,
    "startColumnNumber" : 69,
    "endLineNumber" : 80,
    "endColumnNumber" : 71
  }, {
    "charLength" : 2,
    "startLineNumber" : 92,
    "startColumnNumber" : 16,
    "endLineNumber" : 92,
    "endColumnNumber" : 18
  }, {
    "charLength" : 2,
    "startLineNumber" : 92,
    "startColumnNumber" : 21,
    "endLineNumber" : 92,
    "endColumnNumber" : 23
  }, {
    "charLength" : 2,
    "startLineNumber" : 93,
    "startColumnNumber" : 16,
    "endLineNumber" : 93,
    "endColumnNumber" : 18
  }, {
    "charLength" : 2,
    "startLineNumber" : 93,
    "startColumnNumber" : 21,
    "endLineNumber" : 93,
    "endColumnNumber" : 23
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 0
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 0
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 0
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 0
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 0
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 0
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 0
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 0
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 0
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 0
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 0
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 0
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 0
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 0
  } ]
}