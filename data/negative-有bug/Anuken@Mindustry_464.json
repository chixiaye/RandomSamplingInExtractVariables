{
  "id" : 464,
  "expression" : "Time",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "a7188c48845dd423fc9b58bc6bcf6797f6d25b46",
  "filePath" : "/core/src/mindustry/world/blocks/environment/SeaBush.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Time",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 30,
      "startColumnNumber" : 102,
      "endLineNumber" : 30,
      "endColumnNumber" : 106
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 30,
        "startColumnNumber" : 102,
        "endLineNumber" : 30,
        "endColumnNumber" : 111
      },
      "nodeContext" : "Time.time",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 30,
        "startColumnNumber" : 102,
        "endLineNumber" : 30,
        "endColumnNumber" : 139
      },
      "nodeContext" : "Time.time + rand.random(0,timeRange)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 30,
        "startColumnNumber" : 92,
        "endLineNumber" : 30,
        "endColumnNumber" : 198
      },
      "nodeContext" : "Mathf.sin(Time.time + rand.random(0,timeRange),rand.random(sclMin,sclMax),rand.random(magMin,magMax))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 22,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 111,
        "startLineNumber" : 30,
        "startColumnNumber" : 87,
        "endLineNumber" : 30,
        "endColumnNumber" : 198
      },
      "nodeContext" : "ba + Mathf.sin(Time.time + rand.random(0,timeRange),rand.random(sclMin,sclMax),rand.random(magMin,magMax))",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 24,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 119,
        "startLineNumber" : 30,
        "startColumnNumber" : 79,
        "endLineNumber" : 30,
        "endColumnNumber" : 198
      },
      "nodeContext" : "angle=ba + Mathf.sin(Time.time + rand.random(0,timeRange),rand.random(sclMin,sclMax),rand.random(magMin,magMax))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 26,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 187,
        "startLineNumber" : 30,
        "startColumnNumber" : 12,
        "endLineNumber" : 30,
        "endColumnNumber" : 199
      },
      "nodeContext" : "float ba=i / (float)lobes * 360f + offset + rand.range(spread), angle=ba + Mathf.sin(Time.time + rand.random(0,timeRange),rand.random(sclMin,sclMax),rand.random(magMin,magMax));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 44,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 628,
        "startLineNumber" : 29,
        "startColumnNumber" : 38,
        "endLineNumber" : 40,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  float ba=i / (float)lobes * 360f + offset + rand.range(spread), angle=ba + Mathf.sin(Time.time + rand.random(0,timeRange),rand.random(sclMin,sclMax),rand.random(magMin,magMax));\n  float w=region.width * Draw.scl, h=region.height * Draw.scl;\n  var region=Angles.angleDist(ba,225f) <= botAngle ? botRegion : this.region;\n  Draw.rect(region,tile.worldx() - Angles.trnsx(angle,origin) + w * 0.5f,tile.worldy() - Angles.trnsy(angle,origin),w,h,origin * 4f,h / 2f,angle);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 118,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 658,
        "startLineNumber" : 29,
        "startColumnNumber" : 8,
        "endLineNumber" : 40,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < lobes; i++) {\n  float ba=i / (float)lobes * 360f + offset + rand.range(spread), angle=ba + Mathf.sin(Time.time + rand.random(0,timeRange),rand.random(sclMin,sclMax),rand.random(magMin,magMax));\n  float w=region.width * Draw.scl, h=region.height * Draw.scl;\n  var region=Angles.angleDist(ba,225f) <= botAngle ? botRegion : this.region;\n  Draw.rect(region,tile.worldx() - Angles.trnsx(angle,origin) + w * 0.5f,tile.worldy() - Angles.trnsy(angle,origin),w,h,origin * 4f,h / 2f,angle);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 129,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 924,
        "startLineNumber" : 25,
        "startColumnNumber" : 35,
        "endLineNumber" : 45,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  rand.setSeed(tile.pos());\n  float offset=rand.random(180f);\n  int lobes=rand.random(lobesMin,lobesMax);\n  for (int i=0; i < lobes; i++) {\n    float ba=i / (float)lobes * 360f + offset + rand.range(spread), angle=ba + Mathf.sin(Time.time + rand.random(0,timeRange),rand.random(sclMin,sclMax),rand.random(magMin,magMax));\n    float w=region.width * Draw.scl, h=region.height * Draw.scl;\n    var region=Angles.angleDist(ba,225f) <= botAngle ? botRegion : this.region;\n    Draw.rect(region,tile.worldx() - Angles.trnsx(angle,origin) + w * 0.5f,tile.worldy() - Angles.trnsy(angle,origin),w,h,origin * 4f,h / 2f,angle);\n  }\n  if (centerRegion.found()) {\n    Draw.rect(centerRegion,tile.worldx(),tile.worldy());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 170,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 970,
        "startLineNumber" : 24,
        "startColumnNumber" : 4,
        "endLineNumber" : 45,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void drawBase(Tile tile){\n  rand.setSeed(tile.pos());\n  float offset=rand.random(180f);\n  int lobes=rand.random(lobesMin,lobesMax);\n  for (int i=0; i < lobes; i++) {\n    float ba=i / (float)lobes * 360f + offset + rand.range(spread), angle=ba + Mathf.sin(Time.time + rand.random(0,timeRange),rand.random(sclMin,sclMax),rand.random(magMin,magMax));\n    float w=region.width * Draw.scl, h=region.height * Draw.scl;\n    var region=Angles.angleDist(ba,225f) <= botAngle ? botRegion : this.region;\n    Draw.rect(region,tile.worldx() - Angles.trnsx(angle,origin) + w * 0.5f,tile.worldy() - Angles.trnsy(angle,origin),w,h,origin * 4f,h / 2f,angle);\n  }\n  if (centerRegion.found()) {\n    Draw.rect(centerRegion,tile.worldx(),tile.worldy());\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 180,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 187,
        "startLineNumber" : 30,
        "startColumnNumber" : 12,
        "endLineNumber" : 30,
        "endColumnNumber" : 199
      },
      "nodeContext" : "float ba=i / (float)lobes * 360f + offset + rand.range(spread), angle=ba + Mathf.sin(Time.time + rand.random(0,timeRange),rand.random(sclMin,sclMax),rand.random(magMin,magMax));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 44,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 30,
    "startColumnNumber" : 102,
    "endLineNumber" : 30,
    "endColumnNumber" : 106
  } ],
  "layoutRelationDataList" : [ ]
}