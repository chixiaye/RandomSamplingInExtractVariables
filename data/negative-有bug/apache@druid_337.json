{
  "id" : 337,
  "expression" : "segments.stream()",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/processing/src/main/java/org/apache/druid/query/datasourcemetadata/DataSourceQueryQueryToolChest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "segments.stream()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 69,
      "startColumnNumber" : 11,
      "endLineNumber" : 69,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 121,
        "startLineNumber" : 69,
        "startColumnNumber" : 11,
        "endLineNumber" : 70,
        "endColumnNumber" : 103
      },
      "nodeContext" : "segments.stream().filter(input -> max != null && input.getInterval().overlaps(max.getTrueInterval()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 170,
        "startLineNumber" : 69,
        "startColumnNumber" : 11,
        "endLineNumber" : 71,
        "endColumnNumber" : 48
      },
      "nodeContext" : "segments.stream().filter(input -> max != null && input.getInterval().overlaps(max.getTrueInterval())).collect(Collectors.toList())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 178,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 71,
        "endColumnNumber" : 49
      },
      "nodeContext" : "return segments.stream().filter(input -> max != null && input.getInterval().overlaps(max.getTrueInterval())).collect(Collectors.toList());\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 26,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 304,
        "startLineNumber" : 62,
        "startColumnNumber" : 2,
        "endLineNumber" : 72,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (segments.size() <= 1) {\n    return segments;\n  }\n  final T max=segments.get(segments.size() - 1);\n  return segments.stream().filter(input -> max != null && input.getInterval().overlaps(max.getTrueInterval())).collect(Collectors.toList());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 50,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 424,
        "startLineNumber" : 60,
        "startColumnNumber" : 2,
        "endLineNumber" : 72,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public <T extends LogicalSegment>List<T> filterSegments(DataSourceMetadataQuery query,List<T> segments){\n  if (segments.size() <= 1) {\n    return segments;\n  }\n  final T max=segments.get(segments.size() - 1);\n  return segments.stream().filter(input -> max != null && input.getInterval().overlaps(max.getTrueInterval())).collect(Collectors.toList());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 75,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 121,
        "startLineNumber" : 69,
        "startColumnNumber" : 11,
        "endLineNumber" : 70,
        "endColumnNumber" : 103
      },
      "nodeContext" : "segments.stream().filter(input -> max != null && input.getInterval().overlaps(max.getTrueInterval()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 20,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "java.util.stream.Stream<T>"
  } ],
  "positionList" : [ {
    "charLength" : 17,
    "startLineNumber" : 69,
    "startColumnNumber" : 11,
    "endLineNumber" : 69,
    "endColumnNumber" : 28
  } ],
  "layoutRelationDataList" : [ ]
}