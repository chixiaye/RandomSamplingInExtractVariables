{
  "id" : 226,
  "expression" : "1",
  "projectName" : "apache@zookeeper",
  "commitID" : "c6639c9842973a7954c8baa412d6825cb833d51f",
  "filePath" : "/src/java/test/org/apache/zookeeper/test/OOMTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 98,
      "startColumnNumber" : 31,
      "endLineNumber" : 98,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 98,
        "startColumnNumber" : 24,
        "endLineNumber" : 98,
        "endColumnNumber" : 32
      },
      "nodeContext" : "(byte)1",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 98,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 32
      },
      "nodeContext" : "hog.get(0)[0]=(byte)1",
      "nodeType" : "Assignment",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 98,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 33
      },
      "nodeContext" : "hog.get(0)[0]=(byte)1;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2509,
        "startLineNumber" : 43,
        "startColumnNumber" : 84,
        "endLineNumber" : 104,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (true)   return;\n  File tmpDir=ClientBase.createTmpDir();\n  ArrayList<byte[]> hog=new ArrayList<byte[]>();\n  while (true) {\n    try {\n      hog.add(new byte[1024 * 1024 * 2]);\n    }\n catch (    OutOfMemoryError e) {\n      hog.remove(0);\n      break;\n    }\n  }\n  ClientBase.setupTestEnv();\n  ZooKeeperServer zks=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  final int PORT=33221;\n  NIOServerCnxn.Factory f=new NIOServerCnxn.Factory(PORT);\n  f.startup(zks);\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(\"127.0.0.1:\" + PORT,CONNECTION_TIMEOUT));\n  System.err.println(\"OOM Stage 0\");\n  utestPrep();\n  System.out.println(\"Free = \" + Runtime.getRuntime().freeMemory() + \" total = \"+ Runtime.getRuntime().totalMemory()+ \" max = \"+ Runtime.getRuntime().maxMemory());\n  System.err.println(\"OOM Stage 1\");\n  for (int i=0; i < 1000; i++) {\n    System.out.println(i);\n    utestExists();\n  }\n  System.out.println(\"Free = \" + Runtime.getRuntime().freeMemory() + \" total = \"+ Runtime.getRuntime().totalMemory()+ \" max = \"+ Runtime.getRuntime().maxMemory());\n  System.err.println(\"OOM Stage 2\");\n  for (int i=0; i < 1000; i++) {\n    System.out.println(i);\n    utestGet();\n  }\n  System.out.println(\"Free = \" + Runtime.getRuntime().freeMemory() + \" total = \"+ Runtime.getRuntime().totalMemory()+ \" max = \"+ Runtime.getRuntime().maxMemory());\n  System.err.println(\"OOM Stage 3\");\n  for (int i=0; i < 1000; i++) {\n    System.out.println(i);\n    utestChildren();\n  }\n  System.out.println(\"Free = \" + Runtime.getRuntime().freeMemory() + \" total = \"+ Runtime.getRuntime().totalMemory()+ \" max = \"+ Runtime.getRuntime().maxMemory());\n  hog.get(0)[0]=(byte)1;\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(\"127.0.0.1:\" + PORT,CONNECTION_TIMEOUT));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 330,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2589,
        "startLineNumber" : 43,
        "startColumnNumber" : 4,
        "endLineNumber" : 104,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void testOOM() throws IOException, InterruptedException, KeeperException {\n  if (true)   return;\n  File tmpDir=ClientBase.createTmpDir();\n  ArrayList<byte[]> hog=new ArrayList<byte[]>();\n  while (true) {\n    try {\n      hog.add(new byte[1024 * 1024 * 2]);\n    }\n catch (    OutOfMemoryError e) {\n      hog.remove(0);\n      break;\n    }\n  }\n  ClientBase.setupTestEnv();\n  ZooKeeperServer zks=new ZooKeeperServer(tmpDir,tmpDir,3000);\n  final int PORT=33221;\n  NIOServerCnxn.Factory f=new NIOServerCnxn.Factory(PORT);\n  f.startup(zks);\n  assertTrue(\"waiting for server up\",ClientBase.waitForServerUp(\"127.0.0.1:\" + PORT,CONNECTION_TIMEOUT));\n  System.err.println(\"OOM Stage 0\");\n  utestPrep();\n  System.out.println(\"Free = \" + Runtime.getRuntime().freeMemory() + \" total = \"+ Runtime.getRuntime().totalMemory()+ \" max = \"+ Runtime.getRuntime().maxMemory());\n  System.err.println(\"OOM Stage 1\");\n  for (int i=0; i < 1000; i++) {\n    System.out.println(i);\n    utestExists();\n  }\n  System.out.println(\"Free = \" + Runtime.getRuntime().freeMemory() + \" total = \"+ Runtime.getRuntime().totalMemory()+ \" max = \"+ Runtime.getRuntime().maxMemory());\n  System.err.println(\"OOM Stage 2\");\n  for (int i=0; i < 1000; i++) {\n    System.out.println(i);\n    utestGet();\n  }\n  System.out.println(\"Free = \" + Runtime.getRuntime().freeMemory() + \" total = \"+ Runtime.getRuntime().totalMemory()+ \" max = \"+ Runtime.getRuntime().maxMemory());\n  System.err.println(\"OOM Stage 3\");\n  for (int i=0; i < 1000; i++) {\n    System.out.println(i);\n    utestChildren();\n  }\n  System.out.println(\"Free = \" + Runtime.getRuntime().freeMemory() + \" total = \"+ Runtime.getRuntime().totalMemory()+ \" max = \"+ Runtime.getRuntime().maxMemory());\n  hog.get(0)[0]=(byte)1;\n  f.shutdown();\n  assertTrue(\"waiting for server down\",ClientBase.waitForServerDown(\"127.0.0.1:\" + PORT,CONNECTION_TIMEOUT));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 340,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 98,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 33
      },
      "nodeContext" : "hog.get(0)[0]=(byte)1;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 98,
    "startColumnNumber" : 31,
    "endLineNumber" : 98,
    "endColumnNumber" : 32
  } ],
  "layoutRelationDataList" : [ ]
}