{
  "id" : 273,
  "expression" : "EmptyHttp2Headers",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/codec-http2/src/main/java/io/netty/handler/codec/http2/HttpToHttp2ConnectionHandler.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "EmptyHttp2Headers",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 115,
      "startColumnNumber" : 45,
      "endLineNumber" : 115,
      "endColumnNumber" : 62
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 115,
        "startColumnNumber" : 45,
        "endLineNumber" : 115,
        "endColumnNumber" : 71
      },
      "nodeContext" : "EmptyHttp2Headers.INSTANCE",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 115,
        "startColumnNumber" : 29,
        "endLineNumber" : 115,
        "endColumnNumber" : 71
      },
      "nodeContext" : "http2Trailers=EmptyHttp2Headers.INSTANCE",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 115,
        "startColumnNumber" : 16,
        "endLineNumber" : 115,
        "endColumnNumber" : 72
      },
      "nodeContext" : "Http2Headers http2Trailers=EmptyHttp2Headers.INSTANCE;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1260,
        "startLineNumber" : 112,
        "startColumnNumber" : 58,
        "endLineNumber" : 137,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  boolean isLastContent=false;\n  HttpHeaders trailers=EmptyHttpHeaders.INSTANCE;\n  Http2Headers http2Trailers=EmptyHttp2Headers.INSTANCE;\n  if (msg instanceof LastHttpContent) {\n    isLastContent=true;\n    final LastHttpContent lastContent=(LastHttpContent)msg;\n    trailers=lastContent.trailingHeaders();\n    http2Trailers=HttpConversionUtil.toHttp2Headers(trailers,validateHeaders);\n  }\n  final ByteBuf content=((HttpContent)msg).content();\n  endStream=isLastContent && trailers.isEmpty();\n  encoder.writeData(ctx,currentStreamId,content,0,endStream).cascadeTo(promiseAggregator.newPromise());\n  release=false;\n  if (!trailers.isEmpty()) {\n    writeHeaders(ctx,encoder,currentStreamId,trailers,http2Trailers,true).cascadeTo(promiseAggregator.newPromise());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 115,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1306,
        "startLineNumber" : 112,
        "startColumnNumber" : 12,
        "endLineNumber" : 137,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!endStream && msg instanceof HttpContent) {\n  boolean isLastContent=false;\n  HttpHeaders trailers=EmptyHttpHeaders.INSTANCE;\n  Http2Headers http2Trailers=EmptyHttp2Headers.INSTANCE;\n  if (msg instanceof LastHttpContent) {\n    isLastContent=true;\n    final LastHttpContent lastContent=(LastHttpContent)msg;\n    trailers=lastContent.trailingHeaders();\n    http2Trailers=HttpConversionUtil.toHttp2Headers(trailers,validateHeaders);\n  }\n  final ByteBuf content=((HttpContent)msg).content();\n  endStream=isLastContent && trailers.isEmpty();\n  encoder.writeData(ctx,currentStreamId,content,0,endStream).cascadeTo(promiseAggregator.newPromise());\n  release=false;\n  if (!trailers.isEmpty()) {\n    writeHeaders(ctx,encoder,currentStreamId,trailers,http2Trailers,true).cascadeTo(promiseAggregator.newPromise());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 123,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2538,
        "startLineNumber" : 90,
        "startColumnNumber" : 12,
        "endLineNumber" : 138,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Http2ConnectionEncoder encoder=encoder();\n  boolean endStream=false;\n  if (msg instanceof HttpMessage) {\n    final HttpMessage httpMsg=(HttpMessage)msg;\n    currentStreamId=getStreamId(httpMsg.headers());\n    if (httpScheme != null && !httpMsg.headers().contains(HttpConversionUtil.ExtensionHeaderNames.SCHEME.text())) {\n      httpMsg.headers().set(HttpConversionUtil.ExtensionHeaderNames.SCHEME.text(),httpScheme.name());\n    }\n    Http2Headers http2Headers=HttpConversionUtil.toHttp2Headers(httpMsg,validateHeaders);\n    endStream=msg instanceof FullHttpMessage && !((FullHttpMessage)msg).content().isReadable();\n    writeHeaders(ctx,encoder,currentStreamId,httpMsg.headers(),http2Headers,endStream).cascadeTo(promiseAggregator.newPromise());\n  }\n  if (!endStream && msg instanceof HttpContent) {\n    boolean isLastContent=false;\n    HttpHeaders trailers=EmptyHttpHeaders.INSTANCE;\n    Http2Headers http2Trailers=EmptyHttp2Headers.INSTANCE;\n    if (msg instanceof LastHttpContent) {\n      isLastContent=true;\n      final LastHttpContent lastContent=(LastHttpContent)msg;\n      trailers=lastContent.trailingHeaders();\n      http2Trailers=HttpConversionUtil.toHttp2Headers(trailers,validateHeaders);\n    }\n    final ByteBuf content=((HttpContent)msg).content();\n    endStream=isLastContent && trailers.isEmpty();\n    encoder.writeData(ctx,currentStreamId,content,0,endStream).cascadeTo(promiseAggregator.newPromise());\n    release=false;\n    if (!trailers.isEmpty()) {\n      writeHeaders(ctx,encoder,currentStreamId,trailers,http2Trailers,true).cascadeTo(promiseAggregator.newPromise());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 239,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2828,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 146,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  Http2ConnectionEncoder encoder=encoder();\n  boolean endStream=false;\n  if (msg instanceof HttpMessage) {\n    final HttpMessage httpMsg=(HttpMessage)msg;\n    currentStreamId=getStreamId(httpMsg.headers());\n    if (httpScheme != null && !httpMsg.headers().contains(HttpConversionUtil.ExtensionHeaderNames.SCHEME.text())) {\n      httpMsg.headers().set(HttpConversionUtil.ExtensionHeaderNames.SCHEME.text(),httpScheme.name());\n    }\n    Http2Headers http2Headers=HttpConversionUtil.toHttp2Headers(httpMsg,validateHeaders);\n    endStream=msg instanceof FullHttpMessage && !((FullHttpMessage)msg).content().isReadable();\n    writeHeaders(ctx,encoder,currentStreamId,httpMsg.headers(),http2Headers,endStream).cascadeTo(promiseAggregator.newPromise());\n  }\n  if (!endStream && msg instanceof HttpContent) {\n    boolean isLastContent=false;\n    HttpHeaders trailers=EmptyHttpHeaders.INSTANCE;\n    Http2Headers http2Trailers=EmptyHttp2Headers.INSTANCE;\n    if (msg instanceof LastHttpContent) {\n      isLastContent=true;\n      final LastHttpContent lastContent=(LastHttpContent)msg;\n      trailers=lastContent.trailingHeaders();\n      http2Trailers=HttpConversionUtil.toHttp2Headers(trailers,validateHeaders);\n    }\n    final ByteBuf content=((HttpContent)msg).content();\n    endStream=isLastContent && trailers.isEmpty();\n    encoder.writeData(ctx,currentStreamId,content,0,endStream).cascadeTo(promiseAggregator.newPromise());\n    release=false;\n    if (!trailers.isEmpty()) {\n      writeHeaders(ctx,encoder,currentStreamId,trailers,http2Trailers,true).cascadeTo(promiseAggregator.newPromise());\n    }\n  }\n}\n catch (Throwable t) {\n  onError(ctx,true,t);\n  promiseAggregator.setFailure(t);\n}\n finally {\n  if (release) {\n    ReferenceCountUtil.release(msg);\n  }\n  promiseAggregator.doneAllocatingPromises();\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 270,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3229,
        "startLineNumber" : 81,
        "startColumnNumber" : 69,
        "endLineNumber" : 148,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!(msg instanceof HttpMessage || msg instanceof HttpContent)) {\n    return ctx.write(msg);\n  }\n  boolean release=true;\n  Promise<Void> promise=ctx.newPromise();\n  SimpleChannelPromiseAggregator promiseAggregator=new SimpleChannelPromiseAggregator(promise,ctx.executor());\n  try {\n    Http2ConnectionEncoder encoder=encoder();\n    boolean endStream=false;\n    if (msg instanceof HttpMessage) {\n      final HttpMessage httpMsg=(HttpMessage)msg;\n      currentStreamId=getStreamId(httpMsg.headers());\n      if (httpScheme != null && !httpMsg.headers().contains(HttpConversionUtil.ExtensionHeaderNames.SCHEME.text())) {\n        httpMsg.headers().set(HttpConversionUtil.ExtensionHeaderNames.SCHEME.text(),httpScheme.name());\n      }\n      Http2Headers http2Headers=HttpConversionUtil.toHttp2Headers(httpMsg,validateHeaders);\n      endStream=msg instanceof FullHttpMessage && !((FullHttpMessage)msg).content().isReadable();\n      writeHeaders(ctx,encoder,currentStreamId,httpMsg.headers(),http2Headers,endStream).cascadeTo(promiseAggregator.newPromise());\n    }\n    if (!endStream && msg instanceof HttpContent) {\n      boolean isLastContent=false;\n      HttpHeaders trailers=EmptyHttpHeaders.INSTANCE;\n      Http2Headers http2Trailers=EmptyHttp2Headers.INSTANCE;\n      if (msg instanceof LastHttpContent) {\n        isLastContent=true;\n        final LastHttpContent lastContent=(LastHttpContent)msg;\n        trailers=lastContent.trailingHeaders();\n        http2Trailers=HttpConversionUtil.toHttp2Headers(trailers,validateHeaders);\n      }\n      final ByteBuf content=((HttpContent)msg).content();\n      endStream=isLastContent && trailers.isEmpty();\n      encoder.writeData(ctx,currentStreamId,content,0,endStream).cascadeTo(promiseAggregator.newPromise());\n      release=false;\n      if (!trailers.isEmpty()) {\n        writeHeaders(ctx,encoder,currentStreamId,trailers,http2Trailers,true).cascadeTo(promiseAggregator.newPromise());\n      }\n    }\n  }\n catch (  Throwable t) {\n    onError(ctx,true,t);\n    promiseAggregator.setFailure(t);\n  }\n finally {\n    if (release) {\n      ReferenceCountUtil.release(msg);\n    }\n    promiseAggregator.doneAllocatingPromises();\n  }\n  return promise.asFuture();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 321,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3419,
        "startLineNumber" : 77,
        "startColumnNumber" : 4,
        "endLineNumber" : 148,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Handles conversion of  {@link HttpMessage} and {@link HttpContent} to HTTP/2 frames.\n */\n@Override public Future<Void> write(ChannelHandlerContext ctx,Object msg){\n  if (!(msg instanceof HttpMessage || msg instanceof HttpContent)) {\n    return ctx.write(msg);\n  }\n  boolean release=true;\n  Promise<Void> promise=ctx.newPromise();\n  SimpleChannelPromiseAggregator promiseAggregator=new SimpleChannelPromiseAggregator(promise,ctx.executor());\n  try {\n    Http2ConnectionEncoder encoder=encoder();\n    boolean endStream=false;\n    if (msg instanceof HttpMessage) {\n      final HttpMessage httpMsg=(HttpMessage)msg;\n      currentStreamId=getStreamId(httpMsg.headers());\n      if (httpScheme != null && !httpMsg.headers().contains(HttpConversionUtil.ExtensionHeaderNames.SCHEME.text())) {\n        httpMsg.headers().set(HttpConversionUtil.ExtensionHeaderNames.SCHEME.text(),httpScheme.name());\n      }\n      Http2Headers http2Headers=HttpConversionUtil.toHttp2Headers(httpMsg,validateHeaders);\n      endStream=msg instanceof FullHttpMessage && !((FullHttpMessage)msg).content().isReadable();\n      writeHeaders(ctx,encoder,currentStreamId,httpMsg.headers(),http2Headers,endStream).cascadeTo(promiseAggregator.newPromise());\n    }\n    if (!endStream && msg instanceof HttpContent) {\n      boolean isLastContent=false;\n      HttpHeaders trailers=EmptyHttpHeaders.INSTANCE;\n      Http2Headers http2Trailers=EmptyHttp2Headers.INSTANCE;\n      if (msg instanceof LastHttpContent) {\n        isLastContent=true;\n        final LastHttpContent lastContent=(LastHttpContent)msg;\n        trailers=lastContent.trailingHeaders();\n        http2Trailers=HttpConversionUtil.toHttp2Headers(trailers,validateHeaders);\n      }\n      final ByteBuf content=((HttpContent)msg).content();\n      endStream=isLastContent && trailers.isEmpty();\n      encoder.writeData(ctx,currentStreamId,content,0,endStream).cascadeTo(promiseAggregator.newPromise());\n      release=false;\n      if (!trailers.isEmpty()) {\n        writeHeaders(ctx,encoder,currentStreamId,trailers,http2Trailers,true).cascadeTo(promiseAggregator.newPromise());\n      }\n    }\n  }\n catch (  Throwable t) {\n    onError(ctx,true,t);\n    promiseAggregator.setFailure(t);\n  }\n finally {\n    if (release) {\n      ReferenceCountUtil.release(msg);\n    }\n    promiseAggregator.doneAllocatingPromises();\n  }\n  return promise.asFuture();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 340,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 115,
        "startColumnNumber" : 16,
        "endLineNumber" : 115,
        "endColumnNumber" : 72
      },
      "nodeContext" : "Http2Headers http2Trailers=EmptyHttp2Headers.INSTANCE;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "io.netty.handler.codec.http2.EmptyHttp2Headers"
  } ],
  "positionList" : [ {
    "charLength" : 17,
    "startLineNumber" : 115,
    "startColumnNumber" : 45,
    "endLineNumber" : 115,
    "endColumnNumber" : 62
  } ],
  "layoutRelationDataList" : [ ]
}