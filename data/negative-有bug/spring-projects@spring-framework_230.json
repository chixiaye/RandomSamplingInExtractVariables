{
  "id" : 230,
  "expression" : "isStatic && isFrozen && this.fixedInterceptorMap.containsKey(key)",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "isStatic && isFrozen && this.fixedInterceptorMap.containsKey(key)",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 65,
      "startLineNumber" : 858,
      "startColumnNumber" : 8,
      "endLineNumber" : 858,
      "endColumnNumber" : 73
    },
    "astNodeNumber" : 9,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 562,
        "startLineNumber" : 858,
        "startColumnNumber" : 4,
        "endLineNumber" : 871,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (isStatic && isFrozen && this.fixedInterceptorMap.containsKey(key)) {\n  if (logger.isTraceEnabled()) {\n    logger.trace(\"Method has advice and optimizations are enabled: \" + method);\n  }\n  int index=this.fixedInterceptorMap.get(key);\n  return (index + this.fixedInterceptorOffset);\n}\n else {\n  if (logger.isTraceEnabled()) {\n    logger.trace(\"Unable to apply any optimizations to advised method: \" + method);\n  }\n  return AOP_PROXY;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 55,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 935,
        "startLineNumber" : 847,
        "startColumnNumber" : 32,
        "endLineNumber" : 872,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  if (exposeProxy) {\n    if (logger.isTraceEnabled()) {\n      logger.trace(\"Must expose proxy on advised method: \" + method);\n    }\n    return AOP_PROXY;\n  }\n  String key=method.toString();\n  if (isStatic && isFrozen && this.fixedInterceptorMap.containsKey(key)) {\n    if (logger.isTraceEnabled()) {\n      logger.trace(\"Method has advice and optimizations are enabled: \" + method);\n    }\n    int index=this.fixedInterceptorMap.get(key);\n    return (index + this.fixedInterceptorOffset);\n  }\n else {\n    if (logger.isTraceEnabled()) {\n      logger.trace(\"Unable to apply any optimizations to advised method: \" + method);\n    }\n    return AOP_PROXY;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 81,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2053,
        "startLineNumber" : 847,
        "startColumnNumber" : 3,
        "endLineNumber" : 897,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (haveAdvice || !isFrozen) {\n  if (exposeProxy) {\n    if (logger.isTraceEnabled()) {\n      logger.trace(\"Must expose proxy on advised method: \" + method);\n    }\n    return AOP_PROXY;\n  }\n  String key=method.toString();\n  if (isStatic && isFrozen && this.fixedInterceptorMap.containsKey(key)) {\n    if (logger.isTraceEnabled()) {\n      logger.trace(\"Method has advice and optimizations are enabled: \" + method);\n    }\n    int index=this.fixedInterceptorMap.get(key);\n    return (index + this.fixedInterceptorOffset);\n  }\n else {\n    if (logger.isTraceEnabled()) {\n      logger.trace(\"Unable to apply any optimizations to advised method: \" + method);\n    }\n    return AOP_PROXY;\n  }\n}\n else {\n  if (exposeProxy || !isStatic) {\n    return INVOKE_TARGET;\n  }\n  Class<?> returnType=method.getReturnType();\n  if (targetClass != null && returnType.isAssignableFrom(targetClass)) {\n    if (logger.isTraceEnabled()) {\n      logger.trace(\"Method return type is assignable from target type and \" + \"may therefore return 'this' - using INVOKE_TARGET: \" + method);\n    }\n    return INVOKE_TARGET;\n  }\n else {\n    if (logger.isTraceEnabled()) {\n      logger.trace(\"Method return type ensures 'this' cannot be returned - \" + \"using DISPATCH_TARGET: \" + method);\n    }\n    return DISPATCH_TARGET;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 146,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3383,
        "startLineNumber" : 814,
        "startColumnNumber" : 35,
        "endLineNumber" : 898,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (AopUtils.isFinalizeMethod(method)) {\n    logger.trace(\"Found finalize() method - using NO_OVERRIDE\");\n    return NO_OVERRIDE;\n  }\n  if (!this.advised.isOpaque() && method.getDeclaringClass().isInterface() && method.getDeclaringClass().isAssignableFrom(Advised.class)) {\n    if (logger.isTraceEnabled()) {\n      logger.trace(\"Method is declared on Advised interface: \" + method);\n    }\n    return DISPATCH_ADVISED;\n  }\n  if (AopUtils.isEqualsMethod(method)) {\n    if (logger.isTraceEnabled()) {\n      logger.trace(\"Found 'equals' method: \" + method);\n    }\n    return INVOKE_EQUALS;\n  }\n  if (AopUtils.isHashCodeMethod(method)) {\n    if (logger.isTraceEnabled()) {\n      logger.trace(\"Found 'hashCode' method: \" + method);\n    }\n    return INVOKE_HASHCODE;\n  }\n  Class<?> targetClass=this.advised.getTargetClass();\n  List<?> chain=this.advised.getInterceptorsAndDynamicInterceptionAdvice(method,targetClass);\n  boolean haveAdvice=!chain.isEmpty();\n  boolean exposeProxy=this.advised.isExposeProxy();\n  boolean isStatic=this.advised.getTargetSource().isStatic();\n  boolean isFrozen=this.advised.isFrozen();\n  if (haveAdvice || !isFrozen) {\n    if (exposeProxy) {\n      if (logger.isTraceEnabled()) {\n        logger.trace(\"Must expose proxy on advised method: \" + method);\n      }\n      return AOP_PROXY;\n    }\n    String key=method.toString();\n    if (isStatic && isFrozen && this.fixedInterceptorMap.containsKey(key)) {\n      if (logger.isTraceEnabled()) {\n        logger.trace(\"Method has advice and optimizations are enabled: \" + method);\n      }\n      int index=this.fixedInterceptorMap.get(key);\n      return (index + this.fixedInterceptorOffset);\n    }\n else {\n      if (logger.isTraceEnabled()) {\n        logger.trace(\"Unable to apply any optimizations to advised method: \" + method);\n      }\n      return AOP_PROXY;\n    }\n  }\n else {\n    if (exposeProxy || !isStatic) {\n      return INVOKE_TARGET;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (targetClass != null && returnType.isAssignableFrom(targetClass)) {\n      if (logger.isTraceEnabled()) {\n        logger.trace(\"Method return type is assignable from target type and \" + \"may therefore return 'this' - using INVOKE_TARGET: \" + method);\n      }\n      return INVOKE_TARGET;\n    }\n else {\n      if (logger.isTraceEnabled()) {\n        logger.trace(\"Method return type ensures 'this' cannot be returned - \" + \"using DISPATCH_TARGET: \" + method);\n      }\n      return DISPATCH_TARGET;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 299,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5264,
        "startLineNumber" : 777,
        "startColumnNumber" : 2,
        "endLineNumber" : 898,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Implementation of CallbackFilter.accept() to return the index of the callback we need. <p>The callbacks for each proxy are built up of a set of fixed callbacks for general use and then a set of callbacks that are specific to a method for use on static targets with a fixed advice chain. <p>The callback used is determined thus: <dl> <dt>For exposed proxies</dt> <dd>Exposing the proxy requires code to execute before and after the method/chain invocation. This means we must use DynamicAdvisedInterceptor, since all other interceptors can avoid the need for a try/catch block</dd> <dt>For Object.finalize():</dt> <dd>No override for this method is used.</dd> <dt>For equals():</dt> <dd>The EqualsInterceptor is used to redirect equals() calls to a special handler to this proxy.</dd> <dt>For methods on the Advised class:</dt> <dd>the AdvisedDispatcher is used to dispatch the call directly to the target</dd> <dt>For advised methods:</dt> <dd>If the target is static and the advice chain is frozen then a FixedChainStaticTargetInterceptor specific to the method is used to invoke the advice chain. Otherwise a DynamicAdvisedInterceptor is used.</dd> <dt>For non-advised methods:</dt> <dd>Where it can be determined that the method will not return  {@code this}or when  {@code ProxyFactory.getExposeProxy()} returns {@code false}, then a Dispatcher is used. For static targets, the StaticDispatcher is used; and for dynamic targets, a DynamicUnadvisedInterceptor is used. If it possible for the method to return  {@code this} then aStaticUnadvisedInterceptor is used for static targets - the DynamicUnadvisedInterceptor already considers this.</dd> </dl>\n */\n@Override public int accept(Method method){\n  if (AopUtils.isFinalizeMethod(method)) {\n    logger.trace(\"Found finalize() method - using NO_OVERRIDE\");\n    return NO_OVERRIDE;\n  }\n  if (!this.advised.isOpaque() && method.getDeclaringClass().isInterface() && method.getDeclaringClass().isAssignableFrom(Advised.class)) {\n    if (logger.isTraceEnabled()) {\n      logger.trace(\"Method is declared on Advised interface: \" + method);\n    }\n    return DISPATCH_ADVISED;\n  }\n  if (AopUtils.isEqualsMethod(method)) {\n    if (logger.isTraceEnabled()) {\n      logger.trace(\"Found 'equals' method: \" + method);\n    }\n    return INVOKE_EQUALS;\n  }\n  if (AopUtils.isHashCodeMethod(method)) {\n    if (logger.isTraceEnabled()) {\n      logger.trace(\"Found 'hashCode' method: \" + method);\n    }\n    return INVOKE_HASHCODE;\n  }\n  Class<?> targetClass=this.advised.getTargetClass();\n  List<?> chain=this.advised.getInterceptorsAndDynamicInterceptionAdvice(method,targetClass);\n  boolean haveAdvice=!chain.isEmpty();\n  boolean exposeProxy=this.advised.isExposeProxy();\n  boolean isStatic=this.advised.getTargetSource().isStatic();\n  boolean isFrozen=this.advised.isFrozen();\n  if (haveAdvice || !isFrozen) {\n    if (exposeProxy) {\n      if (logger.isTraceEnabled()) {\n        logger.trace(\"Must expose proxy on advised method: \" + method);\n      }\n      return AOP_PROXY;\n    }\n    String key=method.toString();\n    if (isStatic && isFrozen && this.fixedInterceptorMap.containsKey(key)) {\n      if (logger.isTraceEnabled()) {\n        logger.trace(\"Method has advice and optimizations are enabled: \" + method);\n      }\n      int index=this.fixedInterceptorMap.get(key);\n      return (index + this.fixedInterceptorOffset);\n    }\n else {\n      if (logger.isTraceEnabled()) {\n        logger.trace(\"Unable to apply any optimizations to advised method: \" + method);\n      }\n      return AOP_PROXY;\n    }\n  }\n else {\n    if (exposeProxy || !isStatic) {\n      return INVOKE_TARGET;\n    }\n    Class<?> returnType=method.getReturnType();\n    if (targetClass != null && returnType.isAssignableFrom(targetClass)) {\n      if (logger.isTraceEnabled()) {\n        logger.trace(\"Method return type is assignable from target type and \" + \"may therefore return 'this' - using INVOKE_TARGET: \" + method);\n      }\n      return INVOKE_TARGET;\n    }\n else {\n      if (logger.isTraceEnabled()) {\n        logger.trace(\"Method return type ensures 'this' cannot be returned - \" + \"using DISPATCH_TARGET: \" + method);\n      }\n      return DISPATCH_TARGET;\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 310,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 562,
        "startLineNumber" : 858,
        "startColumnNumber" : 4,
        "endLineNumber" : 871,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (isStatic && isFrozen && this.fixedInterceptorMap.containsKey(key)) {\n  if (logger.isTraceEnabled()) {\n    logger.trace(\"Method has advice and optimizations are enabled: \" + method);\n  }\n  int index=this.fixedInterceptorMap.get(key);\n  return (index + this.fixedInterceptorOffset);\n}\n else {\n  if (logger.isTraceEnabled()) {\n    logger.trace(\"Unable to apply any optimizations to advised method: \" + method);\n  }\n  return AOP_PROXY;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 55,
      "astHeight" : 8
    },
    "tokenLength" : 7,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 65,
    "startLineNumber" : 858,
    "startColumnNumber" : 8,
    "endLineNumber" : 858,
    "endColumnNumber" : 73
  } ],
  "layoutRelationDataList" : [ ]
}