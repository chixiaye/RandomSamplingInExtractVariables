{
  "id" : 470,
  "expression" : "invocations",
  "projectName" : "mockito@mockito",
  "commitID" : "7f036eb9ed79444adcec3a6c635870222b109e50",
  "filePath" : "/src/main/java/org/mockito/internal/verification/checkers/MissingInvocationChecker.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "invocations",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 31,
      "startColumnNumber" : 61,
      "endLineNumber" : 31,
      "endColumnNumber" : 72
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 31,
        "startColumnNumber" : 45,
        "endLineNumber" : 31,
        "endColumnNumber" : 81
      },
      "nodeContext" : "findInvocations(invocations,wanted)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 31,
        "startColumnNumber" : 25,
        "endLineNumber" : 31,
        "endColumnNumber" : 81
      },
      "nodeContext" : "actualInvocations=findInvocations(invocations,wanted)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 31,
        "startColumnNumber" : 8,
        "endLineNumber" : 31,
        "endColumnNumber" : 82
      },
      "nodeContext" : "List<Invocation> actualInvocations=findInvocations(invocations,wanted);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1161,
        "startLineNumber" : 30,
        "startColumnNumber" : 70,
        "endLineNumber" : 57,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<Invocation> actualInvocations=findInvocations(invocations,wanted);\n  if (!actualInvocations.isEmpty()) {\n    return;\n  }\n  Invocation similar=findSimilarInvocation(invocations,wanted);\n  if (similar == null) {\n    throw wantedButNotInvoked(wanted,invocations);\n  }\n  Integer[] indexesOfSuspiciousArgs=getSuspiciouslyNotMatchingArgsIndexes(wanted.getMatchers(),similar.getArguments());\n  SmartPrinter smartPrinter=new SmartPrinter(wanted,invocations,indexesOfSuspiciousArgs);\n  List<Location> actualLocations=ListUtil.convert(invocations,new ListUtil.Converter<Invocation,Location>(){\n    @Override public Location convert(    Invocation invocation){\n      return invocation.getLocation();\n    }\n  }\n);\n  throw argumentsAreDifferent(smartPrinter.getWanted(),smartPrinter.getActuals(),actualLocations);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 114,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1275,
        "startLineNumber" : 29,
        "startColumnNumber" : 4,
        "endLineNumber" : 57,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static void checkMissingInvocation(List<Invocation> invocations,MatchableInvocation wanted){\n  List<Invocation> actualInvocations=findInvocations(invocations,wanted);\n  if (!actualInvocations.isEmpty()) {\n    return;\n  }\n  Invocation similar=findSimilarInvocation(invocations,wanted);\n  if (similar == null) {\n    throw wantedButNotInvoked(wanted,invocations);\n  }\n  Integer[] indexesOfSuspiciousArgs=getSuspiciouslyNotMatchingArgsIndexes(wanted.getMatchers(),similar.getArguments());\n  SmartPrinter smartPrinter=new SmartPrinter(wanted,invocations,indexesOfSuspiciousArgs);\n  List<Location> actualLocations=ListUtil.convert(invocations,new ListUtil.Converter<Invocation,Location>(){\n    @Override public Location convert(    Invocation invocation){\n      return invocation.getLocation();\n    }\n  }\n);\n  throw argumentsAreDifferent(smartPrinter.getWanted(),smartPrinter.getActuals(),actualLocations);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 130,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 31,
        "startColumnNumber" : 8,
        "endLineNumber" : 31,
        "endColumnNumber" : 82
      },
      "nodeContext" : "List<Invocation> actualInvocations=findInvocations(invocations,wanted);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.List<org.mockito.invocation.Invocation>"
  }, {
    "nodeContext" : "invocations",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 37,
      "startColumnNumber" : 51,
      "endLineNumber" : 37,
      "endColumnNumber" : 62
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 37,
        "startColumnNumber" : 29,
        "endLineNumber" : 37,
        "endColumnNumber" : 71
      },
      "nodeContext" : "findSimilarInvocation(invocations,wanted)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 37,
        "startColumnNumber" : 19,
        "endLineNumber" : 37,
        "endColumnNumber" : 71
      },
      "nodeContext" : "similar=findSimilarInvocation(invocations,wanted)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 37,
        "startColumnNumber" : 8,
        "endLineNumber" : 37,
        "endColumnNumber" : 72
      },
      "nodeContext" : "Invocation similar=findSimilarInvocation(invocations,wanted);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1161,
        "startLineNumber" : 30,
        "startColumnNumber" : 70,
        "endLineNumber" : 57,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<Invocation> actualInvocations=findInvocations(invocations,wanted);\n  if (!actualInvocations.isEmpty()) {\n    return;\n  }\n  Invocation similar=findSimilarInvocation(invocations,wanted);\n  if (similar == null) {\n    throw wantedButNotInvoked(wanted,invocations);\n  }\n  Integer[] indexesOfSuspiciousArgs=getSuspiciouslyNotMatchingArgsIndexes(wanted.getMatchers(),similar.getArguments());\n  SmartPrinter smartPrinter=new SmartPrinter(wanted,invocations,indexesOfSuspiciousArgs);\n  List<Location> actualLocations=ListUtil.convert(invocations,new ListUtil.Converter<Invocation,Location>(){\n    @Override public Location convert(    Invocation invocation){\n      return invocation.getLocation();\n    }\n  }\n);\n  throw argumentsAreDifferent(smartPrinter.getWanted(),smartPrinter.getActuals(),actualLocations);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 114,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1275,
        "startLineNumber" : 29,
        "startColumnNumber" : 4,
        "endLineNumber" : 57,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static void checkMissingInvocation(List<Invocation> invocations,MatchableInvocation wanted){\n  List<Invocation> actualInvocations=findInvocations(invocations,wanted);\n  if (!actualInvocations.isEmpty()) {\n    return;\n  }\n  Invocation similar=findSimilarInvocation(invocations,wanted);\n  if (similar == null) {\n    throw wantedButNotInvoked(wanted,invocations);\n  }\n  Integer[] indexesOfSuspiciousArgs=getSuspiciouslyNotMatchingArgsIndexes(wanted.getMatchers(),similar.getArguments());\n  SmartPrinter smartPrinter=new SmartPrinter(wanted,invocations,indexesOfSuspiciousArgs);\n  List<Location> actualLocations=ListUtil.convert(invocations,new ListUtil.Converter<Invocation,Location>(){\n    @Override public Location convert(    Invocation invocation){\n      return invocation.getLocation();\n    }\n  }\n);\n  throw argumentsAreDifferent(smartPrinter.getWanted(),smartPrinter.getActuals(),actualLocations);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 130,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 37,
        "startColumnNumber" : 8,
        "endLineNumber" : 37,
        "endColumnNumber" : 72
      },
      "nodeContext" : "Invocation similar=findSimilarInvocation(invocations,wanted);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.List<org.mockito.invocation.Invocation>"
  }, {
    "nodeContext" : "invocations",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 39,
      "startColumnNumber" : 46,
      "endLineNumber" : 39,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 39,
        "startColumnNumber" : 18,
        "endLineNumber" : 39,
        "endColumnNumber" : 58
      },
      "nodeContext" : "wantedButNotInvoked(wanted,invocations)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 39,
        "startColumnNumber" : 12,
        "endLineNumber" : 39,
        "endColumnNumber" : 59
      },
      "nodeContext" : "throw wantedButNotInvoked(wanted,invocations);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 38,
        "startColumnNumber" : 29,
        "endLineNumber" : 40,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  throw wantedButNotInvoked(wanted,invocations);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 38,
        "startColumnNumber" : 8,
        "endLineNumber" : 40,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (similar == null) {\n  throw wantedButNotInvoked(wanted,invocations);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1161,
        "startLineNumber" : 30,
        "startColumnNumber" : 70,
        "endLineNumber" : 57,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<Invocation> actualInvocations=findInvocations(invocations,wanted);\n  if (!actualInvocations.isEmpty()) {\n    return;\n  }\n  Invocation similar=findSimilarInvocation(invocations,wanted);\n  if (similar == null) {\n    throw wantedButNotInvoked(wanted,invocations);\n  }\n  Integer[] indexesOfSuspiciousArgs=getSuspiciouslyNotMatchingArgsIndexes(wanted.getMatchers(),similar.getArguments());\n  SmartPrinter smartPrinter=new SmartPrinter(wanted,invocations,indexesOfSuspiciousArgs);\n  List<Location> actualLocations=ListUtil.convert(invocations,new ListUtil.Converter<Invocation,Location>(){\n    @Override public Location convert(    Invocation invocation){\n      return invocation.getLocation();\n    }\n  }\n);\n  throw argumentsAreDifferent(smartPrinter.getWanted(),smartPrinter.getActuals(),actualLocations);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 114,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1275,
        "startLineNumber" : 29,
        "startColumnNumber" : 4,
        "endLineNumber" : 57,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static void checkMissingInvocation(List<Invocation> invocations,MatchableInvocation wanted){\n  List<Invocation> actualInvocations=findInvocations(invocations,wanted);\n  if (!actualInvocations.isEmpty()) {\n    return;\n  }\n  Invocation similar=findSimilarInvocation(invocations,wanted);\n  if (similar == null) {\n    throw wantedButNotInvoked(wanted,invocations);\n  }\n  Integer[] indexesOfSuspiciousArgs=getSuspiciouslyNotMatchingArgsIndexes(wanted.getMatchers(),similar.getArguments());\n  SmartPrinter smartPrinter=new SmartPrinter(wanted,invocations,indexesOfSuspiciousArgs);\n  List<Location> actualLocations=ListUtil.convert(invocations,new ListUtil.Converter<Invocation,Location>(){\n    @Override public Location convert(    Invocation invocation){\n      return invocation.getLocation();\n    }\n  }\n);\n  throw argumentsAreDifferent(smartPrinter.getWanted(),smartPrinter.getActuals(),actualLocations);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 130,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 39,
        "startColumnNumber" : 12,
        "endLineNumber" : 39,
        "endColumnNumber" : 59
      },
      "nodeContext" : "throw wantedButNotInvoked(wanted,invocations);\n",
      "nodeType" : "ThrowStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.List<org.mockito.invocation.Invocation>"
  }, {
    "nodeContext" : "invocations",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 44,
      "startColumnNumber" : 61,
      "endLineNumber" : 44,
      "endColumnNumber" : 72
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 44,
        "startColumnNumber" : 36,
        "endLineNumber" : 44,
        "endColumnNumber" : 98
      },
      "nodeContext" : "new SmartPrinter(wanted,invocations,indexesOfSuspiciousArgs)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 77,
        "startLineNumber" : 44,
        "startColumnNumber" : 21,
        "endLineNumber" : 44,
        "endColumnNumber" : 98
      },
      "nodeContext" : "smartPrinter=new SmartPrinter(wanted,invocations,indexesOfSuspiciousArgs)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 44,
        "startColumnNumber" : 8,
        "endLineNumber" : 44,
        "endColumnNumber" : 99
      },
      "nodeContext" : "SmartPrinter smartPrinter=new SmartPrinter(wanted,invocations,indexesOfSuspiciousArgs);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1161,
        "startLineNumber" : 30,
        "startColumnNumber" : 70,
        "endLineNumber" : 57,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<Invocation> actualInvocations=findInvocations(invocations,wanted);\n  if (!actualInvocations.isEmpty()) {\n    return;\n  }\n  Invocation similar=findSimilarInvocation(invocations,wanted);\n  if (similar == null) {\n    throw wantedButNotInvoked(wanted,invocations);\n  }\n  Integer[] indexesOfSuspiciousArgs=getSuspiciouslyNotMatchingArgsIndexes(wanted.getMatchers(),similar.getArguments());\n  SmartPrinter smartPrinter=new SmartPrinter(wanted,invocations,indexesOfSuspiciousArgs);\n  List<Location> actualLocations=ListUtil.convert(invocations,new ListUtil.Converter<Invocation,Location>(){\n    @Override public Location convert(    Invocation invocation){\n      return invocation.getLocation();\n    }\n  }\n);\n  throw argumentsAreDifferent(smartPrinter.getWanted(),smartPrinter.getActuals(),actualLocations);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 114,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1275,
        "startLineNumber" : 29,
        "startColumnNumber" : 4,
        "endLineNumber" : 57,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static void checkMissingInvocation(List<Invocation> invocations,MatchableInvocation wanted){\n  List<Invocation> actualInvocations=findInvocations(invocations,wanted);\n  if (!actualInvocations.isEmpty()) {\n    return;\n  }\n  Invocation similar=findSimilarInvocation(invocations,wanted);\n  if (similar == null) {\n    throw wantedButNotInvoked(wanted,invocations);\n  }\n  Integer[] indexesOfSuspiciousArgs=getSuspiciouslyNotMatchingArgsIndexes(wanted.getMatchers(),similar.getArguments());\n  SmartPrinter smartPrinter=new SmartPrinter(wanted,invocations,indexesOfSuspiciousArgs);\n  List<Location> actualLocations=ListUtil.convert(invocations,new ListUtil.Converter<Invocation,Location>(){\n    @Override public Location convert(    Invocation invocation){\n      return invocation.getLocation();\n    }\n  }\n);\n  throw argumentsAreDifferent(smartPrinter.getWanted(),smartPrinter.getActuals(),actualLocations);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 130,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 44,
        "startColumnNumber" : 8,
        "endLineNumber" : 44,
        "endColumnNumber" : 99
      },
      "nodeContext" : "SmartPrinter smartPrinter=new SmartPrinter(wanted,invocations,indexesOfSuspiciousArgs);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.List<org.mockito.invocation.Invocation>"
  }, {
    "nodeContext" : "invocations",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 47,
      "startColumnNumber" : 24,
      "endLineNumber" : 47,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 371,
        "startLineNumber" : 46,
        "startColumnNumber" : 16,
        "endLineNumber" : 53,
        "endColumnNumber" : 26
      },
      "nodeContext" : "ListUtil.convert(invocations,new ListUtil.Converter<Invocation,Location>(){\n  @Override public Location convert(  Invocation invocation){\n    return invocation.getLocation();\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 31,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 406,
        "startLineNumber" : 45,
        "startColumnNumber" : 23,
        "endLineNumber" : 53,
        "endColumnNumber" : 26
      },
      "nodeContext" : "actualLocations=ListUtil.convert(invocations,new ListUtil.Converter<Invocation,Location>(){\n  @Override public Location convert(  Invocation invocation){\n    return invocation.getLocation();\n  }\n}\n)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 33,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 422,
        "startLineNumber" : 45,
        "startColumnNumber" : 8,
        "endLineNumber" : 53,
        "endColumnNumber" : 27
      },
      "nodeContext" : "List<Location> actualLocations=ListUtil.convert(invocations,new ListUtil.Converter<Invocation,Location>(){\n  @Override public Location convert(  Invocation invocation){\n    return invocation.getLocation();\n  }\n}\n);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 39,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1161,
        "startLineNumber" : 30,
        "startColumnNumber" : 70,
        "endLineNumber" : 57,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<Invocation> actualInvocations=findInvocations(invocations,wanted);\n  if (!actualInvocations.isEmpty()) {\n    return;\n  }\n  Invocation similar=findSimilarInvocation(invocations,wanted);\n  if (similar == null) {\n    throw wantedButNotInvoked(wanted,invocations);\n  }\n  Integer[] indexesOfSuspiciousArgs=getSuspiciouslyNotMatchingArgsIndexes(wanted.getMatchers(),similar.getArguments());\n  SmartPrinter smartPrinter=new SmartPrinter(wanted,invocations,indexesOfSuspiciousArgs);\n  List<Location> actualLocations=ListUtil.convert(invocations,new ListUtil.Converter<Invocation,Location>(){\n    @Override public Location convert(    Invocation invocation){\n      return invocation.getLocation();\n    }\n  }\n);\n  throw argumentsAreDifferent(smartPrinter.getWanted(),smartPrinter.getActuals(),actualLocations);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 114,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1275,
        "startLineNumber" : 29,
        "startColumnNumber" : 4,
        "endLineNumber" : 57,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static void checkMissingInvocation(List<Invocation> invocations,MatchableInvocation wanted){\n  List<Invocation> actualInvocations=findInvocations(invocations,wanted);\n  if (!actualInvocations.isEmpty()) {\n    return;\n  }\n  Invocation similar=findSimilarInvocation(invocations,wanted);\n  if (similar == null) {\n    throw wantedButNotInvoked(wanted,invocations);\n  }\n  Integer[] indexesOfSuspiciousArgs=getSuspiciouslyNotMatchingArgsIndexes(wanted.getMatchers(),similar.getArguments());\n  SmartPrinter smartPrinter=new SmartPrinter(wanted,invocations,indexesOfSuspiciousArgs);\n  List<Location> actualLocations=ListUtil.convert(invocations,new ListUtil.Converter<Invocation,Location>(){\n    @Override public Location convert(    Invocation invocation){\n      return invocation.getLocation();\n    }\n  }\n);\n  throw argumentsAreDifferent(smartPrinter.getWanted(),smartPrinter.getActuals(),actualLocations);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 130,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 371,
        "startLineNumber" : 46,
        "startColumnNumber" : 16,
        "endLineNumber" : 53,
        "endColumnNumber" : 26
      },
      "nodeContext" : "ListUtil.convert(invocations,new ListUtil.Converter<Invocation,Location>(){\n  @Override public Location convert(  Invocation invocation){\n    return invocation.getLocation();\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 31,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : "java.util.List<org.mockito.invocation.Invocation>"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 31,
    "startColumnNumber" : 61,
    "endLineNumber" : 31,
    "endColumnNumber" : 72
  }, {
    "charLength" : 11,
    "startLineNumber" : 37,
    "startColumnNumber" : 51,
    "endLineNumber" : 37,
    "endColumnNumber" : 62
  }, {
    "charLength" : 11,
    "startLineNumber" : 39,
    "startColumnNumber" : 46,
    "endLineNumber" : 39,
    "endColumnNumber" : 57
  }, {
    "charLength" : 11,
    "startLineNumber" : 44,
    "startColumnNumber" : 61,
    "endLineNumber" : 44,
    "endColumnNumber" : 72
  }, {
    "charLength" : 11,
    "startLineNumber" : 47,
    "startColumnNumber" : 24,
    "endLineNumber" : 47,
    "endColumnNumber" : 35
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  } ]
}