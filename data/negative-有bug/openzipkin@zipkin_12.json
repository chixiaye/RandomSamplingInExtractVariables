{
  "id" : 12,
  "expression" : "TestObjects.TRACE",
  "projectName" : "openzipkin@zipkin",
  "commitID" : "f02a993656f506277ca83737ddf494ed45fde4b3",
  "filePath" : "/zipkin-server/src/test/java/zipkin2/server/internal/ITZipkinGrpcCollector.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "TestObjects.TRACE",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 69,
      "startColumnNumber" : 76,
      "endLineNumber" : 69,
      "endColumnNumber" : 93
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 69,
        "startColumnNumber" : 41,
        "endLineNumber" : 69,
        "endColumnNumber" : 94
      },
      "nodeContext" : "SpanBytesEncoder.PROTO3.encodeList(TestObjects.TRACE)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 69,
        "startColumnNumber" : 14,
        "endLineNumber" : 69,
        "endColumnNumber" : 95
      },
      "nodeContext" : "ListOfSpans.ADAPTER.decode(SpanBytesEncoder.PROTO3.encodeList(TestObjects.TRACE))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 69,
        "endColumnNumber" : 95
      },
      "nodeContext" : "request=ListOfSpans.ADAPTER.decode(SpanBytesEncoder.PROTO3.encodeList(TestObjects.TRACE))",
      "nodeType" : "Assignment",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 69,
        "endColumnNumber" : 96
      },
      "nodeContext" : "request=ListOfSpans.ADAPTER.decode(SpanBytesEncoder.PROTO3.encodeList(TestObjects.TRACE));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 258,
        "startLineNumber" : 68,
        "startColumnNumber" : 70,
        "endLineNumber" : 73,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  request=ListOfSpans.ADAPTER.decode(SpanBytesEncoder.PROTO3.encodeList(TestObjects.TRACE));\n  assertThat(SpanBytesDecoder.PROTO3.decodeList(request.encode())).containsExactlyElementsOf(TestObjects.TRACE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 33,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 326,
        "startLineNumber" : 68,
        "startColumnNumber" : 2,
        "endLineNumber" : 73,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Before public void sanityCheckCodecCompatible() throws IOException {\n  request=ListOfSpans.ADAPTER.decode(SpanBytesEncoder.PROTO3.encodeList(TestObjects.TRACE));\n  assertThat(SpanBytesDecoder.PROTO3.decodeList(request.encode())).containsExactlyElementsOf(TestObjects.TRACE);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 41,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 69,
        "startColumnNumber" : 4,
        "endLineNumber" : 69,
        "endColumnNumber" : 96
      },
      "nodeContext" : "request=ListOfSpans.ADAPTER.decode(SpanBytesEncoder.PROTO3.encodeList(TestObjects.TRACE));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    },
    "tokenLength" : 2,
    "type" : "java.util.List<zipkin2.Span>"
  }, {
    "nodeContext" : "TestObjects.TRACE",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 72,
      "startColumnNumber" : 33,
      "endLineNumber" : 72,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 71,
        "startColumnNumber" : 4,
        "endLineNumber" : 72,
        "endColumnNumber" : 51
      },
      "nodeContext" : "assertThat(SpanBytesDecoder.PROTO3.decodeList(request.encode())).containsExactlyElementsOf(TestObjects.TRACE)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 117,
        "startLineNumber" : 71,
        "startColumnNumber" : 4,
        "endLineNumber" : 72,
        "endColumnNumber" : 52
      },
      "nodeContext" : "assertThat(SpanBytesDecoder.PROTO3.decodeList(request.encode())).containsExactlyElementsOf(TestObjects.TRACE);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 258,
        "startLineNumber" : 68,
        "startColumnNumber" : 70,
        "endLineNumber" : 73,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  request=ListOfSpans.ADAPTER.decode(SpanBytesEncoder.PROTO3.encodeList(TestObjects.TRACE));\n  assertThat(SpanBytesDecoder.PROTO3.decodeList(request.encode())).containsExactlyElementsOf(TestObjects.TRACE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 33,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 326,
        "startLineNumber" : 68,
        "startColumnNumber" : 2,
        "endLineNumber" : 73,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Before public void sanityCheckCodecCompatible() throws IOException {\n  request=ListOfSpans.ADAPTER.decode(SpanBytesEncoder.PROTO3.encodeList(TestObjects.TRACE));\n  assertThat(SpanBytesDecoder.PROTO3.decodeList(request.encode())).containsExactlyElementsOf(TestObjects.TRACE);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 41,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 116,
        "startLineNumber" : 71,
        "startColumnNumber" : 4,
        "endLineNumber" : 72,
        "endColumnNumber" : 51
      },
      "nodeContext" : "assertThat(SpanBytesDecoder.PROTO3.decodeList(request.encode())).containsExactlyElementsOf(TestObjects.TRACE)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "java.util.List<zipkin2.Span>"
  } ],
  "positionList" : [ {
    "charLength" : 17,
    "startLineNumber" : 69,
    "startColumnNumber" : 76,
    "endLineNumber" : 69,
    "endColumnNumber" : 93
  }, {
    "charLength" : 17,
    "startLineNumber" : 72,
    "startColumnNumber" : 33,
    "endLineNumber" : 72,
    "endColumnNumber" : 50
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}