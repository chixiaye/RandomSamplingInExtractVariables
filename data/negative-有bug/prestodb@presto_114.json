{
  "id" : 114,
  "expression" : "!updateMemory.update()",
  "projectName" : "prestodb@presto",
  "commitID" : "eff77883d0d24dc6022ecde252612d1430c9fbac",
  "filePath" : "/presto-main/src/main/java/com/facebook/presto/operator/BigintGroupByHash.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "!updateMemory.update()",
    "nodeType" : "PrefixExpression",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 281,
      "startColumnNumber" : 12,
      "endLineNumber" : 281,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 123,
        "startLineNumber" : 281,
        "startColumnNumber" : 8,
        "endLineNumber" : 284,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!updateMemory.update()) {\n  return false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2109,
        "startLineNumber" : 271,
        "startColumnNumber" : 4,
        "endLineNumber" : 321,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long newCapacityLong=hashCapacity * 2L;\n  if (newCapacityLong > Integer.MAX_VALUE) {\n    throw new PrestoException(GENERIC_INSUFFICIENT_RESOURCES,\"Size of hash table cannot exceed 1 billion entries\");\n  }\n  int newCapacity=toIntExact(newCapacityLong);\n  preallocatedMemoryInBytes=(newCapacity - hashCapacity) * (long)(Long.BYTES + Integer.BYTES) + (calculateMaxFill(newCapacity) - maxFill) * Long.BYTES + currentPageSizeInBytes;\n  if (!updateMemory.update()) {\n    return false;\n  }\n  preallocatedMemoryInBytes=0;\n  expectedHashCollisions+=estimateNumberOfHashCollisions(getGroupCount(),hashCapacity);\n  int newMask=newCapacity - 1;\n  LongBigArray newValues=new LongBigArray();\n  newValues.ensureCapacity(newCapacity);\n  IntBigArray newGroupIds=new IntBigArray(-1);\n  newGroupIds.ensureCapacity(newCapacity);\n  for (int groupId=0; groupId < nextGroupId; groupId++) {\n    if (groupId == nullGroupId) {\n      continue;\n    }\n    long value=valuesByGroupId.get(groupId);\n    long hashPosition=getHashPosition(value,newMask);\n    while (newGroupIds.get(hashPosition) != -1) {\n      hashPosition=(hashPosition + 1) & newMask;\n      hashCollisions++;\n    }\n    newValues.set(hashPosition,value);\n    newGroupIds.set(hashPosition,groupId);\n  }\n  mask=newMask;\n  hashCapacity=newCapacity;\n  maxFill=calculateMaxFill(hashCapacity);\n  values=newValues;\n  groupIds=newGroupIds;\n  this.valuesByGroupId.ensureCapacity(maxFill);\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 212,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2141,
        "startLineNumber" : 270,
        "startColumnNumber" : 4,
        "endLineNumber" : 321,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private boolean tryRehash(){\n  long newCapacityLong=hashCapacity * 2L;\n  if (newCapacityLong > Integer.MAX_VALUE) {\n    throw new PrestoException(GENERIC_INSUFFICIENT_RESOURCES,\"Size of hash table cannot exceed 1 billion entries\");\n  }\n  int newCapacity=toIntExact(newCapacityLong);\n  preallocatedMemoryInBytes=(newCapacity - hashCapacity) * (long)(Long.BYTES + Integer.BYTES) + (calculateMaxFill(newCapacity) - maxFill) * Long.BYTES + currentPageSizeInBytes;\n  if (!updateMemory.update()) {\n    return false;\n  }\n  preallocatedMemoryInBytes=0;\n  expectedHashCollisions+=estimateNumberOfHashCollisions(getGroupCount(),hashCapacity);\n  int newMask=newCapacity - 1;\n  LongBigArray newValues=new LongBigArray();\n  newValues.ensureCapacity(newCapacity);\n  IntBigArray newGroupIds=new IntBigArray(-1);\n  newGroupIds.ensureCapacity(newCapacity);\n  for (int groupId=0; groupId < nextGroupId; groupId++) {\n    if (groupId == nullGroupId) {\n      continue;\n    }\n    long value=valuesByGroupId.get(groupId);\n    long hashPosition=getHashPosition(value,newMask);\n    while (newGroupIds.get(hashPosition) != -1) {\n      hashPosition=(hashPosition + 1) & newMask;\n      hashCollisions++;\n    }\n    newValues.set(hashPosition,value);\n    newGroupIds.set(hashPosition,groupId);\n  }\n  mask=newMask;\n  hashCapacity=newCapacity;\n  maxFill=calculateMaxFill(hashCapacity);\n  values=newValues;\n  groupIds=newGroupIds;\n  this.valuesByGroupId.ensureCapacity(maxFill);\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 216,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 123,
        "startLineNumber" : 281,
        "startColumnNumber" : 8,
        "endLineNumber" : 284,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (!updateMemory.update()) {\n  return false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 22,
    "startLineNumber" : 281,
    "startColumnNumber" : 12,
    "endLineNumber" : 281,
    "endColumnNumber" : 34
  } ],
  "layoutRelationDataList" : [ ]
}