{
  "id" : 264,
  "expression" : "List.class",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-broker/src/test/java/org/apache/pulsar/broker/service/nonpersistent/NonPersistentStickyKeyDispatcherMultipleConsumersTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "List.class",
    "nodeType" : "TypeLiteral",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 138,
      "startColumnNumber" : 47,
      "endLineNumber" : 138,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 138,
        "startColumnNumber" : 43,
        "endLineNumber" : 138,
        "endColumnNumber" : 58
      },
      "nodeContext" : "any(List.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 876,
        "startLineNumber" : 126,
        "startColumnNumber" : 8,
        "endLineNumber" : 139,
        "endColumnNumber" : 77
      },
      "nodeContext" : "doAnswer(invocationOnMock -> {\n  ChannelPromise mockPromise=mock(ChannelPromise.class);\n  List<Entry> receivedEntries=invocationOnMock.getArgument(0,List.class);\n  for (int index=1; index <= receivedEntries.size(); index++) {\n    Entry entry=receivedEntries.get(index - 1);\n    assertEquals(entry.getLedgerId(),1);\n    assertEquals(entry.getEntryId(),index);\n    ByteBuf byteBuf=entry.getDataBuffer();\n    MessageMetadata messageMetadata=Commands.parseMessageMetadata(byteBuf);\n    assertEquals(byteBuf.toString(UTF_8),\"message\" + index);\n  }\n  ;\n  return mockPromise;\n}\n).when(consumerMock).sendMessages(any(List.class),any(EntryBatchSizes.class),any(),anyInt(),anyLong(),anyLong(),any(RedeliveryTracker.class))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 128,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 877,
        "startLineNumber" : 126,
        "startColumnNumber" : 8,
        "endLineNumber" : 139,
        "endColumnNumber" : 78
      },
      "nodeContext" : "doAnswer(invocationOnMock -> {\n  ChannelPromise mockPromise=mock(ChannelPromise.class);\n  List<Entry> receivedEntries=invocationOnMock.getArgument(0,List.class);\n  for (int index=1; index <= receivedEntries.size(); index++) {\n    Entry entry=receivedEntries.get(index - 1);\n    assertEquals(entry.getLedgerId(),1);\n    assertEquals(entry.getEntryId(),index);\n    ByteBuf byteBuf=entry.getDataBuffer();\n    MessageMetadata messageMetadata=Commands.parseMessageMetadata(byteBuf);\n    assertEquals(byteBuf.toString(UTF_8),\"message\" + index);\n  }\n  ;\n  return mockPromise;\n}\n).when(consumerMock).sendMessages(any(List.class),any(EntryBatchSizes.class),any(),anyInt(),anyLong(),anyLong(),any(RedeliveryTracker.class));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 129,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1555,
        "startLineNumber" : 119,
        "startColumnNumber" : 64,
        "endLineNumber" : 147,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Consumer consumerMock=mock(Consumer.class);\n  nonpersistentDispatcher.addConsumer(consumerMock);\n  List<Entry> entries=new ArrayList<>();\n  entries.add(EntryImpl.create(1,1,createMessage(\"message1\",1)));\n  entries.add(EntryImpl.create(1,2,createMessage(\"message2\",2)));\n  doAnswer(invocationOnMock -> {\n    ChannelPromise mockPromise=mock(ChannelPromise.class);\n    List<Entry> receivedEntries=invocationOnMock.getArgument(0,List.class);\n    for (int index=1; index <= receivedEntries.size(); index++) {\n      Entry entry=receivedEntries.get(index - 1);\n      assertEquals(entry.getLedgerId(),1);\n      assertEquals(entry.getEntryId(),index);\n      ByteBuf byteBuf=entry.getDataBuffer();\n      MessageMetadata messageMetadata=Commands.parseMessageMetadata(byteBuf);\n      assertEquals(byteBuf.toString(UTF_8),\"message\" + index);\n    }\n    ;\n    return mockPromise;\n  }\n).when(consumerMock).sendMessages(any(List.class),any(EntryBatchSizes.class),any(),anyInt(),anyLong(),anyLong(),any(RedeliveryTracker.class));\n  try {\n    nonpersistentDispatcher.sendMessages(entries);\n  }\n catch (  Exception e) {\n    fail(\"Failed to sendMessages.\",e);\n  }\n  verify(consumerMock,times(1)).sendMessages(any(List.class),any(EntryBatchSizes.class),eq(null),anyInt(),anyLong(),anyLong(),any(RedeliveryTracker.class));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 234,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1642,
        "startLineNumber" : 118,
        "startColumnNumber" : 4,
        "endLineNumber" : 147,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test(timeOut=10000) public void testSendMessage() throws BrokerServiceException {\n  Consumer consumerMock=mock(Consumer.class);\n  nonpersistentDispatcher.addConsumer(consumerMock);\n  List<Entry> entries=new ArrayList<>();\n  entries.add(EntryImpl.create(1,1,createMessage(\"message1\",1)));\n  entries.add(EntryImpl.create(1,2,createMessage(\"message2\",2)));\n  doAnswer(invocationOnMock -> {\n    ChannelPromise mockPromise=mock(ChannelPromise.class);\n    List<Entry> receivedEntries=invocationOnMock.getArgument(0,List.class);\n    for (int index=1; index <= receivedEntries.size(); index++) {\n      Entry entry=receivedEntries.get(index - 1);\n      assertEquals(entry.getLedgerId(),1);\n      assertEquals(entry.getEntryId(),index);\n      ByteBuf byteBuf=entry.getDataBuffer();\n      MessageMetadata messageMetadata=Commands.parseMessageMetadata(byteBuf);\n      assertEquals(byteBuf.toString(UTF_8),\"message\" + index);\n    }\n    ;\n    return mockPromise;\n  }\n).when(consumerMock).sendMessages(any(List.class),any(EntryBatchSizes.class),any(),anyInt(),anyLong(),anyLong(),any(RedeliveryTracker.class));\n  try {\n    nonpersistentDispatcher.sendMessages(entries);\n  }\n catch (  Exception e) {\n    fail(\"Failed to sendMessages.\",e);\n  }\n  verify(consumerMock,times(1)).sendMessages(any(List.class),any(EntryBatchSizes.class),eq(null),anyInt(),anyLong(),anyLong(),any(RedeliveryTracker.class));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 245,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 138,
        "startColumnNumber" : 43,
        "endLineNumber" : 138,
        "endColumnNumber" : 58
      },
      "nodeContext" : "any(List.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.Class<java.util.List>"
  }, {
    "nodeContext" : "List.class",
    "nodeType" : "TypeLiteral",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 145,
      "startColumnNumber" : 56,
      "endLineNumber" : 145,
      "endColumnNumber" : 66
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 145,
        "startColumnNumber" : 52,
        "endLineNumber" : 145,
        "endColumnNumber" : 67
      },
      "nodeContext" : "any(List.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 176,
        "startLineNumber" : 145,
        "startColumnNumber" : 8,
        "endLineNumber" : 146,
        "endColumnNumber" : 87
      },
      "nodeContext" : "verify(consumerMock,times(1)).sendMessages(any(List.class),any(EntryBatchSizes.class),eq(null),anyInt(),anyLong(),anyLong(),any(RedeliveryTracker.class))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 32,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 177,
        "startLineNumber" : 145,
        "startColumnNumber" : 8,
        "endLineNumber" : 146,
        "endColumnNumber" : 88
      },
      "nodeContext" : "verify(consumerMock,times(1)).sendMessages(any(List.class),any(EntryBatchSizes.class),eq(null),anyInt(),anyLong(),anyLong(),any(RedeliveryTracker.class));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 33,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1555,
        "startLineNumber" : 119,
        "startColumnNumber" : 64,
        "endLineNumber" : 147,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Consumer consumerMock=mock(Consumer.class);\n  nonpersistentDispatcher.addConsumer(consumerMock);\n  List<Entry> entries=new ArrayList<>();\n  entries.add(EntryImpl.create(1,1,createMessage(\"message1\",1)));\n  entries.add(EntryImpl.create(1,2,createMessage(\"message2\",2)));\n  doAnswer(invocationOnMock -> {\n    ChannelPromise mockPromise=mock(ChannelPromise.class);\n    List<Entry> receivedEntries=invocationOnMock.getArgument(0,List.class);\n    for (int index=1; index <= receivedEntries.size(); index++) {\n      Entry entry=receivedEntries.get(index - 1);\n      assertEquals(entry.getLedgerId(),1);\n      assertEquals(entry.getEntryId(),index);\n      ByteBuf byteBuf=entry.getDataBuffer();\n      MessageMetadata messageMetadata=Commands.parseMessageMetadata(byteBuf);\n      assertEquals(byteBuf.toString(UTF_8),\"message\" + index);\n    }\n    ;\n    return mockPromise;\n  }\n).when(consumerMock).sendMessages(any(List.class),any(EntryBatchSizes.class),any(),anyInt(),anyLong(),anyLong(),any(RedeliveryTracker.class));\n  try {\n    nonpersistentDispatcher.sendMessages(entries);\n  }\n catch (  Exception e) {\n    fail(\"Failed to sendMessages.\",e);\n  }\n  verify(consumerMock,times(1)).sendMessages(any(List.class),any(EntryBatchSizes.class),eq(null),anyInt(),anyLong(),anyLong(),any(RedeliveryTracker.class));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 234,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1642,
        "startLineNumber" : 118,
        "startColumnNumber" : 4,
        "endLineNumber" : 147,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test(timeOut=10000) public void testSendMessage() throws BrokerServiceException {\n  Consumer consumerMock=mock(Consumer.class);\n  nonpersistentDispatcher.addConsumer(consumerMock);\n  List<Entry> entries=new ArrayList<>();\n  entries.add(EntryImpl.create(1,1,createMessage(\"message1\",1)));\n  entries.add(EntryImpl.create(1,2,createMessage(\"message2\",2)));\n  doAnswer(invocationOnMock -> {\n    ChannelPromise mockPromise=mock(ChannelPromise.class);\n    List<Entry> receivedEntries=invocationOnMock.getArgument(0,List.class);\n    for (int index=1; index <= receivedEntries.size(); index++) {\n      Entry entry=receivedEntries.get(index - 1);\n      assertEquals(entry.getLedgerId(),1);\n      assertEquals(entry.getEntryId(),index);\n      ByteBuf byteBuf=entry.getDataBuffer();\n      MessageMetadata messageMetadata=Commands.parseMessageMetadata(byteBuf);\n      assertEquals(byteBuf.toString(UTF_8),\"message\" + index);\n    }\n    ;\n    return mockPromise;\n  }\n).when(consumerMock).sendMessages(any(List.class),any(EntryBatchSizes.class),any(),anyInt(),anyLong(),anyLong(),any(RedeliveryTracker.class));\n  try {\n    nonpersistentDispatcher.sendMessages(entries);\n  }\n catch (  Exception e) {\n    fail(\"Failed to sendMessages.\",e);\n  }\n  verify(consumerMock,times(1)).sendMessages(any(List.class),any(EntryBatchSizes.class),eq(null),anyInt(),anyLong(),anyLong(),any(RedeliveryTracker.class));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 245,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 145,
        "startColumnNumber" : 52,
        "endLineNumber" : 145,
        "endColumnNumber" : 67
      },
      "nodeContext" : "any(List.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.Class<java.util.List>"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 138,
    "startColumnNumber" : 47,
    "endLineNumber" : 138,
    "endColumnNumber" : 57
  }, {
    "charLength" : 10,
    "startLineNumber" : 145,
    "startColumnNumber" : 56,
    "endLineNumber" : 145,
    "endColumnNumber" : 66
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}