{
  "id" : 58,
  "expression" : "new TimeSource(epochMs,timeZone)",
  "projectName" : "material-components@material-components-android",
  "commitID" : "79bf9d0e8e62eea9c2f2620d4e1a0a2ca0e12017",
  "filePath" : "/lib/java/com/google/android/material/datepicker/TimeSource.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new TimeSource(epochMs,timeZone)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 33,
      "startLineNumber" : 60,
      "startColumnNumber" : 11,
      "endLineNumber" : 60,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 60,
        "startColumnNumber" : 4,
        "endLineNumber" : 60,
        "endColumnNumber" : 45
      },
      "nodeContext" : "return new TimeSource(epochMs,timeZone);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 59,
        "startColumnNumber" : 69,
        "endLineNumber" : 61,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  return new TimeSource(epochMs,timeZone);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 772,
        "startLineNumber" : 46,
        "startColumnNumber" : 2,
        "endLineNumber" : 61,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Obtains a  {@code TimeSource} that always returns the same time in the specified timezone.<p>This clock simply returns the specified instant. As such, it is not a clock in the conventional sense. The main use case for this is in testing, where the fixed clock ensures tests are not dependent on the current clock. <p>The returned implementation is immutable, thread-safe and  {@code Serializable}.\n * @param epochMs the time in UTC milliseconds from the epoch.\n * @param timeZone the timezone to use to convert the date-time. If this value is null, the hostdevice's timezone will be used.\n */\nstatic TimeSource fixed(long epochMs,@Nullable TimeZone timeZone){\n  return new TimeSource(epochMs,timeZone);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 22,
      "astHeight" : 6
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 60,
        "startColumnNumber" : 4,
        "endLineNumber" : 60,
        "endColumnNumber" : 45
      },
      "nodeContext" : "return new TimeSource(epochMs,timeZone);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "com.google.android.material.datepicker.TimeSource"
  } ],
  "positionList" : [ {
    "charLength" : 33,
    "startLineNumber" : 60,
    "startColumnNumber" : 11,
    "endLineNumber" : 60,
    "endColumnNumber" : 44
  } ],
  "layoutRelationDataList" : [ ]
}