{
  "id" : 360,
  "expression" : "outerErrorType.equals(UnhandledAlertException.class)",
  "projectName" : "SeleniumHQ@selenium",
  "commitID" : "c146621f39dbec94114835aa1f6af6a0e1fa4cd0",
  "filePath" : "/java/client/src/org/openqa/selenium/remote/ErrorHandler.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "outerErrorType.equals(UnhandledAlertException.class)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 52,
      "startLineNumber" : 157,
      "startColumnNumber" : 8,
      "endLineNumber" : 157,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 6,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 157,
        "startColumnNumber" : 8,
        "endLineNumber" : 158,
        "endColumnNumber" : 31
      },
      "nodeContext" : "outerErrorType.equals(UnhandledAlertException.class) && value instanceof Map",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 151,
        "startLineNumber" : 157,
        "startColumnNumber" : 4,
        "endLineNumber" : 160,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (outerErrorType.equals(UnhandledAlertException.class) && value instanceof Map) {\n  toThrow=createUnhandledAlertException(value);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3346,
        "startLineNumber" : 90,
        "startColumnNumber" : 98,
        "endLineNumber" : 185,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (response.getStatus() == null || response.getStatus() == SUCCESS) {\n    return response;\n  }\n  if (response.getValue() instanceof Throwable) {\n    Throwable throwable=(Throwable)response.getValue();\n    Throwables.throwIfUnchecked(throwable);\n    throw new RuntimeException(throwable);\n  }\n  Class<? extends WebDriverException> outerErrorType=errorCodes.getExceptionType(response.getStatus());\n  Object value=response.getValue();\n  String message=null;\n  Throwable cause=null;\n  if (value instanceof Map) {\n    Map<String,Object> rawErrorData=(Map<String,Object>)value;\n    if (!rawErrorData.containsKey(MESSAGE) && rawErrorData.containsKey(\"value\")) {\n      try {\n        rawErrorData=(Map<String,Object>)rawErrorData.get(\"value\");\n      }\n catch (      ClassCastException cce) {\n      }\n    }\n    try {\n      message=(String)rawErrorData.get(MESSAGE);\n    }\n catch (    ClassCastException e) {\n      message=String.valueOf(e);\n    }\n    Throwable serverError=rebuildServerError(rawErrorData,response.getStatus());\n    if (serverError == null) {\n      if (includeServerErrors) {\n        message+=\" (WARNING: The server did not provide any stacktrace information)\";\n      }\n    }\n else     if (!includeServerErrors) {\n      message+=\" (WARNING: The client has suppressed server-side stacktraces)\";\n    }\n else {\n      cause=serverError;\n      if (cause.getStackTrace() == null || cause.getStackTrace().length == 0) {\n        message+=\" (WARNING: The server did not provide any stacktrace information)\";\n      }\n    }\n    if (rawErrorData.get(SCREEN_SHOT) != null) {\n      cause=new ScreenshotException(String.valueOf(rawErrorData.get(SCREEN_SHOT)),cause);\n    }\n  }\n else   if (value != null) {\n    message=String.valueOf(value);\n  }\n  String duration1=duration(duration);\n  if (message != null && !message.contains(duration1)) {\n    message=message + duration1;\n  }\n  WebDriverException toThrow=null;\n  if (outerErrorType.equals(UnhandledAlertException.class) && value instanceof Map) {\n    toThrow=createUnhandledAlertException(value);\n  }\n  if (toThrow == null) {\n    toThrow=createThrowable(outerErrorType,new Class<?>[]{String.class,Throwable.class,Integer.class},new Object[]{message,cause,response.getStatus()});\n  }\n  if (toThrow == null) {\n    toThrow=createThrowable(outerErrorType,new Class<?>[]{String.class,Throwable.class},new Object[]{message,cause});\n  }\n  if (toThrow == null) {\n    toThrow=createThrowable(outerErrorType,new Class<?>[]{String.class},new Object[]{message});\n  }\n  if (toThrow == null) {\n    toThrow=new WebDriverException(message,cause);\n  }\n  throw toThrow;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 420,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3475,
        "startLineNumber" : 89,
        "startColumnNumber" : 2,
        "endLineNumber" : 185,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@SuppressWarnings(\"unchecked\") public Response throwIfResponseFailed(Response response,long duration) throws RuntimeException {\n  if (response.getStatus() == null || response.getStatus() == SUCCESS) {\n    return response;\n  }\n  if (response.getValue() instanceof Throwable) {\n    Throwable throwable=(Throwable)response.getValue();\n    Throwables.throwIfUnchecked(throwable);\n    throw new RuntimeException(throwable);\n  }\n  Class<? extends WebDriverException> outerErrorType=errorCodes.getExceptionType(response.getStatus());\n  Object value=response.getValue();\n  String message=null;\n  Throwable cause=null;\n  if (value instanceof Map) {\n    Map<String,Object> rawErrorData=(Map<String,Object>)value;\n    if (!rawErrorData.containsKey(MESSAGE) && rawErrorData.containsKey(\"value\")) {\n      try {\n        rawErrorData=(Map<String,Object>)rawErrorData.get(\"value\");\n      }\n catch (      ClassCastException cce) {\n      }\n    }\n    try {\n      message=(String)rawErrorData.get(MESSAGE);\n    }\n catch (    ClassCastException e) {\n      message=String.valueOf(e);\n    }\n    Throwable serverError=rebuildServerError(rawErrorData,response.getStatus());\n    if (serverError == null) {\n      if (includeServerErrors) {\n        message+=\" (WARNING: The server did not provide any stacktrace information)\";\n      }\n    }\n else     if (!includeServerErrors) {\n      message+=\" (WARNING: The client has suppressed server-side stacktraces)\";\n    }\n else {\n      cause=serverError;\n      if (cause.getStackTrace() == null || cause.getStackTrace().length == 0) {\n        message+=\" (WARNING: The server did not provide any stacktrace information)\";\n      }\n    }\n    if (rawErrorData.get(SCREEN_SHOT) != null) {\n      cause=new ScreenshotException(String.valueOf(rawErrorData.get(SCREEN_SHOT)),cause);\n    }\n  }\n else   if (value != null) {\n    message=String.valueOf(value);\n  }\n  String duration1=duration(duration);\n  if (message != null && !message.contains(duration1)) {\n    message=message + duration1;\n  }\n  WebDriverException toThrow=null;\n  if (outerErrorType.equals(UnhandledAlertException.class) && value instanceof Map) {\n    toThrow=createUnhandledAlertException(value);\n  }\n  if (toThrow == null) {\n    toThrow=createThrowable(outerErrorType,new Class<?>[]{String.class,Throwable.class,Integer.class},new Object[]{message,cause,response.getStatus()});\n  }\n  if (toThrow == null) {\n    toThrow=createThrowable(outerErrorType,new Class<?>[]{String.class,Throwable.class},new Object[]{message,cause});\n  }\n  if (toThrow == null) {\n    toThrow=createThrowable(outerErrorType,new Class<?>[]{String.class},new Object[]{message});\n  }\n  if (toThrow == null) {\n    toThrow=new WebDriverException(message,cause);\n  }\n  throw toThrow;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 437,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 84,
        "startLineNumber" : 157,
        "startColumnNumber" : 8,
        "endLineNumber" : 158,
        "endColumnNumber" : 31
      },
      "nodeContext" : "outerErrorType.equals(UnhandledAlertException.class) && value instanceof Map",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 52,
    "startLineNumber" : 157,
    "startColumnNumber" : 8,
    "endLineNumber" : 157,
    "endColumnNumber" : 60
  } ],
  "layoutRelationDataList" : [ ]
}