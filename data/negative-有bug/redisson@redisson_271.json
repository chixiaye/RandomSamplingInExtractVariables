{
  "id" : 271,
  "expression" : "redisson.getBucket(\"test\").isExists()",
  "projectName" : "redisson@redisson",
  "commitID" : "62b5e68c05b7475e1e0f98b4161aacb35d376b97",
  "filePath" : "/redisson/src/test/java/org/redisson/RedissonBinaryStreamTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "redisson.getBucket(\"test\").isExists()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 37,
      "startLineNumber" : 143,
      "startColumnNumber" : 19,
      "endLineNumber" : 143,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 143,
        "startColumnNumber" : 8,
        "endLineNumber" : 143,
        "endColumnNumber" : 57
      },
      "nodeContext" : "assertThat(redisson.getBucket(\"test\").isExists())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 143,
        "startColumnNumber" : 8,
        "endLineNumber" : 143,
        "endColumnNumber" : 66
      },
      "nodeContext" : "assertThat(redisson.getBucket(\"test\").isExists()).isTrue()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 143,
        "startColumnNumber" : 8,
        "endLineNumber" : 143,
        "endColumnNumber" : 67
      },
      "nodeContext" : "assertThat(redisson.getBucket(\"test\").isExists()).isTrue();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1910,
        "startLineNumber" : 106,
        "startColumnNumber" : 102,
        "endLineNumber" : 153,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  RBinaryStream stream=redisson.getBinaryStream(\"test\");\n  MessageDigest hash=MessageDigest.getInstance(\"SHA-1\");\n  hash.reset();\n  for (int i=0; i < sizeInMBs; i++) {\n    byte[] bytes=new byte[chunkSize];\n    ThreadLocalRandom.current().nextBytes(bytes);\n    hash.update(bytes);\n    stream.getOutputStream().write(bytes);\n  }\n  String writtenDataHash=new BigInteger(1,hash.digest()).toString(16);\n  hash.reset();\n  InputStream s=stream.getInputStream();\n  long readBytesTotal=0;\n  while (true) {\n    byte[] bytes=new byte[ThreadLocalRandom.current().nextInt(0,chunkSize)];\n    int readBytes=s.read(bytes);\n    if (readBytes == -1) {\n      break;\n    }\n    if (readBytes < bytes.length) {\n      bytes=Arrays.copyOf(bytes,readBytes);\n    }\n    hash.update(bytes);\n    readBytesTotal+=readBytes;\n  }\n  String readDataHash=new BigInteger(1,hash.digest()).toString(16);\n  assertThat(writtenDataHash).isEqualTo(readDataHash);\n  assertThat(readBytesTotal).isEqualTo(sizeInMBs * chunkSize);\n  assertThat(stream.size()).isEqualTo(sizeInMBs * chunkSize);\n  assertThat(stream.size()).isEqualTo(sizeInMBs * chunkSize);\n  assertThat(redisson.getBucket(\"test\").isExists()).isTrue();\n  if (sizeInMBs * chunkSize <= 512 * 1024 * 1024) {\n    assertThat(redisson.getBucket(\"test:parts\").isExists()).isFalse();\n    assertThat(redisson.getBucket(\"test:1\").isExists()).isFalse();\n  }\n else {\n    int parts=(sizeInMBs * chunkSize) / (512 * 1024 * 1024);\n    for (int i=1; i < parts - 1; i++) {\n      assertThat(redisson.getBucket(\"test:\" + i).isExists()).isTrue();\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 294,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2008,
        "startLineNumber" : 106,
        "startColumnNumber" : 4,
        "endLineNumber" : 153,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void testLimit(int sizeInMBs,int chunkSize) throws IOException, NoSuchAlgorithmException {\n  RBinaryStream stream=redisson.getBinaryStream(\"test\");\n  MessageDigest hash=MessageDigest.getInstance(\"SHA-1\");\n  hash.reset();\n  for (int i=0; i < sizeInMBs; i++) {\n    byte[] bytes=new byte[chunkSize];\n    ThreadLocalRandom.current().nextBytes(bytes);\n    hash.update(bytes);\n    stream.getOutputStream().write(bytes);\n  }\n  String writtenDataHash=new BigInteger(1,hash.digest()).toString(16);\n  hash.reset();\n  InputStream s=stream.getInputStream();\n  long readBytesTotal=0;\n  while (true) {\n    byte[] bytes=new byte[ThreadLocalRandom.current().nextInt(0,chunkSize)];\n    int readBytes=s.read(bytes);\n    if (readBytes == -1) {\n      break;\n    }\n    if (readBytes < bytes.length) {\n      bytes=Arrays.copyOf(bytes,readBytes);\n    }\n    hash.update(bytes);\n    readBytesTotal+=readBytes;\n  }\n  String readDataHash=new BigInteger(1,hash.digest()).toString(16);\n  assertThat(writtenDataHash).isEqualTo(readDataHash);\n  assertThat(readBytesTotal).isEqualTo(sizeInMBs * chunkSize);\n  assertThat(stream.size()).isEqualTo(sizeInMBs * chunkSize);\n  assertThat(stream.size()).isEqualTo(sizeInMBs * chunkSize);\n  assertThat(redisson.getBucket(\"test\").isExists()).isTrue();\n  if (sizeInMBs * chunkSize <= 512 * 1024 * 1024) {\n    assertThat(redisson.getBucket(\"test:parts\").isExists()).isFalse();\n    assertThat(redisson.getBucket(\"test:1\").isExists()).isFalse();\n  }\n else {\n    int parts=(sizeInMBs * chunkSize) / (512 * 1024 * 1024);\n    for (int i=1; i < parts - 1; i++) {\n      assertThat(redisson.getBucket(\"test:\" + i).isExists()).isTrue();\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 308,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 143,
        "startColumnNumber" : 8,
        "endLineNumber" : 143,
        "endColumnNumber" : 67
      },
      "nodeContext" : "assertThat(redisson.getBucket(\"test\").isExists()).isTrue();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    },
    "tokenLength" : 4,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 37,
    "startLineNumber" : 143,
    "startColumnNumber" : 19,
    "endLineNumber" : 143,
    "endColumnNumber" : 56
  } ],
  "layoutRelationDataList" : [ ]
}