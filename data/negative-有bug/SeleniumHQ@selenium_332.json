{
  "id" : 332,
  "expression" : "pt.getActualTypeArguments()",
  "projectName" : "SeleniumHQ@selenium",
  "commitID" : "c146621f39dbec94114835aa1f6af6a0e1fa4cd0",
  "filePath" : "/java/client/src/org/openqa/selenium/json/MapCoercer.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "pt.getActualTypeArguments()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 27,
      "startLineNumber" : 54,
      "startColumnNumber" : 16,
      "endLineNumber" : 54,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 54,
        "startColumnNumber" : 16,
        "endLineNumber" : 54,
        "endColumnNumber" : 46
      },
      "nodeContext" : "pt.getActualTypeArguments()[0]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 54,
        "startColumnNumber" : 6,
        "endLineNumber" : 54,
        "endColumnNumber" : 46
      },
      "nodeContext" : "keyType=pt.getActualTypeArguments()[0]",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 54,
        "startColumnNumber" : 6,
        "endLineNumber" : 54,
        "endColumnNumber" : 47
      },
      "nodeContext" : "keyType=pt.getActualTypeArguments()[0];\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 160,
        "startLineNumber" : 52,
        "startColumnNumber" : 43,
        "endLineNumber" : 56,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ParameterizedType pt=(ParameterizedType)type;\n  keyType=pt.getActualTypeArguments()[0];\n  valueType=pt.getActualTypeArguments()[1];\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 26,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 394,
        "startLineNumber" : 52,
        "startColumnNumber" : 4,
        "endLineNumber" : 61,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (type instanceof ParameterizedType) {\n  ParameterizedType pt=(ParameterizedType)type;\n  keyType=pt.getActualTypeArguments()[0];\n  valueType=pt.getActualTypeArguments()[1];\n}\n else if (type instanceof Class) {\n  keyType=Object.class;\n  valueType=Object.class;\n}\n else {\n  throw new IllegalArgumentException(\"Unhandled type: \" + type.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 59,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 919,
        "startLineNumber" : 48,
        "startColumnNumber" : 68,
        "endLineNumber" : 77,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Type keyType;\n  Type valueType;\n  if (type instanceof ParameterizedType) {\n    ParameterizedType pt=(ParameterizedType)type;\n    keyType=pt.getActualTypeArguments()[0];\n    valueType=pt.getActualTypeArguments()[1];\n  }\n else   if (type instanceof Class) {\n    keyType=Object.class;\n    valueType=Object.class;\n  }\n else {\n    throw new IllegalArgumentException(\"Unhandled type: \" + type.getClass());\n  }\n  return (jsonInput,setting) -> {\n    jsonInput.beginObject();\n    T toReturn=new JsonInputIterator(jsonInput).asStream().map(in -> {\n      Object key=coercer.coerce(in,keyType,setting);\n      Object value=coercer.coerce(in,valueType,setting);\n      return new AbstractMap.SimpleImmutableEntry<>(key,value);\n    }\n).collect(collector);\n    jsonInput.endObject();\n    return toReturn;\n  }\n;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 138,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 997,
        "startLineNumber" : 47,
        "startColumnNumber" : 2,
        "endLineNumber" : 77,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public BiFunction<JsonInput,PropertySetting,T> apply(Type type){\n  Type keyType;\n  Type valueType;\n  if (type instanceof ParameterizedType) {\n    ParameterizedType pt=(ParameterizedType)type;\n    keyType=pt.getActualTypeArguments()[0];\n    valueType=pt.getActualTypeArguments()[1];\n  }\n else   if (type instanceof Class) {\n    keyType=Object.class;\n    valueType=Object.class;\n  }\n else {\n    throw new IllegalArgumentException(\"Unhandled type: \" + type.getClass());\n  }\n  return (jsonInput,setting) -> {\n    jsonInput.beginObject();\n    T toReturn=new JsonInputIterator(jsonInput).asStream().map(in -> {\n      Object key=coercer.coerce(in,keyType,setting);\n      Object value=coercer.coerce(in,valueType,setting);\n      return new AbstractMap.SimpleImmutableEntry<>(key,value);\n    }\n).collect(collector);\n    jsonInput.endObject();\n    return toReturn;\n  }\n;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 156,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 54,
        "startColumnNumber" : 6,
        "endLineNumber" : 54,
        "endColumnNumber" : 47
      },
      "nodeContext" : "keyType=pt.getActualTypeArguments()[0];\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "java.lang.reflect.Type[]"
  }, {
    "nodeContext" : "pt.getActualTypeArguments()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 27,
      "startLineNumber" : 55,
      "startColumnNumber" : 18,
      "endLineNumber" : 55,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 55,
        "startColumnNumber" : 18,
        "endLineNumber" : 55,
        "endColumnNumber" : 48
      },
      "nodeContext" : "pt.getActualTypeArguments()[1]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 55,
        "startColumnNumber" : 6,
        "endLineNumber" : 55,
        "endColumnNumber" : 48
      },
      "nodeContext" : "valueType=pt.getActualTypeArguments()[1]",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 55,
        "startColumnNumber" : 6,
        "endLineNumber" : 55,
        "endColumnNumber" : 49
      },
      "nodeContext" : "valueType=pt.getActualTypeArguments()[1];\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 160,
        "startLineNumber" : 52,
        "startColumnNumber" : 43,
        "endLineNumber" : 56,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ParameterizedType pt=(ParameterizedType)type;\n  keyType=pt.getActualTypeArguments()[0];\n  valueType=pt.getActualTypeArguments()[1];\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 26,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 394,
        "startLineNumber" : 52,
        "startColumnNumber" : 4,
        "endLineNumber" : 61,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (type instanceof ParameterizedType) {\n  ParameterizedType pt=(ParameterizedType)type;\n  keyType=pt.getActualTypeArguments()[0];\n  valueType=pt.getActualTypeArguments()[1];\n}\n else if (type instanceof Class) {\n  keyType=Object.class;\n  valueType=Object.class;\n}\n else {\n  throw new IllegalArgumentException(\"Unhandled type: \" + type.getClass());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 59,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 919,
        "startLineNumber" : 48,
        "startColumnNumber" : 68,
        "endLineNumber" : 77,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Type keyType;\n  Type valueType;\n  if (type instanceof ParameterizedType) {\n    ParameterizedType pt=(ParameterizedType)type;\n    keyType=pt.getActualTypeArguments()[0];\n    valueType=pt.getActualTypeArguments()[1];\n  }\n else   if (type instanceof Class) {\n    keyType=Object.class;\n    valueType=Object.class;\n  }\n else {\n    throw new IllegalArgumentException(\"Unhandled type: \" + type.getClass());\n  }\n  return (jsonInput,setting) -> {\n    jsonInput.beginObject();\n    T toReturn=new JsonInputIterator(jsonInput).asStream().map(in -> {\n      Object key=coercer.coerce(in,keyType,setting);\n      Object value=coercer.coerce(in,valueType,setting);\n      return new AbstractMap.SimpleImmutableEntry<>(key,value);\n    }\n).collect(collector);\n    jsonInput.endObject();\n    return toReturn;\n  }\n;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 138,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 997,
        "startLineNumber" : 47,
        "startColumnNumber" : 2,
        "endLineNumber" : 77,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public BiFunction<JsonInput,PropertySetting,T> apply(Type type){\n  Type keyType;\n  Type valueType;\n  if (type instanceof ParameterizedType) {\n    ParameterizedType pt=(ParameterizedType)type;\n    keyType=pt.getActualTypeArguments()[0];\n    valueType=pt.getActualTypeArguments()[1];\n  }\n else   if (type instanceof Class) {\n    keyType=Object.class;\n    valueType=Object.class;\n  }\n else {\n    throw new IllegalArgumentException(\"Unhandled type: \" + type.getClass());\n  }\n  return (jsonInput,setting) -> {\n    jsonInput.beginObject();\n    T toReturn=new JsonInputIterator(jsonInput).asStream().map(in -> {\n      Object key=coercer.coerce(in,keyType,setting);\n      Object value=coercer.coerce(in,valueType,setting);\n      return new AbstractMap.SimpleImmutableEntry<>(key,value);\n    }\n).collect(collector);\n    jsonInput.endObject();\n    return toReturn;\n  }\n;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 156,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 55,
        "startColumnNumber" : 6,
        "endLineNumber" : 55,
        "endColumnNumber" : 49
      },
      "nodeContext" : "valueType=pt.getActualTypeArguments()[1];\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "java.lang.reflect.Type[]"
  } ],
  "positionList" : [ {
    "charLength" : 27,
    "startLineNumber" : 54,
    "startColumnNumber" : 16,
    "endLineNumber" : 54,
    "endColumnNumber" : 43
  }, {
    "charLength" : 27,
    "startLineNumber" : 55,
    "startColumnNumber" : 18,
    "endLineNumber" : 55,
    "endColumnNumber" : 45
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}