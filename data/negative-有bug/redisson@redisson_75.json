{
  "id" : 75,
  "expression" : "Mono",
  "projectName" : "redisson@redisson",
  "commitID" : "62b5e68c05b7475e1e0f98b4161aacb35d376b97",
  "filePath" : "/redisson-spring-data/redisson-spring-data-21/src/main/java/org/redisson/spring/data/connection/RedissonReactiveZSetCommands.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Mono",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 193,
      "startColumnNumber" : 19,
      "endLineNumber" : 193,
      "endColumnNumber" : 23
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 193,
        "startColumnNumber" : 19,
        "endLineNumber" : 193,
        "endColumnNumber" : 66
      },
      "nodeContext" : "Mono.just(new CommandResponse<>(command,flux))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 193,
        "startColumnNumber" : 12,
        "endLineNumber" : 193,
        "endColumnNumber" : 67
      },
      "nodeContext" : "return Mono.just(new CommandResponse<>(command,flux));\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 1667,
        "startLineNumber" : 163,
        "startColumnNumber" : 44,
        "endLineNumber" : 194,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Assert.notNull(command.getKey(),\"Key must not be null!\");\n  Assert.notNull(command.getRange(),\"Range must not be null!\");\n  byte[] keyBuf=toByteArray(command.getKey());\n  long start=command.getRange().getLowerBound().getValue().orElse(0L);\n  long end=command.getRange().getUpperBound().getValue().get();\n  Flux<Tuple> flux;\n  if (command.getDirection() == Direction.ASC) {\n    if (command.isWithScores()) {\n      Mono<Set<Tuple>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZRANGE_ENTRY,keyBuf,start,end,\"WITHSCORES\");\n      flux=m.flatMapMany(e -> Flux.fromIterable(e));\n    }\n else {\n      Mono<Set<byte[]>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZRANGE,keyBuf,start,end);\n      flux=m.flatMapMany(e -> Flux.fromIterable(e).map(b -> new DefaultTuple(b,Double.NaN)));\n    }\n  }\n else {\n    if (command.isWithScores()) {\n      Mono<Set<Tuple>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZREVRANGE_ENTRY,keyBuf,start,end,\"WITHSCORES\");\n      flux=m.flatMapMany(e -> Flux.fromIterable(e));\n    }\n else {\n      Mono<Set<byte[]>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZREVRANGE,keyBuf,start,end);\n      flux=m.flatMapMany(e -> Flux.fromIterable(e).map(b -> new DefaultTuple(b,Double.NaN)));\n    }\n  }\n  return Mono.just(new CommandResponse<>(command,flux));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 259,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 1678,
        "startLineNumber" : 163,
        "startColumnNumber" : 33,
        "endLineNumber" : 194,
        "endColumnNumber" : 9
      },
      "nodeContext" : "command -> {\n  Assert.notNull(command.getKey(),\"Key must not be null!\");\n  Assert.notNull(command.getRange(),\"Range must not be null!\");\n  byte[] keyBuf=toByteArray(command.getKey());\n  long start=command.getRange().getLowerBound().getValue().orElse(0L);\n  long end=command.getRange().getUpperBound().getValue().get();\n  Flux<Tuple> flux;\n  if (command.getDirection() == Direction.ASC) {\n    if (command.isWithScores()) {\n      Mono<Set<Tuple>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZRANGE_ENTRY,keyBuf,start,end,\"WITHSCORES\");\n      flux=m.flatMapMany(e -> Flux.fromIterable(e));\n    }\n else {\n      Mono<Set<byte[]>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZRANGE,keyBuf,start,end);\n      flux=m.flatMapMany(e -> Flux.fromIterable(e).map(b -> new DefaultTuple(b,Double.NaN)));\n    }\n  }\n else {\n    if (command.isWithScores()) {\n      Mono<Set<Tuple>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZREVRANGE_ENTRY,keyBuf,start,end,\"WITHSCORES\");\n      flux=m.flatMapMany(e -> Flux.fromIterable(e));\n    }\n else {\n      Mono<Set<byte[]>> m=read(keyBuf,ByteArrayCodec.INSTANCE,ZREVRANGE,keyBuf,start,end);\n      flux=m.flatMapMany(e -> Flux.fromIterable(e).map(b -> new DefaultTuple(b,Double.NaN)));\n    }\n  }\n  return Mono.just(new CommandResponse<>(command,flux));\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 262,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 193,
        "startColumnNumber" : 12,
        "endLineNumber" : 193,
        "endColumnNumber" : 67
      },
      "nodeContext" : "return Mono.just(new CommandResponse<>(command,flux));\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 10,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 193,
    "startColumnNumber" : 19,
    "endLineNumber" : 193,
    "endColumnNumber" : 23
  } ],
  "layoutRelationDataList" : [ ]
}