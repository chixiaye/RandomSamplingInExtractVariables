{
  "id" : 392,
  "expression" : "namespace",
  "projectName" : "alibaba@nacos",
  "commitID" : "4e7346db1d6657ffe07c96bebd2d348229c2812f",
  "filePath" : "/naming/src/main/java/com/alibaba/nacos/naming/controllers/ServiceController.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "namespace",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 248,
      "startColumnNumber" : 29,
      "endLineNumber" : 248,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 143,
        "startLineNumber" : 248,
        "startColumnNumber" : 16,
        "endLineNumber" : 249,
        "endColumnNumber" : 119
      },
      "nodeContext" : "services.put(namespace,serviceManager.searchServices(namespace,Constants.ANY_PATTERN + expr + Constants.ANY_PATTERN))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 144,
        "startLineNumber" : 248,
        "startColumnNumber" : 16,
        "endLineNumber" : 249,
        "endColumnNumber" : 120
      },
      "nodeContext" : "services.put(namespace,serviceManager.searchServices(namespace,Constants.ANY_PATTERN + expr + Constants.ANY_PATTERN));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 176,
        "startLineNumber" : 247,
        "startColumnNumber" : 71,
        "endLineNumber" : 250,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  services.put(namespace,serviceManager.searchServices(namespace,Constants.ANY_PATTERN + expr + Constants.ANY_PATTERN));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 235,
        "startLineNumber" : 247,
        "startColumnNumber" : 12,
        "endLineNumber" : 250,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (String namespace : serviceManager.getAllNamespaces()) {\n  services.put(namespace,serviceManager.searchServices(namespace,Constants.ANY_PATTERN + expr + Constants.ANY_PATTERN));\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 26,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 259,
        "startLineNumber" : 246,
        "startColumnNumber" : 15,
        "endLineNumber" : 251,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  String namespace : serviceManager.getAllNamespaces()) {\n    services.put(namespace,serviceManager.searchServices(namespace,Constants.ANY_PATTERN + expr + Constants.ANY_PATTERN));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 27,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 474,
        "startLineNumber" : 243,
        "startColumnNumber" : 8,
        "endLineNumber" : 251,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (StringUtils.isNotBlank(namespaceId)) {\n  services.put(namespaceId,serviceManager.searchServices(namespaceId,Constants.ANY_PATTERN + expr + Constants.ANY_PATTERN));\n}\n else {\n  for (  String namespace : serviceManager.getAllNamespaces()) {\n    services.put(namespace,serviceManager.searchServices(namespace,Constants.ANY_PATTERN + expr + Constants.ANY_PATTERN));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 50,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1293,
        "startLineNumber" : 240,
        "startColumnNumber" : 69,
        "endLineNumber" : 269,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,List<Service>> services=new HashMap<>(16);\n  if (StringUtils.isNotBlank(namespaceId)) {\n    services.put(namespaceId,serviceManager.searchServices(namespaceId,Constants.ANY_PATTERN + expr + Constants.ANY_PATTERN));\n  }\n else {\n    for (    String namespace : serviceManager.getAllNamespaces()) {\n      services.put(namespace,serviceManager.searchServices(namespace,Constants.ANY_PATTERN + expr + Constants.ANY_PATTERN));\n    }\n  }\n  Map<String,Set<String>> serviceNameMap=new HashMap<>(16);\n  for (  String namespace : services.keySet()) {\n    serviceNameMap.put(namespace,new HashSet<>());\n    for (    Service service : services.get(namespace)) {\n      if (distroMapper.responsible(service.getName()) || !responsibleOnly) {\n        serviceNameMap.get(namespace).add(NamingUtils.getServiceName(service.getName()));\n      }\n    }\n  }\n  ObjectNode result=JacksonUtils.createEmptyJsonNode();\n  result.replace(\"services\",JacksonUtils.transferToJsonNode(serviceNameMap));\n  result.put(\"count\",services.size());\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 166,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1872,
        "startLineNumber" : 228,
        "startColumnNumber" : 4,
        "endLineNumber" : 269,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Search service.\n * @param namespaceId     namespace\n * @param expr            search pattern\n * @param responsibleOnly whether only search responsible service\n * @return search result\n */\n@RequestMapping(\"/names\") @Secured(parser=NamingResourceParser.class,action=ActionTypes.READ) public ObjectNode searchService(@RequestParam(defaultValue=StringUtils.EMPTY) String namespaceId,@RequestParam(defaultValue=StringUtils.EMPTY) String expr,@RequestParam(required=false) boolean responsibleOnly){\n  Map<String,List<Service>> services=new HashMap<>(16);\n  if (StringUtils.isNotBlank(namespaceId)) {\n    services.put(namespaceId,serviceManager.searchServices(namespaceId,Constants.ANY_PATTERN + expr + Constants.ANY_PATTERN));\n  }\n else {\n    for (    String namespace : serviceManager.getAllNamespaces()) {\n      services.put(namespace,serviceManager.searchServices(namespace,Constants.ANY_PATTERN + expr + Constants.ANY_PATTERN));\n    }\n  }\n  Map<String,Set<String>> serviceNameMap=new HashMap<>(16);\n  for (  String namespace : services.keySet()) {\n    serviceNameMap.put(namespace,new HashSet<>());\n    for (    Service service : services.get(namespace)) {\n      if (distroMapper.responsible(service.getName()) || !responsibleOnly) {\n        serviceNameMap.get(namespace).add(NamingUtils.getServiceName(service.getName()));\n      }\n    }\n  }\n  ObjectNode result=JacksonUtils.createEmptyJsonNode();\n  result.replace(\"services\",JacksonUtils.transferToJsonNode(serviceNameMap));\n  result.put(\"count\",services.size());\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 217,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 143,
        "startLineNumber" : 248,
        "startColumnNumber" : 16,
        "endLineNumber" : 249,
        "endColumnNumber" : 119
      },
      "nodeContext" : "services.put(namespace,serviceManager.searchServices(namespace,Constants.ANY_PATTERN + expr + Constants.ANY_PATTERN))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "namespace",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 249,
      "startColumnNumber" : 54,
      "endLineNumber" : 249,
      "endColumnNumber" : 63
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 249,
        "startColumnNumber" : 24,
        "endLineNumber" : 249,
        "endColumnNumber" : 118
      },
      "nodeContext" : "serviceManager.searchServices(namespace,Constants.ANY_PATTERN + expr + Constants.ANY_PATTERN)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 143,
        "startLineNumber" : 248,
        "startColumnNumber" : 16,
        "endLineNumber" : 249,
        "endColumnNumber" : 119
      },
      "nodeContext" : "services.put(namespace,serviceManager.searchServices(namespace,Constants.ANY_PATTERN + expr + Constants.ANY_PATTERN))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 144,
        "startLineNumber" : 248,
        "startColumnNumber" : 16,
        "endLineNumber" : 249,
        "endColumnNumber" : 120
      },
      "nodeContext" : "services.put(namespace,serviceManager.searchServices(namespace,Constants.ANY_PATTERN + expr + Constants.ANY_PATTERN));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 176,
        "startLineNumber" : 247,
        "startColumnNumber" : 71,
        "endLineNumber" : 250,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  services.put(namespace,serviceManager.searchServices(namespace,Constants.ANY_PATTERN + expr + Constants.ANY_PATTERN));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 235,
        "startLineNumber" : 247,
        "startColumnNumber" : 12,
        "endLineNumber" : 250,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (String namespace : serviceManager.getAllNamespaces()) {\n  services.put(namespace,serviceManager.searchServices(namespace,Constants.ANY_PATTERN + expr + Constants.ANY_PATTERN));\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 26,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 259,
        "startLineNumber" : 246,
        "startColumnNumber" : 15,
        "endLineNumber" : 251,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  for (  String namespace : serviceManager.getAllNamespaces()) {\n    services.put(namespace,serviceManager.searchServices(namespace,Constants.ANY_PATTERN + expr + Constants.ANY_PATTERN));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 27,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 474,
        "startLineNumber" : 243,
        "startColumnNumber" : 8,
        "endLineNumber" : 251,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (StringUtils.isNotBlank(namespaceId)) {\n  services.put(namespaceId,serviceManager.searchServices(namespaceId,Constants.ANY_PATTERN + expr + Constants.ANY_PATTERN));\n}\n else {\n  for (  String namespace : serviceManager.getAllNamespaces()) {\n    services.put(namespace,serviceManager.searchServices(namespace,Constants.ANY_PATTERN + expr + Constants.ANY_PATTERN));\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 50,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1293,
        "startLineNumber" : 240,
        "startColumnNumber" : 69,
        "endLineNumber" : 269,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,List<Service>> services=new HashMap<>(16);\n  if (StringUtils.isNotBlank(namespaceId)) {\n    services.put(namespaceId,serviceManager.searchServices(namespaceId,Constants.ANY_PATTERN + expr + Constants.ANY_PATTERN));\n  }\n else {\n    for (    String namespace : serviceManager.getAllNamespaces()) {\n      services.put(namespace,serviceManager.searchServices(namespace,Constants.ANY_PATTERN + expr + Constants.ANY_PATTERN));\n    }\n  }\n  Map<String,Set<String>> serviceNameMap=new HashMap<>(16);\n  for (  String namespace : services.keySet()) {\n    serviceNameMap.put(namespace,new HashSet<>());\n    for (    Service service : services.get(namespace)) {\n      if (distroMapper.responsible(service.getName()) || !responsibleOnly) {\n        serviceNameMap.get(namespace).add(NamingUtils.getServiceName(service.getName()));\n      }\n    }\n  }\n  ObjectNode result=JacksonUtils.createEmptyJsonNode();\n  result.replace(\"services\",JacksonUtils.transferToJsonNode(serviceNameMap));\n  result.put(\"count\",services.size());\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 166,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1872,
        "startLineNumber" : 228,
        "startColumnNumber" : 4,
        "endLineNumber" : 269,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Search service.\n * @param namespaceId     namespace\n * @param expr            search pattern\n * @param responsibleOnly whether only search responsible service\n * @return search result\n */\n@RequestMapping(\"/names\") @Secured(parser=NamingResourceParser.class,action=ActionTypes.READ) public ObjectNode searchService(@RequestParam(defaultValue=StringUtils.EMPTY) String namespaceId,@RequestParam(defaultValue=StringUtils.EMPTY) String expr,@RequestParam(required=false) boolean responsibleOnly){\n  Map<String,List<Service>> services=new HashMap<>(16);\n  if (StringUtils.isNotBlank(namespaceId)) {\n    services.put(namespaceId,serviceManager.searchServices(namespaceId,Constants.ANY_PATTERN + expr + Constants.ANY_PATTERN));\n  }\n else {\n    for (    String namespace : serviceManager.getAllNamespaces()) {\n      services.put(namespace,serviceManager.searchServices(namespace,Constants.ANY_PATTERN + expr + Constants.ANY_PATTERN));\n    }\n  }\n  Map<String,Set<String>> serviceNameMap=new HashMap<>(16);\n  for (  String namespace : services.keySet()) {\n    serviceNameMap.put(namespace,new HashSet<>());\n    for (    Service service : services.get(namespace)) {\n      if (distroMapper.responsible(service.getName()) || !responsibleOnly) {\n        serviceNameMap.get(namespace).add(NamingUtils.getServiceName(service.getName()));\n      }\n    }\n  }\n  ObjectNode result=JacksonUtils.createEmptyJsonNode();\n  result.replace(\"services\",JacksonUtils.transferToJsonNode(serviceNameMap));\n  result.put(\"count\",services.size());\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 217,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 94,
        "startLineNumber" : 249,
        "startColumnNumber" : 24,
        "endLineNumber" : 249,
        "endColumnNumber" : 118
      },
      "nodeContext" : "serviceManager.searchServices(namespace,Constants.ANY_PATTERN + expr + Constants.ANY_PATTERN)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "namespace",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 255,
      "startColumnNumber" : 31,
      "endLineNumber" : 255,
      "endColumnNumber" : 40
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 255,
        "startColumnNumber" : 12,
        "endLineNumber" : 255,
        "endColumnNumber" : 58
      },
      "nodeContext" : "serviceNameMap.put(namespace,new HashSet<>())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 255,
        "startColumnNumber" : 12,
        "endLineNumber" : 255,
        "endColumnNumber" : 59
      },
      "nodeContext" : "serviceNameMap.put(namespace,new HashSet<>());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 354,
        "startLineNumber" : 254,
        "startColumnNumber" : 51,
        "endLineNumber" : 261,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  serviceNameMap.put(namespace,new HashSet<>());\n  for (  Service service : services.get(namespace)) {\n    if (distroMapper.responsible(service.getName()) || !responsibleOnly) {\n      serviceNameMap.get(namespace).add(NamingUtils.getServiceName(service.getName()));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 44,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 397,
        "startLineNumber" : 254,
        "startColumnNumber" : 8,
        "endLineNumber" : 261,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (String namespace : services.keySet()) {\n  serviceNameMap.put(namespace,new HashSet<>());\n  for (  Service service : services.get(namespace)) {\n    if (distroMapper.responsible(service.getName()) || !responsibleOnly) {\n      serviceNameMap.get(namespace).add(NamingUtils.getServiceName(service.getName()));\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 52,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1293,
        "startLineNumber" : 240,
        "startColumnNumber" : 69,
        "endLineNumber" : 269,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,List<Service>> services=new HashMap<>(16);\n  if (StringUtils.isNotBlank(namespaceId)) {\n    services.put(namespaceId,serviceManager.searchServices(namespaceId,Constants.ANY_PATTERN + expr + Constants.ANY_PATTERN));\n  }\n else {\n    for (    String namespace : serviceManager.getAllNamespaces()) {\n      services.put(namespace,serviceManager.searchServices(namespace,Constants.ANY_PATTERN + expr + Constants.ANY_PATTERN));\n    }\n  }\n  Map<String,Set<String>> serviceNameMap=new HashMap<>(16);\n  for (  String namespace : services.keySet()) {\n    serviceNameMap.put(namespace,new HashSet<>());\n    for (    Service service : services.get(namespace)) {\n      if (distroMapper.responsible(service.getName()) || !responsibleOnly) {\n        serviceNameMap.get(namespace).add(NamingUtils.getServiceName(service.getName()));\n      }\n    }\n  }\n  ObjectNode result=JacksonUtils.createEmptyJsonNode();\n  result.replace(\"services\",JacksonUtils.transferToJsonNode(serviceNameMap));\n  result.put(\"count\",services.size());\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 166,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1872,
        "startLineNumber" : 228,
        "startColumnNumber" : 4,
        "endLineNumber" : 269,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Search service.\n * @param namespaceId     namespace\n * @param expr            search pattern\n * @param responsibleOnly whether only search responsible service\n * @return search result\n */\n@RequestMapping(\"/names\") @Secured(parser=NamingResourceParser.class,action=ActionTypes.READ) public ObjectNode searchService(@RequestParam(defaultValue=StringUtils.EMPTY) String namespaceId,@RequestParam(defaultValue=StringUtils.EMPTY) String expr,@RequestParam(required=false) boolean responsibleOnly){\n  Map<String,List<Service>> services=new HashMap<>(16);\n  if (StringUtils.isNotBlank(namespaceId)) {\n    services.put(namespaceId,serviceManager.searchServices(namespaceId,Constants.ANY_PATTERN + expr + Constants.ANY_PATTERN));\n  }\n else {\n    for (    String namespace : serviceManager.getAllNamespaces()) {\n      services.put(namespace,serviceManager.searchServices(namespace,Constants.ANY_PATTERN + expr + Constants.ANY_PATTERN));\n    }\n  }\n  Map<String,Set<String>> serviceNameMap=new HashMap<>(16);\n  for (  String namespace : services.keySet()) {\n    serviceNameMap.put(namespace,new HashSet<>());\n    for (    Service service : services.get(namespace)) {\n      if (distroMapper.responsible(service.getName()) || !responsibleOnly) {\n        serviceNameMap.get(namespace).add(NamingUtils.getServiceName(service.getName()));\n      }\n    }\n  }\n  ObjectNode result=JacksonUtils.createEmptyJsonNode();\n  result.replace(\"services\",JacksonUtils.transferToJsonNode(serviceNameMap));\n  result.put(\"count\",services.size());\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 217,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 255,
        "startColumnNumber" : 12,
        "endLineNumber" : 255,
        "endColumnNumber" : 59
      },
      "nodeContext" : "serviceNameMap.put(namespace,new HashSet<>());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "namespace",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 256,
      "startColumnNumber" : 48,
      "endLineNumber" : 256,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 256,
        "startColumnNumber" : 35,
        "endLineNumber" : 256,
        "endColumnNumber" : 58
      },
      "nodeContext" : "services.get(namespace)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 270,
        "startLineNumber" : 256,
        "startColumnNumber" : 12,
        "endLineNumber" : 260,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (Service service : services.get(namespace)) {\n  if (distroMapper.responsible(service.getName()) || !responsibleOnly) {\n    serviceNameMap.get(namespace).add(NamingUtils.getServiceName(service.getName()));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 34,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 354,
        "startLineNumber" : 254,
        "startColumnNumber" : 51,
        "endLineNumber" : 261,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  serviceNameMap.put(namespace,new HashSet<>());\n  for (  Service service : services.get(namespace)) {\n    if (distroMapper.responsible(service.getName()) || !responsibleOnly) {\n      serviceNameMap.get(namespace).add(NamingUtils.getServiceName(service.getName()));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 44,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 397,
        "startLineNumber" : 254,
        "startColumnNumber" : 8,
        "endLineNumber" : 261,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (String namespace : services.keySet()) {\n  serviceNameMap.put(namespace,new HashSet<>());\n  for (  Service service : services.get(namespace)) {\n    if (distroMapper.responsible(service.getName()) || !responsibleOnly) {\n      serviceNameMap.get(namespace).add(NamingUtils.getServiceName(service.getName()));\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 52,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1293,
        "startLineNumber" : 240,
        "startColumnNumber" : 69,
        "endLineNumber" : 269,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,List<Service>> services=new HashMap<>(16);\n  if (StringUtils.isNotBlank(namespaceId)) {\n    services.put(namespaceId,serviceManager.searchServices(namespaceId,Constants.ANY_PATTERN + expr + Constants.ANY_PATTERN));\n  }\n else {\n    for (    String namespace : serviceManager.getAllNamespaces()) {\n      services.put(namespace,serviceManager.searchServices(namespace,Constants.ANY_PATTERN + expr + Constants.ANY_PATTERN));\n    }\n  }\n  Map<String,Set<String>> serviceNameMap=new HashMap<>(16);\n  for (  String namespace : services.keySet()) {\n    serviceNameMap.put(namespace,new HashSet<>());\n    for (    Service service : services.get(namespace)) {\n      if (distroMapper.responsible(service.getName()) || !responsibleOnly) {\n        serviceNameMap.get(namespace).add(NamingUtils.getServiceName(service.getName()));\n      }\n    }\n  }\n  ObjectNode result=JacksonUtils.createEmptyJsonNode();\n  result.replace(\"services\",JacksonUtils.transferToJsonNode(serviceNameMap));\n  result.put(\"count\",services.size());\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 166,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1872,
        "startLineNumber" : 228,
        "startColumnNumber" : 4,
        "endLineNumber" : 269,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Search service.\n * @param namespaceId     namespace\n * @param expr            search pattern\n * @param responsibleOnly whether only search responsible service\n * @return search result\n */\n@RequestMapping(\"/names\") @Secured(parser=NamingResourceParser.class,action=ActionTypes.READ) public ObjectNode searchService(@RequestParam(defaultValue=StringUtils.EMPTY) String namespaceId,@RequestParam(defaultValue=StringUtils.EMPTY) String expr,@RequestParam(required=false) boolean responsibleOnly){\n  Map<String,List<Service>> services=new HashMap<>(16);\n  if (StringUtils.isNotBlank(namespaceId)) {\n    services.put(namespaceId,serviceManager.searchServices(namespaceId,Constants.ANY_PATTERN + expr + Constants.ANY_PATTERN));\n  }\n else {\n    for (    String namespace : serviceManager.getAllNamespaces()) {\n      services.put(namespace,serviceManager.searchServices(namespace,Constants.ANY_PATTERN + expr + Constants.ANY_PATTERN));\n    }\n  }\n  Map<String,Set<String>> serviceNameMap=new HashMap<>(16);\n  for (  String namespace : services.keySet()) {\n    serviceNameMap.put(namespace,new HashSet<>());\n    for (    Service service : services.get(namespace)) {\n      if (distroMapper.responsible(service.getName()) || !responsibleOnly) {\n        serviceNameMap.get(namespace).add(NamingUtils.getServiceName(service.getName()));\n      }\n    }\n  }\n  ObjectNode result=JacksonUtils.createEmptyJsonNode();\n  result.replace(\"services\",JacksonUtils.transferToJsonNode(serviceNameMap));\n  result.put(\"count\",services.size());\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 217,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 256,
        "startColumnNumber" : 35,
        "endLineNumber" : 256,
        "endColumnNumber" : 58
      },
      "nodeContext" : "services.get(namespace)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "namespace",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 258,
      "startColumnNumber" : 39,
      "endLineNumber" : 258,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 258,
        "startColumnNumber" : 20,
        "endLineNumber" : 258,
        "endColumnNumber" : 49
      },
      "nodeContext" : "serviceNameMap.get(namespace)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 258,
        "startColumnNumber" : 20,
        "endLineNumber" : 258,
        "endColumnNumber" : 100
      },
      "nodeContext" : "serviceNameMap.get(namespace).add(NamingUtils.getServiceName(service.getName()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 258,
        "startColumnNumber" : 20,
        "endLineNumber" : 258,
        "endColumnNumber" : 101
      },
      "nodeContext" : "serviceNameMap.get(namespace).add(NamingUtils.getServiceName(service.getName()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 121,
        "startLineNumber" : 257,
        "startColumnNumber" : 85,
        "endLineNumber" : 259,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  serviceNameMap.get(namespace).add(NamingUtils.getServiceName(service.getName()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 190,
        "startLineNumber" : 257,
        "startColumnNumber" : 16,
        "endLineNumber" : 259,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (distroMapper.responsible(service.getName()) || !responsibleOnly) {\n  serviceNameMap.get(namespace).add(NamingUtils.getServiceName(service.getName()));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 24,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 222,
        "startLineNumber" : 256,
        "startColumnNumber" : 60,
        "endLineNumber" : 260,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  if (distroMapper.responsible(service.getName()) || !responsibleOnly) {\n    serviceNameMap.get(namespace).add(NamingUtils.getServiceName(service.getName()));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 25,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 270,
        "startLineNumber" : 256,
        "startColumnNumber" : 12,
        "endLineNumber" : 260,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (Service service : services.get(namespace)) {\n  if (distroMapper.responsible(service.getName()) || !responsibleOnly) {\n    serviceNameMap.get(namespace).add(NamingUtils.getServiceName(service.getName()));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 34,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 354,
        "startLineNumber" : 254,
        "startColumnNumber" : 51,
        "endLineNumber" : 261,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  serviceNameMap.put(namespace,new HashSet<>());\n  for (  Service service : services.get(namespace)) {\n    if (distroMapper.responsible(service.getName()) || !responsibleOnly) {\n      serviceNameMap.get(namespace).add(NamingUtils.getServiceName(service.getName()));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 44,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 397,
        "startLineNumber" : 254,
        "startColumnNumber" : 8,
        "endLineNumber" : 261,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (String namespace : services.keySet()) {\n  serviceNameMap.put(namespace,new HashSet<>());\n  for (  Service service : services.get(namespace)) {\n    if (distroMapper.responsible(service.getName()) || !responsibleOnly) {\n      serviceNameMap.get(namespace).add(NamingUtils.getServiceName(service.getName()));\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 52,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1293,
        "startLineNumber" : 240,
        "startColumnNumber" : 69,
        "endLineNumber" : 269,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<String,List<Service>> services=new HashMap<>(16);\n  if (StringUtils.isNotBlank(namespaceId)) {\n    services.put(namespaceId,serviceManager.searchServices(namespaceId,Constants.ANY_PATTERN + expr + Constants.ANY_PATTERN));\n  }\n else {\n    for (    String namespace : serviceManager.getAllNamespaces()) {\n      services.put(namespace,serviceManager.searchServices(namespace,Constants.ANY_PATTERN + expr + Constants.ANY_PATTERN));\n    }\n  }\n  Map<String,Set<String>> serviceNameMap=new HashMap<>(16);\n  for (  String namespace : services.keySet()) {\n    serviceNameMap.put(namespace,new HashSet<>());\n    for (    Service service : services.get(namespace)) {\n      if (distroMapper.responsible(service.getName()) || !responsibleOnly) {\n        serviceNameMap.get(namespace).add(NamingUtils.getServiceName(service.getName()));\n      }\n    }\n  }\n  ObjectNode result=JacksonUtils.createEmptyJsonNode();\n  result.replace(\"services\",JacksonUtils.transferToJsonNode(serviceNameMap));\n  result.put(\"count\",services.size());\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 166,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1872,
        "startLineNumber" : 228,
        "startColumnNumber" : 4,
        "endLineNumber" : 269,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Search service.\n * @param namespaceId     namespace\n * @param expr            search pattern\n * @param responsibleOnly whether only search responsible service\n * @return search result\n */\n@RequestMapping(\"/names\") @Secured(parser=NamingResourceParser.class,action=ActionTypes.READ) public ObjectNode searchService(@RequestParam(defaultValue=StringUtils.EMPTY) String namespaceId,@RequestParam(defaultValue=StringUtils.EMPTY) String expr,@RequestParam(required=false) boolean responsibleOnly){\n  Map<String,List<Service>> services=new HashMap<>(16);\n  if (StringUtils.isNotBlank(namespaceId)) {\n    services.put(namespaceId,serviceManager.searchServices(namespaceId,Constants.ANY_PATTERN + expr + Constants.ANY_PATTERN));\n  }\n else {\n    for (    String namespace : serviceManager.getAllNamespaces()) {\n      services.put(namespace,serviceManager.searchServices(namespace,Constants.ANY_PATTERN + expr + Constants.ANY_PATTERN));\n    }\n  }\n  Map<String,Set<String>> serviceNameMap=new HashMap<>(16);\n  for (  String namespace : services.keySet()) {\n    serviceNameMap.put(namespace,new HashSet<>());\n    for (    Service service : services.get(namespace)) {\n      if (distroMapper.responsible(service.getName()) || !responsibleOnly) {\n        serviceNameMap.get(namespace).add(NamingUtils.getServiceName(service.getName()));\n      }\n    }\n  }\n  ObjectNode result=JacksonUtils.createEmptyJsonNode();\n  result.replace(\"services\",JacksonUtils.transferToJsonNode(serviceNameMap));\n  result.put(\"count\",services.size());\n  return result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 217,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 258,
        "startColumnNumber" : 20,
        "endLineNumber" : 258,
        "endColumnNumber" : 101
      },
      "nodeContext" : "serviceNameMap.get(namespace).add(NamingUtils.getServiceName(service.getName()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 248,
    "startColumnNumber" : 29,
    "endLineNumber" : 248,
    "endColumnNumber" : 38
  }, {
    "charLength" : 9,
    "startLineNumber" : 249,
    "startColumnNumber" : 54,
    "endLineNumber" : 249,
    "endColumnNumber" : 63
  }, {
    "charLength" : 9,
    "startLineNumber" : 255,
    "startColumnNumber" : 31,
    "endLineNumber" : 255,
    "endColumnNumber" : 40
  }, {
    "charLength" : 9,
    "startLineNumber" : 256,
    "startColumnNumber" : 48,
    "endLineNumber" : 256,
    "endColumnNumber" : 57
  }, {
    "charLength" : 9,
    "startLineNumber" : 258,
    "startColumnNumber" : 39,
    "endLineNumber" : 258,
    "endColumnNumber" : 48
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 0
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 7
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 1
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 9
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 9
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 6
  } ]
}