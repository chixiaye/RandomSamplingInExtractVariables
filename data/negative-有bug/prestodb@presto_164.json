{
  "id" : 164,
  "expression" : "toList()",
  "projectName" : "prestodb@presto",
  "commitID" : "eff77883d0d24dc6022ecde252612d1430c9fbac",
  "filePath" : "/presto-hive/src/main/java/com/facebook/presto/hive/parquet/ParquetFileWriterFactory.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "toList()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 112,
      "startColumnNumber" : 25,
      "endLineNumber" : 112,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 2,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 168,
        "startLineNumber" : 110,
        "startColumnNumber" : 37,
        "endLineNumber" : 112,
        "endColumnNumber" : 34
      },
      "nodeContext" : "toHiveTypes(schema.getProperty(META_TABLE_COLUMN_TYPES,\"\")).stream().map(hiveType -> hiveType.getType(typeManager)).collect(toList())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 186,
        "startLineNumber" : 110,
        "startColumnNumber" : 19,
        "endLineNumber" : 112,
        "endColumnNumber" : 34
      },
      "nodeContext" : "fileColumnTypes=toHiveTypes(schema.getProperty(META_TABLE_COLUMN_TYPES,\"\")).stream().map(hiveType -> hiveType.getType(typeManager)).collect(toList())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 24,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 198,
        "startLineNumber" : 110,
        "startColumnNumber" : 8,
        "endLineNumber" : 112,
        "endColumnNumber" : 35
      },
      "nodeContext" : "List<Type> fileColumnTypes=toHiveTypes(schema.getProperty(META_TABLE_COLUMN_TYPES,\"\")).stream().map(hiveType -> hiveType.getType(typeManager)).collect(toList());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 30,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1825,
        "startLineNumber" : 93,
        "startColumnNumber" : 4,
        "endLineNumber" : 138,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (!isParquetOptimizedWriterEnabled(session)) {\n    return Optional.empty();\n  }\n  if (!MapredParquetOutputFormat.class.getName().equals(storageFormat.getOutputFormat())) {\n    return Optional.empty();\n  }\n  ParquetWriterOptions parquetWriterOptions=ParquetWriterOptions.builder().setMaxPageSize(getParquetWriterPageSize(session)).setMaxBlockSize(getParquetWriterBlockSize(session)).build();\n  CompressionCodecName compressionCodecName=getCompression(conf);\n  List<String> fileColumnNames=Splitter.on(',').trimResults().omitEmptyStrings().splitToList(schema.getProperty(META_TABLE_COLUMNS,\"\"));\n  List<Type> fileColumnTypes=toHiveTypes(schema.getProperty(META_TABLE_COLUMN_TYPES,\"\")).stream().map(hiveType -> hiveType.getType(typeManager)).collect(toList());\n  int[] fileInputColumnIndexes=fileColumnNames.stream().mapToInt(inputColumnNames::indexOf).toArray();\n  try {\n    FileSystem fileSystem=hdfsEnvironment.getFileSystem(session.getUser(),path,conf);\n    Callable<Void> rollbackAction=() -> {\n      fileSystem.delete(path,false);\n      return null;\n    }\n;\n    return Optional.of(new ParquetFileWriter(fileSystem.create(path),rollbackAction,fileColumnNames,fileColumnTypes,parquetWriterOptions,fileInputColumnIndexes,compressionCodecName));\n  }\n catch (  IOException e) {\n    throw new PrestoException(HIVE_WRITER_OPEN_ERROR,\"Error creating Parquet file\",e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 188,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2162,
        "startLineNumber" : 84,
        "startColumnNumber" : 4,
        "endLineNumber" : 138,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public Optional<HiveFileWriter> createFileWriter(Path path,List<String> inputColumnNames,StorageFormat storageFormat,Properties schema,JobConf conf,ConnectorSession session,Optional<EncryptionInformation> encryptionInformation){\n  if (!isParquetOptimizedWriterEnabled(session)) {\n    return Optional.empty();\n  }\n  if (!MapredParquetOutputFormat.class.getName().equals(storageFormat.getOutputFormat())) {\n    return Optional.empty();\n  }\n  ParquetWriterOptions parquetWriterOptions=ParquetWriterOptions.builder().setMaxPageSize(getParquetWriterPageSize(session)).setMaxBlockSize(getParquetWriterBlockSize(session)).build();\n  CompressionCodecName compressionCodecName=getCompression(conf);\n  List<String> fileColumnNames=Splitter.on(',').trimResults().omitEmptyStrings().splitToList(schema.getProperty(META_TABLE_COLUMNS,\"\"));\n  List<Type> fileColumnTypes=toHiveTypes(schema.getProperty(META_TABLE_COLUMN_TYPES,\"\")).stream().map(hiveType -> hiveType.getType(typeManager)).collect(toList());\n  int[] fileInputColumnIndexes=fileColumnNames.stream().mapToInt(inputColumnNames::indexOf).toArray();\n  try {\n    FileSystem fileSystem=hdfsEnvironment.getFileSystem(session.getUser(),path,conf);\n    Callable<Void> rollbackAction=() -> {\n      fileSystem.delete(path,false);\n      return null;\n    }\n;\n    return Optional.of(new ParquetFileWriter(fileSystem.create(path),rollbackAction,fileColumnNames,fileColumnTypes,parquetWriterOptions,fileInputColumnIndexes,compressionCodecName));\n  }\n catch (  IOException e) {\n    throw new PrestoException(HIVE_WRITER_OPEN_ERROR,\"Error creating Parquet file\",e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 232,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 168,
        "startLineNumber" : 110,
        "startColumnNumber" : 37,
        "endLineNumber" : 112,
        "endColumnNumber" : 34
      },
      "nodeContext" : "toHiveTypes(schema.getProperty(META_TABLE_COLUMN_TYPES,\"\")).stream().map(hiveType -> hiveType.getType(typeManager)).collect(toList())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 22,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.util.stream.Collector<java.lang.Object,,java.util.List<java.lang.Object>>"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 112,
    "startColumnNumber" : 25,
    "endLineNumber" : 112,
    "endColumnNumber" : 33
  } ],
  "layoutRelationDataList" : [ ]
}