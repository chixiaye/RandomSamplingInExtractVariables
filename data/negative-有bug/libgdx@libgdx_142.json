{
  "id" : 142,
  "expression" : "c1.contains(0,2)",
  "projectName" : "libgdx@libgdx",
  "commitID" : "3485b16e8979c0141421bc80cb8831b7a0403f67",
  "filePath" : "/gdx/test/com/badlogic/gdx/math/Shape2DTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "c1.contains(0,2)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 17,
      "startLineNumber" : 24,
      "startColumnNumber" : 14,
      "endLineNumber" : 24,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 5,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 24,
        "startColumnNumber" : 2,
        "endLineNumber" : 24,
        "endColumnNumber" : 32
      },
      "nodeContext" : "assertFalse(c1.contains(0,2))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 24,
        "startColumnNumber" : 2,
        "endLineNumber" : 24,
        "endColumnNumber" : 33
      },
      "nodeContext" : "assertFalse(c1.contains(0,2));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 462,
        "startLineNumber" : 12,
        "startColumnNumber" : 27,
        "endLineNumber" : 28,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  Circle c1=new Circle(0,0,1);\n  Circle c2=new Circle(0,0,1);\n  Circle c3=new Circle(2,0,1);\n  Circle c4=new Circle(0,0,2);\n  assertTrue(c1.overlaps(c1));\n  assertTrue(c1.overlaps(c2));\n  assertFalse(c1.overlaps(c3));\n  assertTrue(c1.overlaps(c4));\n  assertTrue(c4.overlaps(c1));\n  assertTrue(c1.contains(0,1));\n  assertFalse(c1.contains(0,2));\n  assertTrue(c1.contains(c1));\n  assertFalse(c1.contains(c4));\n  assertTrue(c4.contains(c1));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 117,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 495,
        "startLineNumber" : 11,
        "startColumnNumber" : 1,
        "endLineNumber" : 28,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testCircle(){\n  Circle c1=new Circle(0,0,1);\n  Circle c2=new Circle(0,0,1);\n  Circle c3=new Circle(2,0,1);\n  Circle c4=new Circle(0,0,2);\n  assertTrue(c1.overlaps(c1));\n  assertTrue(c1.overlaps(c2));\n  assertFalse(c1.overlaps(c3));\n  assertTrue(c1.overlaps(c4));\n  assertTrue(c4.overlaps(c1));\n  assertTrue(c1.contains(0,1));\n  assertFalse(c1.contains(0,2));\n  assertTrue(c1.contains(c1));\n  assertFalse(c1.contains(c4));\n  assertTrue(c4.contains(c1));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 123,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 24,
        "startColumnNumber" : 2,
        "endLineNumber" : 24,
        "endColumnNumber" : 33
      },
      "nodeContext" : "assertFalse(c1.contains(0,2));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 4,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 17,
    "startLineNumber" : 24,
    "startColumnNumber" : 14,
    "endLineNumber" : 24,
    "endColumnNumber" : 31
  } ],
  "layoutRelationDataList" : [ ]
}