{
  "id" : 390,
  "expression" : "\"Epoch: %d,       %s\\n\"",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/ai/GeneticAlgorithm_textSearch.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Epoch: %d,       %s\\n\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 77,
      "startColumnNumber" : 45,
      "endLineNumber" : 77,
      "endColumnNumber" : 68
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 77,
        "startColumnNumber" : 27,
        "endLineNumber" : 77,
        "endColumnNumber" : 85
      },
      "nodeContext" : "System.out.printf(\"Epoch: %d,       %s\\n\",epoch,fittest)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 77,
        "startColumnNumber" : 27,
        "endLineNumber" : 77,
        "endColumnNumber" : 86
      },
      "nodeContext" : "System.out.printf(\"Epoch: %d,       %s\\n\",epoch,fittest);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 77,
        "startColumnNumber" : 6,
        "endLineNumber" : 77,
        "endColumnNumber" : 86
      },
      "nodeContext" : "if (epoch % 50 == 0) System.out.printf(\"Epoch: %d,       %s\\n\",epoch,fittest);\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1790,
        "startLineNumber" : 47,
        "startColumnNumber" : 73,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  double fitnessSum=0;\n  for (int i=1; i <= POPULATION_SZ; i++) {\n    Individual in=generation[i];\n    fitnessSum+=in.fitness;\n    lo[i]=hi[i]=0;\n  }\n  Individual fittest=null;\n  double maxFitness=0;\n  for (int i=1; i <= POPULATION_SZ; i++) {\n    Individual in=generation[i];\n    double norm=in.fitness / fitnessSum;\n    lo[i]=hi[i - 1]=lo[i - 1] + norm;\n    if (in.fitness > maxFitness) {\n      maxFitness=in.fitness;\n      fittest=in;\n    }\n  }\n  if (epoch % 50 == 0)   System.out.printf(\"Epoch: %d,       %s\\n\",epoch,fittest);\n  for (int i=1; i <= POPULATION_SZ; i++) {\n    Individual parent1=selectIndividual(generation,lo,hi);\n    Individual parent2=selectIndividual(generation,lo,hi);\n    Individual child=crossover(parent1,parent2);\n    for (int j=0; j < TL; j++) {\n      if (Math.random() < MUTATION_RATE) {\n        child=mutate(child,j);\n      }\n    }\n    nextGeneration[i]=child;\n    if (child.str.equals(TARGET)) {\n      System.out.println(\"\\nFOUND ANSWER: \" + child + \"\\n\");\n      return;\n    }\n  }\n  generation=nextGeneration;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 228,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1859,
        "startLineNumber" : 47,
        "startColumnNumber" : 4,
        "endLineNumber" : 106,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int epoch=1; epoch <= MAX_EPOCH; epoch++, power+=POWER_INC) {\n  double fitnessSum=0;\n  for (int i=1; i <= POPULATION_SZ; i++) {\n    Individual in=generation[i];\n    fitnessSum+=in.fitness;\n    lo[i]=hi[i]=0;\n  }\n  Individual fittest=null;\n  double maxFitness=0;\n  for (int i=1; i <= POPULATION_SZ; i++) {\n    Individual in=generation[i];\n    double norm=in.fitness / fitnessSum;\n    lo[i]=hi[i - 1]=lo[i - 1] + norm;\n    if (in.fitness > maxFitness) {\n      maxFitness=in.fitness;\n      fittest=in;\n    }\n  }\n  if (epoch % 50 == 0)   System.out.printf(\"Epoch: %d,       %s\\n\",epoch,fittest);\n  for (int i=1; i <= POPULATION_SZ; i++) {\n    Individual parent1=selectIndividual(generation,lo,hi);\n    Individual parent2=selectIndividual(generation,lo,hi);\n    Individual child=crossover(parent1,parent2);\n    for (int j=0; j < TL; j++) {\n      if (Math.random() < MUTATION_RATE) {\n        child=mutate(child,j);\n      }\n    }\n    nextGeneration[i]=child;\n    if (child.str.equals(TARGET)) {\n      System.out.println(\"\\nFOUND ANSWER: \" + child + \"\\n\");\n      return;\n    }\n  }\n  generation=nextGeneration;\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 242,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2314,
        "startLineNumber" : 32,
        "startColumnNumber" : 20,
        "endLineNumber" : 107,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  power=1.0;\n  Individual[] generation=new Individual[POPULATION_SZ + 1];\n  Individual[] nextGeneration=new Individual[POPULATION_SZ + 1];\n  for (int i=1; i <= POPULATION_SZ; i++) {\n    generation[i]=new Individual();\n  }\n  double[] lo=new double[POPULATION_SZ + 1];\n  double[] hi=new double[POPULATION_SZ + 1];\n  for (int epoch=1; epoch <= MAX_EPOCH; epoch++, power+=POWER_INC) {\n    double fitnessSum=0;\n    for (int i=1; i <= POPULATION_SZ; i++) {\n      Individual in=generation[i];\n      fitnessSum+=in.fitness;\n      lo[i]=hi[i]=0;\n    }\n    Individual fittest=null;\n    double maxFitness=0;\n    for (int i=1; i <= POPULATION_SZ; i++) {\n      Individual in=generation[i];\n      double norm=in.fitness / fitnessSum;\n      lo[i]=hi[i - 1]=lo[i - 1] + norm;\n      if (in.fitness > maxFitness) {\n        maxFitness=in.fitness;\n        fittest=in;\n      }\n    }\n    if (epoch % 50 == 0)     System.out.printf(\"Epoch: %d,       %s\\n\",epoch,fittest);\n    for (int i=1; i <= POPULATION_SZ; i++) {\n      Individual parent1=selectIndividual(generation,lo,hi);\n      Individual parent2=selectIndividual(generation,lo,hi);\n      Individual child=crossover(parent1,parent2);\n      for (int j=0; j < TL; j++) {\n        if (Math.random() < MUTATION_RATE) {\n          child=mutate(child,j);\n        }\n      }\n      nextGeneration[i]=child;\n      if (child.str.equals(TARGET)) {\n        System.out.println(\"\\nFOUND ANSWER: \" + child + \"\\n\");\n        return;\n      }\n    }\n    generation=nextGeneration;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 323,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2332,
        "startLineNumber" : 32,
        "startColumnNumber" : 2,
        "endLineNumber" : 107,
        "endColumnNumber" : 3
      },
      "nodeContext" : "static void run(){\n  power=1.0;\n  Individual[] generation=new Individual[POPULATION_SZ + 1];\n  Individual[] nextGeneration=new Individual[POPULATION_SZ + 1];\n  for (int i=1; i <= POPULATION_SZ; i++) {\n    generation[i]=new Individual();\n  }\n  double[] lo=new double[POPULATION_SZ + 1];\n  double[] hi=new double[POPULATION_SZ + 1];\n  for (int epoch=1; epoch <= MAX_EPOCH; epoch++, power+=POWER_INC) {\n    double fitnessSum=0;\n    for (int i=1; i <= POPULATION_SZ; i++) {\n      Individual in=generation[i];\n      fitnessSum+=in.fitness;\n      lo[i]=hi[i]=0;\n    }\n    Individual fittest=null;\n    double maxFitness=0;\n    for (int i=1; i <= POPULATION_SZ; i++) {\n      Individual in=generation[i];\n      double norm=in.fitness / fitnessSum;\n      lo[i]=hi[i - 1]=lo[i - 1] + norm;\n      if (in.fitness > maxFitness) {\n        maxFitness=in.fitness;\n        fittest=in;\n      }\n    }\n    if (epoch % 50 == 0)     System.out.printf(\"Epoch: %d,       %s\\n\",epoch,fittest);\n    for (int i=1; i <= POPULATION_SZ; i++) {\n      Individual parent1=selectIndividual(generation,lo,hi);\n      Individual parent2=selectIndividual(generation,lo,hi);\n      Individual child=crossover(parent1,parent2);\n      for (int j=0; j < TL; j++) {\n        if (Math.random() < MUTATION_RATE) {\n          child=mutate(child,j);\n        }\n      }\n      nextGeneration[i]=child;\n      if (child.str.equals(TARGET)) {\n        System.out.println(\"\\nFOUND ANSWER: \" + child + \"\\n\");\n        return;\n      }\n    }\n    generation=nextGeneration;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 327,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 77,
        "startColumnNumber" : 6,
        "endLineNumber" : 77,
        "endColumnNumber" : 86
      },
      "nodeContext" : "if (epoch % 50 == 0) System.out.printf(\"Epoch: %d,       %s\\n\",epoch,fittest);\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 4,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 23,
    "startLineNumber" : 77,
    "startColumnNumber" : 45,
    "endLineNumber" : 77,
    "endColumnNumber" : 68
  } ],
  "layoutRelationDataList" : [ ]
}