{
  "id" : 27,
  "expression" : "node",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/graphtheory/networkflow/EdmondsKarpAdjacencyList.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "node",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 54,
      "startColumnNumber" : 10,
      "endLineNumber" : 54,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 54,
        "startColumnNumber" : 10,
        "endLineNumber" : 54,
        "endColumnNumber" : 19
      },
      "nodeContext" : "node == t",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 54,
        "startColumnNumber" : 6,
        "endLineNumber" : 54,
        "endColumnNumber" : 27
      },
      "nodeContext" : "if (node == t) break;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 294,
        "startLineNumber" : 52,
        "startColumnNumber" : 25,
        "endLineNumber" : 64,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int node=q.poll();\n  if (node == t)   break;\n  for (  Edge edge : graph[node]) {\n    long cap=edge.remainingCapacity();\n    if (cap > 0 && !visited(edge.to)) {\n      visit(edge.to);\n      prev[edge.to]=edge;\n      q.offer(edge.to);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 62,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 315,
        "startLineNumber" : 52,
        "startColumnNumber" : 4,
        "endLineNumber" : 64,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (!q.isEmpty()) {\n  int node=q.poll();\n  if (node == t)   break;\n  for (  Edge edge : graph[node]) {\n    long cap=edge.remainingCapacity();\n    if (cap > 0 && !visited(edge.to)) {\n      visit(edge.to);\n      prev[edge.to]=edge;\n      q.offer(edge.to);\n    }\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 67,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1006,
        "startLineNumber" : 43,
        "startColumnNumber" : 21,
        "endLineNumber" : 80,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Edge[] prev=new Edge[n];\n  Queue<Integer> q=new ArrayDeque<>(n);\n  visit(s);\n  q.offer(s);\n  while (!q.isEmpty()) {\n    int node=q.poll();\n    if (node == t)     break;\n    for (    Edge edge : graph[node]) {\n      long cap=edge.remainingCapacity();\n      if (cap > 0 && !visited(edge.to)) {\n        visit(edge.to);\n        prev[edge.to]=edge;\n        q.offer(edge.to);\n      }\n    }\n  }\n  if (prev[t] == null)   return 0;\n  long bottleNeck=Long.MAX_VALUE;\n  for (Edge edge=prev[t]; edge != null; edge=prev[edge.from])   bottleNeck=min(bottleNeck,edge.remainingCapacity());\n  for (Edge edge=prev[t]; edge != null; edge=prev[edge.from])   edge.augment(bottleNeck);\n  return bottleNeck;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 172,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1025,
        "startLineNumber" : 43,
        "startColumnNumber" : 2,
        "endLineNumber" : 80,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private long bfs(){\n  Edge[] prev=new Edge[n];\n  Queue<Integer> q=new ArrayDeque<>(n);\n  visit(s);\n  q.offer(s);\n  while (!q.isEmpty()) {\n    int node=q.poll();\n    if (node == t)     break;\n    for (    Edge edge : graph[node]) {\n      long cap=edge.remainingCapacity();\n      if (cap > 0 && !visited(edge.to)) {\n        visit(edge.to);\n        prev[edge.to]=edge;\n        q.offer(edge.to);\n      }\n    }\n  }\n  if (prev[t] == null)   return 0;\n  long bottleNeck=Long.MAX_VALUE;\n  for (Edge edge=prev[t]; edge != null; edge=prev[edge.from])   bottleNeck=min(bottleNeck,edge.remainingCapacity());\n  for (Edge edge=prev[t]; edge != null; edge=prev[edge.from])   edge.augment(bottleNeck);\n  return bottleNeck;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 176,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 54,
        "startColumnNumber" : 6,
        "endLineNumber" : 54,
        "endColumnNumber" : 27
      },
      "nodeContext" : "if (node == t) break;\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "node",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 56,
      "startColumnNumber" : 29,
      "endLineNumber" : 56,
      "endColumnNumber" : 33
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 56,
        "startColumnNumber" : 23,
        "endLineNumber" : 56,
        "endColumnNumber" : 34
      },
      "nodeContext" : "graph[node]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 224,
        "startLineNumber" : 56,
        "startColumnNumber" : 6,
        "endLineNumber" : 63,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (Edge edge : graph[node]) {\n  long cap=edge.remainingCapacity();\n  if (cap > 0 && !visited(edge.to)) {\n    visit(edge.to);\n    prev[edge.to]=edge;\n    q.offer(edge.to);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 49,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 294,
        "startLineNumber" : 52,
        "startColumnNumber" : 25,
        "endLineNumber" : 64,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int node=q.poll();\n  if (node == t)   break;\n  for (  Edge edge : graph[node]) {\n    long cap=edge.remainingCapacity();\n    if (cap > 0 && !visited(edge.to)) {\n      visit(edge.to);\n      prev[edge.to]=edge;\n      q.offer(edge.to);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 62,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 315,
        "startLineNumber" : 52,
        "startColumnNumber" : 4,
        "endLineNumber" : 64,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (!q.isEmpty()) {\n  int node=q.poll();\n  if (node == t)   break;\n  for (  Edge edge : graph[node]) {\n    long cap=edge.remainingCapacity();\n    if (cap > 0 && !visited(edge.to)) {\n      visit(edge.to);\n      prev[edge.to]=edge;\n      q.offer(edge.to);\n    }\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 67,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1006,
        "startLineNumber" : 43,
        "startColumnNumber" : 21,
        "endLineNumber" : 80,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Edge[] prev=new Edge[n];\n  Queue<Integer> q=new ArrayDeque<>(n);\n  visit(s);\n  q.offer(s);\n  while (!q.isEmpty()) {\n    int node=q.poll();\n    if (node == t)     break;\n    for (    Edge edge : graph[node]) {\n      long cap=edge.remainingCapacity();\n      if (cap > 0 && !visited(edge.to)) {\n        visit(edge.to);\n        prev[edge.to]=edge;\n        q.offer(edge.to);\n      }\n    }\n  }\n  if (prev[t] == null)   return 0;\n  long bottleNeck=Long.MAX_VALUE;\n  for (Edge edge=prev[t]; edge != null; edge=prev[edge.from])   bottleNeck=min(bottleNeck,edge.remainingCapacity());\n  for (Edge edge=prev[t]; edge != null; edge=prev[edge.from])   edge.augment(bottleNeck);\n  return bottleNeck;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 172,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1025,
        "startLineNumber" : 43,
        "startColumnNumber" : 2,
        "endLineNumber" : 80,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private long bfs(){\n  Edge[] prev=new Edge[n];\n  Queue<Integer> q=new ArrayDeque<>(n);\n  visit(s);\n  q.offer(s);\n  while (!q.isEmpty()) {\n    int node=q.poll();\n    if (node == t)     break;\n    for (    Edge edge : graph[node]) {\n      long cap=edge.remainingCapacity();\n      if (cap > 0 && !visited(edge.to)) {\n        visit(edge.to);\n        prev[edge.to]=edge;\n        q.offer(edge.to);\n      }\n    }\n  }\n  if (prev[t] == null)   return 0;\n  long bottleNeck=Long.MAX_VALUE;\n  for (Edge edge=prev[t]; edge != null; edge=prev[edge.from])   bottleNeck=min(bottleNeck,edge.remainingCapacity());\n  for (Edge edge=prev[t]; edge != null; edge=prev[edge.from])   edge.augment(bottleNeck);\n  return bottleNeck;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 176,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 56,
        "startColumnNumber" : 23,
        "endLineNumber" : 56,
        "endColumnNumber" : 34
      },
      "nodeContext" : "graph[node]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 54,
    "startColumnNumber" : 10,
    "endLineNumber" : 54,
    "endColumnNumber" : 14
  }, {
    "charLength" : 4,
    "startLineNumber" : 56,
    "startColumnNumber" : 29,
    "endLineNumber" : 56,
    "endColumnNumber" : 33
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}