{
  "id" : 117,
  "expression" : "Arrays.asList(\"id1\",\"id2\",\"name\")",
  "projectName" : "seata@seata",
  "commitID" : "42d41623178ab076b11b27a0f049ac3ed7f1a9dc",
  "filePath" : "/rm-datasource/src/test/java/io/seata/rm/datasource/sql/druid/MySQLUpdateRecognizerTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Arrays.asList(\"id1\",\"id2\",\"name\")",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 35,
      "startLineNumber" : 181,
      "startColumnNumber" : 32,
      "endLineNumber" : 181,
      "endColumnNumber" : 67
    },
    "astNodeNumber" : 6,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 181,
        "startColumnNumber" : 8,
        "endLineNumber" : 181,
        "endColumnNumber" : 83
      },
      "nodeContext" : "Assertions.assertEquals(Arrays.asList(\"id1\",\"id2\",\"name\"),paramAppender)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 181,
        "startColumnNumber" : 8,
        "endLineNumber" : 181,
        "endColumnNumber" : 84
      },
      "nodeContext" : "Assertions.assertEquals(Arrays.asList(\"id1\",\"id2\",\"name\"),paramAppender);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1695,
        "startLineNumber" : 151,
        "startColumnNumber" : 41,
        "endLineNumber" : 184,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String sql=\"UPDATE t1 SET name1 = 'name1', name2 = 'name2' WHERE id in (?, ?) and name1 = ?\";\n  SQLStatement statement=getSQLStatement(sql);\n  MySQLUpdateRecognizer mySQLUpdateRecognizer=new MySQLUpdateRecognizer(sql,statement);\n  Assertions.assertEquals(sql,mySQLUpdateRecognizer.getOriginalSQL());\n  Assertions.assertEquals(\"t1\",mySQLUpdateRecognizer.getTableName());\n  Assertions.assertEquals(2,mySQLUpdateRecognizer.getUpdateColumns().size());\n  Assertions.assertEquals(\"name1\",mySQLUpdateRecognizer.getUpdateColumns().get(0));\n  Assertions.assertEquals(\"name1\",mySQLUpdateRecognizer.getUpdateValues().get(0));\n  Assertions.assertEquals(\"name2\",mySQLUpdateRecognizer.getUpdateColumns().get(1));\n  Assertions.assertEquals(\"name2\",mySQLUpdateRecognizer.getUpdateValues().get(1));\n  ArrayList<Object> paramAppender=new ArrayList<>();\n  String whereCondition=mySQLUpdateRecognizer.getWhereCondition(new ParametersHolder(){\n    @Override public ArrayList<Object>[] getParameters(){\n      ArrayList<Object> id1Param=new ArrayList<>();\n      id1Param.add(\"id1\");\n      ArrayList<Object> id2Param=new ArrayList<>();\n      id2Param.add(\"id2\");\n      ArrayList<Object> name1Param=new ArrayList<>();\n      name1Param.add(\"name\");\n      return new ArrayList[]{id1Param,id2Param,name1Param};\n    }\n  }\n,paramAppender);\n  Assertions.assertEquals(Arrays.asList(\"id1\",\"id2\",\"name\"),paramAppender);\n  Assertions.assertEquals(\"id IN (?, ?)\\nAND name1 = ?\",whereCondition);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 211,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1791,
        "startLineNumber" : 147,
        "startColumnNumber" : 4,
        "endLineNumber" : 184,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Update recognizer test 4.\n */\n@Test public void updateRecognizerTest_4(){\n  String sql=\"UPDATE t1 SET name1 = 'name1', name2 = 'name2' WHERE id in (?, ?) and name1 = ?\";\n  SQLStatement statement=getSQLStatement(sql);\n  MySQLUpdateRecognizer mySQLUpdateRecognizer=new MySQLUpdateRecognizer(sql,statement);\n  Assertions.assertEquals(sql,mySQLUpdateRecognizer.getOriginalSQL());\n  Assertions.assertEquals(\"t1\",mySQLUpdateRecognizer.getTableName());\n  Assertions.assertEquals(2,mySQLUpdateRecognizer.getUpdateColumns().size());\n  Assertions.assertEquals(\"name1\",mySQLUpdateRecognizer.getUpdateColumns().get(0));\n  Assertions.assertEquals(\"name1\",mySQLUpdateRecognizer.getUpdateValues().get(0));\n  Assertions.assertEquals(\"name2\",mySQLUpdateRecognizer.getUpdateColumns().get(1));\n  Assertions.assertEquals(\"name2\",mySQLUpdateRecognizer.getUpdateValues().get(1));\n  ArrayList<Object> paramAppender=new ArrayList<>();\n  String whereCondition=mySQLUpdateRecognizer.getWhereCondition(new ParametersHolder(){\n    @Override public ArrayList<Object>[] getParameters(){\n      ArrayList<Object> id1Param=new ArrayList<>();\n      id1Param.add(\"id1\");\n      ArrayList<Object> id2Param=new ArrayList<>();\n      id2Param.add(\"id2\");\n      ArrayList<Object> name1Param=new ArrayList<>();\n      name1Param.add(\"name\");\n      return new ArrayList[]{id1Param,id2Param,name1Param};\n    }\n  }\n,paramAppender);\n  Assertions.assertEquals(Arrays.asList(\"id1\",\"id2\",\"name\"),paramAppender);\n  Assertions.assertEquals(\"id IN (?, ?)\\nAND name1 = ?\",whereCondition);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 218,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 181,
        "startColumnNumber" : 8,
        "endLineNumber" : 181,
        "endColumnNumber" : 84
      },
      "nodeContext" : "Assertions.assertEquals(Arrays.asList(\"id1\",\"id2\",\"name\"),paramAppender);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 5,
    "type" : "java.util.List<java.lang.String>"
  } ],
  "positionList" : [ {
    "charLength" : 35,
    "startLineNumber" : 181,
    "startColumnNumber" : 32,
    "endLineNumber" : 181,
    "endColumnNumber" : 67
  } ],
  "layoutRelationDataList" : [ ]
}