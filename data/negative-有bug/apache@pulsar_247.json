{
  "id" : 247,
  "expression" : "\"10\"",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-common/src/test/java/org/apache/pulsar/common/policies/data/NamespaceIsolationDataTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"10\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 67,
      "startColumnNumber" : 44,
      "endLineNumber" : 67,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 67,
        "startColumnNumber" : 8,
        "endLineNumber" : 67,
        "endColumnNumber" : 49
      },
      "nodeContext" : "p1parameters.put(\"usage_threshold\",\"10\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 67,
        "startColumnNumber" : 8,
        "endLineNumber" : 67,
        "endColumnNumber" : 50
      },
      "nodeContext" : "p1parameters.put(\"usage_threshold\",\"10\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2758,
        "startLineNumber" : 34,
        "startColumnNumber" : 45,
        "endLineNumber" : 112,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  NamespaceIsolationData n0=NamespaceIsolationData.builder().namespaces(new ArrayList<>()).primary(new ArrayList<>()).secondary(new ArrayList<>()).build();\n  assertNotEquals(new OldPolicies(),n0);\n  for (int i=0; i < 5; i++) {\n    n0.getNamespaces().add(String.format(\"ns%d\",i));\n    n0.getPrimary().add(String.format(\"p%d\",i));\n    n0.getSecondary().add(String.format(\"s%d\",i));\n  }\n  assertNotEquals(NamespaceIsolationData.builder().build(),n0);\n  NamespaceIsolationData n1=NamespaceIsolationData.builder().namespaces(n0.getNamespaces()).primary(n0.getPrimary()).secondary(n0.getSecondary()).build();\n  assertEquals(n1,n0);\n  try {\n    n0.validate();\n    n1.validate();\n    fail(\"Should not happen\");\n  }\n catch (  Exception e) {\n  }\n  Map<String,String> p1parameters=new HashMap<>();\n  p1parameters.put(\"min_limit\",\"3\");\n  p1parameters.put(\"usage_threshold\",\"10\");\n  Map<String,String> p2parameters=new HashMap<>();\n  p2parameters.put(\"min_limit\",\"3\");\n  p2parameters.put(\"usage_threshold\",\"10\");\n  AutoFailoverPolicyData policy0=AutoFailoverPolicyData.builder().policyType(AutoFailoverPolicyType.min_available).parameters(p1parameters).build();\n  AutoFailoverPolicyData policy1=AutoFailoverPolicyData.builder().policyType(AutoFailoverPolicyType.min_available).parameters(p1parameters).build();\n  n0=NamespaceIsolationData.builder().namespaces(new ArrayList<>()).primary(new ArrayList<>()).secondary(new ArrayList<>()).autoFailoverPolicy(policy0).build();\n  assertNotEquals(new OldPolicies(),n0);\n  for (int i=0; i < 5; i++) {\n    n0.getNamespaces().add(String.format(\"ns%d\",i));\n    n0.getPrimary().add(String.format(\"p%d\",i));\n    n0.getSecondary().add(String.format(\"s%d\",i));\n  }\n  assertNotEquals(NamespaceIsolationData.builder().build(),n0);\n  n1=NamespaceIsolationData.builder().namespaces(n0.getNamespaces()).primary(n0.getPrimary()).secondary(n0.getSecondary()).autoFailoverPolicy(policy1).build();\n  try {\n    n0.validate();\n    n1.validate();\n  }\n catch (  Exception e) {\n    fail(\"Should not happen\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 364,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2809,
        "startLineNumber" : 33,
        "startColumnNumber" : 4,
        "endLineNumber" : 112,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testNamespaceIsolationData(){\n  NamespaceIsolationData n0=NamespaceIsolationData.builder().namespaces(new ArrayList<>()).primary(new ArrayList<>()).secondary(new ArrayList<>()).build();\n  assertNotEquals(new OldPolicies(),n0);\n  for (int i=0; i < 5; i++) {\n    n0.getNamespaces().add(String.format(\"ns%d\",i));\n    n0.getPrimary().add(String.format(\"p%d\",i));\n    n0.getSecondary().add(String.format(\"s%d\",i));\n  }\n  assertNotEquals(NamespaceIsolationData.builder().build(),n0);\n  NamespaceIsolationData n1=NamespaceIsolationData.builder().namespaces(n0.getNamespaces()).primary(n0.getPrimary()).secondary(n0.getSecondary()).build();\n  assertEquals(n1,n0);\n  try {\n    n0.validate();\n    n1.validate();\n    fail(\"Should not happen\");\n  }\n catch (  Exception e) {\n  }\n  Map<String,String> p1parameters=new HashMap<>();\n  p1parameters.put(\"min_limit\",\"3\");\n  p1parameters.put(\"usage_threshold\",\"10\");\n  Map<String,String> p2parameters=new HashMap<>();\n  p2parameters.put(\"min_limit\",\"3\");\n  p2parameters.put(\"usage_threshold\",\"10\");\n  AutoFailoverPolicyData policy0=AutoFailoverPolicyData.builder().policyType(AutoFailoverPolicyType.min_available).parameters(p1parameters).build();\n  AutoFailoverPolicyData policy1=AutoFailoverPolicyData.builder().policyType(AutoFailoverPolicyType.min_available).parameters(p1parameters).build();\n  n0=NamespaceIsolationData.builder().namespaces(new ArrayList<>()).primary(new ArrayList<>()).secondary(new ArrayList<>()).autoFailoverPolicy(policy0).build();\n  assertNotEquals(new OldPolicies(),n0);\n  for (int i=0; i < 5; i++) {\n    n0.getNamespaces().add(String.format(\"ns%d\",i));\n    n0.getPrimary().add(String.format(\"p%d\",i));\n    n0.getSecondary().add(String.format(\"s%d\",i));\n  }\n  assertNotEquals(NamespaceIsolationData.builder().build(),n0);\n  n1=NamespaceIsolationData.builder().namespaces(n0.getNamespaces()).primary(n0.getPrimary()).secondary(n0.getSecondary()).autoFailoverPolicy(policy1).build();\n  try {\n    n0.validate();\n    n1.validate();\n  }\n catch (  Exception e) {\n    fail(\"Should not happen\");\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 370,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 67,
        "startColumnNumber" : 8,
        "endLineNumber" : 67,
        "endColumnNumber" : 50
      },
      "nodeContext" : "p1parameters.put(\"usage_threshold\",\"10\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "\"10\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 71,
      "startColumnNumber" : 44,
      "endLineNumber" : 71,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 71,
        "startColumnNumber" : 8,
        "endLineNumber" : 71,
        "endColumnNumber" : 49
      },
      "nodeContext" : "p2parameters.put(\"usage_threshold\",\"10\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 71,
        "startColumnNumber" : 8,
        "endLineNumber" : 71,
        "endColumnNumber" : 50
      },
      "nodeContext" : "p2parameters.put(\"usage_threshold\",\"10\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2758,
        "startLineNumber" : 34,
        "startColumnNumber" : 45,
        "endLineNumber" : 112,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  NamespaceIsolationData n0=NamespaceIsolationData.builder().namespaces(new ArrayList<>()).primary(new ArrayList<>()).secondary(new ArrayList<>()).build();\n  assertNotEquals(new OldPolicies(),n0);\n  for (int i=0; i < 5; i++) {\n    n0.getNamespaces().add(String.format(\"ns%d\",i));\n    n0.getPrimary().add(String.format(\"p%d\",i));\n    n0.getSecondary().add(String.format(\"s%d\",i));\n  }\n  assertNotEquals(NamespaceIsolationData.builder().build(),n0);\n  NamespaceIsolationData n1=NamespaceIsolationData.builder().namespaces(n0.getNamespaces()).primary(n0.getPrimary()).secondary(n0.getSecondary()).build();\n  assertEquals(n1,n0);\n  try {\n    n0.validate();\n    n1.validate();\n    fail(\"Should not happen\");\n  }\n catch (  Exception e) {\n  }\n  Map<String,String> p1parameters=new HashMap<>();\n  p1parameters.put(\"min_limit\",\"3\");\n  p1parameters.put(\"usage_threshold\",\"10\");\n  Map<String,String> p2parameters=new HashMap<>();\n  p2parameters.put(\"min_limit\",\"3\");\n  p2parameters.put(\"usage_threshold\",\"10\");\n  AutoFailoverPolicyData policy0=AutoFailoverPolicyData.builder().policyType(AutoFailoverPolicyType.min_available).parameters(p1parameters).build();\n  AutoFailoverPolicyData policy1=AutoFailoverPolicyData.builder().policyType(AutoFailoverPolicyType.min_available).parameters(p1parameters).build();\n  n0=NamespaceIsolationData.builder().namespaces(new ArrayList<>()).primary(new ArrayList<>()).secondary(new ArrayList<>()).autoFailoverPolicy(policy0).build();\n  assertNotEquals(new OldPolicies(),n0);\n  for (int i=0; i < 5; i++) {\n    n0.getNamespaces().add(String.format(\"ns%d\",i));\n    n0.getPrimary().add(String.format(\"p%d\",i));\n    n0.getSecondary().add(String.format(\"s%d\",i));\n  }\n  assertNotEquals(NamespaceIsolationData.builder().build(),n0);\n  n1=NamespaceIsolationData.builder().namespaces(n0.getNamespaces()).primary(n0.getPrimary()).secondary(n0.getSecondary()).autoFailoverPolicy(policy1).build();\n  try {\n    n0.validate();\n    n1.validate();\n  }\n catch (  Exception e) {\n    fail(\"Should not happen\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 364,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2809,
        "startLineNumber" : 33,
        "startColumnNumber" : 4,
        "endLineNumber" : 112,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testNamespaceIsolationData(){\n  NamespaceIsolationData n0=NamespaceIsolationData.builder().namespaces(new ArrayList<>()).primary(new ArrayList<>()).secondary(new ArrayList<>()).build();\n  assertNotEquals(new OldPolicies(),n0);\n  for (int i=0; i < 5; i++) {\n    n0.getNamespaces().add(String.format(\"ns%d\",i));\n    n0.getPrimary().add(String.format(\"p%d\",i));\n    n0.getSecondary().add(String.format(\"s%d\",i));\n  }\n  assertNotEquals(NamespaceIsolationData.builder().build(),n0);\n  NamespaceIsolationData n1=NamespaceIsolationData.builder().namespaces(n0.getNamespaces()).primary(n0.getPrimary()).secondary(n0.getSecondary()).build();\n  assertEquals(n1,n0);\n  try {\n    n0.validate();\n    n1.validate();\n    fail(\"Should not happen\");\n  }\n catch (  Exception e) {\n  }\n  Map<String,String> p1parameters=new HashMap<>();\n  p1parameters.put(\"min_limit\",\"3\");\n  p1parameters.put(\"usage_threshold\",\"10\");\n  Map<String,String> p2parameters=new HashMap<>();\n  p2parameters.put(\"min_limit\",\"3\");\n  p2parameters.put(\"usage_threshold\",\"10\");\n  AutoFailoverPolicyData policy0=AutoFailoverPolicyData.builder().policyType(AutoFailoverPolicyType.min_available).parameters(p1parameters).build();\n  AutoFailoverPolicyData policy1=AutoFailoverPolicyData.builder().policyType(AutoFailoverPolicyType.min_available).parameters(p1parameters).build();\n  n0=NamespaceIsolationData.builder().namespaces(new ArrayList<>()).primary(new ArrayList<>()).secondary(new ArrayList<>()).autoFailoverPolicy(policy0).build();\n  assertNotEquals(new OldPolicies(),n0);\n  for (int i=0; i < 5; i++) {\n    n0.getNamespaces().add(String.format(\"ns%d\",i));\n    n0.getPrimary().add(String.format(\"p%d\",i));\n    n0.getSecondary().add(String.format(\"s%d\",i));\n  }\n  assertNotEquals(NamespaceIsolationData.builder().build(),n0);\n  n1=NamespaceIsolationData.builder().namespaces(n0.getNamespaces()).primary(n0.getPrimary()).secondary(n0.getSecondary()).autoFailoverPolicy(policy1).build();\n  try {\n    n0.validate();\n    n1.validate();\n  }\n catch (  Exception e) {\n    fail(\"Should not happen\");\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 370,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 71,
        "startColumnNumber" : 8,
        "endLineNumber" : 71,
        "endColumnNumber" : 50
      },
      "nodeContext" : "p2parameters.put(\"usage_threshold\",\"10\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 67,
    "startColumnNumber" : 44,
    "endLineNumber" : 67,
    "endColumnNumber" : 48
  }, {
    "charLength" : 4,
    "startLineNumber" : 71,
    "startColumnNumber" : 44,
    "endLineNumber" : 71,
    "endColumnNumber" : 48
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}