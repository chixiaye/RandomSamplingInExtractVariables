{
  "id" : 418,
  "expression" : "Optional",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-broker/src/test/java/org/apache/pulsar/broker/loadbalance/LeaderElectionServiceTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Optional",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 72,
      "startColumnNumber" : 36,
      "endLineNumber" : 72,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 72,
        "startColumnNumber" : 36,
        "endLineNumber" : 72,
        "endColumnNumber" : 50
      },
      "nodeContext" : "Optional.of(0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 72,
        "startColumnNumber" : 8,
        "endLineNumber" : 72,
        "endColumnNumber" : 51
      },
      "nodeContext" : "config.setBrokerServicePort(Optional.of(0))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 72,
        "startColumnNumber" : 8,
        "endLineNumber" : 72,
        "endColumnNumber" : 52
      },
      "nodeContext" : "config.setBrokerServicePort(Optional.of(0));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3056,
        "startLineNumber" : 68,
        "startColumnNumber" : 33,
        "endLineNumber" : 123,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String clusterName=\"elect-test\";\n  ServiceConfiguration config=new ServiceConfiguration();\n  config.setBrokerShutdownTimeoutMs(0L);\n  config.setBrokerServicePort(Optional.of(0));\n  config.setWebServicePort(Optional.of(0));\n  config.setClusterName(clusterName);\n  config.setAdvertisedAddress(\"localhost\");\n  config.setZookeeperServers(\"127.0.0.1\" + \":\" + bkEnsemble.getZookeeperPort());\n  @Cleanup PulsarService pulsar=Mockito.spy(new MockPulsarService(config));\n  pulsar.start();\n  AtomicReference<LeaderElectionService> leaderElectionServiceReference=new AtomicReference<>();\n  Mockito.doAnswer(invocation -> leaderElectionServiceReference.get()).when(pulsar).getLeaderElectionService();\n  final String tenant=\"elect\";\n  final String namespace=\"ns\";\n  @Cleanup PulsarAdmin adminClient=PulsarAdmin.builder().serviceHttpUrl(pulsar.getWebServiceAddress()).build();\n  adminClient.clusters().createCluster(clusterName,ClusterData.builder().serviceUrl(pulsar.getWebServiceAddress()).build());\n  adminClient.tenants().createTenant(tenant,new TenantInfoImpl(Sets.newHashSet(\"appid1\",\"appid2\"),Sets.newHashSet(clusterName)));\n  adminClient.namespaces().createNamespace(tenant + \"/\" + namespace,16);\n  @Cleanup PulsarClient client=PulsarClient.builder().serviceUrl(pulsar.getBrokerServiceUrl()).startingBackoffInterval(1,TimeUnit.MILLISECONDS).maxBackoffInterval(100,TimeUnit.MILLISECONDS).operationTimeout(1000,TimeUnit.MILLISECONDS).build();\n  checkLookupException(tenant,namespace,client);\n  LeaderElectionService leaderElectionService=Mockito.mock(LeaderElectionService.class);\n  AtomicReference<LeaderBroker> leaderBrokerReference=new AtomicReference<>();\n  Mockito.when(leaderElectionService.isLeader()).thenAnswer(invocation -> leaderBrokerReference.get() != null);\n  Mockito.when(leaderElectionService.getCurrentLeader()).thenAnswer(invocation -> Optional.ofNullable(leaderBrokerReference.get()));\n  leaderElectionServiceReference.set(leaderElectionService);\n  checkLookupException(tenant,namespace,client);\n  leaderBrokerReference.set(new LeaderBroker(pulsar.getWebServiceAddress()));\n  Producer<byte[]> producer=client.newProducer().topic(\"persistent://\" + tenant + \"/\"+ namespace+ \"/1p\").create();\n  producer.getTopic();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 326,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3206,
        "startLineNumber" : 66,
        "startColumnNumber" : 4,
        "endLineNumber" : 123,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void anErrorShouldBeThrowBeforeLeaderElected() throws PulsarServerException, PulsarClientException, PulsarAdminException {\n  final String clusterName=\"elect-test\";\n  ServiceConfiguration config=new ServiceConfiguration();\n  config.setBrokerShutdownTimeoutMs(0L);\n  config.setBrokerServicePort(Optional.of(0));\n  config.setWebServicePort(Optional.of(0));\n  config.setClusterName(clusterName);\n  config.setAdvertisedAddress(\"localhost\");\n  config.setZookeeperServers(\"127.0.0.1\" + \":\" + bkEnsemble.getZookeeperPort());\n  @Cleanup PulsarService pulsar=Mockito.spy(new MockPulsarService(config));\n  pulsar.start();\n  AtomicReference<LeaderElectionService> leaderElectionServiceReference=new AtomicReference<>();\n  Mockito.doAnswer(invocation -> leaderElectionServiceReference.get()).when(pulsar).getLeaderElectionService();\n  final String tenant=\"elect\";\n  final String namespace=\"ns\";\n  @Cleanup PulsarAdmin adminClient=PulsarAdmin.builder().serviceHttpUrl(pulsar.getWebServiceAddress()).build();\n  adminClient.clusters().createCluster(clusterName,ClusterData.builder().serviceUrl(pulsar.getWebServiceAddress()).build());\n  adminClient.tenants().createTenant(tenant,new TenantInfoImpl(Sets.newHashSet(\"appid1\",\"appid2\"),Sets.newHashSet(clusterName)));\n  adminClient.namespaces().createNamespace(tenant + \"/\" + namespace,16);\n  @Cleanup PulsarClient client=PulsarClient.builder().serviceUrl(pulsar.getBrokerServiceUrl()).startingBackoffInterval(1,TimeUnit.MILLISECONDS).maxBackoffInterval(100,TimeUnit.MILLISECONDS).operationTimeout(1000,TimeUnit.MILLISECONDS).build();\n  checkLookupException(tenant,namespace,client);\n  LeaderElectionService leaderElectionService=Mockito.mock(LeaderElectionService.class);\n  AtomicReference<LeaderBroker> leaderBrokerReference=new AtomicReference<>();\n  Mockito.when(leaderElectionService.isLeader()).thenAnswer(invocation -> leaderBrokerReference.get() != null);\n  Mockito.when(leaderElectionService.getCurrentLeader()).thenAnswer(invocation -> Optional.ofNullable(leaderBrokerReference.get()));\n  leaderElectionServiceReference.set(leaderElectionService);\n  checkLookupException(tenant,namespace,client);\n  leaderBrokerReference.set(new LeaderBroker(pulsar.getWebServiceAddress()));\n  Producer<byte[]> producer=client.newProducer().topic(\"persistent://\" + tenant + \"/\"+ namespace+ \"/1p\").create();\n  producer.getTopic();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 338,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 72,
        "startColumnNumber" : 8,
        "endLineNumber" : 72,
        "endColumnNumber" : 52
      },
      "nodeContext" : "config.setBrokerServicePort(Optional.of(0));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.Optional"
  }, {
    "nodeContext" : "Optional",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 73,
      "startColumnNumber" : 33,
      "endLineNumber" : 73,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 73,
        "startColumnNumber" : 33,
        "endLineNumber" : 73,
        "endColumnNumber" : 47
      },
      "nodeContext" : "Optional.of(0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 73,
        "startColumnNumber" : 8,
        "endLineNumber" : 73,
        "endColumnNumber" : 48
      },
      "nodeContext" : "config.setWebServicePort(Optional.of(0))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 73,
        "startColumnNumber" : 8,
        "endLineNumber" : 73,
        "endColumnNumber" : 49
      },
      "nodeContext" : "config.setWebServicePort(Optional.of(0));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3056,
        "startLineNumber" : 68,
        "startColumnNumber" : 33,
        "endLineNumber" : 123,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final String clusterName=\"elect-test\";\n  ServiceConfiguration config=new ServiceConfiguration();\n  config.setBrokerShutdownTimeoutMs(0L);\n  config.setBrokerServicePort(Optional.of(0));\n  config.setWebServicePort(Optional.of(0));\n  config.setClusterName(clusterName);\n  config.setAdvertisedAddress(\"localhost\");\n  config.setZookeeperServers(\"127.0.0.1\" + \":\" + bkEnsemble.getZookeeperPort());\n  @Cleanup PulsarService pulsar=Mockito.spy(new MockPulsarService(config));\n  pulsar.start();\n  AtomicReference<LeaderElectionService> leaderElectionServiceReference=new AtomicReference<>();\n  Mockito.doAnswer(invocation -> leaderElectionServiceReference.get()).when(pulsar).getLeaderElectionService();\n  final String tenant=\"elect\";\n  final String namespace=\"ns\";\n  @Cleanup PulsarAdmin adminClient=PulsarAdmin.builder().serviceHttpUrl(pulsar.getWebServiceAddress()).build();\n  adminClient.clusters().createCluster(clusterName,ClusterData.builder().serviceUrl(pulsar.getWebServiceAddress()).build());\n  adminClient.tenants().createTenant(tenant,new TenantInfoImpl(Sets.newHashSet(\"appid1\",\"appid2\"),Sets.newHashSet(clusterName)));\n  adminClient.namespaces().createNamespace(tenant + \"/\" + namespace,16);\n  @Cleanup PulsarClient client=PulsarClient.builder().serviceUrl(pulsar.getBrokerServiceUrl()).startingBackoffInterval(1,TimeUnit.MILLISECONDS).maxBackoffInterval(100,TimeUnit.MILLISECONDS).operationTimeout(1000,TimeUnit.MILLISECONDS).build();\n  checkLookupException(tenant,namespace,client);\n  LeaderElectionService leaderElectionService=Mockito.mock(LeaderElectionService.class);\n  AtomicReference<LeaderBroker> leaderBrokerReference=new AtomicReference<>();\n  Mockito.when(leaderElectionService.isLeader()).thenAnswer(invocation -> leaderBrokerReference.get() != null);\n  Mockito.when(leaderElectionService.getCurrentLeader()).thenAnswer(invocation -> Optional.ofNullable(leaderBrokerReference.get()));\n  leaderElectionServiceReference.set(leaderElectionService);\n  checkLookupException(tenant,namespace,client);\n  leaderBrokerReference.set(new LeaderBroker(pulsar.getWebServiceAddress()));\n  Producer<byte[]> producer=client.newProducer().topic(\"persistent://\" + tenant + \"/\"+ namespace+ \"/1p\").create();\n  producer.getTopic();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 326,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3206,
        "startLineNumber" : 66,
        "startColumnNumber" : 4,
        "endLineNumber" : 123,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void anErrorShouldBeThrowBeforeLeaderElected() throws PulsarServerException, PulsarClientException, PulsarAdminException {\n  final String clusterName=\"elect-test\";\n  ServiceConfiguration config=new ServiceConfiguration();\n  config.setBrokerShutdownTimeoutMs(0L);\n  config.setBrokerServicePort(Optional.of(0));\n  config.setWebServicePort(Optional.of(0));\n  config.setClusterName(clusterName);\n  config.setAdvertisedAddress(\"localhost\");\n  config.setZookeeperServers(\"127.0.0.1\" + \":\" + bkEnsemble.getZookeeperPort());\n  @Cleanup PulsarService pulsar=Mockito.spy(new MockPulsarService(config));\n  pulsar.start();\n  AtomicReference<LeaderElectionService> leaderElectionServiceReference=new AtomicReference<>();\n  Mockito.doAnswer(invocation -> leaderElectionServiceReference.get()).when(pulsar).getLeaderElectionService();\n  final String tenant=\"elect\";\n  final String namespace=\"ns\";\n  @Cleanup PulsarAdmin adminClient=PulsarAdmin.builder().serviceHttpUrl(pulsar.getWebServiceAddress()).build();\n  adminClient.clusters().createCluster(clusterName,ClusterData.builder().serviceUrl(pulsar.getWebServiceAddress()).build());\n  adminClient.tenants().createTenant(tenant,new TenantInfoImpl(Sets.newHashSet(\"appid1\",\"appid2\"),Sets.newHashSet(clusterName)));\n  adminClient.namespaces().createNamespace(tenant + \"/\" + namespace,16);\n  @Cleanup PulsarClient client=PulsarClient.builder().serviceUrl(pulsar.getBrokerServiceUrl()).startingBackoffInterval(1,TimeUnit.MILLISECONDS).maxBackoffInterval(100,TimeUnit.MILLISECONDS).operationTimeout(1000,TimeUnit.MILLISECONDS).build();\n  checkLookupException(tenant,namespace,client);\n  LeaderElectionService leaderElectionService=Mockito.mock(LeaderElectionService.class);\n  AtomicReference<LeaderBroker> leaderBrokerReference=new AtomicReference<>();\n  Mockito.when(leaderElectionService.isLeader()).thenAnswer(invocation -> leaderBrokerReference.get() != null);\n  Mockito.when(leaderElectionService.getCurrentLeader()).thenAnswer(invocation -> Optional.ofNullable(leaderBrokerReference.get()));\n  leaderElectionServiceReference.set(leaderElectionService);\n  checkLookupException(tenant,namespace,client);\n  leaderBrokerReference.set(new LeaderBroker(pulsar.getWebServiceAddress()));\n  Producer<byte[]> producer=client.newProducer().topic(\"persistent://\" + tenant + \"/\"+ namespace+ \"/1p\").create();\n  producer.getTopic();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 338,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 73,
        "startColumnNumber" : 8,
        "endLineNumber" : 73,
        "endColumnNumber" : 49
      },
      "nodeContext" : "config.setWebServicePort(Optional.of(0));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.Optional"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 72,
    "startColumnNumber" : 36,
    "endLineNumber" : 72,
    "endColumnNumber" : 44
  }, {
    "charLength" : 8,
    "startLineNumber" : 73,
    "startColumnNumber" : 33,
    "endLineNumber" : 73,
    "endColumnNumber" : 41
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}