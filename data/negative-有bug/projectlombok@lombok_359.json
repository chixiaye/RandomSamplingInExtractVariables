{
  "id" : 359,
  "expression" : "drives",
  "projectName" : "projectlombok@lombok",
  "commitID" : "25def866b50860715ee7c315c678b8c3d1ba9b56",
  "filePath" : "/src/installer/lombok/installer/IdeFinder.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "drives",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 105,
      "startColumnNumber" : 32,
      "endLineNumber" : 105,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 105,
        "startColumnNumber" : 32,
        "endLineNumber" : 105,
        "endColumnNumber" : 49
      },
      "nodeContext" : "drives.add(drive)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 105,
        "startColumnNumber" : 32,
        "endLineNumber" : 105,
        "endColumnNumber" : 50
      },
      "nodeContext" : "drives.add(drive);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 105,
        "startColumnNumber" : 3,
        "endLineNumber" : 105,
        "endColumnNumber" : 50
      },
      "nodeContext" : "if (info.isFixedDisk(drive)) drives.add(drive);\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 104,
        "startColumnNumber" : 47,
        "endLineNumber" : 106,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (info.isFixedDisk(drive))   drives.add(drive);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 104,
        "startColumnNumber" : 2,
        "endLineNumber" : 106,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (String drive : info.getLogicalDrives()) {\n  if (info.isFixedDisk(drive))   drives.add(drive);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 262,
        "startLineNumber" : 98,
        "startColumnNumber" : 66,
        "endLineNumber" : 109,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  loadWindowsDriveInfoLib();\n  List<String> drives=new ArrayList<String>();\n  WindowsDriveInfo info=new WindowsDriveInfo();\n  for (  String drive : info.getLogicalDrives()) {\n    if (info.isFixedDisk(drive))     drives.add(drive);\n  }\n  return drives;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 47,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 568,
        "startLineNumber" : 91,
        "startColumnNumber" : 1,
        "endLineNumber" : 109,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Returns all drive letters on windows that represent fixed disks. Floppy drives, optical drives, USB sticks, and network drives should all be excluded.\n * @return A List of drive letters, such as [\"C\", \"D\", \"X\"].\n */\npublic static List<String> getDrivesOnWindows() throws Throwable {\n  loadWindowsDriveInfoLib();\n  List<String> drives=new ArrayList<String>();\n  WindowsDriveInfo info=new WindowsDriveInfo();\n  for (  String drive : info.getLogicalDrives()) {\n    if (info.isFixedDisk(drive))     drives.add(drive);\n  }\n  return drives;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 59,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 105,
        "startColumnNumber" : 3,
        "endLineNumber" : 105,
        "endColumnNumber" : 50
      },
      "nodeContext" : "if (info.isFixedDisk(drive)) drives.add(drive);\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.List<java.lang.String>"
  }, {
    "nodeContext" : "drives",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 108,
      "startColumnNumber" : 9,
      "endLineNumber" : 108,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 108,
        "startColumnNumber" : 2,
        "endLineNumber" : 108,
        "endColumnNumber" : 16
      },
      "nodeContext" : "return drives;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 262,
        "startLineNumber" : 98,
        "startColumnNumber" : 66,
        "endLineNumber" : 109,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  loadWindowsDriveInfoLib();\n  List<String> drives=new ArrayList<String>();\n  WindowsDriveInfo info=new WindowsDriveInfo();\n  for (  String drive : info.getLogicalDrives()) {\n    if (info.isFixedDisk(drive))     drives.add(drive);\n  }\n  return drives;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 47,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 568,
        "startLineNumber" : 91,
        "startColumnNumber" : 1,
        "endLineNumber" : 109,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Returns all drive letters on windows that represent fixed disks. Floppy drives, optical drives, USB sticks, and network drives should all be excluded.\n * @return A List of drive letters, such as [\"C\", \"D\", \"X\"].\n */\npublic static List<String> getDrivesOnWindows() throws Throwable {\n  loadWindowsDriveInfoLib();\n  List<String> drives=new ArrayList<String>();\n  WindowsDriveInfo info=new WindowsDriveInfo();\n  for (  String drive : info.getLogicalDrives()) {\n    if (info.isFixedDisk(drive))     drives.add(drive);\n  }\n  return drives;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 59,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 108,
        "startColumnNumber" : 2,
        "endLineNumber" : 108,
        "endColumnNumber" : 16
      },
      "nodeContext" : "return drives;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.util.List<java.lang.String>"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 105,
    "startColumnNumber" : 32,
    "endLineNumber" : 105,
    "endColumnNumber" : 38
  }, {
    "charLength" : 6,
    "startLineNumber" : 108,
    "startColumnNumber" : 9,
    "endLineNumber" : 108,
    "endColumnNumber" : 15
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  } ]
}