{
  "id" : 9,
  "expression" : "body",
  "projectName" : "square@retrofit",
  "commitID" : "757278c7ab7f6c8e5a40d16a5707c35e0f61c5ab",
  "filePath" : "/retrofit/src/main/java/retrofit/RetrofitError.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "body",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 124,
      "startColumnNumber" : 8,
      "endLineNumber" : 124,
      "endColumnNumber" : 12
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 124,
        "startColumnNumber" : 8,
        "endLineNumber" : 124,
        "endColumnNumber" : 20
      },
      "nodeContext" : "body == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 124,
        "startColumnNumber" : 4,
        "endLineNumber" : 126,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (body == null) {\n  return null;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 285,
        "startLineNumber" : 119,
        "startColumnNumber" : 37,
        "endLineNumber" : 132,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (response == null) {\n    return null;\n  }\n  TypedInput body=response.getBody();\n  if (body == null) {\n    return null;\n  }\n  try {\n    return converter.fromBody(body,type);\n  }\n catch (  ConversionException e) {\n    throw new RuntimeException(e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 42,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 527,
        "startLineNumber" : 114,
        "startColumnNumber" : 2,
        "endLineNumber" : 132,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * HTTP response body converted to specified  {@code type}.  {@code null} if there is no response.\n * @throws RuntimeException if unable to convert the body to the specified {@code type}.\n */\npublic Object getBodyAs(Type type){\n  if (response == null) {\n    return null;\n  }\n  TypedInput body=response.getBody();\n  if (body == null) {\n    return null;\n  }\n  try {\n    return converter.fromBody(body,type);\n  }\n catch (  ConversionException e) {\n    throw new RuntimeException(e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 52,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 124,
        "startColumnNumber" : 8,
        "endLineNumber" : 124,
        "endColumnNumber" : 20
      },
      "nodeContext" : "body == null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "retrofit.mime.TypedInput"
  }, {
    "nodeContext" : "body",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 128,
      "startColumnNumber" : 32,
      "endLineNumber" : 128,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 128,
        "startColumnNumber" : 13,
        "endLineNumber" : 128,
        "endColumnNumber" : 43
      },
      "nodeContext" : "converter.fromBody(body,type)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 128,
        "startColumnNumber" : 6,
        "endLineNumber" : 128,
        "endColumnNumber" : 44
      },
      "nodeContext" : "return converter.fromBody(body,type);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 127,
        "startColumnNumber" : 8,
        "endLineNumber" : 129,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  return converter.fromBody(body,type);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 131,
        "startLineNumber" : 127,
        "startColumnNumber" : 4,
        "endLineNumber" : 131,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  return converter.fromBody(body,type);\n}\n catch (ConversionException e) {\n  throw new RuntimeException(e);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 19,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 285,
        "startLineNumber" : 119,
        "startColumnNumber" : 37,
        "endLineNumber" : 132,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (response == null) {\n    return null;\n  }\n  TypedInput body=response.getBody();\n  if (body == null) {\n    return null;\n  }\n  try {\n    return converter.fromBody(body,type);\n  }\n catch (  ConversionException e) {\n    throw new RuntimeException(e);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 42,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 527,
        "startLineNumber" : 114,
        "startColumnNumber" : 2,
        "endLineNumber" : 132,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * HTTP response body converted to specified  {@code type}.  {@code null} if there is no response.\n * @throws RuntimeException if unable to convert the body to the specified {@code type}.\n */\npublic Object getBodyAs(Type type){\n  if (response == null) {\n    return null;\n  }\n  TypedInput body=response.getBody();\n  if (body == null) {\n    return null;\n  }\n  try {\n    return converter.fromBody(body,type);\n  }\n catch (  ConversionException e) {\n    throw new RuntimeException(e);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 52,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 128,
        "startColumnNumber" : 6,
        "endLineNumber" : 128,
        "endColumnNumber" : 44
      },
      "nodeContext" : "return converter.fromBody(body,type);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "retrofit.mime.TypedInput"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 124,
    "startColumnNumber" : 8,
    "endLineNumber" : 124,
    "endColumnNumber" : 12
  }, {
    "charLength" : 4,
    "startLineNumber" : 128,
    "startColumnNumber" : 32,
    "endLineNumber" : 128,
    "endColumnNumber" : 36
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}