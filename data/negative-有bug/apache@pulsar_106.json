{
  "id" : 106,
  "expression" : "10",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-broker/src/test/java/org/apache/pulsar/common/naming/FlowOrQpsEquallyDivideBundleSplitAlgorithmTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "10",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 43,
      "startColumnNumber" : 53,
      "endLineNumber" : 43,
      "endColumnNumber" : 55
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 43,
        "startColumnNumber" : 12,
        "endLineNumber" : 43,
        "endColumnNumber" : 55
      },
      "nodeContext" : "flowOrQpsDifferenceThresholdPercentage=10",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 43,
        "startColumnNumber" : 8,
        "endLineNumber" : 43,
        "endColumnNumber" : 56
      },
      "nodeContext" : "int flowOrQpsDifferenceThresholdPercentage=10;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4376,
        "startLineNumber" : 39,
        "startColumnNumber" : 45,
        "endLineNumber" : 126,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  FlowOrQpsEquallyDivideBundleSplitAlgorithm algorithm=new FlowOrQpsEquallyDivideBundleSplitAlgorithm();\n  int loadBalancerNamespaceBundleMaxMsgRate=1010;\n  int loadBalancerNamespaceBundleMaxBandwidthMbytes=100;\n  int flowOrQpsDifferenceThresholdPercentage=10;\n  Map<Long,Double> hashAndMsgMap=new HashMap<>();\n  Map<Long,Double> hashAndThroughput=new HashMap<>();\n  Map<String,TopicStatsImpl> topicStatsMap=new HashMap<>();\n  List<String> mockTopics=new ArrayList<>();\n  List<Long> hashList=new ArrayList<>();\n  for (int i=1; i < 6; i++) {\n    String topicName=\"persistent://test-tenant1/test-namespace1/test\" + i;\n    for (int j=0; j < 20; j++) {\n      String tp=topicName + \"-partition-\" + j;\n      mockTopics.add(tp);\n      TopicStatsImpl topicStats=new TopicStatsImpl();\n      topicStats.msgRateIn=24.5;\n      topicStats.msgThroughputIn=1000;\n      topicStats.msgRateOut=25;\n      topicStats.msgThroughputOut=1000;\n      topicStatsMap.put(tp,topicStats);\n    }\n  }\n  for (int i=6; i < 13; i++) {\n    String topicName=\"persistent://test-tenant1/test-namespace1/test\" + i;\n    for (int j=0; j < 20; j++) {\n      String tp=topicName + \"-partition-\" + j;\n      mockTopics.add(tp);\n      TopicStatsImpl topicStats=new TopicStatsImpl();\n      topicStats.msgRateIn=25.5;\n      topicStats.msgThroughputIn=1000;\n      topicStats.msgRateOut=25;\n      topicStats.msgThroughputOut=1000;\n      topicStatsMap.put(tp,topicStats);\n    }\n  }\n  String tp=\"persistent://test-tenant1/test-namespace1/test695-partition-0\";\n  mockTopics.add(tp);\n  TopicStatsImpl topicStats=new TopicStatsImpl();\n  topicStats.msgRateIn=25;\n  topicStats.msgThroughputIn=1000;\n  topicStats.msgRateOut=35;\n  topicStats.msgThroughputOut=1000;\n  topicStatsMap.put(tp,topicStats);\n  NamespaceService mockNamespaceService=mock(NamespaceService.class);\n  NamespaceBundle mockNamespaceBundle=mock(NamespaceBundle.class);\n  doReturn(CompletableFuture.completedFuture(mockTopics)).when(mockNamespaceService).getOwnedTopicListForNamespaceBundle(mockNamespaceBundle);\n  NamespaceBundleFactory mockNamespaceBundleFactory=mock(NamespaceBundleFactory.class);\n  doReturn(mockNamespaceBundleFactory).when(mockNamespaceBundle).getNamespaceBundleFactory();\n  mockTopics.forEach((topic) -> {\n    long hashValue=Hashing.crc32().hashString(topic,UTF_8).padToLong();\n    doReturn(hashValue).when(mockNamespaceBundleFactory).getLongHashCode(topic);\n    hashList.add(hashValue);\n    hashAndMsgMap.put(hashValue,topicStatsMap.get(topic).msgRateIn + topicStatsMap.get(topic).msgRateOut);\n    hashAndThroughput.put(hashValue,topicStatsMap.get(topic).msgThroughputIn + topicStatsMap.get(topic).msgThroughputOut);\n  }\n);\n  List<Long> splitPositions=algorithm.getSplitBoundary(new FlowOrQpsEquallyDivideBundleSplitOption(mockNamespaceService,mockNamespaceBundle,null,topicStatsMap,loadBalancerNamespaceBundleMaxMsgRate,loadBalancerNamespaceBundleMaxBandwidthMbytes,flowOrQpsDifferenceThresholdPercentage)).join();\n  Collections.sort(hashList);\n  int i=0;\n  for (  Long position : splitPositions) {\n    Long endPosition=position;\n    double bundleMsgRateTmp=0;\n    double bundleThroughputTmp=0;\n    while (hashList.get(i) < endPosition) {\n      bundleMsgRateTmp+=hashAndMsgMap.get(hashList.get(i));\n      bundleThroughputTmp+=hashAndThroughput.get(hashList.get(i));\n      i++;\n    }\n    assertTrue(bundleMsgRateTmp < loadBalancerNamespaceBundleMaxMsgRate);\n    assertTrue(bundleThroughputTmp < loadBalancerNamespaceBundleMaxBandwidthMbytes * 1024 * 1024);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 533,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4428,
        "startLineNumber" : 38,
        "startColumnNumber" : 4,
        "endLineNumber" : 126,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSplitBundleByFlowOrQps(){\n  FlowOrQpsEquallyDivideBundleSplitAlgorithm algorithm=new FlowOrQpsEquallyDivideBundleSplitAlgorithm();\n  int loadBalancerNamespaceBundleMaxMsgRate=1010;\n  int loadBalancerNamespaceBundleMaxBandwidthMbytes=100;\n  int flowOrQpsDifferenceThresholdPercentage=10;\n  Map<Long,Double> hashAndMsgMap=new HashMap<>();\n  Map<Long,Double> hashAndThroughput=new HashMap<>();\n  Map<String,TopicStatsImpl> topicStatsMap=new HashMap<>();\n  List<String> mockTopics=new ArrayList<>();\n  List<Long> hashList=new ArrayList<>();\n  for (int i=1; i < 6; i++) {\n    String topicName=\"persistent://test-tenant1/test-namespace1/test\" + i;\n    for (int j=0; j < 20; j++) {\n      String tp=topicName + \"-partition-\" + j;\n      mockTopics.add(tp);\n      TopicStatsImpl topicStats=new TopicStatsImpl();\n      topicStats.msgRateIn=24.5;\n      topicStats.msgThroughputIn=1000;\n      topicStats.msgRateOut=25;\n      topicStats.msgThroughputOut=1000;\n      topicStatsMap.put(tp,topicStats);\n    }\n  }\n  for (int i=6; i < 13; i++) {\n    String topicName=\"persistent://test-tenant1/test-namespace1/test\" + i;\n    for (int j=0; j < 20; j++) {\n      String tp=topicName + \"-partition-\" + j;\n      mockTopics.add(tp);\n      TopicStatsImpl topicStats=new TopicStatsImpl();\n      topicStats.msgRateIn=25.5;\n      topicStats.msgThroughputIn=1000;\n      topicStats.msgRateOut=25;\n      topicStats.msgThroughputOut=1000;\n      topicStatsMap.put(tp,topicStats);\n    }\n  }\n  String tp=\"persistent://test-tenant1/test-namespace1/test695-partition-0\";\n  mockTopics.add(tp);\n  TopicStatsImpl topicStats=new TopicStatsImpl();\n  topicStats.msgRateIn=25;\n  topicStats.msgThroughputIn=1000;\n  topicStats.msgRateOut=35;\n  topicStats.msgThroughputOut=1000;\n  topicStatsMap.put(tp,topicStats);\n  NamespaceService mockNamespaceService=mock(NamespaceService.class);\n  NamespaceBundle mockNamespaceBundle=mock(NamespaceBundle.class);\n  doReturn(CompletableFuture.completedFuture(mockTopics)).when(mockNamespaceService).getOwnedTopicListForNamespaceBundle(mockNamespaceBundle);\n  NamespaceBundleFactory mockNamespaceBundleFactory=mock(NamespaceBundleFactory.class);\n  doReturn(mockNamespaceBundleFactory).when(mockNamespaceBundle).getNamespaceBundleFactory();\n  mockTopics.forEach((topic) -> {\n    long hashValue=Hashing.crc32().hashString(topic,UTF_8).padToLong();\n    doReturn(hashValue).when(mockNamespaceBundleFactory).getLongHashCode(topic);\n    hashList.add(hashValue);\n    hashAndMsgMap.put(hashValue,topicStatsMap.get(topic).msgRateIn + topicStatsMap.get(topic).msgRateOut);\n    hashAndThroughput.put(hashValue,topicStatsMap.get(topic).msgThroughputIn + topicStatsMap.get(topic).msgThroughputOut);\n  }\n);\n  List<Long> splitPositions=algorithm.getSplitBoundary(new FlowOrQpsEquallyDivideBundleSplitOption(mockNamespaceService,mockNamespaceBundle,null,topicStatsMap,loadBalancerNamespaceBundleMaxMsgRate,loadBalancerNamespaceBundleMaxBandwidthMbytes,flowOrQpsDifferenceThresholdPercentage)).join();\n  Collections.sort(hashList);\n  int i=0;\n  for (  Long position : splitPositions) {\n    Long endPosition=position;\n    double bundleMsgRateTmp=0;\n    double bundleThroughputTmp=0;\n    while (hashList.get(i) < endPosition) {\n      bundleMsgRateTmp+=hashAndMsgMap.get(hashList.get(i));\n      bundleThroughputTmp+=hashAndThroughput.get(hashList.get(i));\n      i++;\n    }\n    assertTrue(bundleMsgRateTmp < loadBalancerNamespaceBundleMaxMsgRate);\n    assertTrue(bundleThroughputTmp < loadBalancerNamespaceBundleMaxBandwidthMbytes * 1024 * 1024);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 539,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 43,
        "startColumnNumber" : 8,
        "endLineNumber" : 43,
        "endColumnNumber" : 56
      },
      "nodeContext" : "int flowOrQpsDifferenceThresholdPercentage=10;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 43,
    "startColumnNumber" : 53,
    "endLineNumber" : 43,
    "endColumnNumber" : 55
  } ],
  "layoutRelationDataList" : [ ]
}