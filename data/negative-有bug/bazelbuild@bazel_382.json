{
  "id" : 382,
  "expression" : "\"Invalid output format '%s'. Valid values are: %s\"",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/main/java/com/google/devtools/build/lib/runtime/commands/QueryEnvironmentBasedCommand.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Invalid output format '%s'. Valid values are: %s\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 50,
      "startLineNumber" : 150,
      "startColumnNumber" : 14,
      "endLineNumber" : 150,
      "endColumnNumber" : 64
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 166,
        "startLineNumber" : 149,
        "startColumnNumber" : 10,
        "endLineNumber" : 151,
        "endColumnNumber" : 85
      },
      "nodeContext" : "String.format(\"Invalid output format '%s'. Valid values are: %s\",queryOptions.outputFormat,OutputFormatters.formatterNames(formatters))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 266,
        "startLineNumber" : 147,
        "startColumnNumber" : 13,
        "endLineNumber" : 152,
        "endColumnNumber" : 43
      },
      "nodeContext" : "reportAndCreateFailureResult(env,String.format(\"Invalid output format '%s'. Valid values are: %s\",queryOptions.outputFormat,OutputFormatters.formatterNames(formatters)),Query.Code.OUTPUT_FORMAT_INVALID)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 274,
        "startLineNumber" : 147,
        "startColumnNumber" : 6,
        "endLineNumber" : 152,
        "endColumnNumber" : 44
      },
      "nodeContext" : "return reportAndCreateFailureResult(env,String.format(\"Invalid output format '%s'. Valid values are: %s\",queryOptions.outputFormat,OutputFormatters.formatterNames(formatters)),Query.Code.OUTPUT_FORMAT_INVALID);\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 20,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 288,
        "startLineNumber" : 146,
        "startColumnNumber" : 27,
        "endLineNumber" : 153,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  return reportAndCreateFailureResult(env,String.format(\"Invalid output format '%s'. Valid values are: %s\",queryOptions.outputFormat,OutputFormatters.formatterNames(formatters)),Query.Code.OUTPUT_FORMAT_INVALID);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 311,
        "startLineNumber" : 146,
        "startColumnNumber" : 4,
        "endLineNumber" : 153,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (formatter == null) {\n  return reportAndCreateFailureResult(env,String.format(\"Invalid output format '%s'. Valid values are: %s\",queryOptions.outputFormat,OutputFormatters.formatterNames(formatters)),Query.Code.OUTPUT_FORMAT_INVALID);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5285,
        "startLineNumber" : 101,
        "startColumnNumber" : 96,
        "endLineNumber" : 218,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  BlazeRuntime runtime=env.getRuntime();\n  QueryOptions queryOptions=options.getOptions(QueryOptions.class);\n  try {\n    env.syncPackageLoading(options);\n  }\n catch (  InterruptedException e) {\n    return reportAndCreateInterruptResult(env,\"query interrupted\");\n  }\ncatch (  AbruptExitException e) {\n    env.getReporter().handle(Event.error(null,\"Unknown error: \" + e.getMessage()));\n    return BlazeCommandResult.detailedExitCode(e.getDetailedExitCode());\n  }\n  String query;\n  if (!options.getResidue().isEmpty()) {\n    if (!queryOptions.queryFile.isEmpty()) {\n      return reportAndCreateFailureResult(env,\"Command-line query and --query_file cannot both be specified\",Query.Code.QUERY_FILE_WITH_COMMAND_LINE_EXPRESSION);\n    }\n    query=Joiner.on(' ').join(options.getResidue());\n  }\n else   if (!queryOptions.queryFile.isEmpty()) {\n    Path residuePath=env.getWorkingDirectory().getRelative(queryOptions.queryFile);\n    try {\n      query=new String(FileSystemUtils.readContent(residuePath),StandardCharsets.UTF_8);\n    }\n catch (    IOException e) {\n      return reportAndCreateFailureResult(env,\"I/O error reading from \" + residuePath.getPathString(),Query.Code.QUERY_FILE_READ_FAILURE);\n    }\n  }\n else {\n    return reportAndCreateFailureResult(env,String.format(\"missing query expression. Type '%s help query' for syntax and help\",runtime.getProductName()),Query.Code.COMMAND_LINE_EXPRESSION_MISSING);\n  }\n  Iterable<OutputFormatter> formatters=runtime.getQueryOutputFormatters();\n  OutputFormatter formatter=OutputFormatters.getFormatter(formatters,queryOptions.outputFormat);\n  if (formatter == null) {\n    return reportAndCreateFailureResult(env,String.format(\"Invalid output format '%s'. Valid values are: %s\",queryOptions.outputFormat,OutputFormatters.formatterNames(formatters)),Query.Code.OUTPUT_FORMAT_INVALID);\n  }\n  Set<Setting> settings=queryOptions.toSettings();\n  boolean streamResults=QueryOutputUtils.shouldStreamResults(queryOptions,formatter);\n  boolean useGraphlessQuery=queryOptions.useGraphlessQuery == TriState.YES || (queryOptions.useGraphlessQuery == TriState.AUTO && streamResults);\n  if (useGraphlessQuery && !streamResults) {\n    return reportAndCreateFailureResult(env,String.format(\"--experimental_graphless_query requires --order_output=no or --order_output=auto and\" + \" an --output option that supports streaming; valid values are: %s\",OutputFormatters.streamingFormatterNames(formatters)),Query.Code.GRAPHLESS_PREREQ_UNMET);\n  }\n  try (QueryRuntimeHelper queryRuntimeHelper=env.getRuntime().getQueryRuntimeHelperFactory().create(env)){\n    Either<BlazeCommandResult,QueryEvalResult> result;\n    try (AbstractBlazeQueryEnvironment<Target> queryEnv=newQueryEnvironment(env,options.getOptions(KeepGoingOption.class).keepGoing,!streamResults,env.getSkyframeExecutor().maybeGetHardcodedUniverseScope().orElse(getUniverseScope(queryOptions)),options.getOptions(LoadingPhaseThreadsOption.class).threads,settings,useGraphlessQuery)){\n      result=doQuery(query,env,queryOptions,streamResults,formatter,queryEnv,queryRuntimeHelper);\n    }\n     return result.map(Function.identity(),queryEvalResult -> {\n      if (queryEvalResult.isEmpty()) {\n        env.getReporter().handle(Event.info(\"Empty results\"));\n      }\n      try {\n        queryRuntimeHelper.afterQueryOutputIsWritten();\n      }\n catch (      QueryRuntimeHelperException e) {\n        env.getReporter().handle(Event.error(e.getMessage()));\n        return BlazeCommandResult.detailedExitCode(DetailedExitCode.of(e.getFailureDetail()));\n      }\ncatch (      InterruptedException e) {\n        return reportAndCreateInterruptResult(env,\"query interrupted\");\n      }\n      if (queryEvalResult.getSuccess()) {\n        return BlazeCommandResult.success();\n      }\n      return BlazeCommandResult.detailedExitCode(DetailedExitCode.of(ExitCode.PARTIAL_ANALYSIS_FAILURE,queryEvalResult.getDetailedExitCode().getFailureDetail()));\n    }\n);\n  }\n catch (  QueryRuntimeHelperException e) {\n    env.getReporter().handle(Event.error(e.getMessage()));\n    return BlazeCommandResult.detailedExitCode(DetailedExitCode.of(e.getFailureDetail()));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 500,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5379,
        "startLineNumber" : 101,
        "startColumnNumber" : 2,
        "endLineNumber" : 218,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private BlazeCommandResult execInternal(CommandEnvironment env,OptionsParsingResult options){\n  BlazeRuntime runtime=env.getRuntime();\n  QueryOptions queryOptions=options.getOptions(QueryOptions.class);\n  try {\n    env.syncPackageLoading(options);\n  }\n catch (  InterruptedException e) {\n    return reportAndCreateInterruptResult(env,\"query interrupted\");\n  }\ncatch (  AbruptExitException e) {\n    env.getReporter().handle(Event.error(null,\"Unknown error: \" + e.getMessage()));\n    return BlazeCommandResult.detailedExitCode(e.getDetailedExitCode());\n  }\n  String query;\n  if (!options.getResidue().isEmpty()) {\n    if (!queryOptions.queryFile.isEmpty()) {\n      return reportAndCreateFailureResult(env,\"Command-line query and --query_file cannot both be specified\",Query.Code.QUERY_FILE_WITH_COMMAND_LINE_EXPRESSION);\n    }\n    query=Joiner.on(' ').join(options.getResidue());\n  }\n else   if (!queryOptions.queryFile.isEmpty()) {\n    Path residuePath=env.getWorkingDirectory().getRelative(queryOptions.queryFile);\n    try {\n      query=new String(FileSystemUtils.readContent(residuePath),StandardCharsets.UTF_8);\n    }\n catch (    IOException e) {\n      return reportAndCreateFailureResult(env,\"I/O error reading from \" + residuePath.getPathString(),Query.Code.QUERY_FILE_READ_FAILURE);\n    }\n  }\n else {\n    return reportAndCreateFailureResult(env,String.format(\"missing query expression. Type '%s help query' for syntax and help\",runtime.getProductName()),Query.Code.COMMAND_LINE_EXPRESSION_MISSING);\n  }\n  Iterable<OutputFormatter> formatters=runtime.getQueryOutputFormatters();\n  OutputFormatter formatter=OutputFormatters.getFormatter(formatters,queryOptions.outputFormat);\n  if (formatter == null) {\n    return reportAndCreateFailureResult(env,String.format(\"Invalid output format '%s'. Valid values are: %s\",queryOptions.outputFormat,OutputFormatters.formatterNames(formatters)),Query.Code.OUTPUT_FORMAT_INVALID);\n  }\n  Set<Setting> settings=queryOptions.toSettings();\n  boolean streamResults=QueryOutputUtils.shouldStreamResults(queryOptions,formatter);\n  boolean useGraphlessQuery=queryOptions.useGraphlessQuery == TriState.YES || (queryOptions.useGraphlessQuery == TriState.AUTO && streamResults);\n  if (useGraphlessQuery && !streamResults) {\n    return reportAndCreateFailureResult(env,String.format(\"--experimental_graphless_query requires --order_output=no or --order_output=auto and\" + \" an --output option that supports streaming; valid values are: %s\",OutputFormatters.streamingFormatterNames(formatters)),Query.Code.GRAPHLESS_PREREQ_UNMET);\n  }\n  try (QueryRuntimeHelper queryRuntimeHelper=env.getRuntime().getQueryRuntimeHelperFactory().create(env)){\n    Either<BlazeCommandResult,QueryEvalResult> result;\n    try (AbstractBlazeQueryEnvironment<Target> queryEnv=newQueryEnvironment(env,options.getOptions(KeepGoingOption.class).keepGoing,!streamResults,env.getSkyframeExecutor().maybeGetHardcodedUniverseScope().orElse(getUniverseScope(queryOptions)),options.getOptions(LoadingPhaseThreadsOption.class).threads,settings,useGraphlessQuery)){\n      result=doQuery(query,env,queryOptions,streamResults,formatter,queryEnv,queryRuntimeHelper);\n    }\n     return result.map(Function.identity(),queryEvalResult -> {\n      if (queryEvalResult.isEmpty()) {\n        env.getReporter().handle(Event.info(\"Empty results\"));\n      }\n      try {\n        queryRuntimeHelper.afterQueryOutputIsWritten();\n      }\n catch (      QueryRuntimeHelperException e) {\n        env.getReporter().handle(Event.error(e.getMessage()));\n        return BlazeCommandResult.detailedExitCode(DetailedExitCode.of(e.getFailureDetail()));\n      }\ncatch (      InterruptedException e) {\n        return reportAndCreateInterruptResult(env,\"query interrupted\");\n      }\n      if (queryEvalResult.getSuccess()) {\n        return BlazeCommandResult.success();\n      }\n      return BlazeCommandResult.detailedExitCode(DetailedExitCode.of(ExitCode.PARTIAL_ANALYSIS_FAILURE,queryEvalResult.getDetailedExitCode().getFailureDetail()));\n    }\n);\n  }\n catch (  QueryRuntimeHelperException e) {\n    env.getReporter().handle(Event.error(e.getMessage()));\n    return BlazeCommandResult.detailedExitCode(DetailedExitCode.of(e.getFailureDetail()));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 513,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 166,
        "startLineNumber" : 149,
        "startColumnNumber" : 10,
        "endLineNumber" : 151,
        "endColumnNumber" : 85
      },
      "nodeContext" : "String.format(\"Invalid output format '%s'. Valid values are: %s\",queryOptions.outputFormat,OutputFormatters.formatterNames(formatters))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 3
    },
    "tokenLength" : 8,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 50,
    "startLineNumber" : 150,
    "startColumnNumber" : 14,
    "endLineNumber" : 150,
    "endColumnNumber" : 64
  } ],
  "layoutRelationDataList" : [ ]
}