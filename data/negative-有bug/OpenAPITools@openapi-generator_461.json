{
  "id" : 461,
  "expression" : "currentPosition + maxLength",
  "projectName" : "OpenAPITools@openapi-generator",
  "commitID" : "9e1972bb1d3a4f1e3f47c87613f4050feada0146",
  "filePath" : "/modules/openapi-generator/src/main/java/org/openapitools/codegen/templating/mustache/SplitStringLambda.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "currentPosition + maxLength",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 27,
      "startLineNumber" : 79,
      "startColumnNumber" : 19,
      "endLineNumber" : 79,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 79,
        "startColumnNumber" : 19,
        "endLineNumber" : 79,
        "endColumnNumber" : 63
      },
      "nodeContext" : "currentPosition + maxLength < input.length()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 518,
        "startLineNumber" : 79,
        "startColumnNumber" : 12,
        "endLineNumber" : 88,
        "endColumnNumber" : 13
      },
      "nodeContext" : "while (currentPosition + maxLength < input.length()) {\n  currentStringLength=maxLength;\n  currentLastChar=input.charAt(currentPosition + currentStringLength - 1);\n  if (currentLastChar == '\\\\') {\n    --currentStringLength;\n  }\n  builder.append(String.format(Locale.ROOT,SPLIT_PART,input.substring(currentPosition,currentPosition + currentStringLength)));\n  currentPosition+=currentStringLength;\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 54,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1271,
        "startLineNumber" : 68,
        "startColumnNumber" : 37,
        "endLineNumber" : 97,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  builder.append(String.format(Locale.ROOT,SPLIT_INIT,inputLength));\n  int currentPosition=0;\n  int currentStringLength=0;\n  char currentLastChar='\\\\';\n  while (currentPosition + maxLength < input.length()) {\n    currentStringLength=maxLength;\n    currentLastChar=input.charAt(currentPosition + currentStringLength - 1);\n    if (currentLastChar == '\\\\') {\n      --currentStringLength;\n    }\n    builder.append(String.format(Locale.ROOT,SPLIT_PART,input.substring(currentPosition,currentPosition + currentStringLength)));\n    currentPosition+=currentStringLength;\n  }\n  if (currentPosition < input.length()) {\n    builder.append(String.format(Locale.ROOT,SPLIT_PART,input.substring(currentPosition)));\n  }\n  builder.append(SPLIT_SUFFIX);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 109,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1390,
        "startLineNumber" : 68,
        "startColumnNumber" : 8,
        "endLineNumber" : 99,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (inputLength > maxLength) {\n  builder.append(String.format(Locale.ROOT,SPLIT_INIT,inputLength));\n  int currentPosition=0;\n  int currentStringLength=0;\n  char currentLastChar='\\\\';\n  while (currentPosition + maxLength < input.length()) {\n    currentStringLength=maxLength;\n    currentLastChar=input.charAt(currentPosition + currentStringLength - 1);\n    if (currentLastChar == '\\\\') {\n      --currentStringLength;\n    }\n    builder.append(String.format(Locale.ROOT,SPLIT_PART,input.substring(currentPosition,currentPosition + currentStringLength)));\n    currentPosition+=currentStringLength;\n  }\n  if (currentPosition < input.length()) {\n    builder.append(String.format(Locale.ROOT,SPLIT_PART,input.substring(currentPosition)));\n  }\n  builder.append(SPLIT_SUFFIX);\n}\n else {\n  builder.append(String.format(Locale.ROOT,\"\\\"%s\\\"\",input));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 126,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1588,
        "startLineNumber" : 63,
        "startColumnNumber" : 77,
        "endLineNumber" : 102,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String input=fragment.execute();\n  int inputLength=input.length();\n  StringBuilder builder=new StringBuilder();\n  if (inputLength > maxLength) {\n    builder.append(String.format(Locale.ROOT,SPLIT_INIT,inputLength));\n    int currentPosition=0;\n    int currentStringLength=0;\n    char currentLastChar='\\\\';\n    while (currentPosition + maxLength < input.length()) {\n      currentStringLength=maxLength;\n      currentLastChar=input.charAt(currentPosition + currentStringLength - 1);\n      if (currentLastChar == '\\\\') {\n        --currentStringLength;\n      }\n      builder.append(String.format(Locale.ROOT,SPLIT_PART,input.substring(currentPosition,currentPosition + currentStringLength)));\n      currentPosition+=currentStringLength;\n    }\n    if (currentPosition < input.length()) {\n      builder.append(String.format(Locale.ROOT,SPLIT_PART,input.substring(currentPosition)));\n    }\n    builder.append(SPLIT_SUFFIX);\n  }\n else {\n    builder.append(String.format(Locale.ROOT,\"\\\"%s\\\"\",input));\n  }\n  writer.write(builder.toString());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 157,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1675,
        "startLineNumber" : 62,
        "startColumnNumber" : 4,
        "endLineNumber" : 102,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void execute(Fragment fragment,Writer writer) throws IOException {\n  String input=fragment.execute();\n  int inputLength=input.length();\n  StringBuilder builder=new StringBuilder();\n  if (inputLength > maxLength) {\n    builder.append(String.format(Locale.ROOT,SPLIT_INIT,inputLength));\n    int currentPosition=0;\n    int currentStringLength=0;\n    char currentLastChar='\\\\';\n    while (currentPosition + maxLength < input.length()) {\n      currentStringLength=maxLength;\n      currentLastChar=input.charAt(currentPosition + currentStringLength - 1);\n      if (currentLastChar == '\\\\') {\n        --currentStringLength;\n      }\n      builder.append(String.format(Locale.ROOT,SPLIT_PART,input.substring(currentPosition,currentPosition + currentStringLength)));\n      currentPosition+=currentStringLength;\n    }\n    if (currentPosition < input.length()) {\n      builder.append(String.format(Locale.ROOT,SPLIT_PART,input.substring(currentPosition)));\n    }\n    builder.append(SPLIT_SUFFIX);\n  }\n else {\n    builder.append(String.format(Locale.ROOT,\"\\\"%s\\\"\",input));\n  }\n  writer.write(builder.toString());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 173,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 79,
        "startColumnNumber" : 19,
        "endLineNumber" : 79,
        "endColumnNumber" : 63
      },
      "nodeContext" : "currentPosition + maxLength < input.length()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    },
    "tokenLength" : 3,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 27,
    "startLineNumber" : 79,
    "startColumnNumber" : 19,
    "endLineNumber" : 79,
    "endColumnNumber" : 46
  } ],
  "layoutRelationDataList" : [ ]
}