{
  "id" : 106,
  "expression" : "new RetrieveUsedSegmentsAction(\"bar\",Intervals.of(\"2002/P1D\"),null,Segments.ONLY_VISIBLE)",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/indexing-service/src/test/java/org/apache/druid/indexing/appenderator/ActionBasedUsedSegmentCheckerTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new RetrieveUsedSegmentsAction(\"bar\",Intervals.of(\"2002/P1D\"),null,Segments.ONLY_VISIBLE)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 92,
      "startLineNumber" : 47,
      "startColumnNumber" : 12,
      "endLineNumber" : 47,
      "endColumnNumber" : 104
    },
    "astNodeNumber" : 12,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 139,
        "startLineNumber" : 46,
        "startColumnNumber" : 8,
        "endLineNumber" : 48,
        "endColumnNumber" : 9
      },
      "nodeContext" : "taskActionClient.submit(new RetrieveUsedSegmentsAction(\"bar\",Intervals.of(\"2002/P1D\"),null,Segments.ONLY_VISIBLE))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 170,
        "startLineNumber" : 45,
        "startColumnNumber" : 4,
        "endLineNumber" : 49,
        "endColumnNumber" : 5
      },
      "nodeContext" : "EasyMock.expect(taskActionClient.submit(new RetrieveUsedSegmentsAction(\"bar\",Intervals.of(\"2002/P1D\"),null,Segments.ONLY_VISIBLE)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 812,
        "startLineNumber" : 45,
        "startColumnNumber" : 4,
        "endLineNumber" : 66,
        "endColumnNumber" : 5
      },
      "nodeContext" : "EasyMock.expect(taskActionClient.submit(new RetrieveUsedSegmentsAction(\"bar\",Intervals.of(\"2002/P1D\"),null,Segments.ONLY_VISIBLE))).andReturn(ImmutableList.of(DataSegment.builder().dataSource(\"bar\").interval(Intervals.of(\"2002/P1D\")).shardSpec(new LinearShardSpec(0)).version(\"b\").size(0).build(),DataSegment.builder().dataSource(\"bar\").interval(Intervals.of(\"2002/P1D\")).shardSpec(new LinearShardSpec(1)).version(\"b\").size(0).build()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 75,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 813,
        "startLineNumber" : 45,
        "startColumnNumber" : 4,
        "endLineNumber" : 66,
        "endColumnNumber" : 6
      },
      "nodeContext" : "EasyMock.expect(taskActionClient.submit(new RetrieveUsedSegmentsAction(\"bar\",Intervals.of(\"2002/P1D\"),null,Segments.ONLY_VISIBLE))).andReturn(ImmutableList.of(DataSegment.builder().dataSource(\"bar\").interval(Intervals.of(\"2002/P1D\")).shardSpec(new LinearShardSpec(0)).version(\"b\").size(0).build(),DataSegment.builder().dataSource(\"bar\").interval(Intervals.of(\"2002/P1D\")).shardSpec(new LinearShardSpec(1)).version(\"b\").size(0).build()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 76,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3702,
        "startLineNumber" : 43,
        "startColumnNumber" : 2,
        "endLineNumber" : 140,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final TaskActionClient taskActionClient=EasyMock.createMock(TaskActionClient.class);\n  EasyMock.expect(taskActionClient.submit(new RetrieveUsedSegmentsAction(\"bar\",Intervals.of(\"2002/P1D\"),null,Segments.ONLY_VISIBLE))).andReturn(ImmutableList.of(DataSegment.builder().dataSource(\"bar\").interval(Intervals.of(\"2002/P1D\")).shardSpec(new LinearShardSpec(0)).version(\"b\").size(0).build(),DataSegment.builder().dataSource(\"bar\").interval(Intervals.of(\"2002/P1D\")).shardSpec(new LinearShardSpec(1)).version(\"b\").size(0).build()));\n  EasyMock.expect(taskActionClient.submit(new RetrieveUsedSegmentsAction(\"foo\",null,ImmutableList.of(Intervals.of(\"2000/P1D\"),Intervals.of(\"2001/P1D\")),Segments.ONLY_VISIBLE))).andReturn(ImmutableList.of(DataSegment.builder().dataSource(\"foo\").interval(Intervals.of(\"2000/P1D\")).shardSpec(new LinearShardSpec(0)).version(\"a\").size(0).build(),DataSegment.builder().dataSource(\"foo\").interval(Intervals.of(\"2000/P1D\")).shardSpec(new LinearShardSpec(1)).version(\"a\").size(0).build(),DataSegment.builder().dataSource(\"foo\").interval(Intervals.of(\"2001/P1D\")).shardSpec(new LinearShardSpec(1)).version(\"b\").size(0).build(),DataSegment.builder().dataSource(\"foo\").interval(Intervals.of(\"2002/P1D\")).shardSpec(new LinearShardSpec(1)).version(\"b\").size(0).build()));\n  EasyMock.replay(taskActionClient);\n  final UsedSegmentChecker checker=new ActionBasedUsedSegmentChecker(taskActionClient);\n  final Set<DataSegment> segments=checker.findUsedSegments(ImmutableSet.of(new SegmentIdWithShardSpec(\"foo\",Intervals.of(\"2000/P1D\"),\"a\",new LinearShardSpec(1)),new SegmentIdWithShardSpec(\"foo\",Intervals.of(\"2001/P1D\"),\"b\",new LinearShardSpec(0)),new SegmentIdWithShardSpec(\"bar\",Intervals.of(\"2002/P1D\"),\"b\",new LinearShardSpec(0))));\n  Assert.assertEquals(ImmutableSet.of(DataSegment.builder().dataSource(\"foo\").interval(Intervals.of(\"2000/P1D\")).shardSpec(new LinearShardSpec(1)).version(\"a\").size(0).build(),DataSegment.builder().dataSource(\"bar\").interval(Intervals.of(\"2002/P1D\")).shardSpec(new LinearShardSpec(0)).version(\"b\").size(0).build()),segments);\n  EasyMock.verify(taskActionClient);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 358,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3755,
        "startLineNumber" : 41,
        "startColumnNumber" : 2,
        "endLineNumber" : 140,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testBasic() throws IOException {\n  final TaskActionClient taskActionClient=EasyMock.createMock(TaskActionClient.class);\n  EasyMock.expect(taskActionClient.submit(new RetrieveUsedSegmentsAction(\"bar\",Intervals.of(\"2002/P1D\"),null,Segments.ONLY_VISIBLE))).andReturn(ImmutableList.of(DataSegment.builder().dataSource(\"bar\").interval(Intervals.of(\"2002/P1D\")).shardSpec(new LinearShardSpec(0)).version(\"b\").size(0).build(),DataSegment.builder().dataSource(\"bar\").interval(Intervals.of(\"2002/P1D\")).shardSpec(new LinearShardSpec(1)).version(\"b\").size(0).build()));\n  EasyMock.expect(taskActionClient.submit(new RetrieveUsedSegmentsAction(\"foo\",null,ImmutableList.of(Intervals.of(\"2000/P1D\"),Intervals.of(\"2001/P1D\")),Segments.ONLY_VISIBLE))).andReturn(ImmutableList.of(DataSegment.builder().dataSource(\"foo\").interval(Intervals.of(\"2000/P1D\")).shardSpec(new LinearShardSpec(0)).version(\"a\").size(0).build(),DataSegment.builder().dataSource(\"foo\").interval(Intervals.of(\"2000/P1D\")).shardSpec(new LinearShardSpec(1)).version(\"a\").size(0).build(),DataSegment.builder().dataSource(\"foo\").interval(Intervals.of(\"2001/P1D\")).shardSpec(new LinearShardSpec(1)).version(\"b\").size(0).build(),DataSegment.builder().dataSource(\"foo\").interval(Intervals.of(\"2002/P1D\")).shardSpec(new LinearShardSpec(1)).version(\"b\").size(0).build()));\n  EasyMock.replay(taskActionClient);\n  final UsedSegmentChecker checker=new ActionBasedUsedSegmentChecker(taskActionClient);\n  final Set<DataSegment> segments=checker.findUsedSegments(ImmutableSet.of(new SegmentIdWithShardSpec(\"foo\",Intervals.of(\"2000/P1D\"),\"a\",new LinearShardSpec(1)),new SegmentIdWithShardSpec(\"foo\",Intervals.of(\"2001/P1D\"),\"b\",new LinearShardSpec(0)),new SegmentIdWithShardSpec(\"bar\",Intervals.of(\"2002/P1D\"),\"b\",new LinearShardSpec(0))));\n  Assert.assertEquals(ImmutableSet.of(DataSegment.builder().dataSource(\"foo\").interval(Intervals.of(\"2000/P1D\")).shardSpec(new LinearShardSpec(1)).version(\"a\").size(0).build(),DataSegment.builder().dataSource(\"bar\").interval(Intervals.of(\"2002/P1D\")).shardSpec(new LinearShardSpec(0)).version(\"b\").size(0).build()),segments);\n  EasyMock.verify(taskActionClient);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 366,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 139,
        "startLineNumber" : 46,
        "startColumnNumber" : 8,
        "endLineNumber" : 48,
        "endColumnNumber" : 9
      },
      "nodeContext" : "taskActionClient.submit(new RetrieveUsedSegmentsAction(\"bar\",Intervals.of(\"2002/P1D\"),null,Segments.ONLY_VISIBLE))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 4
    },
    "tokenLength" : 9,
    "type" : "org.apache.druid.indexing.common.actions.RetrieveUsedSegmentsAction"
  } ],
  "positionList" : [ {
    "charLength" : 92,
    "startLineNumber" : 47,
    "startColumnNumber" : 12,
    "endLineNumber" : 47,
    "endColumnNumber" : 104
  } ],
  "layoutRelationDataList" : [ ]
}