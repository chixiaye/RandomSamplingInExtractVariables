{
  "id" : 295,
  "expression" : "OIDCAdvancedConfigWrapper",
  "projectName" : "keycloak@keycloak",
  "commitID" : "aacae9b9acb0fbedc49d4f88c9fbd7aa11922dce",
  "filePath" : "/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oidc/IdTokenEncryptionTest.java",
  "occurrences" : 10,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "OIDCAdvancedConfigWrapper",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 25,
      "startLineNumber" : 204,
      "startColumnNumber" : 12,
      "endLineNumber" : 204,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 204,
        "startColumnNumber" : 12,
        "endLineNumber" : 204,
        "endColumnNumber" : 73
      },
      "nodeContext" : "OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 204,
        "startColumnNumber" : 12,
        "endLineNumber" : 204,
        "endColumnNumber" : 115
      },
      "nodeContext" : "OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(sigAlgorithm)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 204,
        "startColumnNumber" : 12,
        "endLineNumber" : 204,
        "endColumnNumber" : 116
      },
      "nodeContext" : "OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(sigAlgorithm);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2888,
        "startLineNumber" : 196,
        "startColumnNumber" : 12,
        "endLineNumber" : 242,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  TestOIDCEndpointsApplicationResource oidcClientEndpointsResource=testingClient.testApp().oidcClientEndpoints();\n  oidcClientEndpointsResource.generateKeys(algAlgorithm);\n  clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n  clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(sigAlgorithm);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(algAlgorithm);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(encAlgorithm);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n  String jwksUrl=TestApplicationResourceUrls.clientJwksUri();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(jwksUrl);\n  clientResource.update(clientRep);\n  OAuthClient.AuthorizationEndpointResponse response=oauth.doLogin(\"test-user@localhost\",\"password\");\n  String code=response.getCode();\n  OAuthClient.AccessTokenResponse tokenResponse=oauth.doAccessTokenRequest(code,\"password\");\n  String jweStr=tokenResponse.getIdToken();\n  String[] parts=jweStr.split(\"\\\\.\");\n  Assert.assertEquals(parts.length,5);\n  Map<String,String> keyPair=oidcClientEndpointsResource.getKeysAsPem();\n  PrivateKey decryptionKEK=PemUtils.decodePrivateKey(keyPair.get(\"privateKey\"));\n  JWEHeader jweHeader=(JWEHeader)getHeader(parts[0]);\n  Assert.assertEquals(\"JWT\",jweHeader.getContentType());\n  JWEAlgorithmProvider algorithmProvider=getJweAlgorithmProvider(algAlgorithm);\n  JWEEncryptionProvider encryptionProvider=getJweEncryptionProvider(encAlgorithm);\n  byte[] decodedString=TokenUtil.jweKeyEncryptionVerifyAndDecode(decryptionKEK,jweStr,algorithmProvider,encryptionProvider);\n  String idTokenString=new String(decodedString,\"UTF-8\");\n  IDToken idToken=oauth.verifyIDToken(idTokenString);\n  Assert.assertEquals(\"test-user@localhost\",idToken.getPreferredUsername());\n  Assert.assertEquals(\"test-app\",idToken.getIssuedFor());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 255,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3857,
        "startLineNumber" : 196,
        "startColumnNumber" : 8,
        "endLineNumber" : 255,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  TestOIDCEndpointsApplicationResource oidcClientEndpointsResource=testingClient.testApp().oidcClientEndpoints();\n  oidcClientEndpointsResource.generateKeys(algAlgorithm);\n  clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n  clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(sigAlgorithm);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(algAlgorithm);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(encAlgorithm);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n  String jwksUrl=TestApplicationResourceUrls.clientJwksUri();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(jwksUrl);\n  clientResource.update(clientRep);\n  OAuthClient.AuthorizationEndpointResponse response=oauth.doLogin(\"test-user@localhost\",\"password\");\n  String code=response.getCode();\n  OAuthClient.AccessTokenResponse tokenResponse=oauth.doAccessTokenRequest(code,\"password\");\n  String jweStr=tokenResponse.getIdToken();\n  String[] parts=jweStr.split(\"\\\\.\");\n  Assert.assertEquals(parts.length,5);\n  Map<String,String> keyPair=oidcClientEndpointsResource.getKeysAsPem();\n  PrivateKey decryptionKEK=PemUtils.decodePrivateKey(keyPair.get(\"privateKey\"));\n  JWEHeader jweHeader=(JWEHeader)getHeader(parts[0]);\n  Assert.assertEquals(\"JWT\",jweHeader.getContentType());\n  JWEAlgorithmProvider algorithmProvider=getJweAlgorithmProvider(algAlgorithm);\n  JWEEncryptionProvider encryptionProvider=getJweEncryptionProvider(encAlgorithm);\n  byte[] decodedString=TokenUtil.jweKeyEncryptionVerifyAndDecode(decryptionKEK,jweStr,algorithmProvider,encryptionProvider);\n  String idTokenString=new String(decodedString,\"UTF-8\");\n  IDToken idToken=oauth.verifyIDToken(idTokenString);\n  Assert.assertEquals(\"test-user@localhost\",idToken.getPreferredUsername());\n  Assert.assertEquals(\"test-app\",idToken.getIssuedFor());\n}\n catch (JWEException|UnsupportedEncodingException e) {\n  Assert.fail();\n}\n finally {\n  clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n  clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(Algorithm.RS256);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(null);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(null);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(false);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(null);\n  clientResource.update(clientRep);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 334,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3966,
        "startLineNumber" : 193,
        "startColumnNumber" : 114,
        "endLineNumber" : 256,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ClientResource clientResource=null;\n  ClientRepresentation clientRep=null;\n  try {\n    TestOIDCEndpointsApplicationResource oidcClientEndpointsResource=testingClient.testApp().oidcClientEndpoints();\n    oidcClientEndpointsResource.generateKeys(algAlgorithm);\n    clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n    clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(sigAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(algAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(encAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n    String jwksUrl=TestApplicationResourceUrls.clientJwksUri();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(jwksUrl);\n    clientResource.update(clientRep);\n    OAuthClient.AuthorizationEndpointResponse response=oauth.doLogin(\"test-user@localhost\",\"password\");\n    String code=response.getCode();\n    OAuthClient.AccessTokenResponse tokenResponse=oauth.doAccessTokenRequest(code,\"password\");\n    String jweStr=tokenResponse.getIdToken();\n    String[] parts=jweStr.split(\"\\\\.\");\n    Assert.assertEquals(parts.length,5);\n    Map<String,String> keyPair=oidcClientEndpointsResource.getKeysAsPem();\n    PrivateKey decryptionKEK=PemUtils.decodePrivateKey(keyPair.get(\"privateKey\"));\n    JWEHeader jweHeader=(JWEHeader)getHeader(parts[0]);\n    Assert.assertEquals(\"JWT\",jweHeader.getContentType());\n    JWEAlgorithmProvider algorithmProvider=getJweAlgorithmProvider(algAlgorithm);\n    JWEEncryptionProvider encryptionProvider=getJweEncryptionProvider(encAlgorithm);\n    byte[] decodedString=TokenUtil.jweKeyEncryptionVerifyAndDecode(decryptionKEK,jweStr,algorithmProvider,encryptionProvider);\n    String idTokenString=new String(decodedString,\"UTF-8\");\n    IDToken idToken=oauth.verifyIDToken(idTokenString);\n    Assert.assertEquals(\"test-user@localhost\",idToken.getPreferredUsername());\n    Assert.assertEquals(\"test-app\",idToken.getIssuedFor());\n  }\n catch (  JWEException|UnsupportedEncodingException e) {\n    Assert.fail();\n  }\n finally {\n    clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n    clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(Algorithm.RS256);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(null);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(null);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(false);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(null);\n    clientResource.update(clientRep);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 347,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4076,
        "startLineNumber" : 193,
        "startColumnNumber" : 4,
        "endLineNumber" : 256,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void testIdTokenSignatureAndEncryption(String sigAlgorithm,String algAlgorithm,String encAlgorithm){\n  ClientResource clientResource=null;\n  ClientRepresentation clientRep=null;\n  try {\n    TestOIDCEndpointsApplicationResource oidcClientEndpointsResource=testingClient.testApp().oidcClientEndpoints();\n    oidcClientEndpointsResource.generateKeys(algAlgorithm);\n    clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n    clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(sigAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(algAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(encAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n    String jwksUrl=TestApplicationResourceUrls.clientJwksUri();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(jwksUrl);\n    clientResource.update(clientRep);\n    OAuthClient.AuthorizationEndpointResponse response=oauth.doLogin(\"test-user@localhost\",\"password\");\n    String code=response.getCode();\n    OAuthClient.AccessTokenResponse tokenResponse=oauth.doAccessTokenRequest(code,\"password\");\n    String jweStr=tokenResponse.getIdToken();\n    String[] parts=jweStr.split(\"\\\\.\");\n    Assert.assertEquals(parts.length,5);\n    Map<String,String> keyPair=oidcClientEndpointsResource.getKeysAsPem();\n    PrivateKey decryptionKEK=PemUtils.decodePrivateKey(keyPair.get(\"privateKey\"));\n    JWEHeader jweHeader=(JWEHeader)getHeader(parts[0]);\n    Assert.assertEquals(\"JWT\",jweHeader.getContentType());\n    JWEAlgorithmProvider algorithmProvider=getJweAlgorithmProvider(algAlgorithm);\n    JWEEncryptionProvider encryptionProvider=getJweEncryptionProvider(encAlgorithm);\n    byte[] decodedString=TokenUtil.jweKeyEncryptionVerifyAndDecode(decryptionKEK,jweStr,algorithmProvider,encryptionProvider);\n    String idTokenString=new String(decodedString,\"UTF-8\");\n    IDToken idToken=oauth.verifyIDToken(idTokenString);\n    Assert.assertEquals(\"test-user@localhost\",idToken.getPreferredUsername());\n    Assert.assertEquals(\"test-app\",idToken.getIssuedFor());\n  }\n catch (  JWEException|UnsupportedEncodingException e) {\n    Assert.fail();\n  }\n finally {\n    clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n    clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(Algorithm.RS256);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(null);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(null);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(false);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(null);\n    clientResource.update(clientRep);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 363,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 204,
        "startColumnNumber" : 12,
        "endLineNumber" : 204,
        "endColumnNumber" : 116
      },
      "nodeContext" : "OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(sigAlgorithm);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.keycloak.protocol.oidc.OIDCAdvancedConfigWrapper"
  }, {
    "nodeContext" : "OIDCAdvancedConfigWrapper",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 25,
      "startLineNumber" : 205,
      "startColumnNumber" : 12,
      "endLineNumber" : 205,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 205,
        "startColumnNumber" : 12,
        "endLineNumber" : 205,
        "endColumnNumber" : 73
      },
      "nodeContext" : "OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 205,
        "startColumnNumber" : 12,
        "endLineNumber" : 205,
        "endColumnNumber" : 118
      },
      "nodeContext" : "OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(algAlgorithm)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 205,
        "startColumnNumber" : 12,
        "endLineNumber" : 205,
        "endColumnNumber" : 119
      },
      "nodeContext" : "OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(algAlgorithm);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2888,
        "startLineNumber" : 196,
        "startColumnNumber" : 12,
        "endLineNumber" : 242,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  TestOIDCEndpointsApplicationResource oidcClientEndpointsResource=testingClient.testApp().oidcClientEndpoints();\n  oidcClientEndpointsResource.generateKeys(algAlgorithm);\n  clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n  clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(sigAlgorithm);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(algAlgorithm);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(encAlgorithm);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n  String jwksUrl=TestApplicationResourceUrls.clientJwksUri();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(jwksUrl);\n  clientResource.update(clientRep);\n  OAuthClient.AuthorizationEndpointResponse response=oauth.doLogin(\"test-user@localhost\",\"password\");\n  String code=response.getCode();\n  OAuthClient.AccessTokenResponse tokenResponse=oauth.doAccessTokenRequest(code,\"password\");\n  String jweStr=tokenResponse.getIdToken();\n  String[] parts=jweStr.split(\"\\\\.\");\n  Assert.assertEquals(parts.length,5);\n  Map<String,String> keyPair=oidcClientEndpointsResource.getKeysAsPem();\n  PrivateKey decryptionKEK=PemUtils.decodePrivateKey(keyPair.get(\"privateKey\"));\n  JWEHeader jweHeader=(JWEHeader)getHeader(parts[0]);\n  Assert.assertEquals(\"JWT\",jweHeader.getContentType());\n  JWEAlgorithmProvider algorithmProvider=getJweAlgorithmProvider(algAlgorithm);\n  JWEEncryptionProvider encryptionProvider=getJweEncryptionProvider(encAlgorithm);\n  byte[] decodedString=TokenUtil.jweKeyEncryptionVerifyAndDecode(decryptionKEK,jweStr,algorithmProvider,encryptionProvider);\n  String idTokenString=new String(decodedString,\"UTF-8\");\n  IDToken idToken=oauth.verifyIDToken(idTokenString);\n  Assert.assertEquals(\"test-user@localhost\",idToken.getPreferredUsername());\n  Assert.assertEquals(\"test-app\",idToken.getIssuedFor());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 255,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3857,
        "startLineNumber" : 196,
        "startColumnNumber" : 8,
        "endLineNumber" : 255,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  TestOIDCEndpointsApplicationResource oidcClientEndpointsResource=testingClient.testApp().oidcClientEndpoints();\n  oidcClientEndpointsResource.generateKeys(algAlgorithm);\n  clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n  clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(sigAlgorithm);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(algAlgorithm);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(encAlgorithm);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n  String jwksUrl=TestApplicationResourceUrls.clientJwksUri();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(jwksUrl);\n  clientResource.update(clientRep);\n  OAuthClient.AuthorizationEndpointResponse response=oauth.doLogin(\"test-user@localhost\",\"password\");\n  String code=response.getCode();\n  OAuthClient.AccessTokenResponse tokenResponse=oauth.doAccessTokenRequest(code,\"password\");\n  String jweStr=tokenResponse.getIdToken();\n  String[] parts=jweStr.split(\"\\\\.\");\n  Assert.assertEquals(parts.length,5);\n  Map<String,String> keyPair=oidcClientEndpointsResource.getKeysAsPem();\n  PrivateKey decryptionKEK=PemUtils.decodePrivateKey(keyPair.get(\"privateKey\"));\n  JWEHeader jweHeader=(JWEHeader)getHeader(parts[0]);\n  Assert.assertEquals(\"JWT\",jweHeader.getContentType());\n  JWEAlgorithmProvider algorithmProvider=getJweAlgorithmProvider(algAlgorithm);\n  JWEEncryptionProvider encryptionProvider=getJweEncryptionProvider(encAlgorithm);\n  byte[] decodedString=TokenUtil.jweKeyEncryptionVerifyAndDecode(decryptionKEK,jweStr,algorithmProvider,encryptionProvider);\n  String idTokenString=new String(decodedString,\"UTF-8\");\n  IDToken idToken=oauth.verifyIDToken(idTokenString);\n  Assert.assertEquals(\"test-user@localhost\",idToken.getPreferredUsername());\n  Assert.assertEquals(\"test-app\",idToken.getIssuedFor());\n}\n catch (JWEException|UnsupportedEncodingException e) {\n  Assert.fail();\n}\n finally {\n  clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n  clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(Algorithm.RS256);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(null);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(null);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(false);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(null);\n  clientResource.update(clientRep);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 334,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3966,
        "startLineNumber" : 193,
        "startColumnNumber" : 114,
        "endLineNumber" : 256,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ClientResource clientResource=null;\n  ClientRepresentation clientRep=null;\n  try {\n    TestOIDCEndpointsApplicationResource oidcClientEndpointsResource=testingClient.testApp().oidcClientEndpoints();\n    oidcClientEndpointsResource.generateKeys(algAlgorithm);\n    clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n    clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(sigAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(algAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(encAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n    String jwksUrl=TestApplicationResourceUrls.clientJwksUri();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(jwksUrl);\n    clientResource.update(clientRep);\n    OAuthClient.AuthorizationEndpointResponse response=oauth.doLogin(\"test-user@localhost\",\"password\");\n    String code=response.getCode();\n    OAuthClient.AccessTokenResponse tokenResponse=oauth.doAccessTokenRequest(code,\"password\");\n    String jweStr=tokenResponse.getIdToken();\n    String[] parts=jweStr.split(\"\\\\.\");\n    Assert.assertEquals(parts.length,5);\n    Map<String,String> keyPair=oidcClientEndpointsResource.getKeysAsPem();\n    PrivateKey decryptionKEK=PemUtils.decodePrivateKey(keyPair.get(\"privateKey\"));\n    JWEHeader jweHeader=(JWEHeader)getHeader(parts[0]);\n    Assert.assertEquals(\"JWT\",jweHeader.getContentType());\n    JWEAlgorithmProvider algorithmProvider=getJweAlgorithmProvider(algAlgorithm);\n    JWEEncryptionProvider encryptionProvider=getJweEncryptionProvider(encAlgorithm);\n    byte[] decodedString=TokenUtil.jweKeyEncryptionVerifyAndDecode(decryptionKEK,jweStr,algorithmProvider,encryptionProvider);\n    String idTokenString=new String(decodedString,\"UTF-8\");\n    IDToken idToken=oauth.verifyIDToken(idTokenString);\n    Assert.assertEquals(\"test-user@localhost\",idToken.getPreferredUsername());\n    Assert.assertEquals(\"test-app\",idToken.getIssuedFor());\n  }\n catch (  JWEException|UnsupportedEncodingException e) {\n    Assert.fail();\n  }\n finally {\n    clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n    clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(Algorithm.RS256);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(null);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(null);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(false);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(null);\n    clientResource.update(clientRep);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 347,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4076,
        "startLineNumber" : 193,
        "startColumnNumber" : 4,
        "endLineNumber" : 256,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void testIdTokenSignatureAndEncryption(String sigAlgorithm,String algAlgorithm,String encAlgorithm){\n  ClientResource clientResource=null;\n  ClientRepresentation clientRep=null;\n  try {\n    TestOIDCEndpointsApplicationResource oidcClientEndpointsResource=testingClient.testApp().oidcClientEndpoints();\n    oidcClientEndpointsResource.generateKeys(algAlgorithm);\n    clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n    clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(sigAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(algAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(encAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n    String jwksUrl=TestApplicationResourceUrls.clientJwksUri();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(jwksUrl);\n    clientResource.update(clientRep);\n    OAuthClient.AuthorizationEndpointResponse response=oauth.doLogin(\"test-user@localhost\",\"password\");\n    String code=response.getCode();\n    OAuthClient.AccessTokenResponse tokenResponse=oauth.doAccessTokenRequest(code,\"password\");\n    String jweStr=tokenResponse.getIdToken();\n    String[] parts=jweStr.split(\"\\\\.\");\n    Assert.assertEquals(parts.length,5);\n    Map<String,String> keyPair=oidcClientEndpointsResource.getKeysAsPem();\n    PrivateKey decryptionKEK=PemUtils.decodePrivateKey(keyPair.get(\"privateKey\"));\n    JWEHeader jweHeader=(JWEHeader)getHeader(parts[0]);\n    Assert.assertEquals(\"JWT\",jweHeader.getContentType());\n    JWEAlgorithmProvider algorithmProvider=getJweAlgorithmProvider(algAlgorithm);\n    JWEEncryptionProvider encryptionProvider=getJweEncryptionProvider(encAlgorithm);\n    byte[] decodedString=TokenUtil.jweKeyEncryptionVerifyAndDecode(decryptionKEK,jweStr,algorithmProvider,encryptionProvider);\n    String idTokenString=new String(decodedString,\"UTF-8\");\n    IDToken idToken=oauth.verifyIDToken(idTokenString);\n    Assert.assertEquals(\"test-user@localhost\",idToken.getPreferredUsername());\n    Assert.assertEquals(\"test-app\",idToken.getIssuedFor());\n  }\n catch (  JWEException|UnsupportedEncodingException e) {\n    Assert.fail();\n  }\n finally {\n    clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n    clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(Algorithm.RS256);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(null);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(null);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(false);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(null);\n    clientResource.update(clientRep);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 363,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 205,
        "startColumnNumber" : 12,
        "endLineNumber" : 205,
        "endColumnNumber" : 119
      },
      "nodeContext" : "OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(algAlgorithm);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.keycloak.protocol.oidc.OIDCAdvancedConfigWrapper"
  }, {
    "nodeContext" : "OIDCAdvancedConfigWrapper",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 25,
      "startLineNumber" : 206,
      "startColumnNumber" : 12,
      "endLineNumber" : 206,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 206,
        "startColumnNumber" : 12,
        "endLineNumber" : 206,
        "endColumnNumber" : 73
      },
      "nodeContext" : "OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 206,
        "startColumnNumber" : 12,
        "endLineNumber" : 206,
        "endColumnNumber" : 118
      },
      "nodeContext" : "OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(encAlgorithm)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 206,
        "startColumnNumber" : 12,
        "endLineNumber" : 206,
        "endColumnNumber" : 119
      },
      "nodeContext" : "OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(encAlgorithm);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2888,
        "startLineNumber" : 196,
        "startColumnNumber" : 12,
        "endLineNumber" : 242,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  TestOIDCEndpointsApplicationResource oidcClientEndpointsResource=testingClient.testApp().oidcClientEndpoints();\n  oidcClientEndpointsResource.generateKeys(algAlgorithm);\n  clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n  clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(sigAlgorithm);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(algAlgorithm);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(encAlgorithm);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n  String jwksUrl=TestApplicationResourceUrls.clientJwksUri();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(jwksUrl);\n  clientResource.update(clientRep);\n  OAuthClient.AuthorizationEndpointResponse response=oauth.doLogin(\"test-user@localhost\",\"password\");\n  String code=response.getCode();\n  OAuthClient.AccessTokenResponse tokenResponse=oauth.doAccessTokenRequest(code,\"password\");\n  String jweStr=tokenResponse.getIdToken();\n  String[] parts=jweStr.split(\"\\\\.\");\n  Assert.assertEquals(parts.length,5);\n  Map<String,String> keyPair=oidcClientEndpointsResource.getKeysAsPem();\n  PrivateKey decryptionKEK=PemUtils.decodePrivateKey(keyPair.get(\"privateKey\"));\n  JWEHeader jweHeader=(JWEHeader)getHeader(parts[0]);\n  Assert.assertEquals(\"JWT\",jweHeader.getContentType());\n  JWEAlgorithmProvider algorithmProvider=getJweAlgorithmProvider(algAlgorithm);\n  JWEEncryptionProvider encryptionProvider=getJweEncryptionProvider(encAlgorithm);\n  byte[] decodedString=TokenUtil.jweKeyEncryptionVerifyAndDecode(decryptionKEK,jweStr,algorithmProvider,encryptionProvider);\n  String idTokenString=new String(decodedString,\"UTF-8\");\n  IDToken idToken=oauth.verifyIDToken(idTokenString);\n  Assert.assertEquals(\"test-user@localhost\",idToken.getPreferredUsername());\n  Assert.assertEquals(\"test-app\",idToken.getIssuedFor());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 255,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3857,
        "startLineNumber" : 196,
        "startColumnNumber" : 8,
        "endLineNumber" : 255,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  TestOIDCEndpointsApplicationResource oidcClientEndpointsResource=testingClient.testApp().oidcClientEndpoints();\n  oidcClientEndpointsResource.generateKeys(algAlgorithm);\n  clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n  clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(sigAlgorithm);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(algAlgorithm);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(encAlgorithm);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n  String jwksUrl=TestApplicationResourceUrls.clientJwksUri();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(jwksUrl);\n  clientResource.update(clientRep);\n  OAuthClient.AuthorizationEndpointResponse response=oauth.doLogin(\"test-user@localhost\",\"password\");\n  String code=response.getCode();\n  OAuthClient.AccessTokenResponse tokenResponse=oauth.doAccessTokenRequest(code,\"password\");\n  String jweStr=tokenResponse.getIdToken();\n  String[] parts=jweStr.split(\"\\\\.\");\n  Assert.assertEquals(parts.length,5);\n  Map<String,String> keyPair=oidcClientEndpointsResource.getKeysAsPem();\n  PrivateKey decryptionKEK=PemUtils.decodePrivateKey(keyPair.get(\"privateKey\"));\n  JWEHeader jweHeader=(JWEHeader)getHeader(parts[0]);\n  Assert.assertEquals(\"JWT\",jweHeader.getContentType());\n  JWEAlgorithmProvider algorithmProvider=getJweAlgorithmProvider(algAlgorithm);\n  JWEEncryptionProvider encryptionProvider=getJweEncryptionProvider(encAlgorithm);\n  byte[] decodedString=TokenUtil.jweKeyEncryptionVerifyAndDecode(decryptionKEK,jweStr,algorithmProvider,encryptionProvider);\n  String idTokenString=new String(decodedString,\"UTF-8\");\n  IDToken idToken=oauth.verifyIDToken(idTokenString);\n  Assert.assertEquals(\"test-user@localhost\",idToken.getPreferredUsername());\n  Assert.assertEquals(\"test-app\",idToken.getIssuedFor());\n}\n catch (JWEException|UnsupportedEncodingException e) {\n  Assert.fail();\n}\n finally {\n  clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n  clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(Algorithm.RS256);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(null);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(null);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(false);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(null);\n  clientResource.update(clientRep);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 334,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3966,
        "startLineNumber" : 193,
        "startColumnNumber" : 114,
        "endLineNumber" : 256,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ClientResource clientResource=null;\n  ClientRepresentation clientRep=null;\n  try {\n    TestOIDCEndpointsApplicationResource oidcClientEndpointsResource=testingClient.testApp().oidcClientEndpoints();\n    oidcClientEndpointsResource.generateKeys(algAlgorithm);\n    clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n    clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(sigAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(algAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(encAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n    String jwksUrl=TestApplicationResourceUrls.clientJwksUri();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(jwksUrl);\n    clientResource.update(clientRep);\n    OAuthClient.AuthorizationEndpointResponse response=oauth.doLogin(\"test-user@localhost\",\"password\");\n    String code=response.getCode();\n    OAuthClient.AccessTokenResponse tokenResponse=oauth.doAccessTokenRequest(code,\"password\");\n    String jweStr=tokenResponse.getIdToken();\n    String[] parts=jweStr.split(\"\\\\.\");\n    Assert.assertEquals(parts.length,5);\n    Map<String,String> keyPair=oidcClientEndpointsResource.getKeysAsPem();\n    PrivateKey decryptionKEK=PemUtils.decodePrivateKey(keyPair.get(\"privateKey\"));\n    JWEHeader jweHeader=(JWEHeader)getHeader(parts[0]);\n    Assert.assertEquals(\"JWT\",jweHeader.getContentType());\n    JWEAlgorithmProvider algorithmProvider=getJweAlgorithmProvider(algAlgorithm);\n    JWEEncryptionProvider encryptionProvider=getJweEncryptionProvider(encAlgorithm);\n    byte[] decodedString=TokenUtil.jweKeyEncryptionVerifyAndDecode(decryptionKEK,jweStr,algorithmProvider,encryptionProvider);\n    String idTokenString=new String(decodedString,\"UTF-8\");\n    IDToken idToken=oauth.verifyIDToken(idTokenString);\n    Assert.assertEquals(\"test-user@localhost\",idToken.getPreferredUsername());\n    Assert.assertEquals(\"test-app\",idToken.getIssuedFor());\n  }\n catch (  JWEException|UnsupportedEncodingException e) {\n    Assert.fail();\n  }\n finally {\n    clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n    clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(Algorithm.RS256);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(null);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(null);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(false);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(null);\n    clientResource.update(clientRep);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 347,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4076,
        "startLineNumber" : 193,
        "startColumnNumber" : 4,
        "endLineNumber" : 256,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void testIdTokenSignatureAndEncryption(String sigAlgorithm,String algAlgorithm,String encAlgorithm){\n  ClientResource clientResource=null;\n  ClientRepresentation clientRep=null;\n  try {\n    TestOIDCEndpointsApplicationResource oidcClientEndpointsResource=testingClient.testApp().oidcClientEndpoints();\n    oidcClientEndpointsResource.generateKeys(algAlgorithm);\n    clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n    clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(sigAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(algAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(encAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n    String jwksUrl=TestApplicationResourceUrls.clientJwksUri();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(jwksUrl);\n    clientResource.update(clientRep);\n    OAuthClient.AuthorizationEndpointResponse response=oauth.doLogin(\"test-user@localhost\",\"password\");\n    String code=response.getCode();\n    OAuthClient.AccessTokenResponse tokenResponse=oauth.doAccessTokenRequest(code,\"password\");\n    String jweStr=tokenResponse.getIdToken();\n    String[] parts=jweStr.split(\"\\\\.\");\n    Assert.assertEquals(parts.length,5);\n    Map<String,String> keyPair=oidcClientEndpointsResource.getKeysAsPem();\n    PrivateKey decryptionKEK=PemUtils.decodePrivateKey(keyPair.get(\"privateKey\"));\n    JWEHeader jweHeader=(JWEHeader)getHeader(parts[0]);\n    Assert.assertEquals(\"JWT\",jweHeader.getContentType());\n    JWEAlgorithmProvider algorithmProvider=getJweAlgorithmProvider(algAlgorithm);\n    JWEEncryptionProvider encryptionProvider=getJweEncryptionProvider(encAlgorithm);\n    byte[] decodedString=TokenUtil.jweKeyEncryptionVerifyAndDecode(decryptionKEK,jweStr,algorithmProvider,encryptionProvider);\n    String idTokenString=new String(decodedString,\"UTF-8\");\n    IDToken idToken=oauth.verifyIDToken(idTokenString);\n    Assert.assertEquals(\"test-user@localhost\",idToken.getPreferredUsername());\n    Assert.assertEquals(\"test-app\",idToken.getIssuedFor());\n  }\n catch (  JWEException|UnsupportedEncodingException e) {\n    Assert.fail();\n  }\n finally {\n    clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n    clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(Algorithm.RS256);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(null);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(null);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(false);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(null);\n    clientResource.update(clientRep);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 363,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 206,
        "startColumnNumber" : 12,
        "endLineNumber" : 206,
        "endColumnNumber" : 119
      },
      "nodeContext" : "OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(encAlgorithm);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.keycloak.protocol.oidc.OIDCAdvancedConfigWrapper"
  }, {
    "nodeContext" : "OIDCAdvancedConfigWrapper",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 25,
      "startLineNumber" : 208,
      "startColumnNumber" : 12,
      "endLineNumber" : 208,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 208,
        "startColumnNumber" : 12,
        "endLineNumber" : 208,
        "endColumnNumber" : 73
      },
      "nodeContext" : "OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 208,
        "startColumnNumber" : 12,
        "endLineNumber" : 208,
        "endColumnNumber" : 93
      },
      "nodeContext" : "OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 208,
        "startColumnNumber" : 12,
        "endLineNumber" : 208,
        "endColumnNumber" : 94
      },
      "nodeContext" : "OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2888,
        "startLineNumber" : 196,
        "startColumnNumber" : 12,
        "endLineNumber" : 242,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  TestOIDCEndpointsApplicationResource oidcClientEndpointsResource=testingClient.testApp().oidcClientEndpoints();\n  oidcClientEndpointsResource.generateKeys(algAlgorithm);\n  clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n  clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(sigAlgorithm);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(algAlgorithm);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(encAlgorithm);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n  String jwksUrl=TestApplicationResourceUrls.clientJwksUri();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(jwksUrl);\n  clientResource.update(clientRep);\n  OAuthClient.AuthorizationEndpointResponse response=oauth.doLogin(\"test-user@localhost\",\"password\");\n  String code=response.getCode();\n  OAuthClient.AccessTokenResponse tokenResponse=oauth.doAccessTokenRequest(code,\"password\");\n  String jweStr=tokenResponse.getIdToken();\n  String[] parts=jweStr.split(\"\\\\.\");\n  Assert.assertEquals(parts.length,5);\n  Map<String,String> keyPair=oidcClientEndpointsResource.getKeysAsPem();\n  PrivateKey decryptionKEK=PemUtils.decodePrivateKey(keyPair.get(\"privateKey\"));\n  JWEHeader jweHeader=(JWEHeader)getHeader(parts[0]);\n  Assert.assertEquals(\"JWT\",jweHeader.getContentType());\n  JWEAlgorithmProvider algorithmProvider=getJweAlgorithmProvider(algAlgorithm);\n  JWEEncryptionProvider encryptionProvider=getJweEncryptionProvider(encAlgorithm);\n  byte[] decodedString=TokenUtil.jweKeyEncryptionVerifyAndDecode(decryptionKEK,jweStr,algorithmProvider,encryptionProvider);\n  String idTokenString=new String(decodedString,\"UTF-8\");\n  IDToken idToken=oauth.verifyIDToken(idTokenString);\n  Assert.assertEquals(\"test-user@localhost\",idToken.getPreferredUsername());\n  Assert.assertEquals(\"test-app\",idToken.getIssuedFor());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 255,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3857,
        "startLineNumber" : 196,
        "startColumnNumber" : 8,
        "endLineNumber" : 255,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  TestOIDCEndpointsApplicationResource oidcClientEndpointsResource=testingClient.testApp().oidcClientEndpoints();\n  oidcClientEndpointsResource.generateKeys(algAlgorithm);\n  clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n  clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(sigAlgorithm);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(algAlgorithm);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(encAlgorithm);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n  String jwksUrl=TestApplicationResourceUrls.clientJwksUri();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(jwksUrl);\n  clientResource.update(clientRep);\n  OAuthClient.AuthorizationEndpointResponse response=oauth.doLogin(\"test-user@localhost\",\"password\");\n  String code=response.getCode();\n  OAuthClient.AccessTokenResponse tokenResponse=oauth.doAccessTokenRequest(code,\"password\");\n  String jweStr=tokenResponse.getIdToken();\n  String[] parts=jweStr.split(\"\\\\.\");\n  Assert.assertEquals(parts.length,5);\n  Map<String,String> keyPair=oidcClientEndpointsResource.getKeysAsPem();\n  PrivateKey decryptionKEK=PemUtils.decodePrivateKey(keyPair.get(\"privateKey\"));\n  JWEHeader jweHeader=(JWEHeader)getHeader(parts[0]);\n  Assert.assertEquals(\"JWT\",jweHeader.getContentType());\n  JWEAlgorithmProvider algorithmProvider=getJweAlgorithmProvider(algAlgorithm);\n  JWEEncryptionProvider encryptionProvider=getJweEncryptionProvider(encAlgorithm);\n  byte[] decodedString=TokenUtil.jweKeyEncryptionVerifyAndDecode(decryptionKEK,jweStr,algorithmProvider,encryptionProvider);\n  String idTokenString=new String(decodedString,\"UTF-8\");\n  IDToken idToken=oauth.verifyIDToken(idTokenString);\n  Assert.assertEquals(\"test-user@localhost\",idToken.getPreferredUsername());\n  Assert.assertEquals(\"test-app\",idToken.getIssuedFor());\n}\n catch (JWEException|UnsupportedEncodingException e) {\n  Assert.fail();\n}\n finally {\n  clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n  clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(Algorithm.RS256);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(null);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(null);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(false);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(null);\n  clientResource.update(clientRep);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 334,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3966,
        "startLineNumber" : 193,
        "startColumnNumber" : 114,
        "endLineNumber" : 256,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ClientResource clientResource=null;\n  ClientRepresentation clientRep=null;\n  try {\n    TestOIDCEndpointsApplicationResource oidcClientEndpointsResource=testingClient.testApp().oidcClientEndpoints();\n    oidcClientEndpointsResource.generateKeys(algAlgorithm);\n    clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n    clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(sigAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(algAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(encAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n    String jwksUrl=TestApplicationResourceUrls.clientJwksUri();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(jwksUrl);\n    clientResource.update(clientRep);\n    OAuthClient.AuthorizationEndpointResponse response=oauth.doLogin(\"test-user@localhost\",\"password\");\n    String code=response.getCode();\n    OAuthClient.AccessTokenResponse tokenResponse=oauth.doAccessTokenRequest(code,\"password\");\n    String jweStr=tokenResponse.getIdToken();\n    String[] parts=jweStr.split(\"\\\\.\");\n    Assert.assertEquals(parts.length,5);\n    Map<String,String> keyPair=oidcClientEndpointsResource.getKeysAsPem();\n    PrivateKey decryptionKEK=PemUtils.decodePrivateKey(keyPair.get(\"privateKey\"));\n    JWEHeader jweHeader=(JWEHeader)getHeader(parts[0]);\n    Assert.assertEquals(\"JWT\",jweHeader.getContentType());\n    JWEAlgorithmProvider algorithmProvider=getJweAlgorithmProvider(algAlgorithm);\n    JWEEncryptionProvider encryptionProvider=getJweEncryptionProvider(encAlgorithm);\n    byte[] decodedString=TokenUtil.jweKeyEncryptionVerifyAndDecode(decryptionKEK,jweStr,algorithmProvider,encryptionProvider);\n    String idTokenString=new String(decodedString,\"UTF-8\");\n    IDToken idToken=oauth.verifyIDToken(idTokenString);\n    Assert.assertEquals(\"test-user@localhost\",idToken.getPreferredUsername());\n    Assert.assertEquals(\"test-app\",idToken.getIssuedFor());\n  }\n catch (  JWEException|UnsupportedEncodingException e) {\n    Assert.fail();\n  }\n finally {\n    clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n    clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(Algorithm.RS256);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(null);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(null);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(false);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(null);\n    clientResource.update(clientRep);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 347,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4076,
        "startLineNumber" : 193,
        "startColumnNumber" : 4,
        "endLineNumber" : 256,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void testIdTokenSignatureAndEncryption(String sigAlgorithm,String algAlgorithm,String encAlgorithm){\n  ClientResource clientResource=null;\n  ClientRepresentation clientRep=null;\n  try {\n    TestOIDCEndpointsApplicationResource oidcClientEndpointsResource=testingClient.testApp().oidcClientEndpoints();\n    oidcClientEndpointsResource.generateKeys(algAlgorithm);\n    clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n    clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(sigAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(algAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(encAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n    String jwksUrl=TestApplicationResourceUrls.clientJwksUri();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(jwksUrl);\n    clientResource.update(clientRep);\n    OAuthClient.AuthorizationEndpointResponse response=oauth.doLogin(\"test-user@localhost\",\"password\");\n    String code=response.getCode();\n    OAuthClient.AccessTokenResponse tokenResponse=oauth.doAccessTokenRequest(code,\"password\");\n    String jweStr=tokenResponse.getIdToken();\n    String[] parts=jweStr.split(\"\\\\.\");\n    Assert.assertEquals(parts.length,5);\n    Map<String,String> keyPair=oidcClientEndpointsResource.getKeysAsPem();\n    PrivateKey decryptionKEK=PemUtils.decodePrivateKey(keyPair.get(\"privateKey\"));\n    JWEHeader jweHeader=(JWEHeader)getHeader(parts[0]);\n    Assert.assertEquals(\"JWT\",jweHeader.getContentType());\n    JWEAlgorithmProvider algorithmProvider=getJweAlgorithmProvider(algAlgorithm);\n    JWEEncryptionProvider encryptionProvider=getJweEncryptionProvider(encAlgorithm);\n    byte[] decodedString=TokenUtil.jweKeyEncryptionVerifyAndDecode(decryptionKEK,jweStr,algorithmProvider,encryptionProvider);\n    String idTokenString=new String(decodedString,\"UTF-8\");\n    IDToken idToken=oauth.verifyIDToken(idTokenString);\n    Assert.assertEquals(\"test-user@localhost\",idToken.getPreferredUsername());\n    Assert.assertEquals(\"test-app\",idToken.getIssuedFor());\n  }\n catch (  JWEException|UnsupportedEncodingException e) {\n    Assert.fail();\n  }\n finally {\n    clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n    clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(Algorithm.RS256);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(null);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(null);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(false);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(null);\n    clientResource.update(clientRep);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 363,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 208,
        "startColumnNumber" : 12,
        "endLineNumber" : 208,
        "endColumnNumber" : 94
      },
      "nodeContext" : "OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.keycloak.protocol.oidc.OIDCAdvancedConfigWrapper"
  }, {
    "nodeContext" : "OIDCAdvancedConfigWrapper",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 25,
      "startLineNumber" : 210,
      "startColumnNumber" : 12,
      "endLineNumber" : 210,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 210,
        "startColumnNumber" : 12,
        "endLineNumber" : 210,
        "endColumnNumber" : 73
      },
      "nodeContext" : "OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 210,
        "startColumnNumber" : 12,
        "endLineNumber" : 210,
        "endColumnNumber" : 93
      },
      "nodeContext" : "OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(jwksUrl)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 210,
        "startColumnNumber" : 12,
        "endLineNumber" : 210,
        "endColumnNumber" : 94
      },
      "nodeContext" : "OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(jwksUrl);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2888,
        "startLineNumber" : 196,
        "startColumnNumber" : 12,
        "endLineNumber" : 242,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  TestOIDCEndpointsApplicationResource oidcClientEndpointsResource=testingClient.testApp().oidcClientEndpoints();\n  oidcClientEndpointsResource.generateKeys(algAlgorithm);\n  clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n  clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(sigAlgorithm);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(algAlgorithm);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(encAlgorithm);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n  String jwksUrl=TestApplicationResourceUrls.clientJwksUri();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(jwksUrl);\n  clientResource.update(clientRep);\n  OAuthClient.AuthorizationEndpointResponse response=oauth.doLogin(\"test-user@localhost\",\"password\");\n  String code=response.getCode();\n  OAuthClient.AccessTokenResponse tokenResponse=oauth.doAccessTokenRequest(code,\"password\");\n  String jweStr=tokenResponse.getIdToken();\n  String[] parts=jweStr.split(\"\\\\.\");\n  Assert.assertEquals(parts.length,5);\n  Map<String,String> keyPair=oidcClientEndpointsResource.getKeysAsPem();\n  PrivateKey decryptionKEK=PemUtils.decodePrivateKey(keyPair.get(\"privateKey\"));\n  JWEHeader jweHeader=(JWEHeader)getHeader(parts[0]);\n  Assert.assertEquals(\"JWT\",jweHeader.getContentType());\n  JWEAlgorithmProvider algorithmProvider=getJweAlgorithmProvider(algAlgorithm);\n  JWEEncryptionProvider encryptionProvider=getJweEncryptionProvider(encAlgorithm);\n  byte[] decodedString=TokenUtil.jweKeyEncryptionVerifyAndDecode(decryptionKEK,jweStr,algorithmProvider,encryptionProvider);\n  String idTokenString=new String(decodedString,\"UTF-8\");\n  IDToken idToken=oauth.verifyIDToken(idTokenString);\n  Assert.assertEquals(\"test-user@localhost\",idToken.getPreferredUsername());\n  Assert.assertEquals(\"test-app\",idToken.getIssuedFor());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 255,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3857,
        "startLineNumber" : 196,
        "startColumnNumber" : 8,
        "endLineNumber" : 255,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  TestOIDCEndpointsApplicationResource oidcClientEndpointsResource=testingClient.testApp().oidcClientEndpoints();\n  oidcClientEndpointsResource.generateKeys(algAlgorithm);\n  clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n  clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(sigAlgorithm);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(algAlgorithm);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(encAlgorithm);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n  String jwksUrl=TestApplicationResourceUrls.clientJwksUri();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(jwksUrl);\n  clientResource.update(clientRep);\n  OAuthClient.AuthorizationEndpointResponse response=oauth.doLogin(\"test-user@localhost\",\"password\");\n  String code=response.getCode();\n  OAuthClient.AccessTokenResponse tokenResponse=oauth.doAccessTokenRequest(code,\"password\");\n  String jweStr=tokenResponse.getIdToken();\n  String[] parts=jweStr.split(\"\\\\.\");\n  Assert.assertEquals(parts.length,5);\n  Map<String,String> keyPair=oidcClientEndpointsResource.getKeysAsPem();\n  PrivateKey decryptionKEK=PemUtils.decodePrivateKey(keyPair.get(\"privateKey\"));\n  JWEHeader jweHeader=(JWEHeader)getHeader(parts[0]);\n  Assert.assertEquals(\"JWT\",jweHeader.getContentType());\n  JWEAlgorithmProvider algorithmProvider=getJweAlgorithmProvider(algAlgorithm);\n  JWEEncryptionProvider encryptionProvider=getJweEncryptionProvider(encAlgorithm);\n  byte[] decodedString=TokenUtil.jweKeyEncryptionVerifyAndDecode(decryptionKEK,jweStr,algorithmProvider,encryptionProvider);\n  String idTokenString=new String(decodedString,\"UTF-8\");\n  IDToken idToken=oauth.verifyIDToken(idTokenString);\n  Assert.assertEquals(\"test-user@localhost\",idToken.getPreferredUsername());\n  Assert.assertEquals(\"test-app\",idToken.getIssuedFor());\n}\n catch (JWEException|UnsupportedEncodingException e) {\n  Assert.fail();\n}\n finally {\n  clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n  clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(Algorithm.RS256);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(null);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(null);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(false);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(null);\n  clientResource.update(clientRep);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 334,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3966,
        "startLineNumber" : 193,
        "startColumnNumber" : 114,
        "endLineNumber" : 256,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ClientResource clientResource=null;\n  ClientRepresentation clientRep=null;\n  try {\n    TestOIDCEndpointsApplicationResource oidcClientEndpointsResource=testingClient.testApp().oidcClientEndpoints();\n    oidcClientEndpointsResource.generateKeys(algAlgorithm);\n    clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n    clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(sigAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(algAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(encAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n    String jwksUrl=TestApplicationResourceUrls.clientJwksUri();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(jwksUrl);\n    clientResource.update(clientRep);\n    OAuthClient.AuthorizationEndpointResponse response=oauth.doLogin(\"test-user@localhost\",\"password\");\n    String code=response.getCode();\n    OAuthClient.AccessTokenResponse tokenResponse=oauth.doAccessTokenRequest(code,\"password\");\n    String jweStr=tokenResponse.getIdToken();\n    String[] parts=jweStr.split(\"\\\\.\");\n    Assert.assertEquals(parts.length,5);\n    Map<String,String> keyPair=oidcClientEndpointsResource.getKeysAsPem();\n    PrivateKey decryptionKEK=PemUtils.decodePrivateKey(keyPair.get(\"privateKey\"));\n    JWEHeader jweHeader=(JWEHeader)getHeader(parts[0]);\n    Assert.assertEquals(\"JWT\",jweHeader.getContentType());\n    JWEAlgorithmProvider algorithmProvider=getJweAlgorithmProvider(algAlgorithm);\n    JWEEncryptionProvider encryptionProvider=getJweEncryptionProvider(encAlgorithm);\n    byte[] decodedString=TokenUtil.jweKeyEncryptionVerifyAndDecode(decryptionKEK,jweStr,algorithmProvider,encryptionProvider);\n    String idTokenString=new String(decodedString,\"UTF-8\");\n    IDToken idToken=oauth.verifyIDToken(idTokenString);\n    Assert.assertEquals(\"test-user@localhost\",idToken.getPreferredUsername());\n    Assert.assertEquals(\"test-app\",idToken.getIssuedFor());\n  }\n catch (  JWEException|UnsupportedEncodingException e) {\n    Assert.fail();\n  }\n finally {\n    clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n    clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(Algorithm.RS256);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(null);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(null);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(false);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(null);\n    clientResource.update(clientRep);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 347,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4076,
        "startLineNumber" : 193,
        "startColumnNumber" : 4,
        "endLineNumber" : 256,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void testIdTokenSignatureAndEncryption(String sigAlgorithm,String algAlgorithm,String encAlgorithm){\n  ClientResource clientResource=null;\n  ClientRepresentation clientRep=null;\n  try {\n    TestOIDCEndpointsApplicationResource oidcClientEndpointsResource=testingClient.testApp().oidcClientEndpoints();\n    oidcClientEndpointsResource.generateKeys(algAlgorithm);\n    clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n    clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(sigAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(algAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(encAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n    String jwksUrl=TestApplicationResourceUrls.clientJwksUri();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(jwksUrl);\n    clientResource.update(clientRep);\n    OAuthClient.AuthorizationEndpointResponse response=oauth.doLogin(\"test-user@localhost\",\"password\");\n    String code=response.getCode();\n    OAuthClient.AccessTokenResponse tokenResponse=oauth.doAccessTokenRequest(code,\"password\");\n    String jweStr=tokenResponse.getIdToken();\n    String[] parts=jweStr.split(\"\\\\.\");\n    Assert.assertEquals(parts.length,5);\n    Map<String,String> keyPair=oidcClientEndpointsResource.getKeysAsPem();\n    PrivateKey decryptionKEK=PemUtils.decodePrivateKey(keyPair.get(\"privateKey\"));\n    JWEHeader jweHeader=(JWEHeader)getHeader(parts[0]);\n    Assert.assertEquals(\"JWT\",jweHeader.getContentType());\n    JWEAlgorithmProvider algorithmProvider=getJweAlgorithmProvider(algAlgorithm);\n    JWEEncryptionProvider encryptionProvider=getJweEncryptionProvider(encAlgorithm);\n    byte[] decodedString=TokenUtil.jweKeyEncryptionVerifyAndDecode(decryptionKEK,jweStr,algorithmProvider,encryptionProvider);\n    String idTokenString=new String(decodedString,\"UTF-8\");\n    IDToken idToken=oauth.verifyIDToken(idTokenString);\n    Assert.assertEquals(\"test-user@localhost\",idToken.getPreferredUsername());\n    Assert.assertEquals(\"test-app\",idToken.getIssuedFor());\n  }\n catch (  JWEException|UnsupportedEncodingException e) {\n    Assert.fail();\n  }\n finally {\n    clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n    clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(Algorithm.RS256);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(null);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(null);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(false);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(null);\n    clientResource.update(clientRep);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 363,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 210,
        "startColumnNumber" : 12,
        "endLineNumber" : 210,
        "endColumnNumber" : 94
      },
      "nodeContext" : "OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(jwksUrl);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.keycloak.protocol.oidc.OIDCAdvancedConfigWrapper"
  }, {
    "nodeContext" : "OIDCAdvancedConfigWrapper",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 25,
      "startLineNumber" : 248,
      "startColumnNumber" : 12,
      "endLineNumber" : 248,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 248,
        "startColumnNumber" : 12,
        "endLineNumber" : 248,
        "endColumnNumber" : 73
      },
      "nodeContext" : "OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 106,
        "startLineNumber" : 248,
        "startColumnNumber" : 12,
        "endLineNumber" : 248,
        "endColumnNumber" : 118
      },
      "nodeContext" : "OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(Algorithm.RS256)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 248,
        "startColumnNumber" : 12,
        "endLineNumber" : 248,
        "endColumnNumber" : 119
      },
      "nodeContext" : "OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(Algorithm.RS256);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,finally]",
      "nodePosition" : {
        "charLength" : 863,
        "startLineNumber" : 244,
        "startColumnNumber" : 18,
        "endLineNumber" : 255,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n  clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(Algorithm.RS256);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(null);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(null);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(false);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(null);\n  clientResource.update(clientRep);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 65,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3857,
        "startLineNumber" : 196,
        "startColumnNumber" : 8,
        "endLineNumber" : 255,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  TestOIDCEndpointsApplicationResource oidcClientEndpointsResource=testingClient.testApp().oidcClientEndpoints();\n  oidcClientEndpointsResource.generateKeys(algAlgorithm);\n  clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n  clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(sigAlgorithm);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(algAlgorithm);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(encAlgorithm);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n  String jwksUrl=TestApplicationResourceUrls.clientJwksUri();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(jwksUrl);\n  clientResource.update(clientRep);\n  OAuthClient.AuthorizationEndpointResponse response=oauth.doLogin(\"test-user@localhost\",\"password\");\n  String code=response.getCode();\n  OAuthClient.AccessTokenResponse tokenResponse=oauth.doAccessTokenRequest(code,\"password\");\n  String jweStr=tokenResponse.getIdToken();\n  String[] parts=jweStr.split(\"\\\\.\");\n  Assert.assertEquals(parts.length,5);\n  Map<String,String> keyPair=oidcClientEndpointsResource.getKeysAsPem();\n  PrivateKey decryptionKEK=PemUtils.decodePrivateKey(keyPair.get(\"privateKey\"));\n  JWEHeader jweHeader=(JWEHeader)getHeader(parts[0]);\n  Assert.assertEquals(\"JWT\",jweHeader.getContentType());\n  JWEAlgorithmProvider algorithmProvider=getJweAlgorithmProvider(algAlgorithm);\n  JWEEncryptionProvider encryptionProvider=getJweEncryptionProvider(encAlgorithm);\n  byte[] decodedString=TokenUtil.jweKeyEncryptionVerifyAndDecode(decryptionKEK,jweStr,algorithmProvider,encryptionProvider);\n  String idTokenString=new String(decodedString,\"UTF-8\");\n  IDToken idToken=oauth.verifyIDToken(idTokenString);\n  Assert.assertEquals(\"test-user@localhost\",idToken.getPreferredUsername());\n  Assert.assertEquals(\"test-app\",idToken.getIssuedFor());\n}\n catch (JWEException|UnsupportedEncodingException e) {\n  Assert.fail();\n}\n finally {\n  clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n  clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(Algorithm.RS256);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(null);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(null);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(false);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(null);\n  clientResource.update(clientRep);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 334,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3966,
        "startLineNumber" : 193,
        "startColumnNumber" : 114,
        "endLineNumber" : 256,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ClientResource clientResource=null;\n  ClientRepresentation clientRep=null;\n  try {\n    TestOIDCEndpointsApplicationResource oidcClientEndpointsResource=testingClient.testApp().oidcClientEndpoints();\n    oidcClientEndpointsResource.generateKeys(algAlgorithm);\n    clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n    clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(sigAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(algAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(encAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n    String jwksUrl=TestApplicationResourceUrls.clientJwksUri();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(jwksUrl);\n    clientResource.update(clientRep);\n    OAuthClient.AuthorizationEndpointResponse response=oauth.doLogin(\"test-user@localhost\",\"password\");\n    String code=response.getCode();\n    OAuthClient.AccessTokenResponse tokenResponse=oauth.doAccessTokenRequest(code,\"password\");\n    String jweStr=tokenResponse.getIdToken();\n    String[] parts=jweStr.split(\"\\\\.\");\n    Assert.assertEquals(parts.length,5);\n    Map<String,String> keyPair=oidcClientEndpointsResource.getKeysAsPem();\n    PrivateKey decryptionKEK=PemUtils.decodePrivateKey(keyPair.get(\"privateKey\"));\n    JWEHeader jweHeader=(JWEHeader)getHeader(parts[0]);\n    Assert.assertEquals(\"JWT\",jweHeader.getContentType());\n    JWEAlgorithmProvider algorithmProvider=getJweAlgorithmProvider(algAlgorithm);\n    JWEEncryptionProvider encryptionProvider=getJweEncryptionProvider(encAlgorithm);\n    byte[] decodedString=TokenUtil.jweKeyEncryptionVerifyAndDecode(decryptionKEK,jweStr,algorithmProvider,encryptionProvider);\n    String idTokenString=new String(decodedString,\"UTF-8\");\n    IDToken idToken=oauth.verifyIDToken(idTokenString);\n    Assert.assertEquals(\"test-user@localhost\",idToken.getPreferredUsername());\n    Assert.assertEquals(\"test-app\",idToken.getIssuedFor());\n  }\n catch (  JWEException|UnsupportedEncodingException e) {\n    Assert.fail();\n  }\n finally {\n    clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n    clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(Algorithm.RS256);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(null);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(null);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(false);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(null);\n    clientResource.update(clientRep);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 347,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4076,
        "startLineNumber" : 193,
        "startColumnNumber" : 4,
        "endLineNumber" : 256,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void testIdTokenSignatureAndEncryption(String sigAlgorithm,String algAlgorithm,String encAlgorithm){\n  ClientResource clientResource=null;\n  ClientRepresentation clientRep=null;\n  try {\n    TestOIDCEndpointsApplicationResource oidcClientEndpointsResource=testingClient.testApp().oidcClientEndpoints();\n    oidcClientEndpointsResource.generateKeys(algAlgorithm);\n    clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n    clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(sigAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(algAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(encAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n    String jwksUrl=TestApplicationResourceUrls.clientJwksUri();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(jwksUrl);\n    clientResource.update(clientRep);\n    OAuthClient.AuthorizationEndpointResponse response=oauth.doLogin(\"test-user@localhost\",\"password\");\n    String code=response.getCode();\n    OAuthClient.AccessTokenResponse tokenResponse=oauth.doAccessTokenRequest(code,\"password\");\n    String jweStr=tokenResponse.getIdToken();\n    String[] parts=jweStr.split(\"\\\\.\");\n    Assert.assertEquals(parts.length,5);\n    Map<String,String> keyPair=oidcClientEndpointsResource.getKeysAsPem();\n    PrivateKey decryptionKEK=PemUtils.decodePrivateKey(keyPair.get(\"privateKey\"));\n    JWEHeader jweHeader=(JWEHeader)getHeader(parts[0]);\n    Assert.assertEquals(\"JWT\",jweHeader.getContentType());\n    JWEAlgorithmProvider algorithmProvider=getJweAlgorithmProvider(algAlgorithm);\n    JWEEncryptionProvider encryptionProvider=getJweEncryptionProvider(encAlgorithm);\n    byte[] decodedString=TokenUtil.jweKeyEncryptionVerifyAndDecode(decryptionKEK,jweStr,algorithmProvider,encryptionProvider);\n    String idTokenString=new String(decodedString,\"UTF-8\");\n    IDToken idToken=oauth.verifyIDToken(idTokenString);\n    Assert.assertEquals(\"test-user@localhost\",idToken.getPreferredUsername());\n    Assert.assertEquals(\"test-app\",idToken.getIssuedFor());\n  }\n catch (  JWEException|UnsupportedEncodingException e) {\n    Assert.fail();\n  }\n finally {\n    clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n    clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(Algorithm.RS256);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(null);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(null);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(false);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(null);\n    clientResource.update(clientRep);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 363,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 107,
        "startLineNumber" : 248,
        "startColumnNumber" : 12,
        "endLineNumber" : 248,
        "endColumnNumber" : 119
      },
      "nodeContext" : "OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(Algorithm.RS256);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.keycloak.protocol.oidc.OIDCAdvancedConfigWrapper"
  }, {
    "nodeContext" : "OIDCAdvancedConfigWrapper",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 25,
      "startLineNumber" : 249,
      "startColumnNumber" : 12,
      "endLineNumber" : 249,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 249,
        "startColumnNumber" : 12,
        "endLineNumber" : 249,
        "endColumnNumber" : 73
      },
      "nodeContext" : "OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 249,
        "startColumnNumber" : 12,
        "endLineNumber" : 249,
        "endColumnNumber" : 110
      },
      "nodeContext" : "OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(null)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 249,
        "startColumnNumber" : 12,
        "endLineNumber" : 249,
        "endColumnNumber" : 111
      },
      "nodeContext" : "OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(null);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,finally]",
      "nodePosition" : {
        "charLength" : 863,
        "startLineNumber" : 244,
        "startColumnNumber" : 18,
        "endLineNumber" : 255,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n  clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(Algorithm.RS256);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(null);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(null);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(false);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(null);\n  clientResource.update(clientRep);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 65,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3857,
        "startLineNumber" : 196,
        "startColumnNumber" : 8,
        "endLineNumber" : 255,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  TestOIDCEndpointsApplicationResource oidcClientEndpointsResource=testingClient.testApp().oidcClientEndpoints();\n  oidcClientEndpointsResource.generateKeys(algAlgorithm);\n  clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n  clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(sigAlgorithm);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(algAlgorithm);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(encAlgorithm);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n  String jwksUrl=TestApplicationResourceUrls.clientJwksUri();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(jwksUrl);\n  clientResource.update(clientRep);\n  OAuthClient.AuthorizationEndpointResponse response=oauth.doLogin(\"test-user@localhost\",\"password\");\n  String code=response.getCode();\n  OAuthClient.AccessTokenResponse tokenResponse=oauth.doAccessTokenRequest(code,\"password\");\n  String jweStr=tokenResponse.getIdToken();\n  String[] parts=jweStr.split(\"\\\\.\");\n  Assert.assertEquals(parts.length,5);\n  Map<String,String> keyPair=oidcClientEndpointsResource.getKeysAsPem();\n  PrivateKey decryptionKEK=PemUtils.decodePrivateKey(keyPair.get(\"privateKey\"));\n  JWEHeader jweHeader=(JWEHeader)getHeader(parts[0]);\n  Assert.assertEquals(\"JWT\",jweHeader.getContentType());\n  JWEAlgorithmProvider algorithmProvider=getJweAlgorithmProvider(algAlgorithm);\n  JWEEncryptionProvider encryptionProvider=getJweEncryptionProvider(encAlgorithm);\n  byte[] decodedString=TokenUtil.jweKeyEncryptionVerifyAndDecode(decryptionKEK,jweStr,algorithmProvider,encryptionProvider);\n  String idTokenString=new String(decodedString,\"UTF-8\");\n  IDToken idToken=oauth.verifyIDToken(idTokenString);\n  Assert.assertEquals(\"test-user@localhost\",idToken.getPreferredUsername());\n  Assert.assertEquals(\"test-app\",idToken.getIssuedFor());\n}\n catch (JWEException|UnsupportedEncodingException e) {\n  Assert.fail();\n}\n finally {\n  clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n  clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(Algorithm.RS256);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(null);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(null);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(false);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(null);\n  clientResource.update(clientRep);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 334,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3966,
        "startLineNumber" : 193,
        "startColumnNumber" : 114,
        "endLineNumber" : 256,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ClientResource clientResource=null;\n  ClientRepresentation clientRep=null;\n  try {\n    TestOIDCEndpointsApplicationResource oidcClientEndpointsResource=testingClient.testApp().oidcClientEndpoints();\n    oidcClientEndpointsResource.generateKeys(algAlgorithm);\n    clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n    clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(sigAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(algAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(encAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n    String jwksUrl=TestApplicationResourceUrls.clientJwksUri();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(jwksUrl);\n    clientResource.update(clientRep);\n    OAuthClient.AuthorizationEndpointResponse response=oauth.doLogin(\"test-user@localhost\",\"password\");\n    String code=response.getCode();\n    OAuthClient.AccessTokenResponse tokenResponse=oauth.doAccessTokenRequest(code,\"password\");\n    String jweStr=tokenResponse.getIdToken();\n    String[] parts=jweStr.split(\"\\\\.\");\n    Assert.assertEquals(parts.length,5);\n    Map<String,String> keyPair=oidcClientEndpointsResource.getKeysAsPem();\n    PrivateKey decryptionKEK=PemUtils.decodePrivateKey(keyPair.get(\"privateKey\"));\n    JWEHeader jweHeader=(JWEHeader)getHeader(parts[0]);\n    Assert.assertEquals(\"JWT\",jweHeader.getContentType());\n    JWEAlgorithmProvider algorithmProvider=getJweAlgorithmProvider(algAlgorithm);\n    JWEEncryptionProvider encryptionProvider=getJweEncryptionProvider(encAlgorithm);\n    byte[] decodedString=TokenUtil.jweKeyEncryptionVerifyAndDecode(decryptionKEK,jweStr,algorithmProvider,encryptionProvider);\n    String idTokenString=new String(decodedString,\"UTF-8\");\n    IDToken idToken=oauth.verifyIDToken(idTokenString);\n    Assert.assertEquals(\"test-user@localhost\",idToken.getPreferredUsername());\n    Assert.assertEquals(\"test-app\",idToken.getIssuedFor());\n  }\n catch (  JWEException|UnsupportedEncodingException e) {\n    Assert.fail();\n  }\n finally {\n    clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n    clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(Algorithm.RS256);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(null);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(null);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(false);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(null);\n    clientResource.update(clientRep);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 347,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4076,
        "startLineNumber" : 193,
        "startColumnNumber" : 4,
        "endLineNumber" : 256,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void testIdTokenSignatureAndEncryption(String sigAlgorithm,String algAlgorithm,String encAlgorithm){\n  ClientResource clientResource=null;\n  ClientRepresentation clientRep=null;\n  try {\n    TestOIDCEndpointsApplicationResource oidcClientEndpointsResource=testingClient.testApp().oidcClientEndpoints();\n    oidcClientEndpointsResource.generateKeys(algAlgorithm);\n    clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n    clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(sigAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(algAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(encAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n    String jwksUrl=TestApplicationResourceUrls.clientJwksUri();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(jwksUrl);\n    clientResource.update(clientRep);\n    OAuthClient.AuthorizationEndpointResponse response=oauth.doLogin(\"test-user@localhost\",\"password\");\n    String code=response.getCode();\n    OAuthClient.AccessTokenResponse tokenResponse=oauth.doAccessTokenRequest(code,\"password\");\n    String jweStr=tokenResponse.getIdToken();\n    String[] parts=jweStr.split(\"\\\\.\");\n    Assert.assertEquals(parts.length,5);\n    Map<String,String> keyPair=oidcClientEndpointsResource.getKeysAsPem();\n    PrivateKey decryptionKEK=PemUtils.decodePrivateKey(keyPair.get(\"privateKey\"));\n    JWEHeader jweHeader=(JWEHeader)getHeader(parts[0]);\n    Assert.assertEquals(\"JWT\",jweHeader.getContentType());\n    JWEAlgorithmProvider algorithmProvider=getJweAlgorithmProvider(algAlgorithm);\n    JWEEncryptionProvider encryptionProvider=getJweEncryptionProvider(encAlgorithm);\n    byte[] decodedString=TokenUtil.jweKeyEncryptionVerifyAndDecode(decryptionKEK,jweStr,algorithmProvider,encryptionProvider);\n    String idTokenString=new String(decodedString,\"UTF-8\");\n    IDToken idToken=oauth.verifyIDToken(idTokenString);\n    Assert.assertEquals(\"test-user@localhost\",idToken.getPreferredUsername());\n    Assert.assertEquals(\"test-app\",idToken.getIssuedFor());\n  }\n catch (  JWEException|UnsupportedEncodingException e) {\n    Assert.fail();\n  }\n finally {\n    clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n    clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(Algorithm.RS256);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(null);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(null);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(false);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(null);\n    clientResource.update(clientRep);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 363,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 249,
        "startColumnNumber" : 12,
        "endLineNumber" : 249,
        "endColumnNumber" : 111
      },
      "nodeContext" : "OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(null);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.keycloak.protocol.oidc.OIDCAdvancedConfigWrapper"
  }, {
    "nodeContext" : "OIDCAdvancedConfigWrapper",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 25,
      "startLineNumber" : 250,
      "startColumnNumber" : 12,
      "endLineNumber" : 250,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 250,
        "startColumnNumber" : 12,
        "endLineNumber" : 250,
        "endColumnNumber" : 73
      },
      "nodeContext" : "OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 250,
        "startColumnNumber" : 12,
        "endLineNumber" : 250,
        "endColumnNumber" : 110
      },
      "nodeContext" : "OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(null)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 250,
        "startColumnNumber" : 12,
        "endLineNumber" : 250,
        "endColumnNumber" : 111
      },
      "nodeContext" : "OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(null);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,finally]",
      "nodePosition" : {
        "charLength" : 863,
        "startLineNumber" : 244,
        "startColumnNumber" : 18,
        "endLineNumber" : 255,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n  clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(Algorithm.RS256);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(null);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(null);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(false);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(null);\n  clientResource.update(clientRep);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 65,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3857,
        "startLineNumber" : 196,
        "startColumnNumber" : 8,
        "endLineNumber" : 255,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  TestOIDCEndpointsApplicationResource oidcClientEndpointsResource=testingClient.testApp().oidcClientEndpoints();\n  oidcClientEndpointsResource.generateKeys(algAlgorithm);\n  clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n  clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(sigAlgorithm);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(algAlgorithm);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(encAlgorithm);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n  String jwksUrl=TestApplicationResourceUrls.clientJwksUri();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(jwksUrl);\n  clientResource.update(clientRep);\n  OAuthClient.AuthorizationEndpointResponse response=oauth.doLogin(\"test-user@localhost\",\"password\");\n  String code=response.getCode();\n  OAuthClient.AccessTokenResponse tokenResponse=oauth.doAccessTokenRequest(code,\"password\");\n  String jweStr=tokenResponse.getIdToken();\n  String[] parts=jweStr.split(\"\\\\.\");\n  Assert.assertEquals(parts.length,5);\n  Map<String,String> keyPair=oidcClientEndpointsResource.getKeysAsPem();\n  PrivateKey decryptionKEK=PemUtils.decodePrivateKey(keyPair.get(\"privateKey\"));\n  JWEHeader jweHeader=(JWEHeader)getHeader(parts[0]);\n  Assert.assertEquals(\"JWT\",jweHeader.getContentType());\n  JWEAlgorithmProvider algorithmProvider=getJweAlgorithmProvider(algAlgorithm);\n  JWEEncryptionProvider encryptionProvider=getJweEncryptionProvider(encAlgorithm);\n  byte[] decodedString=TokenUtil.jweKeyEncryptionVerifyAndDecode(decryptionKEK,jweStr,algorithmProvider,encryptionProvider);\n  String idTokenString=new String(decodedString,\"UTF-8\");\n  IDToken idToken=oauth.verifyIDToken(idTokenString);\n  Assert.assertEquals(\"test-user@localhost\",idToken.getPreferredUsername());\n  Assert.assertEquals(\"test-app\",idToken.getIssuedFor());\n}\n catch (JWEException|UnsupportedEncodingException e) {\n  Assert.fail();\n}\n finally {\n  clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n  clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(Algorithm.RS256);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(null);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(null);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(false);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(null);\n  clientResource.update(clientRep);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 334,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3966,
        "startLineNumber" : 193,
        "startColumnNumber" : 114,
        "endLineNumber" : 256,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ClientResource clientResource=null;\n  ClientRepresentation clientRep=null;\n  try {\n    TestOIDCEndpointsApplicationResource oidcClientEndpointsResource=testingClient.testApp().oidcClientEndpoints();\n    oidcClientEndpointsResource.generateKeys(algAlgorithm);\n    clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n    clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(sigAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(algAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(encAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n    String jwksUrl=TestApplicationResourceUrls.clientJwksUri();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(jwksUrl);\n    clientResource.update(clientRep);\n    OAuthClient.AuthorizationEndpointResponse response=oauth.doLogin(\"test-user@localhost\",\"password\");\n    String code=response.getCode();\n    OAuthClient.AccessTokenResponse tokenResponse=oauth.doAccessTokenRequest(code,\"password\");\n    String jweStr=tokenResponse.getIdToken();\n    String[] parts=jweStr.split(\"\\\\.\");\n    Assert.assertEquals(parts.length,5);\n    Map<String,String> keyPair=oidcClientEndpointsResource.getKeysAsPem();\n    PrivateKey decryptionKEK=PemUtils.decodePrivateKey(keyPair.get(\"privateKey\"));\n    JWEHeader jweHeader=(JWEHeader)getHeader(parts[0]);\n    Assert.assertEquals(\"JWT\",jweHeader.getContentType());\n    JWEAlgorithmProvider algorithmProvider=getJweAlgorithmProvider(algAlgorithm);\n    JWEEncryptionProvider encryptionProvider=getJweEncryptionProvider(encAlgorithm);\n    byte[] decodedString=TokenUtil.jweKeyEncryptionVerifyAndDecode(decryptionKEK,jweStr,algorithmProvider,encryptionProvider);\n    String idTokenString=new String(decodedString,\"UTF-8\");\n    IDToken idToken=oauth.verifyIDToken(idTokenString);\n    Assert.assertEquals(\"test-user@localhost\",idToken.getPreferredUsername());\n    Assert.assertEquals(\"test-app\",idToken.getIssuedFor());\n  }\n catch (  JWEException|UnsupportedEncodingException e) {\n    Assert.fail();\n  }\n finally {\n    clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n    clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(Algorithm.RS256);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(null);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(null);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(false);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(null);\n    clientResource.update(clientRep);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 347,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4076,
        "startLineNumber" : 193,
        "startColumnNumber" : 4,
        "endLineNumber" : 256,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void testIdTokenSignatureAndEncryption(String sigAlgorithm,String algAlgorithm,String encAlgorithm){\n  ClientResource clientResource=null;\n  ClientRepresentation clientRep=null;\n  try {\n    TestOIDCEndpointsApplicationResource oidcClientEndpointsResource=testingClient.testApp().oidcClientEndpoints();\n    oidcClientEndpointsResource.generateKeys(algAlgorithm);\n    clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n    clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(sigAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(algAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(encAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n    String jwksUrl=TestApplicationResourceUrls.clientJwksUri();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(jwksUrl);\n    clientResource.update(clientRep);\n    OAuthClient.AuthorizationEndpointResponse response=oauth.doLogin(\"test-user@localhost\",\"password\");\n    String code=response.getCode();\n    OAuthClient.AccessTokenResponse tokenResponse=oauth.doAccessTokenRequest(code,\"password\");\n    String jweStr=tokenResponse.getIdToken();\n    String[] parts=jweStr.split(\"\\\\.\");\n    Assert.assertEquals(parts.length,5);\n    Map<String,String> keyPair=oidcClientEndpointsResource.getKeysAsPem();\n    PrivateKey decryptionKEK=PemUtils.decodePrivateKey(keyPair.get(\"privateKey\"));\n    JWEHeader jweHeader=(JWEHeader)getHeader(parts[0]);\n    Assert.assertEquals(\"JWT\",jweHeader.getContentType());\n    JWEAlgorithmProvider algorithmProvider=getJweAlgorithmProvider(algAlgorithm);\n    JWEEncryptionProvider encryptionProvider=getJweEncryptionProvider(encAlgorithm);\n    byte[] decodedString=TokenUtil.jweKeyEncryptionVerifyAndDecode(decryptionKEK,jweStr,algorithmProvider,encryptionProvider);\n    String idTokenString=new String(decodedString,\"UTF-8\");\n    IDToken idToken=oauth.verifyIDToken(idTokenString);\n    Assert.assertEquals(\"test-user@localhost\",idToken.getPreferredUsername());\n    Assert.assertEquals(\"test-app\",idToken.getIssuedFor());\n  }\n catch (  JWEException|UnsupportedEncodingException e) {\n    Assert.fail();\n  }\n finally {\n    clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n    clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(Algorithm.RS256);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(null);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(null);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(false);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(null);\n    clientResource.update(clientRep);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 363,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 99,
        "startLineNumber" : 250,
        "startColumnNumber" : 12,
        "endLineNumber" : 250,
        "endColumnNumber" : 111
      },
      "nodeContext" : "OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(null);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.keycloak.protocol.oidc.OIDCAdvancedConfigWrapper"
  }, {
    "nodeContext" : "OIDCAdvancedConfigWrapper",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 25,
      "startLineNumber" : 252,
      "startColumnNumber" : 12,
      "endLineNumber" : 252,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 252,
        "startColumnNumber" : 12,
        "endLineNumber" : 252,
        "endColumnNumber" : 73
      },
      "nodeContext" : "OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 252,
        "startColumnNumber" : 12,
        "endLineNumber" : 252,
        "endColumnNumber" : 94
      },
      "nodeContext" : "OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(false)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 252,
        "startColumnNumber" : 12,
        "endLineNumber" : 252,
        "endColumnNumber" : 95
      },
      "nodeContext" : "OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(false);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,finally]",
      "nodePosition" : {
        "charLength" : 863,
        "startLineNumber" : 244,
        "startColumnNumber" : 18,
        "endLineNumber" : 255,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n  clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(Algorithm.RS256);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(null);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(null);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(false);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(null);\n  clientResource.update(clientRep);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 65,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3857,
        "startLineNumber" : 196,
        "startColumnNumber" : 8,
        "endLineNumber" : 255,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  TestOIDCEndpointsApplicationResource oidcClientEndpointsResource=testingClient.testApp().oidcClientEndpoints();\n  oidcClientEndpointsResource.generateKeys(algAlgorithm);\n  clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n  clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(sigAlgorithm);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(algAlgorithm);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(encAlgorithm);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n  String jwksUrl=TestApplicationResourceUrls.clientJwksUri();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(jwksUrl);\n  clientResource.update(clientRep);\n  OAuthClient.AuthorizationEndpointResponse response=oauth.doLogin(\"test-user@localhost\",\"password\");\n  String code=response.getCode();\n  OAuthClient.AccessTokenResponse tokenResponse=oauth.doAccessTokenRequest(code,\"password\");\n  String jweStr=tokenResponse.getIdToken();\n  String[] parts=jweStr.split(\"\\\\.\");\n  Assert.assertEquals(parts.length,5);\n  Map<String,String> keyPair=oidcClientEndpointsResource.getKeysAsPem();\n  PrivateKey decryptionKEK=PemUtils.decodePrivateKey(keyPair.get(\"privateKey\"));\n  JWEHeader jweHeader=(JWEHeader)getHeader(parts[0]);\n  Assert.assertEquals(\"JWT\",jweHeader.getContentType());\n  JWEAlgorithmProvider algorithmProvider=getJweAlgorithmProvider(algAlgorithm);\n  JWEEncryptionProvider encryptionProvider=getJweEncryptionProvider(encAlgorithm);\n  byte[] decodedString=TokenUtil.jweKeyEncryptionVerifyAndDecode(decryptionKEK,jweStr,algorithmProvider,encryptionProvider);\n  String idTokenString=new String(decodedString,\"UTF-8\");\n  IDToken idToken=oauth.verifyIDToken(idTokenString);\n  Assert.assertEquals(\"test-user@localhost\",idToken.getPreferredUsername());\n  Assert.assertEquals(\"test-app\",idToken.getIssuedFor());\n}\n catch (JWEException|UnsupportedEncodingException e) {\n  Assert.fail();\n}\n finally {\n  clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n  clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(Algorithm.RS256);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(null);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(null);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(false);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(null);\n  clientResource.update(clientRep);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 334,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3966,
        "startLineNumber" : 193,
        "startColumnNumber" : 114,
        "endLineNumber" : 256,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ClientResource clientResource=null;\n  ClientRepresentation clientRep=null;\n  try {\n    TestOIDCEndpointsApplicationResource oidcClientEndpointsResource=testingClient.testApp().oidcClientEndpoints();\n    oidcClientEndpointsResource.generateKeys(algAlgorithm);\n    clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n    clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(sigAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(algAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(encAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n    String jwksUrl=TestApplicationResourceUrls.clientJwksUri();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(jwksUrl);\n    clientResource.update(clientRep);\n    OAuthClient.AuthorizationEndpointResponse response=oauth.doLogin(\"test-user@localhost\",\"password\");\n    String code=response.getCode();\n    OAuthClient.AccessTokenResponse tokenResponse=oauth.doAccessTokenRequest(code,\"password\");\n    String jweStr=tokenResponse.getIdToken();\n    String[] parts=jweStr.split(\"\\\\.\");\n    Assert.assertEquals(parts.length,5);\n    Map<String,String> keyPair=oidcClientEndpointsResource.getKeysAsPem();\n    PrivateKey decryptionKEK=PemUtils.decodePrivateKey(keyPair.get(\"privateKey\"));\n    JWEHeader jweHeader=(JWEHeader)getHeader(parts[0]);\n    Assert.assertEquals(\"JWT\",jweHeader.getContentType());\n    JWEAlgorithmProvider algorithmProvider=getJweAlgorithmProvider(algAlgorithm);\n    JWEEncryptionProvider encryptionProvider=getJweEncryptionProvider(encAlgorithm);\n    byte[] decodedString=TokenUtil.jweKeyEncryptionVerifyAndDecode(decryptionKEK,jweStr,algorithmProvider,encryptionProvider);\n    String idTokenString=new String(decodedString,\"UTF-8\");\n    IDToken idToken=oauth.verifyIDToken(idTokenString);\n    Assert.assertEquals(\"test-user@localhost\",idToken.getPreferredUsername());\n    Assert.assertEquals(\"test-app\",idToken.getIssuedFor());\n  }\n catch (  JWEException|UnsupportedEncodingException e) {\n    Assert.fail();\n  }\n finally {\n    clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n    clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(Algorithm.RS256);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(null);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(null);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(false);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(null);\n    clientResource.update(clientRep);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 347,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4076,
        "startLineNumber" : 193,
        "startColumnNumber" : 4,
        "endLineNumber" : 256,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void testIdTokenSignatureAndEncryption(String sigAlgorithm,String algAlgorithm,String encAlgorithm){\n  ClientResource clientResource=null;\n  ClientRepresentation clientRep=null;\n  try {\n    TestOIDCEndpointsApplicationResource oidcClientEndpointsResource=testingClient.testApp().oidcClientEndpoints();\n    oidcClientEndpointsResource.generateKeys(algAlgorithm);\n    clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n    clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(sigAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(algAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(encAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n    String jwksUrl=TestApplicationResourceUrls.clientJwksUri();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(jwksUrl);\n    clientResource.update(clientRep);\n    OAuthClient.AuthorizationEndpointResponse response=oauth.doLogin(\"test-user@localhost\",\"password\");\n    String code=response.getCode();\n    OAuthClient.AccessTokenResponse tokenResponse=oauth.doAccessTokenRequest(code,\"password\");\n    String jweStr=tokenResponse.getIdToken();\n    String[] parts=jweStr.split(\"\\\\.\");\n    Assert.assertEquals(parts.length,5);\n    Map<String,String> keyPair=oidcClientEndpointsResource.getKeysAsPem();\n    PrivateKey decryptionKEK=PemUtils.decodePrivateKey(keyPair.get(\"privateKey\"));\n    JWEHeader jweHeader=(JWEHeader)getHeader(parts[0]);\n    Assert.assertEquals(\"JWT\",jweHeader.getContentType());\n    JWEAlgorithmProvider algorithmProvider=getJweAlgorithmProvider(algAlgorithm);\n    JWEEncryptionProvider encryptionProvider=getJweEncryptionProvider(encAlgorithm);\n    byte[] decodedString=TokenUtil.jweKeyEncryptionVerifyAndDecode(decryptionKEK,jweStr,algorithmProvider,encryptionProvider);\n    String idTokenString=new String(decodedString,\"UTF-8\");\n    IDToken idToken=oauth.verifyIDToken(idTokenString);\n    Assert.assertEquals(\"test-user@localhost\",idToken.getPreferredUsername());\n    Assert.assertEquals(\"test-app\",idToken.getIssuedFor());\n  }\n catch (  JWEException|UnsupportedEncodingException e) {\n    Assert.fail();\n  }\n finally {\n    clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n    clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(Algorithm.RS256);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(null);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(null);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(false);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(null);\n    clientResource.update(clientRep);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 363,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 252,
        "startColumnNumber" : 12,
        "endLineNumber" : 252,
        "endColumnNumber" : 95
      },
      "nodeContext" : "OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(false);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.keycloak.protocol.oidc.OIDCAdvancedConfigWrapper"
  }, {
    "nodeContext" : "OIDCAdvancedConfigWrapper",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 25,
      "startLineNumber" : 253,
      "startColumnNumber" : 12,
      "endLineNumber" : 253,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 253,
        "startColumnNumber" : 12,
        "endLineNumber" : 253,
        "endColumnNumber" : 73
      },
      "nodeContext" : "OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 253,
        "startColumnNumber" : 12,
        "endLineNumber" : 253,
        "endColumnNumber" : 90
      },
      "nodeContext" : "OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(null)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 253,
        "startColumnNumber" : 12,
        "endLineNumber" : 253,
        "endColumnNumber" : 91
      },
      "nodeContext" : "OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(null);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,finally]",
      "nodePosition" : {
        "charLength" : 863,
        "startLineNumber" : 244,
        "startColumnNumber" : 18,
        "endLineNumber" : 255,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n  clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(Algorithm.RS256);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(null);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(null);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(false);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(null);\n  clientResource.update(clientRep);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 65,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3857,
        "startLineNumber" : 196,
        "startColumnNumber" : 8,
        "endLineNumber" : 255,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  TestOIDCEndpointsApplicationResource oidcClientEndpointsResource=testingClient.testApp().oidcClientEndpoints();\n  oidcClientEndpointsResource.generateKeys(algAlgorithm);\n  clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n  clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(sigAlgorithm);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(algAlgorithm);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(encAlgorithm);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n  String jwksUrl=TestApplicationResourceUrls.clientJwksUri();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(jwksUrl);\n  clientResource.update(clientRep);\n  OAuthClient.AuthorizationEndpointResponse response=oauth.doLogin(\"test-user@localhost\",\"password\");\n  String code=response.getCode();\n  OAuthClient.AccessTokenResponse tokenResponse=oauth.doAccessTokenRequest(code,\"password\");\n  String jweStr=tokenResponse.getIdToken();\n  String[] parts=jweStr.split(\"\\\\.\");\n  Assert.assertEquals(parts.length,5);\n  Map<String,String> keyPair=oidcClientEndpointsResource.getKeysAsPem();\n  PrivateKey decryptionKEK=PemUtils.decodePrivateKey(keyPair.get(\"privateKey\"));\n  JWEHeader jweHeader=(JWEHeader)getHeader(parts[0]);\n  Assert.assertEquals(\"JWT\",jweHeader.getContentType());\n  JWEAlgorithmProvider algorithmProvider=getJweAlgorithmProvider(algAlgorithm);\n  JWEEncryptionProvider encryptionProvider=getJweEncryptionProvider(encAlgorithm);\n  byte[] decodedString=TokenUtil.jweKeyEncryptionVerifyAndDecode(decryptionKEK,jweStr,algorithmProvider,encryptionProvider);\n  String idTokenString=new String(decodedString,\"UTF-8\");\n  IDToken idToken=oauth.verifyIDToken(idTokenString);\n  Assert.assertEquals(\"test-user@localhost\",idToken.getPreferredUsername());\n  Assert.assertEquals(\"test-app\",idToken.getIssuedFor());\n}\n catch (JWEException|UnsupportedEncodingException e) {\n  Assert.fail();\n}\n finally {\n  clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n  clientRep=clientResource.toRepresentation();\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(Algorithm.RS256);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(null);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(null);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(false);\n  OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(null);\n  clientResource.update(clientRep);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 334,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3966,
        "startLineNumber" : 193,
        "startColumnNumber" : 114,
        "endLineNumber" : 256,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ClientResource clientResource=null;\n  ClientRepresentation clientRep=null;\n  try {\n    TestOIDCEndpointsApplicationResource oidcClientEndpointsResource=testingClient.testApp().oidcClientEndpoints();\n    oidcClientEndpointsResource.generateKeys(algAlgorithm);\n    clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n    clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(sigAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(algAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(encAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n    String jwksUrl=TestApplicationResourceUrls.clientJwksUri();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(jwksUrl);\n    clientResource.update(clientRep);\n    OAuthClient.AuthorizationEndpointResponse response=oauth.doLogin(\"test-user@localhost\",\"password\");\n    String code=response.getCode();\n    OAuthClient.AccessTokenResponse tokenResponse=oauth.doAccessTokenRequest(code,\"password\");\n    String jweStr=tokenResponse.getIdToken();\n    String[] parts=jweStr.split(\"\\\\.\");\n    Assert.assertEquals(parts.length,5);\n    Map<String,String> keyPair=oidcClientEndpointsResource.getKeysAsPem();\n    PrivateKey decryptionKEK=PemUtils.decodePrivateKey(keyPair.get(\"privateKey\"));\n    JWEHeader jweHeader=(JWEHeader)getHeader(parts[0]);\n    Assert.assertEquals(\"JWT\",jweHeader.getContentType());\n    JWEAlgorithmProvider algorithmProvider=getJweAlgorithmProvider(algAlgorithm);\n    JWEEncryptionProvider encryptionProvider=getJweEncryptionProvider(encAlgorithm);\n    byte[] decodedString=TokenUtil.jweKeyEncryptionVerifyAndDecode(decryptionKEK,jweStr,algorithmProvider,encryptionProvider);\n    String idTokenString=new String(decodedString,\"UTF-8\");\n    IDToken idToken=oauth.verifyIDToken(idTokenString);\n    Assert.assertEquals(\"test-user@localhost\",idToken.getPreferredUsername());\n    Assert.assertEquals(\"test-app\",idToken.getIssuedFor());\n  }\n catch (  JWEException|UnsupportedEncodingException e) {\n    Assert.fail();\n  }\n finally {\n    clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n    clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(Algorithm.RS256);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(null);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(null);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(false);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(null);\n    clientResource.update(clientRep);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 347,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4076,
        "startLineNumber" : 193,
        "startColumnNumber" : 4,
        "endLineNumber" : 256,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void testIdTokenSignatureAndEncryption(String sigAlgorithm,String algAlgorithm,String encAlgorithm){\n  ClientResource clientResource=null;\n  ClientRepresentation clientRep=null;\n  try {\n    TestOIDCEndpointsApplicationResource oidcClientEndpointsResource=testingClient.testApp().oidcClientEndpoints();\n    oidcClientEndpointsResource.generateKeys(algAlgorithm);\n    clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n    clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(sigAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(algAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(encAlgorithm);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(true);\n    String jwksUrl=TestApplicationResourceUrls.clientJwksUri();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(jwksUrl);\n    clientResource.update(clientRep);\n    OAuthClient.AuthorizationEndpointResponse response=oauth.doLogin(\"test-user@localhost\",\"password\");\n    String code=response.getCode();\n    OAuthClient.AccessTokenResponse tokenResponse=oauth.doAccessTokenRequest(code,\"password\");\n    String jweStr=tokenResponse.getIdToken();\n    String[] parts=jweStr.split(\"\\\\.\");\n    Assert.assertEquals(parts.length,5);\n    Map<String,String> keyPair=oidcClientEndpointsResource.getKeysAsPem();\n    PrivateKey decryptionKEK=PemUtils.decodePrivateKey(keyPair.get(\"privateKey\"));\n    JWEHeader jweHeader=(JWEHeader)getHeader(parts[0]);\n    Assert.assertEquals(\"JWT\",jweHeader.getContentType());\n    JWEAlgorithmProvider algorithmProvider=getJweAlgorithmProvider(algAlgorithm);\n    JWEEncryptionProvider encryptionProvider=getJweEncryptionProvider(encAlgorithm);\n    byte[] decodedString=TokenUtil.jweKeyEncryptionVerifyAndDecode(decryptionKEK,jweStr,algorithmProvider,encryptionProvider);\n    String idTokenString=new String(decodedString,\"UTF-8\");\n    IDToken idToken=oauth.verifyIDToken(idTokenString);\n    Assert.assertEquals(\"test-user@localhost\",idToken.getPreferredUsername());\n    Assert.assertEquals(\"test-app\",idToken.getIssuedFor());\n  }\n catch (  JWEException|UnsupportedEncodingException e) {\n    Assert.fail();\n  }\n finally {\n    clientResource=ApiUtil.findClientByClientId(adminClient.realm(\"test\"),\"test-app\");\n    clientRep=clientResource.toRepresentation();\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenSignedResponseAlg(Algorithm.RS256);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseAlg(null);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setIdTokenEncryptedResponseEnc(null);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setUseJwksUrl(false);\n    OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(null);\n    clientResource.update(clientRep);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 363,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 253,
        "startColumnNumber" : 12,
        "endLineNumber" : 253,
        "endColumnNumber" : 91
      },
      "nodeContext" : "OIDCAdvancedConfigWrapper.fromClientRepresentation(clientRep).setJwksUrl(null);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "org.keycloak.protocol.oidc.OIDCAdvancedConfigWrapper"
  } ],
  "positionList" : [ {
    "charLength" : 25,
    "startLineNumber" : 204,
    "startColumnNumber" : 12,
    "endLineNumber" : 204,
    "endColumnNumber" : 37
  }, {
    "charLength" : 25,
    "startLineNumber" : 205,
    "startColumnNumber" : 12,
    "endLineNumber" : 205,
    "endColumnNumber" : 37
  }, {
    "charLength" : 25,
    "startLineNumber" : 206,
    "startColumnNumber" : 12,
    "endLineNumber" : 206,
    "endColumnNumber" : 37
  }, {
    "charLength" : 25,
    "startLineNumber" : 208,
    "startColumnNumber" : 12,
    "endLineNumber" : 208,
    "endColumnNumber" : 37
  }, {
    "charLength" : 25,
    "startLineNumber" : 210,
    "startColumnNumber" : 12,
    "endLineNumber" : 210,
    "endColumnNumber" : 37
  }, {
    "charLength" : 25,
    "startLineNumber" : 248,
    "startColumnNumber" : 12,
    "endLineNumber" : 248,
    "endColumnNumber" : 37
  }, {
    "charLength" : 25,
    "startLineNumber" : 249,
    "startColumnNumber" : 12,
    "endLineNumber" : 249,
    "endColumnNumber" : 37
  }, {
    "charLength" : 25,
    "startLineNumber" : 250,
    "startColumnNumber" : 12,
    "endLineNumber" : 250,
    "endColumnNumber" : 37
  }, {
    "charLength" : 25,
    "startLineNumber" : 252,
    "startColumnNumber" : 12,
    "endLineNumber" : 252,
    "endColumnNumber" : 37
  }, {
    "charLength" : 25,
    "startLineNumber" : 253,
    "startColumnNumber" : 12,
    "endLineNumber" : 253,
    "endColumnNumber" : 37
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 3
  } ]
}