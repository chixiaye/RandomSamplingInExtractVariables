{
  "id" : 293,
  "expression" : "arr.get(i).keytime",
  "projectName" : "libgdx@libgdx",
  "commitID" : "3485b16e8979c0141421bc80cb8831b7a0403f67",
  "filePath" : "/gdx/src/com/badlogic/gdx/graphics/g3d/utils/BaseAnimationController.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "arr.get(i).keytime",
    "nodeType" : "FieldAccess",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 181,
      "startColumnNumber" : 21,
      "endLineNumber" : 181,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 181,
        "startColumnNumber" : 14,
        "endLineNumber" : 181,
        "endColumnNumber" : 39
      },
      "nodeContext" : "time < arr.get(i).keytime",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 181,
        "startColumnNumber" : 10,
        "endLineNumber" : 185,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (time < arr.get(i).keytime) {\n  maxIndex=i - 1;\n}\n else {\n  return i;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 160,
        "startLineNumber" : 179,
        "startColumnNumber" : 3,
        "endLineNumber" : 185,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (time > arr.get(i + 1).keytime) {\n  minIndex=i + 1;\n}\n else if (time < arr.get(i).keytime) {\n  maxIndex=i - 1;\n}\n else {\n  return i;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 37,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 210,
        "startLineNumber" : 177,
        "startColumnNumber" : 30,
        "endLineNumber" : 186,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int i=(minIndex + maxIndex) / 2;\n  if (time > arr.get(i + 1).keytime) {\n    minIndex=i + 1;\n  }\n else   if (time < arr.get(i).keytime) {\n    maxIndex=i - 1;\n  }\n else {\n    return i;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 48,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 238,
        "startLineNumber" : 177,
        "startColumnNumber" : 2,
        "endLineNumber" : 186,
        "endColumnNumber" : 3
      },
      "nodeContext" : "while (minIndex < maxIndex) {\n  int i=(minIndex + maxIndex) / 2;\n  if (time > arr.get(i + 1).keytime) {\n    minIndex=i + 1;\n  }\n else   if (time < arr.get(i).keytime) {\n    maxIndex=i - 1;\n  }\n else {\n    return i;\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 52,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 556,
        "startLineNumber" : 165,
        "startColumnNumber" : 103,
        "endLineNumber" : 188,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  final int lastIndex=arr.size - 1;\n  if (lastIndex <= 0 || time < arr.get(0).keytime || time > arr.get(lastIndex).keytime) {\n    return 0;\n  }\n  int minIndex=0;\n  int maxIndex=lastIndex;\n  while (minIndex < maxIndex) {\n    int i=(minIndex + maxIndex) / 2;\n    if (time > arr.get(i + 1).keytime) {\n      minIndex=i + 1;\n    }\n else     if (time < arr.get(i).keytime) {\n      maxIndex=i - 1;\n    }\n else {\n      return i;\n    }\n  }\n  return minIndex;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 100,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 876,
        "startLineNumber" : 161,
        "startColumnNumber" : 1,
        "endLineNumber" : 188,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Find first key frame index just before a given time\n * @param arr Key frames ordered by time ascending\n * @param time Time to search\n * @return key frame index, 0 if time is out of key frames time range \n */\nfinal static <T>int getFirstKeyframeIndexAtTime(final Array<NodeKeyframe<T>> arr,final float time){\n  final int lastIndex=arr.size - 1;\n  if (lastIndex <= 0 || time < arr.get(0).keytime || time > arr.get(lastIndex).keytime) {\n    return 0;\n  }\n  int minIndex=0;\n  int maxIndex=lastIndex;\n  while (minIndex < maxIndex) {\n    int i=(minIndex + maxIndex) / 2;\n    if (time > arr.get(i + 1).keytime) {\n      minIndex=i + 1;\n    }\n else     if (time < arr.get(i).keytime) {\n      maxIndex=i - 1;\n    }\n else {\n      return i;\n    }\n  }\n  return minIndex;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 123,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 181,
        "startColumnNumber" : 14,
        "endLineNumber" : 181,
        "endColumnNumber" : 39
      },
      "nodeContext" : "time < arr.get(i).keytime",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 4,
    "type" : "float"
  } ],
  "positionList" : [ {
    "charLength" : 18,
    "startLineNumber" : 181,
    "startColumnNumber" : 21,
    "endLineNumber" : 181,
    "endColumnNumber" : 39
  } ],
  "layoutRelationDataList" : [ ]
}