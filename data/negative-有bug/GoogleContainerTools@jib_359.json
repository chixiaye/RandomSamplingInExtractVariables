{
  "id" : 359,
  "expression" : "Mockito",
  "projectName" : "GoogleContainerTools@jib",
  "commitID" : "a0742fd277b5490a0965dba4443f5864f1250199",
  "filePath" : "/jib-maven-plugin/src/test/java/com/google/cloud/tools/jib/maven/MavenSettingsServerCredentialsTest.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Mockito",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 55,
      "startColumnNumber" : 4,
      "endLineNumber" : 55,
      "endColumnNumber" : 11
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 55,
        "endColumnNumber" : 51
      },
      "nodeContext" : "Mockito.when(mockSettings.getServer(\"server1\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 55,
        "endColumnNumber" : 75
      },
      "nodeContext" : "Mockito.when(mockSettings.getServer(\"server1\")).thenReturn(mockServer1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 55,
        "endColumnNumber" : 76
      },
      "nodeContext" : "Mockito.when(mockSettings.getServer(\"server1\")).thenReturn(mockServer1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 897,
        "startLineNumber" : 54,
        "startColumnNumber" : 65,
        "endLineNumber" : 74,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Mockito.when(mockSettings.getServer(\"server1\")).thenReturn(mockServer1);\n  Mockito.when(mockServer1.getUsername()).thenReturn(\"server1 username\");\n  Mockito.when(mockServer1.getPassword()).thenReturn(\"server1 password\");\n  RegistryCredentials registryCredentials=testMavenSettingsServerCredentials.retrieve(\"server1\");\n  Assert.assertNotNull(registryCredentials);\n  Assert.assertEquals(MavenSettingsServerCredentials.CREDENTIAL_SOURCE,registryCredentials.getCredentialSource());\n  Authorization retrievedServer1Authorization=registryCredentials.getAuthorization();\n  Assert.assertNotNull(retrievedServer1Authorization);\n  Assert.assertEquals(Authorizations.withBasicCredentials(\"server1 username\",\"server1 password\").toString(),retrievedServer1Authorization.toString());\n  Mockito.verifyZeroInteractions(mockLogger);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 88,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 968,
        "startLineNumber" : 53,
        "startColumnNumber" : 2,
        "endLineNumber" : 74,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testRetrieve_found() throws MojoExecutionException {\n  Mockito.when(mockSettings.getServer(\"server1\")).thenReturn(mockServer1);\n  Mockito.when(mockServer1.getUsername()).thenReturn(\"server1 username\");\n  Mockito.when(mockServer1.getPassword()).thenReturn(\"server1 password\");\n  RegistryCredentials registryCredentials=testMavenSettingsServerCredentials.retrieve(\"server1\");\n  Assert.assertNotNull(registryCredentials);\n  Assert.assertEquals(MavenSettingsServerCredentials.CREDENTIAL_SOURCE,registryCredentials.getCredentialSource());\n  Authorization retrievedServer1Authorization=registryCredentials.getAuthorization();\n  Assert.assertNotNull(retrievedServer1Authorization);\n  Assert.assertEquals(Authorizations.withBasicCredentials(\"server1 username\",\"server1 password\").toString(),retrievedServer1Authorization.toString());\n  Mockito.verifyZeroInteractions(mockLogger);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 96,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 55,
        "endColumnNumber" : 76
      },
      "nodeContext" : "Mockito.when(mockSettings.getServer(\"server1\")).thenReturn(mockServer1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "Mockito",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 57,
      "startColumnNumber" : 4,
      "endLineNumber" : 57,
      "endColumnNumber" : 11
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 57,
        "startColumnNumber" : 4,
        "endLineNumber" : 57,
        "endColumnNumber" : 43
      },
      "nodeContext" : "Mockito.when(mockServer1.getUsername())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 57,
        "startColumnNumber" : 4,
        "endLineNumber" : 57,
        "endColumnNumber" : 74
      },
      "nodeContext" : "Mockito.when(mockServer1.getUsername()).thenReturn(\"server1 username\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 57,
        "startColumnNumber" : 4,
        "endLineNumber" : 57,
        "endColumnNumber" : 75
      },
      "nodeContext" : "Mockito.when(mockServer1.getUsername()).thenReturn(\"server1 username\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 897,
        "startLineNumber" : 54,
        "startColumnNumber" : 65,
        "endLineNumber" : 74,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Mockito.when(mockSettings.getServer(\"server1\")).thenReturn(mockServer1);\n  Mockito.when(mockServer1.getUsername()).thenReturn(\"server1 username\");\n  Mockito.when(mockServer1.getPassword()).thenReturn(\"server1 password\");\n  RegistryCredentials registryCredentials=testMavenSettingsServerCredentials.retrieve(\"server1\");\n  Assert.assertNotNull(registryCredentials);\n  Assert.assertEquals(MavenSettingsServerCredentials.CREDENTIAL_SOURCE,registryCredentials.getCredentialSource());\n  Authorization retrievedServer1Authorization=registryCredentials.getAuthorization();\n  Assert.assertNotNull(retrievedServer1Authorization);\n  Assert.assertEquals(Authorizations.withBasicCredentials(\"server1 username\",\"server1 password\").toString(),retrievedServer1Authorization.toString());\n  Mockito.verifyZeroInteractions(mockLogger);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 88,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 968,
        "startLineNumber" : 53,
        "startColumnNumber" : 2,
        "endLineNumber" : 74,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testRetrieve_found() throws MojoExecutionException {\n  Mockito.when(mockSettings.getServer(\"server1\")).thenReturn(mockServer1);\n  Mockito.when(mockServer1.getUsername()).thenReturn(\"server1 username\");\n  Mockito.when(mockServer1.getPassword()).thenReturn(\"server1 password\");\n  RegistryCredentials registryCredentials=testMavenSettingsServerCredentials.retrieve(\"server1\");\n  Assert.assertNotNull(registryCredentials);\n  Assert.assertEquals(MavenSettingsServerCredentials.CREDENTIAL_SOURCE,registryCredentials.getCredentialSource());\n  Authorization retrievedServer1Authorization=registryCredentials.getAuthorization();\n  Assert.assertNotNull(retrievedServer1Authorization);\n  Assert.assertEquals(Authorizations.withBasicCredentials(\"server1 username\",\"server1 password\").toString(),retrievedServer1Authorization.toString());\n  Mockito.verifyZeroInteractions(mockLogger);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 96,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 57,
        "startColumnNumber" : 4,
        "endLineNumber" : 57,
        "endColumnNumber" : 75
      },
      "nodeContext" : "Mockito.when(mockServer1.getUsername()).thenReturn(\"server1 username\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "Mockito",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 58,
      "startColumnNumber" : 4,
      "endLineNumber" : 58,
      "endColumnNumber" : 11
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 58,
        "endColumnNumber" : 43
      },
      "nodeContext" : "Mockito.when(mockServer1.getPassword())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 58,
        "endColumnNumber" : 74
      },
      "nodeContext" : "Mockito.when(mockServer1.getPassword()).thenReturn(\"server1 password\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 58,
        "endColumnNumber" : 75
      },
      "nodeContext" : "Mockito.when(mockServer1.getPassword()).thenReturn(\"server1 password\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 897,
        "startLineNumber" : 54,
        "startColumnNumber" : 65,
        "endLineNumber" : 74,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Mockito.when(mockSettings.getServer(\"server1\")).thenReturn(mockServer1);\n  Mockito.when(mockServer1.getUsername()).thenReturn(\"server1 username\");\n  Mockito.when(mockServer1.getPassword()).thenReturn(\"server1 password\");\n  RegistryCredentials registryCredentials=testMavenSettingsServerCredentials.retrieve(\"server1\");\n  Assert.assertNotNull(registryCredentials);\n  Assert.assertEquals(MavenSettingsServerCredentials.CREDENTIAL_SOURCE,registryCredentials.getCredentialSource());\n  Authorization retrievedServer1Authorization=registryCredentials.getAuthorization();\n  Assert.assertNotNull(retrievedServer1Authorization);\n  Assert.assertEquals(Authorizations.withBasicCredentials(\"server1 username\",\"server1 password\").toString(),retrievedServer1Authorization.toString());\n  Mockito.verifyZeroInteractions(mockLogger);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 88,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 968,
        "startLineNumber" : 53,
        "startColumnNumber" : 2,
        "endLineNumber" : 74,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testRetrieve_found() throws MojoExecutionException {\n  Mockito.when(mockSettings.getServer(\"server1\")).thenReturn(mockServer1);\n  Mockito.when(mockServer1.getUsername()).thenReturn(\"server1 username\");\n  Mockito.when(mockServer1.getPassword()).thenReturn(\"server1 password\");\n  RegistryCredentials registryCredentials=testMavenSettingsServerCredentials.retrieve(\"server1\");\n  Assert.assertNotNull(registryCredentials);\n  Assert.assertEquals(MavenSettingsServerCredentials.CREDENTIAL_SOURCE,registryCredentials.getCredentialSource());\n  Authorization retrievedServer1Authorization=registryCredentials.getAuthorization();\n  Assert.assertNotNull(retrievedServer1Authorization);\n  Assert.assertEquals(Authorizations.withBasicCredentials(\"server1 username\",\"server1 password\").toString(),retrievedServer1Authorization.toString());\n  Mockito.verifyZeroInteractions(mockLogger);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 96,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 58,
        "endColumnNumber" : 75
      },
      "nodeContext" : "Mockito.when(mockServer1.getPassword()).thenReturn(\"server1 password\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "Mockito",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 73,
      "startColumnNumber" : 4,
      "endLineNumber" : 73,
      "endColumnNumber" : 11
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 73,
        "endColumnNumber" : 46
      },
      "nodeContext" : "Mockito.verifyZeroInteractions(mockLogger)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 73,
        "endColumnNumber" : 47
      },
      "nodeContext" : "Mockito.verifyZeroInteractions(mockLogger);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 897,
        "startLineNumber" : 54,
        "startColumnNumber" : 65,
        "endLineNumber" : 74,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Mockito.when(mockSettings.getServer(\"server1\")).thenReturn(mockServer1);\n  Mockito.when(mockServer1.getUsername()).thenReturn(\"server1 username\");\n  Mockito.when(mockServer1.getPassword()).thenReturn(\"server1 password\");\n  RegistryCredentials registryCredentials=testMavenSettingsServerCredentials.retrieve(\"server1\");\n  Assert.assertNotNull(registryCredentials);\n  Assert.assertEquals(MavenSettingsServerCredentials.CREDENTIAL_SOURCE,registryCredentials.getCredentialSource());\n  Authorization retrievedServer1Authorization=registryCredentials.getAuthorization();\n  Assert.assertNotNull(retrievedServer1Authorization);\n  Assert.assertEquals(Authorizations.withBasicCredentials(\"server1 username\",\"server1 password\").toString(),retrievedServer1Authorization.toString());\n  Mockito.verifyZeroInteractions(mockLogger);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 88,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 968,
        "startLineNumber" : 53,
        "startColumnNumber" : 2,
        "endLineNumber" : 74,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testRetrieve_found() throws MojoExecutionException {\n  Mockito.when(mockSettings.getServer(\"server1\")).thenReturn(mockServer1);\n  Mockito.when(mockServer1.getUsername()).thenReturn(\"server1 username\");\n  Mockito.when(mockServer1.getPassword()).thenReturn(\"server1 password\");\n  RegistryCredentials registryCredentials=testMavenSettingsServerCredentials.retrieve(\"server1\");\n  Assert.assertNotNull(registryCredentials);\n  Assert.assertEquals(MavenSettingsServerCredentials.CREDENTIAL_SOURCE,registryCredentials.getCredentialSource());\n  Authorization retrievedServer1Authorization=registryCredentials.getAuthorization();\n  Assert.assertNotNull(retrievedServer1Authorization);\n  Assert.assertEquals(Authorizations.withBasicCredentials(\"server1 username\",\"server1 password\").toString(),retrievedServer1Authorization.toString());\n  Mockito.verifyZeroInteractions(mockLogger);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 96,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 73,
        "endColumnNumber" : 47
      },
      "nodeContext" : "Mockito.verifyZeroInteractions(mockLogger);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 55,
    "startColumnNumber" : 4,
    "endLineNumber" : 55,
    "endColumnNumber" : 11
  }, {
    "charLength" : 7,
    "startLineNumber" : 57,
    "startColumnNumber" : 4,
    "endLineNumber" : 57,
    "endColumnNumber" : 11
  }, {
    "charLength" : 7,
    "startLineNumber" : 58,
    "startColumnNumber" : 4,
    "endLineNumber" : 58,
    "endColumnNumber" : 11
  }, {
    "charLength" : 7,
    "startLineNumber" : 73,
    "startColumnNumber" : 4,
    "endLineNumber" : 73,
    "endColumnNumber" : 11
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  } ]
}