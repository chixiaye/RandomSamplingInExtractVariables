{
  "id" : 6,
  "expression" : "ancestors.get(i)",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/tool/src/org/antlr/v4/tool/ast/GrammarAST.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ancestors.get(i)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 16,
      "startLineNumber" : 135,
      "startColumnNumber" : 30,
      "endLineNumber" : 135,
      "endColumnNumber" : 46
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 135,
        "startColumnNumber" : 18,
        "endLineNumber" : 135,
        "endColumnNumber" : 46
      },
      "nodeContext" : "(GrammarAST)ancestors.get(i)",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 135,
        "startColumnNumber" : 14,
        "endLineNumber" : 135,
        "endColumnNumber" : 46
      },
      "nodeContext" : "p=(GrammarAST)ancestors.get(i)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 135,
        "startColumnNumber" : 3,
        "endLineNumber" : 135,
        "endColumnNumber" : 47
      },
      "nodeContext" : "GrammarAST p=(GrammarAST)ancestors.get(i);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 285,
        "startLineNumber" : 134,
        "startColumnNumber" : 44,
        "endLineNumber" : 143,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  GrammarAST p=(GrammarAST)ancestors.get(i);\n  if (p.getType() == ANTLRParser.ALT) {\n    AltAST a=(AltAST)p;\n    if (a.altLabel != null)     return a.altLabel.getText();\n    if (a.leftRecursiveAltInfo != null) {\n      return a.leftRecursiveAltInfo.altLabel;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 56,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 327,
        "startLineNumber" : 134,
        "startColumnNumber" : 2,
        "endLineNumber" : 143,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=ancestors.size() - 1; i >= 0; i--) {\n  GrammarAST p=(GrammarAST)ancestors.get(i);\n  if (p.getType() == ANTLRParser.ALT) {\n    AltAST a=(AltAST)p;\n    if (a.altLabel != null)     return a.altLabel.getText();\n    if (a.leftRecursiveAltInfo != null) {\n      return a.leftRecursiveAltInfo.altLabel;\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 71,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 448,
        "startLineNumber" : 131,
        "startColumnNumber" : 29,
        "endLineNumber" : 145,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  List<? extends Tree> ancestors=this.getAncestors();\n  if (ancestors == null)   return null;\n  for (int i=ancestors.size() - 1; i >= 0; i--) {\n    GrammarAST p=(GrammarAST)ancestors.get(i);\n    if (p.getType() == ANTLRParser.ALT) {\n      AltAST a=(AltAST)p;\n      if (a.altLabel != null)       return a.altLabel.getText();\n      if (a.leftRecursiveAltInfo != null) {\n        return a.leftRecursiveAltInfo.altLabel;\n      }\n    }\n  }\n  return null;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 92,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 658,
        "startLineNumber" : 127,
        "startColumnNumber" : 1,
        "endLineNumber" : 145,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Walk ancestors of this node until we find ALT with alt!=null or leftRecursiveAltInfo!=null. Then grab label if any. If not a rule element, just returns null.\n */\npublic String getAltLabel(){\n  List<? extends Tree> ancestors=this.getAncestors();\n  if (ancestors == null)   return null;\n  for (int i=ancestors.size() - 1; i >= 0; i--) {\n    GrammarAST p=(GrammarAST)ancestors.get(i);\n    if (p.getType() == ANTLRParser.ALT) {\n      AltAST a=(AltAST)p;\n      if (a.altLabel != null)       return a.altLabel.getText();\n      if (a.leftRecursiveAltInfo != null) {\n        return a.leftRecursiveAltInfo.altLabel;\n      }\n    }\n  }\n  return null;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 98,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 135,
        "startColumnNumber" : 3,
        "endLineNumber" : 135,
        "endColumnNumber" : 47
      },
      "nodeContext" : "GrammarAST p=(GrammarAST)ancestors.get(i);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : ""
  } ],
  "positionList" : [ {
    "charLength" : 16,
    "startLineNumber" : 135,
    "startColumnNumber" : 30,
    "endLineNumber" : 135,
    "endColumnNumber" : 46
  } ],
  "layoutRelationDataList" : [ ]
}