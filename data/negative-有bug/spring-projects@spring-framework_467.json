{
  "id" : 467,
  "expression" : "outputMessage.getBodyAsBytes()",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-web/src/test/java/org/springframework/http/converter/ByteArrayHttpMessageConverterTests.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "outputMessage.getBodyAsBytes()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 30,
      "startLineNumber" : 65,
      "startColumnNumber" : 44,
      "endLineNumber" : 65,
      "endColumnNumber" : 74
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 65,
        "startColumnNumber" : 2,
        "endLineNumber" : 65,
        "endColumnNumber" : 75
      },
      "nodeContext" : "assertArrayEquals(\"Invalid result\",body,outputMessage.getBodyAsBytes())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 65,
        "startColumnNumber" : 2,
        "endLineNumber" : 65,
        "endColumnNumber" : 76
      },
      "nodeContext" : "assertArrayEquals(\"Invalid result\",body,outputMessage.getBodyAsBytes());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 461,
        "startLineNumber" : 61,
        "startColumnNumber" : 40,
        "endLineNumber" : 69,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  MockHttpOutputMessage outputMessage=new MockHttpOutputMessage();\n  byte[] body=new byte[]{0x1,0x2};\n  converter.write(body,null,outputMessage);\n  assertArrayEquals(\"Invalid result\",body,outputMessage.getBodyAsBytes());\n  assertEquals(\"Invalid content-type\",new MediaType(\"application\",\"octet-stream\"),outputMessage.getHeaders().getContentType());\n  assertEquals(\"Invalid content-length\",2,outputMessage.getHeaders().getContentLength());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 61,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 507,
        "startLineNumber" : 60,
        "startColumnNumber" : 1,
        "endLineNumber" : 69,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void write() throws IOException {\n  MockHttpOutputMessage outputMessage=new MockHttpOutputMessage();\n  byte[] body=new byte[]{0x1,0x2};\n  converter.write(body,null,outputMessage);\n  assertArrayEquals(\"Invalid result\",body,outputMessage.getBodyAsBytes());\n  assertEquals(\"Invalid content-type\",new MediaType(\"application\",\"octet-stream\"),outputMessage.getHeaders().getContentType());\n  assertEquals(\"Invalid content-length\",2,outputMessage.getHeaders().getContentLength());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 69,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 65,
        "startColumnNumber" : 2,
        "endLineNumber" : 65,
        "endColumnNumber" : 76
      },
      "nodeContext" : "assertArrayEquals(\"Invalid result\",body,outputMessage.getBodyAsBytes());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "byte[]"
  } ],
  "positionList" : [ {
    "charLength" : 30,
    "startLineNumber" : 65,
    "startColumnNumber" : 44,
    "endLineNumber" : 65,
    "endColumnNumber" : 74
  } ],
  "layoutRelationDataList" : [ ]
}