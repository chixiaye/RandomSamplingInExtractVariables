{
  "id" : 31,
  "expression" : "activeRunnables.size()",
  "projectName" : "google@ExoPlayer",
  "commitID" : "4803ab3bd12b71fc32150e96475c0e16aaf6ddc5",
  "filePath" : "/library/core/src/main/java/com/google/android/exoplayer2/offline/SegmentDownloader.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "activeRunnables.size()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 217,
      "startColumnNumber" : 21,
      "endLineNumber" : 217,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 217,
        "startColumnNumber" : 21,
        "endLineNumber" : 217,
        "endColumnNumber" : 47
      },
      "nodeContext" : "activeRunnables.size() - 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationExpression,fragments]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 217,
        "startColumnNumber" : 17,
        "endLineNumber" : 217,
        "endColumnNumber" : 47
      },
      "nodeContext" : "j=activeRunnables.size() - 1",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 217,
        "startColumnNumber" : 13,
        "endLineNumber" : 217,
        "endColumnNumber" : 47
      },
      "nodeContext" : "int j=activeRunnables.size() - 1",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1319,
        "startLineNumber" : 217,
        "startColumnNumber" : 8,
        "endLineNumber" : 242,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int j=activeRunnables.size() - 1; j >= 0; j--) {\n  SegmentDownloadRunnable activeRunnable=(SegmentDownloadRunnable)activeRunnables.get(j);\n  if (pendingSegments.isEmpty() || activeRunnable.isDone()) {\n    try {\n      activeRunnable.get();\n      removeActiveRunnable(j);\n      recycledRunnables.addLast(activeRunnable);\n    }\n catch (    ExecutionException e) {\n      Throwable cause=Assertions.checkNotNull(e.getCause());\n      if (cause instanceof PriorityTooLowException) {\n        pendingSegments.addFirst(activeRunnable.segment);\n        removeActiveRunnable(j);\n        recycledRunnables.addLast(activeRunnable);\n      }\n else       if (cause instanceof IOException) {\n        throw (IOException)cause;\n      }\n else {\n        Util.sneakyThrow(cause);\n      }\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 108,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 2687,
        "startLineNumber" : 192,
        "startColumnNumber" : 56,
        "endLineNumber" : 247,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (priorityTaskManager != null) {\n    priorityTaskManager.proceed(C.PRIORITY_DOWNLOAD);\n  }\n  CacheDataSource segmentDataSource;\n  byte[] temporaryBuffer;\n  if (!recycledRunnables.isEmpty()) {\n    SegmentDownloadRunnable recycledRunnable=recycledRunnables.removeFirst();\n    segmentDataSource=recycledRunnable.dataSource;\n    temporaryBuffer=recycledRunnable.temporaryBuffer;\n  }\n else {\n    segmentDataSource=cacheDataSourceFactory.createDataSourceForDownloading();\n    temporaryBuffer=new byte[BUFFER_SIZE_BYTES];\n  }\n  Segment segment=pendingSegments.removeFirst();\n  SegmentDownloadRunnable downloadRunnable=new SegmentDownloadRunnable(segment,segmentDataSource,progressNotifier,temporaryBuffer);\n  addActiveRunnable(downloadRunnable);\n  executor.execute(downloadRunnable);\n  for (int j=activeRunnables.size() - 1; j >= 0; j--) {\n    SegmentDownloadRunnable activeRunnable=(SegmentDownloadRunnable)activeRunnables.get(j);\n    if (pendingSegments.isEmpty() || activeRunnable.isDone()) {\n      try {\n        activeRunnable.get();\n        removeActiveRunnable(j);\n        recycledRunnables.addLast(activeRunnable);\n      }\n catch (      ExecutionException e) {\n        Throwable cause=Assertions.checkNotNull(e.getCause());\n        if (cause instanceof PriorityTooLowException) {\n          pendingSegments.addFirst(activeRunnable.segment);\n          removeActiveRunnable(j);\n          recycledRunnables.addLast(activeRunnable);\n        }\n else         if (cause instanceof IOException) {\n          throw (IOException)cause;\n        }\n else {\n          Util.sneakyThrow(cause);\n        }\n      }\n    }\n  }\n  downloadRunnable.blockUntilStarted();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2737,
        "startLineNumber" : 192,
        "startColumnNumber" : 6,
        "endLineNumber" : 247,
        "endColumnNumber" : 7
      },
      "nodeContext" : "while (!isCanceled && !pendingSegments.isEmpty()) {\n  if (priorityTaskManager != null) {\n    priorityTaskManager.proceed(C.PRIORITY_DOWNLOAD);\n  }\n  CacheDataSource segmentDataSource;\n  byte[] temporaryBuffer;\n  if (!recycledRunnables.isEmpty()) {\n    SegmentDownloadRunnable recycledRunnable=recycledRunnables.removeFirst();\n    segmentDataSource=recycledRunnable.dataSource;\n    temporaryBuffer=recycledRunnable.temporaryBuffer;\n  }\n else {\n    segmentDataSource=cacheDataSourceFactory.createDataSourceForDownloading();\n    temporaryBuffer=new byte[BUFFER_SIZE_BYTES];\n  }\n  Segment segment=pendingSegments.removeFirst();\n  SegmentDownloadRunnable downloadRunnable=new SegmentDownloadRunnable(segment,segmentDataSource,progressNotifier,temporaryBuffer);\n  addActiveRunnable(downloadRunnable);\n  executor.execute(downloadRunnable);\n  for (int j=activeRunnables.size() - 1; j >= 0; j--) {\n    SegmentDownloadRunnable activeRunnable=(SegmentDownloadRunnable)activeRunnables.get(j);\n    if (pendingSegments.isEmpty() || activeRunnable.isDone()) {\n      try {\n        activeRunnable.get();\n        removeActiveRunnable(j);\n        recycledRunnables.addLast(activeRunnable);\n      }\n catch (      ExecutionException e) {\n        Throwable cause=Assertions.checkNotNull(e.getCause());\n        if (cause instanceof PriorityTooLowException) {\n          pendingSegments.addFirst(activeRunnable.segment);\n          removeActiveRunnable(j);\n          recycledRunnables.addLast(activeRunnable);\n        }\n else         if (cause instanceof IOException) {\n          throw (IOException)cause;\n        }\n else {\n          Util.sneakyThrow(cause);\n        }\n      }\n    }\n  }\n  downloadRunnable.blockUntilStarted();\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 214,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 5141,
        "startLineNumber" : 133,
        "startColumnNumber" : 8,
        "endLineNumber" : 248,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  CacheDataSource dataSource=cacheDataSourceFactory.createDataSourceForDownloading();\n  M manifest=getManifest(dataSource,manifestDataSpec,false);\n  if (!streamKeys.isEmpty()) {\n    manifest=manifest.copy(streamKeys);\n  }\n  List<Segment> segments=getSegments(dataSource,manifest,false);\n  Collections.sort(segments);\n  mergeSegments(segments,cacheKeyFactory);\n  int totalSegments=segments.size();\n  int segmentsDownloaded=0;\n  long contentLength=0;\n  long bytesDownloaded=0;\n  for (int i=segments.size() - 1; i >= 0; i--) {\n    DataSpec dataSpec=segments.get(i).dataSpec;\n    String cacheKey=cacheKeyFactory.buildCacheKey(dataSpec);\n    long segmentLength=dataSpec.length;\n    if (segmentLength == C.LENGTH_UNSET) {\n      long resourceLength=ContentMetadata.getContentLength(cache.getContentMetadata(cacheKey));\n      if (resourceLength != C.LENGTH_UNSET) {\n        segmentLength=resourceLength - dataSpec.position;\n      }\n    }\n    long segmentBytesDownloaded=cache.getCachedBytes(cacheKey,dataSpec.position,segmentLength);\n    bytesDownloaded+=segmentBytesDownloaded;\n    if (segmentLength != C.LENGTH_UNSET) {\n      if (segmentLength == segmentBytesDownloaded) {\n        segmentsDownloaded++;\n        segments.remove(i);\n      }\n      if (contentLength != C.LENGTH_UNSET) {\n        contentLength+=segmentLength;\n      }\n    }\n else {\n      contentLength=C.LENGTH_UNSET;\n    }\n  }\n  @Nullable ProgressNotifier progressNotifier=progressListener != null ? new ProgressNotifier(progressListener,contentLength,totalSegments,bytesDownloaded,segmentsDownloaded) : null;\n  pendingSegments.addAll(segments);\n  while (!isCanceled && !pendingSegments.isEmpty()) {\n    if (priorityTaskManager != null) {\n      priorityTaskManager.proceed(C.PRIORITY_DOWNLOAD);\n    }\n    CacheDataSource segmentDataSource;\n    byte[] temporaryBuffer;\n    if (!recycledRunnables.isEmpty()) {\n      SegmentDownloadRunnable recycledRunnable=recycledRunnables.removeFirst();\n      segmentDataSource=recycledRunnable.dataSource;\n      temporaryBuffer=recycledRunnable.temporaryBuffer;\n    }\n else {\n      segmentDataSource=cacheDataSourceFactory.createDataSourceForDownloading();\n      temporaryBuffer=new byte[BUFFER_SIZE_BYTES];\n    }\n    Segment segment=pendingSegments.removeFirst();\n    SegmentDownloadRunnable downloadRunnable=new SegmentDownloadRunnable(segment,segmentDataSource,progressNotifier,temporaryBuffer);\n    addActiveRunnable(downloadRunnable);\n    executor.execute(downloadRunnable);\n    for (int j=activeRunnables.size() - 1; j >= 0; j--) {\n      SegmentDownloadRunnable activeRunnable=(SegmentDownloadRunnable)activeRunnables.get(j);\n      if (pendingSegments.isEmpty() || activeRunnable.isDone()) {\n        try {\n          activeRunnable.get();\n          removeActiveRunnable(j);\n          recycledRunnables.addLast(activeRunnable);\n        }\n catch (        ExecutionException e) {\n          Throwable cause=Assertions.checkNotNull(e.getCause());\n          if (cause instanceof PriorityTooLowException) {\n            pendingSegments.addFirst(activeRunnable.segment);\n            removeActiveRunnable(j);\n            recycledRunnables.addLast(activeRunnable);\n          }\n else           if (cause instanceof IOException) {\n            throw (IOException)cause;\n          }\n else {\n            Util.sneakyThrow(cause);\n          }\n        }\n      }\n    }\n    downloadRunnable.blockUntilStarted();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 446,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5996,
        "startLineNumber" : 133,
        "startColumnNumber" : 4,
        "endLineNumber" : 264,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  CacheDataSource dataSource=cacheDataSourceFactory.createDataSourceForDownloading();\n  M manifest=getManifest(dataSource,manifestDataSpec,false);\n  if (!streamKeys.isEmpty()) {\n    manifest=manifest.copy(streamKeys);\n  }\n  List<Segment> segments=getSegments(dataSource,manifest,false);\n  Collections.sort(segments);\n  mergeSegments(segments,cacheKeyFactory);\n  int totalSegments=segments.size();\n  int segmentsDownloaded=0;\n  long contentLength=0;\n  long bytesDownloaded=0;\n  for (int i=segments.size() - 1; i >= 0; i--) {\n    DataSpec dataSpec=segments.get(i).dataSpec;\n    String cacheKey=cacheKeyFactory.buildCacheKey(dataSpec);\n    long segmentLength=dataSpec.length;\n    if (segmentLength == C.LENGTH_UNSET) {\n      long resourceLength=ContentMetadata.getContentLength(cache.getContentMetadata(cacheKey));\n      if (resourceLength != C.LENGTH_UNSET) {\n        segmentLength=resourceLength - dataSpec.position;\n      }\n    }\n    long segmentBytesDownloaded=cache.getCachedBytes(cacheKey,dataSpec.position,segmentLength);\n    bytesDownloaded+=segmentBytesDownloaded;\n    if (segmentLength != C.LENGTH_UNSET) {\n      if (segmentLength == segmentBytesDownloaded) {\n        segmentsDownloaded++;\n        segments.remove(i);\n      }\n      if (contentLength != C.LENGTH_UNSET) {\n        contentLength+=segmentLength;\n      }\n    }\n else {\n      contentLength=C.LENGTH_UNSET;\n    }\n  }\n  @Nullable ProgressNotifier progressNotifier=progressListener != null ? new ProgressNotifier(progressListener,contentLength,totalSegments,bytesDownloaded,segmentsDownloaded) : null;\n  pendingSegments.addAll(segments);\n  while (!isCanceled && !pendingSegments.isEmpty()) {\n    if (priorityTaskManager != null) {\n      priorityTaskManager.proceed(C.PRIORITY_DOWNLOAD);\n    }\n    CacheDataSource segmentDataSource;\n    byte[] temporaryBuffer;\n    if (!recycledRunnables.isEmpty()) {\n      SegmentDownloadRunnable recycledRunnable=recycledRunnables.removeFirst();\n      segmentDataSource=recycledRunnable.dataSource;\n      temporaryBuffer=recycledRunnable.temporaryBuffer;\n    }\n else {\n      segmentDataSource=cacheDataSourceFactory.createDataSourceForDownloading();\n      temporaryBuffer=new byte[BUFFER_SIZE_BYTES];\n    }\n    Segment segment=pendingSegments.removeFirst();\n    SegmentDownloadRunnable downloadRunnable=new SegmentDownloadRunnable(segment,segmentDataSource,progressNotifier,temporaryBuffer);\n    addActiveRunnable(downloadRunnable);\n    executor.execute(downloadRunnable);\n    for (int j=activeRunnables.size() - 1; j >= 0; j--) {\n      SegmentDownloadRunnable activeRunnable=(SegmentDownloadRunnable)activeRunnables.get(j);\n      if (pendingSegments.isEmpty() || activeRunnable.isDone()) {\n        try {\n          activeRunnable.get();\n          removeActiveRunnable(j);\n          recycledRunnables.addLast(activeRunnable);\n        }\n catch (        ExecutionException e) {\n          Throwable cause=Assertions.checkNotNull(e.getCause());\n          if (cause instanceof PriorityTooLowException) {\n            pendingSegments.addFirst(activeRunnable.segment);\n            removeActiveRunnable(j);\n            recycledRunnables.addLast(activeRunnable);\n          }\n else           if (cause instanceof IOException) {\n            throw (IOException)cause;\n          }\n else {\n            Util.sneakyThrow(cause);\n          }\n        }\n      }\n    }\n    downloadRunnable.blockUntilStarted();\n  }\n}\n  finally {\n  for (int i=0; i < activeRunnables.size(); i++) {\n    activeRunnables.get(i).cancel(true);\n  }\n  for (int i=activeRunnables.size() - 1; i >= 0; i--) {\n    activeRunnables.get(i).blockUntilFinished();\n    removeActiveRunnable(i);\n  }\n  if (priorityTaskManager != null) {\n    priorityTaskManager.remove(C.PRIORITY_DOWNLOAD);\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 509,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6245,
        "startLineNumber" : 127,
        "startColumnNumber" : 47,
        "endLineNumber" : 265,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ArrayDeque<Segment> pendingSegments=new ArrayDeque<>();\n  ArrayDeque<SegmentDownloadRunnable> recycledRunnables=new ArrayDeque<>();\n  if (priorityTaskManager != null) {\n    priorityTaskManager.add(C.PRIORITY_DOWNLOAD);\n  }\n  try {\n    CacheDataSource dataSource=cacheDataSourceFactory.createDataSourceForDownloading();\n    M manifest=getManifest(dataSource,manifestDataSpec,false);\n    if (!streamKeys.isEmpty()) {\n      manifest=manifest.copy(streamKeys);\n    }\n    List<Segment> segments=getSegments(dataSource,manifest,false);\n    Collections.sort(segments);\n    mergeSegments(segments,cacheKeyFactory);\n    int totalSegments=segments.size();\n    int segmentsDownloaded=0;\n    long contentLength=0;\n    long bytesDownloaded=0;\n    for (int i=segments.size() - 1; i >= 0; i--) {\n      DataSpec dataSpec=segments.get(i).dataSpec;\n      String cacheKey=cacheKeyFactory.buildCacheKey(dataSpec);\n      long segmentLength=dataSpec.length;\n      if (segmentLength == C.LENGTH_UNSET) {\n        long resourceLength=ContentMetadata.getContentLength(cache.getContentMetadata(cacheKey));\n        if (resourceLength != C.LENGTH_UNSET) {\n          segmentLength=resourceLength - dataSpec.position;\n        }\n      }\n      long segmentBytesDownloaded=cache.getCachedBytes(cacheKey,dataSpec.position,segmentLength);\n      bytesDownloaded+=segmentBytesDownloaded;\n      if (segmentLength != C.LENGTH_UNSET) {\n        if (segmentLength == segmentBytesDownloaded) {\n          segmentsDownloaded++;\n          segments.remove(i);\n        }\n        if (contentLength != C.LENGTH_UNSET) {\n          contentLength+=segmentLength;\n        }\n      }\n else {\n        contentLength=C.LENGTH_UNSET;\n      }\n    }\n    @Nullable ProgressNotifier progressNotifier=progressListener != null ? new ProgressNotifier(progressListener,contentLength,totalSegments,bytesDownloaded,segmentsDownloaded) : null;\n    pendingSegments.addAll(segments);\n    while (!isCanceled && !pendingSegments.isEmpty()) {\n      if (priorityTaskManager != null) {\n        priorityTaskManager.proceed(C.PRIORITY_DOWNLOAD);\n      }\n      CacheDataSource segmentDataSource;\n      byte[] temporaryBuffer;\n      if (!recycledRunnables.isEmpty()) {\n        SegmentDownloadRunnable recycledRunnable=recycledRunnables.removeFirst();\n        segmentDataSource=recycledRunnable.dataSource;\n        temporaryBuffer=recycledRunnable.temporaryBuffer;\n      }\n else {\n        segmentDataSource=cacheDataSourceFactory.createDataSourceForDownloading();\n        temporaryBuffer=new byte[BUFFER_SIZE_BYTES];\n      }\n      Segment segment=pendingSegments.removeFirst();\n      SegmentDownloadRunnable downloadRunnable=new SegmentDownloadRunnable(segment,segmentDataSource,progressNotifier,temporaryBuffer);\n      addActiveRunnable(downloadRunnable);\n      executor.execute(downloadRunnable);\n      for (int j=activeRunnables.size() - 1; j >= 0; j--) {\n        SegmentDownloadRunnable activeRunnable=(SegmentDownloadRunnable)activeRunnables.get(j);\n        if (pendingSegments.isEmpty() || activeRunnable.isDone()) {\n          try {\n            activeRunnable.get();\n            removeActiveRunnable(j);\n            recycledRunnables.addLast(activeRunnable);\n          }\n catch (          ExecutionException e) {\n            Throwable cause=Assertions.checkNotNull(e.getCause());\n            if (cause instanceof PriorityTooLowException) {\n              pendingSegments.addFirst(activeRunnable.segment);\n              removeActiveRunnable(j);\n              recycledRunnables.addLast(activeRunnable);\n            }\n else             if (cause instanceof IOException) {\n              throw (IOException)cause;\n            }\n else {\n              Util.sneakyThrow(cause);\n            }\n          }\n        }\n      }\n      downloadRunnable.blockUntilStarted();\n    }\n  }\n  finally {\n    for (int i=0; i < activeRunnables.size(); i++) {\n      activeRunnables.get(i).cancel(true);\n    }\n    for (int i=activeRunnables.size() - 1; i >= 0; i--) {\n      activeRunnables.get(i).blockUntilFinished();\n      removeActiveRunnable(i);\n    }\n    if (priorityTaskManager != null) {\n      priorityTaskManager.remove(C.PRIORITY_DOWNLOAD);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 546,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6376,
        "startLineNumber" : 125,
        "startColumnNumber" : 2,
        "endLineNumber" : 265,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public final void download(@Nullable ProgressListener progressListener) throws IOException, InterruptedException {\n  ArrayDeque<Segment> pendingSegments=new ArrayDeque<>();\n  ArrayDeque<SegmentDownloadRunnable> recycledRunnables=new ArrayDeque<>();\n  if (priorityTaskManager != null) {\n    priorityTaskManager.add(C.PRIORITY_DOWNLOAD);\n  }\n  try {\n    CacheDataSource dataSource=cacheDataSourceFactory.createDataSourceForDownloading();\n    M manifest=getManifest(dataSource,manifestDataSpec,false);\n    if (!streamKeys.isEmpty()) {\n      manifest=manifest.copy(streamKeys);\n    }\n    List<Segment> segments=getSegments(dataSource,manifest,false);\n    Collections.sort(segments);\n    mergeSegments(segments,cacheKeyFactory);\n    int totalSegments=segments.size();\n    int segmentsDownloaded=0;\n    long contentLength=0;\n    long bytesDownloaded=0;\n    for (int i=segments.size() - 1; i >= 0; i--) {\n      DataSpec dataSpec=segments.get(i).dataSpec;\n      String cacheKey=cacheKeyFactory.buildCacheKey(dataSpec);\n      long segmentLength=dataSpec.length;\n      if (segmentLength == C.LENGTH_UNSET) {\n        long resourceLength=ContentMetadata.getContentLength(cache.getContentMetadata(cacheKey));\n        if (resourceLength != C.LENGTH_UNSET) {\n          segmentLength=resourceLength - dataSpec.position;\n        }\n      }\n      long segmentBytesDownloaded=cache.getCachedBytes(cacheKey,dataSpec.position,segmentLength);\n      bytesDownloaded+=segmentBytesDownloaded;\n      if (segmentLength != C.LENGTH_UNSET) {\n        if (segmentLength == segmentBytesDownloaded) {\n          segmentsDownloaded++;\n          segments.remove(i);\n        }\n        if (contentLength != C.LENGTH_UNSET) {\n          contentLength+=segmentLength;\n        }\n      }\n else {\n        contentLength=C.LENGTH_UNSET;\n      }\n    }\n    @Nullable ProgressNotifier progressNotifier=progressListener != null ? new ProgressNotifier(progressListener,contentLength,totalSegments,bytesDownloaded,segmentsDownloaded) : null;\n    pendingSegments.addAll(segments);\n    while (!isCanceled && !pendingSegments.isEmpty()) {\n      if (priorityTaskManager != null) {\n        priorityTaskManager.proceed(C.PRIORITY_DOWNLOAD);\n      }\n      CacheDataSource segmentDataSource;\n      byte[] temporaryBuffer;\n      if (!recycledRunnables.isEmpty()) {\n        SegmentDownloadRunnable recycledRunnable=recycledRunnables.removeFirst();\n        segmentDataSource=recycledRunnable.dataSource;\n        temporaryBuffer=recycledRunnable.temporaryBuffer;\n      }\n else {\n        segmentDataSource=cacheDataSourceFactory.createDataSourceForDownloading();\n        temporaryBuffer=new byte[BUFFER_SIZE_BYTES];\n      }\n      Segment segment=pendingSegments.removeFirst();\n      SegmentDownloadRunnable downloadRunnable=new SegmentDownloadRunnable(segment,segmentDataSource,progressNotifier,temporaryBuffer);\n      addActiveRunnable(downloadRunnable);\n      executor.execute(downloadRunnable);\n      for (int j=activeRunnables.size() - 1; j >= 0; j--) {\n        SegmentDownloadRunnable activeRunnable=(SegmentDownloadRunnable)activeRunnables.get(j);\n        if (pendingSegments.isEmpty() || activeRunnable.isDone()) {\n          try {\n            activeRunnable.get();\n            removeActiveRunnable(j);\n            recycledRunnables.addLast(activeRunnable);\n          }\n catch (          ExecutionException e) {\n            Throwable cause=Assertions.checkNotNull(e.getCause());\n            if (cause instanceof PriorityTooLowException) {\n              pendingSegments.addFirst(activeRunnable.segment);\n              removeActiveRunnable(j);\n              recycledRunnables.addLast(activeRunnable);\n            }\n else             if (cause instanceof IOException) {\n              throw (IOException)cause;\n            }\n else {\n              Util.sneakyThrow(cause);\n            }\n          }\n        }\n      }\n      downloadRunnable.blockUntilStarted();\n    }\n  }\n  finally {\n    for (int i=0; i < activeRunnables.size(); i++) {\n      activeRunnables.get(i).cancel(true);\n    }\n    for (int i=activeRunnables.size() - 1; i >= 0; i--) {\n      activeRunnables.get(i).blockUntilFinished();\n      removeActiveRunnable(i);\n    }\n    if (priorityTaskManager != null) {\n      priorityTaskManager.remove(C.PRIORITY_DOWNLOAD);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 563,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 217,
        "startColumnNumber" : 13,
        "endLineNumber" : 217,
        "endColumnNumber" : 47
      },
      "nodeContext" : "int j=activeRunnables.size() - 1",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "activeRunnables.size()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 252,
      "startColumnNumber" : 26,
      "endLineNumber" : 252,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 252,
        "startColumnNumber" : 22,
        "endLineNumber" : 252,
        "endColumnNumber" : 48
      },
      "nodeContext" : "i < activeRunnables.size()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 129,
        "startLineNumber" : 252,
        "startColumnNumber" : 6,
        "endLineNumber" : 254,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=0; i < activeRunnables.size(); i++) {\n  activeRunnables.get(i).cancel(true);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 22,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,finally]",
      "nodePosition" : {
        "charLength" : 842,
        "startLineNumber" : 248,
        "startColumnNumber" : 14,
        "endLineNumber" : 264,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  for (int i=0; i < activeRunnables.size(); i++) {\n    activeRunnables.get(i).cancel(true);\n  }\n  for (int i=activeRunnables.size() - 1; i >= 0; i--) {\n    activeRunnables.get(i).blockUntilFinished();\n    removeActiveRunnable(i);\n  }\n  if (priorityTaskManager != null) {\n    priorityTaskManager.remove(C.PRIORITY_DOWNLOAD);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 62,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5996,
        "startLineNumber" : 133,
        "startColumnNumber" : 4,
        "endLineNumber" : 264,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  CacheDataSource dataSource=cacheDataSourceFactory.createDataSourceForDownloading();\n  M manifest=getManifest(dataSource,manifestDataSpec,false);\n  if (!streamKeys.isEmpty()) {\n    manifest=manifest.copy(streamKeys);\n  }\n  List<Segment> segments=getSegments(dataSource,manifest,false);\n  Collections.sort(segments);\n  mergeSegments(segments,cacheKeyFactory);\n  int totalSegments=segments.size();\n  int segmentsDownloaded=0;\n  long contentLength=0;\n  long bytesDownloaded=0;\n  for (int i=segments.size() - 1; i >= 0; i--) {\n    DataSpec dataSpec=segments.get(i).dataSpec;\n    String cacheKey=cacheKeyFactory.buildCacheKey(dataSpec);\n    long segmentLength=dataSpec.length;\n    if (segmentLength == C.LENGTH_UNSET) {\n      long resourceLength=ContentMetadata.getContentLength(cache.getContentMetadata(cacheKey));\n      if (resourceLength != C.LENGTH_UNSET) {\n        segmentLength=resourceLength - dataSpec.position;\n      }\n    }\n    long segmentBytesDownloaded=cache.getCachedBytes(cacheKey,dataSpec.position,segmentLength);\n    bytesDownloaded+=segmentBytesDownloaded;\n    if (segmentLength != C.LENGTH_UNSET) {\n      if (segmentLength == segmentBytesDownloaded) {\n        segmentsDownloaded++;\n        segments.remove(i);\n      }\n      if (contentLength != C.LENGTH_UNSET) {\n        contentLength+=segmentLength;\n      }\n    }\n else {\n      contentLength=C.LENGTH_UNSET;\n    }\n  }\n  @Nullable ProgressNotifier progressNotifier=progressListener != null ? new ProgressNotifier(progressListener,contentLength,totalSegments,bytesDownloaded,segmentsDownloaded) : null;\n  pendingSegments.addAll(segments);\n  while (!isCanceled && !pendingSegments.isEmpty()) {\n    if (priorityTaskManager != null) {\n      priorityTaskManager.proceed(C.PRIORITY_DOWNLOAD);\n    }\n    CacheDataSource segmentDataSource;\n    byte[] temporaryBuffer;\n    if (!recycledRunnables.isEmpty()) {\n      SegmentDownloadRunnable recycledRunnable=recycledRunnables.removeFirst();\n      segmentDataSource=recycledRunnable.dataSource;\n      temporaryBuffer=recycledRunnable.temporaryBuffer;\n    }\n else {\n      segmentDataSource=cacheDataSourceFactory.createDataSourceForDownloading();\n      temporaryBuffer=new byte[BUFFER_SIZE_BYTES];\n    }\n    Segment segment=pendingSegments.removeFirst();\n    SegmentDownloadRunnable downloadRunnable=new SegmentDownloadRunnable(segment,segmentDataSource,progressNotifier,temporaryBuffer);\n    addActiveRunnable(downloadRunnable);\n    executor.execute(downloadRunnable);\n    for (int j=activeRunnables.size() - 1; j >= 0; j--) {\n      SegmentDownloadRunnable activeRunnable=(SegmentDownloadRunnable)activeRunnables.get(j);\n      if (pendingSegments.isEmpty() || activeRunnable.isDone()) {\n        try {\n          activeRunnable.get();\n          removeActiveRunnable(j);\n          recycledRunnables.addLast(activeRunnable);\n        }\n catch (        ExecutionException e) {\n          Throwable cause=Assertions.checkNotNull(e.getCause());\n          if (cause instanceof PriorityTooLowException) {\n            pendingSegments.addFirst(activeRunnable.segment);\n            removeActiveRunnable(j);\n            recycledRunnables.addLast(activeRunnable);\n          }\n else           if (cause instanceof IOException) {\n            throw (IOException)cause;\n          }\n else {\n            Util.sneakyThrow(cause);\n          }\n        }\n      }\n    }\n    downloadRunnable.blockUntilStarted();\n  }\n}\n  finally {\n  for (int i=0; i < activeRunnables.size(); i++) {\n    activeRunnables.get(i).cancel(true);\n  }\n  for (int i=activeRunnables.size() - 1; i >= 0; i--) {\n    activeRunnables.get(i).blockUntilFinished();\n    removeActiveRunnable(i);\n  }\n  if (priorityTaskManager != null) {\n    priorityTaskManager.remove(C.PRIORITY_DOWNLOAD);\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 509,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6245,
        "startLineNumber" : 127,
        "startColumnNumber" : 47,
        "endLineNumber" : 265,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ArrayDeque<Segment> pendingSegments=new ArrayDeque<>();\n  ArrayDeque<SegmentDownloadRunnable> recycledRunnables=new ArrayDeque<>();\n  if (priorityTaskManager != null) {\n    priorityTaskManager.add(C.PRIORITY_DOWNLOAD);\n  }\n  try {\n    CacheDataSource dataSource=cacheDataSourceFactory.createDataSourceForDownloading();\n    M manifest=getManifest(dataSource,manifestDataSpec,false);\n    if (!streamKeys.isEmpty()) {\n      manifest=manifest.copy(streamKeys);\n    }\n    List<Segment> segments=getSegments(dataSource,manifest,false);\n    Collections.sort(segments);\n    mergeSegments(segments,cacheKeyFactory);\n    int totalSegments=segments.size();\n    int segmentsDownloaded=0;\n    long contentLength=0;\n    long bytesDownloaded=0;\n    for (int i=segments.size() - 1; i >= 0; i--) {\n      DataSpec dataSpec=segments.get(i).dataSpec;\n      String cacheKey=cacheKeyFactory.buildCacheKey(dataSpec);\n      long segmentLength=dataSpec.length;\n      if (segmentLength == C.LENGTH_UNSET) {\n        long resourceLength=ContentMetadata.getContentLength(cache.getContentMetadata(cacheKey));\n        if (resourceLength != C.LENGTH_UNSET) {\n          segmentLength=resourceLength - dataSpec.position;\n        }\n      }\n      long segmentBytesDownloaded=cache.getCachedBytes(cacheKey,dataSpec.position,segmentLength);\n      bytesDownloaded+=segmentBytesDownloaded;\n      if (segmentLength != C.LENGTH_UNSET) {\n        if (segmentLength == segmentBytesDownloaded) {\n          segmentsDownloaded++;\n          segments.remove(i);\n        }\n        if (contentLength != C.LENGTH_UNSET) {\n          contentLength+=segmentLength;\n        }\n      }\n else {\n        contentLength=C.LENGTH_UNSET;\n      }\n    }\n    @Nullable ProgressNotifier progressNotifier=progressListener != null ? new ProgressNotifier(progressListener,contentLength,totalSegments,bytesDownloaded,segmentsDownloaded) : null;\n    pendingSegments.addAll(segments);\n    while (!isCanceled && !pendingSegments.isEmpty()) {\n      if (priorityTaskManager != null) {\n        priorityTaskManager.proceed(C.PRIORITY_DOWNLOAD);\n      }\n      CacheDataSource segmentDataSource;\n      byte[] temporaryBuffer;\n      if (!recycledRunnables.isEmpty()) {\n        SegmentDownloadRunnable recycledRunnable=recycledRunnables.removeFirst();\n        segmentDataSource=recycledRunnable.dataSource;\n        temporaryBuffer=recycledRunnable.temporaryBuffer;\n      }\n else {\n        segmentDataSource=cacheDataSourceFactory.createDataSourceForDownloading();\n        temporaryBuffer=new byte[BUFFER_SIZE_BYTES];\n      }\n      Segment segment=pendingSegments.removeFirst();\n      SegmentDownloadRunnable downloadRunnable=new SegmentDownloadRunnable(segment,segmentDataSource,progressNotifier,temporaryBuffer);\n      addActiveRunnable(downloadRunnable);\n      executor.execute(downloadRunnable);\n      for (int j=activeRunnables.size() - 1; j >= 0; j--) {\n        SegmentDownloadRunnable activeRunnable=(SegmentDownloadRunnable)activeRunnables.get(j);\n        if (pendingSegments.isEmpty() || activeRunnable.isDone()) {\n          try {\n            activeRunnable.get();\n            removeActiveRunnable(j);\n            recycledRunnables.addLast(activeRunnable);\n          }\n catch (          ExecutionException e) {\n            Throwable cause=Assertions.checkNotNull(e.getCause());\n            if (cause instanceof PriorityTooLowException) {\n              pendingSegments.addFirst(activeRunnable.segment);\n              removeActiveRunnable(j);\n              recycledRunnables.addLast(activeRunnable);\n            }\n else             if (cause instanceof IOException) {\n              throw (IOException)cause;\n            }\n else {\n              Util.sneakyThrow(cause);\n            }\n          }\n        }\n      }\n      downloadRunnable.blockUntilStarted();\n    }\n  }\n  finally {\n    for (int i=0; i < activeRunnables.size(); i++) {\n      activeRunnables.get(i).cancel(true);\n    }\n    for (int i=activeRunnables.size() - 1; i >= 0; i--) {\n      activeRunnables.get(i).blockUntilFinished();\n      removeActiveRunnable(i);\n    }\n    if (priorityTaskManager != null) {\n      priorityTaskManager.remove(C.PRIORITY_DOWNLOAD);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 546,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6376,
        "startLineNumber" : 125,
        "startColumnNumber" : 2,
        "endLineNumber" : 265,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public final void download(@Nullable ProgressListener progressListener) throws IOException, InterruptedException {\n  ArrayDeque<Segment> pendingSegments=new ArrayDeque<>();\n  ArrayDeque<SegmentDownloadRunnable> recycledRunnables=new ArrayDeque<>();\n  if (priorityTaskManager != null) {\n    priorityTaskManager.add(C.PRIORITY_DOWNLOAD);\n  }\n  try {\n    CacheDataSource dataSource=cacheDataSourceFactory.createDataSourceForDownloading();\n    M manifest=getManifest(dataSource,manifestDataSpec,false);\n    if (!streamKeys.isEmpty()) {\n      manifest=manifest.copy(streamKeys);\n    }\n    List<Segment> segments=getSegments(dataSource,manifest,false);\n    Collections.sort(segments);\n    mergeSegments(segments,cacheKeyFactory);\n    int totalSegments=segments.size();\n    int segmentsDownloaded=0;\n    long contentLength=0;\n    long bytesDownloaded=0;\n    for (int i=segments.size() - 1; i >= 0; i--) {\n      DataSpec dataSpec=segments.get(i).dataSpec;\n      String cacheKey=cacheKeyFactory.buildCacheKey(dataSpec);\n      long segmentLength=dataSpec.length;\n      if (segmentLength == C.LENGTH_UNSET) {\n        long resourceLength=ContentMetadata.getContentLength(cache.getContentMetadata(cacheKey));\n        if (resourceLength != C.LENGTH_UNSET) {\n          segmentLength=resourceLength - dataSpec.position;\n        }\n      }\n      long segmentBytesDownloaded=cache.getCachedBytes(cacheKey,dataSpec.position,segmentLength);\n      bytesDownloaded+=segmentBytesDownloaded;\n      if (segmentLength != C.LENGTH_UNSET) {\n        if (segmentLength == segmentBytesDownloaded) {\n          segmentsDownloaded++;\n          segments.remove(i);\n        }\n        if (contentLength != C.LENGTH_UNSET) {\n          contentLength+=segmentLength;\n        }\n      }\n else {\n        contentLength=C.LENGTH_UNSET;\n      }\n    }\n    @Nullable ProgressNotifier progressNotifier=progressListener != null ? new ProgressNotifier(progressListener,contentLength,totalSegments,bytesDownloaded,segmentsDownloaded) : null;\n    pendingSegments.addAll(segments);\n    while (!isCanceled && !pendingSegments.isEmpty()) {\n      if (priorityTaskManager != null) {\n        priorityTaskManager.proceed(C.PRIORITY_DOWNLOAD);\n      }\n      CacheDataSource segmentDataSource;\n      byte[] temporaryBuffer;\n      if (!recycledRunnables.isEmpty()) {\n        SegmentDownloadRunnable recycledRunnable=recycledRunnables.removeFirst();\n        segmentDataSource=recycledRunnable.dataSource;\n        temporaryBuffer=recycledRunnable.temporaryBuffer;\n      }\n else {\n        segmentDataSource=cacheDataSourceFactory.createDataSourceForDownloading();\n        temporaryBuffer=new byte[BUFFER_SIZE_BYTES];\n      }\n      Segment segment=pendingSegments.removeFirst();\n      SegmentDownloadRunnable downloadRunnable=new SegmentDownloadRunnable(segment,segmentDataSource,progressNotifier,temporaryBuffer);\n      addActiveRunnable(downloadRunnable);\n      executor.execute(downloadRunnable);\n      for (int j=activeRunnables.size() - 1; j >= 0; j--) {\n        SegmentDownloadRunnable activeRunnable=(SegmentDownloadRunnable)activeRunnables.get(j);\n        if (pendingSegments.isEmpty() || activeRunnable.isDone()) {\n          try {\n            activeRunnable.get();\n            removeActiveRunnable(j);\n            recycledRunnables.addLast(activeRunnable);\n          }\n catch (          ExecutionException e) {\n            Throwable cause=Assertions.checkNotNull(e.getCause());\n            if (cause instanceof PriorityTooLowException) {\n              pendingSegments.addFirst(activeRunnable.segment);\n              removeActiveRunnable(j);\n              recycledRunnables.addLast(activeRunnable);\n            }\n else             if (cause instanceof IOException) {\n              throw (IOException)cause;\n            }\n else {\n              Util.sneakyThrow(cause);\n            }\n          }\n        }\n      }\n      downloadRunnable.blockUntilStarted();\n    }\n  }\n  finally {\n    for (int i=0; i < activeRunnables.size(); i++) {\n      activeRunnables.get(i).cancel(true);\n    }\n    for (int i=activeRunnables.size() - 1; i >= 0; i--) {\n      activeRunnables.get(i).blockUntilFinished();\n      removeActiveRunnable(i);\n    }\n    if (priorityTaskManager != null) {\n      priorityTaskManager.remove(C.PRIORITY_DOWNLOAD);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 563,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 252,
        "startColumnNumber" : 22,
        "endLineNumber" : 252,
        "endColumnNumber" : 48
      },
      "nodeContext" : "i < activeRunnables.size()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "int"
  }, {
    "nodeContext" : "activeRunnables.size()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 257,
      "startColumnNumber" : 19,
      "endLineNumber" : 257,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 257,
        "startColumnNumber" : 19,
        "endLineNumber" : 257,
        "endColumnNumber" : 45
      },
      "nodeContext" : "activeRunnables.size() - 1",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationExpression,fragments]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 257,
        "startColumnNumber" : 15,
        "endLineNumber" : 257,
        "endColumnNumber" : 45
      },
      "nodeContext" : "i=activeRunnables.size() - 1",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 257,
        "startColumnNumber" : 11,
        "endLineNumber" : 257,
        "endColumnNumber" : 45
      },
      "nodeContext" : "int i=activeRunnables.size() - 1",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 149,
        "startLineNumber" : 257,
        "startColumnNumber" : 6,
        "endLineNumber" : 260,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int i=activeRunnables.size() - 1; i >= 0; i--) {\n  activeRunnables.get(i).blockUntilFinished();\n  removeActiveRunnable(i);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 27,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,finally]",
      "nodePosition" : {
        "charLength" : 842,
        "startLineNumber" : 248,
        "startColumnNumber" : 14,
        "endLineNumber" : 264,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  for (int i=0; i < activeRunnables.size(); i++) {\n    activeRunnables.get(i).cancel(true);\n  }\n  for (int i=activeRunnables.size() - 1; i >= 0; i--) {\n    activeRunnables.get(i).blockUntilFinished();\n    removeActiveRunnable(i);\n  }\n  if (priorityTaskManager != null) {\n    priorityTaskManager.remove(C.PRIORITY_DOWNLOAD);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 62,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5996,
        "startLineNumber" : 133,
        "startColumnNumber" : 4,
        "endLineNumber" : 264,
        "endColumnNumber" : 5
      },
      "nodeContext" : "try {\n  CacheDataSource dataSource=cacheDataSourceFactory.createDataSourceForDownloading();\n  M manifest=getManifest(dataSource,manifestDataSpec,false);\n  if (!streamKeys.isEmpty()) {\n    manifest=manifest.copy(streamKeys);\n  }\n  List<Segment> segments=getSegments(dataSource,manifest,false);\n  Collections.sort(segments);\n  mergeSegments(segments,cacheKeyFactory);\n  int totalSegments=segments.size();\n  int segmentsDownloaded=0;\n  long contentLength=0;\n  long bytesDownloaded=0;\n  for (int i=segments.size() - 1; i >= 0; i--) {\n    DataSpec dataSpec=segments.get(i).dataSpec;\n    String cacheKey=cacheKeyFactory.buildCacheKey(dataSpec);\n    long segmentLength=dataSpec.length;\n    if (segmentLength == C.LENGTH_UNSET) {\n      long resourceLength=ContentMetadata.getContentLength(cache.getContentMetadata(cacheKey));\n      if (resourceLength != C.LENGTH_UNSET) {\n        segmentLength=resourceLength - dataSpec.position;\n      }\n    }\n    long segmentBytesDownloaded=cache.getCachedBytes(cacheKey,dataSpec.position,segmentLength);\n    bytesDownloaded+=segmentBytesDownloaded;\n    if (segmentLength != C.LENGTH_UNSET) {\n      if (segmentLength == segmentBytesDownloaded) {\n        segmentsDownloaded++;\n        segments.remove(i);\n      }\n      if (contentLength != C.LENGTH_UNSET) {\n        contentLength+=segmentLength;\n      }\n    }\n else {\n      contentLength=C.LENGTH_UNSET;\n    }\n  }\n  @Nullable ProgressNotifier progressNotifier=progressListener != null ? new ProgressNotifier(progressListener,contentLength,totalSegments,bytesDownloaded,segmentsDownloaded) : null;\n  pendingSegments.addAll(segments);\n  while (!isCanceled && !pendingSegments.isEmpty()) {\n    if (priorityTaskManager != null) {\n      priorityTaskManager.proceed(C.PRIORITY_DOWNLOAD);\n    }\n    CacheDataSource segmentDataSource;\n    byte[] temporaryBuffer;\n    if (!recycledRunnables.isEmpty()) {\n      SegmentDownloadRunnable recycledRunnable=recycledRunnables.removeFirst();\n      segmentDataSource=recycledRunnable.dataSource;\n      temporaryBuffer=recycledRunnable.temporaryBuffer;\n    }\n else {\n      segmentDataSource=cacheDataSourceFactory.createDataSourceForDownloading();\n      temporaryBuffer=new byte[BUFFER_SIZE_BYTES];\n    }\n    Segment segment=pendingSegments.removeFirst();\n    SegmentDownloadRunnable downloadRunnable=new SegmentDownloadRunnable(segment,segmentDataSource,progressNotifier,temporaryBuffer);\n    addActiveRunnable(downloadRunnable);\n    executor.execute(downloadRunnable);\n    for (int j=activeRunnables.size() - 1; j >= 0; j--) {\n      SegmentDownloadRunnable activeRunnable=(SegmentDownloadRunnable)activeRunnables.get(j);\n      if (pendingSegments.isEmpty() || activeRunnable.isDone()) {\n        try {\n          activeRunnable.get();\n          removeActiveRunnable(j);\n          recycledRunnables.addLast(activeRunnable);\n        }\n catch (        ExecutionException e) {\n          Throwable cause=Assertions.checkNotNull(e.getCause());\n          if (cause instanceof PriorityTooLowException) {\n            pendingSegments.addFirst(activeRunnable.segment);\n            removeActiveRunnable(j);\n            recycledRunnables.addLast(activeRunnable);\n          }\n else           if (cause instanceof IOException) {\n            throw (IOException)cause;\n          }\n else {\n            Util.sneakyThrow(cause);\n          }\n        }\n      }\n    }\n    downloadRunnable.blockUntilStarted();\n  }\n}\n  finally {\n  for (int i=0; i < activeRunnables.size(); i++) {\n    activeRunnables.get(i).cancel(true);\n  }\n  for (int i=activeRunnables.size() - 1; i >= 0; i--) {\n    activeRunnables.get(i).blockUntilFinished();\n    removeActiveRunnable(i);\n  }\n  if (priorityTaskManager != null) {\n    priorityTaskManager.remove(C.PRIORITY_DOWNLOAD);\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 509,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6245,
        "startLineNumber" : 127,
        "startColumnNumber" : 47,
        "endLineNumber" : 265,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ArrayDeque<Segment> pendingSegments=new ArrayDeque<>();\n  ArrayDeque<SegmentDownloadRunnable> recycledRunnables=new ArrayDeque<>();\n  if (priorityTaskManager != null) {\n    priorityTaskManager.add(C.PRIORITY_DOWNLOAD);\n  }\n  try {\n    CacheDataSource dataSource=cacheDataSourceFactory.createDataSourceForDownloading();\n    M manifest=getManifest(dataSource,manifestDataSpec,false);\n    if (!streamKeys.isEmpty()) {\n      manifest=manifest.copy(streamKeys);\n    }\n    List<Segment> segments=getSegments(dataSource,manifest,false);\n    Collections.sort(segments);\n    mergeSegments(segments,cacheKeyFactory);\n    int totalSegments=segments.size();\n    int segmentsDownloaded=0;\n    long contentLength=0;\n    long bytesDownloaded=0;\n    for (int i=segments.size() - 1; i >= 0; i--) {\n      DataSpec dataSpec=segments.get(i).dataSpec;\n      String cacheKey=cacheKeyFactory.buildCacheKey(dataSpec);\n      long segmentLength=dataSpec.length;\n      if (segmentLength == C.LENGTH_UNSET) {\n        long resourceLength=ContentMetadata.getContentLength(cache.getContentMetadata(cacheKey));\n        if (resourceLength != C.LENGTH_UNSET) {\n          segmentLength=resourceLength - dataSpec.position;\n        }\n      }\n      long segmentBytesDownloaded=cache.getCachedBytes(cacheKey,dataSpec.position,segmentLength);\n      bytesDownloaded+=segmentBytesDownloaded;\n      if (segmentLength != C.LENGTH_UNSET) {\n        if (segmentLength == segmentBytesDownloaded) {\n          segmentsDownloaded++;\n          segments.remove(i);\n        }\n        if (contentLength != C.LENGTH_UNSET) {\n          contentLength+=segmentLength;\n        }\n      }\n else {\n        contentLength=C.LENGTH_UNSET;\n      }\n    }\n    @Nullable ProgressNotifier progressNotifier=progressListener != null ? new ProgressNotifier(progressListener,contentLength,totalSegments,bytesDownloaded,segmentsDownloaded) : null;\n    pendingSegments.addAll(segments);\n    while (!isCanceled && !pendingSegments.isEmpty()) {\n      if (priorityTaskManager != null) {\n        priorityTaskManager.proceed(C.PRIORITY_DOWNLOAD);\n      }\n      CacheDataSource segmentDataSource;\n      byte[] temporaryBuffer;\n      if (!recycledRunnables.isEmpty()) {\n        SegmentDownloadRunnable recycledRunnable=recycledRunnables.removeFirst();\n        segmentDataSource=recycledRunnable.dataSource;\n        temporaryBuffer=recycledRunnable.temporaryBuffer;\n      }\n else {\n        segmentDataSource=cacheDataSourceFactory.createDataSourceForDownloading();\n        temporaryBuffer=new byte[BUFFER_SIZE_BYTES];\n      }\n      Segment segment=pendingSegments.removeFirst();\n      SegmentDownloadRunnable downloadRunnable=new SegmentDownloadRunnable(segment,segmentDataSource,progressNotifier,temporaryBuffer);\n      addActiveRunnable(downloadRunnable);\n      executor.execute(downloadRunnable);\n      for (int j=activeRunnables.size() - 1; j >= 0; j--) {\n        SegmentDownloadRunnable activeRunnable=(SegmentDownloadRunnable)activeRunnables.get(j);\n        if (pendingSegments.isEmpty() || activeRunnable.isDone()) {\n          try {\n            activeRunnable.get();\n            removeActiveRunnable(j);\n            recycledRunnables.addLast(activeRunnable);\n          }\n catch (          ExecutionException e) {\n            Throwable cause=Assertions.checkNotNull(e.getCause());\n            if (cause instanceof PriorityTooLowException) {\n              pendingSegments.addFirst(activeRunnable.segment);\n              removeActiveRunnable(j);\n              recycledRunnables.addLast(activeRunnable);\n            }\n else             if (cause instanceof IOException) {\n              throw (IOException)cause;\n            }\n else {\n              Util.sneakyThrow(cause);\n            }\n          }\n        }\n      }\n      downloadRunnable.blockUntilStarted();\n    }\n  }\n  finally {\n    for (int i=0; i < activeRunnables.size(); i++) {\n      activeRunnables.get(i).cancel(true);\n    }\n    for (int i=activeRunnables.size() - 1; i >= 0; i--) {\n      activeRunnables.get(i).blockUntilFinished();\n      removeActiveRunnable(i);\n    }\n    if (priorityTaskManager != null) {\n      priorityTaskManager.remove(C.PRIORITY_DOWNLOAD);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 546,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6376,
        "startLineNumber" : 125,
        "startColumnNumber" : 2,
        "endLineNumber" : 265,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public final void download(@Nullable ProgressListener progressListener) throws IOException, InterruptedException {\n  ArrayDeque<Segment> pendingSegments=new ArrayDeque<>();\n  ArrayDeque<SegmentDownloadRunnable> recycledRunnables=new ArrayDeque<>();\n  if (priorityTaskManager != null) {\n    priorityTaskManager.add(C.PRIORITY_DOWNLOAD);\n  }\n  try {\n    CacheDataSource dataSource=cacheDataSourceFactory.createDataSourceForDownloading();\n    M manifest=getManifest(dataSource,manifestDataSpec,false);\n    if (!streamKeys.isEmpty()) {\n      manifest=manifest.copy(streamKeys);\n    }\n    List<Segment> segments=getSegments(dataSource,manifest,false);\n    Collections.sort(segments);\n    mergeSegments(segments,cacheKeyFactory);\n    int totalSegments=segments.size();\n    int segmentsDownloaded=0;\n    long contentLength=0;\n    long bytesDownloaded=0;\n    for (int i=segments.size() - 1; i >= 0; i--) {\n      DataSpec dataSpec=segments.get(i).dataSpec;\n      String cacheKey=cacheKeyFactory.buildCacheKey(dataSpec);\n      long segmentLength=dataSpec.length;\n      if (segmentLength == C.LENGTH_UNSET) {\n        long resourceLength=ContentMetadata.getContentLength(cache.getContentMetadata(cacheKey));\n        if (resourceLength != C.LENGTH_UNSET) {\n          segmentLength=resourceLength - dataSpec.position;\n        }\n      }\n      long segmentBytesDownloaded=cache.getCachedBytes(cacheKey,dataSpec.position,segmentLength);\n      bytesDownloaded+=segmentBytesDownloaded;\n      if (segmentLength != C.LENGTH_UNSET) {\n        if (segmentLength == segmentBytesDownloaded) {\n          segmentsDownloaded++;\n          segments.remove(i);\n        }\n        if (contentLength != C.LENGTH_UNSET) {\n          contentLength+=segmentLength;\n        }\n      }\n else {\n        contentLength=C.LENGTH_UNSET;\n      }\n    }\n    @Nullable ProgressNotifier progressNotifier=progressListener != null ? new ProgressNotifier(progressListener,contentLength,totalSegments,bytesDownloaded,segmentsDownloaded) : null;\n    pendingSegments.addAll(segments);\n    while (!isCanceled && !pendingSegments.isEmpty()) {\n      if (priorityTaskManager != null) {\n        priorityTaskManager.proceed(C.PRIORITY_DOWNLOAD);\n      }\n      CacheDataSource segmentDataSource;\n      byte[] temporaryBuffer;\n      if (!recycledRunnables.isEmpty()) {\n        SegmentDownloadRunnable recycledRunnable=recycledRunnables.removeFirst();\n        segmentDataSource=recycledRunnable.dataSource;\n        temporaryBuffer=recycledRunnable.temporaryBuffer;\n      }\n else {\n        segmentDataSource=cacheDataSourceFactory.createDataSourceForDownloading();\n        temporaryBuffer=new byte[BUFFER_SIZE_BYTES];\n      }\n      Segment segment=pendingSegments.removeFirst();\n      SegmentDownloadRunnable downloadRunnable=new SegmentDownloadRunnable(segment,segmentDataSource,progressNotifier,temporaryBuffer);\n      addActiveRunnable(downloadRunnable);\n      executor.execute(downloadRunnable);\n      for (int j=activeRunnables.size() - 1; j >= 0; j--) {\n        SegmentDownloadRunnable activeRunnable=(SegmentDownloadRunnable)activeRunnables.get(j);\n        if (pendingSegments.isEmpty() || activeRunnable.isDone()) {\n          try {\n            activeRunnable.get();\n            removeActiveRunnable(j);\n            recycledRunnables.addLast(activeRunnable);\n          }\n catch (          ExecutionException e) {\n            Throwable cause=Assertions.checkNotNull(e.getCause());\n            if (cause instanceof PriorityTooLowException) {\n              pendingSegments.addFirst(activeRunnable.segment);\n              removeActiveRunnable(j);\n              recycledRunnables.addLast(activeRunnable);\n            }\n else             if (cause instanceof IOException) {\n              throw (IOException)cause;\n            }\n else {\n              Util.sneakyThrow(cause);\n            }\n          }\n        }\n      }\n      downloadRunnable.blockUntilStarted();\n    }\n  }\n  finally {\n    for (int i=0; i < activeRunnables.size(); i++) {\n      activeRunnables.get(i).cancel(true);\n    }\n    for (int i=activeRunnables.size() - 1; i >= 0; i--) {\n      activeRunnables.get(i).blockUntilFinished();\n      removeActiveRunnable(i);\n    }\n    if (priorityTaskManager != null) {\n      priorityTaskManager.remove(C.PRIORITY_DOWNLOAD);\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 563,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ForStatement,initializers]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 257,
        "startColumnNumber" : 11,
        "endLineNumber" : 257,
        "endColumnNumber" : 45
      },
      "nodeContext" : "int i=activeRunnables.size() - 1",
      "nodeType" : "VariableDeclarationExpression",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 22,
    "startLineNumber" : 217,
    "startColumnNumber" : 21,
    "endLineNumber" : 217,
    "endColumnNumber" : 43
  }, {
    "charLength" : 22,
    "startLineNumber" : 252,
    "startColumnNumber" : 26,
    "endLineNumber" : 252,
    "endColumnNumber" : 48
  }, {
    "charLength" : 22,
    "startLineNumber" : 257,
    "startColumnNumber" : 19,
    "endLineNumber" : 257,
    "endColumnNumber" : 41
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 7
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 7
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  } ]
}