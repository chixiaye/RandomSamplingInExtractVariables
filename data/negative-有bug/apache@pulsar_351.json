{
  "id" : 351,
  "expression" : "path",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/managed-ledger/src/main/java/org/apache/bookkeeper/mledger/impl/MetaStoreImpl.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "path",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 60,
      "startColumnNumber" : 18,
      "endLineNumber" : 60,
      "endColumnNumber" : 22
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 60,
        "startColumnNumber" : 8,
        "endLineNumber" : 60,
        "endColumnNumber" : 23
      },
      "nodeContext" : "store.get(path)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 1748,
        "startLineNumber" : 60,
        "startColumnNumber" : 8,
        "endLineNumber" : 90,
        "endColumnNumber" : 53
      },
      "nodeContext" : "store.get(path).thenAcceptAsync(optResult -> {\n  if (optResult.isPresent()) {\n    ManagedLedgerInfo info;\n    try {\n      info=ManagedLedgerInfo.parseFrom(optResult.get().getValue());\n      info=updateMLInfoTimestamp(info);\n      callback.operationComplete(info,optResult.get().getStat());\n    }\n catch (    InvalidProtocolBufferException e) {\n      callback.operationFailed(getException(e));\n    }\n  }\n else {\n    if (createIfMissing) {\n      log.info(\"Creating '{}'\",path);\n      store.put(path,new byte[0],Optional.of(-1L)).thenAccept(stat -> {\n        ManagedLedgerInfo info=ManagedLedgerInfo.getDefaultInstance();\n        callback.operationComplete(info,stat);\n      }\n).exceptionally(ex -> {\n        callback.operationFailed(getException(ex));\n        return null;\n      }\n);\n    }\n else {\n      callback.operationFailed(new MetadataNotFoundException(\"Managed ledger not found\"));\n    }\n  }\n}\n,executor.chooseThread(ledgerName))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 135,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 1968,
        "startLineNumber" : 60,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 18
      },
      "nodeContext" : "store.get(path).thenAcceptAsync(optResult -> {\n  if (optResult.isPresent()) {\n    ManagedLedgerInfo info;\n    try {\n      info=ManagedLedgerInfo.parseFrom(optResult.get().getValue());\n      info=updateMLInfoTimestamp(info);\n      callback.operationComplete(info,optResult.get().getStat());\n    }\n catch (    InvalidProtocolBufferException e) {\n      callback.operationFailed(getException(e));\n    }\n  }\n else {\n    if (createIfMissing) {\n      log.info(\"Creating '{}'\",path);\n      store.put(path,new byte[0],Optional.of(-1L)).thenAccept(stat -> {\n        ManagedLedgerInfo info=ManagedLedgerInfo.getDefaultInstance();\n        callback.operationComplete(info,stat);\n      }\n).exceptionally(ex -> {\n        callback.operationFailed(getException(ex));\n        return null;\n      }\n);\n    }\n else {\n      callback.operationFailed(new MetadataNotFoundException(\"Managed ledger not found\"));\n    }\n  }\n}\n,executor.chooseThread(ledgerName)).exceptionally(ex -> {\n  executor.executeOrdered(ledgerName,SafeRunnable.safeRun(() -> callback.operationFailed(getException(ex))));\n  return null;\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 158,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1969,
        "startLineNumber" : 60,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 19
      },
      "nodeContext" : "store.get(path).thenAcceptAsync(optResult -> {\n  if (optResult.isPresent()) {\n    ManagedLedgerInfo info;\n    try {\n      info=ManagedLedgerInfo.parseFrom(optResult.get().getValue());\n      info=updateMLInfoTimestamp(info);\n      callback.operationComplete(info,optResult.get().getStat());\n    }\n catch (    InvalidProtocolBufferException e) {\n      callback.operationFailed(getException(e));\n    }\n  }\n else {\n    if (createIfMissing) {\n      log.info(\"Creating '{}'\",path);\n      store.put(path,new byte[0],Optional.of(-1L)).thenAccept(stat -> {\n        ManagedLedgerInfo info=ManagedLedgerInfo.getDefaultInstance();\n        callback.operationComplete(info,stat);\n      }\n).exceptionally(ex -> {\n        callback.operationFailed(getException(ex));\n        return null;\n      }\n);\n    }\n else {\n      callback.operationFailed(new MetadataNotFoundException(\"Managed ledger not found\"));\n    }\n  }\n}\n,executor.chooseThread(ledgerName)).exceptionally(ex -> {\n  executor.executeOrdered(ledgerName,SafeRunnable.safeRun(() -> callback.operationFailed(getException(ex))));\n  return null;\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 159,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2086,
        "startLineNumber" : 57,
        "startColumnNumber" : 59,
        "endLineNumber" : 95,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String path=PREFIX + ledgerName;\n  store.get(path).thenAcceptAsync(optResult -> {\n    if (optResult.isPresent()) {\n      ManagedLedgerInfo info;\n      try {\n        info=ManagedLedgerInfo.parseFrom(optResult.get().getValue());\n        info=updateMLInfoTimestamp(info);\n        callback.operationComplete(info,optResult.get().getStat());\n      }\n catch (      InvalidProtocolBufferException e) {\n        callback.operationFailed(getException(e));\n      }\n    }\n else {\n      if (createIfMissing) {\n        log.info(\"Creating '{}'\",path);\n        store.put(path,new byte[0],Optional.of(-1L)).thenAccept(stat -> {\n          ManagedLedgerInfo info=ManagedLedgerInfo.getDefaultInstance();\n          callback.operationComplete(info,stat);\n        }\n).exceptionally(ex -> {\n          callback.operationFailed(getException(ex));\n          return null;\n        }\n);\n      }\n else {\n        callback.operationFailed(new MetadataNotFoundException(\"Managed ledger not found\"));\n      }\n    }\n  }\n,executor.chooseThread(ledgerName)).exceptionally(ex -> {\n    executor.executeOrdered(ledgerName,SafeRunnable.safeRun(() -> callback.operationFailed(getException(ex))));\n    return null;\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 168,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2236,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 95,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void getManagedLedgerInfo(String ledgerName,boolean createIfMissing,MetaStoreCallback<ManagedLedgerInfo> callback){\n  String path=PREFIX + ledgerName;\n  store.get(path).thenAcceptAsync(optResult -> {\n    if (optResult.isPresent()) {\n      ManagedLedgerInfo info;\n      try {\n        info=ManagedLedgerInfo.parseFrom(optResult.get().getValue());\n        info=updateMLInfoTimestamp(info);\n        callback.operationComplete(info,optResult.get().getStat());\n      }\n catch (      InvalidProtocolBufferException e) {\n        callback.operationFailed(getException(e));\n      }\n    }\n else {\n      if (createIfMissing) {\n        log.info(\"Creating '{}'\",path);\n        store.put(path,new byte[0],Optional.of(-1L)).thenAccept(stat -> {\n          ManagedLedgerInfo info=ManagedLedgerInfo.getDefaultInstance();\n          callback.operationComplete(info,stat);\n        }\n).exceptionally(ex -> {\n          callback.operationFailed(getException(ex));\n          return null;\n        }\n);\n      }\n else {\n        callback.operationFailed(new MetadataNotFoundException(\"Managed ledger not found\"));\n      }\n    }\n  }\n,executor.chooseThread(ledgerName)).exceptionally(ex -> {\n    executor.executeOrdered(ledgerName,SafeRunnable.safeRun(() -> callback.operationFailed(getException(ex))));\n    return null;\n  }\n);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 188,
      "astHeight" : 20
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 60,
        "startColumnNumber" : 8,
        "endLineNumber" : 60,
        "endColumnNumber" : 23
      },
      "nodeContext" : "store.get(path)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 60,
    "startColumnNumber" : 18,
    "endLineNumber" : 60,
    "endColumnNumber" : 22
  } ],
  "layoutRelationDataList" : [ ]
}