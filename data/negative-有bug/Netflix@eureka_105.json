{
  "id" : 105,
  "expression" : "ServerResolver",
  "projectName" : "Netflix@eureka",
  "commitID" : "2f6d04dae7f6fca2a17e85fc53020e13272a79b2",
  "filePath" : "/eureka-client/src/test/java/com/netflix/eureka2/client/transport/ResolverBasedTransportClientTest.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "ServerResolver",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 82,
      "startColumnNumber" : 30,
      "endLineNumber" : 82,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 82,
        "startColumnNumber" : 30,
        "endLineNumber" : 82,
        "endColumnNumber" : 51
      },
      "nodeContext" : "ServerResolver.Server",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ParameterizedType,typeArguments]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 82,
        "startColumnNumber" : 30,
        "endLineNumber" : 82,
        "endColumnNumber" : 51
      },
      "nodeContext" : "ServerResolver.Server",
      "nodeType" : "SimpleType",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,type]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 82,
        "startColumnNumber" : 14,
        "endLineNumber" : 82,
        "endColumnNumber" : 52
      },
      "nodeContext" : "AtomicReference<ServerResolver.Server>",
      "nodeType" : "ParameterizedType",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 127,
        "startLineNumber" : 82,
        "startColumnNumber" : 8,
        "endLineNumber" : 82,
        "endColumnNumber" : 135
      },
      "nodeContext" : "final AtomicReference<ServerResolver.Server> expectedServer=new AtomicReference<>(new ServerResolver.Server(\"localhost\",0));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1509,
        "startLineNumber" : 80,
        "startColumnNumber" : 58,
        "endLineNumber" : 115,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final AtomicReference<ServerResolver.Server> expectedServer=new AtomicReference<>(new ServerResolver.Server(\"localhost\",0));\n  final ServerResolver resolver=new ServerResolver(){\n    @Override public Observable<Server> resolve(){\n      return Observable.just(expectedServer.get());\n    }\n    @Override public void close(){\n    }\n  }\n;\n  ResolverBasedTransportClient transportClient=new TcpRegistrationClient(resolver,Codec.Json,clientMetrics().getRegistrationServerConnectionMetrics());\n  try {\n    transportClient.connect().toBlocking().toFuture().get(30,TimeUnit.SECONDS);\n    fail(\"Connection to server should have failed\");\n  }\n catch (  Exception ex) {\n  }\n  expectedServer.set(new ServerResolver.Server(\"localhost\",server.getServerPort()));\n  MessageConnection connection=transportClient.connect().toBlocking().toFuture().get(30,TimeUnit.SECONDS);\n  assertNotNull(\"Connection not established\",connection);\n  Observable<Void> ackObservable=connection.submitWithAck(new Register(SampleInstanceInfo.DiscoveryServer.build()));\n  assertTrue(\"Acknowledgment not received in time\",RxBlocking.isCompleted(30,TimeUnit.SECONDS,ackObservable));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 167,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1573,
        "startLineNumber" : 79,
        "startColumnNumber" : 4,
        "endLineNumber" : 115,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRibbonLoadBalancer() throws Exception {\n  final AtomicReference<ServerResolver.Server> expectedServer=new AtomicReference<>(new ServerResolver.Server(\"localhost\",0));\n  final ServerResolver resolver=new ServerResolver(){\n    @Override public Observable<Server> resolve(){\n      return Observable.just(expectedServer.get());\n    }\n    @Override public void close(){\n    }\n  }\n;\n  ResolverBasedTransportClient transportClient=new TcpRegistrationClient(resolver,Codec.Json,clientMetrics().getRegistrationServerConnectionMetrics());\n  try {\n    transportClient.connect().toBlocking().toFuture().get(30,TimeUnit.SECONDS);\n    fail(\"Connection to server should have failed\");\n  }\n catch (  Exception ex) {\n  }\n  expectedServer.set(new ServerResolver.Server(\"localhost\",server.getServerPort()));\n  MessageConnection connection=transportClient.connect().toBlocking().toFuture().get(30,TimeUnit.SECONDS);\n  assertNotNull(\"Connection not established\",connection);\n  Observable<Void> ackObservable=connection.submitWithAck(new Register(SampleInstanceInfo.DiscoveryServer.build()));\n  assertTrue(\"Acknowledgment not received in time\",RxBlocking.isCompleted(30,TimeUnit.SECONDS,ackObservable));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 175,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 127,
        "startLineNumber" : 82,
        "startColumnNumber" : 8,
        "endLineNumber" : 82,
        "endColumnNumber" : 135
      },
      "nodeContext" : "final AtomicReference<ServerResolver.Server> expectedServer=new AtomicReference<>(new ServerResolver.Server(\"localhost\",0));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 22,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "com.netflix.eureka2.client.resolver.ServerResolver"
  }, {
    "nodeContext" : "ServerResolver",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 82,
      "startColumnNumber" : 96,
      "endLineNumber" : 82,
      "endColumnNumber" : 110
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 82,
        "startColumnNumber" : 96,
        "endLineNumber" : 82,
        "endColumnNumber" : 117
      },
      "nodeContext" : "ServerResolver.Server",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,type]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 82,
        "startColumnNumber" : 96,
        "endLineNumber" : 82,
        "endColumnNumber" : 117
      },
      "nodeContext" : "ServerResolver.Server",
      "nodeType" : "SimpleType",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 82,
        "startColumnNumber" : 92,
        "endLineNumber" : 82,
        "endColumnNumber" : 133
      },
      "nodeContext" : "new ServerResolver.Server(\"localhost\",0)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 82,
        "startColumnNumber" : 70,
        "endLineNumber" : 82,
        "endColumnNumber" : 134
      },
      "nodeContext" : "new AtomicReference<>(new ServerResolver.Server(\"localhost\",0))",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 82,
        "startColumnNumber" : 53,
        "endLineNumber" : 82,
        "endColumnNumber" : 134
      },
      "nodeContext" : "expectedServer=new AtomicReference<>(new ServerResolver.Server(\"localhost\",0))",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 127,
        "startLineNumber" : 82,
        "startColumnNumber" : 8,
        "endLineNumber" : 82,
        "endColumnNumber" : 135
      },
      "nodeContext" : "final AtomicReference<ServerResolver.Server> expectedServer=new AtomicReference<>(new ServerResolver.Server(\"localhost\",0));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1509,
        "startLineNumber" : 80,
        "startColumnNumber" : 58,
        "endLineNumber" : 115,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final AtomicReference<ServerResolver.Server> expectedServer=new AtomicReference<>(new ServerResolver.Server(\"localhost\",0));\n  final ServerResolver resolver=new ServerResolver(){\n    @Override public Observable<Server> resolve(){\n      return Observable.just(expectedServer.get());\n    }\n    @Override public void close(){\n    }\n  }\n;\n  ResolverBasedTransportClient transportClient=new TcpRegistrationClient(resolver,Codec.Json,clientMetrics().getRegistrationServerConnectionMetrics());\n  try {\n    transportClient.connect().toBlocking().toFuture().get(30,TimeUnit.SECONDS);\n    fail(\"Connection to server should have failed\");\n  }\n catch (  Exception ex) {\n  }\n  expectedServer.set(new ServerResolver.Server(\"localhost\",server.getServerPort()));\n  MessageConnection connection=transportClient.connect().toBlocking().toFuture().get(30,TimeUnit.SECONDS);\n  assertNotNull(\"Connection not established\",connection);\n  Observable<Void> ackObservable=connection.submitWithAck(new Register(SampleInstanceInfo.DiscoveryServer.build()));\n  assertTrue(\"Acknowledgment not received in time\",RxBlocking.isCompleted(30,TimeUnit.SECONDS,ackObservable));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 167,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1573,
        "startLineNumber" : 79,
        "startColumnNumber" : 4,
        "endLineNumber" : 115,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRibbonLoadBalancer() throws Exception {\n  final AtomicReference<ServerResolver.Server> expectedServer=new AtomicReference<>(new ServerResolver.Server(\"localhost\",0));\n  final ServerResolver resolver=new ServerResolver(){\n    @Override public Observable<Server> resolve(){\n      return Observable.just(expectedServer.get());\n    }\n    @Override public void close(){\n    }\n  }\n;\n  ResolverBasedTransportClient transportClient=new TcpRegistrationClient(resolver,Codec.Json,clientMetrics().getRegistrationServerConnectionMetrics());\n  try {\n    transportClient.connect().toBlocking().toFuture().get(30,TimeUnit.SECONDS);\n    fail(\"Connection to server should have failed\");\n  }\n catch (  Exception ex) {\n  }\n  expectedServer.set(new ServerResolver.Server(\"localhost\",server.getServerPort()));\n  MessageConnection connection=transportClient.connect().toBlocking().toFuture().get(30,TimeUnit.SECONDS);\n  assertNotNull(\"Connection not established\",connection);\n  Observable<Void> ackObservable=connection.submitWithAck(new Register(SampleInstanceInfo.DiscoveryServer.build()));\n  assertTrue(\"Acknowledgment not received in time\",RxBlocking.isCompleted(30,TimeUnit.SECONDS,ackObservable));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 175,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 127,
        "startLineNumber" : 82,
        "startColumnNumber" : 8,
        "endLineNumber" : 82,
        "endColumnNumber" : 135
      },
      "nodeContext" : "final AtomicReference<ServerResolver.Server> expectedServer=new AtomicReference<>(new ServerResolver.Server(\"localhost\",0));\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 22,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "com.netflix.eureka2.client.resolver.ServerResolver"
  }, {
    "nodeContext" : "ServerResolver",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 108,
      "startColumnNumber" : 31,
      "endLineNumber" : 108,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 108,
        "startColumnNumber" : 31,
        "endLineNumber" : 108,
        "endColumnNumber" : 52
      },
      "nodeContext" : "ServerResolver.Server",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,type]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 108,
        "startColumnNumber" : 31,
        "endLineNumber" : 108,
        "endColumnNumber" : 52
      },
      "nodeContext" : "ServerResolver.Server",
      "nodeType" : "SimpleType",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 62,
        "startLineNumber" : 108,
        "startColumnNumber" : 27,
        "endLineNumber" : 108,
        "endColumnNumber" : 89
      },
      "nodeContext" : "new ServerResolver.Server(\"localhost\",server.getServerPort())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 108,
        "startColumnNumber" : 8,
        "endLineNumber" : 108,
        "endColumnNumber" : 90
      },
      "nodeContext" : "expectedServer.set(new ServerResolver.Server(\"localhost\",server.getServerPort()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 108,
        "startColumnNumber" : 8,
        "endLineNumber" : 108,
        "endColumnNumber" : 91
      },
      "nodeContext" : "expectedServer.set(new ServerResolver.Server(\"localhost\",server.getServerPort()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1509,
        "startLineNumber" : 80,
        "startColumnNumber" : 58,
        "endLineNumber" : 115,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final AtomicReference<ServerResolver.Server> expectedServer=new AtomicReference<>(new ServerResolver.Server(\"localhost\",0));\n  final ServerResolver resolver=new ServerResolver(){\n    @Override public Observable<Server> resolve(){\n      return Observable.just(expectedServer.get());\n    }\n    @Override public void close(){\n    }\n  }\n;\n  ResolverBasedTransportClient transportClient=new TcpRegistrationClient(resolver,Codec.Json,clientMetrics().getRegistrationServerConnectionMetrics());\n  try {\n    transportClient.connect().toBlocking().toFuture().get(30,TimeUnit.SECONDS);\n    fail(\"Connection to server should have failed\");\n  }\n catch (  Exception ex) {\n  }\n  expectedServer.set(new ServerResolver.Server(\"localhost\",server.getServerPort()));\n  MessageConnection connection=transportClient.connect().toBlocking().toFuture().get(30,TimeUnit.SECONDS);\n  assertNotNull(\"Connection not established\",connection);\n  Observable<Void> ackObservable=connection.submitWithAck(new Register(SampleInstanceInfo.DiscoveryServer.build()));\n  assertTrue(\"Acknowledgment not received in time\",RxBlocking.isCompleted(30,TimeUnit.SECONDS,ackObservable));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 167,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1573,
        "startLineNumber" : 79,
        "startColumnNumber" : 4,
        "endLineNumber" : 115,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRibbonLoadBalancer() throws Exception {\n  final AtomicReference<ServerResolver.Server> expectedServer=new AtomicReference<>(new ServerResolver.Server(\"localhost\",0));\n  final ServerResolver resolver=new ServerResolver(){\n    @Override public Observable<Server> resolve(){\n      return Observable.just(expectedServer.get());\n    }\n    @Override public void close(){\n    }\n  }\n;\n  ResolverBasedTransportClient transportClient=new TcpRegistrationClient(resolver,Codec.Json,clientMetrics().getRegistrationServerConnectionMetrics());\n  try {\n    transportClient.connect().toBlocking().toFuture().get(30,TimeUnit.SECONDS);\n    fail(\"Connection to server should have failed\");\n  }\n catch (  Exception ex) {\n  }\n  expectedServer.set(new ServerResolver.Server(\"localhost\",server.getServerPort()));\n  MessageConnection connection=transportClient.connect().toBlocking().toFuture().get(30,TimeUnit.SECONDS);\n  assertNotNull(\"Connection not established\",connection);\n  Observable<Void> ackObservable=connection.submitWithAck(new Register(SampleInstanceInfo.DiscoveryServer.build()));\n  assertTrue(\"Acknowledgment not received in time\",RxBlocking.isCompleted(30,TimeUnit.SECONDS,ackObservable));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 175,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 83,
        "startLineNumber" : 108,
        "startColumnNumber" : 8,
        "endLineNumber" : 108,
        "endColumnNumber" : 91
      },
      "nodeContext" : "expectedServer.set(new ServerResolver.Server(\"localhost\",server.getServerPort()));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "com.netflix.eureka2.client.resolver.ServerResolver"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 82,
    "startColumnNumber" : 30,
    "endLineNumber" : 82,
    "endColumnNumber" : 44
  }, {
    "charLength" : 14,
    "startLineNumber" : 82,
    "startColumnNumber" : 96,
    "endLineNumber" : 82,
    "endColumnNumber" : 110
  }, {
    "charLength" : 14,
    "startLineNumber" : 108,
    "startColumnNumber" : 31,
    "endLineNumber" : 108,
    "endColumnNumber" : 45
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 5
  } ]
}