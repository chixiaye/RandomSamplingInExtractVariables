{
  "id" : 261,
  "expression" : "target",
  "projectName" : "alibaba@fastjson",
  "commitID" : "d3797da65a3d9f804c9e275c25395c59e31f097d",
  "filePath" : "/src/test/java/com/alibaba/json/bvt/bug/Bug_for_cduym.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "target",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 31,
      "startColumnNumber" : 26,
      "endLineNumber" : 31,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 31,
        "startColumnNumber" : 26,
        "endLineNumber" : 31,
        "endColumnNumber" : 39
      },
      "nodeContext" : "target.get(0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 31,
        "startColumnNumber" : 8,
        "endLineNumber" : 31,
        "endColumnNumber" : 55
      },
      "nodeContext" : "Assert.assertSame(target.get(0),target.get(1))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 31,
        "startColumnNumber" : 8,
        "endLineNumber" : 31,
        "endColumnNumber" : 56
      },
      "nodeContext" : "Assert.assertSame(target.get(0),target.get(1));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 436,
        "startLineNumber" : 15,
        "startColumnNumber" : 24,
        "endLineNumber" : 32,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<A> as=new ArrayList<A>();\n  A a1=new A();\n  a1.setA(1000);\n  a1.setB(2000l);\n  a1.setC(\"xxx\");\n  as.add(a1);\n  as.add(a1);\n  String text=JSON.toJSONString(as,SerializerFeature.WriteClassName);\n  System.out.println(text);\n  List<?> target=(List)JSON.parseObject(text,Object.class);\n  Assert.assertSame(target.get(0),target.get(1));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 96,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 490,
        "startLineNumber" : 14,
        "startColumnNumber" : 4,
        "endLineNumber" : 32,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressWarnings(\"rawtypes\") public void test0(){\n  List<A> as=new ArrayList<A>();\n  A a1=new A();\n  a1.setA(1000);\n  a1.setB(2000l);\n  a1.setC(\"xxx\");\n  as.add(a1);\n  as.add(a1);\n  String text=JSON.toJSONString(as,SerializerFeature.WriteClassName);\n  System.out.println(text);\n  List<?> target=(List)JSON.parseObject(text,Object.class);\n  Assert.assertSame(target.get(0),target.get(1));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 103,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 31,
        "startColumnNumber" : 8,
        "endLineNumber" : 31,
        "endColumnNumber" : 56
      },
      "nodeContext" : "Assert.assertSame(target.get(0),target.get(1));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.List<>"
  }, {
    "nodeContext" : "target",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 31,
      "startColumnNumber" : 41,
      "endLineNumber" : 31,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 13,
        "startLineNumber" : 31,
        "startColumnNumber" : 41,
        "endLineNumber" : 31,
        "endColumnNumber" : 54
      },
      "nodeContext" : "target.get(1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 31,
        "startColumnNumber" : 8,
        "endLineNumber" : 31,
        "endColumnNumber" : 55
      },
      "nodeContext" : "Assert.assertSame(target.get(0),target.get(1))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 31,
        "startColumnNumber" : 8,
        "endLineNumber" : 31,
        "endColumnNumber" : 56
      },
      "nodeContext" : "Assert.assertSame(target.get(0),target.get(1));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 436,
        "startLineNumber" : 15,
        "startColumnNumber" : 24,
        "endLineNumber" : 32,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<A> as=new ArrayList<A>();\n  A a1=new A();\n  a1.setA(1000);\n  a1.setB(2000l);\n  a1.setC(\"xxx\");\n  as.add(a1);\n  as.add(a1);\n  String text=JSON.toJSONString(as,SerializerFeature.WriteClassName);\n  System.out.println(text);\n  List<?> target=(List)JSON.parseObject(text,Object.class);\n  Assert.assertSame(target.get(0),target.get(1));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 96,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 490,
        "startLineNumber" : 14,
        "startColumnNumber" : 4,
        "endLineNumber" : 32,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressWarnings(\"rawtypes\") public void test0(){\n  List<A> as=new ArrayList<A>();\n  A a1=new A();\n  a1.setA(1000);\n  a1.setB(2000l);\n  a1.setC(\"xxx\");\n  as.add(a1);\n  as.add(a1);\n  String text=JSON.toJSONString(as,SerializerFeature.WriteClassName);\n  System.out.println(text);\n  List<?> target=(List)JSON.parseObject(text,Object.class);\n  Assert.assertSame(target.get(0),target.get(1));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 103,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 31,
        "startColumnNumber" : 8,
        "endLineNumber" : 31,
        "endColumnNumber" : 56
      },
      "nodeContext" : "Assert.assertSame(target.get(0),target.get(1));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.List<>"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 31,
    "startColumnNumber" : 26,
    "endLineNumber" : 31,
    "endColumnNumber" : 32
  }, {
    "charLength" : 6,
    "startLineNumber" : 31,
    "startColumnNumber" : 41,
    "endLineNumber" : 31,
    "endColumnNumber" : 47
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  } ]
}