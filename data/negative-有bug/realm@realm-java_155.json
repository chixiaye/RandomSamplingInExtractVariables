{
  "id" : 155,
  "expression" : "GET_FIELD_TYPE",
  "projectName" : "realm@realm-java",
  "commitID" : "9da3b229a46407f73e2003fb40857cadf062086b",
  "filePath" : "/realm/realm-library/src/androidTest/java/io/realm/DynamicRealmObjectTests.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "GET_FIELD_TYPE",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 194,
      "startColumnNumber" : 17,
      "endLineNumber" : 194,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 194,
        "startColumnNumber" : 12,
        "endLineNumber" : 194,
        "endColumnNumber" : 32
      },
      "nodeContext" : "case GET_FIELD_TYPE:",
      "nodeType" : "SwitchCase",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 4741,
        "startLineNumber" : 151,
        "startColumnNumber" : 8,
        "endLineNumber" : 202,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (method) {\ncase GET_BOOLEAN:  obj.getBoolean(AllJavaTypes.FIELD_BOOLEAN);\nbreak;\ncase GET_BYTE:obj.getByte(AllJavaTypes.FIELD_BYTE);\nbreak;\ncase GET_SHORT:obj.getShort(AllJavaTypes.FIELD_SHORT);\nbreak;\ncase GET_INT:obj.getInt(AllJavaTypes.FIELD_INT);\nbreak;\ncase GET_LONG:obj.getLong(AllJavaTypes.FIELD_LONG);\nbreak;\ncase GET_FLOAT:obj.getFloat(AllJavaTypes.FIELD_FLOAT);\nbreak;\ncase GET_DOUBLE:obj.getDouble(AllJavaTypes.FIELD_DOUBLE);\nbreak;\ncase GET_BLOB:obj.getBlob(AllJavaTypes.FIELD_BINARY);\nbreak;\ncase GET_STRING:obj.getString(AllJavaTypes.FIELD_STRING);\nbreak;\ncase GET_DATE:obj.getDate(AllJavaTypes.FIELD_DATE);\nbreak;\ncase GET_DECIMAL128:obj.getDate(AllJavaTypes.FIELD_DECIMAL128);\nbreak;\ncase GET_OBJECT_ID:obj.getDate(AllJavaTypes.FIELD_OBJECT_ID);\nbreak;\ncase GET_UUID:obj.getDate(AllJavaTypes.FIELD_UUID);\nbreak;\ncase GET_OBJECT:obj.getObject(AllJavaTypes.FIELD_OBJECT);\nbreak;\ncase GET_LIST:obj.getList(AllJavaTypes.FIELD_LIST);\nbreak;\ncase GET_PRIMITIVE_LIST:obj.getList(AllJavaTypes.FIELD_STRING_LIST,String.class);\nbreak;\ncase GET:obj.get(AllJavaTypes.FIELD_LONG);\nbreak;\ncase SET_BOOLEAN:obj.setBoolean(AllJavaTypes.FIELD_BOOLEAN,true);\nbreak;\ncase SET_BYTE:obj.setByte(AllJavaTypes.FIELD_BYTE,(byte)1);\nbreak;\ncase SET_SHORT:obj.setShort(AllJavaTypes.FIELD_SHORT,(short)1);\nbreak;\ncase SET_INT:obj.setInt(AllJavaTypes.FIELD_INT,1);\nbreak;\ncase SET_LONG:obj.setLong(AllJavaTypes.FIELD_LONG,1L);\nbreak;\ncase SET_FLOAT:obj.setFloat(AllJavaTypes.FIELD_FLOAT,1F);\nbreak;\ncase SET_DOUBLE:obj.setDouble(AllJavaTypes.FIELD_DOUBLE,1D);\nbreak;\ncase SET_BLOB:obj.setBlob(AllJavaTypes.FIELD_BINARY,new byte[]{1,2,3});\nbreak;\ncase SET_STRING:obj.setString(AllJavaTypes.FIELD_STRING,\"12345\");\nbreak;\ncase SET_DATE:obj.setDate(AllJavaTypes.FIELD_DATE,new Date(1L));\nbreak;\ncase SET_DECIMAL128:obj.setDecimal128(AllJavaTypes.FIELD_DECIMAL128,new Decimal128(BigDecimal.ONE));\nbreak;\ncase SET_OBJECT_ID:obj.setObjectId(AllJavaTypes.FIELD_OBJECT_ID,new ObjectId(TestHelper.generateObjectIdHexString(5)));\nbreak;\ncase SET_UUID:obj.setUUID(AllJavaTypes.FIELD_UUID,UUID.randomUUID());\nbreak;\ncase SET_OBJECT:obj.setObject(AllJavaTypes.FIELD_OBJECT,obj);\nbreak;\ncase SET_LIST:obj.setList(AllJavaTypes.FIELD_LIST,new RealmList<>(obj));\nbreak;\ncase SET_PRIMITIVE_LIST:obj.setList(AllJavaTypes.FIELD_STRING_LIST,new RealmList<String>(\"foo\"));\nbreak;\ncase SET:obj.set(AllJavaTypes.FIELD_LONG,1L);\nbreak;\ncase IS_NULL:obj.isNull(AllJavaTypes.FIELD_OBJECT);\nbreak;\ncase SET_NULL:obj.setNull(AllJavaTypes.FIELD_OBJECT);\nbreak;\ncase HAS_FIELD:obj.hasField(AllJavaTypes.FIELD_OBJECT);\nbreak;\ncase GET_FIELD_NAMES:obj.getFieldNames();\nbreak;\ncase GET_TYPE:obj.getType();\nbreak;\ncase GET_FIELD_TYPE:obj.getFieldType(AllJavaTypes.FIELD_OBJECT);\nbreak;\ncase HASH_CODE:obj.hashCode();\nbreak;\ncase EQUALS:obj.equals(obj);\nbreak;\ncase TO_STRING:obj.toString();\nbreak;\ndefault:throw new AssertionError(\"missing case for \" + method);\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 483,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4757,
        "startLineNumber" : 150,
        "startColumnNumber" : 103,
        "endLineNumber" : 203,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\nswitch (method) {\ncase GET_BOOLEAN:    obj.getBoolean(AllJavaTypes.FIELD_BOOLEAN);\n  break;\ncase GET_BYTE:obj.getByte(AllJavaTypes.FIELD_BYTE);\nbreak;\ncase GET_SHORT:obj.getShort(AllJavaTypes.FIELD_SHORT);\nbreak;\ncase GET_INT:obj.getInt(AllJavaTypes.FIELD_INT);\nbreak;\ncase GET_LONG:obj.getLong(AllJavaTypes.FIELD_LONG);\nbreak;\ncase GET_FLOAT:obj.getFloat(AllJavaTypes.FIELD_FLOAT);\nbreak;\ncase GET_DOUBLE:obj.getDouble(AllJavaTypes.FIELD_DOUBLE);\nbreak;\ncase GET_BLOB:obj.getBlob(AllJavaTypes.FIELD_BINARY);\nbreak;\ncase GET_STRING:obj.getString(AllJavaTypes.FIELD_STRING);\nbreak;\ncase GET_DATE:obj.getDate(AllJavaTypes.FIELD_DATE);\nbreak;\ncase GET_DECIMAL128:obj.getDate(AllJavaTypes.FIELD_DECIMAL128);\nbreak;\ncase GET_OBJECT_ID:obj.getDate(AllJavaTypes.FIELD_OBJECT_ID);\nbreak;\ncase GET_UUID:obj.getDate(AllJavaTypes.FIELD_UUID);\nbreak;\ncase GET_OBJECT:obj.getObject(AllJavaTypes.FIELD_OBJECT);\nbreak;\ncase GET_LIST:obj.getList(AllJavaTypes.FIELD_LIST);\nbreak;\ncase GET_PRIMITIVE_LIST:obj.getList(AllJavaTypes.FIELD_STRING_LIST,String.class);\nbreak;\ncase GET:obj.get(AllJavaTypes.FIELD_LONG);\nbreak;\ncase SET_BOOLEAN:obj.setBoolean(AllJavaTypes.FIELD_BOOLEAN,true);\nbreak;\ncase SET_BYTE:obj.setByte(AllJavaTypes.FIELD_BYTE,(byte)1);\nbreak;\ncase SET_SHORT:obj.setShort(AllJavaTypes.FIELD_SHORT,(short)1);\nbreak;\ncase SET_INT:obj.setInt(AllJavaTypes.FIELD_INT,1);\nbreak;\ncase SET_LONG:obj.setLong(AllJavaTypes.FIELD_LONG,1L);\nbreak;\ncase SET_FLOAT:obj.setFloat(AllJavaTypes.FIELD_FLOAT,1F);\nbreak;\ncase SET_DOUBLE:obj.setDouble(AllJavaTypes.FIELD_DOUBLE,1D);\nbreak;\ncase SET_BLOB:obj.setBlob(AllJavaTypes.FIELD_BINARY,new byte[]{1,2,3});\nbreak;\ncase SET_STRING:obj.setString(AllJavaTypes.FIELD_STRING,\"12345\");\nbreak;\ncase SET_DATE:obj.setDate(AllJavaTypes.FIELD_DATE,new Date(1L));\nbreak;\ncase SET_DECIMAL128:obj.setDecimal128(AllJavaTypes.FIELD_DECIMAL128,new Decimal128(BigDecimal.ONE));\nbreak;\ncase SET_OBJECT_ID:obj.setObjectId(AllJavaTypes.FIELD_OBJECT_ID,new ObjectId(TestHelper.generateObjectIdHexString(5)));\nbreak;\ncase SET_UUID:obj.setUUID(AllJavaTypes.FIELD_UUID,UUID.randomUUID());\nbreak;\ncase SET_OBJECT:obj.setObject(AllJavaTypes.FIELD_OBJECT,obj);\nbreak;\ncase SET_LIST:obj.setList(AllJavaTypes.FIELD_LIST,new RealmList<>(obj));\nbreak;\ncase SET_PRIMITIVE_LIST:obj.setList(AllJavaTypes.FIELD_STRING_LIST,new RealmList<String>(\"foo\"));\nbreak;\ncase SET:obj.set(AllJavaTypes.FIELD_LONG,1L);\nbreak;\ncase IS_NULL:obj.isNull(AllJavaTypes.FIELD_OBJECT);\nbreak;\ncase SET_NULL:obj.setNull(AllJavaTypes.FIELD_OBJECT);\nbreak;\ncase HAS_FIELD:obj.hasField(AllJavaTypes.FIELD_OBJECT);\nbreak;\ncase GET_FIELD_NAMES:obj.getFieldNames();\nbreak;\ncase GET_TYPE:obj.getType();\nbreak;\ncase GET_FIELD_TYPE:obj.getFieldType(AllJavaTypes.FIELD_OBJECT);\nbreak;\ncase HASH_CODE:obj.hashCode();\nbreak;\ncase EQUALS:obj.equals(obj);\nbreak;\ncase TO_STRING:obj.toString();\nbreak;\ndefault:throw new AssertionError(\"missing case for \" + method);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 484,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4943,
        "startLineNumber" : 149,
        "startColumnNumber" : 4,
        "endLineNumber" : 203,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressWarnings({\"ResultOfMethodCallIgnored\",\"EqualsWithItself\",\"SelfEquals\"}) private static void callThreadConfinedMethod(DynamicRealmObject obj,ThreadConfinedMethods method){\nswitch (method) {\ncase GET_BOOLEAN:    obj.getBoolean(AllJavaTypes.FIELD_BOOLEAN);\n  break;\ncase GET_BYTE:obj.getByte(AllJavaTypes.FIELD_BYTE);\nbreak;\ncase GET_SHORT:obj.getShort(AllJavaTypes.FIELD_SHORT);\nbreak;\ncase GET_INT:obj.getInt(AllJavaTypes.FIELD_INT);\nbreak;\ncase GET_LONG:obj.getLong(AllJavaTypes.FIELD_LONG);\nbreak;\ncase GET_FLOAT:obj.getFloat(AllJavaTypes.FIELD_FLOAT);\nbreak;\ncase GET_DOUBLE:obj.getDouble(AllJavaTypes.FIELD_DOUBLE);\nbreak;\ncase GET_BLOB:obj.getBlob(AllJavaTypes.FIELD_BINARY);\nbreak;\ncase GET_STRING:obj.getString(AllJavaTypes.FIELD_STRING);\nbreak;\ncase GET_DATE:obj.getDate(AllJavaTypes.FIELD_DATE);\nbreak;\ncase GET_DECIMAL128:obj.getDate(AllJavaTypes.FIELD_DECIMAL128);\nbreak;\ncase GET_OBJECT_ID:obj.getDate(AllJavaTypes.FIELD_OBJECT_ID);\nbreak;\ncase GET_UUID:obj.getDate(AllJavaTypes.FIELD_UUID);\nbreak;\ncase GET_OBJECT:obj.getObject(AllJavaTypes.FIELD_OBJECT);\nbreak;\ncase GET_LIST:obj.getList(AllJavaTypes.FIELD_LIST);\nbreak;\ncase GET_PRIMITIVE_LIST:obj.getList(AllJavaTypes.FIELD_STRING_LIST,String.class);\nbreak;\ncase GET:obj.get(AllJavaTypes.FIELD_LONG);\nbreak;\ncase SET_BOOLEAN:obj.setBoolean(AllJavaTypes.FIELD_BOOLEAN,true);\nbreak;\ncase SET_BYTE:obj.setByte(AllJavaTypes.FIELD_BYTE,(byte)1);\nbreak;\ncase SET_SHORT:obj.setShort(AllJavaTypes.FIELD_SHORT,(short)1);\nbreak;\ncase SET_INT:obj.setInt(AllJavaTypes.FIELD_INT,1);\nbreak;\ncase SET_LONG:obj.setLong(AllJavaTypes.FIELD_LONG,1L);\nbreak;\ncase SET_FLOAT:obj.setFloat(AllJavaTypes.FIELD_FLOAT,1F);\nbreak;\ncase SET_DOUBLE:obj.setDouble(AllJavaTypes.FIELD_DOUBLE,1D);\nbreak;\ncase SET_BLOB:obj.setBlob(AllJavaTypes.FIELD_BINARY,new byte[]{1,2,3});\nbreak;\ncase SET_STRING:obj.setString(AllJavaTypes.FIELD_STRING,\"12345\");\nbreak;\ncase SET_DATE:obj.setDate(AllJavaTypes.FIELD_DATE,new Date(1L));\nbreak;\ncase SET_DECIMAL128:obj.setDecimal128(AllJavaTypes.FIELD_DECIMAL128,new Decimal128(BigDecimal.ONE));\nbreak;\ncase SET_OBJECT_ID:obj.setObjectId(AllJavaTypes.FIELD_OBJECT_ID,new ObjectId(TestHelper.generateObjectIdHexString(5)));\nbreak;\ncase SET_UUID:obj.setUUID(AllJavaTypes.FIELD_UUID,UUID.randomUUID());\nbreak;\ncase SET_OBJECT:obj.setObject(AllJavaTypes.FIELD_OBJECT,obj);\nbreak;\ncase SET_LIST:obj.setList(AllJavaTypes.FIELD_LIST,new RealmList<>(obj));\nbreak;\ncase SET_PRIMITIVE_LIST:obj.setList(AllJavaTypes.FIELD_STRING_LIST,new RealmList<String>(\"foo\"));\nbreak;\ncase SET:obj.set(AllJavaTypes.FIELD_LONG,1L);\nbreak;\ncase IS_NULL:obj.isNull(AllJavaTypes.FIELD_OBJECT);\nbreak;\ncase SET_NULL:obj.setNull(AllJavaTypes.FIELD_OBJECT);\nbreak;\ncase HAS_FIELD:obj.hasField(AllJavaTypes.FIELD_OBJECT);\nbreak;\ncase GET_FIELD_NAMES:obj.getFieldNames();\nbreak;\ncase GET_TYPE:obj.getType();\nbreak;\ncase GET_FIELD_TYPE:obj.getFieldType(AllJavaTypes.FIELD_OBJECT);\nbreak;\ncase HASH_CODE:obj.hashCode();\nbreak;\ncase EQUALS:obj.equals(obj);\nbreak;\ncase TO_STRING:obj.toString();\nbreak;\ndefault:throw new AssertionError(\"missing case for \" + method);\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 503,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 194,
        "startColumnNumber" : 12,
        "endLineNumber" : 194,
        "endColumnNumber" : 32
      },
      "nodeContext" : "case GET_FIELD_TYPE:",
      "nodeType" : "SwitchCase",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 3,
    "type" : "io.realm.DynamicRealmObjectTests.ThreadConfinedMethods"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 194,
    "startColumnNumber" : 17,
    "endLineNumber" : 194,
    "endColumnNumber" : 31
  } ],
  "layoutRelationDataList" : [ ]
}