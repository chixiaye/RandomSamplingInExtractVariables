{
  "id" : 16,
  "expression" : "Collections",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-table/flink-table-common/src/main/java/org/apache/flink/table/connector/format/EncodingFormat.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Collections",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 59,
      "startColumnNumber" : 15,
      "endLineNumber" : 59,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 59,
        "startColumnNumber" : 15,
        "endLineNumber" : 59,
        "endColumnNumber" : 37
      },
      "nodeContext" : "Collections.emptyMap()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 59,
        "endColumnNumber" : 38
      },
      "nodeContext" : "return Collections.emptyMap();\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 46,
        "startLineNumber" : 58,
        "startColumnNumber" : 57,
        "endLineNumber" : 60,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  return Collections.emptyMap();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 802,
        "startLineNumber" : 44,
        "startColumnNumber" : 4,
        "endLineNumber" : 60,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Returns the map of metadata keys and their corresponding data types that can be consumed by this format for writing. By default, this method returns an empty map. <p>Metadata columns add additional columns to the table's schema. An encoding format is responsible to accept requested metadata columns at the end of consumed rows and persist them. <p>See  {@link SupportsWritingMetadata} for more information.<p>Note: This method is only used if the outer  {@link DynamicTableSink} implements {@link SupportsWritingMetadata} and calls this method in {@link SupportsWritingMetadata#listWritableMetadata()}.\n */\ndefault Map<String,DataType> listWritableMetadata(){\n  return Collections.emptyMap();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 16,
      "astHeight" : 6
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 59,
        "endColumnNumber" : 38
      },
      "nodeContext" : "return Collections.emptyMap();\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.Collections"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 59,
    "startColumnNumber" : 15,
    "endLineNumber" : 59,
    "endColumnNumber" : 26
  } ],
  "layoutRelationDataList" : [ ]
}