{
  "id" : 428,
  "expression" : "\"env.missingWithDefault\"",
  "projectName" : "keycloak@keycloak",
  "commitID" : "aacae9b9acb0fbedc49d4f88c9fbd7aa11922dce",
  "filePath" : "/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/theme/DefaultThemeManagerTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"env.missingWithDefault\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 24,
      "startLineNumber" : 60,
      "startColumnNumber" : 86,
      "endLineNumber" : 60,
      "endColumnNumber" : 110
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 60,
        "startColumnNumber" : 52,
        "endLineNumber" : 60,
        "endColumnNumber" : 111
      },
      "nodeContext" : "theme.getProperties().getProperty(\"env.missingWithDefault\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 96,
        "startLineNumber" : 60,
        "startColumnNumber" : 16,
        "endLineNumber" : 60,
        "endColumnNumber" : 112
      },
      "nodeContext" : "Assert.assertEquals(\"defaultValue\",theme.getProperties().getProperty(\"env.missingWithDefault\"))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 60,
        "startColumnNumber" : 16,
        "endLineNumber" : 60,
        "endColumnNumber" : 113
      },
      "nodeContext" : "Assert.assertEquals(\"defaultValue\",theme.getProperties().getProperty(\"env.missingWithDefault\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 1082,
        "startLineNumber" : 56,
        "startColumnNumber" : 16,
        "endLineNumber" : 70,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  Theme theme=session.theme().getTheme(THEME_NAME,Theme.Type.LOGIN);\n  Assert.assertEquals(\"getTheme(...) returns default theme when no matching theme found, but we need \" + THEME_NAME + \" theme deployed.\",THEME_NAME,theme.getName());\n  Assert.assertEquals(\"${env.MISSING_ENVIRONMENT_VARIABLE}\",theme.getProperties().getProperty(\"env.missing\"));\n  Assert.assertEquals(\"defaultValue\",theme.getProperties().getProperty(\"env.missingWithDefault\"));\n  if (System.getenv().containsKey(\"HOMEPATH\")) {\n    Assert.assertEquals(System.getenv().get(\"HOMEPATH\"),theme.getProperties().getProperty(\"env.windowsHome\"));\n  }\n else   if (System.getenv().containsKey(\"HOME\")) {\n    Assert.assertEquals(System.getenv().get(\"HOME\"),theme.getProperties().getProperty(\"env.unixHome\"));\n  }\n else {\n    Assert.fail(\"No default env variable found, can't verify\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 105,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1169,
        "startLineNumber" : 56,
        "startColumnNumber" : 12,
        "endLineNumber" : 72,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  Theme theme=session.theme().getTheme(THEME_NAME,Theme.Type.LOGIN);\n  Assert.assertEquals(\"getTheme(...) returns default theme when no matching theme found, but we need \" + THEME_NAME + \" theme deployed.\",THEME_NAME,theme.getName());\n  Assert.assertEquals(\"${env.MISSING_ENVIRONMENT_VARIABLE}\",theme.getProperties().getProperty(\"env.missing\"));\n  Assert.assertEquals(\"defaultValue\",theme.getProperties().getProperty(\"env.missingWithDefault\"));\n  if (System.getenv().containsKey(\"HOMEPATH\")) {\n    Assert.assertEquals(System.getenv().get(\"HOMEPATH\"),theme.getProperties().getProperty(\"env.windowsHome\"));\n  }\n else   if (System.getenv().containsKey(\"HOME\")) {\n    Assert.assertEquals(System.getenv().get(\"HOME\"),theme.getProperties().getProperty(\"env.unixHome\"));\n  }\n else {\n    Assert.fail(\"No default env variable found, can't verify\");\n  }\n}\n catch (IOException e) {\n  Assert.fail(e.getMessage());\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 119,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 1193,
        "startLineNumber" : 55,
        "startColumnNumber" : 46,
        "endLineNumber" : 73,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  try {\n    Theme theme=session.theme().getTheme(THEME_NAME,Theme.Type.LOGIN);\n    Assert.assertEquals(\"getTheme(...) returns default theme when no matching theme found, but we need \" + THEME_NAME + \" theme deployed.\",THEME_NAME,theme.getName());\n    Assert.assertEquals(\"${env.MISSING_ENVIRONMENT_VARIABLE}\",theme.getProperties().getProperty(\"env.missing\"));\n    Assert.assertEquals(\"defaultValue\",theme.getProperties().getProperty(\"env.missingWithDefault\"));\n    if (System.getenv().containsKey(\"HOMEPATH\")) {\n      Assert.assertEquals(System.getenv().get(\"HOMEPATH\"),theme.getProperties().getProperty(\"env.windowsHome\"));\n    }\n else     if (System.getenv().containsKey(\"HOME\")) {\n      Assert.assertEquals(System.getenv().get(\"HOME\"),theme.getProperties().getProperty(\"env.unixHome\"));\n    }\n else {\n      Assert.fail(\"No default env variable found, can't verify\");\n    }\n  }\n catch (  IOException e) {\n    Assert.fail(e.getMessage());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 120,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 1204,
        "startLineNumber" : 55,
        "startColumnNumber" : 35,
        "endLineNumber" : 73,
        "endColumnNumber" : 9
      },
      "nodeContext" : "session -> {\n  try {\n    Theme theme=session.theme().getTheme(THEME_NAME,Theme.Type.LOGIN);\n    Assert.assertEquals(\"getTheme(...) returns default theme when no matching theme found, but we need \" + THEME_NAME + \" theme deployed.\",THEME_NAME,theme.getName());\n    Assert.assertEquals(\"${env.MISSING_ENVIRONMENT_VARIABLE}\",theme.getProperties().getProperty(\"env.missing\"));\n    Assert.assertEquals(\"defaultValue\",theme.getProperties().getProperty(\"env.missingWithDefault\"));\n    if (System.getenv().containsKey(\"HOMEPATH\")) {\n      Assert.assertEquals(System.getenv().get(\"HOMEPATH\"),theme.getProperties().getProperty(\"env.windowsHome\"));\n    }\n else     if (System.getenv().containsKey(\"HOME\")) {\n      Assert.assertEquals(System.getenv().get(\"HOME\"),theme.getProperties().getProperty(\"env.unixHome\"));\n    }\n else {\n      Assert.fail(\"No default env variable found, can't verify\");\n    }\n  }\n catch (  IOException e) {\n    Assert.fail(e.getMessage());\n  }\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 123,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 97,
        "startLineNumber" : 60,
        "startColumnNumber" : 16,
        "endLineNumber" : 60,
        "endColumnNumber" : 113
      },
      "nodeContext" : "Assert.assertEquals(\"defaultValue\",theme.getProperties().getProperty(\"env.missingWithDefault\"));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 24,
    "startLineNumber" : 60,
    "startColumnNumber" : 86,
    "endLineNumber" : 60,
    "endColumnNumber" : 110
  } ],
  "layoutRelationDataList" : [ ]
}