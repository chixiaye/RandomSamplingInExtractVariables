{
  "id" : 317,
  "expression" : "error.get()",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/transport-blockhound-tests/src/test/java/io/netty/util/internal/NettyBlockHoundIntegrationTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "error.get()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 320,
      "startColumnNumber" : 23,
      "endLineNumber" : 320,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 320,
        "startColumnNumber" : 12,
        "endLineNumber" : 320,
        "endColumnNumber" : 35
      },
      "nodeContext" : "assertNull(error.get())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 320,
        "startColumnNumber" : 12,
        "endLineNumber" : 320,
        "endColumnNumber" : 36
      },
      "nodeContext" : "assertNull(error.get());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2044,
        "startLineNumber" : 279,
        "startColumnNumber" : 12,
        "endLineNumber" : 321,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  sc=new ServerBootstrap().group(group).channel(NioServerSocketChannel.class).childHandler(new ChannelHandler(){\n  }\n).bind(new InetSocketAddress(0)).get();\n  cc=new Bootstrap().group(group).channel(NioSocketChannel.class).handler(new ChannelInitializer<Channel>(){\n    @Override protected void initChannel(    Channel ch){\n      ch.pipeline().addLast(sslHandler);\n      ch.pipeline().addLast(new ChannelHandler(){\n        @Override public void channelActive(        ChannelHandlerContext ctx){\n          activeLatch.countDown();\n        }\n        @Override public void userEventTriggered(        ChannelHandlerContext ctx,        Object evt){\n          if (evt instanceof SslHandshakeCompletionEvent && ((SslHandshakeCompletionEvent)evt).cause() != null) {\n            Throwable cause=((SslHandshakeCompletionEvent)evt).cause();\n            cause.printStackTrace();\n            error.set(cause);\n          }\n          ctx.fireUserEventTriggered(evt);\n        }\n      }\n);\n    }\n  }\n).connect(sc.localAddress()).addListener(future -> future.get().writeAndFlush(wrappedBuffer(new byte[]{1,2,3,4}))).get();\n  assertTrue(activeLatch.await(5,TimeUnit.SECONDS));\n  assertNull(error.get());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 196,
      "astHeight" : 26
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2359,
        "startLineNumber" : 279,
        "startColumnNumber" : 8,
        "endLineNumber" : 330,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  sc=new ServerBootstrap().group(group).channel(NioServerSocketChannel.class).childHandler(new ChannelHandler(){\n  }\n).bind(new InetSocketAddress(0)).get();\n  cc=new Bootstrap().group(group).channel(NioSocketChannel.class).handler(new ChannelInitializer<Channel>(){\n    @Override protected void initChannel(    Channel ch){\n      ch.pipeline().addLast(sslHandler);\n      ch.pipeline().addLast(new ChannelHandler(){\n        @Override public void channelActive(        ChannelHandlerContext ctx){\n          activeLatch.countDown();\n        }\n        @Override public void userEventTriggered(        ChannelHandlerContext ctx,        Object evt){\n          if (evt instanceof SslHandshakeCompletionEvent && ((SslHandshakeCompletionEvent)evt).cause() != null) {\n            Throwable cause=((SslHandshakeCompletionEvent)evt).cause();\n            cause.printStackTrace();\n            error.set(cause);\n          }\n          ctx.fireUserEventTriggered(evt);\n        }\n      }\n);\n    }\n  }\n).connect(sc.localAddress()).addListener(future -> future.get().writeAndFlush(wrappedBuffer(new byte[]{1,2,3,4}))).get();\n  assertTrue(activeLatch.await(5,TimeUnit.SECONDS));\n  assertNull(error.get());\n}\n  finally {\n  if (cc != null) {\n    cc.close().syncUninterruptibly();\n  }\n  if (sc != null) {\n    sc.close().syncUninterruptibly();\n  }\n  group.shutdownGracefully();\n  ReferenceCountUtil.release(sslClientCtx);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 229,
      "astHeight" : 27
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3051,
        "startLineNumber" : 266,
        "startColumnNumber" : 73,
        "endLineNumber" : 331,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final SslContext sslClientCtx=SslContextBuilder.forClient().trustManager(InsecureTrustManagerFactory.INSTANCE).sslProvider(SslProvider.JDK).build();\n  final SslHandler sslHandler=sslClientCtx.newHandler(UnpooledByteBufAllocator.DEFAULT);\n  final EventLoopGroup group=new MultithreadEventLoopGroup(NioHandler.newFactory());\n  final CountDownLatch activeLatch=new CountDownLatch(1);\n  final AtomicReference<Throwable> error=new AtomicReference<>();\n  Channel sc=null;\n  Channel cc=null;\n  try {\n    sc=new ServerBootstrap().group(group).channel(NioServerSocketChannel.class).childHandler(new ChannelHandler(){\n    }\n).bind(new InetSocketAddress(0)).get();\n    cc=new Bootstrap().group(group).channel(NioSocketChannel.class).handler(new ChannelInitializer<Channel>(){\n      @Override protected void initChannel(      Channel ch){\n        ch.pipeline().addLast(sslHandler);\n        ch.pipeline().addLast(new ChannelHandler(){\n          @Override public void channelActive(          ChannelHandlerContext ctx){\n            activeLatch.countDown();\n          }\n          @Override public void userEventTriggered(          ChannelHandlerContext ctx,          Object evt){\n            if (evt instanceof SslHandshakeCompletionEvent && ((SslHandshakeCompletionEvent)evt).cause() != null) {\n              Throwable cause=((SslHandshakeCompletionEvent)evt).cause();\n              cause.printStackTrace();\n              error.set(cause);\n            }\n            ctx.fireUserEventTriggered(evt);\n          }\n        }\n);\n      }\n    }\n).connect(sc.localAddress()).addListener(future -> future.get().writeAndFlush(wrappedBuffer(new byte[]{1,2,3,4}))).get();\n    assertTrue(activeLatch.await(5,TimeUnit.SECONDS));\n    assertNull(error.get());\n  }\n  finally {\n    if (cc != null) {\n      cc.close().syncUninterruptibly();\n    }\n    if (sc != null) {\n      sc.close().syncUninterruptibly();\n    }\n    group.shutdownGracefully();\n    ReferenceCountUtil.release(sslClientCtx);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 310,
      "astHeight" : 28
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3131,
        "startLineNumber" : 265,
        "startColumnNumber" : 4,
        "endLineNumber" : 331,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSslHandlerWrapAllowsBlockingCalls() throws Exception {\n  final SslContext sslClientCtx=SslContextBuilder.forClient().trustManager(InsecureTrustManagerFactory.INSTANCE).sslProvider(SslProvider.JDK).build();\n  final SslHandler sslHandler=sslClientCtx.newHandler(UnpooledByteBufAllocator.DEFAULT);\n  final EventLoopGroup group=new MultithreadEventLoopGroup(NioHandler.newFactory());\n  final CountDownLatch activeLatch=new CountDownLatch(1);\n  final AtomicReference<Throwable> error=new AtomicReference<>();\n  Channel sc=null;\n  Channel cc=null;\n  try {\n    sc=new ServerBootstrap().group(group).channel(NioServerSocketChannel.class).childHandler(new ChannelHandler(){\n    }\n).bind(new InetSocketAddress(0)).get();\n    cc=new Bootstrap().group(group).channel(NioSocketChannel.class).handler(new ChannelInitializer<Channel>(){\n      @Override protected void initChannel(      Channel ch){\n        ch.pipeline().addLast(sslHandler);\n        ch.pipeline().addLast(new ChannelHandler(){\n          @Override public void channelActive(          ChannelHandlerContext ctx){\n            activeLatch.countDown();\n          }\n          @Override public void userEventTriggered(          ChannelHandlerContext ctx,          Object evt){\n            if (evt instanceof SslHandshakeCompletionEvent && ((SslHandshakeCompletionEvent)evt).cause() != null) {\n              Throwable cause=((SslHandshakeCompletionEvent)evt).cause();\n              cause.printStackTrace();\n              error.set(cause);\n            }\n            ctx.fireUserEventTriggered(evt);\n          }\n        }\n);\n      }\n    }\n).connect(sc.localAddress()).addListener(future -> future.get().writeAndFlush(wrappedBuffer(new byte[]{1,2,3,4}))).get();\n    assertTrue(activeLatch.await(5,TimeUnit.SECONDS));\n    assertNull(error.get());\n  }\n  finally {\n    if (cc != null) {\n      cc.close().syncUninterruptibly();\n    }\n    if (sc != null) {\n      sc.close().syncUninterruptibly();\n    }\n    group.shutdownGracefully();\n    ReferenceCountUtil.release(sslClientCtx);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 318,
      "astHeight" : 29
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 320,
        "startColumnNumber" : 12,
        "endLineNumber" : 320,
        "endColumnNumber" : 36
      },
      "nodeContext" : "assertNull(error.get());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.Throwable"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 320,
    "startColumnNumber" : 23,
    "endLineNumber" : 320,
    "endColumnNumber" : 34
  } ],
  "layoutRelationDataList" : [ ]
}