{
  "id" : 428,
  "expression" : "new GregorianCalendar()",
  "projectName" : "jenkinsci@jenkins",
  "commitID" : "c44fa7f4cf769257844d562353a579a198ea517a",
  "filePath" : "/core/src/main/java/hudson/tasks/LogRotator.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new GregorianCalendar()",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 171,
      "startColumnNumber" : 27,
      "endLineNumber" : 171,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 171,
        "startColumnNumber" : 21,
        "endLineNumber" : 171,
        "endColumnNumber" : 50
      },
      "nodeContext" : "cal=new GregorianCalendar()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 171,
        "startColumnNumber" : 12,
        "endLineNumber" : 171,
        "endColumnNumber" : 51
      },
      "nodeContext" : "Calendar cal=new GregorianCalendar();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 588,
        "startLineNumber" : 170,
        "startColumnNumber" : 27,
        "endLineNumber" : 185,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Calendar cal=new GregorianCalendar();\n  cal.add(Calendar.DAY_OF_YEAR,-daysToKeep);\n  Run r=job.getFirstBuild();\n  while (r != null) {\n    if (tooNew(r,cal)) {\n      break;\n    }\n    if (!shouldKeepRun(r,lsb,lstb)) {\n      LOGGER.log(FINE,\"{0} is to be removed\",r);\n      try {\n        r.delete();\n      }\n catch (      IOException ex) {\n        exceptionMap.put(r,ex);\n      }\n    }\n    r=r.getNextBuild();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 77,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 607,
        "startLineNumber" : 170,
        "startColumnNumber" : 8,
        "endLineNumber" : 185,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (daysToKeep != -1) {\n  Calendar cal=new GregorianCalendar();\n  cal.add(Calendar.DAY_OF_YEAR,-daysToKeep);\n  Run r=job.getFirstBuild();\n  while (r != null) {\n    if (tooNew(r,cal)) {\n      break;\n    }\n    if (!shouldKeepRun(r,lsb,lstb)) {\n      LOGGER.log(FINE,\"{0} is to be removed\",r);\n      try {\n        r.delete();\n      }\n catch (      IOException ex) {\n        exceptionMap.put(r,ex);\n      }\n    }\n    r=r.getNextBuild();\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 82,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3883,
        "startLineNumber" : 143,
        "startColumnNumber" : 79,
        "endLineNumber" : 224,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  HashMultimap<Run<?,?>,IOException> exceptionMap=HashMultimap.create();\n  LOGGER.log(FINE,\"Running the log rotation for {0} with numToKeep={1} daysToKeep={2} artifactNumToKeep={3} artifactDaysToKeep={4}\",new Object[]{job,numToKeep,daysToKeep,artifactNumToKeep,artifactDaysToKeep});\n  Run lsb=job.getLastSuccessfulBuild();\n  Run lstb=job.getLastStableBuild();\n  if (numToKeep != -1) {\n    RunList<? extends Run<?,?>> builds=job.getBuilds();\n    for (    Run r : builds.subList(Math.min(builds.size(),numToKeep),builds.size())) {\n      if (shouldKeepRun(r,lsb,lstb)) {\n        continue;\n      }\n      LOGGER.log(FINE,\"{0} is to be removed\",r);\n      try {\n        r.delete();\n      }\n catch (      IOException ex) {\n        exceptionMap.put(r,ex);\n      }\n    }\n  }\n  if (daysToKeep != -1) {\n    Calendar cal=new GregorianCalendar();\n    cal.add(Calendar.DAY_OF_YEAR,-daysToKeep);\n    Run r=job.getFirstBuild();\n    while (r != null) {\n      if (tooNew(r,cal)) {\n        break;\n      }\n      if (!shouldKeepRun(r,lsb,lstb)) {\n        LOGGER.log(FINE,\"{0} is to be removed\",r);\n        try {\n          r.delete();\n        }\n catch (        IOException ex) {\n          exceptionMap.put(r,ex);\n        }\n      }\n      r=r.getNextBuild();\n    }\n  }\n  if (artifactNumToKeep != null && artifactNumToKeep != -1) {\n    RunList<? extends Run<?,?>> builds=job.getBuilds();\n    for (    Run r : builds.subList(Math.min(builds.size(),artifactNumToKeep),builds.size())) {\n      if (shouldKeepRun(r,lsb,lstb)) {\n        continue;\n      }\n      LOGGER.log(FINE,\"{0} is to be purged of artifacts\",r);\n      try {\n        r.deleteArtifacts();\n      }\n catch (      IOException ex) {\n        exceptionMap.put(r,ex);\n      }\n    }\n  }\n  if (artifactDaysToKeep != null && artifactDaysToKeep != -1) {\n    Calendar cal=new GregorianCalendar();\n    cal.add(Calendar.DAY_OF_YEAR,-artifactDaysToKeep);\n    Run r=job.getFirstBuild();\n    while (r != null) {\n      if (tooNew(r,cal)) {\n        break;\n      }\n      if (!shouldKeepRun(r,lsb,lstb)) {\n        LOGGER.log(FINE,\"{0} is to be purged of artifacts\",r);\n        try {\n          r.deleteArtifacts();\n        }\n catch (        IOException ex) {\n          exceptionMap.put(r,ex);\n        }\n      }\n      r=r.getNextBuild();\n    }\n  }\n  if (!exceptionMap.isEmpty()) {\n    String msg=String.format(\"Failed to rotate logs for [%s]\",Util.join(exceptionMap.keySet(),\", \"));\n    throw new CompositeIOException(msg,new ArrayList<>(exceptionMap.values()));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 402,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3993,
        "startLineNumber" : 142,
        "startColumnNumber" : 4,
        "endLineNumber" : 224,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressWarnings(\"rawtypes\") public void perform(Job<?,?> job) throws IOException, InterruptedException {\n  HashMultimap<Run<?,?>,IOException> exceptionMap=HashMultimap.create();\n  LOGGER.log(FINE,\"Running the log rotation for {0} with numToKeep={1} daysToKeep={2} artifactNumToKeep={3} artifactDaysToKeep={4}\",new Object[]{job,numToKeep,daysToKeep,artifactNumToKeep,artifactDaysToKeep});\n  Run lsb=job.getLastSuccessfulBuild();\n  Run lstb=job.getLastStableBuild();\n  if (numToKeep != -1) {\n    RunList<? extends Run<?,?>> builds=job.getBuilds();\n    for (    Run r : builds.subList(Math.min(builds.size(),numToKeep),builds.size())) {\n      if (shouldKeepRun(r,lsb,lstb)) {\n        continue;\n      }\n      LOGGER.log(FINE,\"{0} is to be removed\",r);\n      try {\n        r.delete();\n      }\n catch (      IOException ex) {\n        exceptionMap.put(r,ex);\n      }\n    }\n  }\n  if (daysToKeep != -1) {\n    Calendar cal=new GregorianCalendar();\n    cal.add(Calendar.DAY_OF_YEAR,-daysToKeep);\n    Run r=job.getFirstBuild();\n    while (r != null) {\n      if (tooNew(r,cal)) {\n        break;\n      }\n      if (!shouldKeepRun(r,lsb,lstb)) {\n        LOGGER.log(FINE,\"{0} is to be removed\",r);\n        try {\n          r.delete();\n        }\n catch (        IOException ex) {\n          exceptionMap.put(r,ex);\n        }\n      }\n      r=r.getNextBuild();\n    }\n  }\n  if (artifactNumToKeep != null && artifactNumToKeep != -1) {\n    RunList<? extends Run<?,?>> builds=job.getBuilds();\n    for (    Run r : builds.subList(Math.min(builds.size(),artifactNumToKeep),builds.size())) {\n      if (shouldKeepRun(r,lsb,lstb)) {\n        continue;\n      }\n      LOGGER.log(FINE,\"{0} is to be purged of artifacts\",r);\n      try {\n        r.deleteArtifacts();\n      }\n catch (      IOException ex) {\n        exceptionMap.put(r,ex);\n      }\n    }\n  }\n  if (artifactDaysToKeep != null && artifactDaysToKeep != -1) {\n    Calendar cal=new GregorianCalendar();\n    cal.add(Calendar.DAY_OF_YEAR,-artifactDaysToKeep);\n    Run r=job.getFirstBuild();\n    while (r != null) {\n      if (tooNew(r,cal)) {\n        break;\n      }\n      if (!shouldKeepRun(r,lsb,lstb)) {\n        LOGGER.log(FINE,\"{0} is to be purged of artifacts\",r);\n        try {\n          r.deleteArtifacts();\n        }\n catch (        IOException ex) {\n          exceptionMap.put(r,ex);\n        }\n      }\n      r=r.getNextBuild();\n    }\n  }\n  if (!exceptionMap.isEmpty()) {\n    String msg=String.format(\"Failed to rotate logs for [%s]\",Util.join(exceptionMap.keySet(),\", \"));\n    throw new CompositeIOException(msg,new ArrayList<>(exceptionMap.values()));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 420,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 171,
        "startColumnNumber" : 12,
        "endLineNumber" : 171,
        "endColumnNumber" : 51
      },
      "nodeContext" : "Calendar cal=new GregorianCalendar();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.GregorianCalendar"
  }, {
    "nodeContext" : "new GregorianCalendar()",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 200,
      "startColumnNumber" : 27,
      "endLineNumber" : 200,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 200,
        "startColumnNumber" : 21,
        "endLineNumber" : 200,
        "endColumnNumber" : 50
      },
      "nodeContext" : "cal=new GregorianCalendar()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 200,
        "startColumnNumber" : 12,
        "endLineNumber" : 200,
        "endColumnNumber" : 51
      },
      "nodeContext" : "Calendar cal=new GregorianCalendar();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 617,
        "startLineNumber" : 199,
        "startColumnNumber" : 63,
        "endLineNumber" : 214,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Calendar cal=new GregorianCalendar();\n  cal.add(Calendar.DAY_OF_YEAR,-artifactDaysToKeep);\n  Run r=job.getFirstBuild();\n  while (r != null) {\n    if (tooNew(r,cal)) {\n      break;\n    }\n    if (!shouldKeepRun(r,lsb,lstb)) {\n      LOGGER.log(FINE,\"{0} is to be purged of artifacts\",r);\n      try {\n        r.deleteArtifacts();\n      }\n catch (      IOException ex) {\n        exceptionMap.put(r,ex);\n      }\n    }\n    r=r.getNextBuild();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 77,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 672,
        "startLineNumber" : 199,
        "startColumnNumber" : 8,
        "endLineNumber" : 214,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (artifactDaysToKeep != null && artifactDaysToKeep != -1) {\n  Calendar cal=new GregorianCalendar();\n  cal.add(Calendar.DAY_OF_YEAR,-artifactDaysToKeep);\n  Run r=job.getFirstBuild();\n  while (r != null) {\n    if (tooNew(r,cal)) {\n      break;\n    }\n    if (!shouldKeepRun(r,lsb,lstb)) {\n      LOGGER.log(FINE,\"{0} is to be purged of artifacts\",r);\n      try {\n        r.deleteArtifacts();\n      }\n catch (      IOException ex) {\n        exceptionMap.put(r,ex);\n      }\n    }\n    r=r.getNextBuild();\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 86,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3883,
        "startLineNumber" : 143,
        "startColumnNumber" : 79,
        "endLineNumber" : 224,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  HashMultimap<Run<?,?>,IOException> exceptionMap=HashMultimap.create();\n  LOGGER.log(FINE,\"Running the log rotation for {0} with numToKeep={1} daysToKeep={2} artifactNumToKeep={3} artifactDaysToKeep={4}\",new Object[]{job,numToKeep,daysToKeep,artifactNumToKeep,artifactDaysToKeep});\n  Run lsb=job.getLastSuccessfulBuild();\n  Run lstb=job.getLastStableBuild();\n  if (numToKeep != -1) {\n    RunList<? extends Run<?,?>> builds=job.getBuilds();\n    for (    Run r : builds.subList(Math.min(builds.size(),numToKeep),builds.size())) {\n      if (shouldKeepRun(r,lsb,lstb)) {\n        continue;\n      }\n      LOGGER.log(FINE,\"{0} is to be removed\",r);\n      try {\n        r.delete();\n      }\n catch (      IOException ex) {\n        exceptionMap.put(r,ex);\n      }\n    }\n  }\n  if (daysToKeep != -1) {\n    Calendar cal=new GregorianCalendar();\n    cal.add(Calendar.DAY_OF_YEAR,-daysToKeep);\n    Run r=job.getFirstBuild();\n    while (r != null) {\n      if (tooNew(r,cal)) {\n        break;\n      }\n      if (!shouldKeepRun(r,lsb,lstb)) {\n        LOGGER.log(FINE,\"{0} is to be removed\",r);\n        try {\n          r.delete();\n        }\n catch (        IOException ex) {\n          exceptionMap.put(r,ex);\n        }\n      }\n      r=r.getNextBuild();\n    }\n  }\n  if (artifactNumToKeep != null && artifactNumToKeep != -1) {\n    RunList<? extends Run<?,?>> builds=job.getBuilds();\n    for (    Run r : builds.subList(Math.min(builds.size(),artifactNumToKeep),builds.size())) {\n      if (shouldKeepRun(r,lsb,lstb)) {\n        continue;\n      }\n      LOGGER.log(FINE,\"{0} is to be purged of artifacts\",r);\n      try {\n        r.deleteArtifacts();\n      }\n catch (      IOException ex) {\n        exceptionMap.put(r,ex);\n      }\n    }\n  }\n  if (artifactDaysToKeep != null && artifactDaysToKeep != -1) {\n    Calendar cal=new GregorianCalendar();\n    cal.add(Calendar.DAY_OF_YEAR,-artifactDaysToKeep);\n    Run r=job.getFirstBuild();\n    while (r != null) {\n      if (tooNew(r,cal)) {\n        break;\n      }\n      if (!shouldKeepRun(r,lsb,lstb)) {\n        LOGGER.log(FINE,\"{0} is to be purged of artifacts\",r);\n        try {\n          r.deleteArtifacts();\n        }\n catch (        IOException ex) {\n          exceptionMap.put(r,ex);\n        }\n      }\n      r=r.getNextBuild();\n    }\n  }\n  if (!exceptionMap.isEmpty()) {\n    String msg=String.format(\"Failed to rotate logs for [%s]\",Util.join(exceptionMap.keySet(),\", \"));\n    throw new CompositeIOException(msg,new ArrayList<>(exceptionMap.values()));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 402,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3993,
        "startLineNumber" : 142,
        "startColumnNumber" : 4,
        "endLineNumber" : 224,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@SuppressWarnings(\"rawtypes\") public void perform(Job<?,?> job) throws IOException, InterruptedException {\n  HashMultimap<Run<?,?>,IOException> exceptionMap=HashMultimap.create();\n  LOGGER.log(FINE,\"Running the log rotation for {0} with numToKeep={1} daysToKeep={2} artifactNumToKeep={3} artifactDaysToKeep={4}\",new Object[]{job,numToKeep,daysToKeep,artifactNumToKeep,artifactDaysToKeep});\n  Run lsb=job.getLastSuccessfulBuild();\n  Run lstb=job.getLastStableBuild();\n  if (numToKeep != -1) {\n    RunList<? extends Run<?,?>> builds=job.getBuilds();\n    for (    Run r : builds.subList(Math.min(builds.size(),numToKeep),builds.size())) {\n      if (shouldKeepRun(r,lsb,lstb)) {\n        continue;\n      }\n      LOGGER.log(FINE,\"{0} is to be removed\",r);\n      try {\n        r.delete();\n      }\n catch (      IOException ex) {\n        exceptionMap.put(r,ex);\n      }\n    }\n  }\n  if (daysToKeep != -1) {\n    Calendar cal=new GregorianCalendar();\n    cal.add(Calendar.DAY_OF_YEAR,-daysToKeep);\n    Run r=job.getFirstBuild();\n    while (r != null) {\n      if (tooNew(r,cal)) {\n        break;\n      }\n      if (!shouldKeepRun(r,lsb,lstb)) {\n        LOGGER.log(FINE,\"{0} is to be removed\",r);\n        try {\n          r.delete();\n        }\n catch (        IOException ex) {\n          exceptionMap.put(r,ex);\n        }\n      }\n      r=r.getNextBuild();\n    }\n  }\n  if (artifactNumToKeep != null && artifactNumToKeep != -1) {\n    RunList<? extends Run<?,?>> builds=job.getBuilds();\n    for (    Run r : builds.subList(Math.min(builds.size(),artifactNumToKeep),builds.size())) {\n      if (shouldKeepRun(r,lsb,lstb)) {\n        continue;\n      }\n      LOGGER.log(FINE,\"{0} is to be purged of artifacts\",r);\n      try {\n        r.deleteArtifacts();\n      }\n catch (      IOException ex) {\n        exceptionMap.put(r,ex);\n      }\n    }\n  }\n  if (artifactDaysToKeep != null && artifactDaysToKeep != -1) {\n    Calendar cal=new GregorianCalendar();\n    cal.add(Calendar.DAY_OF_YEAR,-artifactDaysToKeep);\n    Run r=job.getFirstBuild();\n    while (r != null) {\n      if (tooNew(r,cal)) {\n        break;\n      }\n      if (!shouldKeepRun(r,lsb,lstb)) {\n        LOGGER.log(FINE,\"{0} is to be purged of artifacts\",r);\n        try {\n          r.deleteArtifacts();\n        }\n catch (        IOException ex) {\n          exceptionMap.put(r,ex);\n        }\n      }\n      r=r.getNextBuild();\n    }\n  }\n  if (!exceptionMap.isEmpty()) {\n    String msg=String.format(\"Failed to rotate logs for [%s]\",Util.join(exceptionMap.keySet(),\", \"));\n    throw new CompositeIOException(msg,new ArrayList<>(exceptionMap.values()));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 420,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 200,
        "startColumnNumber" : 12,
        "endLineNumber" : 200,
        "endColumnNumber" : 51
      },
      "nodeContext" : "Calendar cal=new GregorianCalendar();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.GregorianCalendar"
  } ],
  "positionList" : [ {
    "charLength" : 23,
    "startLineNumber" : 171,
    "startColumnNumber" : 27,
    "endLineNumber" : 171,
    "endColumnNumber" : 50
  }, {
    "charLength" : 23,
    "startLineNumber" : 200,
    "startColumnNumber" : 27,
    "endLineNumber" : 200,
    "endColumnNumber" : 50
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}