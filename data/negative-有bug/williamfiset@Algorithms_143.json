{
  "id" : 143,
  "expression" : "queue.isEmpty()",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/main/java/com/williamfiset/algorithms/graphtheory/BreadthFirstSearchAdjacencyListIterative.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "queue.isEmpty()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 66,
      "startColumnNumber" : 12,
      "endLineNumber" : 66,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 66,
        "startColumnNumber" : 11,
        "endLineNumber" : 66,
        "endColumnNumber" : 27
      },
      "nodeContext" : "!queue.isEmpty()",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 476,
        "startLineNumber" : 66,
        "startColumnNumber" : 4,
        "endLineNumber" : 79,
        "endColumnNumber" : 5
      },
      "nodeContext" : "while (!queue.isEmpty()) {\n  int node=queue.poll();\n  List<Edge> edges=graph.get(node);\n  for (  Edge edge : edges) {\n    if (!visited[edge.to]) {\n      visited[edge.to]=true;\n      prev[edge.to]=node;\n      queue.offer(edge.to);\n    }\n  }\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 63,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 760,
        "startLineNumber" : 56,
        "startColumnNumber" : 30,
        "endLineNumber" : 80,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  prev=new Integer[n];\n  boolean[] visited=new boolean[n];\n  Deque<Integer> queue=new ArrayDeque<>(n);\n  queue.offer(start);\n  visited[start]=true;\n  while (!queue.isEmpty()) {\n    int node=queue.poll();\n    List<Edge> edges=graph.get(node);\n    for (    Edge edge : edges) {\n      if (!visited[edge.to]) {\n        visited[edge.to]=true;\n        prev[edge.to]=node;\n        queue.offer(edge.to);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 108,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 788,
        "startLineNumber" : 56,
        "startColumnNumber" : 2,
        "endLineNumber" : 80,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void bfs(int start){\n  prev=new Integer[n];\n  boolean[] visited=new boolean[n];\n  Deque<Integer> queue=new ArrayDeque<>(n);\n  queue.offer(start);\n  visited[start]=true;\n  while (!queue.isEmpty()) {\n    int node=queue.poll();\n    List<Edge> edges=graph.get(node);\n    for (    Edge edge : edges) {\n      if (!visited[edge.to]) {\n        visited[edge.to]=true;\n        prev[edge.to]=node;\n        queue.offer(edge.to);\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 115,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 66,
        "startColumnNumber" : 11,
        "endLineNumber" : 66,
        "endColumnNumber" : 27
      },
      "nodeContext" : "!queue.isEmpty()",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 66,
    "startColumnNumber" : 12,
    "endLineNumber" : 66,
    "endColumnNumber" : 27
  } ],
  "layoutRelationDataList" : [ ]
}