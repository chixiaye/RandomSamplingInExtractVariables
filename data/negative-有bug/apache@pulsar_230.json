{
  "id" : 230,
  "expression" : "1",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-broker/src/test/java/org/apache/pulsar/client/impl/ProduceWithMessageIdTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 85,
      "startColumnNumber" : 63,
      "endLineNumber" : 85,
      "endColumnNumber" : 64
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 2,
        "startLineNumber" : 85,
        "startColumnNumber" : 62,
        "endLineNumber" : 85,
        "endColumnNumber" : 64
      },
      "nodeContext" : "-1",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 85,
        "startColumnNumber" : 25,
        "endLineNumber" : 85,
        "endColumnNumber" : 65
      },
      "nodeContext" : "new MessageIdImpl(ledgerId,entryId,-1)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 85,
        "startColumnNumber" : 8,
        "endLineNumber" : 85,
        "endColumnNumber" : 66
      },
      "nodeContext" : "msg.setMessageId(new MessageIdImpl(ledgerId,entryId,-1))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 85,
        "startColumnNumber" : 8,
        "endLineNumber" : 85,
        "endColumnNumber" : 67
      },
      "nodeContext" : "msg.setMessageId(new MessageIdImpl(ledgerId,entryId,-1));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2266,
        "startLineNumber" : 60,
        "startColumnNumber" : 44,
        "endLineNumber" : 118,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  long ledgerId=123;\n  long entryId=456;\n  mockBrokerService.setHandleSend((ctx,send,headersAndPayload) -> {\n    Assert.assertTrue(send.hasMessageId());\n    log.info(\"receive messageId in ServerCnx, id={}\",send.getMessageId());\n    Assert.assertEquals(send.getMessageId().getLedgerId(),ledgerId);\n    Assert.assertEquals(send.getMessageId().getEntryId(),entryId);\n    ctx.writeAndFlush(Commands.newSendReceipt(send.getProducerId(),send.getSequenceId(),0,ledgerId,entryId));\n  }\n);\n  @Cleanup PulsarClientImpl client=(PulsarClientImpl)PulsarClient.builder().serviceUrl(mockBrokerService.getBrokerAddress()).build();\n  String topic=\"persistent://public/default/t1\";\n  ProducerImpl<byte[]> producer=(ProducerImpl<byte[]>)client.newProducer().topic(topic).enableBatching(false).create();\n  MessageMetadata metadata=new MessageMetadata();\n  ByteBuffer buffer=ByteBuffer.wrap(\"data\".getBytes(StandardCharsets.UTF_8));\n  MessageImpl<byte[]> msg=MessageImpl.create(metadata,buffer,Schema.BYTES,topic);\n  msg.setMessageId(new MessageIdImpl(ledgerId,entryId,-1));\n  AtomicBoolean result=new AtomicBoolean(false);\n  producer.sendAsync(msg,new SendCallback(){\n    @Override public void sendComplete(    Exception e){\n      log.info(\"sendComplete\",e);\n      result.set(e == null);\n    }\n    @Override public void addCallback(    MessageImpl<?> msg,    SendCallback scb){\n    }\n    @Override public SendCallback getNextSendCallback(){\n      return null;\n    }\n    @Override public MessageImpl<?> getNextMessage(){\n      return null;\n    }\n    @Override public CompletableFuture<MessageId> getFuture(){\n      return null;\n    }\n  }\n);\n  Awaitility.await().untilTrue(result);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 279,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2317,
        "startLineNumber" : 59,
        "startColumnNumber" : 4,
        "endLineNumber" : 118,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testSend() throws Exception {\n  long ledgerId=123;\n  long entryId=456;\n  mockBrokerService.setHandleSend((ctx,send,headersAndPayload) -> {\n    Assert.assertTrue(send.hasMessageId());\n    log.info(\"receive messageId in ServerCnx, id={}\",send.getMessageId());\n    Assert.assertEquals(send.getMessageId().getLedgerId(),ledgerId);\n    Assert.assertEquals(send.getMessageId().getEntryId(),entryId);\n    ctx.writeAndFlush(Commands.newSendReceipt(send.getProducerId(),send.getSequenceId(),0,ledgerId,entryId));\n  }\n);\n  @Cleanup PulsarClientImpl client=(PulsarClientImpl)PulsarClient.builder().serviceUrl(mockBrokerService.getBrokerAddress()).build();\n  String topic=\"persistent://public/default/t1\";\n  ProducerImpl<byte[]> producer=(ProducerImpl<byte[]>)client.newProducer().topic(topic).enableBatching(false).create();\n  MessageMetadata metadata=new MessageMetadata();\n  ByteBuffer buffer=ByteBuffer.wrap(\"data\".getBytes(StandardCharsets.UTF_8));\n  MessageImpl<byte[]> msg=MessageImpl.create(metadata,buffer,Schema.BYTES,topic);\n  msg.setMessageId(new MessageIdImpl(ledgerId,entryId,-1));\n  AtomicBoolean result=new AtomicBoolean(false);\n  producer.sendAsync(msg,new SendCallback(){\n    @Override public void sendComplete(    Exception e){\n      log.info(\"sendComplete\",e);\n      result.set(e == null);\n    }\n    @Override public void addCallback(    MessageImpl<?> msg,    SendCallback scb){\n    }\n    @Override public SendCallback getNextSendCallback(){\n      return null;\n    }\n    @Override public MessageImpl<?> getNextMessage(){\n      return null;\n    }\n    @Override public CompletableFuture<MessageId> getFuture(){\n      return null;\n    }\n  }\n);\n  Awaitility.await().untilTrue(result);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 287,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 85,
        "startColumnNumber" : 8,
        "endLineNumber" : 85,
        "endColumnNumber" : 67
      },
      "nodeContext" : "msg.setMessageId(new MessageIdImpl(ledgerId,entryId,-1));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 85,
    "startColumnNumber" : 63,
    "endLineNumber" : 85,
    "endColumnNumber" : 64
  } ],
  "layoutRelationDataList" : [ ]
}