{
  "id" : 53,
  "expression" : "multiShareArgs.getMentions()",
  "projectName" : "signalapp@Signal-Android",
  "commitID" : "7e91132e7ed62a58b5f347de252ab1eda3f43b90",
  "filePath" : "/app/src/main/java/org/thoughtcrime/securesms/sharing/MultiShareSender.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "multiShareArgs.getMentions()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 28,
      "startLineNumber" : 85,
      "startColumnNumber" : 79,
      "endLineNumber" : 85,
      "endColumnNumber" : 107
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 85,
        "startColumnNumber" : 39,
        "endLineNumber" : 85,
        "endColumnNumber" : 108
      },
      "nodeContext" : "getValidMentionsForRecipient(recipient,multiShareArgs.getMentions())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 86,
        "startLineNumber" : 85,
        "startColumnNumber" : 22,
        "endLineNumber" : 85,
        "endColumnNumber" : 108
      },
      "nodeContext" : "mentions=getValidMentionsForRecipient(recipient,multiShareArgs.getMentions())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 85,
        "startColumnNumber" : 6,
        "endLineNumber" : 85,
        "endColumnNumber" : 109
      },
      "nodeContext" : "List<Mention> mentions=getValidMentionsForRecipient(recipient,multiShareArgs.getMentions());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2738,
        "startLineNumber" : 82,
        "startColumnNumber" : 99,
        "endLineNumber" : 115,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Recipient recipient=Recipient.resolved(shareContactAndThread.getRecipientId());\n  List<Mention> mentions=getValidMentionsForRecipient(recipient,multiShareArgs.getMentions());\n  TransportOption transport=resolveTransportOption(context,recipient);\n  boolean forceSms=recipient.isForceSmsSelection() && transport.isSms();\n  int subscriptionId=transport.getSimSubscriptionId().or(-1);\n  long expiresIn=TimeUnit.SECONDS.toMillis(recipient.getExpiresInSeconds());\n  boolean needsSplit=!transport.isSms() && message != null && message.length() > transport.calculateCharacters(message).maxPrimaryMessageSize;\n  boolean isMediaMessage=!multiShareArgs.getMedia().isEmpty() || (multiShareArgs.getDataUri() != null && multiShareArgs.getDataUri() != Uri.EMPTY) || multiShareArgs.getStickerLocator() != null || multiShareArgs.getLinkPreview() != null || recipient.isGroup() || recipient.getEmail().isPresent() || !mentions.isEmpty() || needsSplit;\n  if ((recipient.isMmsGroup() || recipient.getEmail().isPresent()) && !isMmsEnabled) {\n    results.add(new MultiShareSendResult(shareContactAndThread,MultiShareSendResult.Type.MMS_NOT_ENABLED));\n  }\n else   if (isMediaMessage) {\n    sendMediaMessage(context,multiShareArgs,recipient,slideDeck,transport,shareContactAndThread.getThreadId(),forceSms,expiresIn,multiShareArgs.isViewOnce(),subscriptionId,mentions);\n    results.add(new MultiShareSendResult(shareContactAndThread,MultiShareSendResult.Type.SUCCESS));\n  }\n else {\n    sendTextMessage(context,multiShareArgs,recipient,shareContactAndThread.getThreadId(),forceSms,expiresIn,subscriptionId);\n    results.add(new MultiShareSendResult(shareContactAndThread,MultiShareSendResult.Type.SUCCESS));\n  }\n  ThreadUtil.sleep(5);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 238,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2833,
        "startLineNumber" : 82,
        "startColumnNumber" : 4,
        "endLineNumber" : 115,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (ShareContactAndThread shareContactAndThread : multiShareArgs.getShareContactAndThreads()) {\n  Recipient recipient=Recipient.resolved(shareContactAndThread.getRecipientId());\n  List<Mention> mentions=getValidMentionsForRecipient(recipient,multiShareArgs.getMentions());\n  TransportOption transport=resolveTransportOption(context,recipient);\n  boolean forceSms=recipient.isForceSmsSelection() && transport.isSms();\n  int subscriptionId=transport.getSimSubscriptionId().or(-1);\n  long expiresIn=TimeUnit.SECONDS.toMillis(recipient.getExpiresInSeconds());\n  boolean needsSplit=!transport.isSms() && message != null && message.length() > transport.calculateCharacters(message).maxPrimaryMessageSize;\n  boolean isMediaMessage=!multiShareArgs.getMedia().isEmpty() || (multiShareArgs.getDataUri() != null && multiShareArgs.getDataUri() != Uri.EMPTY) || multiShareArgs.getStickerLocator() != null || multiShareArgs.getLinkPreview() != null || recipient.isGroup() || recipient.getEmail().isPresent() || !mentions.isEmpty() || needsSplit;\n  if ((recipient.isMmsGroup() || recipient.getEmail().isPresent()) && !isMmsEnabled) {\n    results.add(new MultiShareSendResult(shareContactAndThread,MultiShareSendResult.Type.MMS_NOT_ENABLED));\n  }\n else   if (isMediaMessage) {\n    sendMediaMessage(context,multiShareArgs,recipient,slideDeck,transport,shareContactAndThread.getThreadId(),forceSms,expiresIn,multiShareArgs.isViewOnce(),subscriptionId,mentions);\n    results.add(new MultiShareSendResult(shareContactAndThread,MultiShareSendResult.Type.SUCCESS));\n  }\n else {\n    sendTextMessage(context,multiShareArgs,recipient,shareContactAndThread.getThreadId(),forceSms,expiresIn,subscriptionId);\n    results.add(new MultiShareSendResult(shareContactAndThread,MultiShareSendResult.Type.SUCCESS));\n  }\n  ThreadUtil.sleep(5);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 246,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3757,
        "startLineNumber" : 63,
        "startColumnNumber" : 96,
        "endLineNumber" : 118,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  List<MultiShareSendResult> results=new ArrayList<>(multiShareArgs.getShareContactAndThreads().size());\n  Context context=ApplicationDependencies.getApplication();\n  boolean isMmsEnabled=Util.isMmsCapable(context);\n  String message=multiShareArgs.getDraftText();\n  SlideDeck slideDeck;\n  try {\n    slideDeck=buildSlideDeck(context,multiShareArgs);\n  }\n catch (  SlideNotFoundException e) {\n    Log.w(TAG,\"Could not create slide for media message\");\n    for (    ShareContactAndThread shareContactAndThread : multiShareArgs.getShareContactAndThreads()) {\n      results.add(new MultiShareSendResult(shareContactAndThread,MultiShareSendResult.Type.GENERIC_ERROR));\n    }\n    return new MultiShareSendResultCollection(results);\n  }\n  for (  ShareContactAndThread shareContactAndThread : multiShareArgs.getShareContactAndThreads()) {\n    Recipient recipient=Recipient.resolved(shareContactAndThread.getRecipientId());\n    List<Mention> mentions=getValidMentionsForRecipient(recipient,multiShareArgs.getMentions());\n    TransportOption transport=resolveTransportOption(context,recipient);\n    boolean forceSms=recipient.isForceSmsSelection() && transport.isSms();\n    int subscriptionId=transport.getSimSubscriptionId().or(-1);\n    long expiresIn=TimeUnit.SECONDS.toMillis(recipient.getExpiresInSeconds());\n    boolean needsSplit=!transport.isSms() && message != null && message.length() > transport.calculateCharacters(message).maxPrimaryMessageSize;\n    boolean isMediaMessage=!multiShareArgs.getMedia().isEmpty() || (multiShareArgs.getDataUri() != null && multiShareArgs.getDataUri() != Uri.EMPTY) || multiShareArgs.getStickerLocator() != null || multiShareArgs.getLinkPreview() != null || recipient.isGroup() || recipient.getEmail().isPresent() || !mentions.isEmpty() || needsSplit;\n    if ((recipient.isMmsGroup() || recipient.getEmail().isPresent()) && !isMmsEnabled) {\n      results.add(new MultiShareSendResult(shareContactAndThread,MultiShareSendResult.Type.MMS_NOT_ENABLED));\n    }\n else     if (isMediaMessage) {\n      sendMediaMessage(context,multiShareArgs,recipient,slideDeck,transport,shareContactAndThread.getThreadId(),forceSms,expiresIn,multiShareArgs.isViewOnce(),subscriptionId,mentions);\n      results.add(new MultiShareSendResult(shareContactAndThread,MultiShareSendResult.Type.SUCCESS));\n    }\n else {\n      sendTextMessage(context,multiShareArgs,recipient,shareContactAndThread.getThreadId(),forceSms,expiresIn,subscriptionId);\n      results.add(new MultiShareSendResult(shareContactAndThread,MultiShareSendResult.Type.SUCCESS));\n    }\n    ThreadUtil.sleep(5);\n  }\n  return new MultiShareSendResultCollection(results);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 346,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3867,
        "startLineNumber" : 62,
        "startColumnNumber" : 2,
        "endLineNumber" : 118,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@WorkerThread public static MultiShareSendResultCollection sendSync(@NonNull MultiShareArgs multiShareArgs){\n  List<MultiShareSendResult> results=new ArrayList<>(multiShareArgs.getShareContactAndThreads().size());\n  Context context=ApplicationDependencies.getApplication();\n  boolean isMmsEnabled=Util.isMmsCapable(context);\n  String message=multiShareArgs.getDraftText();\n  SlideDeck slideDeck;\n  try {\n    slideDeck=buildSlideDeck(context,multiShareArgs);\n  }\n catch (  SlideNotFoundException e) {\n    Log.w(TAG,\"Could not create slide for media message\");\n    for (    ShareContactAndThread shareContactAndThread : multiShareArgs.getShareContactAndThreads()) {\n      results.add(new MultiShareSendResult(shareContactAndThread,MultiShareSendResult.Type.GENERIC_ERROR));\n    }\n    return new MultiShareSendResultCollection(results);\n  }\n  for (  ShareContactAndThread shareContactAndThread : multiShareArgs.getShareContactAndThreads()) {\n    Recipient recipient=Recipient.resolved(shareContactAndThread.getRecipientId());\n    List<Mention> mentions=getValidMentionsForRecipient(recipient,multiShareArgs.getMentions());\n    TransportOption transport=resolveTransportOption(context,recipient);\n    boolean forceSms=recipient.isForceSmsSelection() && transport.isSms();\n    int subscriptionId=transport.getSimSubscriptionId().or(-1);\n    long expiresIn=TimeUnit.SECONDS.toMillis(recipient.getExpiresInSeconds());\n    boolean needsSplit=!transport.isSms() && message != null && message.length() > transport.calculateCharacters(message).maxPrimaryMessageSize;\n    boolean isMediaMessage=!multiShareArgs.getMedia().isEmpty() || (multiShareArgs.getDataUri() != null && multiShareArgs.getDataUri() != Uri.EMPTY) || multiShareArgs.getStickerLocator() != null || multiShareArgs.getLinkPreview() != null || recipient.isGroup() || recipient.getEmail().isPresent() || !mentions.isEmpty() || needsSplit;\n    if ((recipient.isMmsGroup() || recipient.getEmail().isPresent()) && !isMmsEnabled) {\n      results.add(new MultiShareSendResult(shareContactAndThread,MultiShareSendResult.Type.MMS_NOT_ENABLED));\n    }\n else     if (isMediaMessage) {\n      sendMediaMessage(context,multiShareArgs,recipient,slideDeck,transport,shareContactAndThread.getThreadId(),forceSms,expiresIn,multiShareArgs.isViewOnce(),subscriptionId,mentions);\n      results.add(new MultiShareSendResult(shareContactAndThread,MultiShareSendResult.Type.SUCCESS));\n    }\n else {\n      sendTextMessage(context,multiShareArgs,recipient,shareContactAndThread.getThreadId(),forceSms,expiresIn,subscriptionId);\n      results.add(new MultiShareSendResult(shareContactAndThread,MultiShareSendResult.Type.SUCCESS));\n    }\n    ThreadUtil.sleep(5);\n  }\n  return new MultiShareSendResultCollection(results);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 360,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 85,
        "startColumnNumber" : 6,
        "endLineNumber" : 85,
        "endColumnNumber" : 109
      },
      "nodeContext" : "List<Mention> mentions=getValidMentionsForRecipient(recipient,multiShareArgs.getMentions());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "java.util.List<org.thoughtcrime.securesms.database.model.Mention>"
  } ],
  "positionList" : [ {
    "charLength" : 28,
    "startLineNumber" : 85,
    "startColumnNumber" : 79,
    "endLineNumber" : 85,
    "endColumnNumber" : 107
  } ],
  "layoutRelationDataList" : [ ]
}