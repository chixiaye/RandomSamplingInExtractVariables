{
  "id" : 100,
  "expression" : "\"onCreate\"",
  "projectName" : "androidannotations@androidannotations",
  "commitID" : "b60a7ff27cb1bcb0eac2710c15c4957c0d992e27",
  "filePath" : "/AndroidAnnotations/androidannotations/src/main/java/com/googlecode/androidannotations/processing/EActivityProcessor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"onCreate\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 110,
      "startColumnNumber" : 77,
      "endLineNumber" : 110,
      "endColumnNumber" : 87
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 110,
        "startColumnNumber" : 21,
        "endLineNumber" : 110,
        "endColumnNumber" : 88
      },
      "nodeContext" : "holder.eBean.method(onCreateVisibility,codeModel.VOID,\"onCreate\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 110,
        "startColumnNumber" : 10,
        "endLineNumber" : 110,
        "endColumnNumber" : 88
      },
      "nodeContext" : "onCreate=holder.eBean.method(onCreateVisibility,codeModel.VOID,\"onCreate\")",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 110,
        "startColumnNumber" : 2,
        "endLineNumber" : 110,
        "endColumnNumber" : 89
      },
      "nodeContext" : "JMethod onCreate=holder.eBean.method(onCreateVisibility,codeModel.VOID,\"onCreate\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6266,
        "startLineNumber" : 76,
        "startColumnNumber" : 108,
        "endLineNumber" : 247,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  EBeanHolder holder=activitiesHolder.create(element);\n  TypeElement typeElement=(TypeElement)element;\n  String annotatedActivityQualifiedName=typeElement.getQualifiedName().toString();\n  String subActivityQualifiedName=annotatedActivityQualifiedName + ModelConstants.GENERATION_SUFFIX;\n  int modifiers;\n  boolean isAbstract=element.getModifiers().contains(Modifier.ABSTRACT);\n  if (isAbstract) {\n    modifiers=JMod.PUBLIC | JMod.ABSTRACT;\n  }\n else {\n    modifiers=JMod.PUBLIC | JMod.FINAL;\n  }\n  holder.eBean=codeModel._class(modifiers,subActivityQualifiedName,ClassType.CLASS);\n  JClass annotatedActivity=codeModel.directClass(annotatedActivityQualifiedName);\n  holder.eBean._extends(annotatedActivity);\n  holder.contextRef=_this();\n  int onCreateVisibility;\n  if (isAbstract) {\n    onCreateVisibility=inheritedOnCreateVisibility(typeElement);\n  }\n else {\n    onCreateVisibility=PUBLIC;\n  }\n  JMethod onCreate=holder.eBean.method(onCreateVisibility,codeModel.VOID,\"onCreate\");\n  onCreate.annotate(Override.class);\n  JClass bundleClass=holder.refClass(\"android.os.Bundle\");\n  holder.init=holder.eBean.method(PRIVATE,codeModel.VOID,\"init_\");\n  holder.beforeCreateSavedInstanceStateParam=holder.init.param(bundleClass,\"savedInstanceState\");\n{\n    holder.initIfActivityBody=holder.init.body();\n    holder.initActivityRef=_this();\n  }\n  holder.afterSetContentView=holder.eBean.method(PRIVATE,codeModel.VOID,\"afterSetContentView_\");\n  JVar onCreateSavedInstanceState=onCreate.param(bundleClass,\"savedInstanceState\");\n  JBlock onCreateBody=onCreate.body();\n  onCreateBody.invoke(holder.init).arg(onCreateSavedInstanceState);\n  onCreateBody.invoke(JExpr._super(),onCreate).arg(onCreateSavedInstanceState);\n  EActivity layoutAnnotation=element.getAnnotation(EActivity.class);\n  int layoutIdValue=layoutAnnotation.value();\n  JFieldRef contentViewId;\n  if (layoutIdValue != Id.DEFAULT_VALUE) {\n    IRInnerClass rInnerClass=rClass.get(Res.LAYOUT);\n    contentViewId=rInnerClass.getIdStaticRef(layoutIdValue,holder);\n  }\n else {\n    contentViewId=null;\n  }\n  if (contentViewId != null) {\n    onCreateBody.invoke(\"setContentView\").arg(contentViewId);\n  }\n  JClass viewClass=holder.refClass(\"android.view.View\");\n  JClass layoutParamsClass=holder.refClass(\"android.view.ViewGroup.LayoutParams\");\n  setContentViewMethod(codeModel,holder,new JType[]{codeModel.INT},new String[]{\"layoutResID\"});\n  setContentViewMethod(codeModel,holder,new JType[]{viewClass,layoutParamsClass},new String[]{\"view\",\"params\"});\n  setContentViewMethod(codeModel,holder,new JType[]{viewClass},new String[]{\"view\"});\n  if (hasOnBackPressedMethod(typeElement)) {\n    JMethod onKeyDownMethod=holder.eBean.method(PUBLIC,codeModel.BOOLEAN,\"onKeyDown\");\n    onKeyDownMethod.annotate(Override.class);\n    JVar keyCodeParam=onKeyDownMethod.param(codeModel.INT,\"keyCode\");\n    JClass keyEventClass=holder.refClass(\"android.view.KeyEvent\");\n    JVar eventParam=onKeyDownMethod.param(keyEventClass,\"event\");\n    JClass versionHelperClass=codeModel.ref(SdkVersionHelper.class);\n    JInvocation sdkInt=versionHelperClass.staticInvoke(\"getSdkInt\");\n    JBlock onKeyDownBody=onKeyDownMethod.body();\n    onKeyDownBody._if(sdkInt.lt(JExpr.lit(5)).cand(keyCodeParam.eq(keyEventClass.staticRef(\"KEYCODE_BACK\"))).cand(eventParam.invoke(\"getRepeatCount\").eq(JExpr.lit(0))))._then().invoke(\"onBackPressed\");\n    onKeyDownBody._return(JExpr._super().invoke(onKeyDownMethod).arg(keyCodeParam).arg(eventParam));\n  }\n  List<? extends Element> enclosedElements=typeElement.getEnclosedElements();\n  List<VariableElement> activityFields=ElementFilter.fieldsIn(enclosedElements);\n  for (  VariableElement activityField : activityFields) {\n    TypeMirror sharedPreferencesHelperType=processingEnv.getElementUtils().getTypeElement(\"com.googlecode.androidannotations.api.sharedpreferences.SharedPreferencesHelper\").asType();\n    if (processingEnv.getTypeUtils().isSubtype(activityField.asType(),sharedPreferencesHelperType)) {\n    }\n  }\n  if (!isAbstract) {\n    JClass contextClass=holder.refClass(\"android.content.Context\");\n    JClass intentClass=holder.refClass(\"android.content.Intent\");\n{\n      holder.intentBuilderClass=holder.eBean._class(PUBLIC | STATIC,\"IntentBuilder_\");\n      JFieldVar contextField=holder.intentBuilderClass.field(PRIVATE,contextClass,\"context_\");\n      holder.intentField=holder.intentBuilderClass.field(PRIVATE | FINAL,intentClass,\"intent_\");\n{\n        JMethod constructor=holder.intentBuilderClass.constructor(JMod.PUBLIC);\n        JVar constructorContextParam=constructor.param(contextClass,\"context\");\n        JBlock constructorBody=constructor.body();\n        constructorBody.assign(contextField,constructorContextParam);\n        constructorBody.assign(holder.intentField,_new(intentClass).arg(constructorContextParam).arg(holder.eBean.dotclass()));\n      }\n{\n        JMethod method=holder.intentBuilderClass.method(PUBLIC,intentClass,\"get\");\n        method.body()._return(holder.intentField);\n      }\n{\n        JMethod method=holder.intentBuilderClass.method(PUBLIC,holder.intentBuilderClass,\"flags\");\n        JVar flagsParam=method.param(codeModel.INT,\"flags\");\n        JBlock body=method.body();\n        body.invoke(holder.intentField,\"setFlags\").arg(flagsParam);\n        body._return(_this());\n      }\n{\n        JMethod method=holder.intentBuilderClass.method(PUBLIC,codeModel.VOID,\"start\");\n        method.body().invoke(contextField,\"startActivity\").arg(holder.intentField);\n      }\n{\n        JMethod method=holder.eBean.method(STATIC | PUBLIC,holder.intentBuilderClass,\"intent\");\n        JVar contextParam=method.param(contextClass,\"context\");\n        method.body()._return(_new(holder.intentBuilderClass).arg(contextParam));\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 873,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6384,
        "startLineNumber" : 75,
        "startColumnNumber" : 1,
        "endLineNumber" : 247,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public void process(Element element,JCodeModel codeModel,EBeansHolder activitiesHolder) throws Exception {\n  EBeanHolder holder=activitiesHolder.create(element);\n  TypeElement typeElement=(TypeElement)element;\n  String annotatedActivityQualifiedName=typeElement.getQualifiedName().toString();\n  String subActivityQualifiedName=annotatedActivityQualifiedName + ModelConstants.GENERATION_SUFFIX;\n  int modifiers;\n  boolean isAbstract=element.getModifiers().contains(Modifier.ABSTRACT);\n  if (isAbstract) {\n    modifiers=JMod.PUBLIC | JMod.ABSTRACT;\n  }\n else {\n    modifiers=JMod.PUBLIC | JMod.FINAL;\n  }\n  holder.eBean=codeModel._class(modifiers,subActivityQualifiedName,ClassType.CLASS);\n  JClass annotatedActivity=codeModel.directClass(annotatedActivityQualifiedName);\n  holder.eBean._extends(annotatedActivity);\n  holder.contextRef=_this();\n  int onCreateVisibility;\n  if (isAbstract) {\n    onCreateVisibility=inheritedOnCreateVisibility(typeElement);\n  }\n else {\n    onCreateVisibility=PUBLIC;\n  }\n  JMethod onCreate=holder.eBean.method(onCreateVisibility,codeModel.VOID,\"onCreate\");\n  onCreate.annotate(Override.class);\n  JClass bundleClass=holder.refClass(\"android.os.Bundle\");\n  holder.init=holder.eBean.method(PRIVATE,codeModel.VOID,\"init_\");\n  holder.beforeCreateSavedInstanceStateParam=holder.init.param(bundleClass,\"savedInstanceState\");\n{\n    holder.initIfActivityBody=holder.init.body();\n    holder.initActivityRef=_this();\n  }\n  holder.afterSetContentView=holder.eBean.method(PRIVATE,codeModel.VOID,\"afterSetContentView_\");\n  JVar onCreateSavedInstanceState=onCreate.param(bundleClass,\"savedInstanceState\");\n  JBlock onCreateBody=onCreate.body();\n  onCreateBody.invoke(holder.init).arg(onCreateSavedInstanceState);\n  onCreateBody.invoke(JExpr._super(),onCreate).arg(onCreateSavedInstanceState);\n  EActivity layoutAnnotation=element.getAnnotation(EActivity.class);\n  int layoutIdValue=layoutAnnotation.value();\n  JFieldRef contentViewId;\n  if (layoutIdValue != Id.DEFAULT_VALUE) {\n    IRInnerClass rInnerClass=rClass.get(Res.LAYOUT);\n    contentViewId=rInnerClass.getIdStaticRef(layoutIdValue,holder);\n  }\n else {\n    contentViewId=null;\n  }\n  if (contentViewId != null) {\n    onCreateBody.invoke(\"setContentView\").arg(contentViewId);\n  }\n  JClass viewClass=holder.refClass(\"android.view.View\");\n  JClass layoutParamsClass=holder.refClass(\"android.view.ViewGroup.LayoutParams\");\n  setContentViewMethod(codeModel,holder,new JType[]{codeModel.INT},new String[]{\"layoutResID\"});\n  setContentViewMethod(codeModel,holder,new JType[]{viewClass,layoutParamsClass},new String[]{\"view\",\"params\"});\n  setContentViewMethod(codeModel,holder,new JType[]{viewClass},new String[]{\"view\"});\n  if (hasOnBackPressedMethod(typeElement)) {\n    JMethod onKeyDownMethod=holder.eBean.method(PUBLIC,codeModel.BOOLEAN,\"onKeyDown\");\n    onKeyDownMethod.annotate(Override.class);\n    JVar keyCodeParam=onKeyDownMethod.param(codeModel.INT,\"keyCode\");\n    JClass keyEventClass=holder.refClass(\"android.view.KeyEvent\");\n    JVar eventParam=onKeyDownMethod.param(keyEventClass,\"event\");\n    JClass versionHelperClass=codeModel.ref(SdkVersionHelper.class);\n    JInvocation sdkInt=versionHelperClass.staticInvoke(\"getSdkInt\");\n    JBlock onKeyDownBody=onKeyDownMethod.body();\n    onKeyDownBody._if(sdkInt.lt(JExpr.lit(5)).cand(keyCodeParam.eq(keyEventClass.staticRef(\"KEYCODE_BACK\"))).cand(eventParam.invoke(\"getRepeatCount\").eq(JExpr.lit(0))))._then().invoke(\"onBackPressed\");\n    onKeyDownBody._return(JExpr._super().invoke(onKeyDownMethod).arg(keyCodeParam).arg(eventParam));\n  }\n  List<? extends Element> enclosedElements=typeElement.getEnclosedElements();\n  List<VariableElement> activityFields=ElementFilter.fieldsIn(enclosedElements);\n  for (  VariableElement activityField : activityFields) {\n    TypeMirror sharedPreferencesHelperType=processingEnv.getElementUtils().getTypeElement(\"com.googlecode.androidannotations.api.sharedpreferences.SharedPreferencesHelper\").asType();\n    if (processingEnv.getTypeUtils().isSubtype(activityField.asType(),sharedPreferencesHelperType)) {\n    }\n  }\n  if (!isAbstract) {\n    JClass contextClass=holder.refClass(\"android.content.Context\");\n    JClass intentClass=holder.refClass(\"android.content.Intent\");\n{\n      holder.intentBuilderClass=holder.eBean._class(PUBLIC | STATIC,\"IntentBuilder_\");\n      JFieldVar contextField=holder.intentBuilderClass.field(PRIVATE,contextClass,\"context_\");\n      holder.intentField=holder.intentBuilderClass.field(PRIVATE | FINAL,intentClass,\"intent_\");\n{\n        JMethod constructor=holder.intentBuilderClass.constructor(JMod.PUBLIC);\n        JVar constructorContextParam=constructor.param(contextClass,\"context\");\n        JBlock constructorBody=constructor.body();\n        constructorBody.assign(contextField,constructorContextParam);\n        constructorBody.assign(holder.intentField,_new(intentClass).arg(constructorContextParam).arg(holder.eBean.dotclass()));\n      }\n{\n        JMethod method=holder.intentBuilderClass.method(PUBLIC,intentClass,\"get\");\n        method.body()._return(holder.intentField);\n      }\n{\n        JMethod method=holder.intentBuilderClass.method(PUBLIC,holder.intentBuilderClass,\"flags\");\n        JVar flagsParam=method.param(codeModel.INT,\"flags\");\n        JBlock body=method.body();\n        body.invoke(holder.intentField,\"setFlags\").arg(flagsParam);\n        body._return(_this());\n      }\n{\n        JMethod method=holder.intentBuilderClass.method(PUBLIC,codeModel.VOID,\"start\");\n        method.body().invoke(contextField,\"startActivity\").arg(holder.intentField);\n      }\n{\n        JMethod method=holder.eBean.method(STATIC | PUBLIC,holder.intentBuilderClass,\"intent\");\n        JVar contextParam=method.param(contextClass,\"context\");\n        method.body()._return(_new(holder.intentBuilderClass).arg(contextParam));\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 893,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 110,
        "startColumnNumber" : 2,
        "endLineNumber" : 110,
        "endColumnNumber" : 89
      },
      "nodeContext" : "JMethod onCreate=holder.eBean.method(onCreateVisibility,codeModel.VOID,\"onCreate\");\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 110,
    "startColumnNumber" : 77,
    "endLineNumber" : 110,
    "endColumnNumber" : 87
  } ],
  "layoutRelationDataList" : [ ]
}