{
  "id" : 86,
  "expression" : "acls",
  "projectName" : "apache@skywalking",
  "commitID" : "16b51d55baec4f779f312e07081d1397addbcfe9",
  "filePath" : "/oap-server/server-cluster-plugin/cluster-zookeeper-plugin/src/main/java/org/apache/skywalking/oap/server/cluster/plugin/zookeeper/ClusterModuleZookeeperProvider.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "acls",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 102,
      "startColumnNumber" : 12,
      "endLineNumber" : 102,
      "endColumnNumber" : 16
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 102,
        "startColumnNumber" : 12,
        "endLineNumber" : 102,
        "endColumnNumber" : 86
      },
      "nodeContext" : "acls.add(new ACL(ZooDefs.Perms.ALL,new Id(config.getSchema(),authInfo)))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 102,
        "startColumnNumber" : 12,
        "endLineNumber" : 102,
        "endColumnNumber" : 87
      },
      "nodeContext" : "acls.add(new ACL(ZooDefs.Perms.ALL,new Id(config.getSchema(),authInfo)));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1181,
        "startLineNumber" : 90,
        "startColumnNumber" : 34,
        "endLineNumber" : 118,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String authInfo=config.getExpression();\n  if (\"digest\".equals(config.getSchema())) {\n    try {\n      authInfo=DigestAuthenticationProvider.generateDigest(authInfo);\n    }\n catch (    NoSuchAlgorithmException e) {\n      throw new ModuleStartException(e.getMessage(),e);\n    }\n  }\n else {\n    throw new ModuleStartException(\"Support digest schema only.\");\n  }\n  final List<ACL> acls=Lists.newArrayList();\n  acls.add(new ACL(ZooDefs.Perms.ALL,new Id(config.getSchema(),authInfo)));\n  acls.add(new ACL(ZooDefs.Perms.READ,ZooDefs.Ids.ANYONE_ID_UNSAFE));\n  ACLProvider provider=new ACLProvider(){\n    @Override public List<ACL> getDefaultAcl(){\n      return acls;\n    }\n    @Override public List<ACL> getAclForPath(    String s){\n      return acls;\n    }\n  }\n;\n  builder.aclProvider(provider);\n  builder.authorization(config.getSchema(),config.getExpression().getBytes());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 150,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1207,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 118,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (config.isEnableACL()) {\n  String authInfo=config.getExpression();\n  if (\"digest\".equals(config.getSchema())) {\n    try {\n      authInfo=DigestAuthenticationProvider.generateDigest(authInfo);\n    }\n catch (    NoSuchAlgorithmException e) {\n      throw new ModuleStartException(e.getMessage(),e);\n    }\n  }\n else {\n    throw new ModuleStartException(\"Support digest schema only.\");\n  }\n  final List<ACL> acls=Lists.newArrayList();\n  acls.add(new ACL(ZooDefs.Perms.ALL,new Id(config.getSchema(),authInfo)));\n  acls.add(new ACL(ZooDefs.Perms.READ,ZooDefs.Ids.ANYONE_ID_UNSAFE));\n  ACLProvider provider=new ACLProvider(){\n    @Override public List<ACL> getDefaultAcl(){\n      return acls;\n    }\n    @Override public List<ACL> getAclForPath(    String s){\n      return acls;\n    }\n  }\n;\n  builder.aclProvider(provider);\n  builder.authorization(config.getSchema(),config.getExpression().getBytes());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 154,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2747,
        "startLineNumber" : 83,
        "startColumnNumber" : 83,
        "endLineNumber" : 141,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  RetryPolicy retryPolicy=new ExponentialBackoffRetry(config.getBaseSleepTimeMs(),config.getMaxRetries());\n  CuratorFrameworkFactory.Builder builder=CuratorFrameworkFactory.builder().retryPolicy(retryPolicy).connectString(config.getHostPort());\n  if (config.isEnableACL()) {\n    String authInfo=config.getExpression();\n    if (\"digest\".equals(config.getSchema())) {\n      try {\n        authInfo=DigestAuthenticationProvider.generateDigest(authInfo);\n      }\n catch (      NoSuchAlgorithmException e) {\n        throw new ModuleStartException(e.getMessage(),e);\n      }\n    }\n else {\n      throw new ModuleStartException(\"Support digest schema only.\");\n    }\n    final List<ACL> acls=Lists.newArrayList();\n    acls.add(new ACL(ZooDefs.Perms.ALL,new Id(config.getSchema(),authInfo)));\n    acls.add(new ACL(ZooDefs.Perms.READ,ZooDefs.Ids.ANYONE_ID_UNSAFE));\n    ACLProvider provider=new ACLProvider(){\n      @Override public List<ACL> getDefaultAcl(){\n        return acls;\n      }\n      @Override public List<ACL> getAclForPath(      String s){\n        return acls;\n      }\n    }\n;\n    builder.aclProvider(provider);\n    builder.authorization(config.getSchema(),config.getExpression().getBytes());\n  }\n  client=builder.build();\n  String path=BASE_PATH + (StringUtil.isEmpty(config.getNameSpace()) ? \"\" : \"/\" + config.getNameSpace());\n  serviceDiscovery=ServiceDiscoveryBuilder.builder(RemoteInstance.class).client(client).basePath(path).watchInstances(true).serializer(new SWInstanceSerializer()).build();\n  try {\n    client.start();\n    client.blockUntilConnected();\n    serviceDiscovery.start();\n    coordinator=new ZookeeperCoordinator(getManager(),config,serviceDiscovery);\n  }\n catch (  Exception e) {\n    LOGGER.error(e.getMessage(),e);\n    throw new ModuleStartException(e.getMessage(),e);\n  }\n  this.registerServiceImplementation(ClusterRegister.class,coordinator);\n  this.registerServiceImplementation(ClusterNodesQuery.class,coordinator);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 301,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2840,
        "startLineNumber" : 82,
        "startColumnNumber" : 4,
        "endLineNumber" : 141,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n  RetryPolicy retryPolicy=new ExponentialBackoffRetry(config.getBaseSleepTimeMs(),config.getMaxRetries());\n  CuratorFrameworkFactory.Builder builder=CuratorFrameworkFactory.builder().retryPolicy(retryPolicy).connectString(config.getHostPort());\n  if (config.isEnableACL()) {\n    String authInfo=config.getExpression();\n    if (\"digest\".equals(config.getSchema())) {\n      try {\n        authInfo=DigestAuthenticationProvider.generateDigest(authInfo);\n      }\n catch (      NoSuchAlgorithmException e) {\n        throw new ModuleStartException(e.getMessage(),e);\n      }\n    }\n else {\n      throw new ModuleStartException(\"Support digest schema only.\");\n    }\n    final List<ACL> acls=Lists.newArrayList();\n    acls.add(new ACL(ZooDefs.Perms.ALL,new Id(config.getSchema(),authInfo)));\n    acls.add(new ACL(ZooDefs.Perms.READ,ZooDefs.Ids.ANYONE_ID_UNSAFE));\n    ACLProvider provider=new ACLProvider(){\n      @Override public List<ACL> getDefaultAcl(){\n        return acls;\n      }\n      @Override public List<ACL> getAclForPath(      String s){\n        return acls;\n      }\n    }\n;\n    builder.aclProvider(provider);\n    builder.authorization(config.getSchema(),config.getExpression().getBytes());\n  }\n  client=builder.build();\n  String path=BASE_PATH + (StringUtil.isEmpty(config.getNameSpace()) ? \"\" : \"/\" + config.getNameSpace());\n  serviceDiscovery=ServiceDiscoveryBuilder.builder(RemoteInstance.class).client(client).basePath(path).watchInstances(true).serializer(new SWInstanceSerializer()).build();\n  try {\n    client.start();\n    client.blockUntilConnected();\n    serviceDiscovery.start();\n    coordinator=new ZookeeperCoordinator(getManager(),config,serviceDiscovery);\n  }\n catch (  Exception e) {\n    LOGGER.error(e.getMessage(),e);\n    throw new ModuleStartException(e.getMessage(),e);\n  }\n  this.registerServiceImplementation(ClusterRegister.class,coordinator);\n  this.registerServiceImplementation(ClusterNodesQuery.class,coordinator);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 311,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 102,
        "startColumnNumber" : 12,
        "endLineNumber" : 102,
        "endColumnNumber" : 87
      },
      "nodeContext" : "acls.add(new ACL(ZooDefs.Perms.ALL,new Id(config.getSchema(),authInfo)));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 19,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.util.List<org.apache.skywalking.oap.server.cluster.plugin.zookeeper.ACL>"
  }, {
    "nodeContext" : "acls",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 103,
      "startColumnNumber" : 12,
      "endLineNumber" : 103,
      "endColumnNumber" : 16
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 103,
        "startColumnNumber" : 12,
        "endLineNumber" : 103,
        "endColumnNumber" : 79
      },
      "nodeContext" : "acls.add(new ACL(ZooDefs.Perms.READ,ZooDefs.Ids.ANYONE_ID_UNSAFE))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 103,
        "startColumnNumber" : 12,
        "endLineNumber" : 103,
        "endColumnNumber" : 80
      },
      "nodeContext" : "acls.add(new ACL(ZooDefs.Perms.READ,ZooDefs.Ids.ANYONE_ID_UNSAFE));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1181,
        "startLineNumber" : 90,
        "startColumnNumber" : 34,
        "endLineNumber" : 118,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  String authInfo=config.getExpression();\n  if (\"digest\".equals(config.getSchema())) {\n    try {\n      authInfo=DigestAuthenticationProvider.generateDigest(authInfo);\n    }\n catch (    NoSuchAlgorithmException e) {\n      throw new ModuleStartException(e.getMessage(),e);\n    }\n  }\n else {\n    throw new ModuleStartException(\"Support digest schema only.\");\n  }\n  final List<ACL> acls=Lists.newArrayList();\n  acls.add(new ACL(ZooDefs.Perms.ALL,new Id(config.getSchema(),authInfo)));\n  acls.add(new ACL(ZooDefs.Perms.READ,ZooDefs.Ids.ANYONE_ID_UNSAFE));\n  ACLProvider provider=new ACLProvider(){\n    @Override public List<ACL> getDefaultAcl(){\n      return acls;\n    }\n    @Override public List<ACL> getAclForPath(    String s){\n      return acls;\n    }\n  }\n;\n  builder.aclProvider(provider);\n  builder.authorization(config.getSchema(),config.getExpression().getBytes());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 150,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1207,
        "startLineNumber" : 90,
        "startColumnNumber" : 8,
        "endLineNumber" : 118,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (config.isEnableACL()) {\n  String authInfo=config.getExpression();\n  if (\"digest\".equals(config.getSchema())) {\n    try {\n      authInfo=DigestAuthenticationProvider.generateDigest(authInfo);\n    }\n catch (    NoSuchAlgorithmException e) {\n      throw new ModuleStartException(e.getMessage(),e);\n    }\n  }\n else {\n    throw new ModuleStartException(\"Support digest schema only.\");\n  }\n  final List<ACL> acls=Lists.newArrayList();\n  acls.add(new ACL(ZooDefs.Perms.ALL,new Id(config.getSchema(),authInfo)));\n  acls.add(new ACL(ZooDefs.Perms.READ,ZooDefs.Ids.ANYONE_ID_UNSAFE));\n  ACLProvider provider=new ACLProvider(){\n    @Override public List<ACL> getDefaultAcl(){\n      return acls;\n    }\n    @Override public List<ACL> getAclForPath(    String s){\n      return acls;\n    }\n  }\n;\n  builder.aclProvider(provider);\n  builder.authorization(config.getSchema(),config.getExpression().getBytes());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 154,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2747,
        "startLineNumber" : 83,
        "startColumnNumber" : 83,
        "endLineNumber" : 141,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  RetryPolicy retryPolicy=new ExponentialBackoffRetry(config.getBaseSleepTimeMs(),config.getMaxRetries());\n  CuratorFrameworkFactory.Builder builder=CuratorFrameworkFactory.builder().retryPolicy(retryPolicy).connectString(config.getHostPort());\n  if (config.isEnableACL()) {\n    String authInfo=config.getExpression();\n    if (\"digest\".equals(config.getSchema())) {\n      try {\n        authInfo=DigestAuthenticationProvider.generateDigest(authInfo);\n      }\n catch (      NoSuchAlgorithmException e) {\n        throw new ModuleStartException(e.getMessage(),e);\n      }\n    }\n else {\n      throw new ModuleStartException(\"Support digest schema only.\");\n    }\n    final List<ACL> acls=Lists.newArrayList();\n    acls.add(new ACL(ZooDefs.Perms.ALL,new Id(config.getSchema(),authInfo)));\n    acls.add(new ACL(ZooDefs.Perms.READ,ZooDefs.Ids.ANYONE_ID_UNSAFE));\n    ACLProvider provider=new ACLProvider(){\n      @Override public List<ACL> getDefaultAcl(){\n        return acls;\n      }\n      @Override public List<ACL> getAclForPath(      String s){\n        return acls;\n      }\n    }\n;\n    builder.aclProvider(provider);\n    builder.authorization(config.getSchema(),config.getExpression().getBytes());\n  }\n  client=builder.build();\n  String path=BASE_PATH + (StringUtil.isEmpty(config.getNameSpace()) ? \"\" : \"/\" + config.getNameSpace());\n  serviceDiscovery=ServiceDiscoveryBuilder.builder(RemoteInstance.class).client(client).basePath(path).watchInstances(true).serializer(new SWInstanceSerializer()).build();\n  try {\n    client.start();\n    client.blockUntilConnected();\n    serviceDiscovery.start();\n    coordinator=new ZookeeperCoordinator(getManager(),config,serviceDiscovery);\n  }\n catch (  Exception e) {\n    LOGGER.error(e.getMessage(),e);\n    throw new ModuleStartException(e.getMessage(),e);\n  }\n  this.registerServiceImplementation(ClusterRegister.class,coordinator);\n  this.registerServiceImplementation(ClusterNodesQuery.class,coordinator);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 301,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2840,
        "startLineNumber" : 82,
        "startColumnNumber" : 4,
        "endLineNumber" : 141,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n  RetryPolicy retryPolicy=new ExponentialBackoffRetry(config.getBaseSleepTimeMs(),config.getMaxRetries());\n  CuratorFrameworkFactory.Builder builder=CuratorFrameworkFactory.builder().retryPolicy(retryPolicy).connectString(config.getHostPort());\n  if (config.isEnableACL()) {\n    String authInfo=config.getExpression();\n    if (\"digest\".equals(config.getSchema())) {\n      try {\n        authInfo=DigestAuthenticationProvider.generateDigest(authInfo);\n      }\n catch (      NoSuchAlgorithmException e) {\n        throw new ModuleStartException(e.getMessage(),e);\n      }\n    }\n else {\n      throw new ModuleStartException(\"Support digest schema only.\");\n    }\n    final List<ACL> acls=Lists.newArrayList();\n    acls.add(new ACL(ZooDefs.Perms.ALL,new Id(config.getSchema(),authInfo)));\n    acls.add(new ACL(ZooDefs.Perms.READ,ZooDefs.Ids.ANYONE_ID_UNSAFE));\n    ACLProvider provider=new ACLProvider(){\n      @Override public List<ACL> getDefaultAcl(){\n        return acls;\n      }\n      @Override public List<ACL> getAclForPath(      String s){\n        return acls;\n      }\n    }\n;\n    builder.aclProvider(provider);\n    builder.authorization(config.getSchema(),config.getExpression().getBytes());\n  }\n  client=builder.build();\n  String path=BASE_PATH + (StringUtil.isEmpty(config.getNameSpace()) ? \"\" : \"/\" + config.getNameSpace());\n  serviceDiscovery=ServiceDiscoveryBuilder.builder(RemoteInstance.class).client(client).basePath(path).watchInstances(true).serializer(new SWInstanceSerializer()).build();\n  try {\n    client.start();\n    client.blockUntilConnected();\n    serviceDiscovery.start();\n    coordinator=new ZookeeperCoordinator(getManager(),config,serviceDiscovery);\n  }\n catch (  Exception e) {\n    LOGGER.error(e.getMessage(),e);\n    throw new ModuleStartException(e.getMessage(),e);\n  }\n  this.registerServiceImplementation(ClusterRegister.class,coordinator);\n  this.registerServiceImplementation(ClusterNodesQuery.class,coordinator);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 311,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 103,
        "startColumnNumber" : 12,
        "endLineNumber" : 103,
        "endColumnNumber" : 80
      },
      "nodeContext" : "acls.add(new ACL(ZooDefs.Perms.READ,ZooDefs.Ids.ANYONE_ID_UNSAFE));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.util.List<org.apache.skywalking.oap.server.cluster.plugin.zookeeper.ACL>"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 102,
    "startColumnNumber" : 12,
    "endLineNumber" : 102,
    "endColumnNumber" : 16
  }, {
    "charLength" : 4,
    "startLineNumber" : 103,
    "startColumnNumber" : 12,
    "endLineNumber" : 103,
    "endColumnNumber" : 16
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}