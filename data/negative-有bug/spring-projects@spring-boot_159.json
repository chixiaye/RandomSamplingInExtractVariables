{
  "id" : 159,
  "expression" : "\"auditevents/after\"",
  "projectName" : "spring-projects@spring-boot",
  "commitID" : "44299bb9808d0dc21a9bfc1c0c47e1539e00856d",
  "filePath" : "/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/AuditEventsEndpointDocumentationTests.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"auditevents/after\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 65,
      "startColumnNumber" : 20,
      "endLineNumber" : 65,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 422,
        "startLineNumber" : 65,
        "startColumnNumber" : 11,
        "endLineNumber" : 72,
        "endColumnNumber" : 48
      },
      "nodeContext" : "document(\"auditevents/after\",responseFields(fieldWithPath(\"events\").description(\"An array of audit events.\"),fieldWithPath(\"events.[].timestamp\").description(\"The timestamp of when the event occurred.\"),fieldWithPath(\"events.[].principal\").description(\"The principal that triggered the event.\"),fieldWithPath(\"events.[].type\").description(\"The type of the event.\")))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 29,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 548,
        "startLineNumber" : 63,
        "startColumnNumber" : 2,
        "endLineNumber" : 72,
        "endColumnNumber" : 49
      },
      "nodeContext" : "this.mockMvc.perform(get(\"/actuator/auditevents\").param(\"after\",queryTimestamp)).andExpect(status().isOk()).andDo(document(\"auditevents/after\",responseFields(fieldWithPath(\"events\").description(\"An array of audit events.\"),fieldWithPath(\"events.[].timestamp\").description(\"The timestamp of when the event occurred.\"),fieldWithPath(\"events.[].principal\").description(\"The principal that triggered the event.\"),fieldWithPath(\"events.[].type\").description(\"The type of the event.\"))))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 49,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 549,
        "startLineNumber" : 63,
        "startColumnNumber" : 2,
        "endLineNumber" : 72,
        "endColumnNumber" : 50
      },
      "nodeContext" : "this.mockMvc.perform(get(\"/actuator/auditevents\").param(\"after\",queryTimestamp)).andExpect(status().isOk()).andDo(document(\"auditevents/after\",responseFields(fieldWithPath(\"events\").description(\"An array of audit events.\"),fieldWithPath(\"events.[].timestamp\").description(\"The timestamp of when the event occurred.\"),fieldWithPath(\"events.[].principal\").description(\"The principal that triggered the event.\"),fieldWithPath(\"events.[].type\").description(\"The type of the event.\"))));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 50,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 745,
        "startLineNumber" : 59,
        "startColumnNumber" : 52,
        "endLineNumber" : 73,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String queryTimestamp=\"2017-11-07T09:37Z\";\n  given(this.repository.find(any(),any(),any())).willReturn(Arrays.asList(new AuditEvent(\"alice\",\"logout\",Collections.emptyMap())));\n  this.mockMvc.perform(get(\"/actuator/auditevents\").param(\"after\",queryTimestamp)).andExpect(status().isOk()).andDo(document(\"auditevents/after\",responseFields(fieldWithPath(\"events\").description(\"An array of audit events.\"),fieldWithPath(\"events.[].timestamp\").description(\"The timestamp of when the event occurred.\"),fieldWithPath(\"events.[].principal\").description(\"The principal that triggered the event.\"),fieldWithPath(\"events.[].type\").description(\"The type of the event.\"))));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 84,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 803,
        "startLineNumber" : 58,
        "startColumnNumber" : 1,
        "endLineNumber" : 73,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void allAuditEventsAfter() throws Exception {\n  String queryTimestamp=\"2017-11-07T09:37Z\";\n  given(this.repository.find(any(),any(),any())).willReturn(Arrays.asList(new AuditEvent(\"alice\",\"logout\",Collections.emptyMap())));\n  this.mockMvc.perform(get(\"/actuator/auditevents\").param(\"after\",queryTimestamp)).andExpect(status().isOk()).andDo(document(\"auditevents/after\",responseFields(fieldWithPath(\"events\").description(\"An array of audit events.\"),fieldWithPath(\"events.[].timestamp\").description(\"The timestamp of when the event occurred.\"),fieldWithPath(\"events.[].principal\").description(\"The principal that triggered the event.\"),fieldWithPath(\"events.[].type\").description(\"The type of the event.\"))));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 92,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 422,
        "startLineNumber" : 65,
        "startColumnNumber" : 11,
        "endLineNumber" : 72,
        "endColumnNumber" : 48
      },
      "nodeContext" : "document(\"auditevents/after\",responseFields(fieldWithPath(\"events\").description(\"An array of audit events.\"),fieldWithPath(\"events.[].timestamp\").description(\"The timestamp of when the event occurred.\"),fieldWithPath(\"events.[].principal\").description(\"The principal that triggered the event.\"),fieldWithPath(\"events.[].type\").description(\"The type of the event.\")))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 29,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 65,
    "startColumnNumber" : 20,
    "endLineNumber" : 65,
    "endColumnNumber" : 39
  } ],
  "layoutRelationDataList" : [ ]
}