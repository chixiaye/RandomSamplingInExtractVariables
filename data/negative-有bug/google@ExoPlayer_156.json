{
  "id" : 156,
  "expression" : "new ArrayList<>(actionNames.size())",
  "projectName" : "google@ExoPlayer",
  "commitID" : "4803ab3bd12b71fc32150e96475c0e16aaf6ddc5",
  "filePath" : "/library/ui/src/main/java/com/google/android/exoplayer2/ui/PlayerNotificationManager.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new ArrayList<>(actionNames.size())",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 35,
      "startLineNumber" : 1206,
      "startColumnNumber" : 46,
      "endLineNumber" : 1206,
      "endColumnNumber" : 81
    },
    "astNodeNumber" : 7,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 1206,
        "startColumnNumber" : 36,
        "endLineNumber" : 1206,
        "endColumnNumber" : 81
      },
      "nodeContext" : "actions=new ArrayList<>(actionNames.size())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 1206,
        "startColumnNumber" : 4,
        "endLineNumber" : 1206,
        "endColumnNumber" : 82
      },
      "nodeContext" : "List<NotificationCompat.Action> actions=new ArrayList<>(actionNames.size());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3102,
        "startLineNumber" : 1199,
        "startColumnNumber" : 34,
        "endLineNumber" : 1284,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (player.getPlaybackState() == Player.STATE_IDLE && player.getCurrentTimeline().isEmpty()) {\n    builderActions=null;\n    return null;\n  }\n  List<String> actionNames=getActions(player);\n  List<NotificationCompat.Action> actions=new ArrayList<>(actionNames.size());\n  for (int i=0; i < actionNames.size(); i++) {\n    String actionName=actionNames.get(i);\n    @Nullable NotificationCompat.Action action=playbackActions.containsKey(actionName) ? playbackActions.get(actionName) : customActions.get(actionName);\n    if (action != null) {\n      actions.add(action);\n    }\n  }\n  if (builder == null || !actions.equals(builderActions)) {\n    builder=new NotificationCompat.Builder(context,channelId);\n    builderActions=actions;\n    for (int i=0; i < actions.size(); i++) {\n      builder.addAction(actions.get(i));\n    }\n  }\n  MediaStyle mediaStyle=new MediaStyle();\n  if (mediaSessionToken != null) {\n    mediaStyle.setMediaSession(mediaSessionToken);\n  }\n  mediaStyle.setShowActionsInCompactView(getActionIndicesForCompactView(actionNames,player));\n  mediaStyle.setShowCancelButton(!ongoing);\n  mediaStyle.setCancelButtonIntent(dismissPendingIntent);\n  builder.setStyle(mediaStyle);\n  builder.setDeleteIntent(dismissPendingIntent);\n  builder.setBadgeIconType(badgeIconType).setOngoing(ongoing).setColor(color).setColorized(colorized).setSmallIcon(smallIconResourceId).setVisibility(visibility).setPriority(priority).setDefaults(defaults);\n  if (Util.SDK_INT >= 21 && useChronometer && player.isPlaying() && !player.isPlayingAd() && !player.isCurrentWindowDynamic() && player.getPlaybackParameters().speed == 1f) {\n    builder.setWhen(System.currentTimeMillis() - player.getContentPosition()).setShowWhen(true).setUsesChronometer(true);\n  }\n else {\n    builder.setShowWhen(false).setUsesChronometer(false);\n  }\n  builder.setContentTitle(mediaDescriptionAdapter.getCurrentContentTitle(player));\n  builder.setContentText(mediaDescriptionAdapter.getCurrentContentText(player));\n  builder.setSubText(mediaDescriptionAdapter.getCurrentSubText(player));\n  if (largeIcon == null) {\n    largeIcon=mediaDescriptionAdapter.getCurrentLargeIcon(player,new BitmapCallback(++currentNotificationTag));\n  }\n  setLargeIcon(builder,largeIcon);\n  builder.setContentIntent(mediaDescriptionAdapter.createCurrentContentIntent(player));\n  if (groupKey != null) {\n    builder.setGroup(groupKey);\n  }\n  builder.setOnlyAlertOnce(true);\n  return builder;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 353,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3976,
        "startLineNumber" : 1182,
        "startColumnNumber" : 2,
        "endLineNumber" : 1284,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Creates the notification given the current player state.\n * @param player The player for which state to build a notification.\n * @param builder The builder used to build the last notification, or {@code null}. Re-using the builder when possible can prevent notification flicker when  {@code Util#SDK_INT} &lt; 21.\n * @param ongoing Whether the notification should be ongoing.\n * @param largeIcon The large icon to be used.\n * @return The {@link NotificationCompat.Builder} on which to call {@link NotificationCompat.Builder#build()} to obtain the notification, or {@code null} if nonotification should be displayed.\n */\n@Nullable protected NotificationCompat.Builder createNotification(Player player,@Nullable NotificationCompat.Builder builder,boolean ongoing,@Nullable Bitmap largeIcon){\n  if (player.getPlaybackState() == Player.STATE_IDLE && player.getCurrentTimeline().isEmpty()) {\n    builderActions=null;\n    return null;\n  }\n  List<String> actionNames=getActions(player);\n  List<NotificationCompat.Action> actions=new ArrayList<>(actionNames.size());\n  for (int i=0; i < actionNames.size(); i++) {\n    String actionName=actionNames.get(i);\n    @Nullable NotificationCompat.Action action=playbackActions.containsKey(actionName) ? playbackActions.get(actionName) : customActions.get(actionName);\n    if (action != null) {\n      actions.add(action);\n    }\n  }\n  if (builder == null || !actions.equals(builderActions)) {\n    builder=new NotificationCompat.Builder(context,channelId);\n    builderActions=actions;\n    for (int i=0; i < actions.size(); i++) {\n      builder.addAction(actions.get(i));\n    }\n  }\n  MediaStyle mediaStyle=new MediaStyle();\n  if (mediaSessionToken != null) {\n    mediaStyle.setMediaSession(mediaSessionToken);\n  }\n  mediaStyle.setShowActionsInCompactView(getActionIndicesForCompactView(actionNames,player));\n  mediaStyle.setShowCancelButton(!ongoing);\n  mediaStyle.setCancelButtonIntent(dismissPendingIntent);\n  builder.setStyle(mediaStyle);\n  builder.setDeleteIntent(dismissPendingIntent);\n  builder.setBadgeIconType(badgeIconType).setOngoing(ongoing).setColor(color).setColorized(colorized).setSmallIcon(smallIconResourceId).setVisibility(visibility).setPriority(priority).setDefaults(defaults);\n  if (Util.SDK_INT >= 21 && useChronometer && player.isPlaying() && !player.isPlayingAd() && !player.isCurrentWindowDynamic() && player.getPlaybackParameters().speed == 1f) {\n    builder.setWhen(System.currentTimeMillis() - player.getContentPosition()).setShowWhen(true).setUsesChronometer(true);\n  }\n else {\n    builder.setShowWhen(false).setUsesChronometer(false);\n  }\n  builder.setContentTitle(mediaDescriptionAdapter.getCurrentContentTitle(player));\n  builder.setContentText(mediaDescriptionAdapter.getCurrentContentText(player));\n  builder.setSubText(mediaDescriptionAdapter.getCurrentSubText(player));\n  if (largeIcon == null) {\n    largeIcon=mediaDescriptionAdapter.getCurrentLargeIcon(player,new BitmapCallback(++currentNotificationTag));\n  }\n  setLargeIcon(builder,largeIcon);\n  builder.setContentIntent(mediaDescriptionAdapter.createCurrentContentIntent(player));\n  if (groupKey != null) {\n    builder.setGroup(groupKey);\n  }\n  builder.setOnlyAlertOnce(true);\n  return builder;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 384,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 78,
        "startLineNumber" : 1206,
        "startColumnNumber" : 4,
        "endLineNumber" : 1206,
        "endColumnNumber" : 82
      },
      "nodeContext" : "List<NotificationCompat.Action> actions=new ArrayList<>(actionNames.size());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "java.util.ArrayList<NotificationCompat.Action>"
  } ],
  "positionList" : [ {
    "charLength" : 35,
    "startLineNumber" : 1206,
    "startColumnNumber" : 46,
    "endLineNumber" : 1206,
    "endColumnNumber" : 81
  } ],
  "layoutRelationDataList" : [ ]
}