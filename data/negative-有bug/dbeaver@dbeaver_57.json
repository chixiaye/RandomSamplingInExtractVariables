{
  "id" : 57,
  "expression" : "size",
  "projectName" : "dbeaver@dbeaver",
  "commitID" : "aecf0da5baef5ea4aa1675578670cf057248123d",
  "filePath" : "/plugins/org.jkiss.dbeaver.ui/src/org/jkiss/dbeaver/ui/controls/CSmartCombo.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "size",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 639,
      "startColumnNumber" : 39,
      "endLineNumber" : 639,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 6,
        "startLineNumber" : 639,
        "startColumnNumber" : 39,
        "endLineNumber" : 639,
        "endColumnNumber" : 45
      },
      "nodeContext" : "size.x",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 639,
        "startColumnNumber" : 30,
        "endLineNumber" : 639,
        "endColumnNumber" : 58
      },
      "nodeContext" : "Math.max(size.x,listSize.x)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 639,
        "startColumnNumber" : 30,
        "endLineNumber" : 639,
        "endColumnNumber" : 63
      },
      "nodeContext" : "Math.max(size.x,listSize.x) - 30",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 639,
        "startColumnNumber" : 8,
        "endLineNumber" : 639,
        "endColumnNumber" : 76
      },
      "nodeContext" : "table.setBounds(1,1,Math.max(size.x,listSize.x) - 30,listSize.y)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 639,
        "startColumnNumber" : 8,
        "endLineNumber" : 639,
        "endColumnNumber" : 77
      },
      "nodeContext" : "table.setBounds(1,1,Math.max(size.x,listSize.x) - 30,listSize.y);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3094,
        "startLineNumber" : 603,
        "startColumnNumber" : 4,
        "endLineNumber" : 684,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (drop == isDropped()) {\n    return;\n  }\n  if (!drop) {\n    if (this.popup != null) {\n      final Shell toDispose=this.popup;\n      this.popup=null;\n      this.dropDownControl=null;\n      disposeTime=System.currentTimeMillis();\n      UIUtils.asyncExec(toDispose::dispose);\n    }\n    return;\n  }\n  if (this.dropDownControl != null) {\n    this.dropDownControl.removeListener(SWT.Dispose,this.listener);\n  }\n  createPopup();\n  Point size=getSize();\n  int itemCount=this.items.size();\n  itemCount=(itemCount == 0) ? this.visibleItemCount : Math.min(this.visibleItemCount,itemCount);\n  Tree table=dropDownControl;\n  int itemHeight=table.getItemHeight() * itemCount;\n  Point listSize=table.computeSize(SWT.DEFAULT,itemHeight,false);\n  if (tableFilter != null) {\n    listSize.y+=popup.getChildren()[0].computeSize(SWT.DEFAULT,SWT.DEFAULT).y;\n  }\n  ScrollBar verticalBar=table.getVerticalBar();\n  if (verticalBar != null) {\n    listSize.x-=verticalBar.getSize().x;\n  }\n  ScrollBar hScrollBar=table.getHorizontalBar();\n  if (hScrollBar != null) {\n    listSize.y+=hScrollBar.getSize().y;\n  }\n  table.setBounds(1,1,Math.max(size.x,listSize.x) - 30,listSize.y);\n{\n    final TreeColumn column=table.getColumn(0);\n    column.pack();\n    final int maxSize=table.getSize().x - 10;\n    if (column.getWidth() < maxSize) {\n    }\n  }\n  if (selectedItem != null) {\n    for (    TreeItem item : table.getItems()) {\n      if (item.getData() == selectedItem) {\n        table.showItem(item);\n        table.setTopItem(item);\n        break;\n      }\n    }\n  }\n  Display display=getDisplay();\n  Rectangle listRect=this.dropDownControl.getBounds();\n  Rectangle parentRect=display.map(getParent(),null,getBounds());\n  Point comboSize=getSize();\n  Rectangle displayRect=getMonitor().getClientArea();\n  int width=comboSize.x;\n  int height=listRect.height;\n  if (sizeHint != null) {\n    width=sizeHint.x;\n    height=sizeHint.y;\n  }\n  int x=parentRect.x;\n  int y=parentRect.y + comboSize.y;\n  if (y + height > displayRect.y + displayRect.height) {\n    y=parentRect.y - height;\n  }\n  this.popup.setBounds(x,y,width,height);\n  this.popup.layout();\n  if (this.popup.getData(\"resizeListener\") == null) {\n    this.popup.addListener(SWT.Resize,event -> CSmartCombo.this.sizeHint=popup.getSize());\n    this.popup.setData(\"resizeListener\",Boolean.TRUE);\n  }\n  this.popup.setVisible(true);\n  this.dropDownControl.setFocus();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 480,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3136,
        "startLineNumber" : 602,
        "startColumnNumber" : 4,
        "endLineNumber" : 684,
        "endColumnNumber" : 5
      },
      "nodeContext" : "protected void dropDown(boolean drop){\n  if (drop == isDropped()) {\n    return;\n  }\n  if (!drop) {\n    if (this.popup != null) {\n      final Shell toDispose=this.popup;\n      this.popup=null;\n      this.dropDownControl=null;\n      disposeTime=System.currentTimeMillis();\n      UIUtils.asyncExec(toDispose::dispose);\n    }\n    return;\n  }\n  if (this.dropDownControl != null) {\n    this.dropDownControl.removeListener(SWT.Dispose,this.listener);\n  }\n  createPopup();\n  Point size=getSize();\n  int itemCount=this.items.size();\n  itemCount=(itemCount == 0) ? this.visibleItemCount : Math.min(this.visibleItemCount,itemCount);\n  Tree table=dropDownControl;\n  int itemHeight=table.getItemHeight() * itemCount;\n  Point listSize=table.computeSize(SWT.DEFAULT,itemHeight,false);\n  if (tableFilter != null) {\n    listSize.y+=popup.getChildren()[0].computeSize(SWT.DEFAULT,SWT.DEFAULT).y;\n  }\n  ScrollBar verticalBar=table.getVerticalBar();\n  if (verticalBar != null) {\n    listSize.x-=verticalBar.getSize().x;\n  }\n  ScrollBar hScrollBar=table.getHorizontalBar();\n  if (hScrollBar != null) {\n    listSize.y+=hScrollBar.getSize().y;\n  }\n  table.setBounds(1,1,Math.max(size.x,listSize.x) - 30,listSize.y);\n{\n    final TreeColumn column=table.getColumn(0);\n    column.pack();\n    final int maxSize=table.getSize().x - 10;\n    if (column.getWidth() < maxSize) {\n    }\n  }\n  if (selectedItem != null) {\n    for (    TreeItem item : table.getItems()) {\n      if (item.getData() == selectedItem) {\n        table.showItem(item);\n        table.setTopItem(item);\n        break;\n      }\n    }\n  }\n  Display display=getDisplay();\n  Rectangle listRect=this.dropDownControl.getBounds();\n  Rectangle parentRect=display.map(getParent(),null,getBounds());\n  Point comboSize=getSize();\n  Rectangle displayRect=getMonitor().getClientArea();\n  int width=comboSize.x;\n  int height=listRect.height;\n  if (sizeHint != null) {\n    width=sizeHint.x;\n    height=sizeHint.y;\n  }\n  int x=parentRect.x;\n  int y=parentRect.y + comboSize.y;\n  if (y + height > displayRect.y + displayRect.height) {\n    y=parentRect.y - height;\n  }\n  this.popup.setBounds(x,y,width,height);\n  this.popup.layout();\n  if (this.popup.getData(\"resizeListener\") == null) {\n    this.popup.addListener(SWT.Resize,event -> CSmartCombo.this.sizeHint=popup.getSize());\n    this.popup.setData(\"resizeListener\",Boolean.TRUE);\n  }\n  this.popup.setVisible(true);\n  this.dropDownControl.setFocus();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 487,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 639,
        "startColumnNumber" : 8,
        "endLineNumber" : 639,
        "endColumnNumber" : 77
      },
      "nodeContext" : "table.setBounds(1,1,Math.max(size.x,listSize.x) - 30,listSize.y);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 639,
    "startColumnNumber" : 39,
    "endLineNumber" : 639,
    "endColumnNumber" : 43
  } ],
  "layoutRelationDataList" : [ ]
}