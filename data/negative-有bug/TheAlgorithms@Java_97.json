{
  "id" : 97,
  "expression" : "direction",
  "projectName" : "TheAlgorithms@Java",
  "commitID" : "8b243667d736be7d0413cc77159378aa02459db0",
  "filePath" : "/src/main/java/com/thealgorithms/maths/FFTBluestein.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "direction",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 39,
      "startColumnNumber" : 69,
      "endLineNumber" : 39,
      "endColumnNumber" : 78
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 39,
        "startColumnNumber" : 27,
        "endLineNumber" : 39,
        "endColumnNumber" : 78
      },
      "nodeContext" : "(i - N + 1) * (i - N + 1) * Math.PI / N * direction",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 20,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 39,
        "startColumnNumber" : 19,
        "endLineNumber" : 39,
        "endColumnNumber" : 78
      },
      "nodeContext" : "angle=(i - N + 1) * (i - N + 1) * Math.PI / N * direction",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 22,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 39,
        "startColumnNumber" : 12,
        "endLineNumber" : 39,
        "endColumnNumber" : 79
      },
      "nodeContext" : "double angle=(i - N + 1) * (i - N + 1) * Math.PI / N * direction;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 24,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 256,
        "startLineNumber" : 38,
        "startColumnNumber" : 36,
        "endLineNumber" : 42,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  double angle=(i - N + 1) * (i - N + 1) * Math.PI / N * direction;\n  bn.set(i,new FFT.Complex(Math.cos(angle),Math.sin(angle)));\n  bn.set(bnSize - i - 1,new FFT.Complex(Math.cos(angle),Math.sin(angle)));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 64,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 284,
        "startLineNumber" : 38,
        "startColumnNumber" : 8,
        "endLineNumber" : 42,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < N; i++) {\n  double angle=(i - N + 1) * (i - N + 1) * Math.PI / N * direction;\n  bn.set(i,new FFT.Complex(Math.cos(angle),Math.sin(angle)));\n  bn.set(bnSize - i - 1,new FFT.Complex(Math.cos(angle),Math.sin(angle)));\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 75,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1639,
        "startLineNumber" : 26,
        "startColumnNumber" : 79,
        "endLineNumber" : 66,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int N=x.size();\n  int bnSize=2 * N - 1;\n  int direction=inverse ? -1 : 1;\n  ArrayList<FFT.Complex> an=new ArrayList<>();\n  ArrayList<FFT.Complex> bn=new ArrayList<>();\n  for (int i=0; i < bnSize; i++) {\n    bn.add(new FFT.Complex());\n  }\n  for (int i=0; i < N; i++) {\n    double angle=(i - N + 1) * (i - N + 1) * Math.PI / N * direction;\n    bn.set(i,new FFT.Complex(Math.cos(angle),Math.sin(angle)));\n    bn.set(bnSize - i - 1,new FFT.Complex(Math.cos(angle),Math.sin(angle)));\n  }\n  for (int i=0; i < N; i++) {\n    double angle=-i * i * Math.PI / N * direction;\n    an.add(x.get(i).multiply(new FFT.Complex(Math.cos(angle),Math.sin(angle))));\n  }\n  ArrayList<FFT.Complex> convolution=ConvolutionFFT.convolutionFFT(an,bn);\n  for (int i=0; i < N; i++) {\n    double angle=-1 * i * i* Math.PI / N * direction;\n    FFT.Complex bk=new FFT.Complex(Math.cos(angle),Math.sin(angle));\n    x.set(i,bk.multiply(convolution.get(i + N - 1)));\n  }\n  if (inverse) {\n    for (int i=0; i < N; i++) {\n      FFT.Complex z=x.get(i);\n      x.set(i,z.divide(N));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 314,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2238,
        "startLineNumber" : 14,
        "startColumnNumber" : 4,
        "endLineNumber" : 66,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Bluestein's FFT Algorithm. <p> More info: https://en.wikipedia.org/wiki/Chirp_Z-transform#Bluestein.27s_algorithm http://tka4.org/materials/lib/Articles-Books/Numerical%20Algorithms/Hartley_Trasform/Bluestein%27s%20FFT%20algorithm%20-%20Wikipedia,%20the%20free%20encyclopedia.htm\n * @param x The discrete signal which is then converted to the FFT or theIFFT of signal x.\n * @param inverse True if you want to find the inverse FFT.\n */\npublic static void fftBluestein(ArrayList<FFT.Complex> x,boolean inverse){\n  int N=x.size();\n  int bnSize=2 * N - 1;\n  int direction=inverse ? -1 : 1;\n  ArrayList<FFT.Complex> an=new ArrayList<>();\n  ArrayList<FFT.Complex> bn=new ArrayList<>();\n  for (int i=0; i < bnSize; i++) {\n    bn.add(new FFT.Complex());\n  }\n  for (int i=0; i < N; i++) {\n    double angle=(i - N + 1) * (i - N + 1) * Math.PI / N * direction;\n    bn.set(i,new FFT.Complex(Math.cos(angle),Math.sin(angle)));\n    bn.set(bnSize - i - 1,new FFT.Complex(Math.cos(angle),Math.sin(angle)));\n  }\n  for (int i=0; i < N; i++) {\n    double angle=-i * i * Math.PI / N * direction;\n    an.add(x.get(i).multiply(new FFT.Complex(Math.cos(angle),Math.sin(angle))));\n  }\n  ArrayList<FFT.Complex> convolution=ConvolutionFFT.convolutionFFT(an,bn);\n  for (int i=0; i < N; i++) {\n    double angle=-1 * i * i* Math.PI / N * direction;\n    FFT.Complex bk=new FFT.Complex(Math.cos(angle),Math.sin(angle));\n    x.set(i,bk.multiply(convolution.get(i + N - 1)));\n  }\n  if (inverse) {\n    for (int i=0; i < N; i++) {\n      FFT.Complex z=x.get(i);\n      x.set(i,z.divide(N));\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 332,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 39,
        "startColumnNumber" : 12,
        "endLineNumber" : 39,
        "endColumnNumber" : 79
      },
      "nodeContext" : "double angle=(i - N + 1) * (i - N + 1) * Math.PI / N * direction;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 24,
      "astHeight" : 9
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "direction",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 46,
      "startColumnNumber" : 50,
      "endLineNumber" : 46,
      "endColumnNumber" : 59
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 46,
        "startColumnNumber" : 27,
        "endLineNumber" : 46,
        "endColumnNumber" : 59
      },
      "nodeContext" : "-i * i * Math.PI / N * direction",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 46,
        "startColumnNumber" : 19,
        "endLineNumber" : 46,
        "endColumnNumber" : 59
      },
      "nodeContext" : "angle=-i * i * Math.PI / N * direction",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 46,
        "startColumnNumber" : 12,
        "endLineNumber" : 46,
        "endColumnNumber" : 60
      },
      "nodeContext" : "double angle=-i * i * Math.PI / N * direction;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 165,
        "startLineNumber" : 45,
        "startColumnNumber" : 36,
        "endLineNumber" : 48,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  double angle=-i * i * Math.PI / N * direction;\n  an.add(x.get(i).multiply(new FFT.Complex(Math.cos(angle),Math.sin(angle))));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 39,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 193,
        "startLineNumber" : 45,
        "startColumnNumber" : 8,
        "endLineNumber" : 48,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < N; i++) {\n  double angle=-i * i * Math.PI / N * direction;\n  an.add(x.get(i).multiply(new FFT.Complex(Math.cos(angle),Math.sin(angle))));\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 50,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1639,
        "startLineNumber" : 26,
        "startColumnNumber" : 79,
        "endLineNumber" : 66,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int N=x.size();\n  int bnSize=2 * N - 1;\n  int direction=inverse ? -1 : 1;\n  ArrayList<FFT.Complex> an=new ArrayList<>();\n  ArrayList<FFT.Complex> bn=new ArrayList<>();\n  for (int i=0; i < bnSize; i++) {\n    bn.add(new FFT.Complex());\n  }\n  for (int i=0; i < N; i++) {\n    double angle=(i - N + 1) * (i - N + 1) * Math.PI / N * direction;\n    bn.set(i,new FFT.Complex(Math.cos(angle),Math.sin(angle)));\n    bn.set(bnSize - i - 1,new FFT.Complex(Math.cos(angle),Math.sin(angle)));\n  }\n  for (int i=0; i < N; i++) {\n    double angle=-i * i * Math.PI / N * direction;\n    an.add(x.get(i).multiply(new FFT.Complex(Math.cos(angle),Math.sin(angle))));\n  }\n  ArrayList<FFT.Complex> convolution=ConvolutionFFT.convolutionFFT(an,bn);\n  for (int i=0; i < N; i++) {\n    double angle=-1 * i * i* Math.PI / N * direction;\n    FFT.Complex bk=new FFT.Complex(Math.cos(angle),Math.sin(angle));\n    x.set(i,bk.multiply(convolution.get(i + N - 1)));\n  }\n  if (inverse) {\n    for (int i=0; i < N; i++) {\n      FFT.Complex z=x.get(i);\n      x.set(i,z.divide(N));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 314,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2238,
        "startLineNumber" : 14,
        "startColumnNumber" : 4,
        "endLineNumber" : 66,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Bluestein's FFT Algorithm. <p> More info: https://en.wikipedia.org/wiki/Chirp_Z-transform#Bluestein.27s_algorithm http://tka4.org/materials/lib/Articles-Books/Numerical%20Algorithms/Hartley_Trasform/Bluestein%27s%20FFT%20algorithm%20-%20Wikipedia,%20the%20free%20encyclopedia.htm\n * @param x The discrete signal which is then converted to the FFT or theIFFT of signal x.\n * @param inverse True if you want to find the inverse FFT.\n */\npublic static void fftBluestein(ArrayList<FFT.Complex> x,boolean inverse){\n  int N=x.size();\n  int bnSize=2 * N - 1;\n  int direction=inverse ? -1 : 1;\n  ArrayList<FFT.Complex> an=new ArrayList<>();\n  ArrayList<FFT.Complex> bn=new ArrayList<>();\n  for (int i=0; i < bnSize; i++) {\n    bn.add(new FFT.Complex());\n  }\n  for (int i=0; i < N; i++) {\n    double angle=(i - N + 1) * (i - N + 1) * Math.PI / N * direction;\n    bn.set(i,new FFT.Complex(Math.cos(angle),Math.sin(angle)));\n    bn.set(bnSize - i - 1,new FFT.Complex(Math.cos(angle),Math.sin(angle)));\n  }\n  for (int i=0; i < N; i++) {\n    double angle=-i * i * Math.PI / N * direction;\n    an.add(x.get(i).multiply(new FFT.Complex(Math.cos(angle),Math.sin(angle))));\n  }\n  ArrayList<FFT.Complex> convolution=ConvolutionFFT.convolutionFFT(an,bn);\n  for (int i=0; i < N; i++) {\n    double angle=-1 * i * i* Math.PI / N * direction;\n    FFT.Complex bk=new FFT.Complex(Math.cos(angle),Math.sin(angle));\n    x.set(i,bk.multiply(convolution.get(i + N - 1)));\n  }\n  if (inverse) {\n    for (int i=0; i < N; i++) {\n      FFT.Complex z=x.get(i);\n      x.set(i,z.divide(N));\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 332,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 48,
        "startLineNumber" : 46,
        "startColumnNumber" : 12,
        "endLineNumber" : 46,
        "endColumnNumber" : 60
      },
      "nodeContext" : "double angle=-i * i * Math.PI / N * direction;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 15,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : null
  }, {
    "nodeContext" : "direction",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 54,
      "startColumnNumber" : 54,
      "endLineNumber" : 54,
      "endColumnNumber" : 63
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 54,
        "startColumnNumber" : 27,
        "endLineNumber" : 54,
        "endColumnNumber" : 63
      },
      "nodeContext" : "-1 * i * i* Math.PI / N * direction",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 54,
        "startColumnNumber" : 19,
        "endLineNumber" : 54,
        "endColumnNumber" : 63
      },
      "nodeContext" : "angle=-1 * i * i* Math.PI / N * direction",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 54,
        "startColumnNumber" : 12,
        "endLineNumber" : 54,
        "endColumnNumber" : 64
      },
      "nodeContext" : "double angle=-1 * i * i* Math.PI / N * direction;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 223,
        "startLineNumber" : 53,
        "startColumnNumber" : 36,
        "endLineNumber" : 57,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  double angle=-1 * i * i* Math.PI / N * direction;\n  FFT.Complex bk=new FFT.Complex(Math.cos(angle),Math.sin(angle));\n  x.set(i,bk.multiply(convolution.get(i + N - 1)));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 53,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 251,
        "startLineNumber" : 53,
        "startColumnNumber" : 8,
        "endLineNumber" : 57,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=0; i < N; i++) {\n  double angle=-1 * i * i* Math.PI / N * direction;\n  FFT.Complex bk=new FFT.Complex(Math.cos(angle),Math.sin(angle));\n  x.set(i,bk.multiply(convolution.get(i + N - 1)));\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 64,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1639,
        "startLineNumber" : 26,
        "startColumnNumber" : 79,
        "endLineNumber" : 66,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int N=x.size();\n  int bnSize=2 * N - 1;\n  int direction=inverse ? -1 : 1;\n  ArrayList<FFT.Complex> an=new ArrayList<>();\n  ArrayList<FFT.Complex> bn=new ArrayList<>();\n  for (int i=0; i < bnSize; i++) {\n    bn.add(new FFT.Complex());\n  }\n  for (int i=0; i < N; i++) {\n    double angle=(i - N + 1) * (i - N + 1) * Math.PI / N * direction;\n    bn.set(i,new FFT.Complex(Math.cos(angle),Math.sin(angle)));\n    bn.set(bnSize - i - 1,new FFT.Complex(Math.cos(angle),Math.sin(angle)));\n  }\n  for (int i=0; i < N; i++) {\n    double angle=-i * i * Math.PI / N * direction;\n    an.add(x.get(i).multiply(new FFT.Complex(Math.cos(angle),Math.sin(angle))));\n  }\n  ArrayList<FFT.Complex> convolution=ConvolutionFFT.convolutionFFT(an,bn);\n  for (int i=0; i < N; i++) {\n    double angle=-1 * i * i* Math.PI / N * direction;\n    FFT.Complex bk=new FFT.Complex(Math.cos(angle),Math.sin(angle));\n    x.set(i,bk.multiply(convolution.get(i + N - 1)));\n  }\n  if (inverse) {\n    for (int i=0; i < N; i++) {\n      FFT.Complex z=x.get(i);\n      x.set(i,z.divide(N));\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 314,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2238,
        "startLineNumber" : 14,
        "startColumnNumber" : 4,
        "endLineNumber" : 66,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Bluestein's FFT Algorithm. <p> More info: https://en.wikipedia.org/wiki/Chirp_Z-transform#Bluestein.27s_algorithm http://tka4.org/materials/lib/Articles-Books/Numerical%20Algorithms/Hartley_Trasform/Bluestein%27s%20FFT%20algorithm%20-%20Wikipedia,%20the%20free%20encyclopedia.htm\n * @param x The discrete signal which is then converted to the FFT or theIFFT of signal x.\n * @param inverse True if you want to find the inverse FFT.\n */\npublic static void fftBluestein(ArrayList<FFT.Complex> x,boolean inverse){\n  int N=x.size();\n  int bnSize=2 * N - 1;\n  int direction=inverse ? -1 : 1;\n  ArrayList<FFT.Complex> an=new ArrayList<>();\n  ArrayList<FFT.Complex> bn=new ArrayList<>();\n  for (int i=0; i < bnSize; i++) {\n    bn.add(new FFT.Complex());\n  }\n  for (int i=0; i < N; i++) {\n    double angle=(i - N + 1) * (i - N + 1) * Math.PI / N * direction;\n    bn.set(i,new FFT.Complex(Math.cos(angle),Math.sin(angle)));\n    bn.set(bnSize - i - 1,new FFT.Complex(Math.cos(angle),Math.sin(angle)));\n  }\n  for (int i=0; i < N; i++) {\n    double angle=-i * i * Math.PI / N * direction;\n    an.add(x.get(i).multiply(new FFT.Complex(Math.cos(angle),Math.sin(angle))));\n  }\n  ArrayList<FFT.Complex> convolution=ConvolutionFFT.convolutionFFT(an,bn);\n  for (int i=0; i < N; i++) {\n    double angle=-1 * i * i* Math.PI / N * direction;\n    FFT.Complex bk=new FFT.Complex(Math.cos(angle),Math.sin(angle));\n    x.set(i,bk.multiply(convolution.get(i + N - 1)));\n  }\n  if (inverse) {\n    for (int i=0; i < N; i++) {\n      FFT.Complex z=x.get(i);\n      x.set(i,z.divide(N));\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 332,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 54,
        "startColumnNumber" : 12,
        "endLineNumber" : 54,
        "endColumnNumber" : 64
      },
      "nodeContext" : "double angle=-1 * i * i* Math.PI / N * direction;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 16,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : null
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 39,
    "startColumnNumber" : 69,
    "endLineNumber" : 39,
    "endColumnNumber" : 78
  }, {
    "charLength" : 9,
    "startLineNumber" : 46,
    "startColumnNumber" : 50,
    "endLineNumber" : 46,
    "endColumnNumber" : 59
  }, {
    "charLength" : 9,
    "startLineNumber" : 54,
    "startColumnNumber" : 54,
    "endLineNumber" : 54,
    "endColumnNumber" : 63
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 5
  } ]
}