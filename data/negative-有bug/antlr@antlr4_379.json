{
  "id" : 379,
  "expression" : "tokens.getTokenStream().getText()",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/runtime-testsuite/test/org/antlr/v4/test/runtime/java/api/TestTokenStreamRewriter.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "tokens.getTokenStream().getText()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 33,
      "startLineNumber" : 155,
      "startColumnNumber" : 18,
      "endLineNumber" : 155,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 155,
        "startColumnNumber" : 9,
        "endLineNumber" : 155,
        "endColumnNumber" : 51
      },
      "nodeContext" : "result=tokens.getTokenStream().getText()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 155,
        "startColumnNumber" : 2,
        "endLineNumber" : 155,
        "endColumnNumber" : 52
      },
      "nodeContext" : "String result=tokens.getTokenStream().getText();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1098,
        "startLineNumber" : 135,
        "startColumnNumber" : 60,
        "endLineNumber" : 170,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  LexerGrammar g=new LexerGrammar(\"lexer grammar T;\\n\" + \"ID : 'a'..'z'+;\\n\" + \"INT : '0'..'9'+;\\n\"+ \"SEMI : ';';\\n\"+ \"MUL : '*';\\n\"+ \"ASSIGN : '=';\\n\"+ \"WS : ' '+;\\n\");\n  String input=\"x = 3 * 0;\";\n  LexerInterpreter lexEngine=g.createLexerInterpreter(new ANTLRInputStream(input));\n  CommonTokenStream stream=new CommonTokenStream(lexEngine);\n  stream.fill();\n  TokenStreamRewriter tokens=new TokenStreamRewriter(stream);\n  tokens.replace(4,8,\"0\");\n  stream.fill();\n  String result=tokens.getTokenStream().getText();\n  String expecting=\"x = 3 * 0;\";\n  assertEquals(expecting,result);\n  result=tokens.getText();\n  expecting=\"x = 0;\";\n  assertEquals(expecting,result);\n  result=tokens.getText(Interval.of(0,9));\n  expecting=\"x = 0;\";\n  assertEquals(expecting,result);\n  result=tokens.getText(Interval.of(4,8));\n  expecting=\"0\";\n  assertEquals(expecting,result);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 144,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1157,
        "startLineNumber" : 135,
        "startColumnNumber" : 1,
        "endLineNumber" : 170,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void testToStringStartStop() throws Exception {\n  LexerGrammar g=new LexerGrammar(\"lexer grammar T;\\n\" + \"ID : 'a'..'z'+;\\n\" + \"INT : '0'..'9'+;\\n\"+ \"SEMI : ';';\\n\"+ \"MUL : '*';\\n\"+ \"ASSIGN : '=';\\n\"+ \"WS : ' '+;\\n\");\n  String input=\"x = 3 * 0;\";\n  LexerInterpreter lexEngine=g.createLexerInterpreter(new ANTLRInputStream(input));\n  CommonTokenStream stream=new CommonTokenStream(lexEngine);\n  stream.fill();\n  TokenStreamRewriter tokens=new TokenStreamRewriter(stream);\n  tokens.replace(4,8,\"0\");\n  stream.fill();\n  String result=tokens.getTokenStream().getText();\n  String expecting=\"x = 3 * 0;\";\n  assertEquals(expecting,result);\n  result=tokens.getText();\n  expecting=\"x = 0;\";\n  assertEquals(expecting,result);\n  result=tokens.getText(Interval.of(0,9));\n  expecting=\"x = 0;\";\n  assertEquals(expecting,result);\n  result=tokens.getText(Interval.of(4,8));\n  expecting=\"0\";\n  assertEquals(expecting,result);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 152,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 155,
        "startColumnNumber" : 2,
        "endLineNumber" : 155,
        "endColumnNumber" : 52
      },
      "nodeContext" : "String result=tokens.getTokenStream().getText();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 33,
    "startLineNumber" : 155,
    "startColumnNumber" : 18,
    "endLineNumber" : 155,
    "endColumnNumber" : 51
  } ],
  "layoutRelationDataList" : [ ]
}