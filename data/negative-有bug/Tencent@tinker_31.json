{
  "id" : 31,
  "expression" : "throwable.getMessage()",
  "projectName" : "Tencent@tinker",
  "commitID" : "df9e1d29420d53a650ab73569d828a22e3cfe728",
  "filePath" : "/tinker-sample-android/app/src/main/java/tinker/sample/android/crash/SampleUncaughtExceptionHandler.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "throwable.getMessage()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 91,
      "startColumnNumber" : 63,
      "endLineNumber" : 91,
      "endColumnNumber" : 85
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 91,
        "startColumnNumber" : 63,
        "endLineNumber" : 91,
        "endColumnNumber" : 115
      },
      "nodeContext" : "throwable.getMessage().contains(DALVIK_XPOSED_CRASH)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 91,
        "startColumnNumber" : 20,
        "endLineNumber" : 91,
        "endColumnNumber" : 115
      },
      "nodeContext" : "throwable instanceof IllegalAccessError && throwable.getMessage().contains(DALVIK_XPOSED_CRASH)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 229,
        "startLineNumber" : 91,
        "startColumnNumber" : 16,
        "endLineNumber" : 94,
        "endColumnNumber" : 17
      },
      "nodeContext" : "if (throwable instanceof IllegalAccessError && throwable.getMessage().contains(DALVIK_XPOSED_CRASH)) {\n  isCausedByXposed=true;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1001,
        "startLineNumber" : 87,
        "startColumnNumber" : 26,
        "endLineNumber" : 106,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  boolean isCausedByXposed=false;\n  if (throwable instanceof IllegalAccessError && throwable.getMessage().contains(DALVIK_XPOSED_CRASH)) {\n    isCausedByXposed=true;\n  }\n  if (isCausedByXposed) {\n    SampleTinkerReport.onXposedCrash();\n    TinkerLog.e(TAG,\"have xposed: just clean tinker\");\n    ShareTinkerInternals.killAllOtherProcess(applicationLike.getApplication());\n    TinkerApplicationHelper.cleanPatch(applicationLike);\n    ShareTinkerInternals.setTinkerDisableWithSharedPreferences(applicationLike.getApplication());\n    return;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 56,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1015,
        "startLineNumber" : 87,
        "startColumnNumber" : 12,
        "endLineNumber" : 106,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (isXposed) {\n  boolean isCausedByXposed=false;\n  if (throwable instanceof IllegalAccessError && throwable.getMessage().contains(DALVIK_XPOSED_CRASH)) {\n    isCausedByXposed=true;\n  }\n  if (isCausedByXposed) {\n    SampleTinkerReport.onXposedCrash();\n    TinkerLog.e(TAG,\"have xposed: just clean tinker\");\n    ShareTinkerInternals.killAllOtherProcess(applicationLike.getApplication());\n    TinkerApplicationHelper.cleanPatch(applicationLike);\n    ShareTinkerInternals.setTinkerDisableWithSharedPreferences(applicationLike.getApplication());\n    return;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 58,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 1212,
        "startLineNumber" : 81,
        "startColumnNumber" : 34,
        "endLineNumber" : 108,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (!isXposed) {\n    isXposed=Utils.isXposedExists(throwable);\n  }\n  if (isXposed) {\n    boolean isCausedByXposed=false;\n    if (throwable instanceof IllegalAccessError && throwable.getMessage().contains(DALVIK_XPOSED_CRASH)) {\n      isCausedByXposed=true;\n    }\n    if (isCausedByXposed) {\n      SampleTinkerReport.onXposedCrash();\n      TinkerLog.e(TAG,\"have xposed: just clean tinker\");\n      ShareTinkerInternals.killAllOtherProcess(applicationLike.getApplication());\n      TinkerApplicationHelper.cleanPatch(applicationLike);\n      ShareTinkerInternals.setTinkerDisableWithSharedPreferences(applicationLike.getApplication());\n      return;\n    }\n  }\n  throwable=throwable.getCause();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 76,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1238,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 108,
        "endColumnNumber" : 9
      },
      "nodeContext" : "while (throwable != null) {\n  if (!isXposed) {\n    isXposed=Utils.isXposedExists(throwable);\n  }\n  if (isXposed) {\n    boolean isCausedByXposed=false;\n    if (throwable instanceof IllegalAccessError && throwable.getMessage().contains(DALVIK_XPOSED_CRASH)) {\n      isCausedByXposed=true;\n    }\n    if (isCausedByXposed) {\n      SampleTinkerReport.onXposedCrash();\n      TinkerLog.e(TAG,\"have xposed: just clean tinker\");\n      ShareTinkerInternals.killAllOtherProcess(applicationLike.getApplication());\n      TinkerApplicationHelper.cleanPatch(applicationLike);\n      ShareTinkerInternals.setTinkerDisableWithSharedPreferences(applicationLike.getApplication());\n      return;\n    }\n  }\n  throwable=throwable.getCause();\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 80,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1739,
        "startLineNumber" : 67,
        "startColumnNumber" : 61,
        "endLineNumber" : 109,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ApplicationLike applicationLike=TinkerManager.getTinkerApplicationLike();\n  if (applicationLike == null || applicationLike.getApplication() == null) {\n    TinkerLog.w(TAG,\"applicationlike is null\");\n    return;\n  }\n  if (!TinkerApplicationHelper.isTinkerLoadSuccess(applicationLike)) {\n    TinkerLog.w(TAG,\"tinker is not loaded\");\n    return;\n  }\n  Throwable throwable=ex;\n  boolean isXposed=false;\n  while (throwable != null) {\n    if (!isXposed) {\n      isXposed=Utils.isXposedExists(throwable);\n    }\n    if (isXposed) {\n      boolean isCausedByXposed=false;\n      if (throwable instanceof IllegalAccessError && throwable.getMessage().contains(DALVIK_XPOSED_CRASH)) {\n        isCausedByXposed=true;\n      }\n      if (isCausedByXposed) {\n        SampleTinkerReport.onXposedCrash();\n        TinkerLog.e(TAG,\"have xposed: just clean tinker\");\n        ShareTinkerInternals.killAllOtherProcess(applicationLike.getApplication());\n        TinkerApplicationHelper.cleanPatch(applicationLike);\n        ShareTinkerInternals.setTinkerDisableWithSharedPreferences(applicationLike.getApplication());\n        return;\n      }\n    }\n    throwable=throwable.getCause();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 132,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2177,
        "startLineNumber" : 61,
        "startColumnNumber" : 4,
        "endLineNumber" : 109,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Such as Xposed, if it try to load some class before we load from patch files. With dalvik, it will crash with \"Class ref in pre-verified class resolved to unexpected implementation\". With art, it may crash at some times. But we can't know the actual crash type. If it use Xposed, we can just clean patch or mention user to uninstall it.\n */\nprivate void tinkerPreVerifiedCrashHandler(Throwable ex){\n  ApplicationLike applicationLike=TinkerManager.getTinkerApplicationLike();\n  if (applicationLike == null || applicationLike.getApplication() == null) {\n    TinkerLog.w(TAG,\"applicationlike is null\");\n    return;\n  }\n  if (!TinkerApplicationHelper.isTinkerLoadSuccess(applicationLike)) {\n    TinkerLog.w(TAG,\"tinker is not loaded\");\n    return;\n  }\n  Throwable throwable=ex;\n  boolean isXposed=false;\n  while (throwable != null) {\n    if (!isXposed) {\n      isXposed=Utils.isXposedExists(throwable);\n    }\n    if (isXposed) {\n      boolean isCausedByXposed=false;\n      if (throwable instanceof IllegalAccessError && throwable.getMessage().contains(DALVIK_XPOSED_CRASH)) {\n        isCausedByXposed=true;\n      }\n      if (isCausedByXposed) {\n        SampleTinkerReport.onXposedCrash();\n        TinkerLog.e(TAG,\"have xposed: just clean tinker\");\n        ShareTinkerInternals.killAllOtherProcess(applicationLike.getApplication());\n        TinkerApplicationHelper.cleanPatch(applicationLike);\n        ShareTinkerInternals.setTinkerDisableWithSharedPreferences(applicationLike.getApplication());\n        return;\n      }\n    }\n    throwable=throwable.getCause();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 141,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 91,
        "startColumnNumber" : 20,
        "endLineNumber" : 91,
        "endColumnNumber" : 115
      },
      "nodeContext" : "throwable instanceof IllegalAccessError && throwable.getMessage().contains(DALVIK_XPOSED_CRASH)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 22,
    "startLineNumber" : 91,
    "startColumnNumber" : 63,
    "endLineNumber" : 91,
    "endColumnNumber" : 85
  } ],
  "layoutRelationDataList" : [ ]
}