{
  "id" : 14,
  "expression" : "\"%s_%s\"",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/core/src/main/java/org/apache/druid/math/expr/ExprListenerImpl.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"%s_%s\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 492,
      "startColumnNumber" : 46,
      "endLineNumber" : 492,
      "endColumnNumber" : 53
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 492,
        "startColumnNumber" : 27,
        "endLineNumber" : 492,
        "endColumnNumber" : 80
      },
      "nodeContext" : "StringUtils.format(\"%s_%s\",binding,uniqueCounter++)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 492,
        "startColumnNumber" : 8,
        "endLineNumber" : 492,
        "endColumnNumber" : 80
      },
      "nodeContext" : "uniqueIdentifier=StringUtils.format(\"%s_%s\",binding,uniqueCounter++)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 492,
        "startColumnNumber" : 8,
        "endLineNumber" : 492,
        "endColumnNumber" : 81
      },
      "nodeContext" : "uniqueIdentifier=StringUtils.format(\"%s_%s\",binding,uniqueCounter++);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 91,
        "startLineNumber" : 491,
        "startColumnNumber" : 59,
        "endLineNumber" : 493,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  uniqueIdentifier=StringUtils.format(\"%s_%s\",binding,uniqueCounter++);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 144,
        "startLineNumber" : 491,
        "startColumnNumber" : 6,
        "endLineNumber" : 493,
        "endColumnNumber" : 7
      },
      "nodeContext" : "while (uniqueIdentifiers.contains(uniqueIdentifier)) {\n  uniqueIdentifier=StringUtils.format(\"%s_%s\",binding,uniqueCounter++);\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 306,
        "startLineNumber" : 489,
        "startColumnNumber" : 46,
        "endLineNumber" : 496,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  String uniqueIdentifier=binding;\n  while (uniqueIdentifiers.contains(uniqueIdentifier)) {\n    uniqueIdentifier=StringUtils.format(\"%s_%s\",binding,uniqueCounter++);\n  }\n  uniqueIdentifiers.add(uniqueIdentifier);\n  return new IdentifierExpr(uniqueIdentifier,binding);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 34,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 348,
        "startLineNumber" : 489,
        "startColumnNumber" : 4,
        "endLineNumber" : 496,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!lambdaIdentifiers.contains(binding)) {\n  String uniqueIdentifier=binding;\n  while (uniqueIdentifiers.contains(uniqueIdentifier)) {\n    uniqueIdentifier=StringUtils.format(\"%s_%s\",binding,uniqueCounter++);\n  }\n  uniqueIdentifiers.add(uniqueIdentifier);\n  return new IdentifierExpr(uniqueIdentifier,binding);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 40,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 398,
        "startLineNumber" : 488,
        "startColumnNumber" : 2,
        "endLineNumber" : 498,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!lambdaIdentifiers.contains(binding)) {\n    String uniqueIdentifier=binding;\n    while (uniqueIdentifiers.contains(uniqueIdentifier)) {\n      uniqueIdentifier=StringUtils.format(\"%s_%s\",binding,uniqueCounter++);\n    }\n    uniqueIdentifiers.add(uniqueIdentifier);\n    return new IdentifierExpr(uniqueIdentifier,binding);\n  }\n  return new IdentifierExpr(binding);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 46,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1163,
        "startLineNumber" : 478,
        "startColumnNumber" : 2,
        "endLineNumber" : 498,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * All  {@link IdentifierExpr} that are *not* bound to a {@link LambdaExpr} identifier, will recieve a unique{@link IdentifierExpr#identifier} value which may or may not be the same as the{@link IdentifierExpr#binding} value. {@link LambdaExpr} identifiers however, will always have{@link IdentifierExpr#identifier} be the same as {@link IdentifierExpr#binding} because they havesynthetic bindings set at evaluation time. This is done to aid in analysis needed for the automatic expression translation which maps scalar expressions to multi-value inputs. See {@link Parser#applyUnappliedBindings(Expr,Expr.BindingAnalysis,List)}} for additional details.\n */\nprivate IdentifierExpr createIdentifierExpr(String binding){\n  if (!lambdaIdentifiers.contains(binding)) {\n    String uniqueIdentifier=binding;\n    while (uniqueIdentifiers.contains(uniqueIdentifier)) {\n      uniqueIdentifier=StringUtils.format(\"%s_%s\",binding,uniqueCounter++);\n    }\n    uniqueIdentifiers.add(uniqueIdentifier);\n    return new IdentifierExpr(uniqueIdentifier,binding);\n  }\n  return new IdentifierExpr(binding);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 56,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 492,
        "startColumnNumber" : 8,
        "endLineNumber" : 492,
        "endColumnNumber" : 81
      },
      "nodeContext" : "uniqueIdentifier=StringUtils.format(\"%s_%s\",binding,uniqueCounter++);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 492,
    "startColumnNumber" : 46,
    "endLineNumber" : 492,
    "endColumnNumber" : 53
  } ],
  "layoutRelationDataList" : [ ]
}