{
  "id" : 363,
  "expression" : "successors",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/src/main/java/com/google/devtools/build/lib/graph/Digraph.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "successors",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 710,
      "startColumnNumber" : 35,
      "endLineNumber" : 710,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 710,
        "startColumnNumber" : 35,
        "endLineNumber" : 710,
        "endColumnNumber" : 52
      },
      "nodeContext" : "successors.size()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,arguments]",
      "nodePosition" : {
        "charLength" : 39,
        "startLineNumber" : 710,
        "startColumnNumber" : 35,
        "endLineNumber" : 710,
        "endColumnNumber" : 74
      },
      "nodeContext" : "successors.size() + predecessors.size()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 710,
        "startColumnNumber" : 19,
        "endLineNumber" : 710,
        "endColumnNumber" : 75
      },
      "nodeContext" : "new ArrayList<>(successors.size() + predecessors.size())",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 710,
        "startColumnNumber" : 6,
        "endLineNumber" : 710,
        "endColumnNumber" : 75
      },
      "nodeContext" : "neighbours=new ArrayList<>(successors.size() + predecessors.size())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 710,
        "startColumnNumber" : 6,
        "endLineNumber" : 710,
        "endColumnNumber" : 76
      },
      "nodeContext" : "neighbours=new ArrayList<>(successors.size() + predecessors.size());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 281,
        "startLineNumber" : 709,
        "startColumnNumber" : 23,
        "endLineNumber" : 719,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  neighbours=new ArrayList<>(successors.size() + predecessors.size());\n  neighbours.addAll(successors);\n  neighbours.addAll(predecessors);\n  for (  Node<T> p : predecessors) {\n    for (    Node<T> s : successors) {\n      p.addEdge(s);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 50,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 300,
        "startLineNumber" : 709,
        "startColumnNumber" : 4,
        "endLineNumber" : 719,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (preserveOrder) {\n  neighbours=new ArrayList<>(successors.size() + predecessors.size());\n  neighbours.addAll(successors);\n  neighbours.addAll(predecessors);\n  for (  Node<T> p : predecessors) {\n    for (    Node<T> s : successors) {\n      p.addEdge(s);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 52,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 683,
        "startLineNumber" : 701,
        "startColumnNumber" : 77,
        "endLineNumber" : 727,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  checkNode(node);\n  Collection<Node<T>> predecessors=node.removeAllPredecessors();\n  Collection<Node<T>> successors=node.removeAllSuccessors();\n  List<Node<T>> neighbours=Collections.emptyList();\n  if (preserveOrder) {\n    neighbours=new ArrayList<>(successors.size() + predecessors.size());\n    neighbours.addAll(successors);\n    neighbours.addAll(predecessors);\n    for (    Node<T> p : predecessors) {\n      for (      Node<T> s : successors) {\n        p.addEdge(s);\n      }\n    }\n  }\n  Object del=nodes.remove(node.getLabel());\n  if (del != node) {\n    throw new IllegalStateException(del + \" \" + node);\n  }\n  return neighbours;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 125,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1293,
        "startLineNumber" : 676,
        "startColumnNumber" : 2,
        "endLineNumber" : 727,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Removes the specified node in the graph. <p>If preserveOrder flag is set than after removing node this method connects all predecessors and successors. <p>Let's consider graph <pre> a -> n -> c b -> n -> d </pre> After n removed the following edges will be added <pre> a -> c a -> d b -> c b -> d </pre>\n * @param node the node to remove (must be in the graph).\n * @param preserveOrder see removeNode(T, boolean).\n */\npublic Collection<Node<T>> removeNode(Node<T> node,boolean preserveOrder){\n  checkNode(node);\n  Collection<Node<T>> predecessors=node.removeAllPredecessors();\n  Collection<Node<T>> successors=node.removeAllSuccessors();\n  List<Node<T>> neighbours=Collections.emptyList();\n  if (preserveOrder) {\n    neighbours=new ArrayList<>(successors.size() + predecessors.size());\n    neighbours.addAll(successors);\n    neighbours.addAll(predecessors);\n    for (    Node<T> p : predecessors) {\n      for (      Node<T> s : successors) {\n        p.addEdge(s);\n      }\n    }\n  }\n  Object del=nodes.remove(node.getLabel());\n  if (del != node) {\n    throw new IllegalStateException(del + \" \" + node);\n  }\n  return neighbours;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 147,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 710,
        "startColumnNumber" : 6,
        "endLineNumber" : 710,
        "endColumnNumber" : 76
      },
      "nodeContext" : "neighbours=new ArrayList<>(successors.size() + predecessors.size());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.util.Collection<com.google.devtools.build.lib.graph.Node<T>>"
  }, {
    "nodeContext" : "successors",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 711,
      "startColumnNumber" : 24,
      "endLineNumber" : 711,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 711,
        "startColumnNumber" : 6,
        "endLineNumber" : 711,
        "endColumnNumber" : 35
      },
      "nodeContext" : "neighbours.addAll(successors)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 711,
        "startColumnNumber" : 6,
        "endLineNumber" : 711,
        "endColumnNumber" : 36
      },
      "nodeContext" : "neighbours.addAll(successors);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 281,
        "startLineNumber" : 709,
        "startColumnNumber" : 23,
        "endLineNumber" : 719,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  neighbours=new ArrayList<>(successors.size() + predecessors.size());\n  neighbours.addAll(successors);\n  neighbours.addAll(predecessors);\n  for (  Node<T> p : predecessors) {\n    for (    Node<T> s : successors) {\n      p.addEdge(s);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 50,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 300,
        "startLineNumber" : 709,
        "startColumnNumber" : 4,
        "endLineNumber" : 719,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (preserveOrder) {\n  neighbours=new ArrayList<>(successors.size() + predecessors.size());\n  neighbours.addAll(successors);\n  neighbours.addAll(predecessors);\n  for (  Node<T> p : predecessors) {\n    for (    Node<T> s : successors) {\n      p.addEdge(s);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 52,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 683,
        "startLineNumber" : 701,
        "startColumnNumber" : 77,
        "endLineNumber" : 727,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  checkNode(node);\n  Collection<Node<T>> predecessors=node.removeAllPredecessors();\n  Collection<Node<T>> successors=node.removeAllSuccessors();\n  List<Node<T>> neighbours=Collections.emptyList();\n  if (preserveOrder) {\n    neighbours=new ArrayList<>(successors.size() + predecessors.size());\n    neighbours.addAll(successors);\n    neighbours.addAll(predecessors);\n    for (    Node<T> p : predecessors) {\n      for (      Node<T> s : successors) {\n        p.addEdge(s);\n      }\n    }\n  }\n  Object del=nodes.remove(node.getLabel());\n  if (del != node) {\n    throw new IllegalStateException(del + \" \" + node);\n  }\n  return neighbours;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 125,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1293,
        "startLineNumber" : 676,
        "startColumnNumber" : 2,
        "endLineNumber" : 727,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Removes the specified node in the graph. <p>If preserveOrder flag is set than after removing node this method connects all predecessors and successors. <p>Let's consider graph <pre> a -> n -> c b -> n -> d </pre> After n removed the following edges will be added <pre> a -> c a -> d b -> c b -> d </pre>\n * @param node the node to remove (must be in the graph).\n * @param preserveOrder see removeNode(T, boolean).\n */\npublic Collection<Node<T>> removeNode(Node<T> node,boolean preserveOrder){\n  checkNode(node);\n  Collection<Node<T>> predecessors=node.removeAllPredecessors();\n  Collection<Node<T>> successors=node.removeAllSuccessors();\n  List<Node<T>> neighbours=Collections.emptyList();\n  if (preserveOrder) {\n    neighbours=new ArrayList<>(successors.size() + predecessors.size());\n    neighbours.addAll(successors);\n    neighbours.addAll(predecessors);\n    for (    Node<T> p : predecessors) {\n      for (      Node<T> s : successors) {\n        p.addEdge(s);\n      }\n    }\n  }\n  Object del=nodes.remove(node.getLabel());\n  if (del != node) {\n    throw new IllegalStateException(del + \" \" + node);\n  }\n  return neighbours;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 147,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 711,
        "startColumnNumber" : 6,
        "endLineNumber" : 711,
        "endColumnNumber" : 36
      },
      "nodeContext" : "neighbours.addAll(successors);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.Collection<com.google.devtools.build.lib.graph.Node<T>>"
  }, {
    "nodeContext" : "successors",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 715,
      "startColumnNumber" : 25,
      "endLineNumber" : 715,
      "endColumnNumber" : 35
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 715,
        "startColumnNumber" : 8,
        "endLineNumber" : 717,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Node<T> s : successors) {\n  p.addEdge(s);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 714,
        "startColumnNumber" : 37,
        "endLineNumber" : 718,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  for (  Node<T> s : successors) {\n    p.addEdge(s);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 714,
        "startColumnNumber" : 6,
        "endLineNumber" : 718,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (Node<T> p : predecessors) {\n  for (  Node<T> s : successors) {\n    p.addEdge(s);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 281,
        "startLineNumber" : 709,
        "startColumnNumber" : 23,
        "endLineNumber" : 719,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  neighbours=new ArrayList<>(successors.size() + predecessors.size());\n  neighbours.addAll(successors);\n  neighbours.addAll(predecessors);\n  for (  Node<T> p : predecessors) {\n    for (    Node<T> s : successors) {\n      p.addEdge(s);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 50,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 300,
        "startLineNumber" : 709,
        "startColumnNumber" : 4,
        "endLineNumber" : 719,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (preserveOrder) {\n  neighbours=new ArrayList<>(successors.size() + predecessors.size());\n  neighbours.addAll(successors);\n  neighbours.addAll(predecessors);\n  for (  Node<T> p : predecessors) {\n    for (    Node<T> s : successors) {\n      p.addEdge(s);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 52,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 683,
        "startLineNumber" : 701,
        "startColumnNumber" : 77,
        "endLineNumber" : 727,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  checkNode(node);\n  Collection<Node<T>> predecessors=node.removeAllPredecessors();\n  Collection<Node<T>> successors=node.removeAllSuccessors();\n  List<Node<T>> neighbours=Collections.emptyList();\n  if (preserveOrder) {\n    neighbours=new ArrayList<>(successors.size() + predecessors.size());\n    neighbours.addAll(successors);\n    neighbours.addAll(predecessors);\n    for (    Node<T> p : predecessors) {\n      for (      Node<T> s : successors) {\n        p.addEdge(s);\n      }\n    }\n  }\n  Object del=nodes.remove(node.getLabel());\n  if (del != node) {\n    throw new IllegalStateException(del + \" \" + node);\n  }\n  return neighbours;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 125,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1293,
        "startLineNumber" : 676,
        "startColumnNumber" : 2,
        "endLineNumber" : 727,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Removes the specified node in the graph. <p>If preserveOrder flag is set than after removing node this method connects all predecessors and successors. <p>Let's consider graph <pre> a -> n -> c b -> n -> d </pre> After n removed the following edges will be added <pre> a -> c a -> d b -> c b -> d </pre>\n * @param node the node to remove (must be in the graph).\n * @param preserveOrder see removeNode(T, boolean).\n */\npublic Collection<Node<T>> removeNode(Node<T> node,boolean preserveOrder){\n  checkNode(node);\n  Collection<Node<T>> predecessors=node.removeAllPredecessors();\n  Collection<Node<T>> successors=node.removeAllSuccessors();\n  List<Node<T>> neighbours=Collections.emptyList();\n  if (preserveOrder) {\n    neighbours=new ArrayList<>(successors.size() + predecessors.size());\n    neighbours.addAll(successors);\n    neighbours.addAll(predecessors);\n    for (    Node<T> p : predecessors) {\n      for (      Node<T> s : successors) {\n        p.addEdge(s);\n      }\n    }\n  }\n  Object del=nodes.remove(node.getLabel());\n  if (del != node) {\n    throw new IllegalStateException(del + \" \" + node);\n  }\n  return neighbours;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 147,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 715,
        "startColumnNumber" : 8,
        "endLineNumber" : 717,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Node<T> s : successors) {\n  p.addEdge(s);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.Collection<com.google.devtools.build.lib.graph.Node<T>>"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 710,
    "startColumnNumber" : 35,
    "endLineNumber" : 710,
    "endColumnNumber" : 45
  }, {
    "charLength" : 10,
    "startLineNumber" : 711,
    "startColumnNumber" : 24,
    "endLineNumber" : 711,
    "endColumnNumber" : 34
  }, {
    "charLength" : 10,
    "startLineNumber" : 715,
    "startColumnNumber" : 25,
    "endLineNumber" : 715,
    "endColumnNumber" : 35
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  } ]
}