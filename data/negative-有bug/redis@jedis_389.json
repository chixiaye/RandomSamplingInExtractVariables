{
  "id" : 389,
  "expression" : "aliasUpdate",
  "projectName" : "redis@jedis",
  "commitID" : "eaa5b16af93d575cd1f340c2cd23595dc29d5638",
  "filePath" : "/src/test/java/redis/clients/jedis/modules/RedisModulesPipelineTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "aliasUpdate",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 86,
      "startColumnNumber" : 23,
      "endLineNumber" : 86,
      "endColumnNumber" : 34
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 86,
        "startColumnNumber" : 23,
        "endLineNumber" : 86,
        "endColumnNumber" : 40
      },
      "nodeContext" : "aliasUpdate.get()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 86,
        "startColumnNumber" : 4,
        "endLineNumber" : 86,
        "endColumnNumber" : 41
      },
      "nodeContext" : "assertEquals(\"OK\",aliasUpdate.get())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 86,
        "startColumnNumber" : 4,
        "endLineNumber" : 86,
        "endColumnNumber" : 42
      },
      "nodeContext" : "assertEquals(\"OK\",aliasUpdate.get());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3033,
        "startLineNumber" : 39,
        "startColumnNumber" : 23,
        "endLineNumber" : 98,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Schema sc=new Schema().addTextField(\"title\",1.0).addTextField(\"body\",1.0);\n  String index=\"testindex\";\n  Map<String,Object> fields=new HashMap<>();\n  fields.put(\"title\",\"hello world\");\n  fields.put(\"body\",\"lorem ipsum\");\n  Connection c=createConnection();\n  Pipeline p=new Pipeline(c);\n  Response<String> create=p.ftCreate(index,IndexOptions.defaultOptions(),sc);\n  Response<String> alter=p.ftAlter(index,new Schema().addTextField(\"foo\",1.0));\n  p.hset(\"doc1\",toStringMap(fields));\n  p.hset(\"doc2\",toStringMap(fields));\n  Response<SearchResult> searchResult=p.ftSearch(index,new Query(\"hello world\"));\n  Response<SearchResult> searchBytesResult=p.ftSearch(index.getBytes(),new Query(\"hello world\"));\n  Response<AggregationResult> aggregateResult=p.ftAggregate(index,new AggregationBuilder().groupBy(\"@title\"));\n  Response<String> explain=p.ftExplain(index,new Query(\"@title:title_val\"));\n  Response<List<String>> explainCLI=p.ftExplainCLI(index,new Query(\"@title:title_val\"));\n  Response<Map<String,Object>> info=p.ftInfo(index);\n  Response<String> aliasAdd=p.ftAliasAdd(\"ALIAS1\",index);\n  Response<String> aliasUpdate=p.ftAliasUpdate(\"ALIAS2\",index);\n  Response<String> aliasDel=p.ftAliasDel(\"ALIAS2\");\n  Response<String> configSet=p.ftConfigSet(\"timeout\",\"100\");\n  Response<Map<String,String>> configGet=p.ftConfigGet(\"*\");\n  Response<String> configSetIndex=p.ftConfigSet(index,\"timeout\",\"100\");\n  Response<Map<String,String>> configGetIndex=p.ftConfigGet(index,\"*\");\n  Response<String> synUpdate=p.ftSynUpdate(index,\"foo\",\"bar\");\n  Response<Map<String,List<String>>> synDump=p.ftSynDump(index);\n  Response<String> dropIndex=p.ftDropIndex(index);\n  p.ftCreate(index,IndexOptions.defaultOptions(),sc);\n  Response<String> dropIndexDD=p.ftDropIndexDD(index);\n  p.sync();\n  c.close();\n  assertEquals(\"OK\",create.get());\n  assertEquals(\"OK\",alter.get());\n  assertEquals(\"OK\",alter.get());\n  assertEquals(2,searchResult.get().getTotalResults());\n  assertEquals(2,searchBytesResult.get().getTotalResults());\n  assertEquals(1,aggregateResult.get().totalResults);\n  assertNotNull(explain.get());\n  assertNotNull(explainCLI.get().get(0));\n  assertEquals(index,info.get().get(\"index_name\"));\n  assertEquals(\"OK\",aliasAdd.get());\n  assertEquals(\"OK\",aliasUpdate.get());\n  assertEquals(\"OK\",aliasDel.get());\n  assertEquals(\"OK\",configSet.get());\n  assertEquals(\"100\",configGet.get().get(\"TIMEOUT\"));\n  assertEquals(\"OK\",configSetIndex.get());\n  assertEquals(\"100\",configGetIndex.get().get(\"TIMEOUT\"));\n  assertEquals(\"OK\",synUpdate.get());\n  assertEquals(\"OK\",dropIndex.get());\n  assertEquals(\"OK\",dropIndexDD.get());\n  Map<String,List<String>> expected=new HashMap<>();\n  expected.put(\"bar\",Collections.singletonList(\"foo\"));\n  assertEquals(expected,synDump.get());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 577,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3063,
        "startLineNumber" : 38,
        "startColumnNumber" : 2,
        "endLineNumber" : 98,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void search(){\n  Schema sc=new Schema().addTextField(\"title\",1.0).addTextField(\"body\",1.0);\n  String index=\"testindex\";\n  Map<String,Object> fields=new HashMap<>();\n  fields.put(\"title\",\"hello world\");\n  fields.put(\"body\",\"lorem ipsum\");\n  Connection c=createConnection();\n  Pipeline p=new Pipeline(c);\n  Response<String> create=p.ftCreate(index,IndexOptions.defaultOptions(),sc);\n  Response<String> alter=p.ftAlter(index,new Schema().addTextField(\"foo\",1.0));\n  p.hset(\"doc1\",toStringMap(fields));\n  p.hset(\"doc2\",toStringMap(fields));\n  Response<SearchResult> searchResult=p.ftSearch(index,new Query(\"hello world\"));\n  Response<SearchResult> searchBytesResult=p.ftSearch(index.getBytes(),new Query(\"hello world\"));\n  Response<AggregationResult> aggregateResult=p.ftAggregate(index,new AggregationBuilder().groupBy(\"@title\"));\n  Response<String> explain=p.ftExplain(index,new Query(\"@title:title_val\"));\n  Response<List<String>> explainCLI=p.ftExplainCLI(index,new Query(\"@title:title_val\"));\n  Response<Map<String,Object>> info=p.ftInfo(index);\n  Response<String> aliasAdd=p.ftAliasAdd(\"ALIAS1\",index);\n  Response<String> aliasUpdate=p.ftAliasUpdate(\"ALIAS2\",index);\n  Response<String> aliasDel=p.ftAliasDel(\"ALIAS2\");\n  Response<String> configSet=p.ftConfigSet(\"timeout\",\"100\");\n  Response<Map<String,String>> configGet=p.ftConfigGet(\"*\");\n  Response<String> configSetIndex=p.ftConfigSet(index,\"timeout\",\"100\");\n  Response<Map<String,String>> configGetIndex=p.ftConfigGet(index,\"*\");\n  Response<String> synUpdate=p.ftSynUpdate(index,\"foo\",\"bar\");\n  Response<Map<String,List<String>>> synDump=p.ftSynDump(index);\n  Response<String> dropIndex=p.ftDropIndex(index);\n  p.ftCreate(index,IndexOptions.defaultOptions(),sc);\n  Response<String> dropIndexDD=p.ftDropIndexDD(index);\n  p.sync();\n  c.close();\n  assertEquals(\"OK\",create.get());\n  assertEquals(\"OK\",alter.get());\n  assertEquals(\"OK\",alter.get());\n  assertEquals(2,searchResult.get().getTotalResults());\n  assertEquals(2,searchBytesResult.get().getTotalResults());\n  assertEquals(1,aggregateResult.get().totalResults);\n  assertNotNull(explain.get());\n  assertNotNull(explainCLI.get().get(0));\n  assertEquals(index,info.get().get(\"index_name\"));\n  assertEquals(\"OK\",aliasAdd.get());\n  assertEquals(\"OK\",aliasUpdate.get());\n  assertEquals(\"OK\",aliasDel.get());\n  assertEquals(\"OK\",configSet.get());\n  assertEquals(\"100\",configGet.get().get(\"TIMEOUT\"));\n  assertEquals(\"OK\",configSetIndex.get());\n  assertEquals(\"100\",configGetIndex.get().get(\"TIMEOUT\"));\n  assertEquals(\"OK\",synUpdate.get());\n  assertEquals(\"OK\",dropIndex.get());\n  assertEquals(\"OK\",dropIndexDD.get());\n  Map<String,List<String>> expected=new HashMap<>();\n  expected.put(\"bar\",Collections.singletonList(\"foo\"));\n  assertEquals(expected,synDump.get());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 583,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 86,
        "startColumnNumber" : 4,
        "endLineNumber" : 86,
        "endColumnNumber" : 42
      },
      "nodeContext" : "assertEquals(\"OK\",aliasUpdate.get());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "redis.clients.jedis.Response<java.lang.String>"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 86,
    "startColumnNumber" : 23,
    "endLineNumber" : 86,
    "endColumnNumber" : 34
  } ],
  "layoutRelationDataList" : [ ]
}