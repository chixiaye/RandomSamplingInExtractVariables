{
  "id" : 14,
  "expression" : "value.indexOf('\\n')",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/runtime-testsuite/test/org/antlr/v4/test/runtime/RuntimeTestDescriptorParser.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "value.indexOf('\\n')",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 116,
      "startColumnNumber" : 13,
      "endLineNumber" : 116,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 116,
        "startColumnNumber" : 13,
        "endLineNumber" : 116,
        "endColumnNumber" : 35
      },
      "nodeContext" : "value.indexOf('\\n') >= 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 116,
        "startColumnNumber" : 8,
        "endLineNumber" : 118,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (value.indexOf('\\n') >= 0) {\n  value=value + \"\\n\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 207,
        "startLineNumber" : 113,
        "startColumnNumber" : 3,
        "endLineNumber" : 118,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (value.startsWith(\"\\\"\\\"\\\"\")) {\n  value=value.replace(\"\\\"\\\"\\\"\",\"\");\n}\n else if (value.indexOf('\\n') >= 0) {\n  value=value + \"\\n\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 28,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1426,
        "startLineNumber" : 107,
        "startColumnNumber" : 38,
        "endLineNumber" : 164,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String section=p.a;\n  String value=\"\";\n  if (p.b != null) {\n    value=p.b.trim();\n  }\n  if (value.startsWith(\"\\\"\\\"\\\"\")) {\n    value=value.replace(\"\\\"\\\"\\\"\",\"\");\n  }\n else   if (value.indexOf('\\n') >= 0) {\n    value=value + \"\\n\";\n  }\nswitch (section) {\ncase \"notes\":    notes=value;\n  break;\ncase \"type\":testType=Enum.valueOf(GrammarType.class,value);\nbreak;\ncase \"grammar\":grammarName=getGrammarName(value.split(\"\\n\")[0]);\ngrammar=value;\nbreak;\ncase \"slaveGrammar\":String gname=getGrammarName(value.split(\"\\n\")[0]);\nslaveGrammars.add(new Pair<>(gname,value));\ncase \"start\":startRule=value;\nbreak;\ncase \"input\":input=value;\nbreak;\ncase \"output\":output=value;\nbreak;\ncase \"errors\":errors=value;\nbreak;\ncase \"flags\":String[] flags=value.split(\"\\n\");\nfor (String f : flags) {\nswitch (f) {\ncase \"showDFA\":showDFA=true;\nbreak;\ncase \"showDiagnosticErrors\":showDiagnosticErrors=true;\nbreak;\n}\n}\nbreak;\ncase \"skip\":skipTargets=value.split(\"\\n\");\nbreak;\ndefault:throw new RuntimeException(\"Unknown descriptor section ignored: \" + section);\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1462,
        "startLineNumber" : 107,
        "startColumnNumber" : 2,
        "endLineNumber" : 164,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (Pair<String,String> p : pairs) {\n  String section=p.a;\n  String value=\"\";\n  if (p.b != null) {\n    value=p.b.trim();\n  }\n  if (value.startsWith(\"\\\"\\\"\\\"\")) {\n    value=value.replace(\"\\\"\\\"\\\"\",\"\");\n  }\n else   if (value.indexOf('\\n') >= 0) {\n    value=value + \"\\n\";\n  }\nswitch (section) {\ncase \"notes\":    notes=value;\n  break;\ncase \"type\":testType=Enum.valueOf(GrammarType.class,value);\nbreak;\ncase \"grammar\":grammarName=getGrammarName(value.split(\"\\n\")[0]);\ngrammar=value;\nbreak;\ncase \"slaveGrammar\":String gname=getGrammarName(value.split(\"\\n\")[0]);\nslaveGrammars.add(new Pair<>(gname,value));\ncase \"start\":startRule=value;\nbreak;\ncase \"input\":input=value;\nbreak;\ncase \"output\":output=value;\nbreak;\ncase \"errors\":errors=value;\nbreak;\ncase \"flags\":String[] flags=value.split(\"\\n\");\nfor (String f : flags) {\nswitch (f) {\ncase \"showDFA\":showDFA=true;\nbreak;\ncase \"showDiagnosticErrors\":showDiagnosticErrors=true;\nbreak;\n}\n}\nbreak;\ncase \"skip\":skipTargets=value.split(\"\\n\");\nbreak;\ndefault:throw new RuntimeException(\"Unknown descriptor section ignored: \" + section);\n}\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 217,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2846,
        "startLineNumber" : 66,
        "startColumnNumber" : 102,
        "endLineNumber" : 167,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  String currentField=null;\n  StringBuilder currentValue=new StringBuilder();\n  List<Pair<String,String>> pairs=new ArrayList<>();\n  String[] lines=text.split(\"\\r?\\n\");\n  for (  String line : lines) {\n    boolean newSection=false;\n    String sectionName=null;\n    if (line.startsWith(\"[\") && line.length() > 2) {\n      sectionName=line.substring(1,line.length() - 1);\n      newSection=sections.contains(sectionName);\n    }\n    if (newSection) {\n      if (currentField != null) {\n        pairs.add(new Pair<>(currentField,currentValue.toString()));\n      }\n      currentField=sectionName;\n      currentValue.setLength(0);\n    }\n else {\n      currentValue.append(line);\n      currentValue.append(\"\\n\");\n    }\n  }\n  pairs.add(new Pair<>(currentField,currentValue.toString()));\n  String notes=\"\";\n  GrammarType testType=GrammarType.Lexer;\n  String grammar=\"\";\n  String grammarName=\"\";\n  List<Pair<String,String>> slaveGrammars=new ArrayList<>();\n  String startRule=\"\";\n  String input=\"\";\n  String output=\"\";\n  String errors=\"\";\n  boolean showDFA=false;\n  boolean showDiagnosticErrors=false;\n  String[] skipTargets=new String[0];\n  for (  Pair<String,String> p : pairs) {\n    String section=p.a;\n    String value=\"\";\n    if (p.b != null) {\n      value=p.b.trim();\n    }\n    if (value.startsWith(\"\\\"\\\"\\\"\")) {\n      value=value.replace(\"\\\"\\\"\\\"\",\"\");\n    }\n else     if (value.indexOf('\\n') >= 0) {\n      value=value + \"\\n\";\n    }\nswitch (section) {\ncase \"notes\":      notes=value;\n    break;\ncase \"type\":  testType=Enum.valueOf(GrammarType.class,value);\nbreak;\ncase \"grammar\":grammarName=getGrammarName(value.split(\"\\n\")[0]);\ngrammar=value;\nbreak;\ncase \"slaveGrammar\":String gname=getGrammarName(value.split(\"\\n\")[0]);\nslaveGrammars.add(new Pair<>(gname,value));\ncase \"start\":startRule=value;\nbreak;\ncase \"input\":input=value;\nbreak;\ncase \"output\":output=value;\nbreak;\ncase \"errors\":errors=value;\nbreak;\ncase \"flags\":String[] flags=value.split(\"\\n\");\nfor (String f : flags) {\nswitch (f) {\ncase \"showDFA\":showDFA=true;\nbreak;\ncase \"showDiagnosticErrors\":showDiagnosticErrors=true;\nbreak;\n}\n}\nbreak;\ncase \"skip\":skipTargets=value.split(\"\\n\");\nbreak;\ndefault:throw new RuntimeException(\"Unknown descriptor section ignored: \" + section);\n}\n}\nreturn new RuntimeTestDescriptor(testType,name,notes,input,output,errors,startRule,grammarName,grammar,slaveGrammars,showDFA,showDiagnosticErrors,skipTargets,uri);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 469,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3773,
        "startLineNumber" : 19,
        "startColumnNumber" : 1,
        "endLineNumber" : 167,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Read stuff like: [grammar] grammar T; s @after {<DumpDFA()>} : ID | ID {} ; ID : 'a'..'z'+; WS : (' '|'\\t'|'\\n')+ -> skip ; [grammarName] T [start] s [input] abc [output] Decision 0: s0-ID->:s1^=>1 [errors] \"\"\"line 1:0 reportAttemptingFullContext d=0 (s), input='abc' \"\"\" Some can be missing like [errors]. Get gr names automatically \"lexer grammar Unicode;\" \"grammar T;\" \"parser grammar S;\" Also handle slave grammars: [grammar] grammar M; import S,T; s : a ; B : 'b' ; // defines B from inherited token space WS : (' '|'\\n') -> skip ; [slaveGrammar] parser grammar T; a : B {<writeln(\"\\\"T.a\\\"\")>};<! hidden by S.a !> [slaveGrammar] parser grammar S; a : b {<writeln(\"\\\"S.a\\\"\")>}; b : B;\n */\npublic static RuntimeTestDescriptor parse(String name,String text,URI uri) throws RuntimeException {\n  String currentField=null;\n  StringBuilder currentValue=new StringBuilder();\n  List<Pair<String,String>> pairs=new ArrayList<>();\n  String[] lines=text.split(\"\\r?\\n\");\n  for (  String line : lines) {\n    boolean newSection=false;\n    String sectionName=null;\n    if (line.startsWith(\"[\") && line.length() > 2) {\n      sectionName=line.substring(1,line.length() - 1);\n      newSection=sections.contains(sectionName);\n    }\n    if (newSection) {\n      if (currentField != null) {\n        pairs.add(new Pair<>(currentField,currentValue.toString()));\n      }\n      currentField=sectionName;\n      currentValue.setLength(0);\n    }\n else {\n      currentValue.append(line);\n      currentValue.append(\"\\n\");\n    }\n  }\n  pairs.add(new Pair<>(currentField,currentValue.toString()));\n  String notes=\"\";\n  GrammarType testType=GrammarType.Lexer;\n  String grammar=\"\";\n  String grammarName=\"\";\n  List<Pair<String,String>> slaveGrammars=new ArrayList<>();\n  String startRule=\"\";\n  String input=\"\";\n  String output=\"\";\n  String errors=\"\";\n  boolean showDFA=false;\n  boolean showDiagnosticErrors=false;\n  String[] skipTargets=new String[0];\n  for (  Pair<String,String> p : pairs) {\n    String section=p.a;\n    String value=\"\";\n    if (p.b != null) {\n      value=p.b.trim();\n    }\n    if (value.startsWith(\"\\\"\\\"\\\"\")) {\n      value=value.replace(\"\\\"\\\"\\\"\",\"\");\n    }\n else     if (value.indexOf('\\n') >= 0) {\n      value=value + \"\\n\";\n    }\nswitch (section) {\ncase \"notes\":      notes=value;\n    break;\ncase \"type\":  testType=Enum.valueOf(GrammarType.class,value);\nbreak;\ncase \"grammar\":grammarName=getGrammarName(value.split(\"\\n\")[0]);\ngrammar=value;\nbreak;\ncase \"slaveGrammar\":String gname=getGrammarName(value.split(\"\\n\")[0]);\nslaveGrammars.add(new Pair<>(gname,value));\ncase \"start\":startRule=value;\nbreak;\ncase \"input\":input=value;\nbreak;\ncase \"output\":output=value;\nbreak;\ncase \"errors\":errors=value;\nbreak;\ncase \"flags\":String[] flags=value.split(\"\\n\");\nfor (String f : flags) {\nswitch (f) {\ncase \"showDFA\":showDFA=true;\nbreak;\ncase \"showDiagnosticErrors\":showDiagnosticErrors=true;\nbreak;\n}\n}\nbreak;\ncase \"skip\":skipTargets=value.split(\"\\n\");\nbreak;\ndefault:throw new RuntimeException(\"Unknown descriptor section ignored: \" + section);\n}\n}\nreturn new RuntimeTestDescriptor(testType,name,notes,input,output,errors,startRule,grammarName,grammar,slaveGrammars,showDFA,showDiagnosticErrors,skipTargets,uri);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 490,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 116,
        "startColumnNumber" : 13,
        "endLineNumber" : 116,
        "endColumnNumber" : 35
      },
      "nodeContext" : "value.indexOf('\\n') >= 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 3,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 116,
    "startColumnNumber" : 13,
    "endLineNumber" : 116,
    "endColumnNumber" : 32
  } ],
  "layoutRelationDataList" : [ ]
}