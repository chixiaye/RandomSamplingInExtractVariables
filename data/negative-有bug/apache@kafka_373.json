{
  "id" : 373,
  "expression" : "handshakeResponse.enabledMechanisms()",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/clients/src/test/java/org/apache/kafka/common/security/authenticator/SaslAuthenticatorTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "handshakeResponse.enabledMechanisms()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 37,
      "startLineNumber" : 2076,
      "startColumnNumber" : 57,
      "endLineNumber" : 2076,
      "endColumnNumber" : 94
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 2076,
        "startColumnNumber" : 8,
        "endLineNumber" : 2076,
        "endColumnNumber" : 95
      },
      "nodeContext" : "assertEquals(Collections.singletonList(\"PLAIN\"),handshakeResponse.enabledMechanisms())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 2076,
        "startColumnNumber" : 8,
        "endLineNumber" : 2076,
        "endColumnNumber" : 96
      },
      "nodeContext" : "assertEquals(Collections.singletonList(\"PLAIN\"),handshakeResponse.enabledMechanisms());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1900,
        "startLineNumber" : 2047,
        "startColumnNumber" : 135,
        "endLineNumber" : 2080,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  configureMechanisms(\"PLAIN\",Arrays.asList(\"PLAIN\"));\n  server=createEchoServer(securityProtocol);\n  String node=\"1\";\n  SecurityProtocol clientProtocol;\nswitch (securityProtocol) {\ncase SASL_PLAINTEXT:    clientProtocol=SecurityProtocol.PLAINTEXT;\n  break;\ncase SASL_SSL:clientProtocol=SecurityProtocol.SSL;\nbreak;\ndefault:throw new IllegalArgumentException(\"Server protocol \" + securityProtocol + \" is not SASL\");\n}\ncreateClientConnection(clientProtocol,node);\nNetworkTestUtils.waitForChannelReady(selector,node);\nApiVersionsResponse versionsResponse=sendVersionRequestReceiveResponse(node);\nassertEquals(ApiKeys.SASL_HANDSHAKE.oldestVersion(),versionsResponse.apiVersion(ApiKeys.SASL_HANDSHAKE.id).minVersion());\nassertEquals(ApiKeys.SASL_HANDSHAKE.latestVersion(),versionsResponse.apiVersion(ApiKeys.SASL_HANDSHAKE.id).maxVersion());\nassertEquals(ApiKeys.SASL_AUTHENTICATE.oldestVersion(),versionsResponse.apiVersion(ApiKeys.SASL_AUTHENTICATE.id).minVersion());\nassertEquals(ApiKeys.SASL_AUTHENTICATE.latestVersion(),versionsResponse.apiVersion(ApiKeys.SASL_AUTHENTICATE.id).maxVersion());\nSaslHandshakeResponse handshakeResponse=sendHandshakeRequestReceiveResponse(node,saslHandshakeVersion);\nassertEquals(Collections.singletonList(\"PLAIN\"),handshakeResponse.enabledMechanisms());\nauthenticateUsingSaslPlainAndCheckConnection(node,saslHandshakeVersion > 0);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 172,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3941,
        "startLineNumber" : 2023,
        "startColumnNumber" : 4,
        "endLineNumber" : 2080,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Tests that Kafka ApiVersionsRequests are handled by the SASL server authenticator prior to SASL handshake flow and that subsequent authentication succeeds when transport layer is PLAINTEXT/SSL. This test uses a non-SASL client that simulates SASL authentication after ApiVersionsRequest. <p> Test sequence (using <tt>securityProtocol=PLAINTEXT</tt> as an example): <ol> <li>Starts a SASL_PLAINTEXT test server that simply echoes back client requests after authentication.</li> <li>A (non-SASL) PLAINTEXT test client connects to the SASL server port. Client is now unauthenticated.<./li> <li>The unauthenticated non-SASL client sends an ApiVersionsRequest and validates the response. A valid response indicates that  {@link SaslServerAuthenticator} of the test server responded tothe ApiVersionsRequest even though the client is not yet authenticated.</li> <li>The unauthenticated non-SASL client sends a SaslHandshakeRequest and validates the response. A valid response indicates that  {@link SaslServerAuthenticator} of the test server responded to the SaslHandshakeRequestafter processing ApiVersionsRequest.</li> <li>The unauthenticated non-SASL client sends the SASL/PLAIN packet containing username/password to authenticate itself. The client is now authenticated by the server. At this point this test client is at the same state as a regular SASL_PLAINTEXT client that is <tt>ready</tt>.</li> <li>The authenticated client sends random data to the server and checks that the data is echoed back by the test server (ie, not Kafka request-response) to ensure that the client now behaves exactly as a regular SASL_PLAINTEXT client that has completed authentication.</li> </ol>\n */\nprivate void testUnauthenticatedApiVersionsRequest(SecurityProtocol securityProtocol,short saslHandshakeVersion) throws Exception {\n  configureMechanisms(\"PLAIN\",Arrays.asList(\"PLAIN\"));\n  server=createEchoServer(securityProtocol);\n  String node=\"1\";\n  SecurityProtocol clientProtocol;\nswitch (securityProtocol) {\ncase SASL_PLAINTEXT:    clientProtocol=SecurityProtocol.PLAINTEXT;\n  break;\ncase SASL_SSL:clientProtocol=SecurityProtocol.SSL;\nbreak;\ndefault:throw new IllegalArgumentException(\"Server protocol \" + securityProtocol + \" is not SASL\");\n}\ncreateClientConnection(clientProtocol,node);\nNetworkTestUtils.waitForChannelReady(selector,node);\nApiVersionsResponse versionsResponse=sendVersionRequestReceiveResponse(node);\nassertEquals(ApiKeys.SASL_HANDSHAKE.oldestVersion(),versionsResponse.apiVersion(ApiKeys.SASL_HANDSHAKE.id).minVersion());\nassertEquals(ApiKeys.SASL_HANDSHAKE.latestVersion(),versionsResponse.apiVersion(ApiKeys.SASL_HANDSHAKE.id).maxVersion());\nassertEquals(ApiKeys.SASL_AUTHENTICATE.oldestVersion(),versionsResponse.apiVersion(ApiKeys.SASL_AUTHENTICATE.id).minVersion());\nassertEquals(ApiKeys.SASL_AUTHENTICATE.latestVersion(),versionsResponse.apiVersion(ApiKeys.SASL_AUTHENTICATE.id).maxVersion());\nSaslHandshakeResponse handshakeResponse=sendHandshakeRequestReceiveResponse(node,saslHandshakeVersion);\nassertEquals(Collections.singletonList(\"PLAIN\"),handshakeResponse.enabledMechanisms());\nauthenticateUsingSaslPlainAndCheckConnection(node,saslHandshakeVersion > 0);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 186,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 2076,
        "startColumnNumber" : 8,
        "endLineNumber" : 2076,
        "endColumnNumber" : 96
      },
      "nodeContext" : "assertEquals(Collections.singletonList(\"PLAIN\"),handshakeResponse.enabledMechanisms());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.util.List<java.lang.String>"
  } ],
  "positionList" : [ {
    "charLength" : 37,
    "startLineNumber" : 2076,
    "startColumnNumber" : 57,
    "endLineNumber" : 2076,
    "endColumnNumber" : 94
  } ],
  "layoutRelationDataList" : [ ]
}