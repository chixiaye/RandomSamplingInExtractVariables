{
  "id" : 45,
  "expression" : "obj.getDoubleValue()",
  "projectName" : "eclipse-vertx@vert.x",
  "commitID" : "665e20a715caff0cbaa72adfd1bb374c543281f0",
  "filePath" : "/src/test/java/io/vertx/test/core/DataObjectTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "obj.getDoubleValue()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 173,
      "startColumnNumber" : 30,
      "endLineNumber" : 173,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 173,
        "startColumnNumber" : 4,
        "endLineNumber" : 173,
        "endColumnNumber" : 54
      },
      "nodeContext" : "assertEquals(doubleValue,obj.getDoubleValue(),0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 173,
        "startColumnNumber" : 4,
        "endLineNumber" : 173,
        "endColumnNumber" : 55
      },
      "nodeContext" : "assertEquals(doubleValue,obj.getDoubleValue(),0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 13211,
        "startLineNumber" : 52,
        "startColumnNumber" : 37,
        "endLineNumber" : 244,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String key=TestUtils.randomAlphaString(10);\n  String stringValue=TestUtils.randomAlphaString(20);\n  boolean booleanValue=TestUtils.randomBoolean();\n  byte byteValue=TestUtils.randomByte();\n  short shortValue=TestUtils.randomShort();\n  int intValue=TestUtils.randomInt();\n  long longValue=TestUtils.randomLong();\n  float floatValue=TestUtils.randomFloat();\n  double doubleValue=TestUtils.randomDouble();\n  char charValue=TestUtils.randomChar();\n  Boolean boxedBooleanValue=TestUtils.randomBoolean();\n  Byte boxedByteValue=TestUtils.randomByte();\n  Short boxedShortValue=TestUtils.randomShort();\n  Integer boxedIntValue=TestUtils.randomInt();\n  Long boxedLongValue=TestUtils.randomLong();\n  Float boxedFloatValue=TestUtils.randomFloat();\n  Double boxedDoubleValue=TestUtils.randomDouble();\n  Character boxedCharValue=TestUtils.randomChar();\n  AggregatedDataObject aggregatedDataObject=new AggregatedDataObject().setValue(TestUtils.randomAlphaString(20));\n  Buffer buffer=TestUtils.randomBuffer(20);\n  JsonObject jsonObject=new JsonObject().put(\"wibble\",TestUtils.randomAlphaString(20));\n  JsonArray jsonArray=new JsonArray().add(TestUtils.randomAlphaString(20));\n  HttpMethod httpMethod=HttpMethod.values()[TestUtils.randomPositiveInt() % HttpMethod.values().length];\n  Map<String,Object> map=new HashMap<>();\n  map.put(TestUtils.randomAlphaString(10),TestUtils.randomAlphaString(20));\n  map.put(TestUtils.randomAlphaString(10),TestUtils.randomBoolean());\n  map.put(TestUtils.randomAlphaString(10),TestUtils.randomInt());\n  List<Object> list=new ArrayList<>();\n  list.add(TestUtils.randomAlphaString(20));\n  list.add(TestUtils.randomBoolean());\n  list.add(TestUtils.randomInt());\n  JsonObject json=new JsonObject();\n  json.put(\"stringValue\",stringValue);\n  json.put(\"booleanValue\",booleanValue);\n  json.put(\"byteValue\",byteValue);\n  json.put(\"shortValue\",shortValue);\n  json.put(\"intValue\",intValue);\n  json.put(\"longValue\",longValue);\n  json.put(\"floatValue\",floatValue);\n  json.put(\"doubleValue\",doubleValue);\n  json.put(\"charValue\",Character.toString(charValue));\n  json.put(\"boxedBooleanValue\",boxedBooleanValue);\n  json.put(\"boxedByteValue\",boxedByteValue);\n  json.put(\"boxedShortValue\",boxedShortValue);\n  json.put(\"boxedIntValue\",boxedIntValue);\n  json.put(\"boxedLongValue\",boxedLongValue);\n  json.put(\"boxedFloatValue\",boxedFloatValue);\n  json.put(\"boxedDoubleValue\",boxedDoubleValue);\n  json.put(\"boxedCharValue\",Character.toString(boxedCharValue));\n  json.put(\"aggregatedDataObject\",new JsonObject().put(\"value\",aggregatedDataObject.getValue()));\n  json.put(\"buffer\",Base64.getEncoder().encodeToString(buffer.getBytes()));\n  json.put(\"jsonObject\",jsonObject);\n  json.put(\"jsonArray\",jsonArray);\n  json.put(\"httpMethod\",httpMethod.toString());\n  json.put(\"stringValues\",new JsonArray().add(stringValue));\n  json.put(\"boxedBooleanValues\",new JsonArray().add(boxedBooleanValue));\n  json.put(\"boxedByteValues\",new JsonArray().add(boxedByteValue));\n  json.put(\"boxedShortValues\",new JsonArray().add(boxedShortValue));\n  json.put(\"boxedIntValues\",new JsonArray().add(boxedIntValue));\n  json.put(\"boxedLongValues\",new JsonArray().add(boxedLongValue));\n  json.put(\"boxedFloatValues\",new JsonArray().add(boxedFloatValue));\n  json.put(\"boxedDoubleValues\",new JsonArray().add(boxedDoubleValue));\n  json.put(\"boxedCharValues\",new JsonArray().add(Character.toString(boxedCharValue)));\n  json.put(\"aggregatedDataObjects\",new JsonArray().add(new JsonObject().put(\"value\",aggregatedDataObject.getValue())));\n  json.put(\"buffers\",new JsonArray().add(Base64.getEncoder().encodeToString(buffer.getBytes())));\n  json.put(\"jsonObjects\",new JsonArray().add(jsonObject));\n  json.put(\"jsonArrays\",new JsonArray().add(jsonArray));\n  json.put(\"httpMethods\",new JsonArray().add(httpMethod.toString()));\n  json.put(\"objects\",new JsonArray().add(list.get(0)).add(list.get(1)).add(list.get(2)));\n  json.put(\"addedStringValues\",new JsonArray().add(stringValue));\n  json.put(\"addedBooleanValues\",new JsonArray().add(boxedBooleanValue));\n  json.put(\"addedByteValues\",new JsonArray().add(boxedByteValue));\n  json.put(\"addedShortValues\",new JsonArray().add(boxedShortValue));\n  json.put(\"addedIntValues\",new JsonArray().add(boxedIntValue));\n  json.put(\"addedLongValues\",new JsonArray().add(boxedLongValue));\n  json.put(\"addedFloatValues\",new JsonArray().add(boxedFloatValue));\n  json.put(\"addedDoubleValues\",new JsonArray().add(boxedDoubleValue));\n  json.put(\"addedCharValues\",new JsonArray().add(Character.toString(boxedCharValue)));\n  json.put(\"addedBoxedBooleanValues\",new JsonArray().add(boxedBooleanValue));\n  json.put(\"addedBoxedByteValues\",new JsonArray().add(boxedByteValue));\n  json.put(\"addedBoxedShortValues\",new JsonArray().add(boxedShortValue));\n  json.put(\"addedBoxedIntValues\",new JsonArray().add(boxedIntValue));\n  json.put(\"addedBoxedLongValues\",new JsonArray().add(boxedLongValue));\n  json.put(\"addedBoxedFloatValues\",new JsonArray().add(boxedFloatValue));\n  json.put(\"addedBoxedDoubleValues\",new JsonArray().add(boxedDoubleValue));\n  json.put(\"addedBoxedCharValues\",new JsonArray().add(Character.toString(boxedCharValue)));\n  json.put(\"addedAggregatedDataObjects\",new JsonArray().add(new JsonObject().put(\"value\",aggregatedDataObject.getValue())));\n  json.put(\"addedBuffers\",new JsonArray().add(Base64.getEncoder().encodeToString(buffer.getBytes())));\n  json.put(\"addedJsonObjects\",new JsonArray().add(jsonObject));\n  json.put(\"addedJsonArrays\",new JsonArray().add(jsonArray));\n  json.put(\"addedHttpMethods\",new JsonArray().add(httpMethod.toString()));\n  json.put(\"addedObjects\",new JsonArray().add(list.get(0)).add(list.get(1)).add(list.get(2)));\n  json.put(\"stringValueMap\",new JsonObject().put(key,stringValue));\n  json.put(\"boxedBooleanValueMap\",new JsonObject().put(key,boxedBooleanValue));\n  json.put(\"boxedByteValueMap\",new JsonObject().put(key,boxedByteValue));\n  json.put(\"boxedShortValueMap\",new JsonObject().put(key,boxedShortValue));\n  json.put(\"boxedIntValueMap\",new JsonObject().put(key,boxedIntValue));\n  json.put(\"boxedLongValueMap\",new JsonObject().put(key,boxedLongValue));\n  json.put(\"boxedFloatValueMap\",new JsonObject().put(key,boxedFloatValue));\n  json.put(\"boxedDoubleValueMap\",new JsonObject().put(key,boxedDoubleValue));\n  json.put(\"boxedCharValueMap\",new JsonObject().put(key,Character.toString(boxedCharValue)));\n  json.put(\"aggregatedDataObjectMap\",new JsonObject().put(key,new JsonObject().put(\"value\",aggregatedDataObject.getValue())));\n  json.put(\"bufferMap\",new JsonObject().put(key,Base64.getEncoder().encodeToString(buffer.getBytes())));\n  json.put(\"jsonObjectMap\",new JsonObject().put(key,jsonObject));\n  json.put(\"jsonArrayMap\",new JsonObject().put(key,jsonArray));\n  json.put(\"httpMethodMap\",new JsonObject().put(key,httpMethod.toString()));\n  json.put(\"objectMap\",toJson(map));\n  TestDataObject obj=new TestDataObject();\n  TestDataObjectConverter.fromJson(json,obj);\n  assertEquals(stringValue,obj.getStringValue());\n  assertEquals(booleanValue,obj.isBooleanValue());\n  assertEquals(byteValue,obj.getByteValue());\n  assertEquals(shortValue,obj.getShortValue());\n  assertEquals(intValue,obj.getIntValue());\n  assertEquals(longValue,obj.getLongValue());\n  assertEquals(floatValue,obj.getFloatValue(),0);\n  assertEquals(doubleValue,obj.getDoubleValue(),0);\n  assertEquals(charValue,obj.getCharValue());\n  assertEquals(boxedBooleanValue,obj.isBoxedBooleanValue());\n  assertEquals(boxedByteValue,obj.getBoxedByteValue());\n  assertEquals(boxedShortValue,obj.getBoxedShortValue());\n  assertEquals(boxedIntValue,obj.getBoxedIntValue());\n  assertEquals(boxedLongValue,obj.getBoxedLongValue());\n  assertEquals(boxedFloatValue,obj.getBoxedFloatValue(),0);\n  assertEquals(boxedDoubleValue,obj.getBoxedDoubleValue(),0);\n  assertEquals(boxedCharValue,obj.getBoxedCharValue());\n  assertEquals(aggregatedDataObject,obj.getAggregatedDataObject());\n  assertEquals(buffer,obj.getBuffer());\n  assertEquals(jsonObject,obj.getJsonObject());\n  assertEquals(jsonArray,obj.getJsonArray());\n  assertEquals(httpMethod,obj.getHttpMethod());\n  assertEquals(Collections.singletonList(stringValue),obj.getStringValues());\n  assertEquals(Collections.singletonList(boxedBooleanValue),obj.getBoxedBooleanValues());\n  assertEquals(Collections.singletonList(boxedByteValue),obj.getBoxedByteValues());\n  assertEquals(Collections.singletonList(boxedShortValue),obj.getBoxedShortValues());\n  assertEquals(Collections.singletonList(boxedIntValue),obj.getBoxedIntValues());\n  assertEquals(Collections.singletonList(boxedLongValue),obj.getBoxedLongValues());\n  assertEquals(Collections.singletonList(boxedFloatValue),obj.getBoxedFloatValues());\n  assertEquals(Collections.singletonList(boxedDoubleValue),obj.getBoxedDoubleValues());\n  assertEquals(Collections.singletonList(boxedCharValue),obj.getBoxedCharValues());\n  assertEquals(Collections.singletonList(aggregatedDataObject),obj.getAggregatedDataObjects());\n  assertEquals(Collections.singletonList(buffer),obj.getBuffers());\n  assertEquals(Collections.singletonList(jsonObject),obj.getJsonObjects());\n  assertEquals(Collections.singletonList(jsonArray),obj.getJsonArrays());\n  assertEquals(Collections.singletonList(httpMethod),obj.getHttpMethods());\n  assertEquals(list,obj.getObjects());\n  assertEquals(Collections.singletonList(stringValue),obj.getAddedStringValues());\n  assertEquals(Collections.singletonList(boxedBooleanValue),obj.getAddedBoxedBooleanValues());\n  assertEquals(Collections.singletonList(boxedByteValue),obj.getAddedBoxedByteValues());\n  assertEquals(Collections.singletonList(boxedShortValue),obj.getAddedBoxedShortValues());\n  assertEquals(Collections.singletonList(boxedIntValue),obj.getAddedBoxedIntValues());\n  assertEquals(Collections.singletonList(boxedLongValue),obj.getAddedBoxedLongValues());\n  assertEquals(Collections.singletonList(boxedFloatValue),obj.getAddedBoxedFloatValues());\n  assertEquals(Collections.singletonList(boxedDoubleValue),obj.getAddedBoxedDoubleValues());\n  assertEquals(Collections.singletonList(boxedCharValue),obj.getAddedBoxedCharValues());\n  assertEquals(Collections.singletonList(aggregatedDataObject),obj.getAddedAggregatedDataObjects());\n  assertEquals(Collections.singletonList(buffer),obj.getAddedBuffers());\n  assertEquals(Collections.singletonList(jsonObject),obj.getAddedJsonObjects());\n  assertEquals(Collections.singletonList(jsonArray),obj.getAddedJsonArrays());\n  assertEquals(Collections.singletonList(httpMethod),obj.getAddedHttpMethods());\n  assertEquals(list,obj.getAddedObjects());\n  assertEquals(Collections.singletonMap(key,stringValue),obj.getStringValueMap());\n  assertEquals(Collections.singletonMap(key,boxedBooleanValue),obj.getBoxedBooleanValueMap());\n  assertEquals(Collections.singletonMap(key,boxedByteValue),obj.getBoxedByteValueMap());\n  assertEquals(Collections.singletonMap(key,boxedShortValue),obj.getBoxedShortValueMap());\n  assertEquals(Collections.singletonMap(key,boxedIntValue),obj.getBoxedIntValueMap());\n  assertEquals(Collections.singletonMap(key,boxedLongValue),obj.getBoxedLongValueMap());\n  assertEquals(Collections.singletonMap(key,boxedFloatValue),obj.getBoxedFloatValueMap());\n  assertEquals(Collections.singletonMap(key,boxedDoubleValue),obj.getBoxedDoubleValueMap());\n  assertEquals(Collections.singletonMap(key,boxedCharValue),obj.getBoxedCharValueMap());\n  assertEquals(Collections.singletonMap(key,aggregatedDataObject),obj.getAggregatedDataObjectMap());\n  assertEquals(Collections.singletonMap(key,buffer),obj.getBufferMap());\n  assertEquals(Collections.singletonMap(key,jsonObject),obj.getJsonObjectMap());\n  assertEquals(Collections.singletonMap(key,jsonArray),obj.getJsonArrayMap());\n  assertEquals(Collections.singletonMap(key,httpMethod),obj.getHttpMethodMap());\n  assertEquals(map,obj.getObjectMap());\n  json=new JsonObject();\n  json.put(\"aggregatedDataObject\",new JsonObject().put(\"value\",aggregatedDataObject.getValue()).getMap());\n  json.put(\"aggregatedDataObjects\",new JsonArray().add(new JsonObject().put(\"value\",aggregatedDataObject.getValue()).getMap()));\n  json.put(\"addedAggregatedDataObjects\",new JsonArray().add(new JsonObject().put(\"value\",aggregatedDataObject.getValue()).getMap()));\n  obj=new TestDataObject();\n  TestDataObjectConverter.fromJson(json,obj);\n  assertEquals(aggregatedDataObject,obj.getAggregatedDataObject());\n  assertEquals(Collections.singletonList(aggregatedDataObject),obj.getAggregatedDataObjects());\n  assertEquals(Collections.singletonList(aggregatedDataObject),obj.getAddedAggregatedDataObjects());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1871,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 13254,
        "startLineNumber" : 51,
        "startColumnNumber" : 2,
        "endLineNumber" : 244,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testJsonToDataObject(){\n  String key=TestUtils.randomAlphaString(10);\n  String stringValue=TestUtils.randomAlphaString(20);\n  boolean booleanValue=TestUtils.randomBoolean();\n  byte byteValue=TestUtils.randomByte();\n  short shortValue=TestUtils.randomShort();\n  int intValue=TestUtils.randomInt();\n  long longValue=TestUtils.randomLong();\n  float floatValue=TestUtils.randomFloat();\n  double doubleValue=TestUtils.randomDouble();\n  char charValue=TestUtils.randomChar();\n  Boolean boxedBooleanValue=TestUtils.randomBoolean();\n  Byte boxedByteValue=TestUtils.randomByte();\n  Short boxedShortValue=TestUtils.randomShort();\n  Integer boxedIntValue=TestUtils.randomInt();\n  Long boxedLongValue=TestUtils.randomLong();\n  Float boxedFloatValue=TestUtils.randomFloat();\n  Double boxedDoubleValue=TestUtils.randomDouble();\n  Character boxedCharValue=TestUtils.randomChar();\n  AggregatedDataObject aggregatedDataObject=new AggregatedDataObject().setValue(TestUtils.randomAlphaString(20));\n  Buffer buffer=TestUtils.randomBuffer(20);\n  JsonObject jsonObject=new JsonObject().put(\"wibble\",TestUtils.randomAlphaString(20));\n  JsonArray jsonArray=new JsonArray().add(TestUtils.randomAlphaString(20));\n  HttpMethod httpMethod=HttpMethod.values()[TestUtils.randomPositiveInt() % HttpMethod.values().length];\n  Map<String,Object> map=new HashMap<>();\n  map.put(TestUtils.randomAlphaString(10),TestUtils.randomAlphaString(20));\n  map.put(TestUtils.randomAlphaString(10),TestUtils.randomBoolean());\n  map.put(TestUtils.randomAlphaString(10),TestUtils.randomInt());\n  List<Object> list=new ArrayList<>();\n  list.add(TestUtils.randomAlphaString(20));\n  list.add(TestUtils.randomBoolean());\n  list.add(TestUtils.randomInt());\n  JsonObject json=new JsonObject();\n  json.put(\"stringValue\",stringValue);\n  json.put(\"booleanValue\",booleanValue);\n  json.put(\"byteValue\",byteValue);\n  json.put(\"shortValue\",shortValue);\n  json.put(\"intValue\",intValue);\n  json.put(\"longValue\",longValue);\n  json.put(\"floatValue\",floatValue);\n  json.put(\"doubleValue\",doubleValue);\n  json.put(\"charValue\",Character.toString(charValue));\n  json.put(\"boxedBooleanValue\",boxedBooleanValue);\n  json.put(\"boxedByteValue\",boxedByteValue);\n  json.put(\"boxedShortValue\",boxedShortValue);\n  json.put(\"boxedIntValue\",boxedIntValue);\n  json.put(\"boxedLongValue\",boxedLongValue);\n  json.put(\"boxedFloatValue\",boxedFloatValue);\n  json.put(\"boxedDoubleValue\",boxedDoubleValue);\n  json.put(\"boxedCharValue\",Character.toString(boxedCharValue));\n  json.put(\"aggregatedDataObject\",new JsonObject().put(\"value\",aggregatedDataObject.getValue()));\n  json.put(\"buffer\",Base64.getEncoder().encodeToString(buffer.getBytes()));\n  json.put(\"jsonObject\",jsonObject);\n  json.put(\"jsonArray\",jsonArray);\n  json.put(\"httpMethod\",httpMethod.toString());\n  json.put(\"stringValues\",new JsonArray().add(stringValue));\n  json.put(\"boxedBooleanValues\",new JsonArray().add(boxedBooleanValue));\n  json.put(\"boxedByteValues\",new JsonArray().add(boxedByteValue));\n  json.put(\"boxedShortValues\",new JsonArray().add(boxedShortValue));\n  json.put(\"boxedIntValues\",new JsonArray().add(boxedIntValue));\n  json.put(\"boxedLongValues\",new JsonArray().add(boxedLongValue));\n  json.put(\"boxedFloatValues\",new JsonArray().add(boxedFloatValue));\n  json.put(\"boxedDoubleValues\",new JsonArray().add(boxedDoubleValue));\n  json.put(\"boxedCharValues\",new JsonArray().add(Character.toString(boxedCharValue)));\n  json.put(\"aggregatedDataObjects\",new JsonArray().add(new JsonObject().put(\"value\",aggregatedDataObject.getValue())));\n  json.put(\"buffers\",new JsonArray().add(Base64.getEncoder().encodeToString(buffer.getBytes())));\n  json.put(\"jsonObjects\",new JsonArray().add(jsonObject));\n  json.put(\"jsonArrays\",new JsonArray().add(jsonArray));\n  json.put(\"httpMethods\",new JsonArray().add(httpMethod.toString()));\n  json.put(\"objects\",new JsonArray().add(list.get(0)).add(list.get(1)).add(list.get(2)));\n  json.put(\"addedStringValues\",new JsonArray().add(stringValue));\n  json.put(\"addedBooleanValues\",new JsonArray().add(boxedBooleanValue));\n  json.put(\"addedByteValues\",new JsonArray().add(boxedByteValue));\n  json.put(\"addedShortValues\",new JsonArray().add(boxedShortValue));\n  json.put(\"addedIntValues\",new JsonArray().add(boxedIntValue));\n  json.put(\"addedLongValues\",new JsonArray().add(boxedLongValue));\n  json.put(\"addedFloatValues\",new JsonArray().add(boxedFloatValue));\n  json.put(\"addedDoubleValues\",new JsonArray().add(boxedDoubleValue));\n  json.put(\"addedCharValues\",new JsonArray().add(Character.toString(boxedCharValue)));\n  json.put(\"addedBoxedBooleanValues\",new JsonArray().add(boxedBooleanValue));\n  json.put(\"addedBoxedByteValues\",new JsonArray().add(boxedByteValue));\n  json.put(\"addedBoxedShortValues\",new JsonArray().add(boxedShortValue));\n  json.put(\"addedBoxedIntValues\",new JsonArray().add(boxedIntValue));\n  json.put(\"addedBoxedLongValues\",new JsonArray().add(boxedLongValue));\n  json.put(\"addedBoxedFloatValues\",new JsonArray().add(boxedFloatValue));\n  json.put(\"addedBoxedDoubleValues\",new JsonArray().add(boxedDoubleValue));\n  json.put(\"addedBoxedCharValues\",new JsonArray().add(Character.toString(boxedCharValue)));\n  json.put(\"addedAggregatedDataObjects\",new JsonArray().add(new JsonObject().put(\"value\",aggregatedDataObject.getValue())));\n  json.put(\"addedBuffers\",new JsonArray().add(Base64.getEncoder().encodeToString(buffer.getBytes())));\n  json.put(\"addedJsonObjects\",new JsonArray().add(jsonObject));\n  json.put(\"addedJsonArrays\",new JsonArray().add(jsonArray));\n  json.put(\"addedHttpMethods\",new JsonArray().add(httpMethod.toString()));\n  json.put(\"addedObjects\",new JsonArray().add(list.get(0)).add(list.get(1)).add(list.get(2)));\n  json.put(\"stringValueMap\",new JsonObject().put(key,stringValue));\n  json.put(\"boxedBooleanValueMap\",new JsonObject().put(key,boxedBooleanValue));\n  json.put(\"boxedByteValueMap\",new JsonObject().put(key,boxedByteValue));\n  json.put(\"boxedShortValueMap\",new JsonObject().put(key,boxedShortValue));\n  json.put(\"boxedIntValueMap\",new JsonObject().put(key,boxedIntValue));\n  json.put(\"boxedLongValueMap\",new JsonObject().put(key,boxedLongValue));\n  json.put(\"boxedFloatValueMap\",new JsonObject().put(key,boxedFloatValue));\n  json.put(\"boxedDoubleValueMap\",new JsonObject().put(key,boxedDoubleValue));\n  json.put(\"boxedCharValueMap\",new JsonObject().put(key,Character.toString(boxedCharValue)));\n  json.put(\"aggregatedDataObjectMap\",new JsonObject().put(key,new JsonObject().put(\"value\",aggregatedDataObject.getValue())));\n  json.put(\"bufferMap\",new JsonObject().put(key,Base64.getEncoder().encodeToString(buffer.getBytes())));\n  json.put(\"jsonObjectMap\",new JsonObject().put(key,jsonObject));\n  json.put(\"jsonArrayMap\",new JsonObject().put(key,jsonArray));\n  json.put(\"httpMethodMap\",new JsonObject().put(key,httpMethod.toString()));\n  json.put(\"objectMap\",toJson(map));\n  TestDataObject obj=new TestDataObject();\n  TestDataObjectConverter.fromJson(json,obj);\n  assertEquals(stringValue,obj.getStringValue());\n  assertEquals(booleanValue,obj.isBooleanValue());\n  assertEquals(byteValue,obj.getByteValue());\n  assertEquals(shortValue,obj.getShortValue());\n  assertEquals(intValue,obj.getIntValue());\n  assertEquals(longValue,obj.getLongValue());\n  assertEquals(floatValue,obj.getFloatValue(),0);\n  assertEquals(doubleValue,obj.getDoubleValue(),0);\n  assertEquals(charValue,obj.getCharValue());\n  assertEquals(boxedBooleanValue,obj.isBoxedBooleanValue());\n  assertEquals(boxedByteValue,obj.getBoxedByteValue());\n  assertEquals(boxedShortValue,obj.getBoxedShortValue());\n  assertEquals(boxedIntValue,obj.getBoxedIntValue());\n  assertEquals(boxedLongValue,obj.getBoxedLongValue());\n  assertEquals(boxedFloatValue,obj.getBoxedFloatValue(),0);\n  assertEquals(boxedDoubleValue,obj.getBoxedDoubleValue(),0);\n  assertEquals(boxedCharValue,obj.getBoxedCharValue());\n  assertEquals(aggregatedDataObject,obj.getAggregatedDataObject());\n  assertEquals(buffer,obj.getBuffer());\n  assertEquals(jsonObject,obj.getJsonObject());\n  assertEquals(jsonArray,obj.getJsonArray());\n  assertEquals(httpMethod,obj.getHttpMethod());\n  assertEquals(Collections.singletonList(stringValue),obj.getStringValues());\n  assertEquals(Collections.singletonList(boxedBooleanValue),obj.getBoxedBooleanValues());\n  assertEquals(Collections.singletonList(boxedByteValue),obj.getBoxedByteValues());\n  assertEquals(Collections.singletonList(boxedShortValue),obj.getBoxedShortValues());\n  assertEquals(Collections.singletonList(boxedIntValue),obj.getBoxedIntValues());\n  assertEquals(Collections.singletonList(boxedLongValue),obj.getBoxedLongValues());\n  assertEquals(Collections.singletonList(boxedFloatValue),obj.getBoxedFloatValues());\n  assertEquals(Collections.singletonList(boxedDoubleValue),obj.getBoxedDoubleValues());\n  assertEquals(Collections.singletonList(boxedCharValue),obj.getBoxedCharValues());\n  assertEquals(Collections.singletonList(aggregatedDataObject),obj.getAggregatedDataObjects());\n  assertEquals(Collections.singletonList(buffer),obj.getBuffers());\n  assertEquals(Collections.singletonList(jsonObject),obj.getJsonObjects());\n  assertEquals(Collections.singletonList(jsonArray),obj.getJsonArrays());\n  assertEquals(Collections.singletonList(httpMethod),obj.getHttpMethods());\n  assertEquals(list,obj.getObjects());\n  assertEquals(Collections.singletonList(stringValue),obj.getAddedStringValues());\n  assertEquals(Collections.singletonList(boxedBooleanValue),obj.getAddedBoxedBooleanValues());\n  assertEquals(Collections.singletonList(boxedByteValue),obj.getAddedBoxedByteValues());\n  assertEquals(Collections.singletonList(boxedShortValue),obj.getAddedBoxedShortValues());\n  assertEquals(Collections.singletonList(boxedIntValue),obj.getAddedBoxedIntValues());\n  assertEquals(Collections.singletonList(boxedLongValue),obj.getAddedBoxedLongValues());\n  assertEquals(Collections.singletonList(boxedFloatValue),obj.getAddedBoxedFloatValues());\n  assertEquals(Collections.singletonList(boxedDoubleValue),obj.getAddedBoxedDoubleValues());\n  assertEquals(Collections.singletonList(boxedCharValue),obj.getAddedBoxedCharValues());\n  assertEquals(Collections.singletonList(aggregatedDataObject),obj.getAddedAggregatedDataObjects());\n  assertEquals(Collections.singletonList(buffer),obj.getAddedBuffers());\n  assertEquals(Collections.singletonList(jsonObject),obj.getAddedJsonObjects());\n  assertEquals(Collections.singletonList(jsonArray),obj.getAddedJsonArrays());\n  assertEquals(Collections.singletonList(httpMethod),obj.getAddedHttpMethods());\n  assertEquals(list,obj.getAddedObjects());\n  assertEquals(Collections.singletonMap(key,stringValue),obj.getStringValueMap());\n  assertEquals(Collections.singletonMap(key,boxedBooleanValue),obj.getBoxedBooleanValueMap());\n  assertEquals(Collections.singletonMap(key,boxedByteValue),obj.getBoxedByteValueMap());\n  assertEquals(Collections.singletonMap(key,boxedShortValue),obj.getBoxedShortValueMap());\n  assertEquals(Collections.singletonMap(key,boxedIntValue),obj.getBoxedIntValueMap());\n  assertEquals(Collections.singletonMap(key,boxedLongValue),obj.getBoxedLongValueMap());\n  assertEquals(Collections.singletonMap(key,boxedFloatValue),obj.getBoxedFloatValueMap());\n  assertEquals(Collections.singletonMap(key,boxedDoubleValue),obj.getBoxedDoubleValueMap());\n  assertEquals(Collections.singletonMap(key,boxedCharValue),obj.getBoxedCharValueMap());\n  assertEquals(Collections.singletonMap(key,aggregatedDataObject),obj.getAggregatedDataObjectMap());\n  assertEquals(Collections.singletonMap(key,buffer),obj.getBufferMap());\n  assertEquals(Collections.singletonMap(key,jsonObject),obj.getJsonObjectMap());\n  assertEquals(Collections.singletonMap(key,jsonArray),obj.getJsonArrayMap());\n  assertEquals(Collections.singletonMap(key,httpMethod),obj.getHttpMethodMap());\n  assertEquals(map,obj.getObjectMap());\n  json=new JsonObject();\n  json.put(\"aggregatedDataObject\",new JsonObject().put(\"value\",aggregatedDataObject.getValue()).getMap());\n  json.put(\"aggregatedDataObjects\",new JsonArray().add(new JsonObject().put(\"value\",aggregatedDataObject.getValue()).getMap()));\n  json.put(\"addedAggregatedDataObjects\",new JsonArray().add(new JsonObject().put(\"value\",aggregatedDataObject.getValue()).getMap()));\n  obj=new TestDataObject();\n  TestDataObjectConverter.fromJson(json,obj);\n  assertEquals(aggregatedDataObject,obj.getAggregatedDataObject());\n  assertEquals(Collections.singletonList(aggregatedDataObject),obj.getAggregatedDataObjects());\n  assertEquals(Collections.singletonList(aggregatedDataObject),obj.getAddedAggregatedDataObjects());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1877,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 173,
        "startColumnNumber" : 4,
        "endLineNumber" : 173,
        "endColumnNumber" : 55
      },
      "nodeContext" : "assertEquals(doubleValue,obj.getDoubleValue(),0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "double"
  } ],
  "positionList" : [ {
    "charLength" : 20,
    "startLineNumber" : 173,
    "startColumnNumber" : 30,
    "endLineNumber" : 173,
    "endColumnNumber" : 50
  } ],
  "layoutRelationDataList" : [ ]
}