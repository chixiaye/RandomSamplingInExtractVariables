{
  "id" : 429,
  "expression" : "t",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/test/java/io/reactivex/processors/ReplayProcessorConcurrencyTest.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "t",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 188,
      "startColumnNumber" : 12,
      "endLineNumber" : 188,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 188,
        "startColumnNumber" : 12,
        "endLineNumber" : 188,
        "endColumnNumber" : 21
      },
      "nodeContext" : "t.start()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 188,
        "startColumnNumber" : 12,
        "endLineNumber" : 188,
        "endColumnNumber" : 22
      },
      "nodeContext" : "t.start();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 894,
        "startLineNumber" : 168,
        "startColumnNumber" : 39,
        "endLineNumber" : 191,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final int count=i;\n  if (count == 20) {\n    source.start();\n  }\n  if (count == 100) {\n    source.join();\n  }\n  Thread t=new Thread(new Runnable(){\n    @Override public void run(){\n      List<Long> values=replay.toList().toBlocking().last();\n      listOfListsOfValues.add(values);\n      System.out.println(\"Finished thread: \" + count);\n    }\n  }\n);\n  t.start();\n  System.out.println(\"Started thread: \" + i);\n  threads.add(t);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 925,
        "startLineNumber" : 168,
        "startColumnNumber" : 8,
        "endLineNumber" : 191,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=1; i <= 200; i++) {\n  final int count=i;\n  if (count == 20) {\n    source.start();\n  }\n  if (count == 100) {\n    source.join();\n  }\n  Thread t=new Thread(new Runnable(){\n    @Override public void run(){\n      List<Long> values=replay.toList().toBlocking().last();\n      listOfListsOfValues.add(values);\n      System.out.println(\"Finished thread: \" + count);\n    }\n  }\n);\n  t.start();\n  System.out.println(\"Started thread: \" + i);\n  threads.add(t);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 102,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2915,
        "startLineNumber" : 143,
        "startColumnNumber" : 87,
        "endLineNumber" : 223,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final ReplayProcessor<Long> replay=ReplayProcessor.create();\n  Thread source=new Thread(new Runnable(){\n    @Override public void run(){\n      Flowable.create(new Publisher<Long>(){\n        @Override public void subscribe(        Subscriber<? super Long> o){\n          System.out.println(\"********* Start Source Data ***********\");\n          for (long l=1; l <= 10000; l++) {\n            o.onNext(l);\n          }\n          System.out.println(\"********* Finished Source Data ***********\");\n          o.onComplete();\n        }\n      }\n).subscribe(replay);\n    }\n  }\n);\n  final List<List<Long>> listOfListsOfValues=Collections.synchronizedList(new ArrayList<List<Long>>());\n  final List<Thread> threads=Collections.synchronizedList(new ArrayList<Thread>());\n  for (int i=1; i <= 200; i++) {\n    final int count=i;\n    if (count == 20) {\n      source.start();\n    }\n    if (count == 100) {\n      source.join();\n    }\n    Thread t=new Thread(new Runnable(){\n      @Override public void run(){\n        List<Long> values=replay.toList().toBlocking().last();\n        listOfListsOfValues.add(values);\n        System.out.println(\"Finished thread: \" + count);\n      }\n    }\n);\n    t.start();\n    System.out.println(\"Started thread: \" + i);\n    threads.add(t);\n  }\n  for (  Thread t : threads) {\n    t.join();\n  }\n  List<Long> sums=new ArrayList<Long>();\n  for (  List<Long> values : listOfListsOfValues) {\n    long v=0;\n    for (    long l : values) {\n      v+=l;\n    }\n    sums.add(v);\n  }\n  long expected=sums.get(0);\n  boolean success=true;\n  for (  long l : sums) {\n    if (l != expected) {\n      success=false;\n      System.out.println(\"FAILURE => Expected \" + expected + \" but got: \"+ l);\n    }\n  }\n  if (success) {\n    System.out.println(\"Success! \" + sums.size() + \" each had the same sum of \"+ expected);\n  }\n else {\n    throw new RuntimeException(\"Concurrency Bug\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 356,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3009,
        "startLineNumber" : 142,
        "startColumnNumber" : 4,
        "endLineNumber" : 223,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testReplaySubjectConcurrentSubscriptions() throws InterruptedException {\n  final ReplayProcessor<Long> replay=ReplayProcessor.create();\n  Thread source=new Thread(new Runnable(){\n    @Override public void run(){\n      Flowable.create(new Publisher<Long>(){\n        @Override public void subscribe(        Subscriber<? super Long> o){\n          System.out.println(\"********* Start Source Data ***********\");\n          for (long l=1; l <= 10000; l++) {\n            o.onNext(l);\n          }\n          System.out.println(\"********* Finished Source Data ***********\");\n          o.onComplete();\n        }\n      }\n).subscribe(replay);\n    }\n  }\n);\n  final List<List<Long>> listOfListsOfValues=Collections.synchronizedList(new ArrayList<List<Long>>());\n  final List<Thread> threads=Collections.synchronizedList(new ArrayList<Thread>());\n  for (int i=1; i <= 200; i++) {\n    final int count=i;\n    if (count == 20) {\n      source.start();\n    }\n    if (count == 100) {\n      source.join();\n    }\n    Thread t=new Thread(new Runnable(){\n      @Override public void run(){\n        List<Long> values=replay.toList().toBlocking().last();\n        listOfListsOfValues.add(values);\n        System.out.println(\"Finished thread: \" + count);\n      }\n    }\n);\n    t.start();\n    System.out.println(\"Started thread: \" + i);\n    threads.add(t);\n  }\n  for (  Thread t : threads) {\n    t.join();\n  }\n  List<Long> sums=new ArrayList<Long>();\n  for (  List<Long> values : listOfListsOfValues) {\n    long v=0;\n    for (    long l : values) {\n      v+=l;\n    }\n    sums.add(v);\n  }\n  long expected=sums.get(0);\n  boolean success=true;\n  for (  long l : sums) {\n    if (l != expected) {\n      success=false;\n      System.out.println(\"FAILURE => Expected \" + expected + \" but got: \"+ l);\n    }\n  }\n  if (success) {\n    System.out.println(\"Success! \" + sums.size() + \" each had the same sum of \"+ expected);\n  }\n else {\n    throw new RuntimeException(\"Concurrency Bug\");\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 364,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 10,
        "startLineNumber" : 188,
        "startColumnNumber" : 12,
        "endLineNumber" : 188,
        "endColumnNumber" : 22
      },
      "nodeContext" : "t.start();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.Thread"
  }, {
    "nodeContext" : "t",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 190,
      "startColumnNumber" : 24,
      "endLineNumber" : 190,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 190,
        "startColumnNumber" : 12,
        "endLineNumber" : 190,
        "endColumnNumber" : 26
      },
      "nodeContext" : "threads.add(t)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 190,
        "startColumnNumber" : 12,
        "endLineNumber" : 190,
        "endColumnNumber" : 27
      },
      "nodeContext" : "threads.add(t);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 894,
        "startLineNumber" : 168,
        "startColumnNumber" : 39,
        "endLineNumber" : 191,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  final int count=i;\n  if (count == 20) {\n    source.start();\n  }\n  if (count == 100) {\n    source.join();\n  }\n  Thread t=new Thread(new Runnable(){\n    @Override public void run(){\n      List<Long> values=replay.toList().toBlocking().last();\n      listOfListsOfValues.add(values);\n      System.out.println(\"Finished thread: \" + count);\n    }\n  }\n);\n  t.start();\n  System.out.println(\"Started thread: \" + i);\n  threads.add(t);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 91,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 925,
        "startLineNumber" : 168,
        "startColumnNumber" : 8,
        "endLineNumber" : 191,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (int i=1; i <= 200; i++) {\n  final int count=i;\n  if (count == 20) {\n    source.start();\n  }\n  if (count == 100) {\n    source.join();\n  }\n  Thread t=new Thread(new Runnable(){\n    @Override public void run(){\n      List<Long> values=replay.toList().toBlocking().last();\n      listOfListsOfValues.add(values);\n      System.out.println(\"Finished thread: \" + count);\n    }\n  }\n);\n  t.start();\n  System.out.println(\"Started thread: \" + i);\n  threads.add(t);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 102,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2915,
        "startLineNumber" : 143,
        "startColumnNumber" : 87,
        "endLineNumber" : 223,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final ReplayProcessor<Long> replay=ReplayProcessor.create();\n  Thread source=new Thread(new Runnable(){\n    @Override public void run(){\n      Flowable.create(new Publisher<Long>(){\n        @Override public void subscribe(        Subscriber<? super Long> o){\n          System.out.println(\"********* Start Source Data ***********\");\n          for (long l=1; l <= 10000; l++) {\n            o.onNext(l);\n          }\n          System.out.println(\"********* Finished Source Data ***********\");\n          o.onComplete();\n        }\n      }\n).subscribe(replay);\n    }\n  }\n);\n  final List<List<Long>> listOfListsOfValues=Collections.synchronizedList(new ArrayList<List<Long>>());\n  final List<Thread> threads=Collections.synchronizedList(new ArrayList<Thread>());\n  for (int i=1; i <= 200; i++) {\n    final int count=i;\n    if (count == 20) {\n      source.start();\n    }\n    if (count == 100) {\n      source.join();\n    }\n    Thread t=new Thread(new Runnable(){\n      @Override public void run(){\n        List<Long> values=replay.toList().toBlocking().last();\n        listOfListsOfValues.add(values);\n        System.out.println(\"Finished thread: \" + count);\n      }\n    }\n);\n    t.start();\n    System.out.println(\"Started thread: \" + i);\n    threads.add(t);\n  }\n  for (  Thread t : threads) {\n    t.join();\n  }\n  List<Long> sums=new ArrayList<Long>();\n  for (  List<Long> values : listOfListsOfValues) {\n    long v=0;\n    for (    long l : values) {\n      v+=l;\n    }\n    sums.add(v);\n  }\n  long expected=sums.get(0);\n  boolean success=true;\n  for (  long l : sums) {\n    if (l != expected) {\n      success=false;\n      System.out.println(\"FAILURE => Expected \" + expected + \" but got: \"+ l);\n    }\n  }\n  if (success) {\n    System.out.println(\"Success! \" + sums.size() + \" each had the same sum of \"+ expected);\n  }\n else {\n    throw new RuntimeException(\"Concurrency Bug\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 356,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3009,
        "startLineNumber" : 142,
        "startColumnNumber" : 4,
        "endLineNumber" : 223,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testReplaySubjectConcurrentSubscriptions() throws InterruptedException {\n  final ReplayProcessor<Long> replay=ReplayProcessor.create();\n  Thread source=new Thread(new Runnable(){\n    @Override public void run(){\n      Flowable.create(new Publisher<Long>(){\n        @Override public void subscribe(        Subscriber<? super Long> o){\n          System.out.println(\"********* Start Source Data ***********\");\n          for (long l=1; l <= 10000; l++) {\n            o.onNext(l);\n          }\n          System.out.println(\"********* Finished Source Data ***********\");\n          o.onComplete();\n        }\n      }\n).subscribe(replay);\n    }\n  }\n);\n  final List<List<Long>> listOfListsOfValues=Collections.synchronizedList(new ArrayList<List<Long>>());\n  final List<Thread> threads=Collections.synchronizedList(new ArrayList<Thread>());\n  for (int i=1; i <= 200; i++) {\n    final int count=i;\n    if (count == 20) {\n      source.start();\n    }\n    if (count == 100) {\n      source.join();\n    }\n    Thread t=new Thread(new Runnable(){\n      @Override public void run(){\n        List<Long> values=replay.toList().toBlocking().last();\n        listOfListsOfValues.add(values);\n        System.out.println(\"Finished thread: \" + count);\n      }\n    }\n);\n    t.start();\n    System.out.println(\"Started thread: \" + i);\n    threads.add(t);\n  }\n  for (  Thread t : threads) {\n    t.join();\n  }\n  List<Long> sums=new ArrayList<Long>();\n  for (  List<Long> values : listOfListsOfValues) {\n    long v=0;\n    for (    long l : values) {\n      v+=l;\n    }\n    sums.add(v);\n  }\n  long expected=sums.get(0);\n  boolean success=true;\n  for (  long l : sums) {\n    if (l != expected) {\n      success=false;\n      System.out.println(\"FAILURE => Expected \" + expected + \" but got: \"+ l);\n    }\n  }\n  if (success) {\n    System.out.println(\"Success! \" + sums.size() + \" each had the same sum of \"+ expected);\n  }\n else {\n    throw new RuntimeException(\"Concurrency Bug\");\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 364,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 15,
        "startLineNumber" : 190,
        "startColumnNumber" : 12,
        "endLineNumber" : 190,
        "endColumnNumber" : 27
      },
      "nodeContext" : "threads.add(t);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.Thread"
  }, {
    "nodeContext" : "t",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 195,
      "startColumnNumber" : 12,
      "endLineNumber" : 195,
      "endColumnNumber" : 13
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 8,
        "startLineNumber" : 195,
        "startColumnNumber" : 12,
        "endLineNumber" : 195,
        "endColumnNumber" : 20
      },
      "nodeContext" : "t.join()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 195,
        "startColumnNumber" : 12,
        "endLineNumber" : 195,
        "endColumnNumber" : 21
      },
      "nodeContext" : "t.join();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 194,
        "startColumnNumber" : 33,
        "endLineNumber" : 196,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  t.join();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 5,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 60,
        "startLineNumber" : 194,
        "startColumnNumber" : 8,
        "endLineNumber" : 196,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Thread t : threads) {\n  t.join();\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2915,
        "startLineNumber" : 143,
        "startColumnNumber" : 87,
        "endLineNumber" : 223,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final ReplayProcessor<Long> replay=ReplayProcessor.create();\n  Thread source=new Thread(new Runnable(){\n    @Override public void run(){\n      Flowable.create(new Publisher<Long>(){\n        @Override public void subscribe(        Subscriber<? super Long> o){\n          System.out.println(\"********* Start Source Data ***********\");\n          for (long l=1; l <= 10000; l++) {\n            o.onNext(l);\n          }\n          System.out.println(\"********* Finished Source Data ***********\");\n          o.onComplete();\n        }\n      }\n).subscribe(replay);\n    }\n  }\n);\n  final List<List<Long>> listOfListsOfValues=Collections.synchronizedList(new ArrayList<List<Long>>());\n  final List<Thread> threads=Collections.synchronizedList(new ArrayList<Thread>());\n  for (int i=1; i <= 200; i++) {\n    final int count=i;\n    if (count == 20) {\n      source.start();\n    }\n    if (count == 100) {\n      source.join();\n    }\n    Thread t=new Thread(new Runnable(){\n      @Override public void run(){\n        List<Long> values=replay.toList().toBlocking().last();\n        listOfListsOfValues.add(values);\n        System.out.println(\"Finished thread: \" + count);\n      }\n    }\n);\n    t.start();\n    System.out.println(\"Started thread: \" + i);\n    threads.add(t);\n  }\n  for (  Thread t : threads) {\n    t.join();\n  }\n  List<Long> sums=new ArrayList<Long>();\n  for (  List<Long> values : listOfListsOfValues) {\n    long v=0;\n    for (    long l : values) {\n      v+=l;\n    }\n    sums.add(v);\n  }\n  long expected=sums.get(0);\n  boolean success=true;\n  for (  long l : sums) {\n    if (l != expected) {\n      success=false;\n      System.out.println(\"FAILURE => Expected \" + expected + \" but got: \"+ l);\n    }\n  }\n  if (success) {\n    System.out.println(\"Success! \" + sums.size() + \" each had the same sum of \"+ expected);\n  }\n else {\n    throw new RuntimeException(\"Concurrency Bug\");\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 356,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3009,
        "startLineNumber" : 142,
        "startColumnNumber" : 4,
        "endLineNumber" : 223,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testReplaySubjectConcurrentSubscriptions() throws InterruptedException {\n  final ReplayProcessor<Long> replay=ReplayProcessor.create();\n  Thread source=new Thread(new Runnable(){\n    @Override public void run(){\n      Flowable.create(new Publisher<Long>(){\n        @Override public void subscribe(        Subscriber<? super Long> o){\n          System.out.println(\"********* Start Source Data ***********\");\n          for (long l=1; l <= 10000; l++) {\n            o.onNext(l);\n          }\n          System.out.println(\"********* Finished Source Data ***********\");\n          o.onComplete();\n        }\n      }\n).subscribe(replay);\n    }\n  }\n);\n  final List<List<Long>> listOfListsOfValues=Collections.synchronizedList(new ArrayList<List<Long>>());\n  final List<Thread> threads=Collections.synchronizedList(new ArrayList<Thread>());\n  for (int i=1; i <= 200; i++) {\n    final int count=i;\n    if (count == 20) {\n      source.start();\n    }\n    if (count == 100) {\n      source.join();\n    }\n    Thread t=new Thread(new Runnable(){\n      @Override public void run(){\n        List<Long> values=replay.toList().toBlocking().last();\n        listOfListsOfValues.add(values);\n        System.out.println(\"Finished thread: \" + count);\n      }\n    }\n);\n    t.start();\n    System.out.println(\"Started thread: \" + i);\n    threads.add(t);\n  }\n  for (  Thread t : threads) {\n    t.join();\n  }\n  List<Long> sums=new ArrayList<Long>();\n  for (  List<Long> values : listOfListsOfValues) {\n    long v=0;\n    for (    long l : values) {\n      v+=l;\n    }\n    sums.add(v);\n  }\n  long expected=sums.get(0);\n  boolean success=true;\n  for (  long l : sums) {\n    if (l != expected) {\n      success=false;\n      System.out.println(\"FAILURE => Expected \" + expected + \" but got: \"+ l);\n    }\n  }\n  if (success) {\n    System.out.println(\"Success! \" + sums.size() + \" each had the same sum of \"+ expected);\n  }\n else {\n    throw new RuntimeException(\"Concurrency Bug\");\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 364,
      "astHeight" : 21
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 9,
        "startLineNumber" : 195,
        "startColumnNumber" : 12,
        "endLineNumber" : 195,
        "endColumnNumber" : 21
      },
      "nodeContext" : "t.join();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 4,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.Thread"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 188,
    "startColumnNumber" : 12,
    "endLineNumber" : 188,
    "endColumnNumber" : 13
  }, {
    "charLength" : 1,
    "startLineNumber" : 190,
    "startColumnNumber" : 24,
    "endLineNumber" : 190,
    "endColumnNumber" : 25
  }, {
    "charLength" : 1,
    "startLineNumber" : 195,
    "startColumnNumber" : 12,
    "endLineNumber" : 195,
    "endColumnNumber" : 13
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  } ]
}