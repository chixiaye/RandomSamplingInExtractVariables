{
  "id" : 398,
  "expression" : "e",
  "projectName" : "jenkinsci@jenkins",
  "commitID" : "c44fa7f4cf769257844d562353a579a198ea517a",
  "filePath" : "/core/src/main/java/hudson/model/labels/LabelExpression.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "e",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 284,
      "startColumnNumber" : 40,
      "endLineNumber" : 284,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 284,
        "startColumnNumber" : 19,
        "endLineNumber" : 284,
        "endColumnNumber" : 109
      },
      "nodeContext" : "FormValidation.error(e,Messages.LabelExpression_InvalidBooleanExpression(e.getMessage()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 284,
        "startColumnNumber" : 12,
        "endLineNumber" : 284,
        "endColumnNumber" : 110
      },
      "nodeContext" : "return FormValidation.error(e,Messages.LabelExpression_InvalidBooleanExpression(e.getMessage()));\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 283,
        "startColumnNumber" : 35,
        "endLineNumber" : 285,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  return FormValidation.error(e,Messages.LabelExpression_InvalidBooleanExpression(e.getMessage()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 149,
        "startLineNumber" : 283,
        "startColumnNumber" : 10,
        "endLineNumber" : 285,
        "endColumnNumber" : 9
      },
      "nodeContext" : "catch (ANTLRException e) {\n  return FormValidation.error(e,Messages.LabelExpression_InvalidBooleanExpression(e.getMessage()));\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 214,
        "startLineNumber" : 281,
        "startColumnNumber" : 8,
        "endLineNumber" : 285,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  Label.parseExpression(expression);\n}\n catch (ANTLRException e) {\n  return FormValidation.error(e,Messages.LabelExpression_InvalidBooleanExpression(e.getMessage()));\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 24,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2233,
        "startLineNumber" : 277,
        "startColumnNumber" : 96,
        "endLineNumber" : 324,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (Util.fixEmptyAndTrim(expression) == null) {\n    return FormValidation.ok();\n  }\n  try {\n    Label.parseExpression(expression);\n  }\n catch (  ANTLRException e) {\n    return FormValidation.error(e,Messages.LabelExpression_InvalidBooleanExpression(e.getMessage()));\n  }\n  final Jenkins j=Jenkins.get();\n  Label l=j.getLabel(expression);\n  if (l.isEmpty()) {\n    for (    LabelAtom a : l.listAtoms()) {\n      if (a.isEmpty()) {\n        LabelAtom nearest=LabelAtom.findNearest(a.getName());\n        return FormValidation.warning(Messages.LabelExpression_NoMatch_DidYouMean(a.getName(),nearest.getDisplayName()));\n      }\n    }\n    return FormValidation.warning(Messages.LabelExpression_NoMatch());\n  }\n  if (item != null) {\n    final List<FormValidation> problems=new ArrayList<>();\n    for (    AbstractProject.LabelValidator v : j.getExtensionList(AbstractProject.LabelValidator.class)) {\n      FormValidation result=v.checkItem(item,l);\n      if (FormValidation.Kind.OK.equals(result.kind)) {\n        continue;\n      }\n      problems.add(result);\n    }\n    for (    LabelValidator v : j.getExtensionList(LabelValidator.class)) {\n      FormValidation result=v.check(item,l);\n      if (FormValidation.Kind.OK.equals(result.kind)) {\n        continue;\n      }\n      problems.add(result);\n    }\n    if (!problems.isEmpty()) {\n      return FormValidation.aggregate(problems);\n    }\n  }\n  return FormValidation.okWithMarkup(Messages.LabelExpression_LabelLink(j.getRootUrl(),Util.escape(l.getName()),l.getUrl(),l.getNodes().size(),l.getClouds().size()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 247,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2810,
        "startLineNumber" : 266,
        "startColumnNumber" : 4,
        "endLineNumber" : 324,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Validates a label expression.\n * @param expression The label expression to validate.\n * @param item       The context item (like a job or a folder), if applicable; used for potential additionalrestrictions via  {@link LabelValidator} instances.\n * @return The validation result.\n * @since 2.243\n */\n@NonNull public static FormValidation validate(@Nullable String expression,@CheckForNull Item item){\n  if (Util.fixEmptyAndTrim(expression) == null) {\n    return FormValidation.ok();\n  }\n  try {\n    Label.parseExpression(expression);\n  }\n catch (  ANTLRException e) {\n    return FormValidation.error(e,Messages.LabelExpression_InvalidBooleanExpression(e.getMessage()));\n  }\n  final Jenkins j=Jenkins.get();\n  Label l=j.getLabel(expression);\n  if (l.isEmpty()) {\n    for (    LabelAtom a : l.listAtoms()) {\n      if (a.isEmpty()) {\n        LabelAtom nearest=LabelAtom.findNearest(a.getName());\n        return FormValidation.warning(Messages.LabelExpression_NoMatch_DidYouMean(a.getName(),nearest.getDisplayName()));\n      }\n    }\n    return FormValidation.warning(Messages.LabelExpression_NoMatch());\n  }\n  if (item != null) {\n    final List<FormValidation> problems=new ArrayList<>();\n    for (    AbstractProject.LabelValidator v : j.getExtensionList(AbstractProject.LabelValidator.class)) {\n      FormValidation result=v.checkItem(item,l);\n      if (FormValidation.Kind.OK.equals(result.kind)) {\n        continue;\n      }\n      problems.add(result);\n    }\n    for (    LabelValidator v : j.getExtensionList(LabelValidator.class)) {\n      FormValidation result=v.check(item,l);\n      if (FormValidation.Kind.OK.equals(result.kind)) {\n        continue;\n      }\n      problems.add(result);\n    }\n    if (!problems.isEmpty()) {\n      return FormValidation.aggregate(problems);\n    }\n  }\n  return FormValidation.okWithMarkup(Messages.LabelExpression_LabelLink(j.getRootUrl(),Util.escape(l.getName()),l.getUrl(),l.getNodes().size(),l.getClouds().size()));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 268,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 284,
        "startColumnNumber" : 12,
        "endLineNumber" : 284,
        "endColumnNumber" : 110
      },
      "nodeContext" : "return FormValidation.error(e,Messages.LabelExpression_InvalidBooleanExpression(e.getMessage()));\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "hudson.model.labels.ANTLRException"
  }, {
    "nodeContext" : "e",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 284,
      "startColumnNumber" : 93,
      "endLineNumber" : 284,
      "endColumnNumber" : 94
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 284,
        "startColumnNumber" : 93,
        "endLineNumber" : 284,
        "endColumnNumber" : 107
      },
      "nodeContext" : "e.getMessage()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 65,
        "startLineNumber" : 284,
        "startColumnNumber" : 43,
        "endLineNumber" : 284,
        "endColumnNumber" : 108
      },
      "nodeContext" : "Messages.LabelExpression_InvalidBooleanExpression(e.getMessage())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 90,
        "startLineNumber" : 284,
        "startColumnNumber" : 19,
        "endLineNumber" : 284,
        "endColumnNumber" : 109
      },
      "nodeContext" : "FormValidation.error(e,Messages.LabelExpression_InvalidBooleanExpression(e.getMessage()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 284,
        "startColumnNumber" : 12,
        "endLineNumber" : 284,
        "endColumnNumber" : 110
      },
      "nodeContext" : "return FormValidation.error(e,Messages.LabelExpression_InvalidBooleanExpression(e.getMessage()));\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 283,
        "startColumnNumber" : 35,
        "endLineNumber" : 285,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  return FormValidation.error(e,Messages.LabelExpression_InvalidBooleanExpression(e.getMessage()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 149,
        "startLineNumber" : 283,
        "startColumnNumber" : 10,
        "endLineNumber" : 285,
        "endColumnNumber" : 9
      },
      "nodeContext" : "catch (ANTLRException e) {\n  return FormValidation.error(e,Messages.LabelExpression_InvalidBooleanExpression(e.getMessage()));\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 214,
        "startLineNumber" : 281,
        "startColumnNumber" : 8,
        "endLineNumber" : 285,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  Label.parseExpression(expression);\n}\n catch (ANTLRException e) {\n  return FormValidation.error(e,Messages.LabelExpression_InvalidBooleanExpression(e.getMessage()));\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 24,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2233,
        "startLineNumber" : 277,
        "startColumnNumber" : 96,
        "endLineNumber" : 324,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (Util.fixEmptyAndTrim(expression) == null) {\n    return FormValidation.ok();\n  }\n  try {\n    Label.parseExpression(expression);\n  }\n catch (  ANTLRException e) {\n    return FormValidation.error(e,Messages.LabelExpression_InvalidBooleanExpression(e.getMessage()));\n  }\n  final Jenkins j=Jenkins.get();\n  Label l=j.getLabel(expression);\n  if (l.isEmpty()) {\n    for (    LabelAtom a : l.listAtoms()) {\n      if (a.isEmpty()) {\n        LabelAtom nearest=LabelAtom.findNearest(a.getName());\n        return FormValidation.warning(Messages.LabelExpression_NoMatch_DidYouMean(a.getName(),nearest.getDisplayName()));\n      }\n    }\n    return FormValidation.warning(Messages.LabelExpression_NoMatch());\n  }\n  if (item != null) {\n    final List<FormValidation> problems=new ArrayList<>();\n    for (    AbstractProject.LabelValidator v : j.getExtensionList(AbstractProject.LabelValidator.class)) {\n      FormValidation result=v.checkItem(item,l);\n      if (FormValidation.Kind.OK.equals(result.kind)) {\n        continue;\n      }\n      problems.add(result);\n    }\n    for (    LabelValidator v : j.getExtensionList(LabelValidator.class)) {\n      FormValidation result=v.check(item,l);\n      if (FormValidation.Kind.OK.equals(result.kind)) {\n        continue;\n      }\n      problems.add(result);\n    }\n    if (!problems.isEmpty()) {\n      return FormValidation.aggregate(problems);\n    }\n  }\n  return FormValidation.okWithMarkup(Messages.LabelExpression_LabelLink(j.getRootUrl(),Util.escape(l.getName()),l.getUrl(),l.getNodes().size(),l.getClouds().size()));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 247,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2810,
        "startLineNumber" : 266,
        "startColumnNumber" : 4,
        "endLineNumber" : 324,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Validates a label expression.\n * @param expression The label expression to validate.\n * @param item       The context item (like a job or a folder), if applicable; used for potential additionalrestrictions via  {@link LabelValidator} instances.\n * @return The validation result.\n * @since 2.243\n */\n@NonNull public static FormValidation validate(@Nullable String expression,@CheckForNull Item item){\n  if (Util.fixEmptyAndTrim(expression) == null) {\n    return FormValidation.ok();\n  }\n  try {\n    Label.parseExpression(expression);\n  }\n catch (  ANTLRException e) {\n    return FormValidation.error(e,Messages.LabelExpression_InvalidBooleanExpression(e.getMessage()));\n  }\n  final Jenkins j=Jenkins.get();\n  Label l=j.getLabel(expression);\n  if (l.isEmpty()) {\n    for (    LabelAtom a : l.listAtoms()) {\n      if (a.isEmpty()) {\n        LabelAtom nearest=LabelAtom.findNearest(a.getName());\n        return FormValidation.warning(Messages.LabelExpression_NoMatch_DidYouMean(a.getName(),nearest.getDisplayName()));\n      }\n    }\n    return FormValidation.warning(Messages.LabelExpression_NoMatch());\n  }\n  if (item != null) {\n    final List<FormValidation> problems=new ArrayList<>();\n    for (    AbstractProject.LabelValidator v : j.getExtensionList(AbstractProject.LabelValidator.class)) {\n      FormValidation result=v.checkItem(item,l);\n      if (FormValidation.Kind.OK.equals(result.kind)) {\n        continue;\n      }\n      problems.add(result);\n    }\n    for (    LabelValidator v : j.getExtensionList(LabelValidator.class)) {\n      FormValidation result=v.check(item,l);\n      if (FormValidation.Kind.OK.equals(result.kind)) {\n        continue;\n      }\n      problems.add(result);\n    }\n    if (!problems.isEmpty()) {\n      return FormValidation.aggregate(problems);\n    }\n  }\n  return FormValidation.okWithMarkup(Messages.LabelExpression_LabelLink(j.getRootUrl(),Util.escape(l.getName()),l.getUrl(),l.getNodes().size(),l.getClouds().size()));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 268,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 98,
        "startLineNumber" : 284,
        "startColumnNumber" : 12,
        "endLineNumber" : 284,
        "endColumnNumber" : 110
      },
      "nodeContext" : "return FormValidation.error(e,Messages.LabelExpression_InvalidBooleanExpression(e.getMessage()));\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 11,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "hudson.model.labels.ANTLRException"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 284,
    "startColumnNumber" : 40,
    "endLineNumber" : 284,
    "endColumnNumber" : 41
  }, {
    "charLength" : 1,
    "startLineNumber" : 284,
    "startColumnNumber" : 93,
    "endLineNumber" : 284,
    "endColumnNumber" : 94
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 0
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}