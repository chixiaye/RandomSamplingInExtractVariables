{
  "id" : 509,
  "expression" : "chargeSound",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "a7188c48845dd423fc9b58bc6bcf6797f6d25b46",
  "filePath" : "/core/src/mindustry/world/blocks/defense/turrets/Turret.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "chargeSound",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 381,
      "startColumnNumber" : 16,
      "endLineNumber" : 381,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 381,
        "startColumnNumber" : 16,
        "endLineNumber" : 381,
        "endColumnNumber" : 53
      },
      "nodeContext" : "chargeSound.at(x + tr.x,y + tr.y,1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 381,
        "startColumnNumber" : 16,
        "endLineNumber" : 381,
        "endColumnNumber" : 54
      },
      "nodeContext" : "chargeSound.at(x + tr.x,y + tr.y,1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 1034,
        "startLineNumber" : 376,
        "startColumnNumber" : 30,
        "endLineNumber" : 404,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  useAmmo();\n  tr.trns(rotation,shootLength);\n  chargeBeginEffect.at(x + tr.x,y + tr.y,rotation);\n  chargeSound.at(x + tr.x,y + tr.y,1);\n  for (int i=0; i < chargeEffects; i++) {\n    Time.run(Mathf.random(chargeMaxDelay),() -> {\n      if (!isValid())       return;\n      tr.trns(rotation,shootLength);\n      chargeEffect.at(x + tr.x,y + tr.y,rotation);\n    }\n);\n  }\n  charging=true;\n  Time.run(chargeTime,() -> {\n    if (!isValid())     return;\n    tr.trns(rotation,shootLength);\n    recoil=recoilAmount;\n    heat=1f;\n    bullet(type,rotation + Mathf.range(inaccuracy));\n    effects();\n    charging=false;\n  }\n);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 135,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2464,
        "startLineNumber" : 376,
        "startColumnNumber" : 12,
        "endLineNumber" : 442,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (chargeTime > 0) {\n  useAmmo();\n  tr.trns(rotation,shootLength);\n  chargeBeginEffect.at(x + tr.x,y + tr.y,rotation);\n  chargeSound.at(x + tr.x,y + tr.y,1);\n  for (int i=0; i < chargeEffects; i++) {\n    Time.run(Mathf.random(chargeMaxDelay),() -> {\n      if (!isValid())       return;\n      tr.trns(rotation,shootLength);\n      chargeEffect.at(x + tr.x,y + tr.y,rotation);\n    }\n);\n  }\n  charging=true;\n  Time.run(chargeTime,() -> {\n    if (!isValid())     return;\n    tr.trns(rotation,shootLength);\n    recoil=recoilAmount;\n    heat=1f;\n    bullet(type,rotation + Mathf.range(inaccuracy));\n    effects();\n    charging=false;\n  }\n);\n}\n else if (burstSpacing > 0.0001f) {\n  for (int i=0; i < shots; i++) {\n    Time.run(burstSpacing * i,() -> {\n      if (!isValid() || !hasAmmo())       return;\n      recoil=recoilAmount;\n      tr.trns(rotation,shootLength,Mathf.range(xRand));\n      bullet(type,rotation + Mathf.range(inaccuracy));\n      effects();\n      useAmmo();\n      recoil=recoilAmount;\n      heat=1f;\n    }\n);\n  }\n}\n else {\n  if (alternate) {\n    float i=(shotCounter % shots) - (shots - 1) / 2f;\n    tr.trns(rotation - 90,spread * i + Mathf.range(xRand),shootLength);\n    bullet(type,rotation + Mathf.range(inaccuracy));\n  }\n else {\n    tr.trns(rotation,shootLength,Mathf.range(xRand));\n    for (int i=0; i < shots; i++) {\n      bullet(type,rotation + Mathf.range(inaccuracy + type.inaccuracy) + (i - (int)(shots / 2f)) * spread);\n    }\n  }\n  shotCounter++;\n  recoil=recoilAmount;\n  heat=1f;\n  effects();\n  useAmmo();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 322,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2558,
        "startLineNumber" : 373,
        "startColumnNumber" : 45,
        "endLineNumber" : 443,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (chargeTime > 0) {\n    useAmmo();\n    tr.trns(rotation,shootLength);\n    chargeBeginEffect.at(x + tr.x,y + tr.y,rotation);\n    chargeSound.at(x + tr.x,y + tr.y,1);\n    for (int i=0; i < chargeEffects; i++) {\n      Time.run(Mathf.random(chargeMaxDelay),() -> {\n        if (!isValid())         return;\n        tr.trns(rotation,shootLength);\n        chargeEffect.at(x + tr.x,y + tr.y,rotation);\n      }\n);\n    }\n    charging=true;\n    Time.run(chargeTime,() -> {\n      if (!isValid())       return;\n      tr.trns(rotation,shootLength);\n      recoil=recoilAmount;\n      heat=1f;\n      bullet(type,rotation + Mathf.range(inaccuracy));\n      effects();\n      charging=false;\n    }\n);\n  }\n else   if (burstSpacing > 0.0001f) {\n    for (int i=0; i < shots; i++) {\n      Time.run(burstSpacing * i,() -> {\n        if (!isValid() || !hasAmmo())         return;\n        recoil=recoilAmount;\n        tr.trns(rotation,shootLength,Mathf.range(xRand));\n        bullet(type,rotation + Mathf.range(inaccuracy));\n        effects();\n        useAmmo();\n        recoil=recoilAmount;\n        heat=1f;\n      }\n);\n    }\n  }\n else {\n    if (alternate) {\n      float i=(shotCounter % shots) - (shots - 1) / 2f;\n      tr.trns(rotation - 90,spread * i + Mathf.range(xRand),shootLength);\n      bullet(type,rotation + Mathf.range(inaccuracy));\n    }\n else {\n      tr.trns(rotation,shootLength,Mathf.range(xRand));\n      for (int i=0; i < shots; i++) {\n        bullet(type,rotation + Mathf.range(inaccuracy + type.inaccuracy) + (i - (int)(shots / 2f)) * spread);\n      }\n    }\n    shotCounter++;\n    recoil=recoilAmount;\n    heat=1f;\n    effects();\n    useAmmo();\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 323,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2595,
        "startLineNumber" : 373,
        "startColumnNumber" : 8,
        "endLineNumber" : 443,
        "endColumnNumber" : 9
      },
      "nodeContext" : "protected void shoot(BulletType type){\n  if (chargeTime > 0) {\n    useAmmo();\n    tr.trns(rotation,shootLength);\n    chargeBeginEffect.at(x + tr.x,y + tr.y,rotation);\n    chargeSound.at(x + tr.x,y + tr.y,1);\n    for (int i=0; i < chargeEffects; i++) {\n      Time.run(Mathf.random(chargeMaxDelay),() -> {\n        if (!isValid())         return;\n        tr.trns(rotation,shootLength);\n        chargeEffect.at(x + tr.x,y + tr.y,rotation);\n      }\n);\n    }\n    charging=true;\n    Time.run(chargeTime,() -> {\n      if (!isValid())       return;\n      tr.trns(rotation,shootLength);\n      recoil=recoilAmount;\n      heat=1f;\n      bullet(type,rotation + Mathf.range(inaccuracy));\n      effects();\n      charging=false;\n    }\n);\n  }\n else   if (burstSpacing > 0.0001f) {\n    for (int i=0; i < shots; i++) {\n      Time.run(burstSpacing * i,() -> {\n        if (!isValid() || !hasAmmo())         return;\n        recoil=recoilAmount;\n        tr.trns(rotation,shootLength,Mathf.range(xRand));\n        bullet(type,rotation + Mathf.range(inaccuracy));\n        effects();\n        useAmmo();\n        recoil=recoilAmount;\n        heat=1f;\n      }\n);\n    }\n  }\n else {\n    if (alternate) {\n      float i=(shotCounter % shots) - (shots - 1) / 2f;\n      tr.trns(rotation - 90,spread * i + Mathf.range(xRand),shootLength);\n      bullet(type,rotation + Mathf.range(inaccuracy));\n    }\n else {\n      tr.trns(rotation,shootLength,Mathf.range(xRand));\n      for (int i=0; i < shots; i++) {\n        bullet(type,rotation + Mathf.range(inaccuracy + type.inaccuracy) + (i - (int)(shots / 2f)) * spread);\n      }\n    }\n    shotCounter++;\n    recoil=recoilAmount;\n    heat=1f;\n    effects();\n    useAmmo();\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 331,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 381,
        "startColumnNumber" : 16,
        "endLineNumber" : 381,
        "endColumnNumber" : 54
      },
      "nodeContext" : "chargeSound.at(x + tr.x,y + tr.y,1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "mindustry.world.blocks.defense.turrets.Sound"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 381,
    "startColumnNumber" : 16,
    "endLineNumber" : 381,
    "endColumnNumber" : 27
  } ],
  "layoutRelationDataList" : [ ]
}