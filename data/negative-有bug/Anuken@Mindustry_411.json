{
  "id" : 411,
  "expression" : "\"en_US\"",
  "projectName" : "Anuken@Mindustry",
  "commitID" : "a7188c48845dd423fc9b58bc6bcf6797f6d25b46",
  "filePath" : "/core/src/mindustry/core/NetServer.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"en_US\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 199,
      "startColumnNumber" : 32,
      "endLineNumber" : 199,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 199,
        "startColumnNumber" : 16,
        "endLineNumber" : 199,
        "endColumnNumber" : 39
      },
      "nodeContext" : "packet.locale=\"en_US\"",
      "nodeType" : "Assignment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 199,
        "startColumnNumber" : 16,
        "endLineNumber" : 199,
        "endColumnNumber" : 40
      },
      "nodeContext" : "packet.locale=\"en_US\";\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 198,
        "startColumnNumber" : 37,
        "endLineNumber" : 200,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  packet.locale=\"en_US\";\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 198,
        "startColumnNumber" : 12,
        "endLineNumber" : 200,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (packet.locale == null) {\n  packet.locale=\"en_US\";\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LambdaExpression,body]",
      "nodePosition" : {
        "charLength" : 5611,
        "startLineNumber" : 95,
        "startColumnNumber" : 63,
        "endLineNumber" : 249,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (con.address.startsWith(\"steam:\")) {\n    packet.uuid=con.address.substring(\"steam:\".length());\n  }\n  String uuid=packet.uuid;\n  byte[] buuid=Base64Coder.decode(uuid);\n  CRC32 crc=new CRC32();\n  crc.update(buuid,0,8);\n  ByteBuffer buff=ByteBuffer.allocate(8);\n  buff.put(buuid,8,8);\n  buff.position(0);\n  if (crc.getValue() != buff.getLong()) {\n    con.kick(KickReason.clientOutdated);\n    return;\n  }\n  if (admins.isIPBanned(con.address) || admins.isSubnetBanned(con.address))   return;\n  if (con.hasBegunConnecting) {\n    con.kick(KickReason.idInUse);\n    return;\n  }\n  PlayerInfo info=admins.getInfo(uuid);\n  con.hasBegunConnecting=true;\n  con.mobile=packet.mobile;\n  if (packet.uuid == null || packet.usid == null) {\n    con.kick(KickReason.idInUse);\n    return;\n  }\n  if (admins.isIDBanned(uuid)) {\n    con.kick(KickReason.banned);\n    return;\n  }\n  if (Time.millis() < admins.getKickTime(uuid,con.address)) {\n    con.kick(KickReason.recentKick);\n    return;\n  }\n  if (admins.getPlayerLimit() > 0 && Groups.player.size() >= admins.getPlayerLimit() && !netServer.admins.isAdmin(uuid,packet.usid)) {\n    con.kick(KickReason.playerLimit);\n    return;\n  }\n  Seq<String> extraMods=packet.mods.copy();\n  Seq<String> missingMods=mods.getIncompatibility(extraMods);\n  if (!extraMods.isEmpty() || !missingMods.isEmpty()) {\n    StringBuilder result=new StringBuilder(\"[accent]Incompatible mods![]\\n\\n\");\n    if (!missingMods.isEmpty()) {\n      result.append(\"Missing:[lightgray]\\n\").append(\"> \").append(missingMods.toString(\"\\n> \"));\n      result.append(\"[]\\n\");\n    }\n    if (!extraMods.isEmpty()) {\n      result.append(\"Unnecessary mods:[lightgray]\\n\").append(\"> \").append(extraMods.toString(\"\\n> \"));\n    }\n    con.kick(result.toString(),0);\n  }\n  if (!admins.isWhitelisted(packet.uuid,packet.usid)) {\n    info.adminUsid=packet.usid;\n    info.lastName=packet.name;\n    info.id=packet.uuid;\n    admins.save();\n    Call.infoMessage(con,\"You are not whitelisted here.\");\n    info(\"&lcDo &lywhitelist-add @&lc to whitelist the player &lb'@'\",packet.uuid,packet.name);\n    con.kick(KickReason.whitelist);\n    return;\n  }\n  if (packet.versionType == null || ((packet.version == -1 || !packet.versionType.equals(Version.type)) && Version.build != -1 && !admins.allowsCustomClients())) {\n    con.kick(!Version.type.equals(packet.versionType) ? KickReason.typeMismatch : KickReason.customClient);\n    return;\n  }\n  boolean preventDuplicates=headless && netServer.admins.isStrict();\n  if (preventDuplicates) {\n    if (Groups.player.contains(p -> p.name.trim().equalsIgnoreCase(packet.name.trim()))) {\n      con.kick(KickReason.nameInUse);\n      return;\n    }\n    if (Groups.player.contains(player -> player.uuid().equals(packet.uuid) || player.usid().equals(packet.usid))) {\n      con.kick(KickReason.idInUse);\n      return;\n    }\n  }\n  packet.name=fixName(packet.name);\n  if (packet.name.trim().length() <= 0) {\n    con.kick(KickReason.nameEmpty);\n    return;\n  }\n  if (packet.locale == null) {\n    packet.locale=\"en_US\";\n  }\n  String ip=con.address;\n  admins.updatePlayerJoined(uuid,ip,packet.name);\n  if (packet.version != Version.build && Version.build != -1 && packet.version != -1) {\n    con.kick(packet.version > Version.build ? KickReason.serverOutdated : KickReason.clientOutdated);\n    return;\n  }\n  if (packet.version == -1) {\n    con.modclient=true;\n  }\n  Player player=Player.create();\n  player.admin=admins.isAdmin(uuid,packet.usid);\n  player.con=con;\n  player.con.usid=packet.usid;\n  player.con.uuid=uuid;\n  player.con.mobile=packet.mobile;\n  player.name=packet.name;\n  player.locale=packet.locale;\n  player.color.set(packet.color).a(1f);\n  if (!player.admin && !info.admin) {\n    info.adminUsid=packet.usid;\n  }\n  try {\n    writeBuffer.reset();\n    player.write(outputBuffer);\n  }\n catch (  Throwable t) {\n    con.kick(KickReason.nameEmpty);\n    err(t);\n    return;\n  }\n  con.player=player;\n  player.team(assignTeam(player));\n  sendWorldData(player);\n  platform.updateRPC();\n  Events.fire(new PlayerConnect(player));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 810,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 5628,
        "startLineNumber" : 95,
        "startColumnNumber" : 46,
        "endLineNumber" : 249,
        "endColumnNumber" : 9
      },
      "nodeContext" : "(con,packet) -> {\n  if (con.address.startsWith(\"steam:\")) {\n    packet.uuid=con.address.substring(\"steam:\".length());\n  }\n  String uuid=packet.uuid;\n  byte[] buuid=Base64Coder.decode(uuid);\n  CRC32 crc=new CRC32();\n  crc.update(buuid,0,8);\n  ByteBuffer buff=ByteBuffer.allocate(8);\n  buff.put(buuid,8,8);\n  buff.position(0);\n  if (crc.getValue() != buff.getLong()) {\n    con.kick(KickReason.clientOutdated);\n    return;\n  }\n  if (admins.isIPBanned(con.address) || admins.isSubnetBanned(con.address))   return;\n  if (con.hasBegunConnecting) {\n    con.kick(KickReason.idInUse);\n    return;\n  }\n  PlayerInfo info=admins.getInfo(uuid);\n  con.hasBegunConnecting=true;\n  con.mobile=packet.mobile;\n  if (packet.uuid == null || packet.usid == null) {\n    con.kick(KickReason.idInUse);\n    return;\n  }\n  if (admins.isIDBanned(uuid)) {\n    con.kick(KickReason.banned);\n    return;\n  }\n  if (Time.millis() < admins.getKickTime(uuid,con.address)) {\n    con.kick(KickReason.recentKick);\n    return;\n  }\n  if (admins.getPlayerLimit() > 0 && Groups.player.size() >= admins.getPlayerLimit() && !netServer.admins.isAdmin(uuid,packet.usid)) {\n    con.kick(KickReason.playerLimit);\n    return;\n  }\n  Seq<String> extraMods=packet.mods.copy();\n  Seq<String> missingMods=mods.getIncompatibility(extraMods);\n  if (!extraMods.isEmpty() || !missingMods.isEmpty()) {\n    StringBuilder result=new StringBuilder(\"[accent]Incompatible mods![]\\n\\n\");\n    if (!missingMods.isEmpty()) {\n      result.append(\"Missing:[lightgray]\\n\").append(\"> \").append(missingMods.toString(\"\\n> \"));\n      result.append(\"[]\\n\");\n    }\n    if (!extraMods.isEmpty()) {\n      result.append(\"Unnecessary mods:[lightgray]\\n\").append(\"> \").append(extraMods.toString(\"\\n> \"));\n    }\n    con.kick(result.toString(),0);\n  }\n  if (!admins.isWhitelisted(packet.uuid,packet.usid)) {\n    info.adminUsid=packet.usid;\n    info.lastName=packet.name;\n    info.id=packet.uuid;\n    admins.save();\n    Call.infoMessage(con,\"You are not whitelisted here.\");\n    info(\"&lcDo &lywhitelist-add @&lc to whitelist the player &lb'@'\",packet.uuid,packet.name);\n    con.kick(KickReason.whitelist);\n    return;\n  }\n  if (packet.versionType == null || ((packet.version == -1 || !packet.versionType.equals(Version.type)) && Version.build != -1 && !admins.allowsCustomClients())) {\n    con.kick(!Version.type.equals(packet.versionType) ? KickReason.typeMismatch : KickReason.customClient);\n    return;\n  }\n  boolean preventDuplicates=headless && netServer.admins.isStrict();\n  if (preventDuplicates) {\n    if (Groups.player.contains(p -> p.name.trim().equalsIgnoreCase(packet.name.trim()))) {\n      con.kick(KickReason.nameInUse);\n      return;\n    }\n    if (Groups.player.contains(player -> player.uuid().equals(packet.uuid) || player.usid().equals(packet.usid))) {\n      con.kick(KickReason.idInUse);\n      return;\n    }\n  }\n  packet.name=fixName(packet.name);\n  if (packet.name.trim().length() <= 0) {\n    con.kick(KickReason.nameEmpty);\n    return;\n  }\n  if (packet.locale == null) {\n    packet.locale=\"en_US\";\n  }\n  String ip=con.address;\n  admins.updatePlayerJoined(uuid,ip,packet.name);\n  if (packet.version != Version.build && Version.build != -1 && packet.version != -1) {\n    con.kick(packet.version > Version.build ? KickReason.serverOutdated : KickReason.clientOutdated);\n    return;\n  }\n  if (packet.version == -1) {\n    con.modclient=true;\n  }\n  Player player=Player.create();\n  player.admin=admins.isAdmin(uuid,packet.usid);\n  player.con=con;\n  player.con.usid=packet.usid;\n  player.con.uuid=uuid;\n  player.con.mobile=packet.mobile;\n  player.name=packet.name;\n  player.locale=packet.locale;\n  player.color.set(packet.color).a(1f);\n  if (!player.admin && !info.admin) {\n    info.adminUsid=packet.usid;\n  }\n  try {\n    writeBuffer.reset();\n    player.write(outputBuffer);\n  }\n catch (  Throwable t) {\n    con.kick(KickReason.nameEmpty);\n    err(t);\n    return;\n  }\n  con.player=player;\n  player.team(assignTeam(player));\n  sendWorldData(player);\n  platform.updateRPC();\n  Events.fire(new PlayerConnect(player));\n}\n",
      "nodeType" : "LambdaExpression",
      "astNodeNumber" : 815,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 199,
        "startColumnNumber" : 16,
        "endLineNumber" : 199,
        "endColumnNumber" : 40
      },
      "nodeContext" : "packet.locale=\"en_US\";\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 199,
    "startColumnNumber" : 32,
    "endLineNumber" : 199,
    "endColumnNumber" : 39
  } ],
  "layoutRelationDataList" : [ ]
}