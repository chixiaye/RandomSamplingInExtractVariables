{
  "id" : 419,
  "expression" : "loader",
  "projectName" : "Netflix@eureka",
  "commitID" : "2f6d04dae7f6fca2a17e85fc53020e13272a79b2",
  "filePath" : "/eureka-core/src/test/java/com/netflix/eureka2/utils/rx/ResourceObservableTest.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "loader",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 59,
      "startColumnNumber" : 8,
      "endLineNumber" : 59,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 59,
        "endColumnNumber" : 24
      },
      "nodeContext" : "loader.add(addA)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 59,
        "endColumnNumber" : 25
      },
      "nodeContext" : "loader.add(addA);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 928,
        "startLineNumber" : 54,
        "startColumnNumber" : 67,
        "endLineNumber" : 80,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  subscribe();\n  ItemUpdate addA=new ItemUpdate(Operation.Add,\"A\");\n  loader.add(addA);\n  expected.add(\"A\");\n  ItemUpdate addB=new ItemUpdate(Operation.Add,\"B\");\n  loader.add(addA,addB);\n  expected.add(\"B\");\n  scheduler.advanceTimeBy(REFRESH,TimeUnit.SECONDS);\n  assertThat(collector,is(equalTo(expected)));\n  ItemUpdate addC=new ItemUpdate(Operation.Add,\"C\");\n  ItemUpdate removeA=new ItemUpdate(Operation.Remove,\"A\");\n  loader.add(addB,addC);\n  loader.remove(removeA);\n  expected.add(\"C\");\n  expected.remove(\"A\");\n  scheduler.advanceTimeBy(REFRESH,TimeUnit.SECONDS);\n  assertThat(collector,is(equalTo(expected)));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 128,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1001,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 80,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testTaskIsScheduledPeriodically() throws Exception {\n  subscribe();\n  ItemUpdate addA=new ItemUpdate(Operation.Add,\"A\");\n  loader.add(addA);\n  expected.add(\"A\");\n  ItemUpdate addB=new ItemUpdate(Operation.Add,\"B\");\n  loader.add(addA,addB);\n  expected.add(\"B\");\n  scheduler.advanceTimeBy(REFRESH,TimeUnit.SECONDS);\n  assertThat(collector,is(equalTo(expected)));\n  ItemUpdate addC=new ItemUpdate(Operation.Add,\"C\");\n  ItemUpdate removeA=new ItemUpdate(Operation.Remove,\"A\");\n  loader.add(addB,addC);\n  loader.remove(removeA);\n  expected.add(\"C\");\n  expected.remove(\"A\");\n  scheduler.advanceTimeBy(REFRESH,TimeUnit.SECONDS);\n  assertThat(collector,is(equalTo(expected)));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 136,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 59,
        "startColumnNumber" : 8,
        "endLineNumber" : 59,
        "endColumnNumber" : 25
      },
      "nodeContext" : "loader.add(addA);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.netflix.eureka2.utils.rx.ResourceObservableTest.ItemLoader"
  }, {
    "nodeContext" : "loader",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 64,
      "startColumnNumber" : 8,
      "endLineNumber" : 64,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 64,
        "startColumnNumber" : 8,
        "endLineNumber" : 64,
        "endColumnNumber" : 30
      },
      "nodeContext" : "loader.add(addA,addB)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 64,
        "startColumnNumber" : 8,
        "endLineNumber" : 64,
        "endColumnNumber" : 31
      },
      "nodeContext" : "loader.add(addA,addB);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 928,
        "startLineNumber" : 54,
        "startColumnNumber" : 67,
        "endLineNumber" : 80,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  subscribe();\n  ItemUpdate addA=new ItemUpdate(Operation.Add,\"A\");\n  loader.add(addA);\n  expected.add(\"A\");\n  ItemUpdate addB=new ItemUpdate(Operation.Add,\"B\");\n  loader.add(addA,addB);\n  expected.add(\"B\");\n  scheduler.advanceTimeBy(REFRESH,TimeUnit.SECONDS);\n  assertThat(collector,is(equalTo(expected)));\n  ItemUpdate addC=new ItemUpdate(Operation.Add,\"C\");\n  ItemUpdate removeA=new ItemUpdate(Operation.Remove,\"A\");\n  loader.add(addB,addC);\n  loader.remove(removeA);\n  expected.add(\"C\");\n  expected.remove(\"A\");\n  scheduler.advanceTimeBy(REFRESH,TimeUnit.SECONDS);\n  assertThat(collector,is(equalTo(expected)));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 128,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1001,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 80,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testTaskIsScheduledPeriodically() throws Exception {\n  subscribe();\n  ItemUpdate addA=new ItemUpdate(Operation.Add,\"A\");\n  loader.add(addA);\n  expected.add(\"A\");\n  ItemUpdate addB=new ItemUpdate(Operation.Add,\"B\");\n  loader.add(addA,addB);\n  expected.add(\"B\");\n  scheduler.advanceTimeBy(REFRESH,TimeUnit.SECONDS);\n  assertThat(collector,is(equalTo(expected)));\n  ItemUpdate addC=new ItemUpdate(Operation.Add,\"C\");\n  ItemUpdate removeA=new ItemUpdate(Operation.Remove,\"A\");\n  loader.add(addB,addC);\n  loader.remove(removeA);\n  expected.add(\"C\");\n  expected.remove(\"A\");\n  scheduler.advanceTimeBy(REFRESH,TimeUnit.SECONDS);\n  assertThat(collector,is(equalTo(expected)));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 136,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 64,
        "startColumnNumber" : 8,
        "endLineNumber" : 64,
        "endColumnNumber" : 31
      },
      "nodeContext" : "loader.add(addA,addB);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.netflix.eureka2.utils.rx.ResourceObservableTest.ItemLoader"
  }, {
    "nodeContext" : "loader",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 73,
      "startColumnNumber" : 8,
      "endLineNumber" : 73,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 73,
        "startColumnNumber" : 8,
        "endLineNumber" : 73,
        "endColumnNumber" : 30
      },
      "nodeContext" : "loader.add(addB,addC)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 73,
        "startColumnNumber" : 8,
        "endLineNumber" : 73,
        "endColumnNumber" : 31
      },
      "nodeContext" : "loader.add(addB,addC);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 928,
        "startLineNumber" : 54,
        "startColumnNumber" : 67,
        "endLineNumber" : 80,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  subscribe();\n  ItemUpdate addA=new ItemUpdate(Operation.Add,\"A\");\n  loader.add(addA);\n  expected.add(\"A\");\n  ItemUpdate addB=new ItemUpdate(Operation.Add,\"B\");\n  loader.add(addA,addB);\n  expected.add(\"B\");\n  scheduler.advanceTimeBy(REFRESH,TimeUnit.SECONDS);\n  assertThat(collector,is(equalTo(expected)));\n  ItemUpdate addC=new ItemUpdate(Operation.Add,\"C\");\n  ItemUpdate removeA=new ItemUpdate(Operation.Remove,\"A\");\n  loader.add(addB,addC);\n  loader.remove(removeA);\n  expected.add(\"C\");\n  expected.remove(\"A\");\n  scheduler.advanceTimeBy(REFRESH,TimeUnit.SECONDS);\n  assertThat(collector,is(equalTo(expected)));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 128,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1001,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 80,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testTaskIsScheduledPeriodically() throws Exception {\n  subscribe();\n  ItemUpdate addA=new ItemUpdate(Operation.Add,\"A\");\n  loader.add(addA);\n  expected.add(\"A\");\n  ItemUpdate addB=new ItemUpdate(Operation.Add,\"B\");\n  loader.add(addA,addB);\n  expected.add(\"B\");\n  scheduler.advanceTimeBy(REFRESH,TimeUnit.SECONDS);\n  assertThat(collector,is(equalTo(expected)));\n  ItemUpdate addC=new ItemUpdate(Operation.Add,\"C\");\n  ItemUpdate removeA=new ItemUpdate(Operation.Remove,\"A\");\n  loader.add(addB,addC);\n  loader.remove(removeA);\n  expected.add(\"C\");\n  expected.remove(\"A\");\n  scheduler.advanceTimeBy(REFRESH,TimeUnit.SECONDS);\n  assertThat(collector,is(equalTo(expected)));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 136,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 73,
        "startColumnNumber" : 8,
        "endLineNumber" : 73,
        "endColumnNumber" : 31
      },
      "nodeContext" : "loader.add(addB,addC);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.netflix.eureka2.utils.rx.ResourceObservableTest.ItemLoader"
  }, {
    "nodeContext" : "loader",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 74,
      "startColumnNumber" : 8,
      "endLineNumber" : 74,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 74,
        "startColumnNumber" : 8,
        "endLineNumber" : 74,
        "endColumnNumber" : 30
      },
      "nodeContext" : "loader.remove(removeA)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 74,
        "startColumnNumber" : 8,
        "endLineNumber" : 74,
        "endColumnNumber" : 31
      },
      "nodeContext" : "loader.remove(removeA);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 928,
        "startLineNumber" : 54,
        "startColumnNumber" : 67,
        "endLineNumber" : 80,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  subscribe();\n  ItemUpdate addA=new ItemUpdate(Operation.Add,\"A\");\n  loader.add(addA);\n  expected.add(\"A\");\n  ItemUpdate addB=new ItemUpdate(Operation.Add,\"B\");\n  loader.add(addA,addB);\n  expected.add(\"B\");\n  scheduler.advanceTimeBy(REFRESH,TimeUnit.SECONDS);\n  assertThat(collector,is(equalTo(expected)));\n  ItemUpdate addC=new ItemUpdate(Operation.Add,\"C\");\n  ItemUpdate removeA=new ItemUpdate(Operation.Remove,\"A\");\n  loader.add(addB,addC);\n  loader.remove(removeA);\n  expected.add(\"C\");\n  expected.remove(\"A\");\n  scheduler.advanceTimeBy(REFRESH,TimeUnit.SECONDS);\n  assertThat(collector,is(equalTo(expected)));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 128,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1001,
        "startLineNumber" : 53,
        "startColumnNumber" : 4,
        "endLineNumber" : 80,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testTaskIsScheduledPeriodically() throws Exception {\n  subscribe();\n  ItemUpdate addA=new ItemUpdate(Operation.Add,\"A\");\n  loader.add(addA);\n  expected.add(\"A\");\n  ItemUpdate addB=new ItemUpdate(Operation.Add,\"B\");\n  loader.add(addA,addB);\n  expected.add(\"B\");\n  scheduler.advanceTimeBy(REFRESH,TimeUnit.SECONDS);\n  assertThat(collector,is(equalTo(expected)));\n  ItemUpdate addC=new ItemUpdate(Operation.Add,\"C\");\n  ItemUpdate removeA=new ItemUpdate(Operation.Remove,\"A\");\n  loader.add(addB,addC);\n  loader.remove(removeA);\n  expected.add(\"C\");\n  expected.remove(\"A\");\n  scheduler.advanceTimeBy(REFRESH,TimeUnit.SECONDS);\n  assertThat(collector,is(equalTo(expected)));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 136,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 74,
        "startColumnNumber" : 8,
        "endLineNumber" : 74,
        "endColumnNumber" : 31
      },
      "nodeContext" : "loader.remove(removeA);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.netflix.eureka2.utils.rx.ResourceObservableTest.ItemLoader"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 59,
    "startColumnNumber" : 8,
    "endLineNumber" : 59,
    "endColumnNumber" : 14
  }, {
    "charLength" : 6,
    "startLineNumber" : 64,
    "startColumnNumber" : 8,
    "endLineNumber" : 64,
    "endColumnNumber" : 14
  }, {
    "charLength" : 6,
    "startLineNumber" : 73,
    "startColumnNumber" : 8,
    "endLineNumber" : 73,
    "endColumnNumber" : 14
  }, {
    "charLength" : 6,
    "startLineNumber" : 74,
    "startColumnNumber" : 8,
    "endLineNumber" : 74,
    "endColumnNumber" : 14
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  } ]
}