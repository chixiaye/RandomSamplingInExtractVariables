{
  "id" : 349,
  "expression" : "new HttpMessageConverters(converter1,converter2).getConverters()",
  "projectName" : "spring-projects@spring-boot",
  "commitID" : "44299bb9808d0dc21a9bfc1c0c47e1539e00856d",
  "filePath" : "/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/http/HttpMessageConvertersTests.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new HttpMessageConverters(converter1,converter2).getConverters()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 69,
      "startLineNumber" : 102,
      "startColumnNumber" : 45,
      "endLineNumber" : 103,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 7,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 102,
        "startColumnNumber" : 32,
        "endLineNumber" : 103,
        "endColumnNumber" : 31
      },
      "nodeContext" : "converters=new HttpMessageConverters(converter1,converter2).getConverters()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 102,
        "startColumnNumber" : 2,
        "endLineNumber" : 103,
        "endColumnNumber" : 32
      },
      "nodeContext" : "List<HttpMessageConverter<?>> converters=new HttpMessageConverters(converter1,converter2).getConverters();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 477,
        "startLineNumber" : 99,
        "startColumnNumber" : 53,
        "endLineNumber" : 108,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  HttpMessageConverter<?> converter1=mock(HttpMessageConverter.class);\n  HttpMessageConverter<?> converter2=mock(HttpMessageConverter.class);\n  List<HttpMessageConverter<?>> converters=new HttpMessageConverters(converter1,converter2).getConverters();\n  List<HttpMessageConverter<?>> partConverters=extractFormPartConverters(converters);\n  assertThat(partConverters.get(0)).isEqualTo(converter1);\n  assertThat(partConverters.get(1)).isEqualTo(converter2);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 75,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 536,
        "startLineNumber" : 98,
        "startColumnNumber" : 1,
        "endLineNumber" : 108,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void convertersAreAddedToFormPartConverter(){\n  HttpMessageConverter<?> converter1=mock(HttpMessageConverter.class);\n  HttpMessageConverter<?> converter2=mock(HttpMessageConverter.class);\n  List<HttpMessageConverter<?>> converters=new HttpMessageConverters(converter1,converter2).getConverters();\n  List<HttpMessageConverter<?>> partConverters=extractFormPartConverters(converters);\n  assertThat(partConverters.get(0)).isEqualTo(converter1);\n  assertThat(partConverters.get(1)).isEqualTo(converter2);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 81,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 113,
        "startLineNumber" : 102,
        "startColumnNumber" : 2,
        "endLineNumber" : 103,
        "endColumnNumber" : 32
      },
      "nodeContext" : "List<HttpMessageConverter<?>> converters=new HttpMessageConverters(converter1,converter2).getConverters();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 17,
      "astHeight" : 6
    },
    "tokenLength" : 4,
    "type" : "java.util.List<org.springframework.boot.autoconfigure.http.HttpMessageConverter<?>>"
  } ],
  "positionList" : [ {
    "charLength" : 69,
    "startLineNumber" : 102,
    "startColumnNumber" : 45,
    "endLineNumber" : 103,
    "endColumnNumber" : 31
  } ],
  "layoutRelationDataList" : [ ]
}