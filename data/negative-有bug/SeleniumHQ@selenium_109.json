{
  "id" : 109,
  "expression" : "context.findElements(by)",
  "projectName" : "SeleniumHQ@selenium",
  "commitID" : "c146621f39dbec94114835aa1f6af6a0e1fa4cd0",
  "filePath" : "/java/server/src/org/openqa/selenium/grid/node/CustomLocatorHandler.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "context.findElements(by)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 24,
      "startLineNumber" : 200,
      "startColumnNumber" : 17,
      "endLineNumber" : 200,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 4,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 200,
        "startColumnNumber" : 6,
        "endLineNumber" : 200,
        "endColumnNumber" : 41
      },
      "nodeContext" : "toReturn=context.findElements(by)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 200,
        "startColumnNumber" : 6,
        "endLineNumber" : 200,
        "endColumnNumber" : 42
      },
      "nodeContext" : "toReturn=context.findElements(by);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 199,
        "startColumnNumber" : 22,
        "endLineNumber" : 201,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  toReturn=context.findElements(by);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 123,
        "startLineNumber" : 199,
        "startColumnNumber" : 4,
        "endLineNumber" : 203,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (findMultiple) {\n  toReturn=context.findElements(by);\n}\n else {\n  toReturn=context.findElement(by);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 18,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3335,
        "startLineNumber" : 109,
        "startColumnNumber" : 75,
        "endLineNumber" : 207,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String originalContents=Contents.string(req);\n  Map<String,Object> contents=JSON.toType(originalContents,MAP_TYPE);\n  Object using=contents.get(\"using\");\n  if (!(using instanceof String)) {\n    return new HttpResponse().setStatus(HTTP_BAD_REQUEST).setContent(Contents.asJson(ImmutableMap.of(\"value\",ImmutableMap.of(\"error\",\"invalid argument\",\"message\",\"Unable to determine element locating strategy\",\"stacktrace\",\"\"))));\n  }\n  if (W3C_STRATEGIES.contains(using)) {\n    return toNode.execute(req);\n  }\n  Object value=contents.get(\"value\");\n  if (value == null) {\n    return new HttpResponse().setStatus(HTTP_BAD_REQUEST).setContent(Contents.asJson(ImmutableMap.of(\"value\",ImmutableMap.of(\"error\",\"invalid argument\",\"message\",\"Unable to determine element locator arguments\",\"stacktrace\",\"\"))));\n  }\n  Function<Object,By> customLocator=extraLocators.get(using);\n  if (customLocator == null) {\n    return new HttpResponse().setStatus(HTTP_BAD_REQUEST).setContent(Contents.asJson(ImmutableMap.of(\"value\",ImmutableMap.of(\"error\",\"invalid argument\",\"message\",\"Unable to determine element locating strategy for \" + using,\"stacktrace\",\"\"))));\n  }\n  CommandExecutor executor=new NodeWrappingExecutor(toNode);\n  RemoteWebDriver driver=new CustomWebDriver(executor,HttpSessionId.getSessionId(req.getUri()).orElseThrow(() -> new IllegalArgumentException(\"Cannot locate session ID from \" + req.getUri())));\n  SearchContext context=null;\n  RemoteWebElement element;\n  boolean findMultiple=false;\n  UrlTemplate.Match match=FIND_ELEMENT.match(req.getUri());\n  if (match != null) {\n    element=new RemoteWebElement();\n    element.setParent(driver);\n    element.setId(match.getParameters().get(\"elementId\"));\n    context=driver;\n  }\n  match=FIND_ELEMENTS.match(req.getUri());\n  if (match != null) {\n    element=new RemoteWebElement();\n    element.setParent(driver);\n    element.setId(match.getParameters().get(\"elementId\"));\n    context=driver;\n    findMultiple=true;\n  }\n  match=FIND_CHILD_ELEMENT.match(req.getUri());\n  if (match != null) {\n    element=new RemoteWebElement();\n    element.setParent(driver);\n    element.setId(match.getParameters().get(\"elementId\"));\n    context=element;\n  }\n  match=FIND_CHILD_ELEMENTS.match(req.getUri());\n  if (match != null) {\n    element=new RemoteWebElement();\n    element.setParent(driver);\n    element.setId(match.getParameters().get(\"elementId\"));\n    context=element;\n    findMultiple=true;\n  }\n  if (context == null) {\n    throw new IllegalStateException(\"Unable to determine locator context: \" + req);\n  }\n  Object toReturn;\n  By by=customLocator.apply(value);\n  if (findMultiple) {\n    toReturn=context.findElements(by);\n  }\n else {\n    toReturn=context.findElement(by);\n  }\n  return new HttpResponse().setContent(Contents.asJson(ImmutableMap.of(\"value\",toReturn)));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 440,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3420,
        "startLineNumber" : 108,
        "startColumnNumber" : 2,
        "endLineNumber" : 207,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public HttpResponse execute(HttpRequest req) throws UncheckedIOException {\n  String originalContents=Contents.string(req);\n  Map<String,Object> contents=JSON.toType(originalContents,MAP_TYPE);\n  Object using=contents.get(\"using\");\n  if (!(using instanceof String)) {\n    return new HttpResponse().setStatus(HTTP_BAD_REQUEST).setContent(Contents.asJson(ImmutableMap.of(\"value\",ImmutableMap.of(\"error\",\"invalid argument\",\"message\",\"Unable to determine element locating strategy\",\"stacktrace\",\"\"))));\n  }\n  if (W3C_STRATEGIES.contains(using)) {\n    return toNode.execute(req);\n  }\n  Object value=contents.get(\"value\");\n  if (value == null) {\n    return new HttpResponse().setStatus(HTTP_BAD_REQUEST).setContent(Contents.asJson(ImmutableMap.of(\"value\",ImmutableMap.of(\"error\",\"invalid argument\",\"message\",\"Unable to determine element locator arguments\",\"stacktrace\",\"\"))));\n  }\n  Function<Object,By> customLocator=extraLocators.get(using);\n  if (customLocator == null) {\n    return new HttpResponse().setStatus(HTTP_BAD_REQUEST).setContent(Contents.asJson(ImmutableMap.of(\"value\",ImmutableMap.of(\"error\",\"invalid argument\",\"message\",\"Unable to determine element locating strategy for \" + using,\"stacktrace\",\"\"))));\n  }\n  CommandExecutor executor=new NodeWrappingExecutor(toNode);\n  RemoteWebDriver driver=new CustomWebDriver(executor,HttpSessionId.getSessionId(req.getUri()).orElseThrow(() -> new IllegalArgumentException(\"Cannot locate session ID from \" + req.getUri())));\n  SearchContext context=null;\n  RemoteWebElement element;\n  boolean findMultiple=false;\n  UrlTemplate.Match match=FIND_ELEMENT.match(req.getUri());\n  if (match != null) {\n    element=new RemoteWebElement();\n    element.setParent(driver);\n    element.setId(match.getParameters().get(\"elementId\"));\n    context=driver;\n  }\n  match=FIND_ELEMENTS.match(req.getUri());\n  if (match != null) {\n    element=new RemoteWebElement();\n    element.setParent(driver);\n    element.setId(match.getParameters().get(\"elementId\"));\n    context=driver;\n    findMultiple=true;\n  }\n  match=FIND_CHILD_ELEMENT.match(req.getUri());\n  if (match != null) {\n    element=new RemoteWebElement();\n    element.setParent(driver);\n    element.setId(match.getParameters().get(\"elementId\"));\n    context=element;\n  }\n  match=FIND_CHILD_ELEMENTS.match(req.getUri());\n  if (match != null) {\n    element=new RemoteWebElement();\n    element.setParent(driver);\n    element.setId(match.getParameters().get(\"elementId\"));\n    context=element;\n    findMultiple=true;\n  }\n  if (context == null) {\n    throw new IllegalStateException(\"Unable to determine locator context: \" + req);\n  }\n  Object toReturn;\n  By by=customLocator.apply(value);\n  if (findMultiple) {\n    toReturn=context.findElements(by);\n  }\n else {\n    toReturn=context.findElement(by);\n  }\n  return new HttpResponse().setContent(Contents.asJson(ImmutableMap.of(\"value\",toReturn)));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 453,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 200,
        "startColumnNumber" : 6,
        "endLineNumber" : 200,
        "endColumnNumber" : 42
      },
      "nodeContext" : "toReturn=context.findElements(by);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "java.util.List<org.openqa.selenium.WebElement>"
  } ],
  "positionList" : [ {
    "charLength" : 24,
    "startLineNumber" : 200,
    "startColumnNumber" : 17,
    "endLineNumber" : 200,
    "endColumnNumber" : 41
  } ],
  "layoutRelationDataList" : [ ]
}