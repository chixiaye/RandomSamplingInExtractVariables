{
  "id" : 392,
  "expression" : "Hashing.murmur3_32()",
  "projectName" : "pinpoint-apm@pinpoint",
  "commitID" : "cd51da314be7fe261d7dc630dd7c51ce6bb3cc0c",
  "filePath" : "/thirdparty/google-guava/src/main/java/com/google/common/net/InetAddresses.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Hashing.murmur3_32()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 20,
      "startLineNumber" : 900,
      "startColumnNumber" : 22,
      "endLineNumber" : 900,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 44,
        "startLineNumber" : 900,
        "startColumnNumber" : 22,
        "endLineNumber" : 900,
        "endColumnNumber" : 66
      },
      "nodeContext" : "Hashing.murmur3_32().hashLong(addressAsLong)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 900,
        "startColumnNumber" : 22,
        "endLineNumber" : 900,
        "endColumnNumber" : 74
      },
      "nodeContext" : "Hashing.murmur3_32().hashLong(addressAsLong).asInt()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 900,
        "startColumnNumber" : 8,
        "endLineNumber" : 900,
        "endColumnNumber" : 74
      },
      "nodeContext" : "coercedHash=Hashing.murmur3_32().hashLong(addressAsLong).asInt()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 900,
        "startColumnNumber" : 4,
        "endLineNumber" : 900,
        "endColumnNumber" : 75
      },
      "nodeContext" : "int coercedHash=Hashing.murmur3_32().hashLong(addressAsLong).asInt();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1347,
        "startLineNumber" : 869,
        "startColumnNumber" : 67,
        "endLineNumber" : 912,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (ip instanceof Inet4Address) {\n    return (Inet4Address)ip;\n  }\n  byte[] bytes=ip.getAddress();\n  boolean leadingBytesOfZero=true;\n  for (int i=0; i < 15; ++i) {\n    if (bytes[i] != 0) {\n      leadingBytesOfZero=false;\n      break;\n    }\n  }\n  if (leadingBytesOfZero && (bytes[15] == 1)) {\n    return LOOPBACK4;\n  }\n else   if (leadingBytesOfZero && (bytes[15] == 0)) {\n    return ANY4;\n  }\n  Inet6Address ip6=(Inet6Address)ip;\n  long addressAsLong=0;\n  if (hasEmbeddedIPv4ClientAddress(ip6)) {\n    addressAsLong=getEmbeddedIPv4ClientAddress(ip6).hashCode();\n  }\n else {\n    addressAsLong=ByteBuffer.wrap(ip6.getAddress(),0,8).getLong();\n  }\n  int coercedHash=Hashing.murmur3_32().hashLong(addressAsLong).asInt();\n  coercedHash|=0xe0000000;\n  if (coercedHash == 0xffffffff) {\n    coercedHash=0xfffffffe;\n  }\n  return getInet4Address(Ints.toByteArray(coercedHash));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 147,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2242,
        "startLineNumber" : 849,
        "startColumnNumber" : 2,
        "endLineNumber" : 912,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Coerces an IPv6 address into an IPv4 address. <p>HACK: As long as applications continue to use IPv4 addresses for indexing into tables, accounting, et cetera, it may be necessary to <b>coerce</b> IPv6 addresses into IPv4 addresses. This function does so by hashing the upper 64 bits into  {@code 224.0.0.0/3}(64 bits into 29 bits). <p>A \"coerced\" IPv4 address is equivalent to itself. <p>NOTE: This function is failsafe for security purposes: ALL IPv6 addresses (except localhost (::1)) are hashed to avoid the security risk associated with extracting an embedded IPv4 address that might permit elevated privileges.\n * @param ip {@link InetAddress} to \"coerce\"\n * @return {@link Inet4Address} represented \"coerced\" address\n * @since 7.0\n */\npublic static Inet4Address getCoercedIPv4Address(InetAddress ip){\n  if (ip instanceof Inet4Address) {\n    return (Inet4Address)ip;\n  }\n  byte[] bytes=ip.getAddress();\n  boolean leadingBytesOfZero=true;\n  for (int i=0; i < 15; ++i) {\n    if (bytes[i] != 0) {\n      leadingBytesOfZero=false;\n      break;\n    }\n  }\n  if (leadingBytesOfZero && (bytes[15] == 1)) {\n    return LOOPBACK4;\n  }\n else   if (leadingBytesOfZero && (bytes[15] == 0)) {\n    return ANY4;\n  }\n  Inet6Address ip6=(Inet6Address)ip;\n  long addressAsLong=0;\n  if (hasEmbeddedIPv4ClientAddress(ip6)) {\n    addressAsLong=getEmbeddedIPv4ClientAddress(ip6).hashCode();\n  }\n else {\n    addressAsLong=ByteBuffer.wrap(ip6.getAddress(),0,8).getLong();\n  }\n  int coercedHash=Hashing.murmur3_32().hashLong(addressAsLong).asInt();\n  coercedHash|=0xe0000000;\n  if (coercedHash == 0xffffffff) {\n    coercedHash=0xfffffffe;\n  }\n  return getInet4Address(Ints.toByteArray(coercedHash));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 158,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 900,
        "startColumnNumber" : 4,
        "endLineNumber" : 900,
        "endColumnNumber" : 75
      },
      "nodeContext" : "int coercedHash=Hashing.murmur3_32().hashLong(addressAsLong).asInt();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "com.google.common.hash.HashFunction"
  } ],
  "positionList" : [ {
    "charLength" : 20,
    "startLineNumber" : 900,
    "startColumnNumber" : 22,
    "endLineNumber" : 900,
    "endColumnNumber" : 42
  } ],
  "layoutRelationDataList" : [ ]
}