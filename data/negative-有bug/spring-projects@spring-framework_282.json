{
  "id" : 282,
  "expression" : "this.handlerMethodLogger != null",
  "projectName" : "spring-projects@spring-framework",
  "commitID" : "d5dab129097f98ed3148473422eb706c20fd10c9",
  "filePath" : "/spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/AbstractMethodMessageHandler.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "this.handlerMethodLogger != null",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 32,
      "startLineNumber" : 545,
      "startColumnNumber" : 6,
      "endLineNumber" : 545,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 545,
        "startColumnNumber" : 2,
        "endLineNumber" : 547,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (this.handlerMethodLogger != null) {\n  invocable.setLogger(this.handlerMethodLogger);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1359,
        "startLineNumber" : 539,
        "startColumnNumber" : 114,
        "endLineNumber" : 573,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (logger.isDebugEnabled()) {\n    logger.debug(\"Invoking \" + handlerMethod.getShortLogMessage());\n  }\n  handlerMethod=handlerMethod.createWithResolvedBean();\n  InvocableHandlerMethod invocable=new InvocableHandlerMethod(handlerMethod);\n  if (this.handlerMethodLogger != null) {\n    invocable.setLogger(this.handlerMethodLogger);\n  }\n  invocable.setMessageMethodArgumentResolvers(this.argumentResolvers);\n  try {\n    Object returnValue=invocable.invoke(message);\n    MethodParameter returnType=handlerMethod.getReturnType();\n    if (void.class == returnType.getParameterType()) {\n      return;\n    }\n    if (returnValue != null && this.returnValueHandlers.isAsyncReturnValue(returnValue,returnType)) {\n      ListenableFuture<?> future=this.returnValueHandlers.toListenableFuture(returnValue,returnType);\n      if (future != null) {\n        future.addCallback(new ReturnValueListenableFutureCallback(invocable,message));\n      }\n    }\n else {\n      this.returnValueHandlers.handleReturnValue(returnValue,returnType,message);\n    }\n  }\n catch (  Exception ex) {\n    processHandlerMethodException(handlerMethod,ex,message);\n  }\ncatch (  Throwable ex) {\n    Exception handlingException=new MessageHandlingException(message,\"Unexpected handler method invocation error\",ex);\n    processHandlerMethodException(handlerMethod,handlingException,message);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 165,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1472,
        "startLineNumber" : 539,
        "startColumnNumber" : 1,
        "endLineNumber" : 573,
        "endColumnNumber" : 2
      },
      "nodeContext" : "protected void handleMatch(T mapping,HandlerMethod handlerMethod,String lookupDestination,Message<?> message){\n  if (logger.isDebugEnabled()) {\n    logger.debug(\"Invoking \" + handlerMethod.getShortLogMessage());\n  }\n  handlerMethod=handlerMethod.createWithResolvedBean();\n  InvocableHandlerMethod invocable=new InvocableHandlerMethod(handlerMethod);\n  if (this.handlerMethodLogger != null) {\n    invocable.setLogger(this.handlerMethodLogger);\n  }\n  invocable.setMessageMethodArgumentResolvers(this.argumentResolvers);\n  try {\n    Object returnValue=invocable.invoke(message);\n    MethodParameter returnType=handlerMethod.getReturnType();\n    if (void.class == returnType.getParameterType()) {\n      return;\n    }\n    if (returnValue != null && this.returnValueHandlers.isAsyncReturnValue(returnValue,returnType)) {\n      ListenableFuture<?> future=this.returnValueHandlers.toListenableFuture(returnValue,returnType);\n      if (future != null) {\n        future.addCallback(new ReturnValueListenableFutureCallback(invocable,message));\n      }\n    }\n else {\n      this.returnValueHandlers.handleReturnValue(returnValue,returnType,message);\n    }\n  }\n catch (  Exception ex) {\n    processHandlerMethodException(handlerMethod,ex,message);\n  }\ncatch (  Throwable ex) {\n    Exception handlingException=new MessageHandlingException(message,\"Unexpected handler method invocation error\",ex);\n    processHandlerMethodException(handlerMethod,handlingException,message);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 187,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 93,
        "startLineNumber" : 545,
        "startColumnNumber" : 2,
        "endLineNumber" : 547,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (this.handlerMethodLogger != null) {\n  invocable.setLogger(this.handlerMethodLogger);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 32,
    "startLineNumber" : 545,
    "startColumnNumber" : 6,
    "endLineNumber" : 545,
    "endColumnNumber" : 38
  } ],
  "layoutRelationDataList" : [ ]
}