{
  "id" : 394,
  "expression" : "\"// declaration: int add(int, int)\"",
  "projectName" : "prestodb@presto",
  "commitID" : "eff77883d0d24dc6022ecde252612d1430c9fbac",
  "filePath" : "/presto-bytecode/src/test/java/com/facebook/presto/bytecode/TestClassGenerator.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"// declaration: int add(int, int)\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 35,
      "startLineNumber" : 80,
      "startColumnNumber" : 30,
      "endLineNumber" : 80,
      "endColumnNumber" : 65
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 225,
        "startLineNumber" : 77,
        "startColumnNumber" : 12,
        "endLineNumber" : 80,
        "endColumnNumber" : 66
      },
      "nodeContext" : "assertThat(writer.toString()).contains(\"00002 I I  : I I  :     IADD\").contains(\"public final class test/Example {\").contains(\"// declaration: int add(int, int)\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 277,
        "startLineNumber" : 77,
        "startColumnNumber" : 12,
        "endLineNumber" : 81,
        "endColumnNumber" : 51
      },
      "nodeContext" : "assertThat(writer.toString()).contains(\"00002 I I  : I I  :     IADD\").contains(\"public final class test/Example {\").contains(\"// declaration: int add(int, int)\").contains(\"LINENUMBER 2002 L1\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 278,
        "startLineNumber" : 77,
        "startColumnNumber" : 12,
        "endLineNumber" : 81,
        "endColumnNumber" : 52
      },
      "nodeContext" : "assertThat(writer.toString()).contains(\"00002 I I  : I I  :     IADD\").contains(\"public final class test/Example {\").contains(\"// declaration: int add(int, int)\").contains(\"LINENUMBER 2002 L1\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 18,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 917,
        "startLineNumber" : 63,
        "startColumnNumber" : 12,
        "endLineNumber" : 84,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  StringWriter writer=new StringWriter();\n  Class<?> clazz=classGenerator(getClass().getClassLoader()).fakeLineNumbers(true).runAsmVerifier(true).dumpRawBytecode(true).outputTo(writer).dumpClassFilesTo(tempDir).defineClass(classDefinition,Object.class);\n  Method add=clazz.getMethod(\"add\",int.class,int.class);\n  assertEquals(add.invoke(null,13,42),55);\n  assertThat(writer.toString()).contains(\"00002 I I  : I I  :     IADD\").contains(\"public final class test/Example {\").contains(\"// declaration: int add(int, int)\").contains(\"LINENUMBER 2002 L1\");\n  assertThat(tempDir.resolve(\"test/Example.class\")).isRegularFile();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 93,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1005,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 87,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  StringWriter writer=new StringWriter();\n  Class<?> clazz=classGenerator(getClass().getClassLoader()).fakeLineNumbers(true).runAsmVerifier(true).dumpRawBytecode(true).outputTo(writer).dumpClassFilesTo(tempDir).defineClass(classDefinition,Object.class);\n  Method add=clazz.getMethod(\"add\",int.class,int.class);\n  assertEquals(add.invoke(null,13,42),55);\n  assertThat(writer.toString()).contains(\"00002 I I  : I I  :     IADD\").contains(\"public final class test/Example {\").contains(\"// declaration: int add(int, int)\").contains(\"LINENUMBER 2002 L1\");\n  assertThat(tempDir.resolve(\"test/Example.class\")).isRegularFile();\n}\n  finally {\n  deleteRecursively(tempDir,ALLOW_INSECURE);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 100,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1632,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 88,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ClassDefinition classDefinition=new ClassDefinition(a(PUBLIC,FINAL),\"test/Example\",type(Object.class));\n  Parameter argA=arg(\"a\",int.class);\n  Parameter argB=arg(\"b\",int.class);\n  MethodDefinition method=classDefinition.declareMethod(a(PUBLIC,STATIC),\"add\",type(int.class),ImmutableList.of(argA,argB));\n  method.getBody().append(add(argA,argB)).retInt();\n  Path tempDir=createTempDirectory(\"test\");\n  try {\n    StringWriter writer=new StringWriter();\n    Class<?> clazz=classGenerator(getClass().getClassLoader()).fakeLineNumbers(true).runAsmVerifier(true).dumpRawBytecode(true).outputTo(writer).dumpClassFilesTo(tempDir).defineClass(classDefinition,Object.class);\n    Method add=clazz.getMethod(\"add\",int.class,int.class);\n    assertEquals(add.invoke(null,13,42),55);\n    assertThat(writer.toString()).contains(\"00002 I I  : I I  :     IADD\").contains(\"public final class test/Example {\").contains(\"// declaration: int add(int, int)\").contains(\"LINENUMBER 2002 L1\");\n    assertThat(tempDir.resolve(\"test/Example.class\")).isRegularFile();\n  }\n  finally {\n    deleteRecursively(tempDir,ALLOW_INSECURE);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 181,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1703,
        "startLineNumber" : 39,
        "startColumnNumber" : 4,
        "endLineNumber" : 88,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testGenerator() throws Exception {\n  ClassDefinition classDefinition=new ClassDefinition(a(PUBLIC,FINAL),\"test/Example\",type(Object.class));\n  Parameter argA=arg(\"a\",int.class);\n  Parameter argB=arg(\"b\",int.class);\n  MethodDefinition method=classDefinition.declareMethod(a(PUBLIC,STATIC),\"add\",type(int.class),ImmutableList.of(argA,argB));\n  method.getBody().append(add(argA,argB)).retInt();\n  Path tempDir=createTempDirectory(\"test\");\n  try {\n    StringWriter writer=new StringWriter();\n    Class<?> clazz=classGenerator(getClass().getClassLoader()).fakeLineNumbers(true).runAsmVerifier(true).dumpRawBytecode(true).outputTo(writer).dumpClassFilesTo(tempDir).defineClass(classDefinition,Object.class);\n    Method add=clazz.getMethod(\"add\",int.class,int.class);\n    assertEquals(add.invoke(null,13,42),55);\n    assertThat(writer.toString()).contains(\"00002 I I  : I I  :     IADD\").contains(\"public final class test/Example {\").contains(\"// declaration: int add(int, int)\").contains(\"LINENUMBER 2002 L1\");\n    assertThat(tempDir.resolve(\"test/Example.class\")).isRegularFile();\n  }\n  finally {\n    deleteRecursively(tempDir,ALLOW_INSECURE);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 189,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 225,
        "startLineNumber" : 77,
        "startColumnNumber" : 12,
        "endLineNumber" : 80,
        "endColumnNumber" : 66
      },
      "nodeContext" : "assertThat(writer.toString()).contains(\"00002 I I  : I I  :     IADD\").contains(\"public final class test/Example {\").contains(\"// declaration: int add(int, int)\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 35,
    "startLineNumber" : 80,
    "startColumnNumber" : 30,
    "endLineNumber" : 80,
    "endColumnNumber" : 65
  } ],
  "layoutRelationDataList" : [ ]
}