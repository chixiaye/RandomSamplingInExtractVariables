{
  "id" : 322,
  "expression" : "Constants.ACCOUNT_MANAGEMENT_CLIENT_ID",
  "projectName" : "keycloak@keycloak",
  "commitID" : "aacae9b9acb0fbedc49d4f88c9fbd7aa11922dce",
  "filePath" : "/testsuite/integration-arquillian/tests/other/springboot-tests/src/test/java/org/keycloak/testsuite/springboot/AccountLinkSpringBootTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Constants.ACCOUNT_MANAGEMENT_CLIENT_ID",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 38,
      "startLineNumber" : 227,
      "startColumnNumber" : 91,
      "endLineNumber" : 227,
      "endColumnNumber" : 129
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 227,
        "startColumnNumber" : 27,
        "endLineNumber" : 227,
        "endColumnNumber" : 130
      },
      "nodeContext" : "adminClient.realms().realm(REALM_NAME).clients().findByClientId(Constants.ACCOUNT_MANAGEMENT_CLIENT_ID)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 13,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 227,
        "startColumnNumber" : 27,
        "endLineNumber" : 227,
        "endColumnNumber" : 137
      },
      "nodeContext" : "adminClient.realms().realm(REALM_NAME).clients().findByClientId(Constants.ACCOUNT_MANAGEMENT_CLIENT_ID).get(0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 16,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 118,
        "startLineNumber" : 227,
        "startColumnNumber" : 27,
        "endLineNumber" : 227,
        "endColumnNumber" : 145
      },
      "nodeContext" : "adminClient.realms().realm(REALM_NAME).clients().findByClientId(Constants.ACCOUNT_MANAGEMENT_CLIENT_ID).get(0).getId()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 130,
        "startLineNumber" : 227,
        "startColumnNumber" : 15,
        "endLineNumber" : 227,
        "endColumnNumber" : 145
      },
      "nodeContext" : "accountId=adminClient.realms().realm(REALM_NAME).clients().findByClientId(Constants.ACCOUNT_MANAGEMENT_CLIENT_ID).get(0).getId()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 20,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 138,
        "startLineNumber" : 227,
        "startColumnNumber" : 8,
        "endLineNumber" : 227,
        "endColumnNumber" : 146
      },
      "nodeContext" : "String accountId=adminClient.realms().realm(REALM_NAME).clients().findByClientId(Constants.ACCOUNT_MANAGEMENT_CLIENT_ID).get(0).getId();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 23,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7038,
        "startLineNumber" : 182,
        "startColumnNumber" : 55,
        "endLineNumber" : 350,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  RealmResource realm=adminClient.realms().realm(REALM_NAME);\n  List<FederatedIdentityRepresentation> links=realm.users().get(childUserId).getFederatedIdentity();\n  assertThat(links,is(empty()));\n  ClientRepresentation client=adminClient.realms().realm(REALM_NAME).clients().findByClientId(CLIENT_ID).get(0);\n  UriBuilder redirectUri=UriBuilder.fromUri(LINKING_URL).queryParam(\"response\",\"true\");\n  UriBuilder directLinking=UriBuilder.fromUri(getAuthServerContextRoot() + \"/auth\").path(\"realms/{child-realm}/broker/{provider}/link\").queryParam(\"client_id\",CLIENT_ID).queryParam(\"redirect_uri\",redirectUri.build()).queryParam(\"hash\",Base64Url.encode(\"crap\".getBytes())).queryParam(\"nonce\",UUID.randomUUID().toString());\n  String linkUrl=directLinking.build(REALM_NAME,PARENT_REALM).toString();\n  navigateTo(linkUrl);\n  assertCurrentUrlStartsWith(testRealmLoginPage);\n  testRealmLoginPage.form().login(CHILD_USERNAME_1,CHILD_PASSWORD_1);\n  assertThat(driver.getCurrentUrl(),containsString(\"link_error=not_logged_in\"));\n  logoutAll();\n  navigateTo(LINKING_URL + \"?response=true\");\n  assertCurrentUrlStartsWith(testRealmLoginPage);\n  testRealmLoginPage.form().login(CHILD_USERNAME_1,CHILD_PASSWORD_1);\n  linkingPage.assertIsCurrent();\n  assertThat(linkingPage.getErrorMessage().toLowerCase(),containsString(\"account linked\"));\n  navigateTo(linkUrl);\n  assertThat(driver.getPageSource(),containsString(\"We are sorry...\"));\n  logoutAll();\n  String accountId=adminClient.realms().realm(REALM_NAME).clients().findByClientId(Constants.ACCOUNT_MANAGEMENT_CLIENT_ID).get(0).getId();\n  RoleRepresentation manageAccount=adminClient.realms().realm(REALM_NAME).clients().get(accountId).roles().get(MANAGE_ACCOUNT).toRepresentation();\n  RoleRepresentation manageLinks=adminClient.realms().realm(REALM_NAME).clients().get(accountId).roles().get(MANAGE_ACCOUNT_LINKS).toRepresentation();\n  RoleRepresentation userRole=adminClient.realms().realm(REALM_NAME).roles().get(CORRECT_ROLE).toRepresentation();\n  client.setFullScopeAllowed(false);\n  ClientResource clientResource=adminClient.realms().realm(REALM_NAME).clients().get(client.getId());\n  clientResource.update(client);\n  List<RoleRepresentation> roles=new LinkedList<>();\n  roles.add(userRole);\n  clientResource.getScopeMappings().realmLevel().add(roles);\n  navigateTo(LINKING_URL + \"?response=true\");\n  assertCurrentUrlStartsWith(testRealmLoginPage);\n  testRealmLoginPage.form().login(CHILD_USERNAME_1,CHILD_PASSWORD_1);\n  linkingPage.assertIsCurrent();\n  assertThat(linkingPage.getErrorMessage().toLowerCase(),containsString(\"account linked\"));\n  UriBuilder linkBuilder=UriBuilder.fromUri(LINKING_URL);\n  String clientLinkUrl=linkBuilder.clone().queryParam(\"realm\",REALM_NAME).queryParam(\"provider\",PARENT_REALM).build().toString();\n  navigateTo(clientLinkUrl);\n  assertThat(driver.getCurrentUrl(),containsString(\"error=not_allowed\"));\n  logoutAll();\n  links=realm.users().get(childUserId).getFederatedIdentity();\n  assertThat(links,is(empty()));\n  roles=new LinkedList<>();\n  roles.add(manageLinks);\n  clientResource.getScopeMappings().clientLevel(accountId).add(roles);\n  navigateTo(clientLinkUrl);\n  assertCurrentUrlStartsWith(testRealmLoginPage);\n  testRealmLoginPage.form().login(CHILD_USERNAME_1,CHILD_PASSWORD_1);\n  testRealmLoginPage.setAuthRealm(PARENT_REALM);\n  assertCurrentUrlStartsWith(testRealmLoginPage);\n  testRealmLoginPage.form().login(PARENT_USERNAME,PARENT_PASSWORD);\n  testRealmLoginPage.setAuthRealm(REALM_NAME);\n  assertThat(driver.getCurrentUrl(),startsWith(linkBuilder.toTemplate()));\n  assertThat(driver.getPageSource(),containsString(\"Account linked\"));\n  links=realm.users().get(childUserId).getFederatedIdentity();\n  assertThat(links,is(not(empty())));\n  realm.users().get(childUserId).removeFederatedIdentity(PARENT_REALM);\n  links=realm.users().get(childUserId).getFederatedIdentity();\n  assertThat(links,is(empty()));\n  clientResource.getScopeMappings().clientLevel(accountId).remove(roles);\n  logoutAll();\n  navigateTo(clientLinkUrl);\n  assertCurrentUrlStartsWith(testRealmLoginPage);\n  testRealmLoginPage.form().login(CHILD_USERNAME_1,CHILD_PASSWORD_1);\n  assertThat(driver.getCurrentUrl(),containsString(\"link_error=not_allowed\"));\n  logoutAll();\n  links=realm.users().get(childUserId).getFederatedIdentity();\n  assertThat(links,is(empty()));\n  roles=new LinkedList<>();\n  roles.add(manageAccount);\n  clientResource.getScopeMappings().clientLevel(accountId).add(roles);\n  navigateTo(clientLinkUrl);\n  assertCurrentUrlStartsWith(testRealmLoginPage);\n  testRealmLoginPage.form().login(CHILD_USERNAME_1,CHILD_PASSWORD_1);\n  testRealmLoginPage.setAuthRealm(PARENT_REALM);\n  assertCurrentUrlStartsWith(testRealmLoginPage);\n  testRealmLoginPage.form().login(PARENT_USERNAME,PARENT_PASSWORD);\n  testRealmLoginPage.setAuthRealm(REALM_NAME);\n  assertThat(driver.getCurrentUrl(),startsWith(linkBuilder.toTemplate()));\n  assertThat(driver.getPageSource(),containsString(\"Account linked\"));\n  links=realm.users().get(childUserId).getFederatedIdentity();\n  assertThat(links,is(not(empty())));\n  realm.users().get(childUserId).removeFederatedIdentity(PARENT_REALM);\n  links=realm.users().get(childUserId).getFederatedIdentity();\n  assertThat(links,is(empty()));\n  clientResource.getScopeMappings().clientLevel(accountId).remove(roles);\n  logoutAll();\n  navigateTo(clientLinkUrl);\n  assertCurrentUrlStartsWith(testRealmLoginPage);\n  testRealmLoginPage.form().login(CHILD_USERNAME_1,CHILD_PASSWORD_1);\n  assertThat(driver.getCurrentUrl(),containsString(\"link_error=not_allowed\"));\n  logoutAll();\n  client=adminClient.realms().realm(REALM_NAME).clients().findByClientId(CLIENT_ID).get(0);\n  client.setFullScopeAllowed(true);\n  clientResource.update(client);\n  links=realm.users().get(childUserId).getFederatedIdentity();\n  assertThat(links,is(empty()));\n  logoutAll();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 847,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7099,
        "startLineNumber" : 181,
        "startColumnNumber" : 4,
        "endLineNumber" : 350,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testErrorConditions() throws Exception {\n  RealmResource realm=adminClient.realms().realm(REALM_NAME);\n  List<FederatedIdentityRepresentation> links=realm.users().get(childUserId).getFederatedIdentity();\n  assertThat(links,is(empty()));\n  ClientRepresentation client=adminClient.realms().realm(REALM_NAME).clients().findByClientId(CLIENT_ID).get(0);\n  UriBuilder redirectUri=UriBuilder.fromUri(LINKING_URL).queryParam(\"response\",\"true\");\n  UriBuilder directLinking=UriBuilder.fromUri(getAuthServerContextRoot() + \"/auth\").path(\"realms/{child-realm}/broker/{provider}/link\").queryParam(\"client_id\",CLIENT_ID).queryParam(\"redirect_uri\",redirectUri.build()).queryParam(\"hash\",Base64Url.encode(\"crap\".getBytes())).queryParam(\"nonce\",UUID.randomUUID().toString());\n  String linkUrl=directLinking.build(REALM_NAME,PARENT_REALM).toString();\n  navigateTo(linkUrl);\n  assertCurrentUrlStartsWith(testRealmLoginPage);\n  testRealmLoginPage.form().login(CHILD_USERNAME_1,CHILD_PASSWORD_1);\n  assertThat(driver.getCurrentUrl(),containsString(\"link_error=not_logged_in\"));\n  logoutAll();\n  navigateTo(LINKING_URL + \"?response=true\");\n  assertCurrentUrlStartsWith(testRealmLoginPage);\n  testRealmLoginPage.form().login(CHILD_USERNAME_1,CHILD_PASSWORD_1);\n  linkingPage.assertIsCurrent();\n  assertThat(linkingPage.getErrorMessage().toLowerCase(),containsString(\"account linked\"));\n  navigateTo(linkUrl);\n  assertThat(driver.getPageSource(),containsString(\"We are sorry...\"));\n  logoutAll();\n  String accountId=adminClient.realms().realm(REALM_NAME).clients().findByClientId(Constants.ACCOUNT_MANAGEMENT_CLIENT_ID).get(0).getId();\n  RoleRepresentation manageAccount=adminClient.realms().realm(REALM_NAME).clients().get(accountId).roles().get(MANAGE_ACCOUNT).toRepresentation();\n  RoleRepresentation manageLinks=adminClient.realms().realm(REALM_NAME).clients().get(accountId).roles().get(MANAGE_ACCOUNT_LINKS).toRepresentation();\n  RoleRepresentation userRole=adminClient.realms().realm(REALM_NAME).roles().get(CORRECT_ROLE).toRepresentation();\n  client.setFullScopeAllowed(false);\n  ClientResource clientResource=adminClient.realms().realm(REALM_NAME).clients().get(client.getId());\n  clientResource.update(client);\n  List<RoleRepresentation> roles=new LinkedList<>();\n  roles.add(userRole);\n  clientResource.getScopeMappings().realmLevel().add(roles);\n  navigateTo(LINKING_URL + \"?response=true\");\n  assertCurrentUrlStartsWith(testRealmLoginPage);\n  testRealmLoginPage.form().login(CHILD_USERNAME_1,CHILD_PASSWORD_1);\n  linkingPage.assertIsCurrent();\n  assertThat(linkingPage.getErrorMessage().toLowerCase(),containsString(\"account linked\"));\n  UriBuilder linkBuilder=UriBuilder.fromUri(LINKING_URL);\n  String clientLinkUrl=linkBuilder.clone().queryParam(\"realm\",REALM_NAME).queryParam(\"provider\",PARENT_REALM).build().toString();\n  navigateTo(clientLinkUrl);\n  assertThat(driver.getCurrentUrl(),containsString(\"error=not_allowed\"));\n  logoutAll();\n  links=realm.users().get(childUserId).getFederatedIdentity();\n  assertThat(links,is(empty()));\n  roles=new LinkedList<>();\n  roles.add(manageLinks);\n  clientResource.getScopeMappings().clientLevel(accountId).add(roles);\n  navigateTo(clientLinkUrl);\n  assertCurrentUrlStartsWith(testRealmLoginPage);\n  testRealmLoginPage.form().login(CHILD_USERNAME_1,CHILD_PASSWORD_1);\n  testRealmLoginPage.setAuthRealm(PARENT_REALM);\n  assertCurrentUrlStartsWith(testRealmLoginPage);\n  testRealmLoginPage.form().login(PARENT_USERNAME,PARENT_PASSWORD);\n  testRealmLoginPage.setAuthRealm(REALM_NAME);\n  assertThat(driver.getCurrentUrl(),startsWith(linkBuilder.toTemplate()));\n  assertThat(driver.getPageSource(),containsString(\"Account linked\"));\n  links=realm.users().get(childUserId).getFederatedIdentity();\n  assertThat(links,is(not(empty())));\n  realm.users().get(childUserId).removeFederatedIdentity(PARENT_REALM);\n  links=realm.users().get(childUserId).getFederatedIdentity();\n  assertThat(links,is(empty()));\n  clientResource.getScopeMappings().clientLevel(accountId).remove(roles);\n  logoutAll();\n  navigateTo(clientLinkUrl);\n  assertCurrentUrlStartsWith(testRealmLoginPage);\n  testRealmLoginPage.form().login(CHILD_USERNAME_1,CHILD_PASSWORD_1);\n  assertThat(driver.getCurrentUrl(),containsString(\"link_error=not_allowed\"));\n  logoutAll();\n  links=realm.users().get(childUserId).getFederatedIdentity();\n  assertThat(links,is(empty()));\n  roles=new LinkedList<>();\n  roles.add(manageAccount);\n  clientResource.getScopeMappings().clientLevel(accountId).add(roles);\n  navigateTo(clientLinkUrl);\n  assertCurrentUrlStartsWith(testRealmLoginPage);\n  testRealmLoginPage.form().login(CHILD_USERNAME_1,CHILD_PASSWORD_1);\n  testRealmLoginPage.setAuthRealm(PARENT_REALM);\n  assertCurrentUrlStartsWith(testRealmLoginPage);\n  testRealmLoginPage.form().login(PARENT_USERNAME,PARENT_PASSWORD);\n  testRealmLoginPage.setAuthRealm(REALM_NAME);\n  assertThat(driver.getCurrentUrl(),startsWith(linkBuilder.toTemplate()));\n  assertThat(driver.getPageSource(),containsString(\"Account linked\"));\n  links=realm.users().get(childUserId).getFederatedIdentity();\n  assertThat(links,is(not(empty())));\n  realm.users().get(childUserId).removeFederatedIdentity(PARENT_REALM);\n  links=realm.users().get(childUserId).getFederatedIdentity();\n  assertThat(links,is(empty()));\n  clientResource.getScopeMappings().clientLevel(accountId).remove(roles);\n  logoutAll();\n  navigateTo(clientLinkUrl);\n  assertCurrentUrlStartsWith(testRealmLoginPage);\n  testRealmLoginPage.form().login(CHILD_USERNAME_1,CHILD_PASSWORD_1);\n  assertThat(driver.getCurrentUrl(),containsString(\"link_error=not_allowed\"));\n  logoutAll();\n  client=adminClient.realms().realm(REALM_NAME).clients().findByClientId(CLIENT_ID).get(0);\n  client.setFullScopeAllowed(true);\n  clientResource.update(client);\n  links=realm.users().get(childUserId).getFederatedIdentity();\n  assertThat(links,is(empty()));\n  logoutAll();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 855,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 138,
        "startLineNumber" : 227,
        "startColumnNumber" : 8,
        "endLineNumber" : 227,
        "endColumnNumber" : 146
      },
      "nodeContext" : "String accountId=adminClient.realms().realm(REALM_NAME).clients().findByClientId(Constants.ACCOUNT_MANAGEMENT_CLIENT_ID).get(0).getId();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 23,
      "astHeight" : 9
    },
    "tokenLength" : 5,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 38,
    "startLineNumber" : 227,
    "startColumnNumber" : 91,
    "endLineNumber" : 227,
    "endColumnNumber" : 129
  } ],
  "layoutRelationDataList" : [ ]
}