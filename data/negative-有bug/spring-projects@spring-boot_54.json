{
  "id" : 54,
  "expression" : "result",
  "projectName" : "spring-projects@spring-boot",
  "commitID" : "44299bb9808d0dc21a9bfc1c0c47e1539e00856d",
  "filePath" : "/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/server/AbstractReactiveWebServerFactoryTests.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "result",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 86,
      "startColumnNumber" : 13,
      "endLineNumber" : 86,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 86,
        "startColumnNumber" : 13,
        "endLineNumber" : 86,
        "endColumnNumber" : 27
      },
      "nodeContext" : "result.block()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 86,
        "startColumnNumber" : 2,
        "endLineNumber" : 86,
        "endColumnNumber" : 28
      },
      "nodeContext" : "assertThat(result.block())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 86,
        "startColumnNumber" : 2,
        "endLineNumber" : 86,
        "endColumnNumber" : 53
      },
      "nodeContext" : "assertThat(result.block()).isEqualTo(\"Hello World\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 86,
        "startColumnNumber" : 2,
        "endLineNumber" : 86,
        "endColumnNumber" : 54
      },
      "nodeContext" : "assertThat(result.block()).isEqualTo(\"Hello World\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 594,
        "startLineNumber" : 76,
        "startColumnNumber" : 45,
        "endLineNumber" : 88,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  AbstractReactiveWebServerFactory factory=getFactory();\n  int specificPort=SocketUtils.findAvailableTcpPort(41000);\n  factory.setPort(specificPort);\n  this.webServer=factory.getWebServer(new EchoHandler());\n  this.webServer.start();\n  Mono<String> result=getWebClient().build().post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN).body(BodyInserters.fromObject(\"Hello World\")).exchange().flatMap((response) -> response.bodyToMono(String.class));\n  assertThat(result.block()).isEqualTo(\"Hello World\");\n  assertThat(this.webServer.getPort()).isEqualTo(specificPort);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 99,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 645,
        "startLineNumber" : 75,
        "startColumnNumber" : 1,
        "endLineNumber" : 88,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Test public void specificPort() throws Exception {\n  AbstractReactiveWebServerFactory factory=getFactory();\n  int specificPort=SocketUtils.findAvailableTcpPort(41000);\n  factory.setPort(specificPort);\n  this.webServer=factory.getWebServer(new EchoHandler());\n  this.webServer.start();\n  Mono<String> result=getWebClient().build().post().uri(\"/test\").contentType(MediaType.TEXT_PLAIN).body(BodyInserters.fromObject(\"Hello World\")).exchange().flatMap((response) -> response.bodyToMono(String.class));\n  assertThat(result.block()).isEqualTo(\"Hello World\");\n  assertThat(this.webServer.getPort()).isEqualTo(specificPort);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 107,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 86,
        "startColumnNumber" : 2,
        "endLineNumber" : 86,
        "endColumnNumber" : 54
      },
      "nodeContext" : "assertThat(result.block()).isEqualTo(\"Hello World\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.springframework.boot.web.reactive.server.Mono<java.lang.String>"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 86,
    "startColumnNumber" : 13,
    "endLineNumber" : 86,
    "endColumnNumber" : 19
  } ],
  "layoutRelationDataList" : [ ]
}