{
  "id" : 144,
  "expression" : "1",
  "projectName" : "google@guava",
  "commitID" : "68500b2c09fa6985eab2e41577e2992685b57f2b",
  "filePath" : "/guava-tests/test/com/google/common/math/QuantilesAlgorithmTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 54,
      "startColumnNumber" : 63,
      "endLineNumber" : 54,
      "endColumnNumber" : 64
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 57,
        "startLineNumber" : 54,
        "startColumnNumber" : 28,
        "endLineNumber" : 54,
        "endColumnNumber" : 85
      },
      "nodeContext" : "REFERENCE_ALGORITHM.singleQuantile(1,2,dataset.clone())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 54,
        "startColumnNumber" : 11,
        "endLineNumber" : 54,
        "endColumnNumber" : 85
      },
      "nodeContext" : "referenceValue=REFERENCE_ALGORITHM.singleQuantile(1,2,dataset.clone())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 54,
        "startColumnNumber" : 4,
        "endLineNumber" : 54,
        "endColumnNumber" : 86
      },
      "nodeContext" : "double referenceValue=REFERENCE_ALGORITHM.singleQuantile(1,2,dataset.clone());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 391,
        "startLineNumber" : 53,
        "startColumnNumber" : 42,
        "endLineNumber" : 61,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  double referenceValue=REFERENCE_ALGORITHM.singleQuantile(1,2,dataset.clone());\n  for (  QuantilesAlgorithm algorithm : NON_REFERENCE_ALGORITHMS) {\n    assertWithMessage(\"Mismatch between %s and %s\",algorithm,REFERENCE_ALGORITHM).that(algorithm.singleQuantile(1,2,dataset.clone())).isWithin(ALLOWED_ERROR).of(referenceValue);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 42,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 431,
        "startLineNumber" : 53,
        "startColumnNumber" : 2,
        "endLineNumber" : 61,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public void testSingleQuantile_median(){\n  double referenceValue=REFERENCE_ALGORITHM.singleQuantile(1,2,dataset.clone());\n  for (  QuantilesAlgorithm algorithm : NON_REFERENCE_ALGORITHMS) {\n    assertWithMessage(\"Mismatch between %s and %s\",algorithm,REFERENCE_ALGORITHM).that(algorithm.singleQuantile(1,2,dataset.clone())).isWithin(ALLOWED_ERROR).of(referenceValue);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 46,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 54,
        "startColumnNumber" : 4,
        "endLineNumber" : 54,
        "endColumnNumber" : 86
      },
      "nodeContext" : "double referenceValue=REFERENCE_ALGORITHM.singleQuantile(1,2,dataset.clone());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "1",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 57,
      "startColumnNumber" : 41,
      "endLineNumber" : 57,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 57,
        "startColumnNumber" : 16,
        "endLineNumber" : 57,
        "endColumnNumber" : 63
      },
      "nodeContext" : "algorithm.singleQuantile(1,2,dataset.clone())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 145,
        "startLineNumber" : 56,
        "startColumnNumber" : 6,
        "endLineNumber" : 57,
        "endColumnNumber" : 64
      },
      "nodeContext" : "assertWithMessage(\"Mismatch between %s and %s\",algorithm,REFERENCE_ALGORITHM).that(algorithm.singleQuantile(1,2,dataset.clone()))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 15,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 181,
        "startLineNumber" : 56,
        "startColumnNumber" : 6,
        "endLineNumber" : 58,
        "endColumnNumber" : 34
      },
      "nodeContext" : "assertWithMessage(\"Mismatch between %s and %s\",algorithm,REFERENCE_ALGORITHM).that(algorithm.singleQuantile(1,2,dataset.clone())).isWithin(ALLOWED_ERROR)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 18,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 212,
        "startLineNumber" : 56,
        "startColumnNumber" : 6,
        "endLineNumber" : 59,
        "endColumnNumber" : 29
      },
      "nodeContext" : "assertWithMessage(\"Mismatch between %s and %s\",algorithm,REFERENCE_ALGORITHM).that(algorithm.singleQuantile(1,2,dataset.clone())).isWithin(ALLOWED_ERROR).of(referenceValue)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 21,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 213,
        "startLineNumber" : 56,
        "startColumnNumber" : 6,
        "endLineNumber" : 59,
        "endColumnNumber" : 30
      },
      "nodeContext" : "assertWithMessage(\"Mismatch between %s and %s\",algorithm,REFERENCE_ALGORITHM).that(algorithm.singleQuantile(1,2,dataset.clone())).isWithin(ALLOWED_ERROR).of(referenceValue);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 229,
        "startLineNumber" : 55,
        "startColumnNumber" : 66,
        "endLineNumber" : 60,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  assertWithMessage(\"Mismatch between %s and %s\",algorithm,REFERENCE_ALGORITHM).that(algorithm.singleQuantile(1,2,dataset.clone())).isWithin(ALLOWED_ERROR).of(referenceValue);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 23,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 291,
        "startLineNumber" : 55,
        "startColumnNumber" : 4,
        "endLineNumber" : 60,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (QuantilesAlgorithm algorithm : NON_REFERENCE_ALGORITHMS) {\n  assertWithMessage(\"Mismatch between %s and %s\",algorithm,REFERENCE_ALGORITHM).that(algorithm.singleQuantile(1,2,dataset.clone())).isWithin(ALLOWED_ERROR).of(referenceValue);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 29,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 391,
        "startLineNumber" : 53,
        "startColumnNumber" : 42,
        "endLineNumber" : 61,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  double referenceValue=REFERENCE_ALGORITHM.singleQuantile(1,2,dataset.clone());\n  for (  QuantilesAlgorithm algorithm : NON_REFERENCE_ALGORITHMS) {\n    assertWithMessage(\"Mismatch between %s and %s\",algorithm,REFERENCE_ALGORITHM).that(algorithm.singleQuantile(1,2,dataset.clone())).isWithin(ALLOWED_ERROR).of(referenceValue);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 42,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 431,
        "startLineNumber" : 53,
        "startColumnNumber" : 2,
        "endLineNumber" : 61,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public void testSingleQuantile_median(){\n  double referenceValue=REFERENCE_ALGORITHM.singleQuantile(1,2,dataset.clone());\n  for (  QuantilesAlgorithm algorithm : NON_REFERENCE_ALGORITHMS) {\n    assertWithMessage(\"Mismatch between %s and %s\",algorithm,REFERENCE_ALGORITHM).that(algorithm.singleQuantile(1,2,dataset.clone())).isWithin(ALLOWED_ERROR).of(referenceValue);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 46,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 47,
        "startLineNumber" : 57,
        "startColumnNumber" : 16,
        "endLineNumber" : 57,
        "endColumnNumber" : 63
      },
      "nodeContext" : "algorithm.singleQuantile(1,2,dataset.clone())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 54,
    "startColumnNumber" : 63,
    "endLineNumber" : 54,
    "endColumnNumber" : 64
  }, {
    "charLength" : 1,
    "startLineNumber" : 57,
    "startColumnNumber" : 41,
    "endLineNumber" : 57,
    "endColumnNumber" : 42
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 7
  } ]
}