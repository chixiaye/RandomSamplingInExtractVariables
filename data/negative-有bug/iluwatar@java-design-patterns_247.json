{
  "id" : 247,
  "expression" : "instance3",
  "projectName" : "iluwatar@java-design-patterns",
  "commitID" : "428efc7d53449a51d25dfda4141742629ecbb0b2",
  "filePath" : "/multiton/src/test/java/com/iluwatar/multiton/NazgulEnumTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "instance3",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 47,
      "startColumnNumber" : 28,
      "endLineNumber" : 47,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 47,
        "startColumnNumber" : 6,
        "endLineNumber" : 47,
        "endColumnNumber" : 38
      },
      "nodeContext" : "assertSame(instance1,instance3)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 47,
        "startColumnNumber" : 6,
        "endLineNumber" : 47,
        "endColumnNumber" : 39
      },
      "nodeContext" : "assertSame(instance1,instance3);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 286,
        "startLineNumber" : 42,
        "startColumnNumber" : 57,
        "endLineNumber" : 49,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  NazgulEnum instance1=NazgulEnum.values()[i];\n  NazgulEnum instance2=NazgulEnum.values()[i];\n  NazgulEnum instance3=NazgulEnum.values()[i];\n  assertSame(instance1,instance2);\n  assertSame(instance1,instance3);\n  assertSame(instance2,instance3);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 46,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 339,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 49,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < NazgulEnum.values().length; i++) {\n  NazgulEnum instance1=NazgulEnum.values()[i];\n  NazgulEnum instance2=NazgulEnum.values()[i];\n  NazgulEnum instance3=NazgulEnum.values()[i];\n  assertSame(instance1,instance2);\n  assertSame(instance1,instance3);\n  assertSame(instance2,instance3);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 61,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 349,
        "startLineNumber" : 41,
        "startColumnNumber" : 61,
        "endLineNumber" : 50,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (int i=0; i < NazgulEnum.values().length; i++) {\n    NazgulEnum instance1=NazgulEnum.values()[i];\n    NazgulEnum instance2=NazgulEnum.values()[i];\n    NazgulEnum instance3=NazgulEnum.values()[i];\n    assertSame(instance1,instance2);\n    assertSame(instance1,instance3);\n    assertSame(instance2,instance3);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 62,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 594,
        "startLineNumber" : 36,
        "startColumnNumber" : 2,
        "endLineNumber" : 50,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Check that multiple calls to any one of the instances in the multiton returns  only that one particular instance, and do that for all instances in multiton\n */\n@Test public void testTheSameObjectIsReturnedWithMultipleCalls(){\n  for (int i=0; i < NazgulEnum.values().length; i++) {\n    NazgulEnum instance1=NazgulEnum.values()[i];\n    NazgulEnum instance2=NazgulEnum.values()[i];\n    NazgulEnum instance3=NazgulEnum.values()[i];\n    assertSame(instance1,instance2);\n    assertSame(instance1,instance3);\n    assertSame(instance2,instance3);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 69,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 47,
        "startColumnNumber" : 6,
        "endLineNumber" : 47,
        "endColumnNumber" : 39
      },
      "nodeContext" : "assertSame(instance1,instance3);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.iluwatar.multiton.NazgulEnum"
  }, {
    "nodeContext" : "instance3",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 48,
      "startColumnNumber" : 28,
      "endLineNumber" : 48,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 48,
        "startColumnNumber" : 6,
        "endLineNumber" : 48,
        "endColumnNumber" : 38
      },
      "nodeContext" : "assertSame(instance2,instance3)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 48,
        "startColumnNumber" : 6,
        "endLineNumber" : 48,
        "endColumnNumber" : 39
      },
      "nodeContext" : "assertSame(instance2,instance3);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 286,
        "startLineNumber" : 42,
        "startColumnNumber" : 57,
        "endLineNumber" : 49,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  NazgulEnum instance1=NazgulEnum.values()[i];\n  NazgulEnum instance2=NazgulEnum.values()[i];\n  NazgulEnum instance3=NazgulEnum.values()[i];\n  assertSame(instance1,instance2);\n  assertSame(instance1,instance3);\n  assertSame(instance2,instance3);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 46,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 339,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 49,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < NazgulEnum.values().length; i++) {\n  NazgulEnum instance1=NazgulEnum.values()[i];\n  NazgulEnum instance2=NazgulEnum.values()[i];\n  NazgulEnum instance3=NazgulEnum.values()[i];\n  assertSame(instance1,instance2);\n  assertSame(instance1,instance3);\n  assertSame(instance2,instance3);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 61,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 349,
        "startLineNumber" : 41,
        "startColumnNumber" : 61,
        "endLineNumber" : 50,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (int i=0; i < NazgulEnum.values().length; i++) {\n    NazgulEnum instance1=NazgulEnum.values()[i];\n    NazgulEnum instance2=NazgulEnum.values()[i];\n    NazgulEnum instance3=NazgulEnum.values()[i];\n    assertSame(instance1,instance2);\n    assertSame(instance1,instance3);\n    assertSame(instance2,instance3);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 62,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 594,
        "startLineNumber" : 36,
        "startColumnNumber" : 2,
        "endLineNumber" : 50,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Check that multiple calls to any one of the instances in the multiton returns  only that one particular instance, and do that for all instances in multiton\n */\n@Test public void testTheSameObjectIsReturnedWithMultipleCalls(){\n  for (int i=0; i < NazgulEnum.values().length; i++) {\n    NazgulEnum instance1=NazgulEnum.values()[i];\n    NazgulEnum instance2=NazgulEnum.values()[i];\n    NazgulEnum instance3=NazgulEnum.values()[i];\n    assertSame(instance1,instance2);\n    assertSame(instance1,instance3);\n    assertSame(instance2,instance3);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 69,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 48,
        "startColumnNumber" : 6,
        "endLineNumber" : 48,
        "endColumnNumber" : 39
      },
      "nodeContext" : "assertSame(instance2,instance3);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "com.iluwatar.multiton.NazgulEnum"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 47,
    "startColumnNumber" : 28,
    "endLineNumber" : 47,
    "endColumnNumber" : 37
  }, {
    "charLength" : 9,
    "startLineNumber" : 48,
    "startColumnNumber" : 28,
    "endLineNumber" : 48,
    "endColumnNumber" : 37
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}