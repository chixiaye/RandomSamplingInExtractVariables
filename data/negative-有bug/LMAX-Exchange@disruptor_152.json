{
  "id" : 152,
  "expression" : "new Expectations(){\n{\n    oneOf(sequences[0]).get();\n    will(returnValue(Long.valueOf(7L)));\n    oneOf(sequences[1]).get();\n    will(returnValue(Long.valueOf(3L)));\n    oneOf(sequences[2]).get();\n    will(returnValue(Long.valueOf(12L)));\n  }\n}\n",
  "projectName" : "LMAX-Exchange@disruptor",
  "commitID" : "6d8500d39ac15cc2fdbc3dbf2e3a97fbe425b8fa",
  "filePath" : "/src/test/java/com/lmax/disruptor/util/UtilTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new Expectations(){\n{\n    oneOf(sequences[0]).get();\n    will(returnValue(Long.valueOf(7L)));\n    oneOf(sequences[1]).get();\n    will(returnValue(Long.valueOf(3L)));\n    oneOf(sequences[2]).get();\n    will(returnValue(Long.valueOf(12L)));\n  }\n}\n",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 357,
      "startLineNumber" : 65,
      "startColumnNumber" : 25,
      "endLineNumber" : 77,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 57,
    "astHeight" : 9,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 375,
        "startLineNumber" : 65,
        "startColumnNumber" : 8,
        "endLineNumber" : 77,
        "endColumnNumber" : 10
      },
      "nodeContext" : "context.checking(new Expectations(){\n{\n    oneOf(sequences[0]).get();\n    will(returnValue(Long.valueOf(7L)));\n    oneOf(sequences[1]).get();\n    will(returnValue(Long.valueOf(3L)));\n    oneOf(sequences[2]).get();\n    will(returnValue(Long.valueOf(12L)));\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 60,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 376,
        "startLineNumber" : 65,
        "startColumnNumber" : 8,
        "endLineNumber" : 77,
        "endColumnNumber" : 11
      },
      "nodeContext" : "context.checking(new Expectations(){\n{\n    oneOf(sequences[0]).get();\n    will(returnValue(Long.valueOf(7L)));\n    oneOf(sequences[1]).get();\n    will(returnValue(Long.valueOf(3L)));\n    oneOf(sequences[2]).get();\n    will(returnValue(Long.valueOf(12L)));\n  }\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 61,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 757,
        "startLineNumber" : 56,
        "startColumnNumber" : 4,
        "endLineNumber" : 80,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final Sequence[] sequences=new Sequence[3];\n  context.setImposteriser(ClassImposteriser.INSTANCE);\n  sequences[0]=context.mock(Sequence.class,\"s0\");\n  sequences[1]=context.mock(Sequence.class,\"s1\");\n  sequences[2]=context.mock(Sequence.class,\"s2\");\n  context.checking(new Expectations(){\n{\n      oneOf(sequences[0]).get();\n      will(returnValue(Long.valueOf(7L)));\n      oneOf(sequences[1]).get();\n      will(returnValue(Long.valueOf(3L)));\n      oneOf(sequences[2]).get();\n      will(returnValue(Long.valueOf(12L)));\n    }\n  }\n);\n  Assert.assertEquals(3L,Util.getMinimumSequence(sequences));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 128,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 813,
        "startLineNumber" : 54,
        "startColumnNumber" : 4,
        "endLineNumber" : 80,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void shouldReturnMinimumSequence(){\n  final Sequence[] sequences=new Sequence[3];\n  context.setImposteriser(ClassImposteriser.INSTANCE);\n  sequences[0]=context.mock(Sequence.class,\"s0\");\n  sequences[1]=context.mock(Sequence.class,\"s1\");\n  sequences[2]=context.mock(Sequence.class,\"s2\");\n  context.checking(new Expectations(){\n{\n      oneOf(sequences[0]).get();\n      will(returnValue(Long.valueOf(7L)));\n      oneOf(sequences[1]).get();\n      will(returnValue(Long.valueOf(3L)));\n      oneOf(sequences[2]).get();\n      will(returnValue(Long.valueOf(12L)));\n    }\n  }\n);\n  Assert.assertEquals(3L,Util.getMinimumSequence(sequences));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 134,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 376,
        "startLineNumber" : 65,
        "startColumnNumber" : 8,
        "endLineNumber" : 77,
        "endColumnNumber" : 11
      },
      "nodeContext" : "context.checking(new Expectations(){\n{\n    oneOf(sequences[0]).get();\n    will(returnValue(Long.valueOf(7L)));\n    oneOf(sequences[1]).get();\n    will(returnValue(Long.valueOf(3L)));\n    oneOf(sequences[2]).get();\n    will(returnValue(Long.valueOf(12L)));\n  }\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 61,
      "astHeight" : 11
    },
    "tokenLength" : 28,
    "type" : ""
  } ],
  "positionList" : [ {
    "charLength" : 357,
    "startLineNumber" : 65,
    "startColumnNumber" : 25,
    "endLineNumber" : 77,
    "endColumnNumber" : 9
  } ],
  "layoutRelationDataList" : [ ]
}