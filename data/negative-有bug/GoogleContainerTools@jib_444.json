{
  "id" : 444,
  "expression" : "project",
  "projectName" : "GoogleContainerTools@jib",
  "commitID" : "a0742fd277b5490a0965dba4443f5864f1250199",
  "filePath" : "/jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/GradleLayerConfigurations.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "project",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 52,
      "startColumnNumber" : 8,
      "endLineNumber" : 52,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 52,
        "startColumnNumber" : 8,
        "endLineNumber" : 52,
        "endColumnNumber" : 31
      },
      "nodeContext" : "project.getConvention()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 52,
        "startColumnNumber" : 8,
        "endLineNumber" : 52,
        "endColumnNumber" : 69
      },
      "nodeContext" : "project.getConvention().getPlugin(JavaPluginConvention.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 92,
        "startLineNumber" : 51,
        "startColumnNumber" : 25,
        "endLineNumber" : 52,
        "endColumnNumber" : 69
      },
      "nodeContext" : "javaPluginConvention=project.getConvention().getPlugin(JavaPluginConvention.class)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 114,
        "startLineNumber" : 51,
        "startColumnNumber" : 4,
        "endLineNumber" : 52,
        "endColumnNumber" : 70
      },
      "nodeContext" : "JavaPluginConvention javaPluginConvention=project.getConvention().getPlugin(JavaPluginConvention.class);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3089,
        "startLineNumber" : 50,
        "startColumnNumber" : 96,
        "endLineNumber" : 124,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  JavaPluginConvention javaPluginConvention=project.getConvention().getPlugin(JavaPluginConvention.class);\n  SourceSet mainSourceSet=javaPluginConvention.getSourceSets().getByName(MAIN_SOURCE_SET_NAME);\n  List<Path> dependenciesFiles=new ArrayList<>();\n  List<Path> snapshotDependenciesFiles=new ArrayList<>();\n  List<Path> resourcesFiles=new ArrayList<>();\n  List<Path> classesFiles=new ArrayList<>();\n  List<Path> extraFiles=new ArrayList<>();\n  FileCollection classesOutputDirectories=mainSourceSet.getOutput().getClassesDirs();\n  for (  File classesOutputDirectory : classesOutputDirectories) {\n    if (Files.notExists(classesOutputDirectory.toPath())) {\n      gradleJibLogger.warn(\"Could not find build output directory '\" + classesOutputDirectory + \"'\");\n      continue;\n    }\n    try (Stream<Path> classFileStream=Files.list(classesOutputDirectory.toPath())){\n      classFileStream.forEach(classesFiles::add);\n    }\n   }\n  if (classesFiles.isEmpty()) {\n    gradleJibLogger.warn(\"No classes files were found - did you compile your project?\");\n  }\n  Path resourcesOutputDirectory=mainSourceSet.getOutput().getResourcesDir().toPath();\n  if (Files.exists(resourcesOutputDirectory)) {\n    try (Stream<Path> resourceFileStream=Files.list(resourcesOutputDirectory)){\n      resourceFileStream.forEach(resourcesFiles::add);\n    }\n   }\n  FileCollection allFiles=mainSourceSet.getRuntimeClasspath();\n  allFiles=allFiles.minus(classesOutputDirectories);\n  for (  File dependencyFile : allFiles) {\n    if (resourcesOutputDirectory.equals(dependencyFile.toPath())) {\n      continue;\n    }\n    if (dependencyFile.getName().contains(\"SNAPSHOT\")) {\n      snapshotDependenciesFiles.add(dependencyFile.toPath());\n    }\n else {\n      dependenciesFiles.add(dependencyFile.toPath());\n    }\n  }\n  if (Files.exists(extraDirectory)) {\n    try (Stream<Path> extraFilesLayerDirectoryFiles=Files.list(extraDirectory)){\n      extraFiles=extraFilesLayerDirectoryFiles.collect(Collectors.toList());\n    }\n   }\n  Collections.sort(dependenciesFiles);\n  Collections.sort(snapshotDependenciesFiles);\n  Collections.sort(resourcesFiles);\n  Collections.sort(classesFiles);\n  Collections.sort(extraFiles);\n  return JavaLayerConfigurations.builder().setDependenciesFiles(dependenciesFiles).setSnapshotDependenciesFiles(snapshotDependenciesFiles).setResourcesFiles(resourcesFiles).setClassesFiles(classesFiles).setExtraFiles(extraFiles).build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 320,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3699,
        "startLineNumber" : 40,
        "startColumnNumber" : 2,
        "endLineNumber" : 124,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Resolves the source files configuration for a Gradle  {@link Project}.\n * @param project the Gradle {@link Project}\n * @param gradleJibLogger the build logger for providing feedback about the resolution\n * @param extraDirectory path to the directory for the extra files layer\n * @return a {@link JavaLayerConfigurations} for the layers for the Gradle {@link Project}\n * @throws IOException if an I/O exception occurred during resolution\n */\nstatic JavaLayerConfigurations getForProject(Project project,GradleJibLogger gradleJibLogger,Path extraDirectory) throws IOException {\n  JavaPluginConvention javaPluginConvention=project.getConvention().getPlugin(JavaPluginConvention.class);\n  SourceSet mainSourceSet=javaPluginConvention.getSourceSets().getByName(MAIN_SOURCE_SET_NAME);\n  List<Path> dependenciesFiles=new ArrayList<>();\n  List<Path> snapshotDependenciesFiles=new ArrayList<>();\n  List<Path> resourcesFiles=new ArrayList<>();\n  List<Path> classesFiles=new ArrayList<>();\n  List<Path> extraFiles=new ArrayList<>();\n  FileCollection classesOutputDirectories=mainSourceSet.getOutput().getClassesDirs();\n  for (  File classesOutputDirectory : classesOutputDirectories) {\n    if (Files.notExists(classesOutputDirectory.toPath())) {\n      gradleJibLogger.warn(\"Could not find build output directory '\" + classesOutputDirectory + \"'\");\n      continue;\n    }\n    try (Stream<Path> classFileStream=Files.list(classesOutputDirectory.toPath())){\n      classFileStream.forEach(classesFiles::add);\n    }\n   }\n  if (classesFiles.isEmpty()) {\n    gradleJibLogger.warn(\"No classes files were found - did you compile your project?\");\n  }\n  Path resourcesOutputDirectory=mainSourceSet.getOutput().getResourcesDir().toPath();\n  if (Files.exists(resourcesOutputDirectory)) {\n    try (Stream<Path> resourceFileStream=Files.list(resourcesOutputDirectory)){\n      resourceFileStream.forEach(resourcesFiles::add);\n    }\n   }\n  FileCollection allFiles=mainSourceSet.getRuntimeClasspath();\n  allFiles=allFiles.minus(classesOutputDirectories);\n  for (  File dependencyFile : allFiles) {\n    if (resourcesOutputDirectory.equals(dependencyFile.toPath())) {\n      continue;\n    }\n    if (dependencyFile.getName().contains(\"SNAPSHOT\")) {\n      snapshotDependenciesFiles.add(dependencyFile.toPath());\n    }\n else {\n      dependenciesFiles.add(dependencyFile.toPath());\n    }\n  }\n  if (Files.exists(extraDirectory)) {\n    try (Stream<Path> extraFilesLayerDirectoryFiles=Files.list(extraDirectory)){\n      extraFiles=extraFilesLayerDirectoryFiles.collect(Collectors.toList());\n    }\n   }\n  Collections.sort(dependenciesFiles);\n  Collections.sort(snapshotDependenciesFiles);\n  Collections.sort(resourcesFiles);\n  Collections.sort(classesFiles);\n  Collections.sort(extraFiles);\n  return JavaLayerConfigurations.builder().setDependenciesFiles(dependenciesFiles).setSnapshotDependenciesFiles(snapshotDependenciesFiles).setResourcesFiles(resourcesFiles).setClassesFiles(classesFiles).setExtraFiles(extraFiles).build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 340,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 52,
        "startColumnNumber" : 8,
        "endLineNumber" : 52,
        "endColumnNumber" : 69
      },
      "nodeContext" : "project.getConvention().getPlugin(JavaPluginConvention.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "com.google.cloud.tools.jib.gradle.Project"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 52,
    "startColumnNumber" : 8,
    "endLineNumber" : 52,
    "endColumnNumber" : 15
  } ],
  "layoutRelationDataList" : [ ]
}