{
  "id" : 419,
  "expression" : "InfinispanConnectionProvider.USER_SESSION_CACHE_NAME",
  "projectName" : "keycloak@keycloak",
  "commitID" : "aacae9b9acb0fbedc49d4f88c9fbd7aa11922dce",
  "filePath" : "/model/infinispan/src/test/java/org/keycloak/cluster/infinispan/ConcurrencyJDGCacheReplaceTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "InfinispanConnectionProvider.USER_SESSION_CACHE_NAME",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 52,
      "startLineNumber" : 80,
      "startColumnNumber" : 98,
      "endLineNumber" : 80,
      "endColumnNumber" : 150
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 80,
        "startColumnNumber" : 72,
        "endLineNumber" : 80,
        "endColumnNumber" : 151
      },
      "nodeContext" : "createManager(1).getCache(InfinispanConnectionProvider.USER_SESSION_CACHE_NAME)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 80,
        "startColumnNumber" : 63,
        "endLineNumber" : 80,
        "endColumnNumber" : 151
      },
      "nodeContext" : "cache1=createManager(1).getCache(InfinispanConnectionProvider.USER_SESSION_CACHE_NAME)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 144,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 152
      },
      "nodeContext" : "Cache<String,SessionEntityWrapper<UserSessionEntity>> cache1=createManager(1).getCache(InfinispanConnectionProvider.USER_SESSION_CACHE_NAME);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 21,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4915,
        "startLineNumber" : 79,
        "startColumnNumber" : 60,
        "endLineNumber" : 208,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Cache<String,SessionEntityWrapper<UserSessionEntity>> cache1=createManager(1).getCache(InfinispanConnectionProvider.USER_SESSION_CACHE_NAME);\n  Cache<String,SessionEntityWrapper<UserSessionEntity>> cache2=createManager(2).getCache(InfinispanConnectionProvider.USER_SESSION_CACHE_NAME);\n  UserSessionEntity session=new UserSessionEntity();\n  session.setId(\"123\");\n  session.setRealmId(\"foo\");\n  session.setBrokerSessionId(\"!23123123\");\n  session.setBrokerUserId(null);\n  session.setUser(\"foo\");\n  session.setLoginUsername(\"foo\");\n  session.setIpAddress(\"123.44.143.178\");\n  session.setStarted(Time.currentTime());\n  session.setLastSessionRefresh(Time.currentTime());\n  AuthenticatedClientSessionEntity clientSession=new AuthenticatedClientSessionEntity(UUID.randomUUID());\n  clientSession.setAuthMethod(\"saml\");\n  clientSession.setAction(\"something\");\n  clientSession.setTimestamp(1234);\n  session.getAuthenticatedClientSessions().put(CLIENT_1_UUID.toString(),clientSession.getId());\n  SessionEntityWrapper<UserSessionEntity> wrappedSession=new SessionEntityWrapper<>(session);\n  logger.info(\"Before put\");\n  cache1.getAdvancedCache().withFlags(Flag.CACHE_MODE_LOCAL).put(\"123\",wrappedSession);\n  logger.info(\"After put\");\n  cache1.replace(\"123\",wrappedSession);\n  logger.info(\"After replace\");\n  cache1.get(\"123\");\n  logger.info(\"After cache1.get\");\n  cache2.get(\"123\");\n  logger.info(\"After cache2.get\");\n  cache1.get(\"123\");\n  logger.info(\"After cache1.get - second call\");\n  cache2.get(\"123\");\n  logger.info(\"After cache2.get - second call\");\n  cache2.replace(\"123\",wrappedSession);\n  logger.info(\"After replace - second call\");\n  cache1.get(\"123\");\n  logger.info(\"After cache1.get - third call\");\n  cache2.get(\"123\");\n  logger.info(\"After cache2.get - third call\");\n  cache1.getAdvancedCache().withFlags(Flag.SKIP_CACHE_LOAD).entrySet().stream().forEach(e -> {\n  }\n);\n  logger.info(\"After cache1.stream\");\n  InfinispanUtil.getRemoteCache(cache1).put(\"123\",session);\n  InfinispanUtil.getRemoteCache(cache2).replace(\"123\",session);\n  remoteCache1=InfinispanUtil.getRemoteCache(cache1);\n  remoteCache2=InfinispanUtil.getRemoteCache(cache2);\n  testLifespans();\n  Thread worker1=createWorker(cache1,1);\n  Thread worker2=createWorker(cache2,2);\n  long start=System.currentTimeMillis();\n  worker1.start();\n  worker2.start();\n  worker1.join();\n  worker2.join();\n  long took=System.currentTimeMillis() - start;\n  System.out.println(\"Finished. Took: \" + took + \" ms. Notes: \"+ cache1.get(\"123\").getEntity().getNotes().size()+ \", successfulListenerWrites: \"+ successfulListenerWrites.get()+ \", successfulListenerWrites2: \"+ successfulListenerWrites2.get()+ \", failedReplaceCounter: \"+ failedReplaceCounter.get()+ \", failedReplaceCounter2: \"+ failedReplaceCounter2.get());\n  System.out.println(\"Sleeping before other report\");\n  Thread.sleep(2000);\n  System.out.println(\"Finished. Took: \" + took + \" ms. Notes: \"+ cache1.get(\"123\").getEntity().getNotes().size()+ \", successfulListenerWrites: \"+ successfulListenerWrites.get()+ \", successfulListenerWrites2: \"+ successfulListenerWrites2.get()+ \", failedReplaceCounter: \"+ failedReplaceCounter.get()+ \", failedReplaceCounter2: \"+ failedReplaceCounter2.get());\n  System.out.println(\"remoteCache1.notes: \" + ((UserSessionEntity)remoteCache1.get(\"123\")).getNotes().size());\n  System.out.println(\"remoteCache2.notes: \" + ((UserSessionEntity)remoteCache2.get(\"123\")).getNotes().size());\n  System.out.println(\"Histogram: \");\n  for (  ExecutorService ex : executors) {\n    ex.shutdown();\n  }\n  cache1.getCacheManager().stop();\n  cache2.getCacheManager().stop();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 519,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4971,
        "startLineNumber" : 79,
        "startColumnNumber" : 4,
        "endLineNumber" : 208,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static void main(String[] args) throws Exception {\n  Cache<String,SessionEntityWrapper<UserSessionEntity>> cache1=createManager(1).getCache(InfinispanConnectionProvider.USER_SESSION_CACHE_NAME);\n  Cache<String,SessionEntityWrapper<UserSessionEntity>> cache2=createManager(2).getCache(InfinispanConnectionProvider.USER_SESSION_CACHE_NAME);\n  UserSessionEntity session=new UserSessionEntity();\n  session.setId(\"123\");\n  session.setRealmId(\"foo\");\n  session.setBrokerSessionId(\"!23123123\");\n  session.setBrokerUserId(null);\n  session.setUser(\"foo\");\n  session.setLoginUsername(\"foo\");\n  session.setIpAddress(\"123.44.143.178\");\n  session.setStarted(Time.currentTime());\n  session.setLastSessionRefresh(Time.currentTime());\n  AuthenticatedClientSessionEntity clientSession=new AuthenticatedClientSessionEntity(UUID.randomUUID());\n  clientSession.setAuthMethod(\"saml\");\n  clientSession.setAction(\"something\");\n  clientSession.setTimestamp(1234);\n  session.getAuthenticatedClientSessions().put(CLIENT_1_UUID.toString(),clientSession.getId());\n  SessionEntityWrapper<UserSessionEntity> wrappedSession=new SessionEntityWrapper<>(session);\n  logger.info(\"Before put\");\n  cache1.getAdvancedCache().withFlags(Flag.CACHE_MODE_LOCAL).put(\"123\",wrappedSession);\n  logger.info(\"After put\");\n  cache1.replace(\"123\",wrappedSession);\n  logger.info(\"After replace\");\n  cache1.get(\"123\");\n  logger.info(\"After cache1.get\");\n  cache2.get(\"123\");\n  logger.info(\"After cache2.get\");\n  cache1.get(\"123\");\n  logger.info(\"After cache1.get - second call\");\n  cache2.get(\"123\");\n  logger.info(\"After cache2.get - second call\");\n  cache2.replace(\"123\",wrappedSession);\n  logger.info(\"After replace - second call\");\n  cache1.get(\"123\");\n  logger.info(\"After cache1.get - third call\");\n  cache2.get(\"123\");\n  logger.info(\"After cache2.get - third call\");\n  cache1.getAdvancedCache().withFlags(Flag.SKIP_CACHE_LOAD).entrySet().stream().forEach(e -> {\n  }\n);\n  logger.info(\"After cache1.stream\");\n  InfinispanUtil.getRemoteCache(cache1).put(\"123\",session);\n  InfinispanUtil.getRemoteCache(cache2).replace(\"123\",session);\n  remoteCache1=InfinispanUtil.getRemoteCache(cache1);\n  remoteCache2=InfinispanUtil.getRemoteCache(cache2);\n  testLifespans();\n  Thread worker1=createWorker(cache1,1);\n  Thread worker2=createWorker(cache2,2);\n  long start=System.currentTimeMillis();\n  worker1.start();\n  worker2.start();\n  worker1.join();\n  worker2.join();\n  long took=System.currentTimeMillis() - start;\n  System.out.println(\"Finished. Took: \" + took + \" ms. Notes: \"+ cache1.get(\"123\").getEntity().getNotes().size()+ \", successfulListenerWrites: \"+ successfulListenerWrites.get()+ \", successfulListenerWrites2: \"+ successfulListenerWrites2.get()+ \", failedReplaceCounter: \"+ failedReplaceCounter.get()+ \", failedReplaceCounter2: \"+ failedReplaceCounter2.get());\n  System.out.println(\"Sleeping before other report\");\n  Thread.sleep(2000);\n  System.out.println(\"Finished. Took: \" + took + \" ms. Notes: \"+ cache1.get(\"123\").getEntity().getNotes().size()+ \", successfulListenerWrites: \"+ successfulListenerWrites.get()+ \", successfulListenerWrites2: \"+ successfulListenerWrites2.get()+ \", failedReplaceCounter: \"+ failedReplaceCounter.get()+ \", failedReplaceCounter2: \"+ failedReplaceCounter2.get());\n  System.out.println(\"remoteCache1.notes: \" + ((UserSessionEntity)remoteCache1.get(\"123\")).getNotes().size());\n  System.out.println(\"remoteCache2.notes: \" + ((UserSessionEntity)remoteCache2.get(\"123\")).getNotes().size());\n  System.out.println(\"Histogram: \");\n  for (  ExecutorService ex : executors) {\n    ex.shutdown();\n  }\n  cache1.getCacheManager().stop();\n  cache2.getCacheManager().stop();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 532,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 144,
        "startLineNumber" : 80,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 152
      },
      "nodeContext" : "Cache<String,SessionEntityWrapper<UserSessionEntity>> cache1=createManager(1).getCache(InfinispanConnectionProvider.USER_SESSION_CACHE_NAME);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 21,
      "astHeight" : 5
    },
    "tokenLength" : 5,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "InfinispanConnectionProvider.USER_SESSION_CACHE_NAME",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 52,
      "startLineNumber" : 81,
      "startColumnNumber" : 98,
      "endLineNumber" : 81,
      "endColumnNumber" : 150
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 81,
        "startColumnNumber" : 72,
        "endLineNumber" : 81,
        "endColumnNumber" : 151
      },
      "nodeContext" : "createManager(2).getCache(InfinispanConnectionProvider.USER_SESSION_CACHE_NAME)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 81,
        "startColumnNumber" : 63,
        "endLineNumber" : 81,
        "endColumnNumber" : 151
      },
      "nodeContext" : "cache2=createManager(2).getCache(InfinispanConnectionProvider.USER_SESSION_CACHE_NAME)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 144,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 81,
        "endColumnNumber" : 152
      },
      "nodeContext" : "Cache<String,SessionEntityWrapper<UserSessionEntity>> cache2=createManager(2).getCache(InfinispanConnectionProvider.USER_SESSION_CACHE_NAME);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 21,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4915,
        "startLineNumber" : 79,
        "startColumnNumber" : 60,
        "endLineNumber" : 208,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Cache<String,SessionEntityWrapper<UserSessionEntity>> cache1=createManager(1).getCache(InfinispanConnectionProvider.USER_SESSION_CACHE_NAME);\n  Cache<String,SessionEntityWrapper<UserSessionEntity>> cache2=createManager(2).getCache(InfinispanConnectionProvider.USER_SESSION_CACHE_NAME);\n  UserSessionEntity session=new UserSessionEntity();\n  session.setId(\"123\");\n  session.setRealmId(\"foo\");\n  session.setBrokerSessionId(\"!23123123\");\n  session.setBrokerUserId(null);\n  session.setUser(\"foo\");\n  session.setLoginUsername(\"foo\");\n  session.setIpAddress(\"123.44.143.178\");\n  session.setStarted(Time.currentTime());\n  session.setLastSessionRefresh(Time.currentTime());\n  AuthenticatedClientSessionEntity clientSession=new AuthenticatedClientSessionEntity(UUID.randomUUID());\n  clientSession.setAuthMethod(\"saml\");\n  clientSession.setAction(\"something\");\n  clientSession.setTimestamp(1234);\n  session.getAuthenticatedClientSessions().put(CLIENT_1_UUID.toString(),clientSession.getId());\n  SessionEntityWrapper<UserSessionEntity> wrappedSession=new SessionEntityWrapper<>(session);\n  logger.info(\"Before put\");\n  cache1.getAdvancedCache().withFlags(Flag.CACHE_MODE_LOCAL).put(\"123\",wrappedSession);\n  logger.info(\"After put\");\n  cache1.replace(\"123\",wrappedSession);\n  logger.info(\"After replace\");\n  cache1.get(\"123\");\n  logger.info(\"After cache1.get\");\n  cache2.get(\"123\");\n  logger.info(\"After cache2.get\");\n  cache1.get(\"123\");\n  logger.info(\"After cache1.get - second call\");\n  cache2.get(\"123\");\n  logger.info(\"After cache2.get - second call\");\n  cache2.replace(\"123\",wrappedSession);\n  logger.info(\"After replace - second call\");\n  cache1.get(\"123\");\n  logger.info(\"After cache1.get - third call\");\n  cache2.get(\"123\");\n  logger.info(\"After cache2.get - third call\");\n  cache1.getAdvancedCache().withFlags(Flag.SKIP_CACHE_LOAD).entrySet().stream().forEach(e -> {\n  }\n);\n  logger.info(\"After cache1.stream\");\n  InfinispanUtil.getRemoteCache(cache1).put(\"123\",session);\n  InfinispanUtil.getRemoteCache(cache2).replace(\"123\",session);\n  remoteCache1=InfinispanUtil.getRemoteCache(cache1);\n  remoteCache2=InfinispanUtil.getRemoteCache(cache2);\n  testLifespans();\n  Thread worker1=createWorker(cache1,1);\n  Thread worker2=createWorker(cache2,2);\n  long start=System.currentTimeMillis();\n  worker1.start();\n  worker2.start();\n  worker1.join();\n  worker2.join();\n  long took=System.currentTimeMillis() - start;\n  System.out.println(\"Finished. Took: \" + took + \" ms. Notes: \"+ cache1.get(\"123\").getEntity().getNotes().size()+ \", successfulListenerWrites: \"+ successfulListenerWrites.get()+ \", successfulListenerWrites2: \"+ successfulListenerWrites2.get()+ \", failedReplaceCounter: \"+ failedReplaceCounter.get()+ \", failedReplaceCounter2: \"+ failedReplaceCounter2.get());\n  System.out.println(\"Sleeping before other report\");\n  Thread.sleep(2000);\n  System.out.println(\"Finished. Took: \" + took + \" ms. Notes: \"+ cache1.get(\"123\").getEntity().getNotes().size()+ \", successfulListenerWrites: \"+ successfulListenerWrites.get()+ \", successfulListenerWrites2: \"+ successfulListenerWrites2.get()+ \", failedReplaceCounter: \"+ failedReplaceCounter.get()+ \", failedReplaceCounter2: \"+ failedReplaceCounter2.get());\n  System.out.println(\"remoteCache1.notes: \" + ((UserSessionEntity)remoteCache1.get(\"123\")).getNotes().size());\n  System.out.println(\"remoteCache2.notes: \" + ((UserSessionEntity)remoteCache2.get(\"123\")).getNotes().size());\n  System.out.println(\"Histogram: \");\n  for (  ExecutorService ex : executors) {\n    ex.shutdown();\n  }\n  cache1.getCacheManager().stop();\n  cache2.getCacheManager().stop();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 519,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4971,
        "startLineNumber" : 79,
        "startColumnNumber" : 4,
        "endLineNumber" : 208,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static void main(String[] args) throws Exception {\n  Cache<String,SessionEntityWrapper<UserSessionEntity>> cache1=createManager(1).getCache(InfinispanConnectionProvider.USER_SESSION_CACHE_NAME);\n  Cache<String,SessionEntityWrapper<UserSessionEntity>> cache2=createManager(2).getCache(InfinispanConnectionProvider.USER_SESSION_CACHE_NAME);\n  UserSessionEntity session=new UserSessionEntity();\n  session.setId(\"123\");\n  session.setRealmId(\"foo\");\n  session.setBrokerSessionId(\"!23123123\");\n  session.setBrokerUserId(null);\n  session.setUser(\"foo\");\n  session.setLoginUsername(\"foo\");\n  session.setIpAddress(\"123.44.143.178\");\n  session.setStarted(Time.currentTime());\n  session.setLastSessionRefresh(Time.currentTime());\n  AuthenticatedClientSessionEntity clientSession=new AuthenticatedClientSessionEntity(UUID.randomUUID());\n  clientSession.setAuthMethod(\"saml\");\n  clientSession.setAction(\"something\");\n  clientSession.setTimestamp(1234);\n  session.getAuthenticatedClientSessions().put(CLIENT_1_UUID.toString(),clientSession.getId());\n  SessionEntityWrapper<UserSessionEntity> wrappedSession=new SessionEntityWrapper<>(session);\n  logger.info(\"Before put\");\n  cache1.getAdvancedCache().withFlags(Flag.CACHE_MODE_LOCAL).put(\"123\",wrappedSession);\n  logger.info(\"After put\");\n  cache1.replace(\"123\",wrappedSession);\n  logger.info(\"After replace\");\n  cache1.get(\"123\");\n  logger.info(\"After cache1.get\");\n  cache2.get(\"123\");\n  logger.info(\"After cache2.get\");\n  cache1.get(\"123\");\n  logger.info(\"After cache1.get - second call\");\n  cache2.get(\"123\");\n  logger.info(\"After cache2.get - second call\");\n  cache2.replace(\"123\",wrappedSession);\n  logger.info(\"After replace - second call\");\n  cache1.get(\"123\");\n  logger.info(\"After cache1.get - third call\");\n  cache2.get(\"123\");\n  logger.info(\"After cache2.get - third call\");\n  cache1.getAdvancedCache().withFlags(Flag.SKIP_CACHE_LOAD).entrySet().stream().forEach(e -> {\n  }\n);\n  logger.info(\"After cache1.stream\");\n  InfinispanUtil.getRemoteCache(cache1).put(\"123\",session);\n  InfinispanUtil.getRemoteCache(cache2).replace(\"123\",session);\n  remoteCache1=InfinispanUtil.getRemoteCache(cache1);\n  remoteCache2=InfinispanUtil.getRemoteCache(cache2);\n  testLifespans();\n  Thread worker1=createWorker(cache1,1);\n  Thread worker2=createWorker(cache2,2);\n  long start=System.currentTimeMillis();\n  worker1.start();\n  worker2.start();\n  worker1.join();\n  worker2.join();\n  long took=System.currentTimeMillis() - start;\n  System.out.println(\"Finished. Took: \" + took + \" ms. Notes: \"+ cache1.get(\"123\").getEntity().getNotes().size()+ \", successfulListenerWrites: \"+ successfulListenerWrites.get()+ \", successfulListenerWrites2: \"+ successfulListenerWrites2.get()+ \", failedReplaceCounter: \"+ failedReplaceCounter.get()+ \", failedReplaceCounter2: \"+ failedReplaceCounter2.get());\n  System.out.println(\"Sleeping before other report\");\n  Thread.sleep(2000);\n  System.out.println(\"Finished. Took: \" + took + \" ms. Notes: \"+ cache1.get(\"123\").getEntity().getNotes().size()+ \", successfulListenerWrites: \"+ successfulListenerWrites.get()+ \", successfulListenerWrites2: \"+ successfulListenerWrites2.get()+ \", failedReplaceCounter: \"+ failedReplaceCounter.get()+ \", failedReplaceCounter2: \"+ failedReplaceCounter2.get());\n  System.out.println(\"remoteCache1.notes: \" + ((UserSessionEntity)remoteCache1.get(\"123\")).getNotes().size());\n  System.out.println(\"remoteCache2.notes: \" + ((UserSessionEntity)remoteCache2.get(\"123\")).getNotes().size());\n  System.out.println(\"Histogram: \");\n  for (  ExecutorService ex : executors) {\n    ex.shutdown();\n  }\n  cache1.getCacheManager().stop();\n  cache2.getCacheManager().stop();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 532,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 144,
        "startLineNumber" : 81,
        "startColumnNumber" : 8,
        "endLineNumber" : 81,
        "endColumnNumber" : 152
      },
      "nodeContext" : "Cache<String,SessionEntityWrapper<UserSessionEntity>> cache2=createManager(2).getCache(InfinispanConnectionProvider.USER_SESSION_CACHE_NAME);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 21,
      "astHeight" : 5
    },
    "tokenLength" : 5,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 52,
    "startLineNumber" : 80,
    "startColumnNumber" : 98,
    "endLineNumber" : 80,
    "endColumnNumber" : 150
  }, {
    "charLength" : 52,
    "startLineNumber" : 81,
    "startColumnNumber" : 98,
    "endLineNumber" : 81,
    "endColumnNumber" : 150
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}