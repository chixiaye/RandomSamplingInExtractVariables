{
  "id" : 131,
  "expression" : "b.z - c.z",
  "projectName" : "libgdx@libgdx",
  "commitID" : "3485b16e8979c0141421bc80cb8831b7a0403f67",
  "filePath" : "/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/OcclusionBuffer.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "b.z - c.z",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 382,
      "startColumnNumber" : 30,
      "endLineNumber" : 382,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 7,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 382,
        "startColumnNumber" : 29,
        "endLineNumber" : 382,
        "endColumnNumber" : 40
      },
      "nodeContext" : "(b.z - c.z)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 382,
        "startColumnNumber" : 20,
        "endLineNumber" : 382,
        "endColumnNumber" : 40
      },
      "nodeContext" : "triX.x * (b.z - c.z)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 382,
        "startColumnNumber" : 20,
        "endLineNumber" : 382,
        "endColumnNumber" : 63
      },
      "nodeContext" : "triX.x * (b.z - c.z) + triX.y * (c.z - a.z)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 25,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 382,
        "startColumnNumber" : 20,
        "endLineNumber" : 382,
        "endColumnNumber" : 86
      },
      "nodeContext" : "triX.x * (b.z - c.z) + triX.y * (c.z - a.z) + triX.z * (a.z - b.z)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 38,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 382,
        "startColumnNumber" : 19,
        "endLineNumber" : 382,
        "endColumnNumber" : 87
      },
      "nodeContext" : "(triX.x * (b.z - c.z) + triX.y * (c.z - a.z) + triX.z * (a.z - b.z))",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 39,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 382,
        "startColumnNumber" : 14,
        "endLineNumber" : 382,
        "endColumnNumber" : 87
      },
      "nodeContext" : "ia * (triX.x * (b.z - c.z) + triX.y * (c.z - a.z) + triX.z * (a.z - b.z))",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 41,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 382,
        "startColumnNumber" : 14,
        "endLineNumber" : 382,
        "endColumnNumber" : 103
      },
      "nodeContext" : "ia * (triX.x * (b.z - c.z) + triX.y * (c.z - a.z) + triX.z * (a.z - b.z)) - (dzx * width)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 46,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 95,
        "startLineNumber" : 382,
        "startColumnNumber" : 8,
        "endLineNumber" : 382,
        "endColumnNumber" : 103
      },
      "nodeContext" : "dzy=ia * (triX.x * (b.z - c.z) + triX.y * (c.z - a.z) + triX.z * (a.z - b.z)) - (dzx * width)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 48,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 382,
        "startColumnNumber" : 2,
        "endLineNumber" : 382,
        "endColumnNumber" : 104
      },
      "nodeContext" : "float dzy=ia * (triX.x * (b.z - c.z) + triX.y * (c.z - a.z) + triX.z * (a.z - b.z)) - (dzx * width);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 50,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2495,
        "startLineNumber" : 354,
        "startColumnNumber" : 79,
        "endLineNumber" : 398,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (((tmpV1.set(b).sub(a)).crs(tmpV2.set(c).sub(a))).z <= 0)   return false;\n  triX.set((int)(a.x * bufferHalfExt.x + bufferOffset.x),(int)(b.x * bufferHalfExt.x + bufferOffset.x),(int)(c.x * bufferHalfExt.x + bufferOffset.x));\n  triY.set((int)(a.y * bufferHalfExt.y + bufferOffset.y),(int)(b.y * bufferHalfExt.y + bufferOffset.y),(int)(c.y * bufferHalfExt.y + bufferOffset.y));\n  int xMin=Math.max(0,Math.min(triX.x,Math.min(triX.y,triX.z)));\n  int xMax=Math.min(bufferWidth,1 + Math.max(triX.x,Math.max(triX.y,triX.z)));\n  int yMin=Math.max(0,Math.min(triY.x,Math.min(triY.y,triY.z)));\n  int yMax=Math.min(bufferWidth,1 + Math.max(triY.x,Math.max(triY.y,triY.z)));\n  int width=xMax - xMin;\n  int height=yMax - yMin;\n  if (width * height <= 0)   return false;\n  triDX.set(triY.x - triY.y,triY.y - triY.z,triY.z - triY.x);\n  triDY.set(triX.y - triX.x - triDX.x * width,triX.z - triX.y - triDX.y * width,triX.x - triX.z - triDX.z * width);\n  cursor.set(yMin * (triX.y - triX.x) + xMin * (triY.x - triY.y) + triX.x * triY.y - triX.y * triY.x,yMin * (triX.z - triX.y) + xMin * (triY.y - triY.z) + triX.y * triY.z - triX.z * triY.y,yMin * (triX.x - triX.z) + xMin * (triY.z - triY.x) + triX.z * triY.x - triX.x * triY.z);\n  float ia=1f / (float)(triX.x * triY.y - triX.y * triY.x + triX.z * triY.x - triX.x * triY.z + triX.y * triY.z - triX.z * triY.y);\n  float dzx=ia * (triY.x * (c.z - b.z) + triY.y * (a.z - c.z) + triY.z * (b.z - a.z));\n  float dzy=ia * (triX.x * (b.z - c.z) + triX.y * (c.z - a.z) + triX.z * (a.z - b.z)) - (dzx * width);\n  float drawDepth=ia * (a.z * cursor.y + b.z * cursor.z + c.z * cursor.x);\n  int bufferRow=(yMin * bufferHeight);\n  for (int iy=yMin; iy < yMax; iy++) {\n    for (int ix=xMin; ix < xMax; ix++) {\n      int bufferIndex=bufferRow + ix;\n      if (cursor.x >= 0 && cursor.y >= 0 && cursor.z >= 0 && policy.process(buffer,bufferIndex,drawDepth))       return true;\n      cursor.add(triDX);\n      drawDepth+=dzx;\n    }\n    cursor.add(triDY);\n    drawDepth+=dzy;\n    bufferRow+=bufferWidth;\n  }\n  return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 687,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3284,
        "startLineNumber" : 342,
        "startColumnNumber" : 1,
        "endLineNumber" : 398,
        "endColumnNumber" : 2
      },
      "nodeContext" : "/** \n * Rasterizes a triangle with linearly interpolated depth values. <p> If used with  {@link Policy#DRAW} the triangle will be drawn to the depth buffer wherever it passes a depth test.<p> If  {@link Policy#QUERY} is used, the depth values in the triangle will be compared with existing depth buffer values. If anypixel passes a depth test the rasterization will be aborted and the method will return true.\n * @param a Triangle vertex in camera space\n * @param b Triangle vertex in camera space\n * @param c Triangle vertex in camera space\n * @param policy Draw or query policy\n * @return With query policy, true if any pixel in the triangle passes a depth test. False otherwise. \n */\nprivate boolean drawTriangle(Vector3 a,Vector3 b,Vector3 c,Policy policy){\n  if (((tmpV1.set(b).sub(a)).crs(tmpV2.set(c).sub(a))).z <= 0)   return false;\n  triX.set((int)(a.x * bufferHalfExt.x + bufferOffset.x),(int)(b.x * bufferHalfExt.x + bufferOffset.x),(int)(c.x * bufferHalfExt.x + bufferOffset.x));\n  triY.set((int)(a.y * bufferHalfExt.y + bufferOffset.y),(int)(b.y * bufferHalfExt.y + bufferOffset.y),(int)(c.y * bufferHalfExt.y + bufferOffset.y));\n  int xMin=Math.max(0,Math.min(triX.x,Math.min(triX.y,triX.z)));\n  int xMax=Math.min(bufferWidth,1 + Math.max(triX.x,Math.max(triX.y,triX.z)));\n  int yMin=Math.max(0,Math.min(triY.x,Math.min(triY.y,triY.z)));\n  int yMax=Math.min(bufferWidth,1 + Math.max(triY.x,Math.max(triY.y,triY.z)));\n  int width=xMax - xMin;\n  int height=yMax - yMin;\n  if (width * height <= 0)   return false;\n  triDX.set(triY.x - triY.y,triY.y - triY.z,triY.z - triY.x);\n  triDY.set(triX.y - triX.x - triDX.x * width,triX.z - triX.y - triDX.y * width,triX.x - triX.z - triDX.z * width);\n  cursor.set(yMin * (triX.y - triX.x) + xMin * (triY.x - triY.y) + triX.x * triY.y - triX.y * triY.x,yMin * (triX.z - triX.y) + xMin * (triY.y - triY.z) + triX.y * triY.z - triX.z * triY.y,yMin * (triX.x - triX.z) + xMin * (triY.z - triY.x) + triX.z * triY.x - triX.x * triY.z);\n  float ia=1f / (float)(triX.x * triY.y - triX.y * triY.x + triX.z * triY.x - triX.x * triY.z + triX.y * triY.z - triX.z * triY.y);\n  float dzx=ia * (triY.x * (c.z - b.z) + triY.y * (a.z - c.z) + triY.z * (b.z - a.z));\n  float dzy=ia * (triX.x * (b.z - c.z) + triX.y * (c.z - a.z) + triX.z * (a.z - b.z)) - (dzx * width);\n  float drawDepth=ia * (a.z * cursor.y + b.z * cursor.z + c.z * cursor.x);\n  int bufferRow=(yMin * bufferHeight);\n  for (int iy=yMin; iy < yMax; iy++) {\n    for (int ix=xMin; ix < xMax; ix++) {\n      int bufferIndex=bufferRow + ix;\n      if (cursor.x >= 0 && cursor.y >= 0 && cursor.z >= 0 && policy.process(buffer,bufferIndex,drawDepth))       return true;\n      cursor.add(triDX);\n      drawDepth+=dzx;\n    }\n    cursor.add(triDY);\n    drawDepth+=dzy;\n    bufferRow+=bufferWidth;\n  }\n  return false;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 708,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 102,
        "startLineNumber" : 382,
        "startColumnNumber" : 2,
        "endLineNumber" : 382,
        "endColumnNumber" : 104
      },
      "nodeContext" : "float dzy=ia * (triX.x * (b.z - c.z) + triX.y * (c.z - a.z) + triX.z * (a.z - b.z)) - (dzx * width);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 50,
      "astHeight" : 12
    },
    "tokenLength" : 5,
    "type" : "float"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 382,
    "startColumnNumber" : 30,
    "endLineNumber" : 382,
    "endColumnNumber" : 39
  } ],
  "layoutRelationDataList" : [ ]
}