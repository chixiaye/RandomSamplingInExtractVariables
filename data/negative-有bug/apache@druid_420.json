{
  "id" : 420,
  "expression" : "\"REPLACE INTO\"",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/sql/src/main/java/org/apache/druid/sql/calcite/parser/DruidSqlReplace.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"REPLACE INTO\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 92,
      "startColumnNumber" : 15,
      "endLineNumber" : 92,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 92,
        "startColumnNumber" : 4,
        "endLineNumber" : 92,
        "endColumnNumber" : 30
      },
      "nodeContext" : "writer.sep(\"REPLACE INTO\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 92,
        "startColumnNumber" : 4,
        "endLineNumber" : 92,
        "endColumnNumber" : 31
      },
      "nodeContext" : "writer.sep(\"REPLACE INTO\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1111,
        "startLineNumber" : 90,
        "startColumnNumber" : 2,
        "endLineNumber" : 124,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  writer.startList(SqlWriter.FrameTypeEnum.SELECT);\n  writer.sep(\"REPLACE INTO\");\n  final int opLeft=getOperator().getLeftPrec();\n  final int opRight=getOperator().getRightPrec();\n  getTargetTable().unparse(writer,opLeft,opRight);\n  if (getTargetColumnList() != null) {\n    getTargetColumnList().unparse(writer,opLeft,opRight);\n  }\n  writer.newlineAndIndent();\n  writer.keyword(\"OVERWRITE\");\n  if (replaceTimeQuery instanceof SqlLiteral) {\n    writer.keyword(\"ALL\");\n  }\n else {\n    replaceTimeQuery.unparse(writer,leftPrec,rightPrec);\n  }\n  writer.newlineAndIndent();\n  getSource().unparse(writer,0,0);\n  writer.newlineAndIndent();\n  writer.keyword(\"PARTITIONED BY\");\n  writer.keyword(partitionedByStringForUnparse);\n  if (getClusteredBy() != null) {\n    writer.keyword(\"CLUSTERED BY\");\n    SqlWriter.Frame frame=writer.startList(\"\",\"\");\n    for (    SqlNode clusterByOpts : getClusteredBy().getList()) {\n      clusterByOpts.unparse(writer,leftPrec,rightPrec);\n    }\n    writer.endList(frame);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 154,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1194,
        "startLineNumber" : 88,
        "startColumnNumber" : 2,
        "endLineNumber" : 124,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public void unparse(SqlWriter writer,int leftPrec,int rightPrec){\n  writer.startList(SqlWriter.FrameTypeEnum.SELECT);\n  writer.sep(\"REPLACE INTO\");\n  final int opLeft=getOperator().getLeftPrec();\n  final int opRight=getOperator().getRightPrec();\n  getTargetTable().unparse(writer,opLeft,opRight);\n  if (getTargetColumnList() != null) {\n    getTargetColumnList().unparse(writer,opLeft,opRight);\n  }\n  writer.newlineAndIndent();\n  writer.keyword(\"OVERWRITE\");\n  if (replaceTimeQuery instanceof SqlLiteral) {\n    writer.keyword(\"ALL\");\n  }\n else {\n    replaceTimeQuery.unparse(writer,leftPrec,rightPrec);\n  }\n  writer.newlineAndIndent();\n  getSource().unparse(writer,0,0);\n  writer.newlineAndIndent();\n  writer.keyword(\"PARTITIONED BY\");\n  writer.keyword(partitionedByStringForUnparse);\n  if (getClusteredBy() != null) {\n    writer.keyword(\"CLUSTERED BY\");\n    SqlWriter.Frame frame=writer.startList(\"\",\"\");\n    for (    SqlNode clusterByOpts : getClusteredBy().getList()) {\n      clusterByOpts.unparse(writer,leftPrec,rightPrec);\n    }\n    writer.endList(frame);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 170,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 92,
        "startColumnNumber" : 4,
        "endLineNumber" : 92,
        "endColumnNumber" : 31
      },
      "nodeContext" : "writer.sep(\"REPLACE INTO\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 92,
    "startColumnNumber" : 15,
    "endLineNumber" : 92,
    "endColumnNumber" : 29
  } ],
  "layoutRelationDataList" : [ ]
}