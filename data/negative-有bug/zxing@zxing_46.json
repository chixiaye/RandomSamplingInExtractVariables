{
  "id" : 46,
  "expression" : "Boolean.class",
  "projectName" : "zxing@zxing",
  "commitID" : "1b0aed9c091717337b865955f58290450a3a9e3a",
  "filePath" : "/android/src/com/google/zxing/client/android/DecodeHintManager.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Boolean.class",
    "nodeType" : "TypeLiteral",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 157,
      "startColumnNumber" : 41,
      "endLineNumber" : 157,
      "endColumnNumber" : 54
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 157,
        "startColumnNumber" : 10,
        "endLineNumber" : 157,
        "endColumnNumber" : 55
      },
      "nodeContext" : "hintType.getValueType().equals(Boolean.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 620,
        "startLineNumber" : 157,
        "startColumnNumber" : 6,
        "endLineNumber" : 171,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (hintType.getValueType().equals(Boolean.class)) {\n  if (parameterText.isEmpty()) {\n    hints.put(hintType,Boolean.TRUE);\n  }\n else   if (\"0\".equals(parameterText) || \"false\".equalsIgnoreCase(parameterText) || \"no\".equalsIgnoreCase(parameterText)) {\n    hints.put(hintType,Boolean.FALSE);\n  }\n else {\n    hints.put(hintType,Boolean.TRUE);\n  }\n  continue;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 56,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2774,
        "startLineNumber" : 128,
        "startColumnNumber" : 59,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (hintType == DecodeHintType.CHARACTER_SET || hintType == DecodeHintType.NEED_RESULT_POINT_CALLBACK || hintType == DecodeHintType.POSSIBLE_FORMATS) {\n    continue;\n  }\n  String parameterName=hintType.name();\n  String parameterText=parameters.get(parameterName);\n  if (parameterText == null) {\n    continue;\n  }\n  if (hintType.getValueType().equals(Object.class)) {\n    hints.put(hintType,parameterText);\n    continue;\n  }\n  if (hintType.getValueType().equals(Void.class)) {\n    hints.put(hintType,Boolean.TRUE);\n    continue;\n  }\n  if (hintType.getValueType().equals(String.class)) {\n    hints.put(hintType,parameterText);\n    continue;\n  }\n  if (hintType.getValueType().equals(Boolean.class)) {\n    if (parameterText.isEmpty()) {\n      hints.put(hintType,Boolean.TRUE);\n    }\n else     if (\"0\".equals(parameterText) || \"false\".equalsIgnoreCase(parameterText) || \"no\".equalsIgnoreCase(parameterText)) {\n      hints.put(hintType,Boolean.FALSE);\n    }\n else {\n      hints.put(hintType,Boolean.TRUE);\n    }\n    continue;\n  }\n  if (hintType.getValueType().equals(int[].class)) {\n    if (!parameterText.isEmpty() && parameterText.charAt(parameterText.length() - 1) == ',') {\n      parameterText=parameterText.substring(0,parameterText.length() - 1);\n    }\n    String[] values=COMMA.split(parameterText);\n    int[] array=new int[values.length];\n    for (int i=0; i < values.length; i++) {\n      try {\n        array[i]=Integer.parseInt(values[i]);\n      }\n catch (      NumberFormatException ignored) {\n        Log.w(TAG,\"Skipping array of integers hint \" + hintType + \" due to invalid numeric value\");\n        array=null;\n        break;\n      }\n    }\n    if (array != null) {\n      hints.put(hintType,array);\n    }\n    continue;\n  }\n  Log.w(TAG,\"Unsupported hint type '\" + hintType + \"' of type \"+ hintType.getValueType());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 288,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2829,
        "startLineNumber" : 128,
        "startColumnNumber" : 4,
        "endLineNumber" : 195,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (DecodeHintType hintType : DecodeHintType.values()) {\n  if (hintType == DecodeHintType.CHARACTER_SET || hintType == DecodeHintType.NEED_RESULT_POINT_CALLBACK || hintType == DecodeHintType.POSSIBLE_FORMATS) {\n    continue;\n  }\n  String parameterName=hintType.name();\n  String parameterText=parameters.get(parameterName);\n  if (parameterText == null) {\n    continue;\n  }\n  if (hintType.getValueType().equals(Object.class)) {\n    hints.put(hintType,parameterText);\n    continue;\n  }\n  if (hintType.getValueType().equals(Void.class)) {\n    hints.put(hintType,Boolean.TRUE);\n    continue;\n  }\n  if (hintType.getValueType().equals(String.class)) {\n    hints.put(hintType,parameterText);\n    continue;\n  }\n  if (hintType.getValueType().equals(Boolean.class)) {\n    if (parameterText.isEmpty()) {\n      hints.put(hintType,Boolean.TRUE);\n    }\n else     if (\"0\".equals(parameterText) || \"false\".equalsIgnoreCase(parameterText) || \"no\".equalsIgnoreCase(parameterText)) {\n      hints.put(hintType,Boolean.FALSE);\n    }\n else {\n      hints.put(hintType,Boolean.TRUE);\n    }\n    continue;\n  }\n  if (hintType.getValueType().equals(int[].class)) {\n    if (!parameterText.isEmpty() && parameterText.charAt(parameterText.length() - 1) == ',') {\n      parameterText=parameterText.substring(0,parameterText.length() - 1);\n    }\n    String[] values=COMMA.split(parameterText);\n    int[] array=new int[values.length];\n    for (int i=0; i < values.length; i++) {\n      try {\n        array[i]=Integer.parseInt(values[i]);\n      }\n catch (      NumberFormatException ignored) {\n        Log.w(TAG,\"Skipping array of integers hint \" + hintType + \" due to invalid numeric value\");\n        array=null;\n        break;\n      }\n    }\n    if (array != null) {\n      hints.put(hintType,array);\n    }\n    continue;\n  }\n  Log.w(TAG,\"Unsupported hint type '\" + hintType + \"' of type \"+ hintType.getValueType());\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 296,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3150,
        "startLineNumber" : 117,
        "startColumnNumber" : 62,
        "endLineNumber" : 198,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String query=inputUri.getEncodedQuery();\n  if (query == null || query.isEmpty()) {\n    return null;\n  }\n  Map<String,String> parameters=splitQuery(query);\n  Map<DecodeHintType,Object> hints=new EnumMap<>(DecodeHintType.class);\n  for (  DecodeHintType hintType : DecodeHintType.values()) {\n    if (hintType == DecodeHintType.CHARACTER_SET || hintType == DecodeHintType.NEED_RESULT_POINT_CALLBACK || hintType == DecodeHintType.POSSIBLE_FORMATS) {\n      continue;\n    }\n    String parameterName=hintType.name();\n    String parameterText=parameters.get(parameterName);\n    if (parameterText == null) {\n      continue;\n    }\n    if (hintType.getValueType().equals(Object.class)) {\n      hints.put(hintType,parameterText);\n      continue;\n    }\n    if (hintType.getValueType().equals(Void.class)) {\n      hints.put(hintType,Boolean.TRUE);\n      continue;\n    }\n    if (hintType.getValueType().equals(String.class)) {\n      hints.put(hintType,parameterText);\n      continue;\n    }\n    if (hintType.getValueType().equals(Boolean.class)) {\n      if (parameterText.isEmpty()) {\n        hints.put(hintType,Boolean.TRUE);\n      }\n else       if (\"0\".equals(parameterText) || \"false\".equalsIgnoreCase(parameterText) || \"no\".equalsIgnoreCase(parameterText)) {\n        hints.put(hintType,Boolean.FALSE);\n      }\n else {\n        hints.put(hintType,Boolean.TRUE);\n      }\n      continue;\n    }\n    if (hintType.getValueType().equals(int[].class)) {\n      if (!parameterText.isEmpty() && parameterText.charAt(parameterText.length() - 1) == ',') {\n        parameterText=parameterText.substring(0,parameterText.length() - 1);\n      }\n      String[] values=COMMA.split(parameterText);\n      int[] array=new int[values.length];\n      for (int i=0; i < values.length; i++) {\n        try {\n          array[i]=Integer.parseInt(values[i]);\n        }\n catch (        NumberFormatException ignored) {\n          Log.w(TAG,\"Skipping array of integers hint \" + hintType + \" due to invalid numeric value\");\n          array=null;\n          break;\n        }\n      }\n      if (array != null) {\n        hints.put(hintType,array);\n      }\n      continue;\n    }\n    Log.w(TAG,\"Unsupported hint type '\" + hintType + \"' of type \"+ hintType.getValueType());\n  }\n  return hints;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 348,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3210,
        "startLineNumber" : 117,
        "startColumnNumber" : 2,
        "endLineNumber" : 198,
        "endColumnNumber" : 3
      },
      "nodeContext" : "static Map<DecodeHintType,?> parseDecodeHints(Uri inputUri){\n  String query=inputUri.getEncodedQuery();\n  if (query == null || query.isEmpty()) {\n    return null;\n  }\n  Map<String,String> parameters=splitQuery(query);\n  Map<DecodeHintType,Object> hints=new EnumMap<>(DecodeHintType.class);\n  for (  DecodeHintType hintType : DecodeHintType.values()) {\n    if (hintType == DecodeHintType.CHARACTER_SET || hintType == DecodeHintType.NEED_RESULT_POINT_CALLBACK || hintType == DecodeHintType.POSSIBLE_FORMATS) {\n      continue;\n    }\n    String parameterName=hintType.name();\n    String parameterText=parameters.get(parameterName);\n    if (parameterText == null) {\n      continue;\n    }\n    if (hintType.getValueType().equals(Object.class)) {\n      hints.put(hintType,parameterText);\n      continue;\n    }\n    if (hintType.getValueType().equals(Void.class)) {\n      hints.put(hintType,Boolean.TRUE);\n      continue;\n    }\n    if (hintType.getValueType().equals(String.class)) {\n      hints.put(hintType,parameterText);\n      continue;\n    }\n    if (hintType.getValueType().equals(Boolean.class)) {\n      if (parameterText.isEmpty()) {\n        hints.put(hintType,Boolean.TRUE);\n      }\n else       if (\"0\".equals(parameterText) || \"false\".equalsIgnoreCase(parameterText) || \"no\".equalsIgnoreCase(parameterText)) {\n        hints.put(hintType,Boolean.FALSE);\n      }\n else {\n        hints.put(hintType,Boolean.TRUE);\n      }\n      continue;\n    }\n    if (hintType.getValueType().equals(int[].class)) {\n      if (!parameterText.isEmpty() && parameterText.charAt(parameterText.length() - 1) == ',') {\n        parameterText=parameterText.substring(0,parameterText.length() - 1);\n      }\n      String[] values=COMMA.split(parameterText);\n      int[] array=new int[values.length];\n      for (int i=0; i < values.length; i++) {\n        try {\n          array[i]=Integer.parseInt(values[i]);\n        }\n catch (        NumberFormatException ignored) {\n          Log.w(TAG,\"Skipping array of integers hint \" + hintType + \" due to invalid numeric value\");\n          array=null;\n          break;\n        }\n      }\n      if (array != null) {\n        hints.put(hintType,array);\n      }\n      continue;\n    }\n    Log.w(TAG,\"Unsupported hint type '\" + hintType + \"' of type \"+ hintType.getValueType());\n  }\n  return hints;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 361,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 45,
        "startLineNumber" : 157,
        "startColumnNumber" : 10,
        "endLineNumber" : 157,
        "endColumnNumber" : 55
      },
      "nodeContext" : "hintType.getValueType().equals(Boolean.class)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.lang.Class<java.lang.Boolean>"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 157,
    "startColumnNumber" : 41,
    "endLineNumber" : 157,
    "endColumnNumber" : 54
  } ],
  "layoutRelationDataList" : [ ]
}