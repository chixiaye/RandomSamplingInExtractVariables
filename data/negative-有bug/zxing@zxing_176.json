{
  "id" : 176,
  "expression" : "new ResultPoint(width - points[0].getX() - 1,points[0].getY())",
  "projectName" : "zxing@zxing",
  "commitID" : "1b0aed9c091717337b865955f58290450a3a9e3a",
  "filePath" : "/core/src/main/java/com/google/zxing/oned/OneDReader.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new ResultPoint(width - points[0].getX() - 1,points[0].getY())",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 63,
      "startLineNumber" : 163,
      "startColumnNumber" : 26,
      "endLineNumber" : 163,
      "endColumnNumber" : 89
    },
    "astNodeNumber" : 16,
    "astHeight" : 5,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 163,
        "startColumnNumber" : 14,
        "endLineNumber" : 163,
        "endColumnNumber" : 89
      },
      "nodeContext" : "points[0]=new ResultPoint(width - points[0].getX() - 1,points[0].getY())",
      "nodeType" : "Assignment",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 163,
        "startColumnNumber" : 14,
        "endLineNumber" : 163,
        "endColumnNumber" : 90
      },
      "nodeContext" : "points[0]=new ResultPoint(width - points[0].getX() - 1,points[0].getY());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 21,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 200,
        "startLineNumber" : 162,
        "startColumnNumber" : 32,
        "endLineNumber" : 165,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  points[0]=new ResultPoint(width - points[0].getX() - 1,points[0].getY());\n  points[1]=new ResultPoint(width - points[1].getX() - 1,points[1].getY());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 43,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 220,
        "startLineNumber" : 162,
        "startColumnNumber" : 12,
        "endLineNumber" : 165,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (points != null) {\n  points[0]=new ResultPoint(width - points[0].getX() - 1,points[0].getY());\n  points[1]=new ResultPoint(width - points[1].getX() - 1,points[1].getY());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 47,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 502,
        "startLineNumber" : 157,
        "startColumnNumber" : 28,
        "endLineNumber" : 166,
        "endColumnNumber" : 11
      },
      "nodeContext" : "{\n  result.putMetadata(ResultMetadataType.ORIENTATION,180);\n  ResultPoint[] points=result.getResultPoints();\n  if (points != null) {\n    points[0]=new ResultPoint(width - points[0].getX() - 1,points[0].getY());\n    points[1]=new ResultPoint(width - points[1].getX() - 1,points[1].getY());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 66,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 520,
        "startLineNumber" : 157,
        "startColumnNumber" : 10,
        "endLineNumber" : 166,
        "endColumnNumber" : 11
      },
      "nodeContext" : "if (attempt == 1) {\n  result.putMetadata(ResultMetadataType.ORIENTATION,180);\n  ResultPoint[] points=result.getResultPoints();\n  if (points != null) {\n    points[0]=new ResultPoint(width - points[0].getX() - 1,points[0].getY());\n    points[1]=new ResultPoint(width - points[1].getX() - 1,points[1].getY());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 70,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 699,
        "startLineNumber" : 153,
        "startColumnNumber" : 12,
        "endLineNumber" : 168,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Result result=decodeRow(rowNumber,row,hints);\n  if (attempt == 1) {\n    result.putMetadata(ResultMetadataType.ORIENTATION,180);\n    ResultPoint[] points=result.getResultPoints();\n    if (points != null) {\n      points[0]=new ResultPoint(width - points[0].getX() - 1,points[0].getY());\n      points[1]=new ResultPoint(width - points[1].getX() - 1,points[1].getY());\n    }\n  }\n  return result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 83,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 799,
        "startLineNumber" : 153,
        "startColumnNumber" : 8,
        "endLineNumber" : 170,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  Result result=decodeRow(rowNumber,row,hints);\n  if (attempt == 1) {\n    result.putMetadata(ResultMetadataType.ORIENTATION,180);\n    ResultPoint[] points=result.getResultPoints();\n    if (points != null) {\n      points[0]=new ResultPoint(width - points[0].getX() - 1,points[0].getY());\n      points[1]=new ResultPoint(width - points[1].getX() - 1,points[1].getY());\n    }\n  }\n  return result;\n}\n catch (ReaderException re) {\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 90,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1596,
        "startLineNumber" : 139,
        "startColumnNumber" : 52,
        "endLineNumber" : 171,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  if (attempt == 1) {\n    row.reverse();\n    if (hints != null && hints.containsKey(DecodeHintType.NEED_RESULT_POINT_CALLBACK)) {\n      Map<DecodeHintType,Object> newHints=new EnumMap<>(DecodeHintType.class);\n      newHints.putAll(hints);\n      newHints.remove(DecodeHintType.NEED_RESULT_POINT_CALLBACK);\n      hints=newHints;\n    }\n  }\n  try {\n    Result result=decodeRow(rowNumber,row,hints);\n    if (attempt == 1) {\n      result.putMetadata(ResultMetadataType.ORIENTATION,180);\n      ResultPoint[] points=result.getResultPoints();\n      if (points != null) {\n        points[0]=new ResultPoint(width - points[0].getX() - 1,points[0].getY());\n        points[1]=new ResultPoint(width - points[1].getX() - 1,points[1].getY());\n      }\n    }\n    return result;\n  }\n catch (  ReaderException re) {\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 145,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1642,
        "startLineNumber" : 139,
        "startColumnNumber" : 6,
        "endLineNumber" : 171,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int attempt=0; attempt < 2; attempt++) {\n  if (attempt == 1) {\n    row.reverse();\n    if (hints != null && hints.containsKey(DecodeHintType.NEED_RESULT_POINT_CALLBACK)) {\n      Map<DecodeHintType,Object> newHints=new EnumMap<>(DecodeHintType.class);\n      newHints.putAll(hints);\n      newHints.remove(DecodeHintType.NEED_RESULT_POINT_CALLBACK);\n      hints=newHints;\n    }\n  }\n  try {\n    Result result=decodeRow(rowNumber,row,hints);\n    if (attempt == 1) {\n      result.putMetadata(ResultMetadataType.ORIENTATION,180);\n      ResultPoint[] points=result.getResultPoints();\n      if (points != null) {\n        points[0]=new ResultPoint(width - points[0].getX() - 1,points[0].getY());\n        points[1]=new ResultPoint(width - points[1].getX() - 1,points[1].getY());\n      }\n    }\n    return result;\n  }\n catch (  ReaderException re) {\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 156,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 2426,
        "startLineNumber" : 119,
        "startColumnNumber" : 39,
        "endLineNumber" : 172,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  int rowStepsAboveOrBelow=(x + 1) / 2;\n  boolean isAbove=(x & 0x01) == 0;\n  int rowNumber=middle + rowStep * (isAbove ? rowStepsAboveOrBelow : -rowStepsAboveOrBelow);\n  if (rowNumber < 0 || rowNumber >= height) {\n    break;\n  }\n  try {\n    row=image.getBlackRow(rowNumber,row);\n  }\n catch (  NotFoundException ignored) {\n    continue;\n  }\n  for (int attempt=0; attempt < 2; attempt++) {\n    if (attempt == 1) {\n      row.reverse();\n      if (hints != null && hints.containsKey(DecodeHintType.NEED_RESULT_POINT_CALLBACK)) {\n        Map<DecodeHintType,Object> newHints=new EnumMap<>(DecodeHintType.class);\n        newHints.putAll(hints);\n        newHints.remove(DecodeHintType.NEED_RESULT_POINT_CALLBACK);\n        hints=newHints;\n      }\n    }\n    try {\n      Result result=decodeRow(rowNumber,row,hints);\n      if (attempt == 1) {\n        result.putMetadata(ResultMetadataType.ORIENTATION,180);\n        ResultPoint[] points=result.getResultPoints();\n        if (points != null) {\n          points[0]=new ResultPoint(width - points[0].getX() - 1,points[0].getY());\n          points[1]=new ResultPoint(width - points[1].getX() - 1,points[1].getY());\n        }\n      }\n      return result;\n    }\n catch (    ReaderException re) {\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 218,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2461,
        "startLineNumber" : 119,
        "startColumnNumber" : 4,
        "endLineNumber" : 172,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int x=0; x < maxLines; x++) {\n  int rowStepsAboveOrBelow=(x + 1) / 2;\n  boolean isAbove=(x & 0x01) == 0;\n  int rowNumber=middle + rowStep * (isAbove ? rowStepsAboveOrBelow : -rowStepsAboveOrBelow);\n  if (rowNumber < 0 || rowNumber >= height) {\n    break;\n  }\n  try {\n    row=image.getBlackRow(rowNumber,row);\n  }\n catch (  NotFoundException ignored) {\n    continue;\n  }\n  for (int attempt=0; attempt < 2; attempt++) {\n    if (attempt == 1) {\n      row.reverse();\n      if (hints != null && hints.containsKey(DecodeHintType.NEED_RESULT_POINT_CALLBACK)) {\n        Map<DecodeHintType,Object> newHints=new EnumMap<>(DecodeHintType.class);\n        newHints.putAll(hints);\n        newHints.remove(DecodeHintType.NEED_RESULT_POINT_CALLBACK);\n        hints=newHints;\n      }\n    }\n    try {\n      Result result=decodeRow(rowNumber,row,hints);\n      if (attempt == 1) {\n        result.putMetadata(ResultMetadataType.ORIENTATION,180);\n        ResultPoint[] points=result.getResultPoints();\n        if (points != null) {\n          points[0]=new ResultPoint(width - points[0].getX() - 1,points[0].getY());\n          points[1]=new ResultPoint(width - points[1].getX() - 1,points[1].getY());\n        }\n      }\n      return result;\n    }\n catch (    ReaderException re) {\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 229,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3052,
        "startLineNumber" : 104,
        "startColumnNumber" : 80,
        "endLineNumber" : 175,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int width=image.getWidth();\n  int height=image.getHeight();\n  BitArray row=new BitArray(width);\n  boolean tryHarder=hints != null && hints.containsKey(DecodeHintType.TRY_HARDER);\n  int rowStep=Math.max(1,height >> (tryHarder ? 8 : 5));\n  int maxLines;\n  if (tryHarder) {\n    maxLines=height;\n  }\n else {\n    maxLines=15;\n  }\n  int middle=height / 2;\n  for (int x=0; x < maxLines; x++) {\n    int rowStepsAboveOrBelow=(x + 1) / 2;\n    boolean isAbove=(x & 0x01) == 0;\n    int rowNumber=middle + rowStep * (isAbove ? rowStepsAboveOrBelow : -rowStepsAboveOrBelow);\n    if (rowNumber < 0 || rowNumber >= height) {\n      break;\n    }\n    try {\n      row=image.getBlackRow(rowNumber,row);\n    }\n catch (    NotFoundException ignored) {\n      continue;\n    }\n    for (int attempt=0; attempt < 2; attempt++) {\n      if (attempt == 1) {\n        row.reverse();\n        if (hints != null && hints.containsKey(DecodeHintType.NEED_RESULT_POINT_CALLBACK)) {\n          Map<DecodeHintType,Object> newHints=new EnumMap<>(DecodeHintType.class);\n          newHints.putAll(hints);\n          newHints.remove(DecodeHintType.NEED_RESULT_POINT_CALLBACK);\n          hints=newHints;\n        }\n      }\n      try {\n        Result result=decodeRow(rowNumber,row,hints);\n        if (attempt == 1) {\n          result.putMetadata(ResultMetadataType.ORIENTATION,180);\n          ResultPoint[] points=result.getResultPoints();\n          if (points != null) {\n            points[0]=new ResultPoint(width - points[0].getX() - 1,points[0].getY());\n            points[1]=new ResultPoint(width - points[1].getX() - 1,points[1].getY());\n          }\n        }\n        return result;\n      }\n catch (      ReaderException re) {\n      }\n    }\n  }\n  throw NotFoundException.getNotFoundInstance();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 309,
      "astHeight" : 18
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3984,
        "startLineNumber" : 89,
        "startColumnNumber" : 2,
        "endLineNumber" : 175,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * We're going to examine rows from the middle outward, searching alternately above and below the middle, and farther out each time. rowStep is the number of rows between each successive attempt above and below the middle. So we'd scan row middle, then middle - rowStep, then middle + rowStep, then middle - (2 * rowStep), etc. rowStep is bigger as the image is taller, but is always at least 1. We've somewhat arbitrarily decided that moving up and down by about 1/16 of the image is pretty good; we try more of the image if \"trying harder\".\n * @param image The image to decode\n * @param hints Any hints that were requested\n * @return The contents of the decoded barcode\n * @throws NotFoundException Any spontaneous errors which occur\n */\nprivate Result doDecode(BinaryBitmap image,Map<DecodeHintType,?> hints) throws NotFoundException {\n  int width=image.getWidth();\n  int height=image.getHeight();\n  BitArray row=new BitArray(width);\n  boolean tryHarder=hints != null && hints.containsKey(DecodeHintType.TRY_HARDER);\n  int rowStep=Math.max(1,height >> (tryHarder ? 8 : 5));\n  int maxLines;\n  if (tryHarder) {\n    maxLines=height;\n  }\n else {\n    maxLines=15;\n  }\n  int middle=height / 2;\n  for (int x=0; x < maxLines; x++) {\n    int rowStepsAboveOrBelow=(x + 1) / 2;\n    boolean isAbove=(x & 0x01) == 0;\n    int rowNumber=middle + rowStep * (isAbove ? rowStepsAboveOrBelow : -rowStepsAboveOrBelow);\n    if (rowNumber < 0 || rowNumber >= height) {\n      break;\n    }\n    try {\n      row=image.getBlackRow(rowNumber,row);\n    }\n catch (    NotFoundException ignored) {\n      continue;\n    }\n    for (int attempt=0; attempt < 2; attempt++) {\n      if (attempt == 1) {\n        row.reverse();\n        if (hints != null && hints.containsKey(DecodeHintType.NEED_RESULT_POINT_CALLBACK)) {\n          Map<DecodeHintType,Object> newHints=new EnumMap<>(DecodeHintType.class);\n          newHints.putAll(hints);\n          newHints.remove(DecodeHintType.NEED_RESULT_POINT_CALLBACK);\n          hints=newHints;\n        }\n      }\n      try {\n        Result result=decodeRow(rowNumber,row,hints);\n        if (attempt == 1) {\n          result.putMetadata(ResultMetadataType.ORIENTATION,180);\n          ResultPoint[] points=result.getResultPoints();\n          if (points != null) {\n            points[0]=new ResultPoint(width - points[0].getX() - 1,points[0].getY());\n            points[1]=new ResultPoint(width - points[1].getX() - 1,points[1].getY());\n          }\n        }\n        return result;\n      }\n catch (      ReaderException re) {\n      }\n    }\n  }\n  throw NotFoundException.getNotFoundInstance();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 329,
      "astHeight" : 19
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 163,
        "startColumnNumber" : 14,
        "endLineNumber" : 163,
        "endColumnNumber" : 90
      },
      "nodeContext" : "points[0]=new ResultPoint(width - points[0].getX() - 1,points[0].getY());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 21,
      "astHeight" : 7
    },
    "tokenLength" : 11,
    "type" : "com.google.zxing.ResultPoint"
  } ],
  "positionList" : [ {
    "charLength" : 63,
    "startLineNumber" : 163,
    "startColumnNumber" : 26,
    "endLineNumber" : 163,
    "endColumnNumber" : 89
  } ],
  "layoutRelationDataList" : [ ]
}