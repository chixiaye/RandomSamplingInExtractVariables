{
  "id" : 132,
  "expression" : "!hasOutputBuffer()",
  "projectName" : "google@ExoPlayer",
  "commitID" : "4803ab3bd12b71fc32150e96475c0e16aaf6ddc5",
  "filePath" : "/library/core/src/main/java/com/google/android/exoplayer2/mediacodec/MediaCodecRenderer.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "!hasOutputBuffer()",
    "nodeType" : "PrefixExpression",
    "nodePosition" : {
      "charLength" : 18,
      "startLineNumber" : 1750,
      "startColumnNumber" : 8,
      "endLineNumber" : 1750,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2568,
        "startLineNumber" : 1750,
        "startColumnNumber" : 4,
        "endLineNumber" : 1811,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!hasOutputBuffer()) {\n  int outputIndex;\n  if (codecNeedsEosOutputExceptionWorkaround && codecReceivedEos) {\n    try {\n      outputIndex=codec.dequeueOutputBufferIndex(outputBufferInfo);\n    }\n catch (    IllegalStateException e) {\n      processEndOfStream();\n      if (outputStreamEnded) {\n        releaseCodec();\n      }\n      return false;\n    }\n  }\n else {\n    outputIndex=codec.dequeueOutputBufferIndex(outputBufferInfo);\n  }\n  if (outputIndex < 0) {\n    if (outputIndex == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {\n      processOutputMediaFormatChanged();\n      return true;\n    }\n    if (codecNeedsEosPropagation && (inputStreamEnded || codecDrainState == DRAIN_STATE_WAIT_END_OF_STREAM)) {\n      processEndOfStream();\n    }\n    return false;\n  }\n  if (shouldSkipAdaptationWorkaroundOutputBuffer) {\n    shouldSkipAdaptationWorkaroundOutputBuffer=false;\n    codec.releaseOutputBuffer(outputIndex,false);\n    return true;\n  }\n else   if (outputBufferInfo.size == 0 && (outputBufferInfo.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {\n    processEndOfStream();\n    return false;\n  }\n  this.outputIndex=outputIndex;\n  outputBuffer=codec.getOutputBuffer(outputIndex);\n  if (outputBuffer != null) {\n    outputBuffer.position(outputBufferInfo.offset);\n    outputBuffer.limit(outputBufferInfo.offset + outputBufferInfo.size);\n  }\n  if (codecNeedsEosBufferTimestampWorkaround && outputBufferInfo.presentationTimeUs == 0 && (outputBufferInfo.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0 && largestQueuedPresentationTimeUs != C.TIME_UNSET) {\n    outputBufferInfo.presentationTimeUs=largestQueuedPresentationTimeUs;\n  }\n  isDecodeOnlyOutputBuffer=isDecodeOnlyBuffer(outputBufferInfo.presentationTimeUs);\n  isLastOutputBuffer=lastBufferInStreamPresentationTimeUs == outputBufferInfo.presentationTimeUs;\n  updateOutputFormatForTime(outputBufferInfo.presentationTimeUs);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 208,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4158,
        "startLineNumber" : 1749,
        "startColumnNumber" : 34,
        "endLineNumber" : 1864,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (!hasOutputBuffer()) {\n    int outputIndex;\n    if (codecNeedsEosOutputExceptionWorkaround && codecReceivedEos) {\n      try {\n        outputIndex=codec.dequeueOutputBufferIndex(outputBufferInfo);\n      }\n catch (      IllegalStateException e) {\n        processEndOfStream();\n        if (outputStreamEnded) {\n          releaseCodec();\n        }\n        return false;\n      }\n    }\n else {\n      outputIndex=codec.dequeueOutputBufferIndex(outputBufferInfo);\n    }\n    if (outputIndex < 0) {\n      if (outputIndex == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {\n        processOutputMediaFormatChanged();\n        return true;\n      }\n      if (codecNeedsEosPropagation && (inputStreamEnded || codecDrainState == DRAIN_STATE_WAIT_END_OF_STREAM)) {\n        processEndOfStream();\n      }\n      return false;\n    }\n    if (shouldSkipAdaptationWorkaroundOutputBuffer) {\n      shouldSkipAdaptationWorkaroundOutputBuffer=false;\n      codec.releaseOutputBuffer(outputIndex,false);\n      return true;\n    }\n else     if (outputBufferInfo.size == 0 && (outputBufferInfo.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {\n      processEndOfStream();\n      return false;\n    }\n    this.outputIndex=outputIndex;\n    outputBuffer=codec.getOutputBuffer(outputIndex);\n    if (outputBuffer != null) {\n      outputBuffer.position(outputBufferInfo.offset);\n      outputBuffer.limit(outputBufferInfo.offset + outputBufferInfo.size);\n    }\n    if (codecNeedsEosBufferTimestampWorkaround && outputBufferInfo.presentationTimeUs == 0 && (outputBufferInfo.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0 && largestQueuedPresentationTimeUs != C.TIME_UNSET) {\n      outputBufferInfo.presentationTimeUs=largestQueuedPresentationTimeUs;\n    }\n    isDecodeOnlyOutputBuffer=isDecodeOnlyBuffer(outputBufferInfo.presentationTimeUs);\n    isLastOutputBuffer=lastBufferInStreamPresentationTimeUs == outputBufferInfo.presentationTimeUs;\n    updateOutputFormatForTime(outputBufferInfo.presentationTimeUs);\n  }\n  boolean processedOutputBuffer;\n  if (codecNeedsEosOutputExceptionWorkaround && codecReceivedEos) {\n    try {\n      processedOutputBuffer=processOutputBuffer(positionUs,elapsedRealtimeUs,codec,outputBuffer,outputIndex,outputBufferInfo.flags,1,outputBufferInfo.presentationTimeUs,isDecodeOnlyOutputBuffer,isLastOutputBuffer,outputFormat);\n    }\n catch (    IllegalStateException e) {\n      processEndOfStream();\n      if (outputStreamEnded) {\n        releaseCodec();\n      }\n      return false;\n    }\n  }\n else {\n    processedOutputBuffer=processOutputBuffer(positionUs,elapsedRealtimeUs,codec,outputBuffer,outputIndex,outputBufferInfo.flags,1,outputBufferInfo.presentationTimeUs,isDecodeOnlyOutputBuffer,isLastOutputBuffer,outputFormat);\n  }\n  if (processedOutputBuffer) {\n    onProcessedOutputBuffer(outputBufferInfo.presentationTimeUs);\n    boolean isEndOfStream=(outputBufferInfo.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0;\n    resetOutputBuffer();\n    if (!isEndOfStream) {\n      return true;\n    }\n    processEndOfStream();\n  }\n  return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 315,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4427,
        "startLineNumber" : 1744,
        "startColumnNumber" : 2,
        "endLineNumber" : 1864,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * @return Whether it may be possible to drain more output data.\n * @throws ExoPlaybackException If an error occurs draining the output buffer.\n */\nprivate boolean drainOutputBuffer(long positionUs,long elapsedRealtimeUs) throws ExoPlaybackException {\n  if (!hasOutputBuffer()) {\n    int outputIndex;\n    if (codecNeedsEosOutputExceptionWorkaround && codecReceivedEos) {\n      try {\n        outputIndex=codec.dequeueOutputBufferIndex(outputBufferInfo);\n      }\n catch (      IllegalStateException e) {\n        processEndOfStream();\n        if (outputStreamEnded) {\n          releaseCodec();\n        }\n        return false;\n      }\n    }\n else {\n      outputIndex=codec.dequeueOutputBufferIndex(outputBufferInfo);\n    }\n    if (outputIndex < 0) {\n      if (outputIndex == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {\n        processOutputMediaFormatChanged();\n        return true;\n      }\n      if (codecNeedsEosPropagation && (inputStreamEnded || codecDrainState == DRAIN_STATE_WAIT_END_OF_STREAM)) {\n        processEndOfStream();\n      }\n      return false;\n    }\n    if (shouldSkipAdaptationWorkaroundOutputBuffer) {\n      shouldSkipAdaptationWorkaroundOutputBuffer=false;\n      codec.releaseOutputBuffer(outputIndex,false);\n      return true;\n    }\n else     if (outputBufferInfo.size == 0 && (outputBufferInfo.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {\n      processEndOfStream();\n      return false;\n    }\n    this.outputIndex=outputIndex;\n    outputBuffer=codec.getOutputBuffer(outputIndex);\n    if (outputBuffer != null) {\n      outputBuffer.position(outputBufferInfo.offset);\n      outputBuffer.limit(outputBufferInfo.offset + outputBufferInfo.size);\n    }\n    if (codecNeedsEosBufferTimestampWorkaround && outputBufferInfo.presentationTimeUs == 0 && (outputBufferInfo.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0 && largestQueuedPresentationTimeUs != C.TIME_UNSET) {\n      outputBufferInfo.presentationTimeUs=largestQueuedPresentationTimeUs;\n    }\n    isDecodeOnlyOutputBuffer=isDecodeOnlyBuffer(outputBufferInfo.presentationTimeUs);\n    isLastOutputBuffer=lastBufferInStreamPresentationTimeUs == outputBufferInfo.presentationTimeUs;\n    updateOutputFormatForTime(outputBufferInfo.presentationTimeUs);\n  }\n  boolean processedOutputBuffer;\n  if (codecNeedsEosOutputExceptionWorkaround && codecReceivedEos) {\n    try {\n      processedOutputBuffer=processOutputBuffer(positionUs,elapsedRealtimeUs,codec,outputBuffer,outputIndex,outputBufferInfo.flags,1,outputBufferInfo.presentationTimeUs,isDecodeOnlyOutputBuffer,isLastOutputBuffer,outputFormat);\n    }\n catch (    IllegalStateException e) {\n      processEndOfStream();\n      if (outputStreamEnded) {\n        releaseCodec();\n      }\n      return false;\n    }\n  }\n else {\n    processedOutputBuffer=processOutputBuffer(positionUs,elapsedRealtimeUs,codec,outputBuffer,outputIndex,outputBufferInfo.flags,1,outputBufferInfo.presentationTimeUs,isDecodeOnlyOutputBuffer,isLastOutputBuffer,outputFormat);\n  }\n  if (processedOutputBuffer) {\n    onProcessedOutputBuffer(outputBufferInfo.presentationTimeUs);\n    boolean isEndOfStream=(outputBufferInfo.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0;\n    resetOutputBuffer();\n    if (!isEndOfStream) {\n      return true;\n    }\n    processEndOfStream();\n  }\n  return false;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 328,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2568,
        "startLineNumber" : 1750,
        "startColumnNumber" : 4,
        "endLineNumber" : 1811,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (!hasOutputBuffer()) {\n  int outputIndex;\n  if (codecNeedsEosOutputExceptionWorkaround && codecReceivedEos) {\n    try {\n      outputIndex=codec.dequeueOutputBufferIndex(outputBufferInfo);\n    }\n catch (    IllegalStateException e) {\n      processEndOfStream();\n      if (outputStreamEnded) {\n        releaseCodec();\n      }\n      return false;\n    }\n  }\n else {\n    outputIndex=codec.dequeueOutputBufferIndex(outputBufferInfo);\n  }\n  if (outputIndex < 0) {\n    if (outputIndex == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {\n      processOutputMediaFormatChanged();\n      return true;\n    }\n    if (codecNeedsEosPropagation && (inputStreamEnded || codecDrainState == DRAIN_STATE_WAIT_END_OF_STREAM)) {\n      processEndOfStream();\n    }\n    return false;\n  }\n  if (shouldSkipAdaptationWorkaroundOutputBuffer) {\n    shouldSkipAdaptationWorkaroundOutputBuffer=false;\n    codec.releaseOutputBuffer(outputIndex,false);\n    return true;\n  }\n else   if (outputBufferInfo.size == 0 && (outputBufferInfo.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {\n    processEndOfStream();\n    return false;\n  }\n  this.outputIndex=outputIndex;\n  outputBuffer=codec.getOutputBuffer(outputIndex);\n  if (outputBuffer != null) {\n    outputBuffer.position(outputBufferInfo.offset);\n    outputBuffer.limit(outputBufferInfo.offset + outputBufferInfo.size);\n  }\n  if (codecNeedsEosBufferTimestampWorkaround && outputBufferInfo.presentationTimeUs == 0 && (outputBufferInfo.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0 && largestQueuedPresentationTimeUs != C.TIME_UNSET) {\n    outputBufferInfo.presentationTimeUs=largestQueuedPresentationTimeUs;\n  }\n  isDecodeOnlyOutputBuffer=isDecodeOnlyBuffer(outputBufferInfo.presentationTimeUs);\n  isLastOutputBuffer=lastBufferInStreamPresentationTimeUs == outputBufferInfo.presentationTimeUs;\n  updateOutputFormatForTime(outputBufferInfo.presentationTimeUs);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 208,
      "astHeight" : 12
    },
    "tokenLength" : 1,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 18,
    "startLineNumber" : 1750,
    "startColumnNumber" : 8,
    "endLineNumber" : 1750,
    "endColumnNumber" : 26
  } ],
  "layoutRelationDataList" : [ ]
}