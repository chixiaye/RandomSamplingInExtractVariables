{
  "id" : 283,
  "expression" : "getSingleValue(value)",
  "projectName" : "SeleniumHQ@selenium",
  "commitID" : "c146621f39dbec94114835aa1f6af6a0e1fa4cd0",
  "filePath" : "/java/server/src/org/openqa/selenium/grid/config/AnnotatedConfig.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "getSingleValue(value)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 86,
      "startColumnNumber" : 29,
      "endLineNumber" : 86,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 86,
        "startColumnNumber" : 15,
        "endLineNumber" : 86,
        "endColumnNumber" : 50
      },
      "nodeContext" : "singleValue=getSingleValue(value)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 86,
        "startColumnNumber" : 8,
        "endLineNumber" : 86,
        "endColumnNumber" : 51
      },
      "nodeContext" : "String singleValue=getSingleValue(value);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 138,
        "startLineNumber" : 85,
        "startColumnNumber" : 13,
        "endLineNumber" : 90,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  String singleValue=getSingleValue(value);\n  if (singleValue != null) {\n    all.add(singleValue);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 380,
        "startLineNumber" : 78,
        "startColumnNumber" : 6,
        "endLineNumber" : 90,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (value instanceof Collection) {\n  for (  Object o : ((Collection<?>)value)) {\n    String singleValue=getSingleValue(o);\n    if (singleValue != null) {\n      all.add(singleValue);\n    }\n  }\n}\n else {\n  String singleValue=getSingleValue(value);\n  if (singleValue != null) {\n    all.add(singleValue);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 56,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1072,
        "startLineNumber" : 59,
        "startColumnNumber" : 40,
        "endLineNumber" : 91,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (Map.class.isAssignableFrom(field.getType())) {\n    throw new ConfigException(\"Map fields may not be used for configuration: \" + field);\n  }\n  field.setAccessible(true);\n  Object value;\n  try {\n    value=field.get(obj);\n  }\n catch (  IllegalAccessException e) {\n    throw new ConfigException(\"Unable to read field: \" + field);\n  }\n  ConfigValue annotation=field.getAnnotation(ConfigValue.class);\n  Map<String,List<String>> section=values.computeIfAbsent(annotation.section(),str -> new HashMap<>());\n  List<String> all=section.computeIfAbsent(annotation.name(),str -> new LinkedList<>());\n  if (value instanceof Collection) {\n    for (    Object o : ((Collection<?>)value)) {\n      String singleValue=getSingleValue(o);\n      if (singleValue != null) {\n        all.add(singleValue);\n      }\n    }\n  }\n else {\n    String singleValue=getSingleValue(value);\n    if (singleValue != null) {\n      all.add(singleValue);\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 164,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1108,
        "startLineNumber" : 59,
        "startColumnNumber" : 4,
        "endLineNumber" : 91,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Field field : allConfigValues) {\n  if (Map.class.isAssignableFrom(field.getType())) {\n    throw new ConfigException(\"Map fields may not be used for configuration: \" + field);\n  }\n  field.setAccessible(true);\n  Object value;\n  try {\n    value=field.get(obj);\n  }\n catch (  IllegalAccessException e) {\n    throw new ConfigException(\"Unable to read field: \" + field);\n  }\n  ConfigValue annotation=field.getAnnotation(ConfigValue.class);\n  Map<String,List<String>> section=values.computeIfAbsent(annotation.section(),str -> new HashMap<>());\n  List<String> all=section.computeIfAbsent(annotation.name(),str -> new LinkedList<>());\n  if (value instanceof Collection) {\n    for (    Object o : ((Collection<?>)value)) {\n      String singleValue=getSingleValue(o);\n      if (singleValue != null) {\n        all.add(singleValue);\n      }\n    }\n  }\n else {\n    String singleValue=getSingleValue(value);\n    if (singleValue != null) {\n      all.add(singleValue);\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 170,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1323,
        "startLineNumber" : 54,
        "startColumnNumber" : 37,
        "endLineNumber" : 95,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Map<String,Map<String,List<String>>> values=new HashMap<>();\n  Deque<Field> allConfigValues=findConfigFields(obj.getClass());\n  for (  Field field : allConfigValues) {\n    if (Map.class.isAssignableFrom(field.getType())) {\n      throw new ConfigException(\"Map fields may not be used for configuration: \" + field);\n    }\n    field.setAccessible(true);\n    Object value;\n    try {\n      value=field.get(obj);\n    }\n catch (    IllegalAccessException e) {\n      throw new ConfigException(\"Unable to read field: \" + field);\n    }\n    ConfigValue annotation=field.getAnnotation(ConfigValue.class);\n    Map<String,List<String>> section=values.computeIfAbsent(annotation.section(),str -> new HashMap<>());\n    List<String> all=section.computeIfAbsent(annotation.name(),str -> new LinkedList<>());\n    if (value instanceof Collection) {\n      for (      Object o : ((Collection<?>)value)) {\n        String singleValue=getSingleValue(o);\n        if (singleValue != null) {\n          all.add(singleValue);\n        }\n      }\n    }\n else {\n      String singleValue=getSingleValue(value);\n      if (singleValue != null) {\n        all.add(singleValue);\n      }\n    }\n  }\n  this.config=values;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 212,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1358,
        "startLineNumber" : 54,
        "startColumnNumber" : 2,
        "endLineNumber" : 95,
        "endColumnNumber" : 3
      },
      "nodeContext" : "public AnnotatedConfig(Object obj){\n  Map<String,Map<String,List<String>>> values=new HashMap<>();\n  Deque<Field> allConfigValues=findConfigFields(obj.getClass());\n  for (  Field field : allConfigValues) {\n    if (Map.class.isAssignableFrom(field.getType())) {\n      throw new ConfigException(\"Map fields may not be used for configuration: \" + field);\n    }\n    field.setAccessible(true);\n    Object value;\n    try {\n      value=field.get(obj);\n    }\n catch (    IllegalAccessException e) {\n      throw new ConfigException(\"Unable to read field: \" + field);\n    }\n    ConfigValue annotation=field.getAnnotation(ConfigValue.class);\n    Map<String,List<String>> section=values.computeIfAbsent(annotation.section(),str -> new HashMap<>());\n    List<String> all=section.computeIfAbsent(annotation.name(),str -> new LinkedList<>());\n    if (value instanceof Collection) {\n      for (      Object o : ((Collection<?>)value)) {\n        String singleValue=getSingleValue(o);\n        if (singleValue != null) {\n          all.add(singleValue);\n        }\n      }\n    }\n else {\n      String singleValue=getSingleValue(value);\n      if (singleValue != null) {\n        all.add(singleValue);\n      }\n    }\n  }\n  this.config=values;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 219,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 86,
        "startColumnNumber" : 8,
        "endLineNumber" : 86,
        "endColumnNumber" : 51
      },
      "nodeContext" : "String singleValue=getSingleValue(value);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 86,
    "startColumnNumber" : 29,
    "endLineNumber" : 86,
    "endColumnNumber" : 50
  } ],
  "layoutRelationDataList" : [ ]
}