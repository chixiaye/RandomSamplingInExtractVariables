{
  "id" : 378,
  "expression" : "SubnetUtils.SubnetInfo",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/processing/src/main/java/org/apache/druid/query/expression/IPv4AddressMatchExprMacro.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "SubnetUtils.SubnetInfo",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 22,
      "startLineNumber" : 73,
      "startColumnNumber" : 4,
      "endLineNumber" : 73,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,type]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 73,
        "endColumnNumber" : 26
      },
      "nodeContext" : "SubnetUtils.SubnetInfo",
      "nodeType" : "SimpleType",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 73,
        "endColumnNumber" : 60
      },
      "nodeContext" : "SubnetUtils.SubnetInfo subnetInfo=getSubnetInfo(args);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1965,
        "startLineNumber" : 68,
        "startColumnNumber" : 2,
        "endLineNumber" : 137,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (args.size() != 2) {\n    throw new IAE(ExprUtils.createErrMsg(name(),\"must have 2 arguments\"));\n  }\n  SubnetUtils.SubnetInfo subnetInfo=getSubnetInfo(args);\n  Expr arg=args.get(0);\nclass IPv4AddressMatchExpr extends ExprMacroTable.BaseScalarUnivariateMacroFunctionExpr {\n    private final SubnetUtils.SubnetInfo subnetInfo;\n    private IPv4AddressMatchExpr(    Expr arg,    SubnetUtils.SubnetInfo subnetInfo){\n      super(FN_NAME,arg);\n      this.subnetInfo=subnetInfo;\n    }\n    @Nonnull @Override public ExprEval eval(    final ObjectBinding bindings){\n      ExprEval eval=arg.eval(bindings);\n      boolean match;\nswitch (eval.type()) {\ncase STRING:        match=isStringMatch(eval.asString());\n      break;\ncase LONG:    match=!eval.isNumericNull() && isLongMatch(eval.asLong());\n  break;\ndefault:match=false;\n}\nreturn ExprEval.ofLongBoolean(match);\n}\nprivate boolean isStringMatch(String stringValue){\nreturn IPv4AddressExprUtils.isValidAddress(stringValue) && subnetInfo.isInRange(stringValue);\n}\nprivate boolean isLongMatch(long longValue){\nreturn !IPv4AddressExprUtils.overflowsUnsignedInt(longValue) && subnetInfo.isInRange((int)longValue);\n}\n@Override public Expr visit(Shuttle shuttle){\nExpr newArg=arg.visit(shuttle);\nreturn shuttle.visit(new IPv4AddressMatchExpr(newArg,subnetInfo));\n}\n@Nullable @Override public ExprType getOutputType(InputBindingInspector inspector){\nreturn ExprType.LONG;\n}\n@Override public String stringify(){\nreturn StringUtils.format(\"%s(%s, %s)\",FN_NAME,arg.stringify(),args.get(ARG_SUBNET).stringify());\n}\n}\nreturn new IPv4AddressMatchExpr(arg,subnetInfo);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 262,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2020,
        "startLineNumber" : 66,
        "startColumnNumber" : 2,
        "endLineNumber" : 137,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Override public Expr apply(final List<Expr> args){\n  if (args.size() != 2) {\n    throw new IAE(ExprUtils.createErrMsg(name(),\"must have 2 arguments\"));\n  }\n  SubnetUtils.SubnetInfo subnetInfo=getSubnetInfo(args);\n  Expr arg=args.get(0);\nclass IPv4AddressMatchExpr extends ExprMacroTable.BaseScalarUnivariateMacroFunctionExpr {\n    private final SubnetUtils.SubnetInfo subnetInfo;\n    private IPv4AddressMatchExpr(    Expr arg,    SubnetUtils.SubnetInfo subnetInfo){\n      super(FN_NAME,arg);\n      this.subnetInfo=subnetInfo;\n    }\n    @Nonnull @Override public ExprEval eval(    final ObjectBinding bindings){\n      ExprEval eval=arg.eval(bindings);\n      boolean match;\nswitch (eval.type()) {\ncase STRING:        match=isStringMatch(eval.asString());\n      break;\ncase LONG:    match=!eval.isNumericNull() && isLongMatch(eval.asLong());\n  break;\ndefault:match=false;\n}\nreturn ExprEval.ofLongBoolean(match);\n}\nprivate boolean isStringMatch(String stringValue){\nreturn IPv4AddressExprUtils.isValidAddress(stringValue) && subnetInfo.isInRange(stringValue);\n}\nprivate boolean isLongMatch(long longValue){\nreturn !IPv4AddressExprUtils.overflowsUnsignedInt(longValue) && subnetInfo.isInRange((int)longValue);\n}\n@Override public Expr visit(Shuttle shuttle){\nExpr newArg=arg.visit(shuttle);\nreturn shuttle.visit(new IPv4AddressMatchExpr(newArg,subnetInfo));\n}\n@Nullable @Override public ExprType getOutputType(InputBindingInspector inspector){\nreturn ExprType.LONG;\n}\n@Override public String stringify(){\nreturn StringUtils.format(\"%s(%s, %s)\",FN_NAME,arg.stringify(),args.get(ARG_SUBNET).stringify());\n}\n}\nreturn new IPv4AddressMatchExpr(arg,subnetInfo);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 277,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 73,
        "startColumnNumber" : 4,
        "endLineNumber" : 73,
        "endColumnNumber" : 60
      },
      "nodeContext" : "SubnetUtils.SubnetInfo subnetInfo=getSubnetInfo(args);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "SubnetUtils"
  } ],
  "positionList" : [ {
    "charLength" : 22,
    "startLineNumber" : 73,
    "startColumnNumber" : 4,
    "endLineNumber" : 73,
    "endColumnNumber" : 26
  } ],
  "layoutRelationDataList" : [ ]
}