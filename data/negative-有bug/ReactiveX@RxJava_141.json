{
  "id" : 141,
  "expression" : "new Publisher<Event>(){\n  @Override public void subscribe(  final Subscriber<? super Event> observer){\n    observer.onSubscribe(new BooleanSubscription());\n    System.out.println(\"*** Subscribing to EventStream ***\");\n    subscribeCounter.incrementAndGet();\n    new Thread(new Runnable(){\n      @Override public void run(){\n        for (int i=0; i < count; i++) {\n          Event e=new Event();\n          e.source=i % groupCount;\n          e.message=\"Event-\" + i;\n          observer.onNext(e);\n        }\n        observer.onComplete();\n      }\n    }\n).start();\n  }\n}\n",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/test/java/io/reactivex/internal/operators/flowable/FlowableGroupByTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new Publisher<Event>(){\n  @Override public void subscribe(  final Subscriber<? super Event> observer){\n    observer.onSubscribe(new BooleanSubscription());\n    System.out.println(\"*** Subscribing to EventStream ***\");\n    subscribeCounter.incrementAndGet();\n    new Thread(new Runnable(){\n      @Override public void run(){\n        for (int i=0; i < count; i++) {\n          Event e=new Event();\n          e.source=i % groupCount;\n          e.message=\"Event-\" + i;\n          observer.onNext(e);\n        }\n        observer.onComplete();\n      }\n    }\n).start();\n  }\n}\n",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 869,
      "startLineNumber" : 186,
      "startColumnNumber" : 45,
      "endLineNumber" : 209,
      "endColumnNumber" : 9
    },
    "astNodeNumber" : 103,
    "astHeight" : 18,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 886,
        "startLineNumber" : 186,
        "startColumnNumber" : 29,
        "endLineNumber" : 209,
        "endColumnNumber" : 10
      },
      "nodeContext" : "Flowable.create(new Publisher<Event>(){\n  @Override public void subscribe(  final Subscriber<? super Event> observer){\n    observer.onSubscribe(new BooleanSubscription());\n    System.out.println(\"*** Subscribing to EventStream ***\");\n    subscribeCounter.incrementAndGet();\n    new Thread(new Runnable(){\n      @Override public void run(){\n        for (int i=0; i < count; i++) {\n          Event e=new Event();\n          e.source=i % groupCount;\n          e.message=\"Event-\" + i;\n          observer.onNext(e);\n        }\n        observer.onComplete();\n      }\n    }\n).start();\n  }\n}\n)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 106,
      "astHeight" : 19
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 891,
        "startLineNumber" : 186,
        "startColumnNumber" : 24,
        "endLineNumber" : 209,
        "endColumnNumber" : 10
      },
      "nodeContext" : "es=Flowable.create(new Publisher<Event>(){\n  @Override public void subscribe(  final Subscriber<? super Event> observer){\n    observer.onSubscribe(new BooleanSubscription());\n    System.out.println(\"*** Subscribing to EventStream ***\");\n    subscribeCounter.incrementAndGet();\n    new Thread(new Runnable(){\n      @Override public void run(){\n        for (int i=0; i < count; i++) {\n          Event e=new Event();\n          e.source=i % groupCount;\n          e.message=\"Event-\" + i;\n          observer.onNext(e);\n        }\n        observer.onComplete();\n      }\n    }\n).start();\n  }\n}\n)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 108,
      "astHeight" : 20
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 908,
        "startLineNumber" : 186,
        "startColumnNumber" : 8,
        "endLineNumber" : 209,
        "endColumnNumber" : 11
      },
      "nodeContext" : "Flowable<Event> es=Flowable.create(new Publisher<Event>(){\n  @Override public void subscribe(  final Subscriber<? super Event> observer){\n    observer.onSubscribe(new BooleanSubscription());\n    System.out.println(\"*** Subscribing to EventStream ***\");\n    subscribeCounter.incrementAndGet();\n    new Thread(new Runnable(){\n      @Override public void run(){\n        for (int i=0; i < count; i++) {\n          Event e=new Event();\n          e.source=i % groupCount;\n          e.message=\"Event-\" + i;\n          observer.onNext(e);\n        }\n        observer.onComplete();\n      }\n    }\n).start();\n  }\n}\n);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 114,
      "astHeight" : 21
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2870,
        "startLineNumber" : 177,
        "startColumnNumber" : 58,
        "endLineNumber" : 258,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final AtomicInteger eventCounter=new AtomicInteger();\n  final AtomicInteger subscribeCounter=new AtomicInteger();\n  final AtomicInteger groupCounter=new AtomicInteger();\n  final CountDownLatch latch=new CountDownLatch(1);\n  final int count=100;\n  final int groupCount=2;\n  Flowable<Event> es=Flowable.create(new Publisher<Event>(){\n    @Override public void subscribe(    final Subscriber<? super Event> observer){\n      observer.onSubscribe(new BooleanSubscription());\n      System.out.println(\"*** Subscribing to EventStream ***\");\n      subscribeCounter.incrementAndGet();\n      new Thread(new Runnable(){\n        @Override public void run(){\n          for (int i=0; i < count; i++) {\n            Event e=new Event();\n            e.source=i % groupCount;\n            e.message=\"Event-\" + i;\n            observer.onNext(e);\n          }\n          observer.onComplete();\n        }\n      }\n).start();\n    }\n  }\n);\n  es.groupBy(new Function<Event,Integer>(){\n    @Override public Integer apply(    Event e){\n      return e.source;\n    }\n  }\n).flatMap(new Function<GroupedFlowable<Integer,Event>,Flowable<String>>(){\n    @Override public Flowable<String> apply(    GroupedFlowable<Integer,Event> eventGroupedObservable){\n      System.out.println(\"GroupedObservable Key: \" + eventGroupedObservable.getKey());\n      groupCounter.incrementAndGet();\n      return eventGroupedObservable.map(new Function<Event,String>(){\n        @Override public String apply(        Event event){\n          return \"Source: \" + event.source + \"  Message: \"+ event.message;\n        }\n      }\n);\n    }\n  }\n).subscribe(new DefaultObserver<String>(){\n    @Override public void onComplete(){\n      latch.countDown();\n    }\n    @Override public void onError(    Throwable e){\n      e.printStackTrace();\n      latch.countDown();\n    }\n    @Override public void onNext(    String outputMessage){\n      System.out.println(outputMessage);\n      eventCounter.incrementAndGet();\n    }\n  }\n);\n  latch.await(5000,TimeUnit.MILLISECONDS);\n  assertEquals(1,subscribeCounter.get());\n  assertEquals(groupCount,groupCounter.get());\n  assertEquals(count,eventCounter.get());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 372,
      "astHeight" : 22
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3088,
        "startLineNumber" : 171,
        "startColumnNumber" : 4,
        "endLineNumber" : 258,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Assert that only a single subscription to a stream occurs and that all events are received.\n * @throws Throwable\n */\n@Test public void testGroupedEventStream() throws Throwable {\n  final AtomicInteger eventCounter=new AtomicInteger();\n  final AtomicInteger subscribeCounter=new AtomicInteger();\n  final AtomicInteger groupCounter=new AtomicInteger();\n  final CountDownLatch latch=new CountDownLatch(1);\n  final int count=100;\n  final int groupCount=2;\n  Flowable<Event> es=Flowable.create(new Publisher<Event>(){\n    @Override public void subscribe(    final Subscriber<? super Event> observer){\n      observer.onSubscribe(new BooleanSubscription());\n      System.out.println(\"*** Subscribing to EventStream ***\");\n      subscribeCounter.incrementAndGet();\n      new Thread(new Runnable(){\n        @Override public void run(){\n          for (int i=0; i < count; i++) {\n            Event e=new Event();\n            e.source=i % groupCount;\n            e.message=\"Event-\" + i;\n            observer.onNext(e);\n          }\n          observer.onComplete();\n        }\n      }\n).start();\n    }\n  }\n);\n  es.groupBy(new Function<Event,Integer>(){\n    @Override public Integer apply(    Event e){\n      return e.source;\n    }\n  }\n).flatMap(new Function<GroupedFlowable<Integer,Event>,Flowable<String>>(){\n    @Override public Flowable<String> apply(    GroupedFlowable<Integer,Event> eventGroupedObservable){\n      System.out.println(\"GroupedObservable Key: \" + eventGroupedObservable.getKey());\n      groupCounter.incrementAndGet();\n      return eventGroupedObservable.map(new Function<Event,String>(){\n        @Override public String apply(        Event event){\n          return \"Source: \" + event.source + \"  Message: \"+ event.message;\n        }\n      }\n);\n    }\n  }\n).subscribe(new DefaultObserver<String>(){\n    @Override public void onComplete(){\n      latch.countDown();\n    }\n    @Override public void onError(    Throwable e){\n      e.printStackTrace();\n      latch.countDown();\n    }\n    @Override public void onNext(    String outputMessage){\n      System.out.println(outputMessage);\n      eventCounter.incrementAndGet();\n    }\n  }\n);\n  latch.await(5000,TimeUnit.MILLISECONDS);\n  assertEquals(1,subscribeCounter.get());\n  assertEquals(groupCount,groupCounter.get());\n  assertEquals(count,eventCounter.get());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 381,
      "astHeight" : 23
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 908,
        "startLineNumber" : 186,
        "startColumnNumber" : 8,
        "endLineNumber" : 209,
        "endColumnNumber" : 11
      },
      "nodeContext" : "Flowable<Event> es=Flowable.create(new Publisher<Event>(){\n  @Override public void subscribe(  final Subscriber<? super Event> observer){\n    observer.onSubscribe(new BooleanSubscription());\n    System.out.println(\"*** Subscribing to EventStream ***\");\n    subscribeCounter.incrementAndGet();\n    new Thread(new Runnable(){\n      @Override public void run(){\n        for (int i=0; i < count; i++) {\n          Event e=new Event();\n          e.source=i % groupCount;\n          e.message=\"Event-\" + i;\n          observer.onNext(e);\n        }\n        observer.onComplete();\n      }\n    }\n).start();\n  }\n}\n);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 114,
      "astHeight" : 21
    },
    "tokenLength" : 46,
    "type" : ""
  } ],
  "positionList" : [ {
    "charLength" : 869,
    "startLineNumber" : 186,
    "startColumnNumber" : 45,
    "endLineNumber" : 209,
    "endColumnNumber" : 9
  } ],
  "layoutRelationDataList" : [ ]
}