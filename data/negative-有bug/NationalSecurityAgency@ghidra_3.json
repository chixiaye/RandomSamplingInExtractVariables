{
  "id" : 3,
  "expression" : "program.getMemory()",
  "projectName" : "NationalSecurityAgency@ghidra",
  "commitID" : "a54d0e28d652c48502551a88278808549aed5f98",
  "filePath" : "/Ghidra/Features/Base/src/main/java/ghidra/app/util/bin/format/pe/LoadConfigDataDirectory.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "program.getMemory()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 74,
      "startColumnNumber" : 7,
      "endLineNumber" : 74,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 74,
        "startColumnNumber" : 7,
        "endLineNumber" : 74,
        "endColumnNumber" : 41
      },
      "nodeContext" : "program.getMemory().contains(addr)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 74,
        "startColumnNumber" : 6,
        "endLineNumber" : 74,
        "endColumnNumber" : 41
      },
      "nodeContext" : "!program.getMemory().contains(addr)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 74,
        "startColumnNumber" : 2,
        "endLineNumber" : 76,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (!program.getMemory().contains(addr)) {\n  return;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 460,
        "startLineNumber" : 70,
        "startColumnNumber" : 42,
        "endLineNumber" : 83,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  monitor.setMessage(program.getName() + \": load config directory...\");\n  Address addr=PeUtils.getMarkupAddress(program,isBinary,ntHeader,virtualAddress);\n  if (!program.getMemory().contains(addr)) {\n    return;\n  }\n  createDirectoryBookmark(program,addr);\n  PeUtils.createData(program,addr,lcd.toDataType(),log);\n  markupSeHandler(program,isBinary,monitor,log,ntHeader);\n  ControlFlowGuard.markup(lcd,program,log,ntHeader);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 63,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 688,
        "startLineNumber" : 67,
        "startColumnNumber" : 1,
        "endLineNumber" : 83,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public void markup(Program program,boolean isBinary,TaskMonitor monitor,MessageLog log,NTHeader ntHeader) throws DuplicateNameException, CodeUnitInsertionException, DataTypeConflictException, IOException {\n  monitor.setMessage(program.getName() + \": load config directory...\");\n  Address addr=PeUtils.getMarkupAddress(program,isBinary,ntHeader,virtualAddress);\n  if (!program.getMemory().contains(addr)) {\n    return;\n  }\n  createDirectoryBookmark(program,addr);\n  PeUtils.createData(program,addr,lcd.toDataType(),log);\n  markupSeHandler(program,isBinary,monitor,log,ntHeader);\n  ControlFlowGuard.markup(lcd,program,log,ntHeader);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 96,
      "astHeight" : 7
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 74,
        "startColumnNumber" : 6,
        "endLineNumber" : 74,
        "endColumnNumber" : 41
      },
      "nodeContext" : "!program.getMemory().contains(addr)",
      "nodeType" : "PrefixExpression",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "ghidra.program.model.mem.Memory"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 74,
    "startColumnNumber" : 7,
    "endLineNumber" : 74,
    "endColumnNumber" : 26
  } ],
  "layoutRelationDataList" : [ ]
}