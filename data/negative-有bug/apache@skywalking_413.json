{
  "id" : 413,
  "expression" : "httpHost",
  "projectName" : "apache@skywalking",
  "commitID" : "16b51d55baec4f779f312e07081d1397addbcfe9",
  "filePath" : "/apm-sniffer/apm-sdk-plugin/httpClient-4.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/httpClient/v4/HttpClientExecuteInterceptorTest.java",
  "occurrences" : 5,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "httpHost",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 99,
      "startColumnNumber" : 13,
      "endLineNumber" : 99,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 99,
        "startColumnNumber" : 13,
        "endLineNumber" : 99,
        "endColumnNumber" : 35
      },
      "nodeContext" : "httpHost.getHostName()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 99,
        "startColumnNumber" : 8,
        "endLineNumber" : 99,
        "endColumnNumber" : 36
      },
      "nodeContext" : "when(httpHost.getHostName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 52,
        "startLineNumber" : 99,
        "startColumnNumber" : 8,
        "endLineNumber" : 99,
        "endColumnNumber" : 60
      },
      "nodeContext" : "when(httpHost.getHostName()).thenReturn(\"127.0.0.1\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 99,
        "startColumnNumber" : 8,
        "endLineNumber" : 99,
        "endColumnNumber" : 61
      },
      "nodeContext" : "when(httpHost.getHostName()).thenReturn(\"127.0.0.1\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1325,
        "startLineNumber" : 90,
        "startColumnNumber" : 41,
        "endLineNumber" : 128,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ServiceManager.INSTANCE.boot();\n  httpClientExecuteInterceptor=new HttpClientExecuteInterceptor();\n  HttpClientPluginConfig.Plugin.HttpClient.COLLECT_HTTP_PARAMS=true;\n  PowerMockito.mock(HttpHost.class);\n  when(statusLine.getStatusCode()).thenReturn(200);\n  when(httpResponse.getStatusLine()).thenReturn(statusLine);\n  when(httpHost.getHostName()).thenReturn(\"127.0.0.1\");\n  when(httpHost.getSchemeName()).thenReturn(\"http\");\n  when(request.getRequestLine()).thenReturn(new RequestLine(){\n    @Override public String getMethod(){\n      return \"GET\";\n    }\n    @Override public ProtocolVersion getProtocolVersion(){\n      return new ProtocolVersion(\"http\",1,1);\n    }\n    @Override public String getUri(){\n      return \"http://127.0.0.1:8080/test-web/test\";\n    }\n  }\n);\n  when(httpHost.getPort()).thenReturn(8080);\n  when(request.getURI()).thenReturn(new URI(\"http://127.0.0.1:8080/test-web/test?a=1&b=test\"));\n  allArguments=new Object[]{httpHost,request};\n  argumentsType=new Class[]{httpHost.getClass(),request.getClass()};\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 160,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1374,
        "startLineNumber" : 89,
        "startColumnNumber" : 4,
        "endLineNumber" : 128,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Before public void setUp() throws Exception {\n  ServiceManager.INSTANCE.boot();\n  httpClientExecuteInterceptor=new HttpClientExecuteInterceptor();\n  HttpClientPluginConfig.Plugin.HttpClient.COLLECT_HTTP_PARAMS=true;\n  PowerMockito.mock(HttpHost.class);\n  when(statusLine.getStatusCode()).thenReturn(200);\n  when(httpResponse.getStatusLine()).thenReturn(statusLine);\n  when(httpHost.getHostName()).thenReturn(\"127.0.0.1\");\n  when(httpHost.getSchemeName()).thenReturn(\"http\");\n  when(request.getRequestLine()).thenReturn(new RequestLine(){\n    @Override public String getMethod(){\n      return \"GET\";\n    }\n    @Override public ProtocolVersion getProtocolVersion(){\n      return new ProtocolVersion(\"http\",1,1);\n    }\n    @Override public String getUri(){\n      return \"http://127.0.0.1:8080/test-web/test\";\n    }\n  }\n);\n  when(httpHost.getPort()).thenReturn(8080);\n  when(request.getURI()).thenReturn(new URI(\"http://127.0.0.1:8080/test-web/test?a=1&b=test\"));\n  allArguments=new Object[]{httpHost,request};\n  argumentsType=new Class[]{httpHost.getClass(),request.getClass()};\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 168,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 99,
        "startColumnNumber" : 8,
        "endLineNumber" : 99,
        "endColumnNumber" : 61
      },
      "nodeContext" : "when(httpHost.getHostName()).thenReturn(\"127.0.0.1\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.skywalking.apm.plugin.httpClient.v4.HttpHost"
  }, {
    "nodeContext" : "httpHost",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 100,
      "startColumnNumber" : 13,
      "endLineNumber" : 100,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 100,
        "startColumnNumber" : 13,
        "endLineNumber" : 100,
        "endColumnNumber" : 37
      },
      "nodeContext" : "httpHost.getSchemeName()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 100,
        "startColumnNumber" : 8,
        "endLineNumber" : 100,
        "endColumnNumber" : 38
      },
      "nodeContext" : "when(httpHost.getSchemeName())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 49,
        "startLineNumber" : 100,
        "startColumnNumber" : 8,
        "endLineNumber" : 100,
        "endColumnNumber" : 57
      },
      "nodeContext" : "when(httpHost.getSchemeName()).thenReturn(\"http\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 100,
        "startColumnNumber" : 8,
        "endLineNumber" : 100,
        "endColumnNumber" : 58
      },
      "nodeContext" : "when(httpHost.getSchemeName()).thenReturn(\"http\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1325,
        "startLineNumber" : 90,
        "startColumnNumber" : 41,
        "endLineNumber" : 128,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ServiceManager.INSTANCE.boot();\n  httpClientExecuteInterceptor=new HttpClientExecuteInterceptor();\n  HttpClientPluginConfig.Plugin.HttpClient.COLLECT_HTTP_PARAMS=true;\n  PowerMockito.mock(HttpHost.class);\n  when(statusLine.getStatusCode()).thenReturn(200);\n  when(httpResponse.getStatusLine()).thenReturn(statusLine);\n  when(httpHost.getHostName()).thenReturn(\"127.0.0.1\");\n  when(httpHost.getSchemeName()).thenReturn(\"http\");\n  when(request.getRequestLine()).thenReturn(new RequestLine(){\n    @Override public String getMethod(){\n      return \"GET\";\n    }\n    @Override public ProtocolVersion getProtocolVersion(){\n      return new ProtocolVersion(\"http\",1,1);\n    }\n    @Override public String getUri(){\n      return \"http://127.0.0.1:8080/test-web/test\";\n    }\n  }\n);\n  when(httpHost.getPort()).thenReturn(8080);\n  when(request.getURI()).thenReturn(new URI(\"http://127.0.0.1:8080/test-web/test?a=1&b=test\"));\n  allArguments=new Object[]{httpHost,request};\n  argumentsType=new Class[]{httpHost.getClass(),request.getClass()};\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 160,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1374,
        "startLineNumber" : 89,
        "startColumnNumber" : 4,
        "endLineNumber" : 128,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Before public void setUp() throws Exception {\n  ServiceManager.INSTANCE.boot();\n  httpClientExecuteInterceptor=new HttpClientExecuteInterceptor();\n  HttpClientPluginConfig.Plugin.HttpClient.COLLECT_HTTP_PARAMS=true;\n  PowerMockito.mock(HttpHost.class);\n  when(statusLine.getStatusCode()).thenReturn(200);\n  when(httpResponse.getStatusLine()).thenReturn(statusLine);\n  when(httpHost.getHostName()).thenReturn(\"127.0.0.1\");\n  when(httpHost.getSchemeName()).thenReturn(\"http\");\n  when(request.getRequestLine()).thenReturn(new RequestLine(){\n    @Override public String getMethod(){\n      return \"GET\";\n    }\n    @Override public ProtocolVersion getProtocolVersion(){\n      return new ProtocolVersion(\"http\",1,1);\n    }\n    @Override public String getUri(){\n      return \"http://127.0.0.1:8080/test-web/test\";\n    }\n  }\n);\n  when(httpHost.getPort()).thenReturn(8080);\n  when(request.getURI()).thenReturn(new URI(\"http://127.0.0.1:8080/test-web/test?a=1&b=test\"));\n  allArguments=new Object[]{httpHost,request};\n  argumentsType=new Class[]{httpHost.getClass(),request.getClass()};\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 168,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 100,
        "startColumnNumber" : 8,
        "endLineNumber" : 100,
        "endColumnNumber" : 58
      },
      "nodeContext" : "when(httpHost.getSchemeName()).thenReturn(\"http\");\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.skywalking.apm.plugin.httpClient.v4.HttpHost"
  }, {
    "nodeContext" : "httpHost",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 117,
      "startColumnNumber" : 13,
      "endLineNumber" : 117,
      "endColumnNumber" : 21
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 117,
        "startColumnNumber" : 13,
        "endLineNumber" : 117,
        "endColumnNumber" : 31
      },
      "nodeContext" : "httpHost.getPort()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 117,
        "startColumnNumber" : 8,
        "endLineNumber" : 117,
        "endColumnNumber" : 32
      },
      "nodeContext" : "when(httpHost.getPort())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 117,
        "startColumnNumber" : 8,
        "endLineNumber" : 117,
        "endColumnNumber" : 49
      },
      "nodeContext" : "when(httpHost.getPort()).thenReturn(8080)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 117,
        "startColumnNumber" : 8,
        "endLineNumber" : 117,
        "endColumnNumber" : 50
      },
      "nodeContext" : "when(httpHost.getPort()).thenReturn(8080);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1325,
        "startLineNumber" : 90,
        "startColumnNumber" : 41,
        "endLineNumber" : 128,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ServiceManager.INSTANCE.boot();\n  httpClientExecuteInterceptor=new HttpClientExecuteInterceptor();\n  HttpClientPluginConfig.Plugin.HttpClient.COLLECT_HTTP_PARAMS=true;\n  PowerMockito.mock(HttpHost.class);\n  when(statusLine.getStatusCode()).thenReturn(200);\n  when(httpResponse.getStatusLine()).thenReturn(statusLine);\n  when(httpHost.getHostName()).thenReturn(\"127.0.0.1\");\n  when(httpHost.getSchemeName()).thenReturn(\"http\");\n  when(request.getRequestLine()).thenReturn(new RequestLine(){\n    @Override public String getMethod(){\n      return \"GET\";\n    }\n    @Override public ProtocolVersion getProtocolVersion(){\n      return new ProtocolVersion(\"http\",1,1);\n    }\n    @Override public String getUri(){\n      return \"http://127.0.0.1:8080/test-web/test\";\n    }\n  }\n);\n  when(httpHost.getPort()).thenReturn(8080);\n  when(request.getURI()).thenReturn(new URI(\"http://127.0.0.1:8080/test-web/test?a=1&b=test\"));\n  allArguments=new Object[]{httpHost,request};\n  argumentsType=new Class[]{httpHost.getClass(),request.getClass()};\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 160,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1374,
        "startLineNumber" : 89,
        "startColumnNumber" : 4,
        "endLineNumber" : 128,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Before public void setUp() throws Exception {\n  ServiceManager.INSTANCE.boot();\n  httpClientExecuteInterceptor=new HttpClientExecuteInterceptor();\n  HttpClientPluginConfig.Plugin.HttpClient.COLLECT_HTTP_PARAMS=true;\n  PowerMockito.mock(HttpHost.class);\n  when(statusLine.getStatusCode()).thenReturn(200);\n  when(httpResponse.getStatusLine()).thenReturn(statusLine);\n  when(httpHost.getHostName()).thenReturn(\"127.0.0.1\");\n  when(httpHost.getSchemeName()).thenReturn(\"http\");\n  when(request.getRequestLine()).thenReturn(new RequestLine(){\n    @Override public String getMethod(){\n      return \"GET\";\n    }\n    @Override public ProtocolVersion getProtocolVersion(){\n      return new ProtocolVersion(\"http\",1,1);\n    }\n    @Override public String getUri(){\n      return \"http://127.0.0.1:8080/test-web/test\";\n    }\n  }\n);\n  when(httpHost.getPort()).thenReturn(8080);\n  when(request.getURI()).thenReturn(new URI(\"http://127.0.0.1:8080/test-web/test?a=1&b=test\"));\n  allArguments=new Object[]{httpHost,request};\n  argumentsType=new Class[]{httpHost.getClass(),request.getClass()};\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 168,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 117,
        "startColumnNumber" : 8,
        "endLineNumber" : 117,
        "endColumnNumber" : 50
      },
      "nodeContext" : "when(httpHost.getPort()).thenReturn(8080);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.skywalking.apm.plugin.httpClient.v4.HttpHost"
  }, {
    "nodeContext" : "httpHost",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 121,
      "startColumnNumber" : 12,
      "endLineNumber" : 121,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayCreation,initializer]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 120,
        "startColumnNumber" : 36,
        "endLineNumber" : 123,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{httpHost,request}",
      "nodeType" : "ArrayInitializer",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 120,
        "startColumnNumber" : 23,
        "endLineNumber" : 123,
        "endColumnNumber" : 9
      },
      "nodeContext" : "new Object[]{httpHost,request}",
      "nodeType" : "ArrayCreation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 81,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 123,
        "endColumnNumber" : 9
      },
      "nodeContext" : "allArguments=new Object[]{httpHost,request}",
      "nodeType" : "Assignment",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 82,
        "startLineNumber" : 120,
        "startColumnNumber" : 8,
        "endLineNumber" : 123,
        "endColumnNumber" : 10
      },
      "nodeContext" : "allArguments=new Object[]{httpHost,request};\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1325,
        "startLineNumber" : 90,
        "startColumnNumber" : 41,
        "endLineNumber" : 128,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ServiceManager.INSTANCE.boot();\n  httpClientExecuteInterceptor=new HttpClientExecuteInterceptor();\n  HttpClientPluginConfig.Plugin.HttpClient.COLLECT_HTTP_PARAMS=true;\n  PowerMockito.mock(HttpHost.class);\n  when(statusLine.getStatusCode()).thenReturn(200);\n  when(httpResponse.getStatusLine()).thenReturn(statusLine);\n  when(httpHost.getHostName()).thenReturn(\"127.0.0.1\");\n  when(httpHost.getSchemeName()).thenReturn(\"http\");\n  when(request.getRequestLine()).thenReturn(new RequestLine(){\n    @Override public String getMethod(){\n      return \"GET\";\n    }\n    @Override public ProtocolVersion getProtocolVersion(){\n      return new ProtocolVersion(\"http\",1,1);\n    }\n    @Override public String getUri(){\n      return \"http://127.0.0.1:8080/test-web/test\";\n    }\n  }\n);\n  when(httpHost.getPort()).thenReturn(8080);\n  when(request.getURI()).thenReturn(new URI(\"http://127.0.0.1:8080/test-web/test?a=1&b=test\"));\n  allArguments=new Object[]{httpHost,request};\n  argumentsType=new Class[]{httpHost.getClass(),request.getClass()};\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 160,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1374,
        "startLineNumber" : 89,
        "startColumnNumber" : 4,
        "endLineNumber" : 128,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Before public void setUp() throws Exception {\n  ServiceManager.INSTANCE.boot();\n  httpClientExecuteInterceptor=new HttpClientExecuteInterceptor();\n  HttpClientPluginConfig.Plugin.HttpClient.COLLECT_HTTP_PARAMS=true;\n  PowerMockito.mock(HttpHost.class);\n  when(statusLine.getStatusCode()).thenReturn(200);\n  when(httpResponse.getStatusLine()).thenReturn(statusLine);\n  when(httpHost.getHostName()).thenReturn(\"127.0.0.1\");\n  when(httpHost.getSchemeName()).thenReturn(\"http\");\n  when(request.getRequestLine()).thenReturn(new RequestLine(){\n    @Override public String getMethod(){\n      return \"GET\";\n    }\n    @Override public ProtocolVersion getProtocolVersion(){\n      return new ProtocolVersion(\"http\",1,1);\n    }\n    @Override public String getUri(){\n      return \"http://127.0.0.1:8080/test-web/test\";\n    }\n  }\n);\n  when(httpHost.getPort()).thenReturn(8080);\n  when(request.getURI()).thenReturn(new URI(\"http://127.0.0.1:8080/test-web/test?a=1&b=test\"));\n  allArguments=new Object[]{httpHost,request};\n  argumentsType=new Class[]{httpHost.getClass(),request.getClass()};\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 168,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayCreation,initializer]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 120,
        "startColumnNumber" : 36,
        "endLineNumber" : 123,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{httpHost,request}",
      "nodeType" : "ArrayInitializer",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.skywalking.apm.plugin.httpClient.v4.HttpHost"
  }, {
    "nodeContext" : "httpHost",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 8,
      "startLineNumber" : 125,
      "startColumnNumber" : 12,
      "endLineNumber" : 125,
      "endColumnNumber" : 20
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ArrayInitializer,expressions]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 125,
        "startColumnNumber" : 12,
        "endLineNumber" : 125,
        "endColumnNumber" : 31
      },
      "nodeContext" : "httpHost.getClass()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ArrayCreation,initializer]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 124,
        "startColumnNumber" : 36,
        "endLineNumber" : 127,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{httpHost.getClass(),request.getClass()}",
      "nodeType" : "ArrayInitializer",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 124,
        "startColumnNumber" : 24,
        "endLineNumber" : 127,
        "endColumnNumber" : 9
      },
      "nodeContext" : "new Class[]{httpHost.getClass(),request.getClass()}",
      "nodeType" : "ArrayCreation",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 103,
        "startLineNumber" : 124,
        "startColumnNumber" : 8,
        "endLineNumber" : 127,
        "endColumnNumber" : 9
      },
      "nodeContext" : "argumentsType=new Class[]{httpHost.getClass(),request.getClass()}",
      "nodeType" : "Assignment",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 104,
        "startLineNumber" : 124,
        "startColumnNumber" : 8,
        "endLineNumber" : 127,
        "endColumnNumber" : 10
      },
      "nodeContext" : "argumentsType=new Class[]{httpHost.getClass(),request.getClass()};\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1325,
        "startLineNumber" : 90,
        "startColumnNumber" : 41,
        "endLineNumber" : 128,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  ServiceManager.INSTANCE.boot();\n  httpClientExecuteInterceptor=new HttpClientExecuteInterceptor();\n  HttpClientPluginConfig.Plugin.HttpClient.COLLECT_HTTP_PARAMS=true;\n  PowerMockito.mock(HttpHost.class);\n  when(statusLine.getStatusCode()).thenReturn(200);\n  when(httpResponse.getStatusLine()).thenReturn(statusLine);\n  when(httpHost.getHostName()).thenReturn(\"127.0.0.1\");\n  when(httpHost.getSchemeName()).thenReturn(\"http\");\n  when(request.getRequestLine()).thenReturn(new RequestLine(){\n    @Override public String getMethod(){\n      return \"GET\";\n    }\n    @Override public ProtocolVersion getProtocolVersion(){\n      return new ProtocolVersion(\"http\",1,1);\n    }\n    @Override public String getUri(){\n      return \"http://127.0.0.1:8080/test-web/test\";\n    }\n  }\n);\n  when(httpHost.getPort()).thenReturn(8080);\n  when(request.getURI()).thenReturn(new URI(\"http://127.0.0.1:8080/test-web/test?a=1&b=test\"));\n  allArguments=new Object[]{httpHost,request};\n  argumentsType=new Class[]{httpHost.getClass(),request.getClass()};\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 160,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1374,
        "startLineNumber" : 89,
        "startColumnNumber" : 4,
        "endLineNumber" : 128,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Before public void setUp() throws Exception {\n  ServiceManager.INSTANCE.boot();\n  httpClientExecuteInterceptor=new HttpClientExecuteInterceptor();\n  HttpClientPluginConfig.Plugin.HttpClient.COLLECT_HTTP_PARAMS=true;\n  PowerMockito.mock(HttpHost.class);\n  when(statusLine.getStatusCode()).thenReturn(200);\n  when(httpResponse.getStatusLine()).thenReturn(statusLine);\n  when(httpHost.getHostName()).thenReturn(\"127.0.0.1\");\n  when(httpHost.getSchemeName()).thenReturn(\"http\");\n  when(request.getRequestLine()).thenReturn(new RequestLine(){\n    @Override public String getMethod(){\n      return \"GET\";\n    }\n    @Override public ProtocolVersion getProtocolVersion(){\n      return new ProtocolVersion(\"http\",1,1);\n    }\n    @Override public String getUri(){\n      return \"http://127.0.0.1:8080/test-web/test\";\n    }\n  }\n);\n  when(httpHost.getPort()).thenReturn(8080);\n  when(request.getURI()).thenReturn(new URI(\"http://127.0.0.1:8080/test-web/test?a=1&b=test\"));\n  allArguments=new Object[]{httpHost,request};\n  argumentsType=new Class[]{httpHost.getClass(),request.getClass()};\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 168,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.ArrayInitializer,expressions]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 125,
        "startColumnNumber" : 12,
        "endLineNumber" : 125,
        "endColumnNumber" : 31
      },
      "nodeContext" : "httpHost.getClass()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "org.apache.skywalking.apm.plugin.httpClient.v4.HttpHost"
  } ],
  "positionList" : [ {
    "charLength" : 8,
    "startLineNumber" : 99,
    "startColumnNumber" : 13,
    "endLineNumber" : 99,
    "endColumnNumber" : 21
  }, {
    "charLength" : 8,
    "startLineNumber" : 100,
    "startColumnNumber" : 13,
    "endLineNumber" : 100,
    "endColumnNumber" : 21
  }, {
    "charLength" : 8,
    "startLineNumber" : 117,
    "startColumnNumber" : 13,
    "endLineNumber" : 117,
    "endColumnNumber" : 21
  }, {
    "charLength" : 8,
    "startLineNumber" : 121,
    "startColumnNumber" : 12,
    "endLineNumber" : 121,
    "endColumnNumber" : 20
  }, {
    "charLength" : 8,
    "startLineNumber" : 125,
    "startColumnNumber" : 12,
    "endLineNumber" : 125,
    "endColumnNumber" : 20
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 5
  } ]
}