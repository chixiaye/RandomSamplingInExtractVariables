{
  "id" : 49,
  "expression" : "12",
  "projectName" : "openzipkin@zipkin",
  "commitID" : "f02a993656f506277ca83737ddf494ed45fde4b3",
  "filePath" : "/zipkin-transports/kafka/src/main/java/zipkin/kafka/KafkaStreamProcessor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "12",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 2,
      "startLineNumber" : 80,
      "startColumnNumber" : 27,
      "endLineNumber" : 80,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 80,
        "startColumnNumber" : 15,
        "endLineNumber" : 80,
        "endColumnNumber" : 29
      },
      "nodeContext" : "bytes[0] == 12",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 173,
        "startLineNumber" : 80,
        "startColumnNumber" : 11,
        "endLineNumber" : 84,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (bytes[0] == 12) {\n  return Codec.THRIFT.readSpans(bytes);\n}\n else {\n  return Collections.singletonList(Codec.THRIFT.readSpan(bytes));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 249,
        "startLineNumber" : 78,
        "startColumnNumber" : 4,
        "endLineNumber" : 84,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (bytes[0] == '[') {\n  return Codec.JSON.readSpans(bytes);\n}\n else if (bytes[0] == 12) {\n  return Codec.THRIFT.readSpans(bytes);\n}\n else {\n  return Collections.singletonList(Codec.THRIFT.readSpan(bytes));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 39,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 859,
        "startLineNumber" : 68,
        "startColumnNumber" : 44,
        "endLineNumber" : 85,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  if (bytes[0] == '[') {\n    return Codec.JSON.readSpans(bytes);\n  }\n else   if (bytes[0] == 12) {\n    return Codec.THRIFT.readSpans(bytes);\n  }\n else {\n    return Collections.singletonList(Codec.THRIFT.readSpan(bytes));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 40,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1022,
        "startLineNumber" : 64,
        "startColumnNumber" : 2,
        "endLineNumber" : 85,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Conditionally decodes depending on whether the input bytes are encoded as a single span or a list.\n */\nstatic List<Span> fromBytes(byte[] bytes){\n  if (bytes[0] == '[') {\n    return Codec.JSON.readSpans(bytes);\n  }\n else   if (bytes[0] == 12) {\n    return Codec.THRIFT.readSpans(bytes);\n  }\n else {\n    return Collections.singletonList(Codec.THRIFT.readSpan(bytes));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 54,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 14,
        "startLineNumber" : 80,
        "startColumnNumber" : 15,
        "endLineNumber" : 80,
        "endColumnNumber" : 29
      },
      "nodeContext" : "bytes[0] == 12",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 2,
    "startLineNumber" : 80,
    "startColumnNumber" : 27,
    "endLineNumber" : 80,
    "endColumnNumber" : 29
  } ],
  "layoutRelationDataList" : [ ]
}