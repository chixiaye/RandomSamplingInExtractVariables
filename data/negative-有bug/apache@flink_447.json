{
  "id" : 447,
  "expression" : "deserializedWatermarkStrategy.createWatermarkGenerator(() -> consumerMetricGroup)",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-connectors/flink-connector-kafka/src/main/java/org/apache/flink/streaming/connectors/kafka/internals/AbstractFetcher.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "deserializedWatermarkStrategy.createWatermarkGenerator(() -> consumerMetricGroup)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 130,
      "startLineNumber" : 438,
      "startColumnNumber" : 40,
      "endLineNumber" : 439,
      "endColumnNumber" : 74
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 627,
        "startLineNumber" : 433,
        "startColumnNumber" : 32,
        "endLineNumber" : 441,
        "endColumnNumber" : 55
      },
      "nodeContext" : "new KafkaTopicPartitionStateWithWatermarkGenerator<>(partitionEntry.getKey(),kafkaHandle,deserializedWatermarkStrategy.createTimestampAssigner(() -> consumerMetricGroup),deserializedWatermarkStrategy.createWatermarkGenerator(() -> consumerMetricGroup),immediateOutput,deferredOutput)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 20,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 676,
        "startLineNumber" : 432,
        "startColumnNumber" : 79,
        "endLineNumber" : 441,
        "endColumnNumber" : 55
      },
      "nodeContext" : "partitionState=new KafkaTopicPartitionStateWithWatermarkGenerator<>(partitionEntry.getKey(),kafkaHandle,deserializedWatermarkStrategy.createTimestampAssigner(() -> consumerMetricGroup),deserializedWatermarkStrategy.createWatermarkGenerator(() -> consumerMetricGroup),immediateOutput,deferredOutput)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 22,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 732,
        "startLineNumber" : 432,
        "startColumnNumber" : 24,
        "endLineNumber" : 441,
        "endColumnNumber" : 56
      },
      "nodeContext" : "KafkaTopicPartitionStateWithWatermarkGenerator<T,KPH> partitionState=new KafkaTopicPartitionStateWithWatermarkGenerator<>(partitionEntry.getKey(),kafkaHandle,deserializedWatermarkStrategy.createTimestampAssigner(() -> consumerMetricGroup),deserializedWatermarkStrategy.createWatermarkGenerator(() -> consumerMetricGroup),immediateOutput,deferredOutput);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 30,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 1984,
        "startLineNumber" : 415,
        "startColumnNumber" : 67,
        "endLineNumber" : 446,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  final KafkaTopicPartition kafkaTopicPartition=partitionEntry.getKey();\n  KPH kafkaHandle=createKafkaPartitionHandle(kafkaTopicPartition);\n  WatermarkStrategy<T> deserializedWatermarkStrategy=watermarkStrategy.deserializeValue(userCodeClassLoader);\n  final String partitionId=kafkaTopicPartition.getTopic() + '-' + kafkaTopicPartition.getPartition();\n  watermarkOutputMultiplexer.registerNewOutput(partitionId);\n  WatermarkOutput immediateOutput=watermarkOutputMultiplexer.getImmediateOutput(partitionId);\n  WatermarkOutput deferredOutput=watermarkOutputMultiplexer.getDeferredOutput(partitionId);\n  KafkaTopicPartitionStateWithWatermarkGenerator<T,KPH> partitionState=new KafkaTopicPartitionStateWithWatermarkGenerator<>(partitionEntry.getKey(),kafkaHandle,deserializedWatermarkStrategy.createTimestampAssigner(() -> consumerMetricGroup),deserializedWatermarkStrategy.createWatermarkGenerator(() -> consumerMetricGroup),immediateOutput,deferredOutput);\n  partitionState.setOffset(partitionEntry.getValue());\n  partitionStates.add(partitionState);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 109,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2110,
        "startLineNumber" : 414,
        "startColumnNumber" : 20,
        "endLineNumber" : 446,
        "endColumnNumber" : 21
      },
      "nodeContext" : "for (Map.Entry<KafkaTopicPartition,Long> partitionEntry : partitionsToInitialOffsets.entrySet()) {\n  final KafkaTopicPartition kafkaTopicPartition=partitionEntry.getKey();\n  KPH kafkaHandle=createKafkaPartitionHandle(kafkaTopicPartition);\n  WatermarkStrategy<T> deserializedWatermarkStrategy=watermarkStrategy.deserializeValue(userCodeClassLoader);\n  final String partitionId=kafkaTopicPartition.getTopic() + '-' + kafkaTopicPartition.getPartition();\n  watermarkOutputMultiplexer.registerNewOutput(partitionId);\n  WatermarkOutput immediateOutput=watermarkOutputMultiplexer.getImmediateOutput(partitionId);\n  WatermarkOutput deferredOutput=watermarkOutputMultiplexer.getDeferredOutput(partitionId);\n  KafkaTopicPartitionStateWithWatermarkGenerator<T,KPH> partitionState=new KafkaTopicPartitionStateWithWatermarkGenerator<>(partitionEntry.getKey(),kafkaHandle,deserializedWatermarkStrategy.createTimestampAssigner(() -> consumerMetricGroup),deserializedWatermarkStrategy.createWatermarkGenerator(() -> consumerMetricGroup),immediateOutput,deferredOutput);\n  partitionState.setOffset(partitionEntry.getValue());\n  partitionStates.add(partitionState);\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 124,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 2195,
        "startLineNumber" : 413,
        "startColumnNumber" : 16,
        "endLineNumber" : 449,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  for (  Map.Entry<KafkaTopicPartition,Long> partitionEntry : partitionsToInitialOffsets.entrySet()) {\n    final KafkaTopicPartition kafkaTopicPartition=partitionEntry.getKey();\n    KPH kafkaHandle=createKafkaPartitionHandle(kafkaTopicPartition);\n    WatermarkStrategy<T> deserializedWatermarkStrategy=watermarkStrategy.deserializeValue(userCodeClassLoader);\n    final String partitionId=kafkaTopicPartition.getTopic() + '-' + kafkaTopicPartition.getPartition();\n    watermarkOutputMultiplexer.registerNewOutput(partitionId);\n    WatermarkOutput immediateOutput=watermarkOutputMultiplexer.getImmediateOutput(partitionId);\n    WatermarkOutput deferredOutput=watermarkOutputMultiplexer.getDeferredOutput(partitionId);\n    KafkaTopicPartitionStateWithWatermarkGenerator<T,KPH> partitionState=new KafkaTopicPartitionStateWithWatermarkGenerator<>(partitionEntry.getKey(),kafkaHandle,deserializedWatermarkStrategy.createTimestampAssigner(() -> consumerMetricGroup),deserializedWatermarkStrategy.createWatermarkGenerator(() -> consumerMetricGroup),immediateOutput,deferredOutput);\n    partitionState.setOffset(partitionEntry.getValue());\n    partitionStates.add(partitionState);\n  }\n  return partitionStates;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 127,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 3260,
        "startLineNumber" : 393,
        "startColumnNumber" : 8,
        "endLineNumber" : 454,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (timestampWatermarkMode) {\ncase NO_TIMESTAMPS_WATERMARKS:{\n    for (    Map.Entry<KafkaTopicPartition,Long> partitionEntry : partitionsToInitialOffsets.entrySet()) {\n      KPH kafkaHandle=createKafkaPartitionHandle(partitionEntry.getKey());\n      KafkaTopicPartitionState<T,KPH> partitionState=new KafkaTopicPartitionState<>(partitionEntry.getKey(),kafkaHandle);\n      partitionState.setOffset(partitionEntry.getValue());\n      partitionStates.add(partitionState);\n    }\n    return partitionStates;\n  }\ncase WITH_WATERMARK_GENERATOR:{\n  for (  Map.Entry<KafkaTopicPartition,Long> partitionEntry : partitionsToInitialOffsets.entrySet()) {\n    final KafkaTopicPartition kafkaTopicPartition=partitionEntry.getKey();\n    KPH kafkaHandle=createKafkaPartitionHandle(kafkaTopicPartition);\n    WatermarkStrategy<T> deserializedWatermarkStrategy=watermarkStrategy.deserializeValue(userCodeClassLoader);\n    final String partitionId=kafkaTopicPartition.getTopic() + '-' + kafkaTopicPartition.getPartition();\n    watermarkOutputMultiplexer.registerNewOutput(partitionId);\n    WatermarkOutput immediateOutput=watermarkOutputMultiplexer.getImmediateOutput(partitionId);\n    WatermarkOutput deferredOutput=watermarkOutputMultiplexer.getDeferredOutput(partitionId);\n    KafkaTopicPartitionStateWithWatermarkGenerator<T,KPH> partitionState=new KafkaTopicPartitionStateWithWatermarkGenerator<>(partitionEntry.getKey(),kafkaHandle,deserializedWatermarkStrategy.createTimestampAssigner(() -> consumerMetricGroup),deserializedWatermarkStrategy.createWatermarkGenerator(() -> consumerMetricGroup),immediateOutput,deferredOutput);\n    partitionState.setOffset(partitionEntry.getValue());\n    partitionStates.add(partitionState);\n  }\n  return partitionStates;\n}\ndefault:throw new RuntimeException();\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 197,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3516,
        "startLineNumber" : 387,
        "startColumnNumber" : 55,
        "endLineNumber" : 455,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  List<KafkaTopicPartitionState<T,KPH>> partitionStates=new CopyOnWriteArrayList<>();\nswitch (timestampWatermarkMode) {\ncase NO_TIMESTAMPS_WATERMARKS:{\n      for (      Map.Entry<KafkaTopicPartition,Long> partitionEntry : partitionsToInitialOffsets.entrySet()) {\n        KPH kafkaHandle=createKafkaPartitionHandle(partitionEntry.getKey());\n        KafkaTopicPartitionState<T,KPH> partitionState=new KafkaTopicPartitionState<>(partitionEntry.getKey(),kafkaHandle);\n        partitionState.setOffset(partitionEntry.getValue());\n        partitionStates.add(partitionState);\n      }\n      return partitionStates;\n    }\ncase WITH_WATERMARK_GENERATOR:{\n    for (    Map.Entry<KafkaTopicPartition,Long> partitionEntry : partitionsToInitialOffsets.entrySet()) {\n      final KafkaTopicPartition kafkaTopicPartition=partitionEntry.getKey();\n      KPH kafkaHandle=createKafkaPartitionHandle(kafkaTopicPartition);\n      WatermarkStrategy<T> deserializedWatermarkStrategy=watermarkStrategy.deserializeValue(userCodeClassLoader);\n      final String partitionId=kafkaTopicPartition.getTopic() + '-' + kafkaTopicPartition.getPartition();\n      watermarkOutputMultiplexer.registerNewOutput(partitionId);\n      WatermarkOutput immediateOutput=watermarkOutputMultiplexer.getImmediateOutput(partitionId);\n      WatermarkOutput deferredOutput=watermarkOutputMultiplexer.getDeferredOutput(partitionId);\n      KafkaTopicPartitionStateWithWatermarkGenerator<T,KPH> partitionState=new KafkaTopicPartitionStateWithWatermarkGenerator<>(partitionEntry.getKey(),kafkaHandle,deserializedWatermarkStrategy.createTimestampAssigner(() -> consumerMetricGroup),deserializedWatermarkStrategy.createWatermarkGenerator(() -> consumerMetricGroup),immediateOutput,deferredOutput);\n      partitionState.setOffset(partitionEntry.getValue());\n      partitionStates.add(partitionState);\n    }\n    return partitionStates;\n  }\ndefault:throw new RuntimeException();\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 215,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4041,
        "startLineNumber" : 378,
        "startColumnNumber" : 4,
        "endLineNumber" : 455,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Utility method that takes the topic partitions and creates the topic partition state holders, depending on the timestamp / watermark mode.\n */\nprivate List<KafkaTopicPartitionState<T,KPH>> createPartitionStateHolders(Map<KafkaTopicPartition,Long> partitionsToInitialOffsets,int timestampWatermarkMode,SerializedValue<WatermarkStrategy<T>> watermarkStrategy,ClassLoader userCodeClassLoader) throws IOException, ClassNotFoundException {\n  List<KafkaTopicPartitionState<T,KPH>> partitionStates=new CopyOnWriteArrayList<>();\nswitch (timestampWatermarkMode) {\ncase NO_TIMESTAMPS_WATERMARKS:{\n      for (      Map.Entry<KafkaTopicPartition,Long> partitionEntry : partitionsToInitialOffsets.entrySet()) {\n        KPH kafkaHandle=createKafkaPartitionHandle(partitionEntry.getKey());\n        KafkaTopicPartitionState<T,KPH> partitionState=new KafkaTopicPartitionState<>(partitionEntry.getKey(),kafkaHandle);\n        partitionState.setOffset(partitionEntry.getValue());\n        partitionStates.add(partitionState);\n      }\n      return partitionStates;\n    }\ncase WITH_WATERMARK_GENERATOR:{\n    for (    Map.Entry<KafkaTopicPartition,Long> partitionEntry : partitionsToInitialOffsets.entrySet()) {\n      final KafkaTopicPartition kafkaTopicPartition=partitionEntry.getKey();\n      KPH kafkaHandle=createKafkaPartitionHandle(kafkaTopicPartition);\n      WatermarkStrategy<T> deserializedWatermarkStrategy=watermarkStrategy.deserializeValue(userCodeClassLoader);\n      final String partitionId=kafkaTopicPartition.getTopic() + '-' + kafkaTopicPartition.getPartition();\n      watermarkOutputMultiplexer.registerNewOutput(partitionId);\n      WatermarkOutput immediateOutput=watermarkOutputMultiplexer.getImmediateOutput(partitionId);\n      WatermarkOutput deferredOutput=watermarkOutputMultiplexer.getDeferredOutput(partitionId);\n      KafkaTopicPartitionStateWithWatermarkGenerator<T,KPH> partitionState=new KafkaTopicPartitionStateWithWatermarkGenerator<>(partitionEntry.getKey(),kafkaHandle,deserializedWatermarkStrategy.createTimestampAssigner(() -> consumerMetricGroup),deserializedWatermarkStrategy.createWatermarkGenerator(() -> consumerMetricGroup),immediateOutput,deferredOutput);\n      partitionState.setOffset(partitionEntry.getValue());\n      partitionStates.add(partitionState);\n    }\n    return partitionStates;\n  }\ndefault:throw new RuntimeException();\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 259,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 627,
        "startLineNumber" : 433,
        "startColumnNumber" : 32,
        "endLineNumber" : 441,
        "endColumnNumber" : 55
      },
      "nodeContext" : "new KafkaTopicPartitionStateWithWatermarkGenerator<>(partitionEntry.getKey(),kafkaHandle,deserializedWatermarkStrategy.createTimestampAssigner(() -> consumerMetricGroup),deserializedWatermarkStrategy.createWatermarkGenerator(() -> consumerMetricGroup),immediateOutput,deferredOutput)",
      "nodeType" : "ClassInstanceCreation",
      "astNodeNumber" : 20,
      "astHeight" : 4
    },
    "tokenLength" : 4,
    "type" : "org.apache.flink.api.common.eventtime.WatermarkGenerator<T>"
  } ],
  "positionList" : [ {
    "charLength" : 130,
    "startLineNumber" : 438,
    "startColumnNumber" : 40,
    "endLineNumber" : 439,
    "endColumnNumber" : 74
  } ],
  "layoutRelationDataList" : [ ]
}