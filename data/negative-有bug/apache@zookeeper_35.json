{
  "id" : 35,
  "expression" : "Long.toHexString(request.sessionId)",
  "projectName" : "apache@zookeeper",
  "commitID" : "c6639c9842973a7954c8baa412d6825cb833d51f",
  "filePath" : "/src/java/main/org/apache/zookeeper/server/PrepRequestProcessor.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Long.toHexString(request.sessionId)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 35,
      "startLineNumber" : 345,
      "startColumnNumber" : 26,
      "endLineNumber" : 345,
      "endColumnNumber" : 61
    },
    "astNodeNumber" : 6,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 112,
        "startLineNumber" : 344,
        "startColumnNumber" : 25,
        "endLineNumber" : 345,
        "endColumnNumber" : 61
      },
      "nodeContext" : "\"Processed session termination request for id: 0x\" + Long.toHexString(request.sessionId)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 122,
        "startLineNumber" : 344,
        "startColumnNumber" : 16,
        "endLineNumber" : 345,
        "endColumnNumber" : 62
      },
      "nodeContext" : "LOG.info(\"Processed session termination request for id: 0x\" + Long.toHexString(request.sessionId))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 123,
        "startLineNumber" : 344,
        "startColumnNumber" : 16,
        "endLineNumber" : 345,
        "endColumnNumber" : 63
      },
      "nodeContext" : "LOG.info(\"Processed session termination request for id: 0x\" + Long.toHexString(request.sessionId));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 9061,
        "startLineNumber" : 182,
        "startColumnNumber" : 12,
        "endLineNumber" : 355,
        "endColumnNumber" : 13
      },
      "nodeContext" : "switch (request.type) {\ncase OpCode.create:  txnHeader=new TxnHeader(request.sessionId,request.cxid,zks.getNextZxid(),zks.getTime(),OpCode.create);\nzks.sessionTracker.checkSession(request.sessionId);\nCreateRequest createRequest=new CreateRequest();\nZooKeeperServer.byteBuffer2Record(request.request,createRequest);\nString path=createRequest.getPath();\nint lastSlash=path.lastIndexOf('/');\nif (lastSlash == -1 || path.indexOf('\\0') != -1) {\nthrow new KeeperException.BadArgumentsException();\n}\nif (!fixupACL(request.authInfo,createRequest.getAcl())) {\nthrow new KeeperException.InvalidACLException();\n}\nString parentPath=path.substring(0,lastSlash);\nChangeRecord parentRecord=getRecordForPath(parentPath);\ncheckACL(zks,parentRecord.acl,ZooDefs.Perms.CREATE,request.authInfo);\nint parentCVersion=parentRecord.stat.getCversion();\nCreateMode createMode=CreateMode.fromFlag(createRequest.getFlags());\nif (createMode.isSequential()) {\npath=path + String.format(\"%010d\",parentCVersion);\n}\ntry {\nif (getRecordForPath(path) != null) {\nthrow new KeeperException.NodeExistsException();\n}\n}\n catch (KeeperException.NoNodeException e) {\n}\nboolean ephemeralParent=parentRecord.stat.getEphemeralOwner() != 0;\nif (ephemeralParent) {\nthrow new KeeperException.NoChildrenForEphemeralsException();\n}\ntxn=new CreateTxn(path,createRequest.getData(),createRequest.getAcl(),createMode.isEphemeral());\nStatPersisted s=new StatPersisted();\nif (createMode.isEphemeral()) {\ns.setEphemeralOwner(request.sessionId);\n}\nparentRecord=parentRecord.duplicate(txnHeader.getZxid());\nparentRecord.childCount++;\nparentRecord.stat.setCversion(parentRecord.stat.getCversion() + 1);\naddChangeRecord(parentRecord);\naddChangeRecord(new ChangeRecord(txnHeader.getZxid(),path,s,0,createRequest.getAcl()));\nbreak;\ncase OpCode.delete:txnHeader=new TxnHeader(request.sessionId,request.cxid,zks.getNextZxid(),zks.getTime(),OpCode.delete);\nzks.sessionTracker.checkSession(request.sessionId);\nDeleteRequest deleteRequest=new DeleteRequest();\nZooKeeperServer.byteBuffer2Record(request.request,deleteRequest);\npath=deleteRequest.getPath();\nlastSlash=path.lastIndexOf('/');\nif (lastSlash == -1 || path.indexOf('\\0') != -1 || path.equals(\"/\")) {\nthrow new KeeperException.BadArgumentsException();\n}\nparentPath=path.substring(0,lastSlash);\nparentRecord=getRecordForPath(parentPath);\nChangeRecord nodeRecord=getRecordForPath(path);\ncheckACL(zks,parentRecord.acl,ZooDefs.Perms.DELETE,request.authInfo);\nint version=deleteRequest.getVersion();\nif (version != -1 && nodeRecord.stat.getVersion() != version) {\nthrow new KeeperException.BadVersionException();\n}\nif (nodeRecord.childCount > 0) {\nthrow new KeeperException.NotEmptyException();\n}\ntxn=new DeleteTxn(path);\nparentRecord=parentRecord.duplicate(txnHeader.getZxid());\nparentRecord.childCount--;\nparentRecord.stat.setCversion(parentRecord.stat.getCversion() + 1);\naddChangeRecord(parentRecord);\naddChangeRecord(new ChangeRecord(txnHeader.getZxid(),path,null,-1,null));\nbreak;\ncase OpCode.setData:txnHeader=new TxnHeader(request.sessionId,request.cxid,zks.getNextZxid(),zks.getTime(),OpCode.setData);\nzks.sessionTracker.checkSession(request.sessionId);\nSetDataRequest setDataRequest=new SetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,setDataRequest);\npath=setDataRequest.getPath();\nnodeRecord=getRecordForPath(path);\ncheckACL(zks,nodeRecord.acl,ZooDefs.Perms.WRITE,request.authInfo);\nversion=setDataRequest.getVersion();\nint currentVersion=nodeRecord.stat.getVersion();\nif (version != -1 && version != currentVersion) {\nthrow new KeeperException.BadVersionException();\n}\nversion=currentVersion + 1;\ntxn=new SetDataTxn(path,setDataRequest.getData(),version);\nnodeRecord=nodeRecord.duplicate(txnHeader.getZxid());\nnodeRecord.stat.setVersion(version);\naddChangeRecord(nodeRecord);\nbreak;\ncase OpCode.setACL:txnHeader=new TxnHeader(request.sessionId,request.cxid,zks.getNextZxid(),zks.getTime(),OpCode.setACL);\nzks.sessionTracker.checkSession(request.sessionId);\nSetACLRequest setAclRequest=new SetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,setAclRequest);\nif (!fixupACL(request.authInfo,setAclRequest.getAcl())) {\nthrow new KeeperException.InvalidACLException();\n}\npath=setAclRequest.getPath();\nnodeRecord=getRecordForPath(path);\ncheckACL(zks,nodeRecord.acl,ZooDefs.Perms.ADMIN,request.authInfo);\nversion=setAclRequest.getVersion();\ncurrentVersion=nodeRecord.stat.getAversion();\nif (version != -1 && version != currentVersion) {\nthrow new KeeperException.BadVersionException();\n}\nversion=currentVersion + 1;\ntxn=new SetACLTxn(path,setAclRequest.getAcl(),version);\nnodeRecord=nodeRecord.duplicate(txnHeader.getZxid());\nnodeRecord.stat.setAversion(version);\naddChangeRecord(nodeRecord);\nbreak;\ncase OpCode.createSession:txnHeader=new TxnHeader(request.sessionId,request.cxid,zks.getNextZxid(),zks.getTime(),OpCode.createSession);\nrequest.request.rewind();\nint to=request.request.getInt();\ntxn=new CreateSessionTxn(to);\nrequest.request.rewind();\nzks.sessionTracker.addSession(request.sessionId,to);\nbreak;\ncase OpCode.closeSession:txnHeader=new TxnHeader(request.sessionId,request.cxid,zks.getNextZxid(),zks.getTime(),OpCode.closeSession);\nHashSet<String> es=zks.dataTree.getEphemerals(request.sessionId);\nsynchronized (zks.outstandingChanges) {\nfor (ChangeRecord c : zks.outstandingChanges) {\nif (c.stat == null) {\nes.remove(c.path);\n}\n else if (c.stat.getEphemeralOwner() == request.sessionId) {\nes.add(c.path);\n}\n}\nfor (String path2Delete : es) {\naddChangeRecord(new ChangeRecord(txnHeader.getZxid(),path2Delete,null,0,null));\n}\n}\nLOG.info(\"Processed session termination request for id: 0x\" + Long.toHexString(request.sessionId));\nbreak;\ncase OpCode.sync:case OpCode.exists:case OpCode.getData:case OpCode.getACL:case OpCode.getChildren:case OpCode.ping:case OpCode.setWatches:break;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 1040,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 9085,
        "startLineNumber" : 181,
        "startColumnNumber" : 12,
        "endLineNumber" : 356,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\nswitch (request.type) {\ncase OpCode.create:    txnHeader=new TxnHeader(request.sessionId,request.cxid,zks.getNextZxid(),zks.getTime(),OpCode.create);\n  zks.sessionTracker.checkSession(request.sessionId);\nCreateRequest createRequest=new CreateRequest();\nZooKeeperServer.byteBuffer2Record(request.request,createRequest);\nString path=createRequest.getPath();\nint lastSlash=path.lastIndexOf('/');\nif (lastSlash == -1 || path.indexOf('\\0') != -1) {\nthrow new KeeperException.BadArgumentsException();\n}\nif (!fixupACL(request.authInfo,createRequest.getAcl())) {\nthrow new KeeperException.InvalidACLException();\n}\nString parentPath=path.substring(0,lastSlash);\nChangeRecord parentRecord=getRecordForPath(parentPath);\ncheckACL(zks,parentRecord.acl,ZooDefs.Perms.CREATE,request.authInfo);\nint parentCVersion=parentRecord.stat.getCversion();\nCreateMode createMode=CreateMode.fromFlag(createRequest.getFlags());\nif (createMode.isSequential()) {\npath=path + String.format(\"%010d\",parentCVersion);\n}\ntry {\nif (getRecordForPath(path) != null) {\nthrow new KeeperException.NodeExistsException();\n}\n}\n catch (KeeperException.NoNodeException e) {\n}\nboolean ephemeralParent=parentRecord.stat.getEphemeralOwner() != 0;\nif (ephemeralParent) {\nthrow new KeeperException.NoChildrenForEphemeralsException();\n}\ntxn=new CreateTxn(path,createRequest.getData(),createRequest.getAcl(),createMode.isEphemeral());\nStatPersisted s=new StatPersisted();\nif (createMode.isEphemeral()) {\ns.setEphemeralOwner(request.sessionId);\n}\nparentRecord=parentRecord.duplicate(txnHeader.getZxid());\nparentRecord.childCount++;\nparentRecord.stat.setCversion(parentRecord.stat.getCversion() + 1);\naddChangeRecord(parentRecord);\naddChangeRecord(new ChangeRecord(txnHeader.getZxid(),path,s,0,createRequest.getAcl()));\nbreak;\ncase OpCode.delete:txnHeader=new TxnHeader(request.sessionId,request.cxid,zks.getNextZxid(),zks.getTime(),OpCode.delete);\nzks.sessionTracker.checkSession(request.sessionId);\nDeleteRequest deleteRequest=new DeleteRequest();\nZooKeeperServer.byteBuffer2Record(request.request,deleteRequest);\npath=deleteRequest.getPath();\nlastSlash=path.lastIndexOf('/');\nif (lastSlash == -1 || path.indexOf('\\0') != -1 || path.equals(\"/\")) {\nthrow new KeeperException.BadArgumentsException();\n}\nparentPath=path.substring(0,lastSlash);\nparentRecord=getRecordForPath(parentPath);\nChangeRecord nodeRecord=getRecordForPath(path);\ncheckACL(zks,parentRecord.acl,ZooDefs.Perms.DELETE,request.authInfo);\nint version=deleteRequest.getVersion();\nif (version != -1 && nodeRecord.stat.getVersion() != version) {\nthrow new KeeperException.BadVersionException();\n}\nif (nodeRecord.childCount > 0) {\nthrow new KeeperException.NotEmptyException();\n}\ntxn=new DeleteTxn(path);\nparentRecord=parentRecord.duplicate(txnHeader.getZxid());\nparentRecord.childCount--;\nparentRecord.stat.setCversion(parentRecord.stat.getCversion() + 1);\naddChangeRecord(parentRecord);\naddChangeRecord(new ChangeRecord(txnHeader.getZxid(),path,null,-1,null));\nbreak;\ncase OpCode.setData:txnHeader=new TxnHeader(request.sessionId,request.cxid,zks.getNextZxid(),zks.getTime(),OpCode.setData);\nzks.sessionTracker.checkSession(request.sessionId);\nSetDataRequest setDataRequest=new SetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,setDataRequest);\npath=setDataRequest.getPath();\nnodeRecord=getRecordForPath(path);\ncheckACL(zks,nodeRecord.acl,ZooDefs.Perms.WRITE,request.authInfo);\nversion=setDataRequest.getVersion();\nint currentVersion=nodeRecord.stat.getVersion();\nif (version != -1 && version != currentVersion) {\nthrow new KeeperException.BadVersionException();\n}\nversion=currentVersion + 1;\ntxn=new SetDataTxn(path,setDataRequest.getData(),version);\nnodeRecord=nodeRecord.duplicate(txnHeader.getZxid());\nnodeRecord.stat.setVersion(version);\naddChangeRecord(nodeRecord);\nbreak;\ncase OpCode.setACL:txnHeader=new TxnHeader(request.sessionId,request.cxid,zks.getNextZxid(),zks.getTime(),OpCode.setACL);\nzks.sessionTracker.checkSession(request.sessionId);\nSetACLRequest setAclRequest=new SetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,setAclRequest);\nif (!fixupACL(request.authInfo,setAclRequest.getAcl())) {\nthrow new KeeperException.InvalidACLException();\n}\npath=setAclRequest.getPath();\nnodeRecord=getRecordForPath(path);\ncheckACL(zks,nodeRecord.acl,ZooDefs.Perms.ADMIN,request.authInfo);\nversion=setAclRequest.getVersion();\ncurrentVersion=nodeRecord.stat.getAversion();\nif (version != -1 && version != currentVersion) {\nthrow new KeeperException.BadVersionException();\n}\nversion=currentVersion + 1;\ntxn=new SetACLTxn(path,setAclRequest.getAcl(),version);\nnodeRecord=nodeRecord.duplicate(txnHeader.getZxid());\nnodeRecord.stat.setAversion(version);\naddChangeRecord(nodeRecord);\nbreak;\ncase OpCode.createSession:txnHeader=new TxnHeader(request.sessionId,request.cxid,zks.getNextZxid(),zks.getTime(),OpCode.createSession);\nrequest.request.rewind();\nint to=request.request.getInt();\ntxn=new CreateSessionTxn(to);\nrequest.request.rewind();\nzks.sessionTracker.addSession(request.sessionId,to);\nbreak;\ncase OpCode.closeSession:txnHeader=new TxnHeader(request.sessionId,request.cxid,zks.getNextZxid(),zks.getTime(),OpCode.closeSession);\nHashSet<String> es=zks.dataTree.getEphemerals(request.sessionId);\nsynchronized (zks.outstandingChanges) {\nfor (ChangeRecord c : zks.outstandingChanges) {\nif (c.stat == null) {\nes.remove(c.path);\n}\n else if (c.stat.getEphemeralOwner() == request.sessionId) {\nes.add(c.path);\n}\n}\nfor (String path2Delete : es) {\naddChangeRecord(new ChangeRecord(txnHeader.getZxid(),path2Delete,null,0,null));\n}\n}\nLOG.info(\"Processed session termination request for id: 0x\" + Long.toHexString(request.sessionId));\nbreak;\ncase OpCode.sync:case OpCode.exists:case OpCode.getData:case OpCode.getACL:case OpCode.getChildren:case OpCode.ping:case OpCode.setWatches:break;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1041,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 10111,
        "startLineNumber" : 181,
        "startColumnNumber" : 8,
        "endLineNumber" : 382,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\nswitch (request.type) {\ncase OpCode.create:    txnHeader=new TxnHeader(request.sessionId,request.cxid,zks.getNextZxid(),zks.getTime(),OpCode.create);\n  zks.sessionTracker.checkSession(request.sessionId);\nCreateRequest createRequest=new CreateRequest();\nZooKeeperServer.byteBuffer2Record(request.request,createRequest);\nString path=createRequest.getPath();\nint lastSlash=path.lastIndexOf('/');\nif (lastSlash == -1 || path.indexOf('\\0') != -1) {\nthrow new KeeperException.BadArgumentsException();\n}\nif (!fixupACL(request.authInfo,createRequest.getAcl())) {\nthrow new KeeperException.InvalidACLException();\n}\nString parentPath=path.substring(0,lastSlash);\nChangeRecord parentRecord=getRecordForPath(parentPath);\ncheckACL(zks,parentRecord.acl,ZooDefs.Perms.CREATE,request.authInfo);\nint parentCVersion=parentRecord.stat.getCversion();\nCreateMode createMode=CreateMode.fromFlag(createRequest.getFlags());\nif (createMode.isSequential()) {\npath=path + String.format(\"%010d\",parentCVersion);\n}\ntry {\nif (getRecordForPath(path) != null) {\nthrow new KeeperException.NodeExistsException();\n}\n}\n catch (KeeperException.NoNodeException e) {\n}\nboolean ephemeralParent=parentRecord.stat.getEphemeralOwner() != 0;\nif (ephemeralParent) {\nthrow new KeeperException.NoChildrenForEphemeralsException();\n}\ntxn=new CreateTxn(path,createRequest.getData(),createRequest.getAcl(),createMode.isEphemeral());\nStatPersisted s=new StatPersisted();\nif (createMode.isEphemeral()) {\ns.setEphemeralOwner(request.sessionId);\n}\nparentRecord=parentRecord.duplicate(txnHeader.getZxid());\nparentRecord.childCount++;\nparentRecord.stat.setCversion(parentRecord.stat.getCversion() + 1);\naddChangeRecord(parentRecord);\naddChangeRecord(new ChangeRecord(txnHeader.getZxid(),path,s,0,createRequest.getAcl()));\nbreak;\ncase OpCode.delete:txnHeader=new TxnHeader(request.sessionId,request.cxid,zks.getNextZxid(),zks.getTime(),OpCode.delete);\nzks.sessionTracker.checkSession(request.sessionId);\nDeleteRequest deleteRequest=new DeleteRequest();\nZooKeeperServer.byteBuffer2Record(request.request,deleteRequest);\npath=deleteRequest.getPath();\nlastSlash=path.lastIndexOf('/');\nif (lastSlash == -1 || path.indexOf('\\0') != -1 || path.equals(\"/\")) {\nthrow new KeeperException.BadArgumentsException();\n}\nparentPath=path.substring(0,lastSlash);\nparentRecord=getRecordForPath(parentPath);\nChangeRecord nodeRecord=getRecordForPath(path);\ncheckACL(zks,parentRecord.acl,ZooDefs.Perms.DELETE,request.authInfo);\nint version=deleteRequest.getVersion();\nif (version != -1 && nodeRecord.stat.getVersion() != version) {\nthrow new KeeperException.BadVersionException();\n}\nif (nodeRecord.childCount > 0) {\nthrow new KeeperException.NotEmptyException();\n}\ntxn=new DeleteTxn(path);\nparentRecord=parentRecord.duplicate(txnHeader.getZxid());\nparentRecord.childCount--;\nparentRecord.stat.setCversion(parentRecord.stat.getCversion() + 1);\naddChangeRecord(parentRecord);\naddChangeRecord(new ChangeRecord(txnHeader.getZxid(),path,null,-1,null));\nbreak;\ncase OpCode.setData:txnHeader=new TxnHeader(request.sessionId,request.cxid,zks.getNextZxid(),zks.getTime(),OpCode.setData);\nzks.sessionTracker.checkSession(request.sessionId);\nSetDataRequest setDataRequest=new SetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,setDataRequest);\npath=setDataRequest.getPath();\nnodeRecord=getRecordForPath(path);\ncheckACL(zks,nodeRecord.acl,ZooDefs.Perms.WRITE,request.authInfo);\nversion=setDataRequest.getVersion();\nint currentVersion=nodeRecord.stat.getVersion();\nif (version != -1 && version != currentVersion) {\nthrow new KeeperException.BadVersionException();\n}\nversion=currentVersion + 1;\ntxn=new SetDataTxn(path,setDataRequest.getData(),version);\nnodeRecord=nodeRecord.duplicate(txnHeader.getZxid());\nnodeRecord.stat.setVersion(version);\naddChangeRecord(nodeRecord);\nbreak;\ncase OpCode.setACL:txnHeader=new TxnHeader(request.sessionId,request.cxid,zks.getNextZxid(),zks.getTime(),OpCode.setACL);\nzks.sessionTracker.checkSession(request.sessionId);\nSetACLRequest setAclRequest=new SetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,setAclRequest);\nif (!fixupACL(request.authInfo,setAclRequest.getAcl())) {\nthrow new KeeperException.InvalidACLException();\n}\npath=setAclRequest.getPath();\nnodeRecord=getRecordForPath(path);\ncheckACL(zks,nodeRecord.acl,ZooDefs.Perms.ADMIN,request.authInfo);\nversion=setAclRequest.getVersion();\ncurrentVersion=nodeRecord.stat.getAversion();\nif (version != -1 && version != currentVersion) {\nthrow new KeeperException.BadVersionException();\n}\nversion=currentVersion + 1;\ntxn=new SetACLTxn(path,setAclRequest.getAcl(),version);\nnodeRecord=nodeRecord.duplicate(txnHeader.getZxid());\nnodeRecord.stat.setAversion(version);\naddChangeRecord(nodeRecord);\nbreak;\ncase OpCode.createSession:txnHeader=new TxnHeader(request.sessionId,request.cxid,zks.getNextZxid(),zks.getTime(),OpCode.createSession);\nrequest.request.rewind();\nint to=request.request.getInt();\ntxn=new CreateSessionTxn(to);\nrequest.request.rewind();\nzks.sessionTracker.addSession(request.sessionId,to);\nbreak;\ncase OpCode.closeSession:txnHeader=new TxnHeader(request.sessionId,request.cxid,zks.getNextZxid(),zks.getTime(),OpCode.closeSession);\nHashSet<String> es=zks.dataTree.getEphemerals(request.sessionId);\nsynchronized (zks.outstandingChanges) {\nfor (ChangeRecord c : zks.outstandingChanges) {\nif (c.stat == null) {\nes.remove(c.path);\n}\n else if (c.stat.getEphemeralOwner() == request.sessionId) {\nes.add(c.path);\n}\n}\nfor (String path2Delete : es) {\naddChangeRecord(new ChangeRecord(txnHeader.getZxid(),path2Delete,null,0,null));\n}\n}\nLOG.info(\"Processed session termination request for id: 0x\" + Long.toHexString(request.sessionId));\nbreak;\ncase OpCode.sync:case OpCode.exists:case OpCode.getData:case OpCode.getACL:case OpCode.getChildren:case OpCode.ping:case OpCode.setWatches:break;\n}\n}\n catch (KeeperException e) {\nif (txnHeader != null) {\ntxnHeader.setType(OpCode.error);\ntxn=new ErrorTxn(e.code().intValue());\n}\n}\ncatch (Exception e) {\nLOG.error(\"Failed to process \" + request,e);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nif (bb != null) {\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\n}\n else {\nsb.append(\"request buffer is null\");\n}\nLOG.error(\"Dumping request buffer: 0x\" + sb.toString());\nif (txnHeader != null) {\ntxnHeader.setType(OpCode.error);\ntxn=new ErrorTxn(Code.MARSHALLINGERROR.intValue());\n}\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 1165,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 10480,
        "startLineNumber" : 176,
        "startColumnNumber" : 45,
        "endLineNumber" : 387,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TxnHeader txnHeader=null;\n  Record txn=null;\n  try {\nswitch (request.type) {\ncase OpCode.create:      txnHeader=new TxnHeader(request.sessionId,request.cxid,zks.getNextZxid(),zks.getTime(),OpCode.create);\n    zks.sessionTracker.checkSession(request.sessionId);\n  CreateRequest createRequest=new CreateRequest();\nZooKeeperServer.byteBuffer2Record(request.request,createRequest);\nString path=createRequest.getPath();\nint lastSlash=path.lastIndexOf('/');\nif (lastSlash == -1 || path.indexOf('\\0') != -1) {\nthrow new KeeperException.BadArgumentsException();\n}\nif (!fixupACL(request.authInfo,createRequest.getAcl())) {\nthrow new KeeperException.InvalidACLException();\n}\nString parentPath=path.substring(0,lastSlash);\nChangeRecord parentRecord=getRecordForPath(parentPath);\ncheckACL(zks,parentRecord.acl,ZooDefs.Perms.CREATE,request.authInfo);\nint parentCVersion=parentRecord.stat.getCversion();\nCreateMode createMode=CreateMode.fromFlag(createRequest.getFlags());\nif (createMode.isSequential()) {\npath=path + String.format(\"%010d\",parentCVersion);\n}\ntry {\nif (getRecordForPath(path) != null) {\nthrow new KeeperException.NodeExistsException();\n}\n}\n catch (KeeperException.NoNodeException e) {\n}\nboolean ephemeralParent=parentRecord.stat.getEphemeralOwner() != 0;\nif (ephemeralParent) {\nthrow new KeeperException.NoChildrenForEphemeralsException();\n}\ntxn=new CreateTxn(path,createRequest.getData(),createRequest.getAcl(),createMode.isEphemeral());\nStatPersisted s=new StatPersisted();\nif (createMode.isEphemeral()) {\ns.setEphemeralOwner(request.sessionId);\n}\nparentRecord=parentRecord.duplicate(txnHeader.getZxid());\nparentRecord.childCount++;\nparentRecord.stat.setCversion(parentRecord.stat.getCversion() + 1);\naddChangeRecord(parentRecord);\naddChangeRecord(new ChangeRecord(txnHeader.getZxid(),path,s,0,createRequest.getAcl()));\nbreak;\ncase OpCode.delete:txnHeader=new TxnHeader(request.sessionId,request.cxid,zks.getNextZxid(),zks.getTime(),OpCode.delete);\nzks.sessionTracker.checkSession(request.sessionId);\nDeleteRequest deleteRequest=new DeleteRequest();\nZooKeeperServer.byteBuffer2Record(request.request,deleteRequest);\npath=deleteRequest.getPath();\nlastSlash=path.lastIndexOf('/');\nif (lastSlash == -1 || path.indexOf('\\0') != -1 || path.equals(\"/\")) {\nthrow new KeeperException.BadArgumentsException();\n}\nparentPath=path.substring(0,lastSlash);\nparentRecord=getRecordForPath(parentPath);\nChangeRecord nodeRecord=getRecordForPath(path);\ncheckACL(zks,parentRecord.acl,ZooDefs.Perms.DELETE,request.authInfo);\nint version=deleteRequest.getVersion();\nif (version != -1 && nodeRecord.stat.getVersion() != version) {\nthrow new KeeperException.BadVersionException();\n}\nif (nodeRecord.childCount > 0) {\nthrow new KeeperException.NotEmptyException();\n}\ntxn=new DeleteTxn(path);\nparentRecord=parentRecord.duplicate(txnHeader.getZxid());\nparentRecord.childCount--;\nparentRecord.stat.setCversion(parentRecord.stat.getCversion() + 1);\naddChangeRecord(parentRecord);\naddChangeRecord(new ChangeRecord(txnHeader.getZxid(),path,null,-1,null));\nbreak;\ncase OpCode.setData:txnHeader=new TxnHeader(request.sessionId,request.cxid,zks.getNextZxid(),zks.getTime(),OpCode.setData);\nzks.sessionTracker.checkSession(request.sessionId);\nSetDataRequest setDataRequest=new SetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,setDataRequest);\npath=setDataRequest.getPath();\nnodeRecord=getRecordForPath(path);\ncheckACL(zks,nodeRecord.acl,ZooDefs.Perms.WRITE,request.authInfo);\nversion=setDataRequest.getVersion();\nint currentVersion=nodeRecord.stat.getVersion();\nif (version != -1 && version != currentVersion) {\nthrow new KeeperException.BadVersionException();\n}\nversion=currentVersion + 1;\ntxn=new SetDataTxn(path,setDataRequest.getData(),version);\nnodeRecord=nodeRecord.duplicate(txnHeader.getZxid());\nnodeRecord.stat.setVersion(version);\naddChangeRecord(nodeRecord);\nbreak;\ncase OpCode.setACL:txnHeader=new TxnHeader(request.sessionId,request.cxid,zks.getNextZxid(),zks.getTime(),OpCode.setACL);\nzks.sessionTracker.checkSession(request.sessionId);\nSetACLRequest setAclRequest=new SetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,setAclRequest);\nif (!fixupACL(request.authInfo,setAclRequest.getAcl())) {\nthrow new KeeperException.InvalidACLException();\n}\npath=setAclRequest.getPath();\nnodeRecord=getRecordForPath(path);\ncheckACL(zks,nodeRecord.acl,ZooDefs.Perms.ADMIN,request.authInfo);\nversion=setAclRequest.getVersion();\ncurrentVersion=nodeRecord.stat.getAversion();\nif (version != -1 && version != currentVersion) {\nthrow new KeeperException.BadVersionException();\n}\nversion=currentVersion + 1;\ntxn=new SetACLTxn(path,setAclRequest.getAcl(),version);\nnodeRecord=nodeRecord.duplicate(txnHeader.getZxid());\nnodeRecord.stat.setAversion(version);\naddChangeRecord(nodeRecord);\nbreak;\ncase OpCode.createSession:txnHeader=new TxnHeader(request.sessionId,request.cxid,zks.getNextZxid(),zks.getTime(),OpCode.createSession);\nrequest.request.rewind();\nint to=request.request.getInt();\ntxn=new CreateSessionTxn(to);\nrequest.request.rewind();\nzks.sessionTracker.addSession(request.sessionId,to);\nbreak;\ncase OpCode.closeSession:txnHeader=new TxnHeader(request.sessionId,request.cxid,zks.getNextZxid(),zks.getTime(),OpCode.closeSession);\nHashSet<String> es=zks.dataTree.getEphemerals(request.sessionId);\nsynchronized (zks.outstandingChanges) {\nfor (ChangeRecord c : zks.outstandingChanges) {\nif (c.stat == null) {\nes.remove(c.path);\n}\n else if (c.stat.getEphemeralOwner() == request.sessionId) {\nes.add(c.path);\n}\n}\nfor (String path2Delete : es) {\naddChangeRecord(new ChangeRecord(txnHeader.getZxid(),path2Delete,null,0,null));\n}\n}\nLOG.info(\"Processed session termination request for id: 0x\" + Long.toHexString(request.sessionId));\nbreak;\ncase OpCode.sync:case OpCode.exists:case OpCode.getData:case OpCode.getACL:case OpCode.getChildren:case OpCode.ping:case OpCode.setWatches:break;\n}\n}\n catch (KeeperException e) {\nif (txnHeader != null) {\ntxnHeader.setType(OpCode.error);\ntxn=new ErrorTxn(e.code().intValue());\n}\n}\ncatch (Exception e) {\nLOG.error(\"Failed to process \" + request,e);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nif (bb != null) {\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\n}\n else {\nsb.append(\"request buffer is null\");\n}\nLOG.error(\"Dumping request buffer: 0x\" + sb.toString());\nif (txnHeader != null) {\ntxnHeader.setType(OpCode.error);\ntxn=new ErrorTxn(Code.MARSHALLINGERROR.intValue());\n}\n}\nrequest.hdr=txnHeader;\nrequest.txn=txn;\nrequest.zxid=zks.getZxid();\nnextProcessor.processRequest(request);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 1203,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 10749,
        "startLineNumber" : 169,
        "startColumnNumber" : 4,
        "endLineNumber" : 387,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * This method will be called inside the ProcessRequestThread, which is a singleton, so there will be a single thread calling this code.\n * @param request\n */\n@SuppressWarnings(\"unchecked\") protected void pRequest(Request request){\n  TxnHeader txnHeader=null;\n  Record txn=null;\n  try {\nswitch (request.type) {\ncase OpCode.create:      txnHeader=new TxnHeader(request.sessionId,request.cxid,zks.getNextZxid(),zks.getTime(),OpCode.create);\n    zks.sessionTracker.checkSession(request.sessionId);\n  CreateRequest createRequest=new CreateRequest();\nZooKeeperServer.byteBuffer2Record(request.request,createRequest);\nString path=createRequest.getPath();\nint lastSlash=path.lastIndexOf('/');\nif (lastSlash == -1 || path.indexOf('\\0') != -1) {\nthrow new KeeperException.BadArgumentsException();\n}\nif (!fixupACL(request.authInfo,createRequest.getAcl())) {\nthrow new KeeperException.InvalidACLException();\n}\nString parentPath=path.substring(0,lastSlash);\nChangeRecord parentRecord=getRecordForPath(parentPath);\ncheckACL(zks,parentRecord.acl,ZooDefs.Perms.CREATE,request.authInfo);\nint parentCVersion=parentRecord.stat.getCversion();\nCreateMode createMode=CreateMode.fromFlag(createRequest.getFlags());\nif (createMode.isSequential()) {\npath=path + String.format(\"%010d\",parentCVersion);\n}\ntry {\nif (getRecordForPath(path) != null) {\nthrow new KeeperException.NodeExistsException();\n}\n}\n catch (KeeperException.NoNodeException e) {\n}\nboolean ephemeralParent=parentRecord.stat.getEphemeralOwner() != 0;\nif (ephemeralParent) {\nthrow new KeeperException.NoChildrenForEphemeralsException();\n}\ntxn=new CreateTxn(path,createRequest.getData(),createRequest.getAcl(),createMode.isEphemeral());\nStatPersisted s=new StatPersisted();\nif (createMode.isEphemeral()) {\ns.setEphemeralOwner(request.sessionId);\n}\nparentRecord=parentRecord.duplicate(txnHeader.getZxid());\nparentRecord.childCount++;\nparentRecord.stat.setCversion(parentRecord.stat.getCversion() + 1);\naddChangeRecord(parentRecord);\naddChangeRecord(new ChangeRecord(txnHeader.getZxid(),path,s,0,createRequest.getAcl()));\nbreak;\ncase OpCode.delete:txnHeader=new TxnHeader(request.sessionId,request.cxid,zks.getNextZxid(),zks.getTime(),OpCode.delete);\nzks.sessionTracker.checkSession(request.sessionId);\nDeleteRequest deleteRequest=new DeleteRequest();\nZooKeeperServer.byteBuffer2Record(request.request,deleteRequest);\npath=deleteRequest.getPath();\nlastSlash=path.lastIndexOf('/');\nif (lastSlash == -1 || path.indexOf('\\0') != -1 || path.equals(\"/\")) {\nthrow new KeeperException.BadArgumentsException();\n}\nparentPath=path.substring(0,lastSlash);\nparentRecord=getRecordForPath(parentPath);\nChangeRecord nodeRecord=getRecordForPath(path);\ncheckACL(zks,parentRecord.acl,ZooDefs.Perms.DELETE,request.authInfo);\nint version=deleteRequest.getVersion();\nif (version != -1 && nodeRecord.stat.getVersion() != version) {\nthrow new KeeperException.BadVersionException();\n}\nif (nodeRecord.childCount > 0) {\nthrow new KeeperException.NotEmptyException();\n}\ntxn=new DeleteTxn(path);\nparentRecord=parentRecord.duplicate(txnHeader.getZxid());\nparentRecord.childCount--;\nparentRecord.stat.setCversion(parentRecord.stat.getCversion() + 1);\naddChangeRecord(parentRecord);\naddChangeRecord(new ChangeRecord(txnHeader.getZxid(),path,null,-1,null));\nbreak;\ncase OpCode.setData:txnHeader=new TxnHeader(request.sessionId,request.cxid,zks.getNextZxid(),zks.getTime(),OpCode.setData);\nzks.sessionTracker.checkSession(request.sessionId);\nSetDataRequest setDataRequest=new SetDataRequest();\nZooKeeperServer.byteBuffer2Record(request.request,setDataRequest);\npath=setDataRequest.getPath();\nnodeRecord=getRecordForPath(path);\ncheckACL(zks,nodeRecord.acl,ZooDefs.Perms.WRITE,request.authInfo);\nversion=setDataRequest.getVersion();\nint currentVersion=nodeRecord.stat.getVersion();\nif (version != -1 && version != currentVersion) {\nthrow new KeeperException.BadVersionException();\n}\nversion=currentVersion + 1;\ntxn=new SetDataTxn(path,setDataRequest.getData(),version);\nnodeRecord=nodeRecord.duplicate(txnHeader.getZxid());\nnodeRecord.stat.setVersion(version);\naddChangeRecord(nodeRecord);\nbreak;\ncase OpCode.setACL:txnHeader=new TxnHeader(request.sessionId,request.cxid,zks.getNextZxid(),zks.getTime(),OpCode.setACL);\nzks.sessionTracker.checkSession(request.sessionId);\nSetACLRequest setAclRequest=new SetACLRequest();\nZooKeeperServer.byteBuffer2Record(request.request,setAclRequest);\nif (!fixupACL(request.authInfo,setAclRequest.getAcl())) {\nthrow new KeeperException.InvalidACLException();\n}\npath=setAclRequest.getPath();\nnodeRecord=getRecordForPath(path);\ncheckACL(zks,nodeRecord.acl,ZooDefs.Perms.ADMIN,request.authInfo);\nversion=setAclRequest.getVersion();\ncurrentVersion=nodeRecord.stat.getAversion();\nif (version != -1 && version != currentVersion) {\nthrow new KeeperException.BadVersionException();\n}\nversion=currentVersion + 1;\ntxn=new SetACLTxn(path,setAclRequest.getAcl(),version);\nnodeRecord=nodeRecord.duplicate(txnHeader.getZxid());\nnodeRecord.stat.setAversion(version);\naddChangeRecord(nodeRecord);\nbreak;\ncase OpCode.createSession:txnHeader=new TxnHeader(request.sessionId,request.cxid,zks.getNextZxid(),zks.getTime(),OpCode.createSession);\nrequest.request.rewind();\nint to=request.request.getInt();\ntxn=new CreateSessionTxn(to);\nrequest.request.rewind();\nzks.sessionTracker.addSession(request.sessionId,to);\nbreak;\ncase OpCode.closeSession:txnHeader=new TxnHeader(request.sessionId,request.cxid,zks.getNextZxid(),zks.getTime(),OpCode.closeSession);\nHashSet<String> es=zks.dataTree.getEphemerals(request.sessionId);\nsynchronized (zks.outstandingChanges) {\nfor (ChangeRecord c : zks.outstandingChanges) {\nif (c.stat == null) {\nes.remove(c.path);\n}\n else if (c.stat.getEphemeralOwner() == request.sessionId) {\nes.add(c.path);\n}\n}\nfor (String path2Delete : es) {\naddChangeRecord(new ChangeRecord(txnHeader.getZxid(),path2Delete,null,0,null));\n}\n}\nLOG.info(\"Processed session termination request for id: 0x\" + Long.toHexString(request.sessionId));\nbreak;\ncase OpCode.sync:case OpCode.exists:case OpCode.getData:case OpCode.getACL:case OpCode.getChildren:case OpCode.ping:case OpCode.setWatches:break;\n}\n}\n catch (KeeperException e) {\nif (txnHeader != null) {\ntxnHeader.setType(OpCode.error);\ntxn=new ErrorTxn(e.code().intValue());\n}\n}\ncatch (Exception e) {\nLOG.error(\"Failed to process \" + request,e);\nStringBuffer sb=new StringBuffer();\nByteBuffer bb=request.request;\nif (bb != null) {\nbb.rewind();\nwhile (bb.hasRemaining()) {\nsb.append(Integer.toHexString(bb.get() & 0xff));\n}\n}\n else {\nsb.append(\"request buffer is null\");\n}\nLOG.error(\"Dumping request buffer: 0x\" + sb.toString());\nif (txnHeader != null) {\ntxnHeader.setType(OpCode.error);\ntxn=new ErrorTxn(Code.MARSHALLINGERROR.intValue());\n}\n}\nrequest.hdr=txnHeader;\nrequest.txn=txn;\nrequest.zxid=zks.getZxid();\nnextProcessor.processRequest(request);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 1215,
      "astHeight" : 16
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 112,
        "startLineNumber" : 344,
        "startColumnNumber" : 25,
        "endLineNumber" : 345,
        "endColumnNumber" : 61
      },
      "nodeContext" : "\"Processed session termination request for id: 0x\" + Long.toHexString(request.sessionId)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 4,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 35,
    "startLineNumber" : 345,
    "startColumnNumber" : 26,
    "endLineNumber" : 345,
    "endColumnNumber" : 61
  } ],
  "layoutRelationDataList" : [ ]
}