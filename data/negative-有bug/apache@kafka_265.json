{
  "id" : 265,
  "expression" : "channel.currentReceive().bytesRead()",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/clients/src/test/java/org/apache/kafka/common/network/KafkaChannelTest.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "channel.currentReceive().bytesRead()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 36,
      "startLineNumber" : 89,
      "startColumnNumber" : 24,
      "endLineNumber" : 89,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 53,
        "startLineNumber" : 89,
        "startColumnNumber" : 8,
        "endLineNumber" : 89,
        "endColumnNumber" : 61
      },
      "nodeContext" : "assertEquals(4,channel.currentReceive().bytesRead())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 89,
        "startColumnNumber" : 8,
        "endLineNumber" : 89,
        "endColumnNumber" : 62
      },
      "nodeContext" : "assertEquals(4,channel.currentReceive().bytesRead());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1936,
        "startLineNumber" : 69,
        "startColumnNumber" : 51,
        "endLineNumber" : 110,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Authenticator authenticator=Mockito.mock(Authenticator.class);\n  TransportLayer transport=Mockito.mock(TransportLayer.class);\n  MemoryPool pool=Mockito.mock(MemoryPool.class);\n  ChannelMetadataRegistry metadataRegistry=Mockito.mock(ChannelMetadataRegistry.class);\n  ArgumentCaptor<Integer> sizeCaptor=ArgumentCaptor.forClass(Integer.class);\n  Mockito.when(pool.tryAllocate(sizeCaptor.capture())).thenAnswer(invocation -> {\n    return ByteBuffer.allocate(sizeCaptor.getValue());\n  }\n);\n  KafkaChannel channel=new KafkaChannel(\"0\",transport,() -> authenticator,1024,pool,metadataRegistry);\n  ArgumentCaptor<ByteBuffer> bufferCaptor=ArgumentCaptor.forClass(ByteBuffer.class);\n  Mockito.when(transport.read(bufferCaptor.capture())).thenAnswer(invocation -> {\n    bufferCaptor.getValue().putInt(128);\n    return 4;\n  }\n).thenReturn(0);\n  assertEquals(4,channel.read());\n  assertEquals(4,channel.currentReceive().bytesRead());\n  assertNull(channel.maybeCompleteReceive());\n  Mockito.reset(transport);\n  Mockito.when(transport.read(bufferCaptor.capture())).thenAnswer(invocation -> {\n    bufferCaptor.getValue().put(TestUtils.randomBytes(64));\n    return 64;\n  }\n);\n  assertEquals(64,channel.read());\n  assertEquals(68,channel.currentReceive().bytesRead());\n  assertNull(channel.maybeCompleteReceive());\n  Mockito.reset(transport);\n  Mockito.when(transport.read(bufferCaptor.capture())).thenAnswer(invocation -> {\n    bufferCaptor.getValue().put(TestUtils.randomBytes(64));\n    return 64;\n  }\n);\n  assertEquals(64,channel.read());\n  assertEquals(132,channel.currentReceive().bytesRead());\n  assertNotNull(channel.maybeCompleteReceive());\n  assertNull(channel.currentReceive());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 277,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1993,
        "startLineNumber" : 68,
        "startColumnNumber" : 4,
        "endLineNumber" : 110,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testReceiving() throws IOException {\n  Authenticator authenticator=Mockito.mock(Authenticator.class);\n  TransportLayer transport=Mockito.mock(TransportLayer.class);\n  MemoryPool pool=Mockito.mock(MemoryPool.class);\n  ChannelMetadataRegistry metadataRegistry=Mockito.mock(ChannelMetadataRegistry.class);\n  ArgumentCaptor<Integer> sizeCaptor=ArgumentCaptor.forClass(Integer.class);\n  Mockito.when(pool.tryAllocate(sizeCaptor.capture())).thenAnswer(invocation -> {\n    return ByteBuffer.allocate(sizeCaptor.getValue());\n  }\n);\n  KafkaChannel channel=new KafkaChannel(\"0\",transport,() -> authenticator,1024,pool,metadataRegistry);\n  ArgumentCaptor<ByteBuffer> bufferCaptor=ArgumentCaptor.forClass(ByteBuffer.class);\n  Mockito.when(transport.read(bufferCaptor.capture())).thenAnswer(invocation -> {\n    bufferCaptor.getValue().putInt(128);\n    return 4;\n  }\n).thenReturn(0);\n  assertEquals(4,channel.read());\n  assertEquals(4,channel.currentReceive().bytesRead());\n  assertNull(channel.maybeCompleteReceive());\n  Mockito.reset(transport);\n  Mockito.when(transport.read(bufferCaptor.capture())).thenAnswer(invocation -> {\n    bufferCaptor.getValue().put(TestUtils.randomBytes(64));\n    return 64;\n  }\n);\n  assertEquals(64,channel.read());\n  assertEquals(68,channel.currentReceive().bytesRead());\n  assertNull(channel.maybeCompleteReceive());\n  Mockito.reset(transport);\n  Mockito.when(transport.read(bufferCaptor.capture())).thenAnswer(invocation -> {\n    bufferCaptor.getValue().put(TestUtils.randomBytes(64));\n    return 64;\n  }\n);\n  assertEquals(64,channel.read());\n  assertEquals(132,channel.currentReceive().bytesRead());\n  assertNotNull(channel.maybeCompleteReceive());\n  assertNull(channel.currentReceive());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 285,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 89,
        "startColumnNumber" : 8,
        "endLineNumber" : 89,
        "endColumnNumber" : 62
      },
      "nodeContext" : "assertEquals(4,channel.currentReceive().bytesRead());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "int"
  }, {
    "nodeContext" : "channel.currentReceive().bytesRead()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 36,
      "startLineNumber" : 98,
      "startColumnNumber" : 25,
      "endLineNumber" : 98,
      "endColumnNumber" : 61
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 54,
        "startLineNumber" : 98,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 62
      },
      "nodeContext" : "assertEquals(68,channel.currentReceive().bytesRead())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 98,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 63
      },
      "nodeContext" : "assertEquals(68,channel.currentReceive().bytesRead());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1936,
        "startLineNumber" : 69,
        "startColumnNumber" : 51,
        "endLineNumber" : 110,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Authenticator authenticator=Mockito.mock(Authenticator.class);\n  TransportLayer transport=Mockito.mock(TransportLayer.class);\n  MemoryPool pool=Mockito.mock(MemoryPool.class);\n  ChannelMetadataRegistry metadataRegistry=Mockito.mock(ChannelMetadataRegistry.class);\n  ArgumentCaptor<Integer> sizeCaptor=ArgumentCaptor.forClass(Integer.class);\n  Mockito.when(pool.tryAllocate(sizeCaptor.capture())).thenAnswer(invocation -> {\n    return ByteBuffer.allocate(sizeCaptor.getValue());\n  }\n);\n  KafkaChannel channel=new KafkaChannel(\"0\",transport,() -> authenticator,1024,pool,metadataRegistry);\n  ArgumentCaptor<ByteBuffer> bufferCaptor=ArgumentCaptor.forClass(ByteBuffer.class);\n  Mockito.when(transport.read(bufferCaptor.capture())).thenAnswer(invocation -> {\n    bufferCaptor.getValue().putInt(128);\n    return 4;\n  }\n).thenReturn(0);\n  assertEquals(4,channel.read());\n  assertEquals(4,channel.currentReceive().bytesRead());\n  assertNull(channel.maybeCompleteReceive());\n  Mockito.reset(transport);\n  Mockito.when(transport.read(bufferCaptor.capture())).thenAnswer(invocation -> {\n    bufferCaptor.getValue().put(TestUtils.randomBytes(64));\n    return 64;\n  }\n);\n  assertEquals(64,channel.read());\n  assertEquals(68,channel.currentReceive().bytesRead());\n  assertNull(channel.maybeCompleteReceive());\n  Mockito.reset(transport);\n  Mockito.when(transport.read(bufferCaptor.capture())).thenAnswer(invocation -> {\n    bufferCaptor.getValue().put(TestUtils.randomBytes(64));\n    return 64;\n  }\n);\n  assertEquals(64,channel.read());\n  assertEquals(132,channel.currentReceive().bytesRead());\n  assertNotNull(channel.maybeCompleteReceive());\n  assertNull(channel.currentReceive());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 277,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1993,
        "startLineNumber" : 68,
        "startColumnNumber" : 4,
        "endLineNumber" : 110,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testReceiving() throws IOException {\n  Authenticator authenticator=Mockito.mock(Authenticator.class);\n  TransportLayer transport=Mockito.mock(TransportLayer.class);\n  MemoryPool pool=Mockito.mock(MemoryPool.class);\n  ChannelMetadataRegistry metadataRegistry=Mockito.mock(ChannelMetadataRegistry.class);\n  ArgumentCaptor<Integer> sizeCaptor=ArgumentCaptor.forClass(Integer.class);\n  Mockito.when(pool.tryAllocate(sizeCaptor.capture())).thenAnswer(invocation -> {\n    return ByteBuffer.allocate(sizeCaptor.getValue());\n  }\n);\n  KafkaChannel channel=new KafkaChannel(\"0\",transport,() -> authenticator,1024,pool,metadataRegistry);\n  ArgumentCaptor<ByteBuffer> bufferCaptor=ArgumentCaptor.forClass(ByteBuffer.class);\n  Mockito.when(transport.read(bufferCaptor.capture())).thenAnswer(invocation -> {\n    bufferCaptor.getValue().putInt(128);\n    return 4;\n  }\n).thenReturn(0);\n  assertEquals(4,channel.read());\n  assertEquals(4,channel.currentReceive().bytesRead());\n  assertNull(channel.maybeCompleteReceive());\n  Mockito.reset(transport);\n  Mockito.when(transport.read(bufferCaptor.capture())).thenAnswer(invocation -> {\n    bufferCaptor.getValue().put(TestUtils.randomBytes(64));\n    return 64;\n  }\n);\n  assertEquals(64,channel.read());\n  assertEquals(68,channel.currentReceive().bytesRead());\n  assertNull(channel.maybeCompleteReceive());\n  Mockito.reset(transport);\n  Mockito.when(transport.read(bufferCaptor.capture())).thenAnswer(invocation -> {\n    bufferCaptor.getValue().put(TestUtils.randomBytes(64));\n    return 64;\n  }\n);\n  assertEquals(64,channel.read());\n  assertEquals(132,channel.currentReceive().bytesRead());\n  assertNotNull(channel.maybeCompleteReceive());\n  assertNull(channel.currentReceive());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 285,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 98,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 63
      },
      "nodeContext" : "assertEquals(68,channel.currentReceive().bytesRead());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "int"
  }, {
    "nodeContext" : "channel.currentReceive().bytesRead()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 36,
      "startLineNumber" : 107,
      "startColumnNumber" : 26,
      "endLineNumber" : 107,
      "endColumnNumber" : 62
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 107,
        "startColumnNumber" : 8,
        "endLineNumber" : 107,
        "endColumnNumber" : 63
      },
      "nodeContext" : "assertEquals(132,channel.currentReceive().bytesRead())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 107,
        "startColumnNumber" : 8,
        "endLineNumber" : 107,
        "endColumnNumber" : 64
      },
      "nodeContext" : "assertEquals(132,channel.currentReceive().bytesRead());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1936,
        "startLineNumber" : 69,
        "startColumnNumber" : 51,
        "endLineNumber" : 110,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Authenticator authenticator=Mockito.mock(Authenticator.class);\n  TransportLayer transport=Mockito.mock(TransportLayer.class);\n  MemoryPool pool=Mockito.mock(MemoryPool.class);\n  ChannelMetadataRegistry metadataRegistry=Mockito.mock(ChannelMetadataRegistry.class);\n  ArgumentCaptor<Integer> sizeCaptor=ArgumentCaptor.forClass(Integer.class);\n  Mockito.when(pool.tryAllocate(sizeCaptor.capture())).thenAnswer(invocation -> {\n    return ByteBuffer.allocate(sizeCaptor.getValue());\n  }\n);\n  KafkaChannel channel=new KafkaChannel(\"0\",transport,() -> authenticator,1024,pool,metadataRegistry);\n  ArgumentCaptor<ByteBuffer> bufferCaptor=ArgumentCaptor.forClass(ByteBuffer.class);\n  Mockito.when(transport.read(bufferCaptor.capture())).thenAnswer(invocation -> {\n    bufferCaptor.getValue().putInt(128);\n    return 4;\n  }\n).thenReturn(0);\n  assertEquals(4,channel.read());\n  assertEquals(4,channel.currentReceive().bytesRead());\n  assertNull(channel.maybeCompleteReceive());\n  Mockito.reset(transport);\n  Mockito.when(transport.read(bufferCaptor.capture())).thenAnswer(invocation -> {\n    bufferCaptor.getValue().put(TestUtils.randomBytes(64));\n    return 64;\n  }\n);\n  assertEquals(64,channel.read());\n  assertEquals(68,channel.currentReceive().bytesRead());\n  assertNull(channel.maybeCompleteReceive());\n  Mockito.reset(transport);\n  Mockito.when(transport.read(bufferCaptor.capture())).thenAnswer(invocation -> {\n    bufferCaptor.getValue().put(TestUtils.randomBytes(64));\n    return 64;\n  }\n);\n  assertEquals(64,channel.read());\n  assertEquals(132,channel.currentReceive().bytesRead());\n  assertNotNull(channel.maybeCompleteReceive());\n  assertNull(channel.currentReceive());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 277,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1993,
        "startLineNumber" : 68,
        "startColumnNumber" : 4,
        "endLineNumber" : 110,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testReceiving() throws IOException {\n  Authenticator authenticator=Mockito.mock(Authenticator.class);\n  TransportLayer transport=Mockito.mock(TransportLayer.class);\n  MemoryPool pool=Mockito.mock(MemoryPool.class);\n  ChannelMetadataRegistry metadataRegistry=Mockito.mock(ChannelMetadataRegistry.class);\n  ArgumentCaptor<Integer> sizeCaptor=ArgumentCaptor.forClass(Integer.class);\n  Mockito.when(pool.tryAllocate(sizeCaptor.capture())).thenAnswer(invocation -> {\n    return ByteBuffer.allocate(sizeCaptor.getValue());\n  }\n);\n  KafkaChannel channel=new KafkaChannel(\"0\",transport,() -> authenticator,1024,pool,metadataRegistry);\n  ArgumentCaptor<ByteBuffer> bufferCaptor=ArgumentCaptor.forClass(ByteBuffer.class);\n  Mockito.when(transport.read(bufferCaptor.capture())).thenAnswer(invocation -> {\n    bufferCaptor.getValue().putInt(128);\n    return 4;\n  }\n).thenReturn(0);\n  assertEquals(4,channel.read());\n  assertEquals(4,channel.currentReceive().bytesRead());\n  assertNull(channel.maybeCompleteReceive());\n  Mockito.reset(transport);\n  Mockito.when(transport.read(bufferCaptor.capture())).thenAnswer(invocation -> {\n    bufferCaptor.getValue().put(TestUtils.randomBytes(64));\n    return 64;\n  }\n);\n  assertEquals(64,channel.read());\n  assertEquals(68,channel.currentReceive().bytesRead());\n  assertNull(channel.maybeCompleteReceive());\n  Mockito.reset(transport);\n  Mockito.when(transport.read(bufferCaptor.capture())).thenAnswer(invocation -> {\n    bufferCaptor.getValue().put(TestUtils.randomBytes(64));\n    return 64;\n  }\n);\n  assertEquals(64,channel.read());\n  assertEquals(132,channel.currentReceive().bytesRead());\n  assertNotNull(channel.maybeCompleteReceive());\n  assertNull(channel.currentReceive());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 285,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 107,
        "startColumnNumber" : 8,
        "endLineNumber" : 107,
        "endColumnNumber" : 64
      },
      "nodeContext" : "assertEquals(132,channel.currentReceive().bytesRead());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 5
    },
    "tokenLength" : 3,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 36,
    "startLineNumber" : 89,
    "startColumnNumber" : 24,
    "endLineNumber" : 89,
    "endColumnNumber" : 60
  }, {
    "charLength" : 36,
    "startLineNumber" : 98,
    "startColumnNumber" : 25,
    "endLineNumber" : 98,
    "endColumnNumber" : 61
  }, {
    "charLength" : 36,
    "startLineNumber" : 107,
    "startColumnNumber" : 26,
    "endLineNumber" : 107,
    "endColumnNumber" : 62
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 2
  } ]
}