{
  "id" : 352,
  "expression" : "groupedData.windowedBy(TimeWindows.of(Duration.ofDays(2))).count(Materialized.as(\"uwin-cnt\")).toStream(new Unwindow<>()).filterNot((k,v) -> k.equals(\"flush\"))",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/streams/upgrade-system-tests-28/src/test/java/org/apache/kafka/streams/tests/SmokeTestClient.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "groupedData.windowedBy(TimeWindows.of(Duration.ofDays(2))).count(Materialized.as(\"uwin-cnt\")).toStream(new Unwindow<>()).filterNot((k,v) -> k.equals(\"flush\"))",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 211,
      "startLineNumber" : 248,
      "startColumnNumber" : 8,
      "endLineNumber" : 252,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 33,
    "astHeight" : 7,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 273,
        "startLineNumber" : 248,
        "startColumnNumber" : 8,
        "endLineNumber" : 253,
        "endColumnNumber" : 61
      },
      "nodeContext" : "groupedData.windowedBy(TimeWindows.of(Duration.ofDays(2))).count(Materialized.as(\"uwin-cnt\")).toStream(new Unwindow<>()).filterNot((k,v) -> k.equals(\"flush\")).to(\"cnt\",Produced.with(stringSerde,longSerde))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 41,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 274,
        "startLineNumber" : 248,
        "startColumnNumber" : 8,
        "endLineNumber" : 253,
        "endColumnNumber" : 62
      },
      "nodeContext" : "groupedData.windowedBy(TimeWindows.of(Duration.ofDays(2))).count(Materialized.as(\"uwin-cnt\")).toStream(new Unwindow<>()).filterNot((k,v) -> k.equals(\"flush\")).to(\"cnt\",Produced.with(stringSerde,longSerde));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 42,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 5464,
        "startLineNumber" : 169,
        "startColumnNumber" : 34,
        "endLineNumber" : 290,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final StreamsBuilder builder=new StreamsBuilder();\n  final Consumed<String,Integer> stringIntConsumed=Consumed.with(stringSerde,intSerde);\n  final KStream<String,Integer> source=builder.stream(\"data\",stringIntConsumed);\n  source.filterNot((k,v) -> k.equals(\"flush\")).to(\"echo\",Produced.with(stringSerde,intSerde));\n  final KStream<String,Integer> data=source.filter((key,value) -> value == null || value != END);\n  data.process(SmokeTestUtil.printProcessorSupplier(\"data\",name));\n  final KGroupedStream<String,Integer> groupedData=data.groupByKey(Grouped.with(stringSerde,intSerde));\n  final KTable<Windowed<String>,Integer> minAggregation=groupedData.windowedBy(TimeWindows.of(Duration.ofDays(1)).grace(Duration.ofMinutes(1))).aggregate(() -> Integer.MAX_VALUE,(aggKey,value,aggregate) -> (value < aggregate) ? value : aggregate,Materialized.<String,Integer,WindowStore<Bytes,byte[]>>as(\"uwin-min\").withValueSerde(intSerde).withRetention(Duration.ofHours(25)));\n  streamify(minAggregation,\"min-raw\");\n  streamify(minAggregation.suppress(untilWindowCloses(BufferConfig.unbounded())),\"min-suppressed\");\n  minAggregation.toStream(new Unwindow<>()).filterNot((k,v) -> k.equals(\"flush\")).to(\"min\",Produced.with(stringSerde,intSerde));\n  final KTable<Windowed<String>,Integer> smallWindowSum=groupedData.windowedBy(TimeWindows.of(Duration.ofSeconds(2)).advanceBy(Duration.ofSeconds(1)).grace(Duration.ofSeconds(30))).reduce((l,r) -> l + r);\n  streamify(smallWindowSum,\"sws-raw\");\n  streamify(smallWindowSum.suppress(untilWindowCloses(BufferConfig.unbounded())),\"sws-suppressed\");\n  final KTable<String,Integer> minTable=builder.table(\"min\",Consumed.with(stringSerde,intSerde),Materialized.as(\"minStoreName\"));\n  minTable.toStream().process(SmokeTestUtil.printProcessorSupplier(\"min\",name));\n  groupedData.windowedBy(TimeWindows.of(Duration.ofDays(2))).aggregate(() -> Integer.MIN_VALUE,(aggKey,value,aggregate) -> (value > aggregate) ? value : aggregate,Materialized.<String,Integer,WindowStore<Bytes,byte[]>>as(\"uwin-max\").withValueSerde(intSerde)).toStream(new Unwindow<>()).filterNot((k,v) -> k.equals(\"flush\")).to(\"max\",Produced.with(stringSerde,intSerde));\n  final KTable<String,Integer> maxTable=builder.table(\"max\",Consumed.with(stringSerde,intSerde),Materialized.as(\"maxStoreName\"));\n  maxTable.toStream().process(SmokeTestUtil.printProcessorSupplier(\"max\",name));\n  groupedData.windowedBy(TimeWindows.of(Duration.ofDays(2))).aggregate(() -> 0L,(aggKey,value,aggregate) -> (long)value + aggregate,Materialized.<String,Long,WindowStore<Bytes,byte[]>>as(\"win-sum\").withValueSerde(longSerde)).toStream(new Unwindow<>()).filterNot((k,v) -> k.equals(\"flush\")).to(\"sum\",Produced.with(stringSerde,longSerde));\n  final Consumed<String,Long> stringLongConsumed=Consumed.with(stringSerde,longSerde);\n  final KTable<String,Long> sumTable=builder.table(\"sum\",stringLongConsumed);\n  sumTable.toStream().process(SmokeTestUtil.printProcessorSupplier(\"sum\",name));\n  groupedData.windowedBy(TimeWindows.of(Duration.ofDays(2))).count(Materialized.as(\"uwin-cnt\")).toStream(new Unwindow<>()).filterNot((k,v) -> k.equals(\"flush\")).to(\"cnt\",Produced.with(stringSerde,longSerde));\n  final KTable<String,Long> cntTable=builder.table(\"cnt\",Consumed.with(stringSerde,longSerde),Materialized.as(\"cntStoreName\"));\n  cntTable.toStream().process(SmokeTestUtil.printProcessorSupplier(\"cnt\",name));\n  maxTable.join(minTable,(value1,value2) -> value1 - value2).toStream().filterNot((k,v) -> k.equals(\"flush\")).to(\"dif\",Produced.with(stringSerde,intSerde));\n  sumTable.join(cntTable,(value1,value2) -> (double)value1 / (double)value2).toStream().filterNot((k,v) -> k.equals(\"flush\")).to(\"avg\",Produced.with(stringSerde,doubleSerde));\n  final Agg agg=new Agg();\n  cntTable.groupBy(agg.selector(),Grouped.with(stringSerde,longSerde)).aggregate(agg.init(),agg.adder(),agg.remover(),Materialized.<String,Long>as(Stores.inMemoryKeyValueStore(\"cntByCnt\")).withKeySerde(Serdes.String()).withValueSerde(Serdes.Long())).toStream().to(\"tagg\",Produced.with(stringSerde,longSerde));\n  return builder.build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 774,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 5494,
        "startLineNumber" : 169,
        "startColumnNumber" : 4,
        "endLineNumber" : 290,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public Topology getTopology(){\n  final StreamsBuilder builder=new StreamsBuilder();\n  final Consumed<String,Integer> stringIntConsumed=Consumed.with(stringSerde,intSerde);\n  final KStream<String,Integer> source=builder.stream(\"data\",stringIntConsumed);\n  source.filterNot((k,v) -> k.equals(\"flush\")).to(\"echo\",Produced.with(stringSerde,intSerde));\n  final KStream<String,Integer> data=source.filter((key,value) -> value == null || value != END);\n  data.process(SmokeTestUtil.printProcessorSupplier(\"data\",name));\n  final KGroupedStream<String,Integer> groupedData=data.groupByKey(Grouped.with(stringSerde,intSerde));\n  final KTable<Windowed<String>,Integer> minAggregation=groupedData.windowedBy(TimeWindows.of(Duration.ofDays(1)).grace(Duration.ofMinutes(1))).aggregate(() -> Integer.MAX_VALUE,(aggKey,value,aggregate) -> (value < aggregate) ? value : aggregate,Materialized.<String,Integer,WindowStore<Bytes,byte[]>>as(\"uwin-min\").withValueSerde(intSerde).withRetention(Duration.ofHours(25)));\n  streamify(minAggregation,\"min-raw\");\n  streamify(minAggregation.suppress(untilWindowCloses(BufferConfig.unbounded())),\"min-suppressed\");\n  minAggregation.toStream(new Unwindow<>()).filterNot((k,v) -> k.equals(\"flush\")).to(\"min\",Produced.with(stringSerde,intSerde));\n  final KTable<Windowed<String>,Integer> smallWindowSum=groupedData.windowedBy(TimeWindows.of(Duration.ofSeconds(2)).advanceBy(Duration.ofSeconds(1)).grace(Duration.ofSeconds(30))).reduce((l,r) -> l + r);\n  streamify(smallWindowSum,\"sws-raw\");\n  streamify(smallWindowSum.suppress(untilWindowCloses(BufferConfig.unbounded())),\"sws-suppressed\");\n  final KTable<String,Integer> minTable=builder.table(\"min\",Consumed.with(stringSerde,intSerde),Materialized.as(\"minStoreName\"));\n  minTable.toStream().process(SmokeTestUtil.printProcessorSupplier(\"min\",name));\n  groupedData.windowedBy(TimeWindows.of(Duration.ofDays(2))).aggregate(() -> Integer.MIN_VALUE,(aggKey,value,aggregate) -> (value > aggregate) ? value : aggregate,Materialized.<String,Integer,WindowStore<Bytes,byte[]>>as(\"uwin-max\").withValueSerde(intSerde)).toStream(new Unwindow<>()).filterNot((k,v) -> k.equals(\"flush\")).to(\"max\",Produced.with(stringSerde,intSerde));\n  final KTable<String,Integer> maxTable=builder.table(\"max\",Consumed.with(stringSerde,intSerde),Materialized.as(\"maxStoreName\"));\n  maxTable.toStream().process(SmokeTestUtil.printProcessorSupplier(\"max\",name));\n  groupedData.windowedBy(TimeWindows.of(Duration.ofDays(2))).aggregate(() -> 0L,(aggKey,value,aggregate) -> (long)value + aggregate,Materialized.<String,Long,WindowStore<Bytes,byte[]>>as(\"win-sum\").withValueSerde(longSerde)).toStream(new Unwindow<>()).filterNot((k,v) -> k.equals(\"flush\")).to(\"sum\",Produced.with(stringSerde,longSerde));\n  final Consumed<String,Long> stringLongConsumed=Consumed.with(stringSerde,longSerde);\n  final KTable<String,Long> sumTable=builder.table(\"sum\",stringLongConsumed);\n  sumTable.toStream().process(SmokeTestUtil.printProcessorSupplier(\"sum\",name));\n  groupedData.windowedBy(TimeWindows.of(Duration.ofDays(2))).count(Materialized.as(\"uwin-cnt\")).toStream(new Unwindow<>()).filterNot((k,v) -> k.equals(\"flush\")).to(\"cnt\",Produced.with(stringSerde,longSerde));\n  final KTable<String,Long> cntTable=builder.table(\"cnt\",Consumed.with(stringSerde,longSerde),Materialized.as(\"cntStoreName\"));\n  cntTable.toStream().process(SmokeTestUtil.printProcessorSupplier(\"cnt\",name));\n  maxTable.join(minTable,(value1,value2) -> value1 - value2).toStream().filterNot((k,v) -> k.equals(\"flush\")).to(\"dif\",Produced.with(stringSerde,intSerde));\n  sumTable.join(cntTable,(value1,value2) -> (double)value1 / (double)value2).toStream().filterNot((k,v) -> k.equals(\"flush\")).to(\"avg\",Produced.with(stringSerde,doubleSerde));\n  final Agg agg=new Agg();\n  cntTable.groupBy(agg.selector(),Grouped.with(stringSerde,longSerde)).aggregate(agg.init(),agg.adder(),agg.remover(),Materialized.<String,Long>as(Stores.inMemoryKeyValueStore(\"cntByCnt\")).withKeySerde(Serdes.String()).withValueSerde(Serdes.Long())).toStream().to(\"tagg\",Produced.with(stringSerde,longSerde));\n  return builder.build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 779,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 273,
        "startLineNumber" : 248,
        "startColumnNumber" : 8,
        "endLineNumber" : 253,
        "endColumnNumber" : 61
      },
      "nodeContext" : "groupedData.windowedBy(TimeWindows.of(Duration.ofDays(2))).count(Materialized.as(\"uwin-cnt\")).toStream(new Unwindow<>()).filterNot((k,v) -> k.equals(\"flush\")).to(\"cnt\",Produced.with(stringSerde,longSerde))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 41,
      "astHeight" : 8
    },
    "tokenLength" : 20,
    "type" : "org.apache.kafka.streams.kstream.KStream<java.lang.String,java.lang.Long>"
  } ],
  "positionList" : [ {
    "charLength" : 211,
    "startLineNumber" : 248,
    "startColumnNumber" : 8,
    "endLineNumber" : 252,
    "endColumnNumber" : 51
  } ],
  "layoutRelationDataList" : [ ]
}