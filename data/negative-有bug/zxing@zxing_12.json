{
  "id" : 12,
  "expression" : "7",
  "projectName" : "zxing@zxing",
  "commitID" : "1b0aed9c091717337b865955f58290450a3a9e3a",
  "filePath" : "/core/src/main/java/com/google/zxing/oned/EAN8Writer.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "7",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 51,
      "startColumnNumber" : 11,
      "endLineNumber" : 51,
      "endColumnNumber" : 12
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 51,
        "startColumnNumber" : 6,
        "endLineNumber" : 51,
        "endColumnNumber" : 13
      },
      "nodeContext" : "case 7:",
      "nodeType" : "SwitchCase",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 828,
        "startLineNumber" : 50,
        "startColumnNumber" : 4,
        "endLineNumber" : 73,
        "endColumnNumber" : 5
      },
      "nodeContext" : "switch (length) {\ncase 7:  int check;\ntry {\n  check=UPCEANReader.getStandardUPCEANChecksum(contents);\n}\n catch (FormatException fe) {\n  throw new IllegalArgumentException(fe);\n}\ncontents+=check;\nbreak;\ncase 8:try {\nif (!UPCEANReader.checkStandardUPCEANChecksum(contents)) {\nthrow new IllegalArgumentException(\"Contents do not pass checksum\");\n}\n}\n catch (FormatException ignored) {\nthrow new IllegalArgumentException(\"Illegal contents\");\n}\nbreak;\ndefault:throw new IllegalArgumentException(\"Requested contents should be 7 or 8 digits long, but got \" + length);\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 69,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1599,
        "startLineNumber" : 48,
        "startColumnNumber" : 43,
        "endLineNumber" : 96,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int length=contents.length();\nswitch (length) {\ncase 7:    int check;\n  try {\n    check=UPCEANReader.getStandardUPCEANChecksum(contents);\n  }\n catch (  FormatException fe) {\n    throw new IllegalArgumentException(fe);\n  }\ncontents+=check;\nbreak;\ncase 8:try {\nif (!UPCEANReader.checkStandardUPCEANChecksum(contents)) {\nthrow new IllegalArgumentException(\"Contents do not pass checksum\");\n}\n}\n catch (FormatException ignored) {\nthrow new IllegalArgumentException(\"Illegal contents\");\n}\nbreak;\ndefault:throw new IllegalArgumentException(\"Requested contents should be 7 or 8 digits long, but got \" + length);\n}\ncheckNumeric(contents);\nboolean[] result=new boolean[CODE_WIDTH];\nint pos=0;\npos+=appendPattern(result,pos,UPCEANReader.START_END_PATTERN,true);\nfor (int i=0; i <= 3; i++) {\nint digit=Character.digit(contents.charAt(i),10);\npos+=appendPattern(result,pos,UPCEANReader.L_PATTERNS[digit],false);\n}\npos+=appendPattern(result,pos,UPCEANReader.MIDDLE_PATTERN,false);\nfor (int i=4; i <= 7; i++) {\nint digit=Character.digit(contents.charAt(i),10);\npos+=appendPattern(result,pos,UPCEANReader.L_PATTERNS[digit],true);\n}\nappendPattern(result,pos,UPCEANReader.START_END_PATTERN,true);\nreturn result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1745,
        "startLineNumber" : 44,
        "startColumnNumber" : 2,
        "endLineNumber" : 96,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * @return a byte array of horizontal pixels (false = white, true = black)\n */\n@Override public boolean[] encode(String contents){\n  int length=contents.length();\nswitch (length) {\ncase 7:    int check;\n  try {\n    check=UPCEANReader.getStandardUPCEANChecksum(contents);\n  }\n catch (  FormatException fe) {\n    throw new IllegalArgumentException(fe);\n  }\ncontents+=check;\nbreak;\ncase 8:try {\nif (!UPCEANReader.checkStandardUPCEANChecksum(contents)) {\nthrow new IllegalArgumentException(\"Contents do not pass checksum\");\n}\n}\n catch (FormatException ignored) {\nthrow new IllegalArgumentException(\"Illegal contents\");\n}\nbreak;\ndefault:throw new IllegalArgumentException(\"Requested contents should be 7 or 8 digits long, but got \" + length);\n}\ncheckNumeric(contents);\nboolean[] result=new boolean[CODE_WIDTH];\nint pos=0;\npos+=appendPattern(result,pos,UPCEANReader.START_END_PATTERN,true);\nfor (int i=0; i <= 3; i++) {\nint digit=Character.digit(contents.charAt(i),10);\npos+=appendPattern(result,pos,UPCEANReader.L_PATTERNS[digit],false);\n}\npos+=appendPattern(result,pos,UPCEANReader.MIDDLE_PATTERN,false);\nfor (int i=4; i <= 7; i++) {\nint digit=Character.digit(contents.charAt(i),10);\npos+=appendPattern(result,pos,UPCEANReader.L_PATTERNS[digit],true);\n}\nappendPattern(result,pos,UPCEANReader.START_END_PATTERN,true);\nreturn result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 217,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 7,
        "startLineNumber" : 51,
        "startColumnNumber" : 6,
        "endLineNumber" : 51,
        "endColumnNumber" : 13
      },
      "nodeContext" : "case 7:",
      "nodeType" : "SwitchCase",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "7",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 89,
      "startColumnNumber" : 25,
      "endLineNumber" : 89,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 6,
        "startLineNumber" : 89,
        "startColumnNumber" : 20,
        "endLineNumber" : 89,
        "endColumnNumber" : 26
      },
      "nodeContext" : "i <= 7",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 177,
        "startLineNumber" : 89,
        "startColumnNumber" : 4,
        "endLineNumber" : 92,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=4; i <= 7; i++) {\n  int digit=Character.digit(contents.charAt(i),10);\n  pos+=appendPattern(result,pos,UPCEANReader.L_PATTERNS[digit],true);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 37,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1599,
        "startLineNumber" : 48,
        "startColumnNumber" : 43,
        "endLineNumber" : 96,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  int length=contents.length();\nswitch (length) {\ncase 7:    int check;\n  try {\n    check=UPCEANReader.getStandardUPCEANChecksum(contents);\n  }\n catch (  FormatException fe) {\n    throw new IllegalArgumentException(fe);\n  }\ncontents+=check;\nbreak;\ncase 8:try {\nif (!UPCEANReader.checkStandardUPCEANChecksum(contents)) {\nthrow new IllegalArgumentException(\"Contents do not pass checksum\");\n}\n}\n catch (FormatException ignored) {\nthrow new IllegalArgumentException(\"Illegal contents\");\n}\nbreak;\ndefault:throw new IllegalArgumentException(\"Requested contents should be 7 or 8 digits long, but got \" + length);\n}\ncheckNumeric(contents);\nboolean[] result=new boolean[CODE_WIDTH];\nint pos=0;\npos+=appendPattern(result,pos,UPCEANReader.START_END_PATTERN,true);\nfor (int i=0; i <= 3; i++) {\nint digit=Character.digit(contents.charAt(i),10);\npos+=appendPattern(result,pos,UPCEANReader.L_PATTERNS[digit],false);\n}\npos+=appendPattern(result,pos,UPCEANReader.MIDDLE_PATTERN,false);\nfor (int i=4; i <= 7; i++) {\nint digit=Character.digit(contents.charAt(i),10);\npos+=appendPattern(result,pos,UPCEANReader.L_PATTERNS[digit],true);\n}\nappendPattern(result,pos,UPCEANReader.START_END_PATTERN,true);\nreturn result;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 204,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1745,
        "startLineNumber" : 44,
        "startColumnNumber" : 2,
        "endLineNumber" : 96,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * @return a byte array of horizontal pixels (false = white, true = black)\n */\n@Override public boolean[] encode(String contents){\n  int length=contents.length();\nswitch (length) {\ncase 7:    int check;\n  try {\n    check=UPCEANReader.getStandardUPCEANChecksum(contents);\n  }\n catch (  FormatException fe) {\n    throw new IllegalArgumentException(fe);\n  }\ncontents+=check;\nbreak;\ncase 8:try {\nif (!UPCEANReader.checkStandardUPCEANChecksum(contents)) {\nthrow new IllegalArgumentException(\"Contents do not pass checksum\");\n}\n}\n catch (FormatException ignored) {\nthrow new IllegalArgumentException(\"Illegal contents\");\n}\nbreak;\ndefault:throw new IllegalArgumentException(\"Requested contents should be 7 or 8 digits long, but got \" + length);\n}\ncheckNumeric(contents);\nboolean[] result=new boolean[CODE_WIDTH];\nint pos=0;\npos+=appendPattern(result,pos,UPCEANReader.START_END_PATTERN,true);\nfor (int i=0; i <= 3; i++) {\nint digit=Character.digit(contents.charAt(i),10);\npos+=appendPattern(result,pos,UPCEANReader.L_PATTERNS[digit],false);\n}\npos+=appendPattern(result,pos,UPCEANReader.MIDDLE_PATTERN,false);\nfor (int i=4; i <= 7; i++) {\nint digit=Character.digit(contents.charAt(i),10);\npos+=appendPattern(result,pos,UPCEANReader.L_PATTERNS[digit],true);\n}\nappendPattern(result,pos,UPCEANReader.START_END_PATTERN,true);\nreturn result;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 217,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 6,
        "startLineNumber" : 89,
        "startColumnNumber" : 20,
        "endLineNumber" : 89,
        "endColumnNumber" : 26
      },
      "nodeContext" : "i <= 7",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 51,
    "startColumnNumber" : 11,
    "endLineNumber" : 51,
    "endColumnNumber" : 12
  }, {
    "charLength" : 1,
    "startLineNumber" : 89,
    "startColumnNumber" : 25,
    "endLineNumber" : 89,
    "endColumnNumber" : 26
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}