{
  "id" : 453,
  "expression" : "autoQueueItems",
  "projectName" : "TeamNewPipe@NewPipe",
  "commitID" : "d7574973e97fa7a3a21aa59967311f6091941830",
  "filePath" : "/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHelper.java",
  "occurrences" : 4,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "autoQueueItems",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 186,
      "startColumnNumber" : 16,
      "endLineNumber" : 186,
      "endColumnNumber" : 30
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 186,
        "startColumnNumber" : 16,
        "endLineNumber" : 186,
        "endColumnNumber" : 57
      },
      "nodeContext" : "autoQueueItems.add((StreamInfoItem)item)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 186,
        "startColumnNumber" : 16,
        "endLineNumber" : 186,
        "endColumnNumber" : 58
      },
      "nodeContext" : "autoQueueItems.add((StreamInfoItem)item);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 74,
        "startLineNumber" : 185,
        "startColumnNumber" : 81,
        "endLineNumber" : 187,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  autoQueueItems.add((StreamInfoItem)item);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 143,
        "startLineNumber" : 185,
        "startColumnNumber" : 12,
        "endLineNumber" : 187,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (item instanceof StreamInfoItem && !urls.contains(item.getUrl())) {\n  autoQueueItems.add((StreamInfoItem)item);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 22,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 167,
        "startLineNumber" : 184,
        "startColumnNumber" : 49,
        "endLineNumber" : 188,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (item instanceof StreamInfoItem && !urls.contains(item.getUrl())) {\n    autoQueueItems.add((StreamInfoItem)item);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 23,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 208,
        "startLineNumber" : 184,
        "startColumnNumber" : 8,
        "endLineNumber" : 188,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (final InfoItem item : relatedItems) {\n  if (item instanceof StreamInfoItem && !urls.contains(item.getUrl())) {\n    autoQueueItems.add((StreamInfoItem)item);\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 30,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1030,
        "startLineNumber" : 167,
        "startColumnNumber" : 90,
        "endLineNumber" : 193,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final Set<String> urls=new HashSet<>(existingItems.size());\n  for (  final PlayQueueItem item : existingItems) {\n    urls.add(item.getUrl());\n  }\n  final List<InfoItem> relatedItems=info.getRelatedStreams();\n  if (relatedItems == null) {\n    return null;\n  }\n  if (relatedItems.get(0) != null && relatedItems.get(0) instanceof StreamInfoItem && !urls.contains(relatedItems.get(0).getUrl())) {\n    return getAutoQueuedSinglePlayQueue((StreamInfoItem)relatedItems.get(0));\n  }\n  final List<StreamInfoItem> autoQueueItems=new ArrayList<>();\n  for (  final InfoItem item : relatedItems) {\n    if (item instanceof StreamInfoItem && !urls.contains(item.getUrl())) {\n      autoQueueItems.add((StreamInfoItem)item);\n    }\n  }\n  Collections.shuffle(autoQueueItems);\n  return autoQueueItems.isEmpty() ? null : getAutoQueuedSinglePlayQueue(autoQueueItems.get(0));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 148,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2058,
        "startLineNumber" : 147,
        "startColumnNumber" : 4,
        "endLineNumber" : 193,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Given a  {@link StreamInfo} and the existing queue items,provide the  {@link SinglePlayQueue} consisting of the next video for auto queueing.<p> This method detects and prevents cycles by naively checking if a candidate next video's url already exists in the existing items. </p> <p> The first item in  {@link StreamInfo#getRelatedStreams()} is checked first.If it is non-null and is not part of the existing items, it will be used as the next stream. Otherwise, a random item with non-repeating url will be selected from the  {@link StreamInfo#getRelatedStreams()}. </p>\n * @param info          currently playing stream\n * @param existingItems existing items in the queue\n * @return {@link SinglePlayQueue} with the next stream to queue\n */\n@Nullable public static PlayQueue autoQueueOf(@NonNull final StreamInfo info,@NonNull final List<PlayQueueItem> existingItems){\n  final Set<String> urls=new HashSet<>(existingItems.size());\n  for (  final PlayQueueItem item : existingItems) {\n    urls.add(item.getUrl());\n  }\n  final List<InfoItem> relatedItems=info.getRelatedStreams();\n  if (relatedItems == null) {\n    return null;\n  }\n  if (relatedItems.get(0) != null && relatedItems.get(0) instanceof StreamInfoItem && !urls.contains(relatedItems.get(0).getUrl())) {\n    return getAutoQueuedSinglePlayQueue((StreamInfoItem)relatedItems.get(0));\n  }\n  final List<StreamInfoItem> autoQueueItems=new ArrayList<>();\n  for (  final InfoItem item : relatedItems) {\n    if (item instanceof StreamInfoItem && !urls.contains(item.getUrl())) {\n      autoQueueItems.add((StreamInfoItem)item);\n    }\n  }\n  Collections.shuffle(autoQueueItems);\n  return autoQueueItems.isEmpty() ? null : getAutoQueuedSinglePlayQueue(autoQueueItems.get(0));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 174,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 186,
        "startColumnNumber" : 16,
        "endLineNumber" : 186,
        "endColumnNumber" : 58
      },
      "nodeContext" : "autoQueueItems.add((StreamInfoItem)item);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.util.List<org.schabi.newpipe.player.helper.StreamInfoItem>"
  }, {
    "nodeContext" : "autoQueueItems",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 190,
      "startColumnNumber" : 28,
      "endLineNumber" : 190,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 190,
        "startColumnNumber" : 8,
        "endLineNumber" : 190,
        "endColumnNumber" : 43
      },
      "nodeContext" : "Collections.shuffle(autoQueueItems)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 190,
        "startColumnNumber" : 8,
        "endLineNumber" : 190,
        "endColumnNumber" : 44
      },
      "nodeContext" : "Collections.shuffle(autoQueueItems);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1030,
        "startLineNumber" : 167,
        "startColumnNumber" : 90,
        "endLineNumber" : 193,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final Set<String> urls=new HashSet<>(existingItems.size());\n  for (  final PlayQueueItem item : existingItems) {\n    urls.add(item.getUrl());\n  }\n  final List<InfoItem> relatedItems=info.getRelatedStreams();\n  if (relatedItems == null) {\n    return null;\n  }\n  if (relatedItems.get(0) != null && relatedItems.get(0) instanceof StreamInfoItem && !urls.contains(relatedItems.get(0).getUrl())) {\n    return getAutoQueuedSinglePlayQueue((StreamInfoItem)relatedItems.get(0));\n  }\n  final List<StreamInfoItem> autoQueueItems=new ArrayList<>();\n  for (  final InfoItem item : relatedItems) {\n    if (item instanceof StreamInfoItem && !urls.contains(item.getUrl())) {\n      autoQueueItems.add((StreamInfoItem)item);\n    }\n  }\n  Collections.shuffle(autoQueueItems);\n  return autoQueueItems.isEmpty() ? null : getAutoQueuedSinglePlayQueue(autoQueueItems.get(0));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 148,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2058,
        "startLineNumber" : 147,
        "startColumnNumber" : 4,
        "endLineNumber" : 193,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Given a  {@link StreamInfo} and the existing queue items,provide the  {@link SinglePlayQueue} consisting of the next video for auto queueing.<p> This method detects and prevents cycles by naively checking if a candidate next video's url already exists in the existing items. </p> <p> The first item in  {@link StreamInfo#getRelatedStreams()} is checked first.If it is non-null and is not part of the existing items, it will be used as the next stream. Otherwise, a random item with non-repeating url will be selected from the  {@link StreamInfo#getRelatedStreams()}. </p>\n * @param info          currently playing stream\n * @param existingItems existing items in the queue\n * @return {@link SinglePlayQueue} with the next stream to queue\n */\n@Nullable public static PlayQueue autoQueueOf(@NonNull final StreamInfo info,@NonNull final List<PlayQueueItem> existingItems){\n  final Set<String> urls=new HashSet<>(existingItems.size());\n  for (  final PlayQueueItem item : existingItems) {\n    urls.add(item.getUrl());\n  }\n  final List<InfoItem> relatedItems=info.getRelatedStreams();\n  if (relatedItems == null) {\n    return null;\n  }\n  if (relatedItems.get(0) != null && relatedItems.get(0) instanceof StreamInfoItem && !urls.contains(relatedItems.get(0).getUrl())) {\n    return getAutoQueuedSinglePlayQueue((StreamInfoItem)relatedItems.get(0));\n  }\n  final List<StreamInfoItem> autoQueueItems=new ArrayList<>();\n  for (  final InfoItem item : relatedItems) {\n    if (item instanceof StreamInfoItem && !urls.contains(item.getUrl())) {\n      autoQueueItems.add((StreamInfoItem)item);\n    }\n  }\n  Collections.shuffle(autoQueueItems);\n  return autoQueueItems.isEmpty() ? null : getAutoQueuedSinglePlayQueue(autoQueueItems.get(0));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 174,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 190,
        "startColumnNumber" : 8,
        "endLineNumber" : 190,
        "endColumnNumber" : 44
      },
      "nodeContext" : "Collections.shuffle(autoQueueItems);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.List<org.schabi.newpipe.player.helper.StreamInfoItem>"
  }, {
    "nodeContext" : "autoQueueItems",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 191,
      "startColumnNumber" : 15,
      "endLineNumber" : 191,
      "endColumnNumber" : 29
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 191,
        "startColumnNumber" : 15,
        "endLineNumber" : 191,
        "endColumnNumber" : 39
      },
      "nodeContext" : "autoQueueItems.isEmpty()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 191,
        "startColumnNumber" : 15,
        "endLineNumber" : 192,
        "endColumnNumber" : 76
      },
      "nodeContext" : "autoQueueItems.isEmpty() ? null : getAutoQueuedSinglePlayQueue(autoQueueItems.get(0))",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 191,
        "startColumnNumber" : 8,
        "endLineNumber" : 192,
        "endColumnNumber" : 77
      },
      "nodeContext" : "return autoQueueItems.isEmpty() ? null : getAutoQueuedSinglePlayQueue(autoQueueItems.get(0));\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1030,
        "startLineNumber" : 167,
        "startColumnNumber" : 90,
        "endLineNumber" : 193,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final Set<String> urls=new HashSet<>(existingItems.size());\n  for (  final PlayQueueItem item : existingItems) {\n    urls.add(item.getUrl());\n  }\n  final List<InfoItem> relatedItems=info.getRelatedStreams();\n  if (relatedItems == null) {\n    return null;\n  }\n  if (relatedItems.get(0) != null && relatedItems.get(0) instanceof StreamInfoItem && !urls.contains(relatedItems.get(0).getUrl())) {\n    return getAutoQueuedSinglePlayQueue((StreamInfoItem)relatedItems.get(0));\n  }\n  final List<StreamInfoItem> autoQueueItems=new ArrayList<>();\n  for (  final InfoItem item : relatedItems) {\n    if (item instanceof StreamInfoItem && !urls.contains(item.getUrl())) {\n      autoQueueItems.add((StreamInfoItem)item);\n    }\n  }\n  Collections.shuffle(autoQueueItems);\n  return autoQueueItems.isEmpty() ? null : getAutoQueuedSinglePlayQueue(autoQueueItems.get(0));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 148,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2058,
        "startLineNumber" : 147,
        "startColumnNumber" : 4,
        "endLineNumber" : 193,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Given a  {@link StreamInfo} and the existing queue items,provide the  {@link SinglePlayQueue} consisting of the next video for auto queueing.<p> This method detects and prevents cycles by naively checking if a candidate next video's url already exists in the existing items. </p> <p> The first item in  {@link StreamInfo#getRelatedStreams()} is checked first.If it is non-null and is not part of the existing items, it will be used as the next stream. Otherwise, a random item with non-repeating url will be selected from the  {@link StreamInfo#getRelatedStreams()}. </p>\n * @param info          currently playing stream\n * @param existingItems existing items in the queue\n * @return {@link SinglePlayQueue} with the next stream to queue\n */\n@Nullable public static PlayQueue autoQueueOf(@NonNull final StreamInfo info,@NonNull final List<PlayQueueItem> existingItems){\n  final Set<String> urls=new HashSet<>(existingItems.size());\n  for (  final PlayQueueItem item : existingItems) {\n    urls.add(item.getUrl());\n  }\n  final List<InfoItem> relatedItems=info.getRelatedStreams();\n  if (relatedItems == null) {\n    return null;\n  }\n  if (relatedItems.get(0) != null && relatedItems.get(0) instanceof StreamInfoItem && !urls.contains(relatedItems.get(0).getUrl())) {\n    return getAutoQueuedSinglePlayQueue((StreamInfoItem)relatedItems.get(0));\n  }\n  final List<StreamInfoItem> autoQueueItems=new ArrayList<>();\n  for (  final InfoItem item : relatedItems) {\n    if (item instanceof StreamInfoItem && !urls.contains(item.getUrl())) {\n      autoQueueItems.add((StreamInfoItem)item);\n    }\n  }\n  Collections.shuffle(autoQueueItems);\n  return autoQueueItems.isEmpty() ? null : getAutoQueuedSinglePlayQueue(autoQueueItems.get(0));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 174,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,expression]",
      "nodePosition" : {
        "charLength" : 24,
        "startLineNumber" : 191,
        "startColumnNumber" : 15,
        "endLineNumber" : 191,
        "endColumnNumber" : 39
      },
      "nodeContext" : "autoQueueItems.isEmpty()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.util.List<org.schabi.newpipe.player.helper.StreamInfoItem>"
  }, {
    "nodeContext" : "autoQueueItems",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 192,
      "startColumnNumber" : 54,
      "endLineNumber" : 192,
      "endColumnNumber" : 68
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 192,
        "startColumnNumber" : 54,
        "endLineNumber" : 192,
        "endColumnNumber" : 75
      },
      "nodeContext" : "autoQueueItems.get(0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,elseExpression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 192,
        "startColumnNumber" : 25,
        "endLineNumber" : 192,
        "endColumnNumber" : 76
      },
      "nodeContext" : "getAutoQueuedSinglePlayQueue(autoQueueItems.get(0))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]",
      "nodePosition" : {
        "charLength" : 101,
        "startLineNumber" : 191,
        "startColumnNumber" : 15,
        "endLineNumber" : 192,
        "endColumnNumber" : 76
      },
      "nodeContext" : "autoQueueItems.isEmpty() ? null : getAutoQueuedSinglePlayQueue(autoQueueItems.get(0))",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 191,
        "startColumnNumber" : 8,
        "endLineNumber" : 192,
        "endColumnNumber" : 77
      },
      "nodeContext" : "return autoQueueItems.isEmpty() ? null : getAutoQueuedSinglePlayQueue(autoQueueItems.get(0));\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1030,
        "startLineNumber" : 167,
        "startColumnNumber" : 90,
        "endLineNumber" : 193,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  final Set<String> urls=new HashSet<>(existingItems.size());\n  for (  final PlayQueueItem item : existingItems) {\n    urls.add(item.getUrl());\n  }\n  final List<InfoItem> relatedItems=info.getRelatedStreams();\n  if (relatedItems == null) {\n    return null;\n  }\n  if (relatedItems.get(0) != null && relatedItems.get(0) instanceof StreamInfoItem && !urls.contains(relatedItems.get(0).getUrl())) {\n    return getAutoQueuedSinglePlayQueue((StreamInfoItem)relatedItems.get(0));\n  }\n  final List<StreamInfoItem> autoQueueItems=new ArrayList<>();\n  for (  final InfoItem item : relatedItems) {\n    if (item instanceof StreamInfoItem && !urls.contains(item.getUrl())) {\n      autoQueueItems.add((StreamInfoItem)item);\n    }\n  }\n  Collections.shuffle(autoQueueItems);\n  return autoQueueItems.isEmpty() ? null : getAutoQueuedSinglePlayQueue(autoQueueItems.get(0));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 148,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2058,
        "startLineNumber" : 147,
        "startColumnNumber" : 4,
        "endLineNumber" : 193,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Given a  {@link StreamInfo} and the existing queue items,provide the  {@link SinglePlayQueue} consisting of the next video for auto queueing.<p> This method detects and prevents cycles by naively checking if a candidate next video's url already exists in the existing items. </p> <p> The first item in  {@link StreamInfo#getRelatedStreams()} is checked first.If it is non-null and is not part of the existing items, it will be used as the next stream. Otherwise, a random item with non-repeating url will be selected from the  {@link StreamInfo#getRelatedStreams()}. </p>\n * @param info          currently playing stream\n * @param existingItems existing items in the queue\n * @return {@link SinglePlayQueue} with the next stream to queue\n */\n@Nullable public static PlayQueue autoQueueOf(@NonNull final StreamInfo info,@NonNull final List<PlayQueueItem> existingItems){\n  final Set<String> urls=new HashSet<>(existingItems.size());\n  for (  final PlayQueueItem item : existingItems) {\n    urls.add(item.getUrl());\n  }\n  final List<InfoItem> relatedItems=info.getRelatedStreams();\n  if (relatedItems == null) {\n    return null;\n  }\n  if (relatedItems.get(0) != null && relatedItems.get(0) instanceof StreamInfoItem && !urls.contains(relatedItems.get(0).getUrl())) {\n    return getAutoQueuedSinglePlayQueue((StreamInfoItem)relatedItems.get(0));\n  }\n  final List<StreamInfoItem> autoQueueItems=new ArrayList<>();\n  for (  final InfoItem item : relatedItems) {\n    if (item instanceof StreamInfoItem && !urls.contains(item.getUrl())) {\n      autoQueueItems.add((StreamInfoItem)item);\n    }\n  }\n  Collections.shuffle(autoQueueItems);\n  return autoQueueItems.isEmpty() ? null : getAutoQueuedSinglePlayQueue(autoQueueItems.get(0));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 174,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,elseExpression]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 192,
        "startColumnNumber" : 25,
        "endLineNumber" : 192,
        "endColumnNumber" : 76
      },
      "nodeContext" : "getAutoQueuedSinglePlayQueue(autoQueueItems.get(0))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.List<org.schabi.newpipe.player.helper.StreamInfoItem>"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 186,
    "startColumnNumber" : 16,
    "endLineNumber" : 186,
    "endColumnNumber" : 30
  }, {
    "charLength" : 14,
    "startLineNumber" : 190,
    "startColumnNumber" : 28,
    "endLineNumber" : 190,
    "endColumnNumber" : 42
  }, {
    "charLength" : 14,
    "startLineNumber" : 191,
    "startColumnNumber" : 15,
    "endLineNumber" : 191,
    "endColumnNumber" : 29
  }, {
    "charLength" : 14,
    "startLineNumber" : 192,
    "startColumnNumber" : 54,
    "endLineNumber" : 192,
    "endColumnNumber" : 68
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 2
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 1
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 2
  } ]
}