{
  "id" : 97,
  "expression" : "Sensor",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/clients/src/test/java/org/apache/kafka/common/metrics/SensorTest.java",
  "occurrences" : 22,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Sensor",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 60,
      "startColumnNumber" : 8,
      "endLineNumber" : 60,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 60,
        "startColumnNumber" : 8,
        "endLineNumber" : 60,
        "endColumnNumber" : 29
      },
      "nodeContext" : "Sensor.RecordingLevel",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,type]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 60,
        "startColumnNumber" : 8,
        "endLineNumber" : 60,
        "endColumnNumber" : 29
      },
      "nodeContext" : "Sensor.RecordingLevel",
      "nodeType" : "SimpleType",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 60,
        "startColumnNumber" : 8,
        "endLineNumber" : 60,
        "endColumnNumber" : 71
      },
      "nodeContext" : "Sensor.RecordingLevel configLevel=Sensor.RecordingLevel.INFO;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1286,
        "startLineNumber" : 59,
        "startColumnNumber" : 38,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Sensor.RecordingLevel configLevel=Sensor.RecordingLevel.INFO;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.DEBUG;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.TRACE;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.DEBUG.toString()),Sensor.RecordingLevel.DEBUG);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.INFO.toString()),Sensor.RecordingLevel.INFO);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.TRACE.toString()),Sensor.RecordingLevel.TRACE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1330,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRecordLevelEnum(){\n  Sensor.RecordingLevel configLevel=Sensor.RecordingLevel.INFO;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.DEBUG;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.TRACE;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.DEBUG.toString()),Sensor.RecordingLevel.DEBUG);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.INFO.toString()),Sensor.RecordingLevel.INFO);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.TRACE.toString()),Sensor.RecordingLevel.TRACE);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 212,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 60,
        "startColumnNumber" : 8,
        "endLineNumber" : 60,
        "endColumnNumber" : 71
      },
      "nodeContext" : "Sensor.RecordingLevel configLevel=Sensor.RecordingLevel.INFO;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.kafka.common.metrics.Sensor"
  }, {
    "nodeContext" : "Sensor",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 60,
      "startColumnNumber" : 44,
      "endLineNumber" : 60,
      "endColumnNumber" : 50
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 60,
        "startColumnNumber" : 44,
        "endLineNumber" : 60,
        "endColumnNumber" : 65
      },
      "nodeContext" : "Sensor.RecordingLevel",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 60,
        "startColumnNumber" : 44,
        "endLineNumber" : 60,
        "endColumnNumber" : 70
      },
      "nodeContext" : "Sensor.RecordingLevel.INFO",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 60,
        "startColumnNumber" : 30,
        "endLineNumber" : 60,
        "endColumnNumber" : 70
      },
      "nodeContext" : "configLevel=Sensor.RecordingLevel.INFO",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 60,
        "startColumnNumber" : 8,
        "endLineNumber" : 60,
        "endColumnNumber" : 71
      },
      "nodeContext" : "Sensor.RecordingLevel configLevel=Sensor.RecordingLevel.INFO;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1286,
        "startLineNumber" : 59,
        "startColumnNumber" : 38,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Sensor.RecordingLevel configLevel=Sensor.RecordingLevel.INFO;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.DEBUG;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.TRACE;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.DEBUG.toString()),Sensor.RecordingLevel.DEBUG);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.INFO.toString()),Sensor.RecordingLevel.INFO);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.TRACE.toString()),Sensor.RecordingLevel.TRACE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1330,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRecordLevelEnum(){\n  Sensor.RecordingLevel configLevel=Sensor.RecordingLevel.INFO;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.DEBUG;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.TRACE;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.DEBUG.toString()),Sensor.RecordingLevel.DEBUG);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.INFO.toString()),Sensor.RecordingLevel.INFO);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.TRACE.toString()),Sensor.RecordingLevel.TRACE);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 212,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 63,
        "startLineNumber" : 60,
        "startColumnNumber" : 8,
        "endLineNumber" : 60,
        "endColumnNumber" : 71
      },
      "nodeContext" : "Sensor.RecordingLevel configLevel=Sensor.RecordingLevel.INFO;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.kafka.common.metrics.Sensor"
  }, {
    "nodeContext" : "Sensor",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 61,
      "startColumnNumber" : 19,
      "endLineNumber" : 61,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 61,
        "startColumnNumber" : 19,
        "endLineNumber" : 61,
        "endColumnNumber" : 40
      },
      "nodeContext" : "Sensor.RecordingLevel",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 61,
        "startColumnNumber" : 19,
        "endLineNumber" : 61,
        "endColumnNumber" : 45
      },
      "nodeContext" : "Sensor.RecordingLevel.INFO",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 61,
        "startColumnNumber" : 19,
        "endLineNumber" : 61,
        "endColumnNumber" : 74
      },
      "nodeContext" : "Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 61,
        "startColumnNumber" : 8,
        "endLineNumber" : 61,
        "endColumnNumber" : 75
      },
      "nodeContext" : "assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 61,
        "startColumnNumber" : 8,
        "endLineNumber" : 61,
        "endColumnNumber" : 76
      },
      "nodeContext" : "assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1286,
        "startLineNumber" : 59,
        "startColumnNumber" : 38,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Sensor.RecordingLevel configLevel=Sensor.RecordingLevel.INFO;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.DEBUG;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.TRACE;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.DEBUG.toString()),Sensor.RecordingLevel.DEBUG);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.INFO.toString()),Sensor.RecordingLevel.INFO);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.TRACE.toString()),Sensor.RecordingLevel.TRACE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1330,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRecordLevelEnum(){\n  Sensor.RecordingLevel configLevel=Sensor.RecordingLevel.INFO;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.DEBUG;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.TRACE;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.DEBUG.toString()),Sensor.RecordingLevel.DEBUG);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.INFO.toString()),Sensor.RecordingLevel.INFO);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.TRACE.toString()),Sensor.RecordingLevel.TRACE);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 212,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 61,
        "startColumnNumber" : 8,
        "endLineNumber" : 61,
        "endColumnNumber" : 76
      },
      "nodeContext" : "assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "org.apache.kafka.common.metrics.Sensor"
  }, {
    "nodeContext" : "Sensor",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 62,
      "startColumnNumber" : 20,
      "endLineNumber" : 62,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 62,
        "startColumnNumber" : 20,
        "endLineNumber" : 62,
        "endColumnNumber" : 41
      },
      "nodeContext" : "Sensor.RecordingLevel",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 62,
        "startColumnNumber" : 20,
        "endLineNumber" : 62,
        "endColumnNumber" : 47
      },
      "nodeContext" : "Sensor.RecordingLevel.DEBUG",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 62,
        "startColumnNumber" : 20,
        "endLineNumber" : 62,
        "endColumnNumber" : 76
      },
      "nodeContext" : "Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 62,
        "startColumnNumber" : 8,
        "endLineNumber" : 62,
        "endColumnNumber" : 77
      },
      "nodeContext" : "assertFalse(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 62,
        "startColumnNumber" : 8,
        "endLineNumber" : 62,
        "endColumnNumber" : 78
      },
      "nodeContext" : "assertFalse(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1286,
        "startLineNumber" : 59,
        "startColumnNumber" : 38,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Sensor.RecordingLevel configLevel=Sensor.RecordingLevel.INFO;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.DEBUG;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.TRACE;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.DEBUG.toString()),Sensor.RecordingLevel.DEBUG);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.INFO.toString()),Sensor.RecordingLevel.INFO);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.TRACE.toString()),Sensor.RecordingLevel.TRACE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1330,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRecordLevelEnum(){\n  Sensor.RecordingLevel configLevel=Sensor.RecordingLevel.INFO;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.DEBUG;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.TRACE;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.DEBUG.toString()),Sensor.RecordingLevel.DEBUG);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.INFO.toString()),Sensor.RecordingLevel.INFO);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.TRACE.toString()),Sensor.RecordingLevel.TRACE);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 212,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 62,
        "startColumnNumber" : 8,
        "endLineNumber" : 62,
        "endColumnNumber" : 78
      },
      "nodeContext" : "assertFalse(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "org.apache.kafka.common.metrics.Sensor"
  }, {
    "nodeContext" : "Sensor",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 63,
      "startColumnNumber" : 20,
      "endLineNumber" : 63,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 63,
        "startColumnNumber" : 20,
        "endLineNumber" : 63,
        "endColumnNumber" : 41
      },
      "nodeContext" : "Sensor.RecordingLevel",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 63,
        "startColumnNumber" : 20,
        "endLineNumber" : 63,
        "endColumnNumber" : 47
      },
      "nodeContext" : "Sensor.RecordingLevel.TRACE",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 63,
        "startColumnNumber" : 20,
        "endLineNumber" : 63,
        "endColumnNumber" : 76
      },
      "nodeContext" : "Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 63,
        "endColumnNumber" : 77
      },
      "nodeContext" : "assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 63,
        "endColumnNumber" : 78
      },
      "nodeContext" : "assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1286,
        "startLineNumber" : 59,
        "startColumnNumber" : 38,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Sensor.RecordingLevel configLevel=Sensor.RecordingLevel.INFO;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.DEBUG;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.TRACE;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.DEBUG.toString()),Sensor.RecordingLevel.DEBUG);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.INFO.toString()),Sensor.RecordingLevel.INFO);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.TRACE.toString()),Sensor.RecordingLevel.TRACE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1330,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRecordLevelEnum(){\n  Sensor.RecordingLevel configLevel=Sensor.RecordingLevel.INFO;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.DEBUG;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.TRACE;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.DEBUG.toString()),Sensor.RecordingLevel.DEBUG);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.INFO.toString()),Sensor.RecordingLevel.INFO);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.TRACE.toString()),Sensor.RecordingLevel.TRACE);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 212,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 63,
        "startColumnNumber" : 8,
        "endLineNumber" : 63,
        "endColumnNumber" : 78
      },
      "nodeContext" : "assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "org.apache.kafka.common.metrics.Sensor"
  }, {
    "nodeContext" : "Sensor",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 65,
      "startColumnNumber" : 22,
      "endLineNumber" : 65,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 65,
        "startColumnNumber" : 22,
        "endLineNumber" : 65,
        "endColumnNumber" : 43
      },
      "nodeContext" : "Sensor.RecordingLevel",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 65,
        "startColumnNumber" : 22,
        "endLineNumber" : 65,
        "endColumnNumber" : 49
      },
      "nodeContext" : "Sensor.RecordingLevel.DEBUG",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 65,
        "startColumnNumber" : 8,
        "endLineNumber" : 65,
        "endColumnNumber" : 49
      },
      "nodeContext" : "configLevel=Sensor.RecordingLevel.DEBUG",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 65,
        "startColumnNumber" : 8,
        "endLineNumber" : 65,
        "endColumnNumber" : 50
      },
      "nodeContext" : "configLevel=Sensor.RecordingLevel.DEBUG;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1286,
        "startLineNumber" : 59,
        "startColumnNumber" : 38,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Sensor.RecordingLevel configLevel=Sensor.RecordingLevel.INFO;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.DEBUG;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.TRACE;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.DEBUG.toString()),Sensor.RecordingLevel.DEBUG);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.INFO.toString()),Sensor.RecordingLevel.INFO);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.TRACE.toString()),Sensor.RecordingLevel.TRACE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1330,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRecordLevelEnum(){\n  Sensor.RecordingLevel configLevel=Sensor.RecordingLevel.INFO;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.DEBUG;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.TRACE;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.DEBUG.toString()),Sensor.RecordingLevel.DEBUG);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.INFO.toString()),Sensor.RecordingLevel.INFO);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.TRACE.toString()),Sensor.RecordingLevel.TRACE);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 212,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 65,
        "startColumnNumber" : 8,
        "endLineNumber" : 65,
        "endColumnNumber" : 50
      },
      "nodeContext" : "configLevel=Sensor.RecordingLevel.DEBUG;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.kafka.common.metrics.Sensor"
  }, {
    "nodeContext" : "Sensor",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 66,
      "startColumnNumber" : 19,
      "endLineNumber" : 66,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 66,
        "startColumnNumber" : 19,
        "endLineNumber" : 66,
        "endColumnNumber" : 40
      },
      "nodeContext" : "Sensor.RecordingLevel",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 66,
        "startColumnNumber" : 19,
        "endLineNumber" : 66,
        "endColumnNumber" : 45
      },
      "nodeContext" : "Sensor.RecordingLevel.INFO",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 66,
        "startColumnNumber" : 19,
        "endLineNumber" : 66,
        "endColumnNumber" : 74
      },
      "nodeContext" : "Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 66,
        "startColumnNumber" : 8,
        "endLineNumber" : 66,
        "endColumnNumber" : 75
      },
      "nodeContext" : "assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 66,
        "startColumnNumber" : 8,
        "endLineNumber" : 66,
        "endColumnNumber" : 76
      },
      "nodeContext" : "assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1286,
        "startLineNumber" : 59,
        "startColumnNumber" : 38,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Sensor.RecordingLevel configLevel=Sensor.RecordingLevel.INFO;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.DEBUG;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.TRACE;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.DEBUG.toString()),Sensor.RecordingLevel.DEBUG);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.INFO.toString()),Sensor.RecordingLevel.INFO);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.TRACE.toString()),Sensor.RecordingLevel.TRACE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1330,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRecordLevelEnum(){\n  Sensor.RecordingLevel configLevel=Sensor.RecordingLevel.INFO;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.DEBUG;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.TRACE;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.DEBUG.toString()),Sensor.RecordingLevel.DEBUG);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.INFO.toString()),Sensor.RecordingLevel.INFO);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.TRACE.toString()),Sensor.RecordingLevel.TRACE);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 212,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 66,
        "startColumnNumber" : 8,
        "endLineNumber" : 66,
        "endColumnNumber" : 76
      },
      "nodeContext" : "assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "org.apache.kafka.common.metrics.Sensor"
  }, {
    "nodeContext" : "Sensor",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 67,
      "startColumnNumber" : 19,
      "endLineNumber" : 67,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 67,
        "startColumnNumber" : 19,
        "endLineNumber" : 67,
        "endColumnNumber" : 40
      },
      "nodeContext" : "Sensor.RecordingLevel",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 67,
        "startColumnNumber" : 19,
        "endLineNumber" : 67,
        "endColumnNumber" : 46
      },
      "nodeContext" : "Sensor.RecordingLevel.DEBUG",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 67,
        "startColumnNumber" : 19,
        "endLineNumber" : 67,
        "endColumnNumber" : 75
      },
      "nodeContext" : "Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 67,
        "startColumnNumber" : 8,
        "endLineNumber" : 67,
        "endColumnNumber" : 76
      },
      "nodeContext" : "assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 67,
        "startColumnNumber" : 8,
        "endLineNumber" : 67,
        "endColumnNumber" : 77
      },
      "nodeContext" : "assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1286,
        "startLineNumber" : 59,
        "startColumnNumber" : 38,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Sensor.RecordingLevel configLevel=Sensor.RecordingLevel.INFO;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.DEBUG;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.TRACE;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.DEBUG.toString()),Sensor.RecordingLevel.DEBUG);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.INFO.toString()),Sensor.RecordingLevel.INFO);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.TRACE.toString()),Sensor.RecordingLevel.TRACE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1330,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRecordLevelEnum(){\n  Sensor.RecordingLevel configLevel=Sensor.RecordingLevel.INFO;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.DEBUG;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.TRACE;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.DEBUG.toString()),Sensor.RecordingLevel.DEBUG);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.INFO.toString()),Sensor.RecordingLevel.INFO);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.TRACE.toString()),Sensor.RecordingLevel.TRACE);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 212,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 67,
        "startColumnNumber" : 8,
        "endLineNumber" : 67,
        "endColumnNumber" : 77
      },
      "nodeContext" : "assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "org.apache.kafka.common.metrics.Sensor"
  }, {
    "nodeContext" : "Sensor",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 68,
      "startColumnNumber" : 20,
      "endLineNumber" : 68,
      "endColumnNumber" : 26
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 68,
        "startColumnNumber" : 20,
        "endLineNumber" : 68,
        "endColumnNumber" : 41
      },
      "nodeContext" : "Sensor.RecordingLevel",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 68,
        "startColumnNumber" : 20,
        "endLineNumber" : 68,
        "endColumnNumber" : 47
      },
      "nodeContext" : "Sensor.RecordingLevel.TRACE",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 68,
        "startColumnNumber" : 20,
        "endLineNumber" : 68,
        "endColumnNumber" : 76
      },
      "nodeContext" : "Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 68,
        "startColumnNumber" : 8,
        "endLineNumber" : 68,
        "endColumnNumber" : 77
      },
      "nodeContext" : "assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 68,
        "startColumnNumber" : 8,
        "endLineNumber" : 68,
        "endColumnNumber" : 78
      },
      "nodeContext" : "assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1286,
        "startLineNumber" : 59,
        "startColumnNumber" : 38,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Sensor.RecordingLevel configLevel=Sensor.RecordingLevel.INFO;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.DEBUG;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.TRACE;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.DEBUG.toString()),Sensor.RecordingLevel.DEBUG);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.INFO.toString()),Sensor.RecordingLevel.INFO);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.TRACE.toString()),Sensor.RecordingLevel.TRACE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1330,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRecordLevelEnum(){\n  Sensor.RecordingLevel configLevel=Sensor.RecordingLevel.INFO;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.DEBUG;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.TRACE;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.DEBUG.toString()),Sensor.RecordingLevel.DEBUG);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.INFO.toString()),Sensor.RecordingLevel.INFO);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.TRACE.toString()),Sensor.RecordingLevel.TRACE);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 212,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 68,
        "startColumnNumber" : 8,
        "endLineNumber" : 68,
        "endColumnNumber" : 78
      },
      "nodeContext" : "assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "org.apache.kafka.common.metrics.Sensor"
  }, {
    "nodeContext" : "Sensor",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 70,
      "startColumnNumber" : 22,
      "endLineNumber" : 70,
      "endColumnNumber" : 28
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 70,
        "startColumnNumber" : 22,
        "endLineNumber" : 70,
        "endColumnNumber" : 43
      },
      "nodeContext" : "Sensor.RecordingLevel",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 70,
        "startColumnNumber" : 22,
        "endLineNumber" : 70,
        "endColumnNumber" : 49
      },
      "nodeContext" : "Sensor.RecordingLevel.TRACE",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 41,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 70,
        "endColumnNumber" : 49
      },
      "nodeContext" : "configLevel=Sensor.RecordingLevel.TRACE",
      "nodeType" : "Assignment",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 70,
        "endColumnNumber" : 50
      },
      "nodeContext" : "configLevel=Sensor.RecordingLevel.TRACE;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1286,
        "startLineNumber" : 59,
        "startColumnNumber" : 38,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Sensor.RecordingLevel configLevel=Sensor.RecordingLevel.INFO;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.DEBUG;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.TRACE;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.DEBUG.toString()),Sensor.RecordingLevel.DEBUG);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.INFO.toString()),Sensor.RecordingLevel.INFO);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.TRACE.toString()),Sensor.RecordingLevel.TRACE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1330,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRecordLevelEnum(){\n  Sensor.RecordingLevel configLevel=Sensor.RecordingLevel.INFO;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.DEBUG;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.TRACE;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.DEBUG.toString()),Sensor.RecordingLevel.DEBUG);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.INFO.toString()),Sensor.RecordingLevel.INFO);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.TRACE.toString()),Sensor.RecordingLevel.TRACE);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 212,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 42,
        "startLineNumber" : 70,
        "startColumnNumber" : 8,
        "endLineNumber" : 70,
        "endColumnNumber" : 50
      },
      "nodeContext" : "configLevel=Sensor.RecordingLevel.TRACE;\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.kafka.common.metrics.Sensor"
  }, {
    "nodeContext" : "Sensor",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 71,
      "startColumnNumber" : 19,
      "endLineNumber" : 71,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 71,
        "startColumnNumber" : 19,
        "endLineNumber" : 71,
        "endColumnNumber" : 40
      },
      "nodeContext" : "Sensor.RecordingLevel",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 71,
        "startColumnNumber" : 19,
        "endLineNumber" : 71,
        "endColumnNumber" : 45
      },
      "nodeContext" : "Sensor.RecordingLevel.INFO",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 55,
        "startLineNumber" : 71,
        "startColumnNumber" : 19,
        "endLineNumber" : 71,
        "endColumnNumber" : 74
      },
      "nodeContext" : "Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 67,
        "startLineNumber" : 71,
        "startColumnNumber" : 8,
        "endLineNumber" : 71,
        "endColumnNumber" : 75
      },
      "nodeContext" : "assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 71,
        "startColumnNumber" : 8,
        "endLineNumber" : 71,
        "endColumnNumber" : 76
      },
      "nodeContext" : "assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1286,
        "startLineNumber" : 59,
        "startColumnNumber" : 38,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Sensor.RecordingLevel configLevel=Sensor.RecordingLevel.INFO;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.DEBUG;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.TRACE;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.DEBUG.toString()),Sensor.RecordingLevel.DEBUG);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.INFO.toString()),Sensor.RecordingLevel.INFO);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.TRACE.toString()),Sensor.RecordingLevel.TRACE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1330,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRecordLevelEnum(){\n  Sensor.RecordingLevel configLevel=Sensor.RecordingLevel.INFO;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.DEBUG;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.TRACE;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.DEBUG.toString()),Sensor.RecordingLevel.DEBUG);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.INFO.toString()),Sensor.RecordingLevel.INFO);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.TRACE.toString()),Sensor.RecordingLevel.TRACE);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 212,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 71,
        "startColumnNumber" : 8,
        "endLineNumber" : 71,
        "endColumnNumber" : 76
      },
      "nodeContext" : "assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "org.apache.kafka.common.metrics.Sensor"
  }, {
    "nodeContext" : "Sensor",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 72,
      "startColumnNumber" : 19,
      "endLineNumber" : 72,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 72,
        "startColumnNumber" : 19,
        "endLineNumber" : 72,
        "endColumnNumber" : 40
      },
      "nodeContext" : "Sensor.RecordingLevel",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 72,
        "startColumnNumber" : 19,
        "endLineNumber" : 72,
        "endColumnNumber" : 46
      },
      "nodeContext" : "Sensor.RecordingLevel.DEBUG",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 72,
        "startColumnNumber" : 19,
        "endLineNumber" : 72,
        "endColumnNumber" : 75
      },
      "nodeContext" : "Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 72,
        "startColumnNumber" : 8,
        "endLineNumber" : 72,
        "endColumnNumber" : 76
      },
      "nodeContext" : "assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 72,
        "startColumnNumber" : 8,
        "endLineNumber" : 72,
        "endColumnNumber" : 77
      },
      "nodeContext" : "assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1286,
        "startLineNumber" : 59,
        "startColumnNumber" : 38,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Sensor.RecordingLevel configLevel=Sensor.RecordingLevel.INFO;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.DEBUG;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.TRACE;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.DEBUG.toString()),Sensor.RecordingLevel.DEBUG);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.INFO.toString()),Sensor.RecordingLevel.INFO);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.TRACE.toString()),Sensor.RecordingLevel.TRACE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1330,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRecordLevelEnum(){\n  Sensor.RecordingLevel configLevel=Sensor.RecordingLevel.INFO;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.DEBUG;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.TRACE;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.DEBUG.toString()),Sensor.RecordingLevel.DEBUG);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.INFO.toString()),Sensor.RecordingLevel.INFO);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.TRACE.toString()),Sensor.RecordingLevel.TRACE);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 212,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 72,
        "startColumnNumber" : 8,
        "endLineNumber" : 72,
        "endColumnNumber" : 77
      },
      "nodeContext" : "assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "org.apache.kafka.common.metrics.Sensor"
  }, {
    "nodeContext" : "Sensor",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 73,
      "startColumnNumber" : 19,
      "endLineNumber" : 73,
      "endColumnNumber" : 25
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 73,
        "startColumnNumber" : 19,
        "endLineNumber" : 73,
        "endColumnNumber" : 40
      },
      "nodeContext" : "Sensor.RecordingLevel",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 73,
        "startColumnNumber" : 19,
        "endLineNumber" : 73,
        "endColumnNumber" : 46
      },
      "nodeContext" : "Sensor.RecordingLevel.TRACE",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 56,
        "startLineNumber" : 73,
        "startColumnNumber" : 19,
        "endLineNumber" : 73,
        "endColumnNumber" : 75
      },
      "nodeContext" : "Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 73,
        "startColumnNumber" : 8,
        "endLineNumber" : 73,
        "endColumnNumber" : 76
      },
      "nodeContext" : "assertTrue(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 73,
        "startColumnNumber" : 8,
        "endLineNumber" : 73,
        "endColumnNumber" : 77
      },
      "nodeContext" : "assertTrue(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1286,
        "startLineNumber" : 59,
        "startColumnNumber" : 38,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Sensor.RecordingLevel configLevel=Sensor.RecordingLevel.INFO;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.DEBUG;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.TRACE;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.DEBUG.toString()),Sensor.RecordingLevel.DEBUG);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.INFO.toString()),Sensor.RecordingLevel.INFO);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.TRACE.toString()),Sensor.RecordingLevel.TRACE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1330,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRecordLevelEnum(){\n  Sensor.RecordingLevel configLevel=Sensor.RecordingLevel.INFO;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.DEBUG;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.TRACE;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.DEBUG.toString()),Sensor.RecordingLevel.DEBUG);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.INFO.toString()),Sensor.RecordingLevel.INFO);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.TRACE.toString()),Sensor.RecordingLevel.TRACE);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 212,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 73,
        "startColumnNumber" : 8,
        "endLineNumber" : 73,
        "endColumnNumber" : 77
      },
      "nodeContext" : "assertTrue(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "org.apache.kafka.common.metrics.Sensor"
  }, {
    "nodeContext" : "Sensor",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 75,
      "startColumnNumber" : 21,
      "endLineNumber" : 75,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 75,
        "startColumnNumber" : 21,
        "endLineNumber" : 75,
        "endColumnNumber" : 42
      },
      "nodeContext" : "Sensor.RecordingLevel",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 75,
        "startColumnNumber" : 21,
        "endLineNumber" : 75,
        "endColumnNumber" : 90
      },
      "nodeContext" : "Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.DEBUG.toString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 75,
        "startColumnNumber" : 8,
        "endLineNumber" : 76,
        "endColumnNumber" : 40
      },
      "nodeContext" : "assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.DEBUG.toString()),Sensor.RecordingLevel.DEBUG)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 125,
        "startLineNumber" : 75,
        "startColumnNumber" : 8,
        "endLineNumber" : 76,
        "endColumnNumber" : 41
      },
      "nodeContext" : "assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.DEBUG.toString()),Sensor.RecordingLevel.DEBUG);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 20,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1286,
        "startLineNumber" : 59,
        "startColumnNumber" : 38,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Sensor.RecordingLevel configLevel=Sensor.RecordingLevel.INFO;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.DEBUG;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.TRACE;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.DEBUG.toString()),Sensor.RecordingLevel.DEBUG);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.INFO.toString()),Sensor.RecordingLevel.INFO);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.TRACE.toString()),Sensor.RecordingLevel.TRACE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1330,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRecordLevelEnum(){\n  Sensor.RecordingLevel configLevel=Sensor.RecordingLevel.INFO;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.DEBUG;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.TRACE;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.DEBUG.toString()),Sensor.RecordingLevel.DEBUG);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.INFO.toString()),Sensor.RecordingLevel.INFO);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.TRACE.toString()),Sensor.RecordingLevel.TRACE);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 212,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 75,
        "startColumnNumber" : 21,
        "endLineNumber" : 75,
        "endColumnNumber" : 90
      },
      "nodeContext" : "Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.DEBUG.toString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.kafka.common.metrics.Sensor"
  }, {
    "nodeContext" : "Sensor",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 75,
      "startColumnNumber" : 51,
      "endLineNumber" : 75,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 75,
        "startColumnNumber" : 51,
        "endLineNumber" : 75,
        "endColumnNumber" : 72
      },
      "nodeContext" : "Sensor.RecordingLevel",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 75,
        "startColumnNumber" : 51,
        "endLineNumber" : 75,
        "endColumnNumber" : 78
      },
      "nodeContext" : "Sensor.RecordingLevel.DEBUG",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 75,
        "startColumnNumber" : 51,
        "endLineNumber" : 75,
        "endColumnNumber" : 89
      },
      "nodeContext" : "Sensor.RecordingLevel.DEBUG.toString()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 75,
        "startColumnNumber" : 21,
        "endLineNumber" : 75,
        "endColumnNumber" : 90
      },
      "nodeContext" : "Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.DEBUG.toString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 75,
        "startColumnNumber" : 8,
        "endLineNumber" : 76,
        "endColumnNumber" : 40
      },
      "nodeContext" : "assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.DEBUG.toString()),Sensor.RecordingLevel.DEBUG)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 125,
        "startLineNumber" : 75,
        "startColumnNumber" : 8,
        "endLineNumber" : 76,
        "endColumnNumber" : 41
      },
      "nodeContext" : "assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.DEBUG.toString()),Sensor.RecordingLevel.DEBUG);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 20,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1286,
        "startLineNumber" : 59,
        "startColumnNumber" : 38,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Sensor.RecordingLevel configLevel=Sensor.RecordingLevel.INFO;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.DEBUG;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.TRACE;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.DEBUG.toString()),Sensor.RecordingLevel.DEBUG);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.INFO.toString()),Sensor.RecordingLevel.INFO);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.TRACE.toString()),Sensor.RecordingLevel.TRACE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1330,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRecordLevelEnum(){\n  Sensor.RecordingLevel configLevel=Sensor.RecordingLevel.INFO;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.DEBUG;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.TRACE;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.DEBUG.toString()),Sensor.RecordingLevel.DEBUG);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.INFO.toString()),Sensor.RecordingLevel.INFO);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.TRACE.toString()),Sensor.RecordingLevel.TRACE);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 212,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 75,
        "startColumnNumber" : 21,
        "endLineNumber" : 75,
        "endColumnNumber" : 90
      },
      "nodeContext" : "Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.DEBUG.toString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.kafka.common.metrics.Sensor"
  }, {
    "nodeContext" : "Sensor",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 76,
      "startColumnNumber" : 12,
      "endLineNumber" : 76,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 76,
        "startColumnNumber" : 12,
        "endLineNumber" : 76,
        "endColumnNumber" : 33
      },
      "nodeContext" : "Sensor.RecordingLevel",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 76,
        "startColumnNumber" : 12,
        "endLineNumber" : 76,
        "endColumnNumber" : 39
      },
      "nodeContext" : "Sensor.RecordingLevel.DEBUG",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 75,
        "startColumnNumber" : 8,
        "endLineNumber" : 76,
        "endColumnNumber" : 40
      },
      "nodeContext" : "assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.DEBUG.toString()),Sensor.RecordingLevel.DEBUG)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 125,
        "startLineNumber" : 75,
        "startColumnNumber" : 8,
        "endLineNumber" : 76,
        "endColumnNumber" : 41
      },
      "nodeContext" : "assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.DEBUG.toString()),Sensor.RecordingLevel.DEBUG);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 20,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1286,
        "startLineNumber" : 59,
        "startColumnNumber" : 38,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Sensor.RecordingLevel configLevel=Sensor.RecordingLevel.INFO;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.DEBUG;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.TRACE;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.DEBUG.toString()),Sensor.RecordingLevel.DEBUG);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.INFO.toString()),Sensor.RecordingLevel.INFO);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.TRACE.toString()),Sensor.RecordingLevel.TRACE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1330,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRecordLevelEnum(){\n  Sensor.RecordingLevel configLevel=Sensor.RecordingLevel.INFO;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.DEBUG;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.TRACE;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.DEBUG.toString()),Sensor.RecordingLevel.DEBUG);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.INFO.toString()),Sensor.RecordingLevel.INFO);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.TRACE.toString()),Sensor.RecordingLevel.TRACE);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 212,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 76,
        "startColumnNumber" : 12,
        "endLineNumber" : 76,
        "endColumnNumber" : 39
      },
      "nodeContext" : "Sensor.RecordingLevel.DEBUG",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.kafka.common.metrics.Sensor"
  }, {
    "nodeContext" : "Sensor",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 77,
      "startColumnNumber" : 21,
      "endLineNumber" : 77,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 77,
        "startColumnNumber" : 21,
        "endLineNumber" : 77,
        "endColumnNumber" : 42
      },
      "nodeContext" : "Sensor.RecordingLevel",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 77,
        "startColumnNumber" : 21,
        "endLineNumber" : 77,
        "endColumnNumber" : 89
      },
      "nodeContext" : "Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.INFO.toString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 122,
        "startLineNumber" : 77,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 39
      },
      "nodeContext" : "assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.INFO.toString()),Sensor.RecordingLevel.INFO)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 123,
        "startLineNumber" : 77,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 40
      },
      "nodeContext" : "assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.INFO.toString()),Sensor.RecordingLevel.INFO);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 20,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1286,
        "startLineNumber" : 59,
        "startColumnNumber" : 38,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Sensor.RecordingLevel configLevel=Sensor.RecordingLevel.INFO;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.DEBUG;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.TRACE;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.DEBUG.toString()),Sensor.RecordingLevel.DEBUG);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.INFO.toString()),Sensor.RecordingLevel.INFO);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.TRACE.toString()),Sensor.RecordingLevel.TRACE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1330,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRecordLevelEnum(){\n  Sensor.RecordingLevel configLevel=Sensor.RecordingLevel.INFO;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.DEBUG;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.TRACE;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.DEBUG.toString()),Sensor.RecordingLevel.DEBUG);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.INFO.toString()),Sensor.RecordingLevel.INFO);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.TRACE.toString()),Sensor.RecordingLevel.TRACE);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 212,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 77,
        "startColumnNumber" : 21,
        "endLineNumber" : 77,
        "endColumnNumber" : 89
      },
      "nodeContext" : "Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.INFO.toString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.kafka.common.metrics.Sensor"
  }, {
    "nodeContext" : "Sensor",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 77,
      "startColumnNumber" : 51,
      "endLineNumber" : 77,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 77,
        "startColumnNumber" : 51,
        "endLineNumber" : 77,
        "endColumnNumber" : 72
      },
      "nodeContext" : "Sensor.RecordingLevel",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 77,
        "startColumnNumber" : 51,
        "endLineNumber" : 77,
        "endColumnNumber" : 77
      },
      "nodeContext" : "Sensor.RecordingLevel.INFO",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 77,
        "startColumnNumber" : 51,
        "endLineNumber" : 77,
        "endColumnNumber" : 88
      },
      "nodeContext" : "Sensor.RecordingLevel.INFO.toString()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 77,
        "startColumnNumber" : 21,
        "endLineNumber" : 77,
        "endColumnNumber" : 89
      },
      "nodeContext" : "Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.INFO.toString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 122,
        "startLineNumber" : 77,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 39
      },
      "nodeContext" : "assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.INFO.toString()),Sensor.RecordingLevel.INFO)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 123,
        "startLineNumber" : 77,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 40
      },
      "nodeContext" : "assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.INFO.toString()),Sensor.RecordingLevel.INFO);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 20,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1286,
        "startLineNumber" : 59,
        "startColumnNumber" : 38,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Sensor.RecordingLevel configLevel=Sensor.RecordingLevel.INFO;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.DEBUG;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.TRACE;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.DEBUG.toString()),Sensor.RecordingLevel.DEBUG);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.INFO.toString()),Sensor.RecordingLevel.INFO);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.TRACE.toString()),Sensor.RecordingLevel.TRACE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1330,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRecordLevelEnum(){\n  Sensor.RecordingLevel configLevel=Sensor.RecordingLevel.INFO;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.DEBUG;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.TRACE;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.DEBUG.toString()),Sensor.RecordingLevel.DEBUG);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.INFO.toString()),Sensor.RecordingLevel.INFO);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.TRACE.toString()),Sensor.RecordingLevel.TRACE);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 212,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 77,
        "startColumnNumber" : 21,
        "endLineNumber" : 77,
        "endColumnNumber" : 89
      },
      "nodeContext" : "Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.INFO.toString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.kafka.common.metrics.Sensor"
  }, {
    "nodeContext" : "Sensor",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 78,
      "startColumnNumber" : 12,
      "endLineNumber" : 78,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 78,
        "startColumnNumber" : 12,
        "endLineNumber" : 78,
        "endColumnNumber" : 33
      },
      "nodeContext" : "Sensor.RecordingLevel",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 78,
        "startColumnNumber" : 12,
        "endLineNumber" : 78,
        "endColumnNumber" : 38
      },
      "nodeContext" : "Sensor.RecordingLevel.INFO",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 122,
        "startLineNumber" : 77,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 39
      },
      "nodeContext" : "assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.INFO.toString()),Sensor.RecordingLevel.INFO)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 123,
        "startLineNumber" : 77,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 40
      },
      "nodeContext" : "assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.INFO.toString()),Sensor.RecordingLevel.INFO);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 20,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1286,
        "startLineNumber" : 59,
        "startColumnNumber" : 38,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Sensor.RecordingLevel configLevel=Sensor.RecordingLevel.INFO;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.DEBUG;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.TRACE;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.DEBUG.toString()),Sensor.RecordingLevel.DEBUG);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.INFO.toString()),Sensor.RecordingLevel.INFO);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.TRACE.toString()),Sensor.RecordingLevel.TRACE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1330,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRecordLevelEnum(){\n  Sensor.RecordingLevel configLevel=Sensor.RecordingLevel.INFO;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.DEBUG;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.TRACE;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.DEBUG.toString()),Sensor.RecordingLevel.DEBUG);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.INFO.toString()),Sensor.RecordingLevel.INFO);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.TRACE.toString()),Sensor.RecordingLevel.TRACE);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 212,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 78,
        "startColumnNumber" : 12,
        "endLineNumber" : 78,
        "endColumnNumber" : 38
      },
      "nodeContext" : "Sensor.RecordingLevel.INFO",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.kafka.common.metrics.Sensor"
  }, {
    "nodeContext" : "Sensor",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 79,
      "startColumnNumber" : 21,
      "endLineNumber" : 79,
      "endColumnNumber" : 27
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 79,
        "startColumnNumber" : 21,
        "endLineNumber" : 79,
        "endColumnNumber" : 42
      },
      "nodeContext" : "Sensor.RecordingLevel",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 79,
        "startColumnNumber" : 21,
        "endLineNumber" : 79,
        "endColumnNumber" : 90
      },
      "nodeContext" : "Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.TRACE.toString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 40
      },
      "nodeContext" : "assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.TRACE.toString()),Sensor.RecordingLevel.TRACE)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 125,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 41
      },
      "nodeContext" : "assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.TRACE.toString()),Sensor.RecordingLevel.TRACE);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 20,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1286,
        "startLineNumber" : 59,
        "startColumnNumber" : 38,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Sensor.RecordingLevel configLevel=Sensor.RecordingLevel.INFO;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.DEBUG;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.TRACE;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.DEBUG.toString()),Sensor.RecordingLevel.DEBUG);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.INFO.toString()),Sensor.RecordingLevel.INFO);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.TRACE.toString()),Sensor.RecordingLevel.TRACE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1330,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRecordLevelEnum(){\n  Sensor.RecordingLevel configLevel=Sensor.RecordingLevel.INFO;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.DEBUG;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.TRACE;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.DEBUG.toString()),Sensor.RecordingLevel.DEBUG);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.INFO.toString()),Sensor.RecordingLevel.INFO);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.TRACE.toString()),Sensor.RecordingLevel.TRACE);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 212,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 79,
        "startColumnNumber" : 21,
        "endLineNumber" : 79,
        "endColumnNumber" : 90
      },
      "nodeContext" : "Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.TRACE.toString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.kafka.common.metrics.Sensor"
  }, {
    "nodeContext" : "Sensor",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 79,
      "startColumnNumber" : 51,
      "endLineNumber" : 79,
      "endColumnNumber" : 57
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 79,
        "startColumnNumber" : 51,
        "endLineNumber" : 79,
        "endColumnNumber" : 72
      },
      "nodeContext" : "Sensor.RecordingLevel",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 79,
        "startColumnNumber" : 51,
        "endLineNumber" : 79,
        "endColumnNumber" : 78
      },
      "nodeContext" : "Sensor.RecordingLevel.TRACE",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 79,
        "startColumnNumber" : 51,
        "endLineNumber" : 79,
        "endColumnNumber" : 89
      },
      "nodeContext" : "Sensor.RecordingLevel.TRACE.toString()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 79,
        "startColumnNumber" : 21,
        "endLineNumber" : 79,
        "endColumnNumber" : 90
      },
      "nodeContext" : "Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.TRACE.toString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 40
      },
      "nodeContext" : "assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.TRACE.toString()),Sensor.RecordingLevel.TRACE)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 125,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 41
      },
      "nodeContext" : "assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.TRACE.toString()),Sensor.RecordingLevel.TRACE);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 20,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1286,
        "startLineNumber" : 59,
        "startColumnNumber" : 38,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Sensor.RecordingLevel configLevel=Sensor.RecordingLevel.INFO;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.DEBUG;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.TRACE;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.DEBUG.toString()),Sensor.RecordingLevel.DEBUG);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.INFO.toString()),Sensor.RecordingLevel.INFO);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.TRACE.toString()),Sensor.RecordingLevel.TRACE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1330,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRecordLevelEnum(){\n  Sensor.RecordingLevel configLevel=Sensor.RecordingLevel.INFO;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.DEBUG;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.TRACE;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.DEBUG.toString()),Sensor.RecordingLevel.DEBUG);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.INFO.toString()),Sensor.RecordingLevel.INFO);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.TRACE.toString()),Sensor.RecordingLevel.TRACE);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 212,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 79,
        "startColumnNumber" : 21,
        "endLineNumber" : 79,
        "endColumnNumber" : 90
      },
      "nodeContext" : "Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.TRACE.toString())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "org.apache.kafka.common.metrics.Sensor"
  }, {
    "nodeContext" : "Sensor",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 80,
      "startColumnNumber" : 12,
      "endLineNumber" : 80,
      "endColumnNumber" : 18
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 80,
        "startColumnNumber" : 12,
        "endLineNumber" : 80,
        "endColumnNumber" : 33
      },
      "nodeContext" : "Sensor.RecordingLevel",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 80,
        "startColumnNumber" : 12,
        "endLineNumber" : 80,
        "endColumnNumber" : 39
      },
      "nodeContext" : "Sensor.RecordingLevel.TRACE",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 124,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 40
      },
      "nodeContext" : "assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.TRACE.toString()),Sensor.RecordingLevel.TRACE)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 19,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 125,
        "startLineNumber" : 79,
        "startColumnNumber" : 8,
        "endLineNumber" : 80,
        "endColumnNumber" : 41
      },
      "nodeContext" : "assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.TRACE.toString()),Sensor.RecordingLevel.TRACE);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 20,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1286,
        "startLineNumber" : 59,
        "startColumnNumber" : 38,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Sensor.RecordingLevel configLevel=Sensor.RecordingLevel.INFO;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.DEBUG;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.TRACE;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.DEBUG.toString()),Sensor.RecordingLevel.DEBUG);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.INFO.toString()),Sensor.RecordingLevel.INFO);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.TRACE.toString()),Sensor.RecordingLevel.TRACE);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1330,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 81,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testRecordLevelEnum(){\n  Sensor.RecordingLevel configLevel=Sensor.RecordingLevel.INFO;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.DEBUG;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertFalse(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  configLevel=Sensor.RecordingLevel.TRACE;\n  assertTrue(Sensor.RecordingLevel.INFO.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.DEBUG.shouldRecord(configLevel.id));\n  assertTrue(Sensor.RecordingLevel.TRACE.shouldRecord(configLevel.id));\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.DEBUG.toString()),Sensor.RecordingLevel.DEBUG);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.INFO.toString()),Sensor.RecordingLevel.INFO);\n  assertEquals(Sensor.RecordingLevel.valueOf(Sensor.RecordingLevel.TRACE.toString()),Sensor.RecordingLevel.TRACE);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 212,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 27,
        "startLineNumber" : 80,
        "startColumnNumber" : 12,
        "endLineNumber" : 80,
        "endColumnNumber" : 39
      },
      "nodeContext" : "Sensor.RecordingLevel.TRACE",
      "nodeType" : "QualifiedName",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.kafka.common.metrics.Sensor"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 60,
    "startColumnNumber" : 8,
    "endLineNumber" : 60,
    "endColumnNumber" : 14
  }, {
    "charLength" : 6,
    "startLineNumber" : 60,
    "startColumnNumber" : 44,
    "endLineNumber" : 60,
    "endColumnNumber" : 50
  }, {
    "charLength" : 6,
    "startLineNumber" : 61,
    "startColumnNumber" : 19,
    "endLineNumber" : 61,
    "endColumnNumber" : 25
  }, {
    "charLength" : 6,
    "startLineNumber" : 62,
    "startColumnNumber" : 20,
    "endLineNumber" : 62,
    "endColumnNumber" : 26
  }, {
    "charLength" : 6,
    "startLineNumber" : 63,
    "startColumnNumber" : 20,
    "endLineNumber" : 63,
    "endColumnNumber" : 26
  }, {
    "charLength" : 6,
    "startLineNumber" : 65,
    "startColumnNumber" : 22,
    "endLineNumber" : 65,
    "endColumnNumber" : 28
  }, {
    "charLength" : 6,
    "startLineNumber" : 66,
    "startColumnNumber" : 19,
    "endLineNumber" : 66,
    "endColumnNumber" : 25
  }, {
    "charLength" : 6,
    "startLineNumber" : 67,
    "startColumnNumber" : 19,
    "endLineNumber" : 67,
    "endColumnNumber" : 25
  }, {
    "charLength" : 6,
    "startLineNumber" : 68,
    "startColumnNumber" : 20,
    "endLineNumber" : 68,
    "endColumnNumber" : 26
  }, {
    "charLength" : 6,
    "startLineNumber" : 70,
    "startColumnNumber" : 22,
    "endLineNumber" : 70,
    "endColumnNumber" : 28
  }, {
    "charLength" : 6,
    "startLineNumber" : 71,
    "startColumnNumber" : 19,
    "endLineNumber" : 71,
    "endColumnNumber" : 25
  }, {
    "charLength" : 6,
    "startLineNumber" : 72,
    "startColumnNumber" : 19,
    "endLineNumber" : 72,
    "endColumnNumber" : 25
  }, {
    "charLength" : 6,
    "startLineNumber" : 73,
    "startColumnNumber" : 19,
    "endLineNumber" : 73,
    "endColumnNumber" : 25
  }, {
    "charLength" : 6,
    "startLineNumber" : 75,
    "startColumnNumber" : 21,
    "endLineNumber" : 75,
    "endColumnNumber" : 27
  }, {
    "charLength" : 6,
    "startLineNumber" : 75,
    "startColumnNumber" : 51,
    "endLineNumber" : 75,
    "endColumnNumber" : 57
  }, {
    "charLength" : 6,
    "startLineNumber" : 76,
    "startColumnNumber" : 12,
    "endLineNumber" : 76,
    "endColumnNumber" : 18
  }, {
    "charLength" : 6,
    "startLineNumber" : 77,
    "startColumnNumber" : 21,
    "endLineNumber" : 77,
    "endColumnNumber" : 27
  }, {
    "charLength" : 6,
    "startLineNumber" : 77,
    "startColumnNumber" : 51,
    "endLineNumber" : 77,
    "endColumnNumber" : 57
  }, {
    "charLength" : 6,
    "startLineNumber" : 78,
    "startColumnNumber" : 12,
    "endLineNumber" : 78,
    "endColumnNumber" : 18
  }, {
    "charLength" : 6,
    "startLineNumber" : 79,
    "startColumnNumber" : 21,
    "endLineNumber" : 79,
    "endColumnNumber" : 27
  }, {
    "charLength" : 6,
    "startLineNumber" : 79,
    "startColumnNumber" : 51,
    "endLineNumber" : 79,
    "endColumnNumber" : 57
  }, {
    "charLength" : 6,
    "startLineNumber" : 80,
    "startColumnNumber" : 12,
    "endLineNumber" : 80,
    "endColumnNumber" : 18
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 3,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 4,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 5,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 6,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 7,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 8,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 9,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 10,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 11,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 12,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 14,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 15,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 17,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 18,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 20,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 21,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 3,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 4,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 5,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 5,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 6,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 6,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 7,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 8,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 9,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 9,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 10,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 10,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 12,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 11,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 1,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 3,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 4,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 5,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 6,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 7,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 8,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 9,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 10,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 11,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 13,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 14,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 15,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 16,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 17,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 18,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 19,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 20,
    "layout" : 5
  }, {
    "firstKey" : 12,
    "secondKey" : 21,
    "layout" : 5
  }, {
    "firstKey" : 13,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 14,
    "layout" : 1
  }, {
    "firstKey" : 13,
    "secondKey" : 15,
    "layout" : 2
  }, {
    "firstKey" : 13,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 13,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 13,
    "layout" : 3
  }, {
    "firstKey" : 14,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 14,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 14,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 15,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 13,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 14,
    "layout" : 2
  }, {
    "firstKey" : 15,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 15,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 17,
    "layout" : 1
  }, {
    "firstKey" : 16,
    "secondKey" : 18,
    "layout" : 2
  }, {
    "firstKey" : 16,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 16,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 16,
    "layout" : 3
  }, {
    "firstKey" : 17,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 17,
    "secondKey" : 19,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 20,
    "layout" : 6
  }, {
    "firstKey" : 17,
    "secondKey" : 21,
    "layout" : 6
  }, {
    "firstKey" : 18,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 16,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 17,
    "layout" : 2
  }, {
    "firstKey" : 18,
    "secondKey" : 19,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 20,
    "layout" : 4
  }, {
    "firstKey" : 18,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 19,
    "secondKey" : 20,
    "layout" : 1
  }, {
    "firstKey" : 19,
    "secondKey" : 21,
    "layout" : 2
  }, {
    "firstKey" : 20,
    "secondKey" : 0,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 1,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 2,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 3,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 4,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 5,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 6,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 7,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 8,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 9,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 10,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 11,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 12,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 13,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 14,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 15,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 16,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 17,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 18,
    "layout" : 6
  }, {
    "firstKey" : 20,
    "secondKey" : 19,
    "layout" : 3
  }, {
    "firstKey" : 20,
    "secondKey" : 21,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 2,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 3,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 4,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 5,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 6,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 7,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 8,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 9,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 10,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 11,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 12,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 13,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 14,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 15,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 16,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 17,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 18,
    "layout" : 4
  }, {
    "firstKey" : 21,
    "secondKey" : 19,
    "layout" : 2
  }, {
    "firstKey" : 21,
    "secondKey" : 20,
    "layout" : 2
  } ]
}