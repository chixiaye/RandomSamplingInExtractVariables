{
  "id" : 146,
  "expression" : "left.right",
  "projectName" : "google@gson",
  "commitID" : "c3d0f200b352f411b9ebe45c3bf49d4328b2c51f",
  "filePath" : "/gson/src/main/java/com/google/gson/internal/LinkedHashTreeMap.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "left.right",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 366,
      "startColumnNumber" : 31,
      "endLineNumber" : 366,
      "endColumnNumber" : 41
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 366,
        "startColumnNumber" : 19,
        "endLineNumber" : 366,
        "endColumnNumber" : 41
      },
      "nodeContext" : "leftRight=left.right",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 366,
        "startColumnNumber" : 8,
        "endLineNumber" : 366,
        "endColumnNumber" : 42
      },
      "nodeContext" : "Node<K,V> leftRight=left.right;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 630,
        "startLineNumber" : 364,
        "startColumnNumber" : 29,
        "endLineNumber" : 382,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  Node<K,V> leftLeft=left.left;\n  Node<K,V> leftRight=left.right;\n  int leftRightHeight=leftRight != null ? leftRight.height : 0;\n  int leftLeftHeight=leftLeft != null ? leftLeft.height : 0;\n  int leftDelta=leftLeftHeight - leftRightHeight;\n  if (leftDelta == 1 || (leftDelta == 0 && !insert)) {\n    rotateRight(node);\n  }\n else {\n    assert (leftDelta == -1);\n    rotateLeft(left);\n    rotateRight(node);\n  }\n  if (insert) {\n    break;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 94,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 1072,
        "startLineNumber" : 364,
        "startColumnNumber" : 13,
        "endLineNumber" : 394,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (delta == 2) {\n  Node<K,V> leftLeft=left.left;\n  Node<K,V> leftRight=left.right;\n  int leftRightHeight=leftRight != null ? leftRight.height : 0;\n  int leftLeftHeight=leftLeft != null ? leftLeft.height : 0;\n  int leftDelta=leftLeftHeight - leftRightHeight;\n  if (leftDelta == 1 || (leftDelta == 0 && !insert)) {\n    rotateRight(node);\n  }\n else {\n    assert (leftDelta == -1);\n    rotateLeft(left);\n    rotateRight(node);\n  }\n  if (insert) {\n    break;\n  }\n}\n else if (delta == 0) {\n  node.height=leftHeight + 1;\n  if (insert) {\n    break;\n  }\n}\n else {\n  assert (delta == -1 || delta == 1);\n  node.height=Math.max(leftHeight,rightHeight) + 1;\n  if (!insert) {\n    break;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 143,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1743,
        "startLineNumber" : 346,
        "startColumnNumber" : 6,
        "endLineNumber" : 394,
        "endColumnNumber" : 7
      },
      "nodeContext" : "if (delta == -2) {\n  Node<K,V> rightLeft=right.left;\n  Node<K,V> rightRight=right.right;\n  int rightRightHeight=rightRight != null ? rightRight.height : 0;\n  int rightLeftHeight=rightLeft != null ? rightLeft.height : 0;\n  int rightDelta=rightLeftHeight - rightRightHeight;\n  if (rightDelta == -1 || (rightDelta == 0 && !insert)) {\n    rotateLeft(node);\n  }\n else {\n    assert (rightDelta == 1);\n    rotateRight(right);\n    rotateLeft(node);\n  }\n  if (insert) {\n    break;\n  }\n}\n else if (delta == 2) {\n  Node<K,V> leftLeft=left.left;\n  Node<K,V> leftRight=left.right;\n  int leftRightHeight=leftRight != null ? leftRight.height : 0;\n  int leftLeftHeight=leftLeft != null ? leftLeft.height : 0;\n  int leftDelta=leftLeftHeight - leftRightHeight;\n  if (leftDelta == 1 || (leftDelta == 0 && !insert)) {\n    rotateRight(node);\n  }\n else {\n    assert (leftDelta == -1);\n    rotateLeft(left);\n    rotateRight(node);\n  }\n  if (insert) {\n    break;\n  }\n}\n else if (delta == 0) {\n  node.height=leftHeight + 1;\n  if (insert) {\n    break;\n  }\n}\n else {\n  assert (delta == -1 || delta == 1);\n  node.height=Math.max(leftHeight,rightHeight) + 1;\n  if (!insert) {\n    break;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 242,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1987,
        "startLineNumber" : 339,
        "startColumnNumber" : 73,
        "endLineNumber" : 395,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Node<K,V> left=node.left;\n  Node<K,V> right=node.right;\n  int leftHeight=left != null ? left.height : 0;\n  int rightHeight=right != null ? right.height : 0;\n  int delta=leftHeight - rightHeight;\n  if (delta == -2) {\n    Node<K,V> rightLeft=right.left;\n    Node<K,V> rightRight=right.right;\n    int rightRightHeight=rightRight != null ? rightRight.height : 0;\n    int rightLeftHeight=rightLeft != null ? rightLeft.height : 0;\n    int rightDelta=rightLeftHeight - rightRightHeight;\n    if (rightDelta == -1 || (rightDelta == 0 && !insert)) {\n      rotateLeft(node);\n    }\n else {\n      assert (rightDelta == 1);\n      rotateRight(right);\n      rotateLeft(node);\n    }\n    if (insert) {\n      break;\n    }\n  }\n else   if (delta == 2) {\n    Node<K,V> leftLeft=left.left;\n    Node<K,V> leftRight=left.right;\n    int leftRightHeight=leftRight != null ? leftRight.height : 0;\n    int leftLeftHeight=leftLeft != null ? leftLeft.height : 0;\n    int leftDelta=leftLeftHeight - leftRightHeight;\n    if (leftDelta == 1 || (leftDelta == 0 && !insert)) {\n      rotateRight(node);\n    }\n else {\n      assert (leftDelta == -1);\n      rotateLeft(left);\n      rotateRight(node);\n    }\n    if (insert) {\n      break;\n    }\n  }\n else   if (delta == 0) {\n    node.height=leftHeight + 1;\n    if (insert) {\n      break;\n    }\n  }\n else {\n    assert (delta == -1 || delta == 1);\n    node.height=Math.max(leftHeight,rightHeight) + 1;\n    if (!insert) {\n      break;\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 300,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2056,
        "startLineNumber" : 339,
        "startColumnNumber" : 4,
        "endLineNumber" : 395,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (Node<K,V> node=unbalanced; node != null; node=node.parent) {\n  Node<K,V> left=node.left;\n  Node<K,V> right=node.right;\n  int leftHeight=left != null ? left.height : 0;\n  int rightHeight=right != null ? right.height : 0;\n  int delta=leftHeight - rightHeight;\n  if (delta == -2) {\n    Node<K,V> rightLeft=right.left;\n    Node<K,V> rightRight=right.right;\n    int rightRightHeight=rightRight != null ? rightRight.height : 0;\n    int rightLeftHeight=rightLeft != null ? rightLeft.height : 0;\n    int rightDelta=rightLeftHeight - rightRightHeight;\n    if (rightDelta == -1 || (rightDelta == 0 && !insert)) {\n      rotateLeft(node);\n    }\n else {\n      assert (rightDelta == 1);\n      rotateRight(right);\n      rotateLeft(node);\n    }\n    if (insert) {\n      break;\n    }\n  }\n else   if (delta == 2) {\n    Node<K,V> leftLeft=left.left;\n    Node<K,V> leftRight=left.right;\n    int leftRightHeight=leftRight != null ? leftRight.height : 0;\n    int leftLeftHeight=leftLeft != null ? leftLeft.height : 0;\n    int leftDelta=leftLeftHeight - leftRightHeight;\n    if (leftDelta == 1 || (leftDelta == 0 && !insert)) {\n      rotateRight(node);\n    }\n else {\n      assert (leftDelta == -1);\n      rotateLeft(left);\n      rotateRight(node);\n    }\n    if (insert) {\n      break;\n    }\n  }\n else   if (delta == 0) {\n    node.height=leftHeight + 1;\n    if (insert) {\n      break;\n    }\n  }\n else {\n    assert (delta == -1 || delta == 1);\n    node.height=Math.max(leftHeight,rightHeight) + 1;\n    if (!insert) {\n      break;\n    }\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 320,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2066,
        "startLineNumber" : 338,
        "startColumnNumber" : 64,
        "endLineNumber" : 396,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (Node<K,V> node=unbalanced; node != null; node=node.parent) {\n    Node<K,V> left=node.left;\n    Node<K,V> right=node.right;\n    int leftHeight=left != null ? left.height : 0;\n    int rightHeight=right != null ? right.height : 0;\n    int delta=leftHeight - rightHeight;\n    if (delta == -2) {\n      Node<K,V> rightLeft=right.left;\n      Node<K,V> rightRight=right.right;\n      int rightRightHeight=rightRight != null ? rightRight.height : 0;\n      int rightLeftHeight=rightLeft != null ? rightLeft.height : 0;\n      int rightDelta=rightLeftHeight - rightRightHeight;\n      if (rightDelta == -1 || (rightDelta == 0 && !insert)) {\n        rotateLeft(node);\n      }\n else {\n        assert (rightDelta == 1);\n        rotateRight(right);\n        rotateLeft(node);\n      }\n      if (insert) {\n        break;\n      }\n    }\n else     if (delta == 2) {\n      Node<K,V> leftLeft=left.left;\n      Node<K,V> leftRight=left.right;\n      int leftRightHeight=leftRight != null ? leftRight.height : 0;\n      int leftLeftHeight=leftLeft != null ? leftLeft.height : 0;\n      int leftDelta=leftLeftHeight - leftRightHeight;\n      if (leftDelta == 1 || (leftDelta == 0 && !insert)) {\n        rotateRight(node);\n      }\n else {\n        assert (leftDelta == -1);\n        rotateLeft(left);\n        rotateRight(node);\n      }\n      if (insert) {\n        break;\n      }\n    }\n else     if (delta == 0) {\n      node.height=leftHeight + 1;\n      if (insert) {\n        break;\n      }\n    }\n else {\n      assert (delta == -1 || delta == 1);\n      node.height=Math.max(leftHeight,rightHeight) + 1;\n      if (!insert) {\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 321,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2372,
        "startLineNumber" : 331,
        "startColumnNumber" : 2,
        "endLineNumber" : 396,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Rebalances the tree by making any AVL rotations necessary between the newly-unbalanced node and the tree's root.\n * @param insert true if the node was unbalanced by an insert; false if itwas by a removal.\n */\nprivate void rebalance(Node<K,V> unbalanced,boolean insert){\n  for (Node<K,V> node=unbalanced; node != null; node=node.parent) {\n    Node<K,V> left=node.left;\n    Node<K,V> right=node.right;\n    int leftHeight=left != null ? left.height : 0;\n    int rightHeight=right != null ? right.height : 0;\n    int delta=leftHeight - rightHeight;\n    if (delta == -2) {\n      Node<K,V> rightLeft=right.left;\n      Node<K,V> rightRight=right.right;\n      int rightRightHeight=rightRight != null ? rightRight.height : 0;\n      int rightLeftHeight=rightLeft != null ? rightLeft.height : 0;\n      int rightDelta=rightLeftHeight - rightRightHeight;\n      if (rightDelta == -1 || (rightDelta == 0 && !insert)) {\n        rotateLeft(node);\n      }\n else {\n        assert (rightDelta == 1);\n        rotateRight(right);\n        rotateLeft(node);\n      }\n      if (insert) {\n        break;\n      }\n    }\n else     if (delta == 2) {\n      Node<K,V> leftLeft=left.left;\n      Node<K,V> leftRight=left.right;\n      int leftRightHeight=leftRight != null ? leftRight.height : 0;\n      int leftLeftHeight=leftLeft != null ? leftLeft.height : 0;\n      int leftDelta=leftLeftHeight - leftRightHeight;\n      if (leftDelta == 1 || (leftDelta == 0 && !insert)) {\n        rotateRight(node);\n      }\n else {\n        assert (leftDelta == -1);\n        rotateLeft(left);\n        rotateRight(node);\n      }\n      if (insert) {\n        break;\n      }\n    }\n else     if (delta == 0) {\n      node.height=leftHeight + 1;\n      if (insert) {\n        break;\n      }\n    }\n else {\n      assert (delta == -1 || delta == 1);\n      node.height=Math.max(leftHeight,rightHeight) + 1;\n      if (!insert) {\n        break;\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 338,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 366,
        "startColumnNumber" : 8,
        "endLineNumber" : 366,
        "endColumnNumber" : 42
      },
      "nodeContext" : "Node<K,V> leftRight=left.right;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "com.google.gson.internal.LinkedHashTreeMap.Node<K,V>"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 366,
    "startColumnNumber" : 31,
    "endLineNumber" : 366,
    "endColumnNumber" : 41
  } ],
  "layoutRelationDataList" : [ ]
}