{
  "id" : 52,
  "expression" : "StringComparators.ALPHANUMERIC.compare(\"abc\",\"123\") > 0",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/processing/src/test/java/org/apache/druid/query/ordering/StringComparatorsTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "StringComparators.ALPHANUMERIC.compare(\"abc\",\"123\") > 0",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 56,
      "startLineNumber" : 68,
      "startColumnNumber" : 22,
      "endLineNumber" : 68,
      "endColumnNumber" : 78
    },
    "astNodeNumber" : 9,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 75,
        "startLineNumber" : 68,
        "startColumnNumber" : 4,
        "endLineNumber" : 68,
        "endColumnNumber" : 79
      },
      "nodeContext" : "Assert.assertTrue(StringComparators.ALPHANUMERIC.compare(\"abc\",\"123\") > 0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 68,
        "startColumnNumber" : 4,
        "endLineNumber" : 68,
        "endColumnNumber" : 80
      },
      "nodeContext" : "Assert.assertTrue(StringComparators.ALPHANUMERIC.compare(\"abc\",\"123\") > 0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1687,
        "startLineNumber" : 63,
        "startColumnNumber" : 2,
        "endLineNumber" : 107,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  commonTest(StringComparators.ALPHANUMERIC);\n  Assert.assertTrue(StringComparators.ALPHANUMERIC.compare(\"123\",\"abc\") < 0);\n  Assert.assertTrue(StringComparators.ALPHANUMERIC.compare(\"abc\",\"123\") > 0);\n  Assert.assertTrue(StringComparators.ALPHANUMERIC.compare(\"2\",\"11\") < 0);\n  Assert.assertTrue(StringComparators.ALPHANUMERIC.compare(\"a2\",\"a11\") < 0);\n  Assert.assertTrue(StringComparators.ALPHANUMERIC.compare(\"02\",\"11\") < 0);\n  Assert.assertTrue(StringComparators.ALPHANUMERIC.compare(\"02\",\"002\") < 0);\n  Assert.assertTrue(StringComparators.ALPHANUMERIC.compare(\"1.3\",\"1.5\") < 0);\n  Assert.assertTrue(StringComparators.ALPHANUMERIC.compare(\"1.3\",\"1.15\") < 0);\n  List<String> sorted=Lists.newArrayList(\"1-5\",\"11-15\",\"16-20\",\"21-25\",\"26-30\",\"6-10\",\"Other\");\n  Collections.sort(sorted,StringComparators.ALPHANUMERIC);\n  Assert.assertEquals(ImmutableList.of(\"1-5\",\"6-10\",\"11-15\",\"16-20\",\"21-25\",\"26-30\",\"Other\"),sorted);\n  List<String> sortedFixedDecimal=Lists.newArrayList(\"Other\",\"[0.00-0.05)\",\"[0.05-0.10)\",\"[0.10-0.50)\",\"[0.50-1.00)\",\"[1.00-5.00)\",\"[5.00-10.00)\",\"[10.00-20.00)\");\n  Collections.sort(sortedFixedDecimal,StringComparators.ALPHANUMERIC);\n  Assert.assertEquals(ImmutableList.of(\"[0.00-0.05)\",\"[0.05-0.10)\",\"[0.10-0.50)\",\"[0.50-1.00)\",\"[1.00-5.00)\",\"[5.00-10.00)\",\"[10.00-20.00)\",\"Other\"),sortedFixedDecimal);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 195,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1738,
        "startLineNumber" : 61,
        "startColumnNumber" : 2,
        "endLineNumber" : 107,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testAlphanumericComparator(){\n  commonTest(StringComparators.ALPHANUMERIC);\n  Assert.assertTrue(StringComparators.ALPHANUMERIC.compare(\"123\",\"abc\") < 0);\n  Assert.assertTrue(StringComparators.ALPHANUMERIC.compare(\"abc\",\"123\") > 0);\n  Assert.assertTrue(StringComparators.ALPHANUMERIC.compare(\"2\",\"11\") < 0);\n  Assert.assertTrue(StringComparators.ALPHANUMERIC.compare(\"a2\",\"a11\") < 0);\n  Assert.assertTrue(StringComparators.ALPHANUMERIC.compare(\"02\",\"11\") < 0);\n  Assert.assertTrue(StringComparators.ALPHANUMERIC.compare(\"02\",\"002\") < 0);\n  Assert.assertTrue(StringComparators.ALPHANUMERIC.compare(\"1.3\",\"1.5\") < 0);\n  Assert.assertTrue(StringComparators.ALPHANUMERIC.compare(\"1.3\",\"1.15\") < 0);\n  List<String> sorted=Lists.newArrayList(\"1-5\",\"11-15\",\"16-20\",\"21-25\",\"26-30\",\"6-10\",\"Other\");\n  Collections.sort(sorted,StringComparators.ALPHANUMERIC);\n  Assert.assertEquals(ImmutableList.of(\"1-5\",\"6-10\",\"11-15\",\"16-20\",\"21-25\",\"26-30\",\"Other\"),sorted);\n  List<String> sortedFixedDecimal=Lists.newArrayList(\"Other\",\"[0.00-0.05)\",\"[0.05-0.10)\",\"[0.10-0.50)\",\"[0.50-1.00)\",\"[1.00-5.00)\",\"[5.00-10.00)\",\"[10.00-20.00)\");\n  Collections.sort(sortedFixedDecimal,StringComparators.ALPHANUMERIC);\n  Assert.assertEquals(ImmutableList.of(\"[0.00-0.05)\",\"[0.05-0.10)\",\"[0.10-0.50)\",\"[0.50-1.00)\",\"[1.00-5.00)\",\"[5.00-10.00)\",\"[10.00-20.00)\",\"Other\"),sortedFixedDecimal);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 201,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 68,
        "startColumnNumber" : 4,
        "endLineNumber" : 68,
        "endColumnNumber" : 80
      },
      "nodeContext" : "Assert.assertTrue(StringComparators.ALPHANUMERIC.compare(\"abc\",\"123\") > 0);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 13,
      "astHeight" : 6
    },
    "tokenLength" : 7,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 56,
    "startLineNumber" : 68,
    "startColumnNumber" : 22,
    "endLineNumber" : 68,
    "endColumnNumber" : 78
  } ],
  "layoutRelationDataList" : [ ]
}