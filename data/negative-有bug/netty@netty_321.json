{
  "id" : 321,
  "expression" : "inIndex >= length - 4",
  "projectName" : "netty@netty",
  "commitID" : "8a68c3e58d4663ae42e41a90d0d11aec3c25016b",
  "filePath" : "/codec/src/main/java/io/netty/handler/codec/compression/Snappy.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "inIndex >= length - 4",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 21,
      "startLineNumber" : 116,
      "startColumnNumber" : 24,
      "endLineNumber" : 116,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 116,
        "startColumnNumber" : 20,
        "endLineNumber" : 118,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (inIndex >= length - 4) {\n  break outer;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.DoStatement,body]",
      "nodePosition" : {
        "charLength" : 923,
        "startLineNumber" : 107,
        "startColumnNumber" : 19,
        "endLineNumber" : 125,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  int base=inIndex;\n  int matched=4 + findMatchingLength(in,candidate + 4,inIndex + 4,length);\n  inIndex+=matched;\n  int offset=base - candidate;\n  encodeCopy(out,offset,matched);\n  in.readerIndex(in.readerIndex() + matched);\n  insertTail=inIndex - 1;\n  nextEmit=inIndex;\n  if (inIndex >= length - 4) {\n    break outer;\n  }\n  int prevHash=hash(in,insertTail,shift);\n  table[prevHash]=(short)(inIndex - baseIndex - 1);\n  int currentHash=hash(in,insertTail + 1,shift);\n  candidate=baseIndex + table[currentHash];\n  table[currentHash]=(short)(inIndex - baseIndex);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 118,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1002,
        "startLineNumber" : 107,
        "startColumnNumber" : 16,
        "endLineNumber" : 126,
        "endColumnNumber" : 74
      },
      "nodeContext" : "do {\n  int base=inIndex;\n  int matched=4 + findMatchingLength(in,candidate + 4,inIndex + 4,length);\n  inIndex+=matched;\n  int offset=base - candidate;\n  encodeCopy(out,offset,matched);\n  in.readerIndex(in.readerIndex() + matched);\n  insertTail=inIndex - 1;\n  nextEmit=inIndex;\n  if (inIndex >= length - 4) {\n    break outer;\n  }\n  int prevHash=hash(in,insertTail,shift);\n  table[prevHash]=(short)(inIndex - baseIndex - 1);\n  int currentHash=hash(in,insertTail + 1,shift);\n  candidate=baseIndex + table[currentHash];\n  table[currentHash]=(short)(inIndex - baseIndex);\n}\n while (in.getInt(insertTail + 1) == in.getInt(candidate));\n",
      "nodeType" : "DoStatement",
      "astNodeNumber" : 130,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.WhileStatement,body]",
      "nodePosition" : {
        "charLength" : 2039,
        "startLineNumber" : 80,
        "startColumnNumber" : 32,
        "endLineNumber" : 130,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  int skip=32;\n  int candidate;\n  int nextIndex=inIndex;\n  do {\n    inIndex=nextIndex;\n    int hash=nextHash;\n    int bytesBetweenHashLookups=skip++ >> 5;\n    nextIndex=inIndex + bytesBetweenHashLookups;\n    if (nextIndex > length - 4) {\n      break outer;\n    }\n    nextHash=hash(in,nextIndex,shift);\n    candidate=baseIndex + table[hash];\n    table[hash]=(short)(inIndex - baseIndex);\n  }\n while (in.getInt(inIndex) != in.getInt(candidate));\n  encodeLiteral(in,out,inIndex - nextEmit);\n  int insertTail;\n  do {\n    int base=inIndex;\n    int matched=4 + findMatchingLength(in,candidate + 4,inIndex + 4,length);\n    inIndex+=matched;\n    int offset=base - candidate;\n    encodeCopy(out,offset,matched);\n    in.readerIndex(in.readerIndex() + matched);\n    insertTail=inIndex - 1;\n    nextEmit=inIndex;\n    if (inIndex >= length - 4) {\n      break outer;\n    }\n    int prevHash=hash(in,insertTail,shift);\n    table[prevHash]=(short)(inIndex - baseIndex - 1);\n    int currentHash=hash(in,insertTail + 1,shift);\n    candidate=baseIndex + table[currentHash];\n    table[currentHash]=(short)(inIndex - baseIndex);\n  }\n while (in.getInt(insertTail + 1) == in.getInt(candidate));\n  nextHash=hash(in,insertTail + 2,shift);\n  ++inIndex;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 240,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.LabeledStatement,body]",
      "nodePosition" : {
        "charLength" : 2052,
        "startLineNumber" : 80,
        "startColumnNumber" : 19,
        "endLineNumber" : 130,
        "endColumnNumber" : 13
      },
      "nodeContext" : "while (true) {\n  int skip=32;\n  int candidate;\n  int nextIndex=inIndex;\n  do {\n    inIndex=nextIndex;\n    int hash=nextHash;\n    int bytesBetweenHashLookups=skip++ >> 5;\n    nextIndex=inIndex + bytesBetweenHashLookups;\n    if (nextIndex > length - 4) {\n      break outer;\n    }\n    nextHash=hash(in,nextIndex,shift);\n    candidate=baseIndex + table[hash];\n    table[hash]=(short)(inIndex - baseIndex);\n  }\n while (in.getInt(inIndex) != in.getInt(candidate));\n  encodeLiteral(in,out,inIndex - nextEmit);\n  int insertTail;\n  do {\n    int base=inIndex;\n    int matched=4 + findMatchingLength(in,candidate + 4,inIndex + 4,length);\n    inIndex+=matched;\n    int offset=base - candidate;\n    encodeCopy(out,offset,matched);\n    in.readerIndex(in.readerIndex() + matched);\n    insertTail=inIndex - 1;\n    nextEmit=inIndex;\n    if (inIndex >= length - 4) {\n      break outer;\n    }\n    int prevHash=hash(in,insertTail,shift);\n    table[prevHash]=(short)(inIndex - baseIndex - 1);\n    int currentHash=hash(in,insertTail + 1,shift);\n    candidate=baseIndex + table[currentHash];\n    table[currentHash]=(short)(inIndex - baseIndex);\n  }\n while (in.getInt(insertTail + 1) == in.getInt(candidate));\n  nextHash=hash(in,insertTail + 2,shift);\n  ++inIndex;\n}\n",
      "nodeType" : "WhileStatement",
      "astNodeNumber" : 242,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2059,
        "startLineNumber" : 80,
        "startColumnNumber" : 12,
        "endLineNumber" : 130,
        "endColumnNumber" : 13
      },
      "nodeContext" : "outer: while (true) {\n  int skip=32;\n  int candidate;\n  int nextIndex=inIndex;\n  do {\n    inIndex=nextIndex;\n    int hash=nextHash;\n    int bytesBetweenHashLookups=skip++ >> 5;\n    nextIndex=inIndex + bytesBetweenHashLookups;\n    if (nextIndex > length - 4) {\n      break outer;\n    }\n    nextHash=hash(in,nextIndex,shift);\n    candidate=baseIndex + table[hash];\n    table[hash]=(short)(inIndex - baseIndex);\n  }\n while (in.getInt(inIndex) != in.getInt(candidate));\n  encodeLiteral(in,out,inIndex - nextEmit);\n  int insertTail;\n  do {\n    int base=inIndex;\n    int matched=4 + findMatchingLength(in,candidate + 4,inIndex + 4,length);\n    inIndex+=matched;\n    int offset=base - candidate;\n    encodeCopy(out,offset,matched);\n    in.readerIndex(in.readerIndex() + matched);\n    insertTail=inIndex - 1;\n    nextEmit=inIndex;\n    if (inIndex >= length - 4) {\n      break outer;\n    }\n    int prevHash=hash(in,insertTail,shift);\n    table[prevHash]=(short)(inIndex - baseIndex - 1);\n    int currentHash=hash(in,insertTail + 1,shift);\n    candidate=baseIndex + table[currentHash];\n    table[currentHash]=(short)(inIndex - baseIndex);\n  }\n while (in.getInt(insertTail + 1) == in.getInt(candidate));\n  nextHash=hash(in,insertTail + 2,shift);\n  ++inIndex;\n}\n",
      "nodeType" : "LabeledStatement",
      "astNodeNumber" : 244,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 2141,
        "startLineNumber" : 78,
        "startColumnNumber" : 56,
        "endLineNumber" : 131,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int nextHash=hash(in,++inIndex,shift);\n  outer:   while (true) {\n    int skip=32;\n    int candidate;\n    int nextIndex=inIndex;\n    do {\n      inIndex=nextIndex;\n      int hash=nextHash;\n      int bytesBetweenHashLookups=skip++ >> 5;\n      nextIndex=inIndex + bytesBetweenHashLookups;\n      if (nextIndex > length - 4) {\n        break outer;\n      }\n      nextHash=hash(in,nextIndex,shift);\n      candidate=baseIndex + table[hash];\n      table[hash]=(short)(inIndex - baseIndex);\n    }\n while (in.getInt(inIndex) != in.getInt(candidate));\n    encodeLiteral(in,out,inIndex - nextEmit);\n    int insertTail;\n    do {\n      int base=inIndex;\n      int matched=4 + findMatchingLength(in,candidate + 4,inIndex + 4,length);\n      inIndex+=matched;\n      int offset=base - candidate;\n      encodeCopy(out,offset,matched);\n      in.readerIndex(in.readerIndex() + matched);\n      insertTail=inIndex - 1;\n      nextEmit=inIndex;\n      if (inIndex >= length - 4) {\n        break outer;\n      }\n      int prevHash=hash(in,insertTail,shift);\n      table[prevHash]=(short)(inIndex - baseIndex - 1);\n      int currentHash=hash(in,insertTail + 1,shift);\n      candidate=baseIndex + table[currentHash];\n      table[currentHash]=(short)(inIndex - baseIndex);\n    }\n while (in.getInt(insertTail + 1) == in.getInt(candidate));\n    nextHash=hash(in,insertTail + 2,shift);\n    ++inIndex;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 255,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2189,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 131,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (length - inIndex >= MIN_COMPRESSIBLE_BYTES) {\n  int nextHash=hash(in,++inIndex,shift);\n  outer:   while (true) {\n    int skip=32;\n    int candidate;\n    int nextIndex=inIndex;\n    do {\n      inIndex=nextIndex;\n      int hash=nextHash;\n      int bytesBetweenHashLookups=skip++ >> 5;\n      nextIndex=inIndex + bytesBetweenHashLookups;\n      if (nextIndex > length - 4) {\n        break outer;\n      }\n      nextHash=hash(in,nextIndex,shift);\n      candidate=baseIndex + table[hash];\n      table[hash]=(short)(inIndex - baseIndex);\n    }\n while (in.getInt(inIndex) != in.getInt(candidate));\n    encodeLiteral(in,out,inIndex - nextEmit);\n    int insertTail;\n    do {\n      int base=inIndex;\n      int matched=4 + findMatchingLength(in,candidate + 4,inIndex + 4,length);\n      inIndex+=matched;\n      int offset=base - candidate;\n      encodeCopy(out,offset,matched);\n      in.readerIndex(in.readerIndex() + matched);\n      insertTail=inIndex - 1;\n      nextEmit=inIndex;\n      if (inIndex >= length - 4) {\n        break outer;\n      }\n      int prevHash=hash(in,insertTail,shift);\n      table[prevHash]=(short)(inIndex - baseIndex - 1);\n      int currentHash=hash(in,insertTail + 1,shift);\n      candidate=baseIndex + table[currentHash];\n      table[currentHash]=(short)(inIndex - baseIndex);\n    }\n while (in.getInt(insertTail + 1) == in.getInt(candidate));\n    nextHash=hash(in,insertTail + 2,shift);\n    ++inIndex;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 261,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2969,
        "startLineNumber" : 58,
        "startColumnNumber" : 78,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  for (int i=0; ; i++) {\n    int b=length >>> i * 7;\n    if ((b & 0xFFFFFF80) != 0) {\n      out.writeByte(b & 0x7f | 0x80);\n    }\n else {\n      out.writeByte(b);\n      break;\n    }\n  }\n  int inIndex=in.readerIndex();\n  final int baseIndex=inIndex;\n  final short[] table=getHashTable(length);\n  final int shift=Integer.numberOfLeadingZeros(table.length) + 1;\n  int nextEmit=inIndex;\n  if (length - inIndex >= MIN_COMPRESSIBLE_BYTES) {\n    int nextHash=hash(in,++inIndex,shift);\n    outer:     while (true) {\n      int skip=32;\n      int candidate;\n      int nextIndex=inIndex;\n      do {\n        inIndex=nextIndex;\n        int hash=nextHash;\n        int bytesBetweenHashLookups=skip++ >> 5;\n        nextIndex=inIndex + bytesBetweenHashLookups;\n        if (nextIndex > length - 4) {\n          break outer;\n        }\n        nextHash=hash(in,nextIndex,shift);\n        candidate=baseIndex + table[hash];\n        table[hash]=(short)(inIndex - baseIndex);\n      }\n while (in.getInt(inIndex) != in.getInt(candidate));\n      encodeLiteral(in,out,inIndex - nextEmit);\n      int insertTail;\n      do {\n        int base=inIndex;\n        int matched=4 + findMatchingLength(in,candidate + 4,inIndex + 4,length);\n        inIndex+=matched;\n        int offset=base - candidate;\n        encodeCopy(out,offset,matched);\n        in.readerIndex(in.readerIndex() + matched);\n        insertTail=inIndex - 1;\n        nextEmit=inIndex;\n        if (inIndex >= length - 4) {\n          break outer;\n        }\n        int prevHash=hash(in,insertTail,shift);\n        table[prevHash]=(short)(inIndex - baseIndex - 1);\n        int currentHash=hash(in,insertTail + 1,shift);\n        candidate=baseIndex + table[currentHash];\n        table[currentHash]=(short)(inIndex - baseIndex);\n      }\n while (in.getInt(insertTail + 1) == in.getInt(candidate));\n      nextHash=hash(in,insertTail + 2,shift);\n      ++inIndex;\n    }\n  }\n  if (nextEmit < length) {\n    encodeLiteral(in,out,length - nextEmit);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 358,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3043,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 137,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void encode(final ByteBuf in,final ByteBuf out,final int length){\n  for (int i=0; ; i++) {\n    int b=length >>> i * 7;\n    if ((b & 0xFFFFFF80) != 0) {\n      out.writeByte(b & 0x7f | 0x80);\n    }\n else {\n      out.writeByte(b);\n      break;\n    }\n  }\n  int inIndex=in.readerIndex();\n  final int baseIndex=inIndex;\n  final short[] table=getHashTable(length);\n  final int shift=Integer.numberOfLeadingZeros(table.length) + 1;\n  int nextEmit=inIndex;\n  if (length - inIndex >= MIN_COMPRESSIBLE_BYTES) {\n    int nextHash=hash(in,++inIndex,shift);\n    outer:     while (true) {\n      int skip=32;\n      int candidate;\n      int nextIndex=inIndex;\n      do {\n        inIndex=nextIndex;\n        int hash=nextHash;\n        int bytesBetweenHashLookups=skip++ >> 5;\n        nextIndex=inIndex + bytesBetweenHashLookups;\n        if (nextIndex > length - 4) {\n          break outer;\n        }\n        nextHash=hash(in,nextIndex,shift);\n        candidate=baseIndex + table[hash];\n        table[hash]=(short)(inIndex - baseIndex);\n      }\n while (in.getInt(inIndex) != in.getInt(candidate));\n      encodeLiteral(in,out,inIndex - nextEmit);\n      int insertTail;\n      do {\n        int base=inIndex;\n        int matched=4 + findMatchingLength(in,candidate + 4,inIndex + 4,length);\n        inIndex+=matched;\n        int offset=base - candidate;\n        encodeCopy(out,offset,matched);\n        in.readerIndex(in.readerIndex() + matched);\n        insertTail=inIndex - 1;\n        nextEmit=inIndex;\n        if (inIndex >= length - 4) {\n          break outer;\n        }\n        int prevHash=hash(in,insertTail,shift);\n        table[prevHash]=(short)(inIndex - baseIndex - 1);\n        int currentHash=hash(in,insertTail + 1,shift);\n        candidate=baseIndex + table[currentHash];\n        table[currentHash]=(short)(inIndex - baseIndex);\n      }\n while (in.getInt(insertTail + 1) == in.getInt(candidate));\n      nextHash=hash(in,insertTail + 2,shift);\n      ++inIndex;\n    }\n  }\n  if (nextEmit < length) {\n    encodeLiteral(in,out,length - nextEmit);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 376,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 89,
        "startLineNumber" : 116,
        "startColumnNumber" : 20,
        "endLineNumber" : 118,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (inIndex >= length - 4) {\n  break outer;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 5,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 21,
    "startLineNumber" : 116,
    "startColumnNumber" : 24,
    "endLineNumber" : 116,
    "endColumnNumber" : 45
  } ],
  "layoutRelationDataList" : [ ]
}