{
  "id" : 14,
  "expression" : "httpTimeout",
  "projectName" : "GoogleContainerTools@jib",
  "commitID" : "a0742fd277b5490a0965dba4443f5864f1250199",
  "filePath" : "/jib-core/src/test/java/com/google/cloud/tools/jib/http/ConnectionTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "httpTimeout",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 112,
      "startColumnNumber" : 28,
      "endLineNumber" : 112,
      "endColumnNumber" : 39
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 366,
        "startLineNumber" : 107,
        "startColumnNumber" : 8,
        "endLineNumber" : 112,
        "endColumnNumber" : 40
      },
      "nodeContext" : "Request.builder().setAccept(Arrays.asList(\"fake.accept\",\"another.fake.accept\")).setUserAgent(\"fake user agent\").setBody(new BlobHttpContent(Blobs.from(\"crepecake\"),\"fake.content.type\")).setAuthorization(Authorizations.withBasicCredentials(\"fake-username\",\"fake-secret\")).setHttpTimeout(httpTimeout)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 33,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 387,
        "startLineNumber" : 107,
        "startColumnNumber" : 8,
        "endLineNumber" : 113,
        "endColumnNumber" : 20
      },
      "nodeContext" : "Request.builder().setAccept(Arrays.asList(\"fake.accept\",\"another.fake.accept\")).setUserAgent(\"fake user agent\").setBody(new BlobHttpContent(Blobs.from(\"crepecake\"),\"fake.content.type\")).setAuthorization(Authorizations.withBasicCredentials(\"fake-username\",\"fake-secret\")).setHttpTimeout(httpTimeout).build()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 35,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 409,
        "startLineNumber" : 106,
        "startColumnNumber" : 4,
        "endLineNumber" : 113,
        "endColumnNumber" : 20
      },
      "nodeContext" : "fakeRequest=Request.builder().setAccept(Arrays.asList(\"fake.accept\",\"another.fake.accept\")).setUserAgent(\"fake user agent\").setBody(new BlobHttpContent(Blobs.from(\"crepecake\"),\"fake.content.type\")).setAuthorization(Authorizations.withBasicCredentials(\"fake-username\",\"fake-secret\")).setHttpTimeout(httpTimeout).build()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 37,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 410,
        "startLineNumber" : 106,
        "startColumnNumber" : 4,
        "endLineNumber" : 113,
        "endColumnNumber" : 21
      },
      "nodeContext" : "fakeRequest=Request.builder().setAccept(Arrays.asList(\"fake.accept\",\"another.fake.accept\")).setUserAgent(\"fake user agent\").setBody(new BlobHttpContent(Blobs.from(\"crepecake\"),\"fake.content.type\")).setAuthorization(Authorizations.withBasicCredentials(\"fake-username\",\"fake-secret\")).setHttpTimeout(httpTimeout).build();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 38,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1110,
        "startLineNumber" : 105,
        "startColumnNumber" : 74,
        "endLineNumber" : 128,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  fakeRequest=Request.builder().setAccept(Arrays.asList(\"fake.accept\",\"another.fake.accept\")).setUserAgent(\"fake user agent\").setBody(new BlobHttpContent(Blobs.from(\"crepecake\"),\"fake.content.type\")).setAuthorization(Authorizations.withBasicCredentials(\"fake-username\",\"fake-secret\")).setHttpTimeout(httpTimeout).build();\n  Mockito.when(mockHttpRequestFactory.buildRequest(Mockito.any(String.class),Mockito.eq(fakeUrl),Mockito.any(BlobHttpContent.class))).thenReturn(mockHttpRequest);\n  Mockito.when(mockHttpRequest.setHeaders(Mockito.any(HttpHeaders.class))).thenReturn(mockHttpRequest);\n  if (httpTimeout != null) {\n    Mockito.when(mockHttpRequest.setConnectTimeout(Mockito.anyInt())).thenReturn(mockHttpRequest);\n    Mockito.when(mockHttpRequest.setReadTimeout(Mockito.anyInt())).thenReturn(mockHttpRequest);\n  }\n  mockHttpResponse=Mockito.mock(HttpResponse.class);\n  Mockito.when(mockHttpRequest.execute()).thenReturn(mockHttpResponse);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 131,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1182,
        "startLineNumber" : 105,
        "startColumnNumber" : 2,
        "endLineNumber" : 128,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void setUpMocksAndFakes(Integer httpTimeout) throws IOException {\n  fakeRequest=Request.builder().setAccept(Arrays.asList(\"fake.accept\",\"another.fake.accept\")).setUserAgent(\"fake user agent\").setBody(new BlobHttpContent(Blobs.from(\"crepecake\"),\"fake.content.type\")).setAuthorization(Authorizations.withBasicCredentials(\"fake-username\",\"fake-secret\")).setHttpTimeout(httpTimeout).build();\n  Mockito.when(mockHttpRequestFactory.buildRequest(Mockito.any(String.class),Mockito.eq(fakeUrl),Mockito.any(BlobHttpContent.class))).thenReturn(mockHttpRequest);\n  Mockito.when(mockHttpRequest.setHeaders(Mockito.any(HttpHeaders.class))).thenReturn(mockHttpRequest);\n  if (httpTimeout != null) {\n    Mockito.when(mockHttpRequest.setConnectTimeout(Mockito.anyInt())).thenReturn(mockHttpRequest);\n    Mockito.when(mockHttpRequest.setReadTimeout(Mockito.anyInt())).thenReturn(mockHttpRequest);\n  }\n  mockHttpResponse=Mockito.mock(HttpResponse.class);\n  Mockito.when(mockHttpRequest.execute()).thenReturn(mockHttpResponse);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 141,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 366,
        "startLineNumber" : 107,
        "startColumnNumber" : 8,
        "endLineNumber" : 112,
        "endColumnNumber" : 40
      },
      "nodeContext" : "Request.builder().setAccept(Arrays.asList(\"fake.accept\",\"another.fake.accept\")).setUserAgent(\"fake user agent\").setBody(new BlobHttpContent(Blobs.from(\"crepecake\"),\"fake.content.type\")).setAuthorization(Authorizations.withBasicCredentials(\"fake-username\",\"fake-secret\")).setHttpTimeout(httpTimeout)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 33,
      "astHeight" : 7
    },
    "tokenLength" : 1,
    "type" : "java.lang.Integer"
  }, {
    "nodeContext" : "httpTimeout",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 11,
      "startLineNumber" : 122,
      "startColumnNumber" : 8,
      "endLineNumber" : 122,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 122,
        "startColumnNumber" : 8,
        "endLineNumber" : 122,
        "endColumnNumber" : 27
      },
      "nodeContext" : "httpTimeout != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 231,
        "startLineNumber" : 122,
        "startColumnNumber" : 4,
        "endLineNumber" : 125,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (httpTimeout != null) {\n  Mockito.when(mockHttpRequest.setConnectTimeout(Mockito.anyInt())).thenReturn(mockHttpRequest);\n  Mockito.when(mockHttpRequest.setReadTimeout(Mockito.anyInt())).thenReturn(mockHttpRequest);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 31,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1110,
        "startLineNumber" : 105,
        "startColumnNumber" : 74,
        "endLineNumber" : 128,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  fakeRequest=Request.builder().setAccept(Arrays.asList(\"fake.accept\",\"another.fake.accept\")).setUserAgent(\"fake user agent\").setBody(new BlobHttpContent(Blobs.from(\"crepecake\"),\"fake.content.type\")).setAuthorization(Authorizations.withBasicCredentials(\"fake-username\",\"fake-secret\")).setHttpTimeout(httpTimeout).build();\n  Mockito.when(mockHttpRequestFactory.buildRequest(Mockito.any(String.class),Mockito.eq(fakeUrl),Mockito.any(BlobHttpContent.class))).thenReturn(mockHttpRequest);\n  Mockito.when(mockHttpRequest.setHeaders(Mockito.any(HttpHeaders.class))).thenReturn(mockHttpRequest);\n  if (httpTimeout != null) {\n    Mockito.when(mockHttpRequest.setConnectTimeout(Mockito.anyInt())).thenReturn(mockHttpRequest);\n    Mockito.when(mockHttpRequest.setReadTimeout(Mockito.anyInt())).thenReturn(mockHttpRequest);\n  }\n  mockHttpResponse=Mockito.mock(HttpResponse.class);\n  Mockito.when(mockHttpRequest.execute()).thenReturn(mockHttpResponse);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 131,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1182,
        "startLineNumber" : 105,
        "startColumnNumber" : 2,
        "endLineNumber" : 128,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private void setUpMocksAndFakes(Integer httpTimeout) throws IOException {\n  fakeRequest=Request.builder().setAccept(Arrays.asList(\"fake.accept\",\"another.fake.accept\")).setUserAgent(\"fake user agent\").setBody(new BlobHttpContent(Blobs.from(\"crepecake\"),\"fake.content.type\")).setAuthorization(Authorizations.withBasicCredentials(\"fake-username\",\"fake-secret\")).setHttpTimeout(httpTimeout).build();\n  Mockito.when(mockHttpRequestFactory.buildRequest(Mockito.any(String.class),Mockito.eq(fakeUrl),Mockito.any(BlobHttpContent.class))).thenReturn(mockHttpRequest);\n  Mockito.when(mockHttpRequest.setHeaders(Mockito.any(HttpHeaders.class))).thenReturn(mockHttpRequest);\n  if (httpTimeout != null) {\n    Mockito.when(mockHttpRequest.setConnectTimeout(Mockito.anyInt())).thenReturn(mockHttpRequest);\n    Mockito.when(mockHttpRequest.setReadTimeout(Mockito.anyInt())).thenReturn(mockHttpRequest);\n  }\n  mockHttpResponse=Mockito.mock(HttpResponse.class);\n  Mockito.when(mockHttpRequest.execute()).thenReturn(mockHttpResponse);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 141,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 122,
        "startColumnNumber" : 8,
        "endLineNumber" : 122,
        "endColumnNumber" : 27
      },
      "nodeContext" : "httpTimeout != null",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 3,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "java.lang.Integer"
  } ],
  "positionList" : [ {
    "charLength" : 11,
    "startLineNumber" : 112,
    "startColumnNumber" : 28,
    "endLineNumber" : 112,
    "endColumnNumber" : 39
  }, {
    "charLength" : 11,
    "startLineNumber" : 122,
    "startColumnNumber" : 8,
    "endLineNumber" : 122,
    "endColumnNumber" : 19
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}