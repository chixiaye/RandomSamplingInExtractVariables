{
  "id" : 252,
  "expression" : "Math.random()",
  "projectName" : "williamfiset@Algorithms",
  "commitID" : "6d8bb428cd59ce3da5530d569b555c69a07c2f4d",
  "filePath" : "/src/test/java/com/williamfiset/algorithms/datastructures/queue/IntQueueTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Math.random()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 121,
      "startColumnNumber" : 19,
      "endLineNumber" : 121,
      "endColumnNumber" : 32
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 17,
        "startLineNumber" : 121,
        "startColumnNumber" : 15,
        "endLineNumber" : 121,
        "endColumnNumber" : 32
      },
      "nodeContext" : "r=Math.random()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 121,
        "startColumnNumber" : 8,
        "endLineNumber" : 121,
        "endColumnNumber" : 33
      },
      "nodeContext" : "double r=Math.random();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 479,
        "startLineNumber" : 119,
        "startColumnNumber" : 64,
        "endLineNumber" : 137,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  double r=Math.random();\n  if (r < 0.60) {\n    int elem=(int)(1000 * Math.random());\n    if (javaQ.size() < qSize) {\n      javaQ.offer(elem);\n      intQ.enqueue(elem);\n    }\n  }\n else {\n    if (!javaQ.isEmpty()) {\n      assertEquals((int)javaQ.poll(),(int)intQ.dequeue());\n    }\n  }\n  assertEquals(javaQ.isEmpty(),intQ.isEmpty());\n  assertEquals(javaQ.size(),intQ.size());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 80,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 537,
        "startLineNumber" : 119,
        "startColumnNumber" : 6,
        "endLineNumber" : 137,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int operations=0; operations < 5000; operations++) {\n  double r=Math.random();\n  if (r < 0.60) {\n    int elem=(int)(1000 * Math.random());\n    if (javaQ.size() < qSize) {\n      javaQ.offer(elem);\n      intQ.enqueue(elem);\n    }\n  }\n else {\n    if (!javaQ.isEmpty()) {\n      assertEquals((int)javaQ.poll(),(int)intQ.dequeue());\n    }\n  }\n  assertEquals(javaQ.isEmpty(),intQ.isEmpty());\n  assertEquals(javaQ.size(),intQ.size());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 91,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 756,
        "startLineNumber" : 111,
        "startColumnNumber" : 46,
        "endLineNumber" : 138,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  IntQueue intQ=new IntQueue(qSize);\n  ArrayDeque<Integer> javaQ=new ArrayDeque<>(qSize);\n  assertEquals(javaQ.isEmpty(),intQ.isEmpty());\n  assertEquals(javaQ.size(),intQ.size());\n  for (int operations=0; operations < 5000; operations++) {\n    double r=Math.random();\n    if (r < 0.60) {\n      int elem=(int)(1000 * Math.random());\n      if (javaQ.size() < qSize) {\n        javaQ.offer(elem);\n        intQ.enqueue(elem);\n      }\n    }\n else {\n      if (!javaQ.isEmpty()) {\n        assertEquals((int)javaQ.poll(),(int)intQ.dequeue());\n      }\n    }\n    assertEquals(javaQ.isEmpty(),intQ.isEmpty());\n    assertEquals(javaQ.size(),intQ.size());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 132,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 798,
        "startLineNumber" : 111,
        "startColumnNumber" : 4,
        "endLineNumber" : 138,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int qSize=1; qSize <= 50; qSize++) {\n  IntQueue intQ=new IntQueue(qSize);\n  ArrayDeque<Integer> javaQ=new ArrayDeque<>(qSize);\n  assertEquals(javaQ.isEmpty(),intQ.isEmpty());\n  assertEquals(javaQ.size(),intQ.size());\n  for (int operations=0; operations < 5000; operations++) {\n    double r=Math.random();\n    if (r < 0.60) {\n      int elem=(int)(1000 * Math.random());\n      if (javaQ.size() < qSize) {\n        javaQ.offer(elem);\n        intQ.enqueue(elem);\n      }\n    }\n else {\n      if (!javaQ.isEmpty()) {\n        assertEquals((int)javaQ.poll(),(int)intQ.dequeue());\n      }\n    }\n    assertEquals(javaQ.isEmpty(),intQ.isEmpty());\n    assertEquals(javaQ.size(),intQ.size());\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 143,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 809,
        "startLineNumber" : 109,
        "startColumnNumber" : 27,
        "endLineNumber" : 139,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (int qSize=1; qSize <= 50; qSize++) {\n    IntQueue intQ=new IntQueue(qSize);\n    ArrayDeque<Integer> javaQ=new ArrayDeque<>(qSize);\n    assertEquals(javaQ.isEmpty(),intQ.isEmpty());\n    assertEquals(javaQ.size(),intQ.size());\n    for (int operations=0; operations < 5000; operations++) {\n      double r=Math.random();\n      if (r < 0.60) {\n        int elem=(int)(1000 * Math.random());\n        if (javaQ.size() < qSize) {\n          javaQ.offer(elem);\n          intQ.enqueue(elem);\n        }\n      }\n else {\n        if (!javaQ.isEmpty()) {\n          assertEquals((int)javaQ.poll(),(int)intQ.dequeue());\n        }\n      }\n      assertEquals(javaQ.isEmpty(),intQ.isEmpty());\n      assertEquals(javaQ.size(),intQ.size());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 144,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 842,
        "startLineNumber" : 108,
        "startColumnNumber" : 2,
        "endLineNumber" : 139,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testRandom(){\n  for (int qSize=1; qSize <= 50; qSize++) {\n    IntQueue intQ=new IntQueue(qSize);\n    ArrayDeque<Integer> javaQ=new ArrayDeque<>(qSize);\n    assertEquals(javaQ.isEmpty(),intQ.isEmpty());\n    assertEquals(javaQ.size(),intQ.size());\n    for (int operations=0; operations < 5000; operations++) {\n      double r=Math.random();\n      if (r < 0.60) {\n        int elem=(int)(1000 * Math.random());\n        if (javaQ.size() < qSize) {\n          javaQ.offer(elem);\n          intQ.enqueue(elem);\n        }\n      }\n else {\n        if (!javaQ.isEmpty()) {\n          assertEquals((int)javaQ.poll(),(int)intQ.dequeue());\n        }\n      }\n      assertEquals(javaQ.isEmpty(),intQ.isEmpty());\n      assertEquals(javaQ.size(),intQ.size());\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 150,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 121,
        "startColumnNumber" : 8,
        "endLineNumber" : 121,
        "endColumnNumber" : 33
      },
      "nodeContext" : "double r=Math.random();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "double"
  }, {
    "nodeContext" : "Math.random()",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 13,
      "startLineNumber" : 124,
      "startColumnNumber" : 35,
      "endLineNumber" : 124,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ParenthesizedExpression,expression]",
      "nodePosition" : {
        "charLength" : 20,
        "startLineNumber" : 124,
        "startColumnNumber" : 28,
        "endLineNumber" : 124,
        "endColumnNumber" : 48
      },
      "nodeContext" : "1000 * Math.random()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 124,
        "startColumnNumber" : 27,
        "endLineNumber" : 124,
        "endColumnNumber" : 49
      },
      "nodeContext" : "(1000 * Math.random())",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 28,
        "startLineNumber" : 124,
        "startColumnNumber" : 21,
        "endLineNumber" : 124,
        "endColumnNumber" : 49
      },
      "nodeContext" : "(int)(1000 * Math.random())",
      "nodeType" : "CastExpression",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 124,
        "startColumnNumber" : 14,
        "endLineNumber" : 124,
        "endColumnNumber" : 49
      },
      "nodeContext" : "elem=(int)(1000 * Math.random())",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 10,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 124,
        "startColumnNumber" : 10,
        "endLineNumber" : 124,
        "endColumnNumber" : 50
      },
      "nodeContext" : "int elem=(int)(1000 * Math.random());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 175,
        "startLineNumber" : 123,
        "startColumnNumber" : 22,
        "endLineNumber" : 129,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  int elem=(int)(1000 * Math.random());\n  if (javaQ.size() < qSize) {\n    javaQ.offer(elem);\n    intQ.enqueue(elem);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 30,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 320,
        "startLineNumber" : 123,
        "startColumnNumber" : 8,
        "endLineNumber" : 133,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (r < 0.60) {\n  int elem=(int)(1000 * Math.random());\n  if (javaQ.size() < qSize) {\n    javaQ.offer(elem);\n    intQ.enqueue(elem);\n  }\n}\n else {\n  if (!javaQ.isEmpty()) {\n    assertEquals((int)javaQ.poll(),(int)intQ.dequeue());\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 54,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 479,
        "startLineNumber" : 119,
        "startColumnNumber" : 64,
        "endLineNumber" : 137,
        "endColumnNumber" : 7
      },
      "nodeContext" : "{\n  double r=Math.random();\n  if (r < 0.60) {\n    int elem=(int)(1000 * Math.random());\n    if (javaQ.size() < qSize) {\n      javaQ.offer(elem);\n      intQ.enqueue(elem);\n    }\n  }\n else {\n    if (!javaQ.isEmpty()) {\n      assertEquals((int)javaQ.poll(),(int)intQ.dequeue());\n    }\n  }\n  assertEquals(javaQ.isEmpty(),intQ.isEmpty());\n  assertEquals(javaQ.size(),intQ.size());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 80,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 537,
        "startLineNumber" : 119,
        "startColumnNumber" : 6,
        "endLineNumber" : 137,
        "endColumnNumber" : 7
      },
      "nodeContext" : "for (int operations=0; operations < 5000; operations++) {\n  double r=Math.random();\n  if (r < 0.60) {\n    int elem=(int)(1000 * Math.random());\n    if (javaQ.size() < qSize) {\n      javaQ.offer(elem);\n      intQ.enqueue(elem);\n    }\n  }\n else {\n    if (!javaQ.isEmpty()) {\n      assertEquals((int)javaQ.poll(),(int)intQ.dequeue());\n    }\n  }\n  assertEquals(javaQ.isEmpty(),intQ.isEmpty());\n  assertEquals(javaQ.size(),intQ.size());\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 91,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 756,
        "startLineNumber" : 111,
        "startColumnNumber" : 46,
        "endLineNumber" : 138,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  IntQueue intQ=new IntQueue(qSize);\n  ArrayDeque<Integer> javaQ=new ArrayDeque<>(qSize);\n  assertEquals(javaQ.isEmpty(),intQ.isEmpty());\n  assertEquals(javaQ.size(),intQ.size());\n  for (int operations=0; operations < 5000; operations++) {\n    double r=Math.random();\n    if (r < 0.60) {\n      int elem=(int)(1000 * Math.random());\n      if (javaQ.size() < qSize) {\n        javaQ.offer(elem);\n        intQ.enqueue(elem);\n      }\n    }\n else {\n      if (!javaQ.isEmpty()) {\n        assertEquals((int)javaQ.poll(),(int)intQ.dequeue());\n      }\n    }\n    assertEquals(javaQ.isEmpty(),intQ.isEmpty());\n    assertEquals(javaQ.size(),intQ.size());\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 132,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 798,
        "startLineNumber" : 111,
        "startColumnNumber" : 4,
        "endLineNumber" : 138,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int qSize=1; qSize <= 50; qSize++) {\n  IntQueue intQ=new IntQueue(qSize);\n  ArrayDeque<Integer> javaQ=new ArrayDeque<>(qSize);\n  assertEquals(javaQ.isEmpty(),intQ.isEmpty());\n  assertEquals(javaQ.size(),intQ.size());\n  for (int operations=0; operations < 5000; operations++) {\n    double r=Math.random();\n    if (r < 0.60) {\n      int elem=(int)(1000 * Math.random());\n      if (javaQ.size() < qSize) {\n        javaQ.offer(elem);\n        intQ.enqueue(elem);\n      }\n    }\n else {\n      if (!javaQ.isEmpty()) {\n        assertEquals((int)javaQ.poll(),(int)intQ.dequeue());\n      }\n    }\n    assertEquals(javaQ.isEmpty(),intQ.isEmpty());\n    assertEquals(javaQ.size(),intQ.size());\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 143,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 809,
        "startLineNumber" : 109,
        "startColumnNumber" : 27,
        "endLineNumber" : 139,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  for (int qSize=1; qSize <= 50; qSize++) {\n    IntQueue intQ=new IntQueue(qSize);\n    ArrayDeque<Integer> javaQ=new ArrayDeque<>(qSize);\n    assertEquals(javaQ.isEmpty(),intQ.isEmpty());\n    assertEquals(javaQ.size(),intQ.size());\n    for (int operations=0; operations < 5000; operations++) {\n      double r=Math.random();\n      if (r < 0.60) {\n        int elem=(int)(1000 * Math.random());\n        if (javaQ.size() < qSize) {\n          javaQ.offer(elem);\n          intQ.enqueue(elem);\n        }\n      }\n else {\n        if (!javaQ.isEmpty()) {\n          assertEquals((int)javaQ.poll(),(int)intQ.dequeue());\n        }\n      }\n      assertEquals(javaQ.isEmpty(),intQ.isEmpty());\n      assertEquals(javaQ.size(),intQ.size());\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 144,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 842,
        "startLineNumber" : 108,
        "startColumnNumber" : 2,
        "endLineNumber" : 139,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void testRandom(){\n  for (int qSize=1; qSize <= 50; qSize++) {\n    IntQueue intQ=new IntQueue(qSize);\n    ArrayDeque<Integer> javaQ=new ArrayDeque<>(qSize);\n    assertEquals(javaQ.isEmpty(),intQ.isEmpty());\n    assertEquals(javaQ.size(),intQ.size());\n    for (int operations=0; operations < 5000; operations++) {\n      double r=Math.random();\n      if (r < 0.60) {\n        int elem=(int)(1000 * Math.random());\n        if (javaQ.size() < qSize) {\n          javaQ.offer(elem);\n          intQ.enqueue(elem);\n        }\n      }\n else {\n        if (!javaQ.isEmpty()) {\n          assertEquals((int)javaQ.poll(),(int)intQ.dequeue());\n        }\n      }\n      assertEquals(javaQ.isEmpty(),intQ.isEmpty());\n      assertEquals(javaQ.size(),intQ.size());\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 150,
      "astHeight" : 15
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 124,
        "startColumnNumber" : 10,
        "endLineNumber" : 124,
        "endColumnNumber" : 50
      },
      "nodeContext" : "int elem=(int)(1000 * Math.random());\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 7
    },
    "tokenLength" : 2,
    "type" : "double"
  } ],
  "positionList" : [ {
    "charLength" : 13,
    "startLineNumber" : 121,
    "startColumnNumber" : 19,
    "endLineNumber" : 121,
    "endColumnNumber" : 32
  }, {
    "charLength" : 13,
    "startLineNumber" : 124,
    "startColumnNumber" : 35,
    "endLineNumber" : 124,
    "endColumnNumber" : 48
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 7
  } ]
}