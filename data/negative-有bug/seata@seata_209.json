{
  "id" : 209,
  "expression" : "\"Failed to get connection for async committing on \"",
  "projectName" : "seata@seata",
  "commitID" : "42d41623178ab076b11b27a0f049ac3ed7f1a9dc",
  "filePath" : "/rm-datasource/src/main/java/io/seata/rm/datasource/AsyncWorker.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"Failed to get connection for async committing on \"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 51,
      "startLineNumber" : 169,
      "startColumnNumber" : 32,
      "endLineNumber" : 169,
      "endColumnNumber" : 83
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 68,
        "startLineNumber" : 169,
        "startColumnNumber" : 32,
        "endLineNumber" : 169,
        "endColumnNumber" : 100
      },
      "nodeContext" : "\"Failed to get connection for async committing on \" + entry.getKey()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 87,
        "startLineNumber" : 169,
        "startColumnNumber" : 20,
        "endLineNumber" : 169,
        "endColumnNumber" : 107
      },
      "nodeContext" : "LOGGER.warn(\"Failed to get connection for async committing on \" + entry.getKey(),sqle)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 169,
        "startColumnNumber" : 20,
        "endLineNumber" : 169,
        "endColumnNumber" : 108
      },
      "nodeContext" : "LOGGER.warn(\"Failed to get connection for async committing on \" + entry.getKey(),sqle);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]",
      "nodePosition" : {
        "charLength" : 158,
        "startLineNumber" : 168,
        "startColumnNumber" : 44,
        "endLineNumber" : 171,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  LOGGER.warn(\"Failed to get connection for async committing on \" + entry.getKey(),sqle);\n  continue;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TryStatement,catchClauses]",
      "nodePosition" : {
        "charLength" : 184,
        "startLineNumber" : 168,
        "startColumnNumber" : 18,
        "endLineNumber" : 171,
        "endColumnNumber" : 17
      },
      "nodeContext" : "catch (SQLException sqle) {\n  LOGGER.warn(\"Failed to get connection for async committing on \" + entry.getKey(),sqle);\n  continue;\n}\n",
      "nodeType" : "CatchClause",
      "astNodeNumber" : 17,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 687,
        "startLineNumber" : 161,
        "startColumnNumber" : 16,
        "endLineNumber" : 171,
        "endColumnNumber" : 17
      },
      "nodeContext" : "try {\n  DataSourceManager resourceManager=(DataSourceManager)DefaultResourceManager.get().getResourceManager(BranchType.AT);\n  DataSourceProxy dataSourceProxy=resourceManager.get(entry.getKey());\n  if (dataSourceProxy == null) {\n    throw new ShouldNeverHappenException(\"Failed to find resource on \" + entry.getKey());\n  }\n  conn=dataSourceProxy.getPlainConnection();\n}\n catch (SQLException sqle) {\n  LOGGER.warn(\"Failed to get connection for async committing on \" + entry.getKey(),sqle);\n  continue;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 66,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2151,
        "startLineNumber" : 160,
        "startColumnNumber" : 16,
        "endLineNumber" : 200,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  try {\n    DataSourceManager resourceManager=(DataSourceManager)DefaultResourceManager.get().getResourceManager(BranchType.AT);\n    DataSourceProxy dataSourceProxy=resourceManager.get(entry.getKey());\n    if (dataSourceProxy == null) {\n      throw new ShouldNeverHappenException(\"Failed to find resource on \" + entry.getKey());\n    }\n    conn=dataSourceProxy.getPlainConnection();\n  }\n catch (  SQLException sqle) {\n    LOGGER.warn(\"Failed to get connection for async committing on \" + entry.getKey(),sqle);\n    continue;\n  }\n  List<Phase2Context> contextsGroupedByResourceId=entry.getValue();\n  Set<String> xids=new LinkedHashSet<>(UNDOLOG_DELETE_LIMIT_SIZE);\n  Set<Long> branchIds=new LinkedHashSet<>(UNDOLOG_DELETE_LIMIT_SIZE);\n  for (  Phase2Context commitContext : contextsGroupedByResourceId) {\n    xids.add(commitContext.xid);\n    branchIds.add(commitContext.branchId);\n    int maxSize=xids.size() > branchIds.size() ? xids.size() : branchIds.size();\n    if (maxSize == UNDOLOG_DELETE_LIMIT_SIZE) {\n      try {\n        UndoLogManager.batchDeleteUndoLog(xids,branchIds,conn);\n      }\n catch (      Exception ex) {\n        LOGGER.warn(\"Failed to batch delete undo log [\" + branchIds + \"/\"+ xids+ \"]\",ex);\n      }\n      xids.clear();\n      branchIds.clear();\n    }\n  }\n  if (CollectionUtils.isEmpty(xids) || CollectionUtils.isEmpty(branchIds)) {\n    return;\n  }\n  try {\n    UndoLogManager.batchDeleteUndoLog(xids,branchIds,conn);\n  }\n catch (  Exception ex) {\n    LOGGER.warn(\"Failed to batch delete undo log [\" + branchIds + \"/\"+ xids+ \"]\",ex);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 220,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2476,
        "startLineNumber" : 160,
        "startColumnNumber" : 12,
        "endLineNumber" : 208,
        "endColumnNumber" : 13
      },
      "nodeContext" : "try {\n  try {\n    DataSourceManager resourceManager=(DataSourceManager)DefaultResourceManager.get().getResourceManager(BranchType.AT);\n    DataSourceProxy dataSourceProxy=resourceManager.get(entry.getKey());\n    if (dataSourceProxy == null) {\n      throw new ShouldNeverHappenException(\"Failed to find resource on \" + entry.getKey());\n    }\n    conn=dataSourceProxy.getPlainConnection();\n  }\n catch (  SQLException sqle) {\n    LOGGER.warn(\"Failed to get connection for async committing on \" + entry.getKey(),sqle);\n    continue;\n  }\n  List<Phase2Context> contextsGroupedByResourceId=entry.getValue();\n  Set<String> xids=new LinkedHashSet<>(UNDOLOG_DELETE_LIMIT_SIZE);\n  Set<Long> branchIds=new LinkedHashSet<>(UNDOLOG_DELETE_LIMIT_SIZE);\n  for (  Phase2Context commitContext : contextsGroupedByResourceId) {\n    xids.add(commitContext.xid);\n    branchIds.add(commitContext.branchId);\n    int maxSize=xids.size() > branchIds.size() ? xids.size() : branchIds.size();\n    if (maxSize == UNDOLOG_DELETE_LIMIT_SIZE) {\n      try {\n        UndoLogManager.batchDeleteUndoLog(xids,branchIds,conn);\n      }\n catch (      Exception ex) {\n        LOGGER.warn(\"Failed to batch delete undo log [\" + branchIds + \"/\"+ xids+ \"]\",ex);\n      }\n      xids.clear();\n      branchIds.clear();\n    }\n  }\n  if (CollectionUtils.isEmpty(xids) || CollectionUtils.isEmpty(branchIds)) {\n    return;\n  }\n  try {\n    UndoLogManager.batchDeleteUndoLog(xids,branchIds,conn);\n  }\n catch (  Exception ex) {\n    LOGGER.warn(\"Failed to batch delete undo log [\" + branchIds + \"/\"+ xids+ \"]\",ex);\n  }\n}\n  finally {\n  if (conn != null) {\n    try {\n      conn.close();\n    }\n catch (    SQLException closeEx) {\n      LOGGER.warn(\"Failed to close JDBC resource while deleting undo_log \",closeEx);\n    }\n  }\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 245,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 2536,
        "startLineNumber" : 158,
        "startColumnNumber" : 87,
        "endLineNumber" : 209,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Connection conn=null;\n  try {\n    try {\n      DataSourceManager resourceManager=(DataSourceManager)DefaultResourceManager.get().getResourceManager(BranchType.AT);\n      DataSourceProxy dataSourceProxy=resourceManager.get(entry.getKey());\n      if (dataSourceProxy == null) {\n        throw new ShouldNeverHappenException(\"Failed to find resource on \" + entry.getKey());\n      }\n      conn=dataSourceProxy.getPlainConnection();\n    }\n catch (    SQLException sqle) {\n      LOGGER.warn(\"Failed to get connection for async committing on \" + entry.getKey(),sqle);\n      continue;\n    }\n    List<Phase2Context> contextsGroupedByResourceId=entry.getValue();\n    Set<String> xids=new LinkedHashSet<>(UNDOLOG_DELETE_LIMIT_SIZE);\n    Set<Long> branchIds=new LinkedHashSet<>(UNDOLOG_DELETE_LIMIT_SIZE);\n    for (    Phase2Context commitContext : contextsGroupedByResourceId) {\n      xids.add(commitContext.xid);\n      branchIds.add(commitContext.branchId);\n      int maxSize=xids.size() > branchIds.size() ? xids.size() : branchIds.size();\n      if (maxSize == UNDOLOG_DELETE_LIMIT_SIZE) {\n        try {\n          UndoLogManager.batchDeleteUndoLog(xids,branchIds,conn);\n        }\n catch (        Exception ex) {\n          LOGGER.warn(\"Failed to batch delete undo log [\" + branchIds + \"/\"+ xids+ \"]\",ex);\n        }\n        xids.clear();\n        branchIds.clear();\n      }\n    }\n    if (CollectionUtils.isEmpty(xids) || CollectionUtils.isEmpty(branchIds)) {\n      return;\n    }\n    try {\n      UndoLogManager.batchDeleteUndoLog(xids,branchIds,conn);\n    }\n catch (    Exception ex) {\n      LOGGER.warn(\"Failed to batch delete undo log [\" + branchIds + \"/\"+ xids+ \"]\",ex);\n    }\n  }\n  finally {\n    if (conn != null) {\n      try {\n        conn.close();\n      }\n catch (      SQLException closeEx) {\n        LOGGER.warn(\"Failed to close JDBC resource while deleting undo_log \",closeEx);\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 252,
      "astHeight" : 14
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2615,
        "startLineNumber" : 158,
        "startColumnNumber" : 8,
        "endLineNumber" : 209,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (Map.Entry<String,List<Phase2Context>> entry : mappedContexts.entrySet()) {\n  Connection conn=null;\n  try {\n    try {\n      DataSourceManager resourceManager=(DataSourceManager)DefaultResourceManager.get().getResourceManager(BranchType.AT);\n      DataSourceProxy dataSourceProxy=resourceManager.get(entry.getKey());\n      if (dataSourceProxy == null) {\n        throw new ShouldNeverHappenException(\"Failed to find resource on \" + entry.getKey());\n      }\n      conn=dataSourceProxy.getPlainConnection();\n    }\n catch (    SQLException sqle) {\n      LOGGER.warn(\"Failed to get connection for async committing on \" + entry.getKey(),sqle);\n      continue;\n    }\n    List<Phase2Context> contextsGroupedByResourceId=entry.getValue();\n    Set<String> xids=new LinkedHashSet<>(UNDOLOG_DELETE_LIMIT_SIZE);\n    Set<Long> branchIds=new LinkedHashSet<>(UNDOLOG_DELETE_LIMIT_SIZE);\n    for (    Phase2Context commitContext : contextsGroupedByResourceId) {\n      xids.add(commitContext.xid);\n      branchIds.add(commitContext.branchId);\n      int maxSize=xids.size() > branchIds.size() ? xids.size() : branchIds.size();\n      if (maxSize == UNDOLOG_DELETE_LIMIT_SIZE) {\n        try {\n          UndoLogManager.batchDeleteUndoLog(xids,branchIds,conn);\n        }\n catch (        Exception ex) {\n          LOGGER.warn(\"Failed to batch delete undo log [\" + branchIds + \"/\"+ xids+ \"]\",ex);\n        }\n        xids.clear();\n        branchIds.clear();\n      }\n    }\n    if (CollectionUtils.isEmpty(xids) || CollectionUtils.isEmpty(branchIds)) {\n      return;\n    }\n    try {\n      UndoLogManager.batchDeleteUndoLog(xids,branchIds,conn);\n    }\n catch (    Exception ex) {\n      LOGGER.warn(\"Failed to batch delete undo log [\" + branchIds + \"/\"+ xids+ \"]\",ex);\n    }\n  }\n  finally {\n    if (conn != null) {\n      try {\n        conn.close();\n      }\n catch (      SQLException closeEx) {\n        LOGGER.warn(\"Failed to close JDBC resource while deleting undo_log \",closeEx);\n      }\n    }\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 270,
      "astHeight" : 15
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3329,
        "startLineNumber" : 141,
        "startColumnNumber" : 35,
        "endLineNumber" : 210,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (ASYNC_COMMIT_BUFFER.size() == 0) {\n    return;\n  }\n  Map<String,List<Phase2Context>> mappedContexts=new HashMap<>(DEFAULT_RESOURCE_SIZE);\n  while (!ASYNC_COMMIT_BUFFER.isEmpty()) {\n    Phase2Context commitContext=ASYNC_COMMIT_BUFFER.poll();\n    List<Phase2Context> contextsGroupedByResourceId=mappedContexts.get(commitContext.resourceId);\n    if (contextsGroupedByResourceId == null) {\n      contextsGroupedByResourceId=new ArrayList<>();\n      mappedContexts.put(commitContext.resourceId,contextsGroupedByResourceId);\n    }\n    contextsGroupedByResourceId.add(commitContext);\n  }\n  for (  Map.Entry<String,List<Phase2Context>> entry : mappedContexts.entrySet()) {\n    Connection conn=null;\n    try {\n      try {\n        DataSourceManager resourceManager=(DataSourceManager)DefaultResourceManager.get().getResourceManager(BranchType.AT);\n        DataSourceProxy dataSourceProxy=resourceManager.get(entry.getKey());\n        if (dataSourceProxy == null) {\n          throw new ShouldNeverHappenException(\"Failed to find resource on \" + entry.getKey());\n        }\n        conn=dataSourceProxy.getPlainConnection();\n      }\n catch (      SQLException sqle) {\n        LOGGER.warn(\"Failed to get connection for async committing on \" + entry.getKey(),sqle);\n        continue;\n      }\n      List<Phase2Context> contextsGroupedByResourceId=entry.getValue();\n      Set<String> xids=new LinkedHashSet<>(UNDOLOG_DELETE_LIMIT_SIZE);\n      Set<Long> branchIds=new LinkedHashSet<>(UNDOLOG_DELETE_LIMIT_SIZE);\n      for (      Phase2Context commitContext : contextsGroupedByResourceId) {\n        xids.add(commitContext.xid);\n        branchIds.add(commitContext.branchId);\n        int maxSize=xids.size() > branchIds.size() ? xids.size() : branchIds.size();\n        if (maxSize == UNDOLOG_DELETE_LIMIT_SIZE) {\n          try {\n            UndoLogManager.batchDeleteUndoLog(xids,branchIds,conn);\n          }\n catch (          Exception ex) {\n            LOGGER.warn(\"Failed to batch delete undo log [\" + branchIds + \"/\"+ xids+ \"]\",ex);\n          }\n          xids.clear();\n          branchIds.clear();\n        }\n      }\n      if (CollectionUtils.isEmpty(xids) || CollectionUtils.isEmpty(branchIds)) {\n        return;\n      }\n      try {\n        UndoLogManager.batchDeleteUndoLog(xids,branchIds,conn);\n      }\n catch (      Exception ex) {\n        LOGGER.warn(\"Failed to batch delete undo log [\" + branchIds + \"/\"+ xids+ \"]\",ex);\n      }\n    }\n  finally {\n      if (conn != null) {\n        try {\n          conn.close();\n        }\n catch (        SQLException closeEx) {\n          LOGGER.warn(\"Failed to close JDBC resource while deleting undo_log \",closeEx);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 350,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3360,
        "startLineNumber" : 141,
        "startColumnNumber" : 4,
        "endLineNumber" : 210,
        "endColumnNumber" : 5
      },
      "nodeContext" : "private void doBranchCommits(){\n  if (ASYNC_COMMIT_BUFFER.size() == 0) {\n    return;\n  }\n  Map<String,List<Phase2Context>> mappedContexts=new HashMap<>(DEFAULT_RESOURCE_SIZE);\n  while (!ASYNC_COMMIT_BUFFER.isEmpty()) {\n    Phase2Context commitContext=ASYNC_COMMIT_BUFFER.poll();\n    List<Phase2Context> contextsGroupedByResourceId=mappedContexts.get(commitContext.resourceId);\n    if (contextsGroupedByResourceId == null) {\n      contextsGroupedByResourceId=new ArrayList<>();\n      mappedContexts.put(commitContext.resourceId,contextsGroupedByResourceId);\n    }\n    contextsGroupedByResourceId.add(commitContext);\n  }\n  for (  Map.Entry<String,List<Phase2Context>> entry : mappedContexts.entrySet()) {\n    Connection conn=null;\n    try {\n      try {\n        DataSourceManager resourceManager=(DataSourceManager)DefaultResourceManager.get().getResourceManager(BranchType.AT);\n        DataSourceProxy dataSourceProxy=resourceManager.get(entry.getKey());\n        if (dataSourceProxy == null) {\n          throw new ShouldNeverHappenException(\"Failed to find resource on \" + entry.getKey());\n        }\n        conn=dataSourceProxy.getPlainConnection();\n      }\n catch (      SQLException sqle) {\n        LOGGER.warn(\"Failed to get connection for async committing on \" + entry.getKey(),sqle);\n        continue;\n      }\n      List<Phase2Context> contextsGroupedByResourceId=entry.getValue();\n      Set<String> xids=new LinkedHashSet<>(UNDOLOG_DELETE_LIMIT_SIZE);\n      Set<Long> branchIds=new LinkedHashSet<>(UNDOLOG_DELETE_LIMIT_SIZE);\n      for (      Phase2Context commitContext : contextsGroupedByResourceId) {\n        xids.add(commitContext.xid);\n        branchIds.add(commitContext.branchId);\n        int maxSize=xids.size() > branchIds.size() ? xids.size() : branchIds.size();\n        if (maxSize == UNDOLOG_DELETE_LIMIT_SIZE) {\n          try {\n            UndoLogManager.batchDeleteUndoLog(xids,branchIds,conn);\n          }\n catch (          Exception ex) {\n            LOGGER.warn(\"Failed to batch delete undo log [\" + branchIds + \"/\"+ xids+ \"]\",ex);\n          }\n          xids.clear();\n          branchIds.clear();\n        }\n      }\n      if (CollectionUtils.isEmpty(xids) || CollectionUtils.isEmpty(branchIds)) {\n        return;\n      }\n      try {\n        UndoLogManager.batchDeleteUndoLog(xids,branchIds,conn);\n      }\n catch (      Exception ex) {\n        LOGGER.warn(\"Failed to batch delete undo log [\" + branchIds + \"/\"+ xids+ \"]\",ex);\n      }\n    }\n  finally {\n      if (conn != null) {\n        try {\n          conn.close();\n        }\n catch (        SQLException closeEx) {\n          LOGGER.warn(\"Failed to close JDBC resource while deleting undo_log \",closeEx);\n        }\n      }\n    }\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 354,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 169,
        "startColumnNumber" : 20,
        "endLineNumber" : 169,
        "endColumnNumber" : 108
      },
      "nodeContext" : "LOGGER.warn(\"Failed to get connection for async committing on \" + entry.getKey(),sqle);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 10,
      "astHeight" : 5
    },
    "tokenLength" : 7,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 51,
    "startLineNumber" : 169,
    "startColumnNumber" : 32,
    "endLineNumber" : 169,
    "endColumnNumber" : 83
  } ],
  "layoutRelationDataList" : [ ]
}