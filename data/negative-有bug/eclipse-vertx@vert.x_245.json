{
  "id" : 245,
  "expression" : "parts.length",
  "projectName" : "eclipse-vertx@vert.x",
  "commitID" : "665e20a715caff0cbaa72adfd1bb374c543281f0",
  "filePath" : "/src/main/java/io/vertx/core/dns/impl/netty/DnsQueryEncoder.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "parts.length",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 12,
      "startLineNumber" : 63,
      "startColumnNumber" : 24,
      "endLineNumber" : 63,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 63,
        "startColumnNumber" : 20,
        "endLineNumber" : 63,
        "endColumnNumber" : 36
      },
      "nodeContext" : "i < parts.length",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 134,
        "startLineNumber" : 63,
        "startColumnNumber" : 4,
        "endLineNumber" : 66,
        "endColumnNumber" : 5
      },
      "nodeContext" : "for (int i=0; i < parts.length; i++) {\n  buf.writeByte(parts[i].length());\n  buf.writeBytes(charset.encode(parts[i]));\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 33,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 322,
        "startLineNumber" : 61,
        "startColumnNumber" : 89,
        "endLineNumber" : 70,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  String[] parts=question.name().split(\"\\\\.\");\n  for (int i=0; i < parts.length; i++) {\n    buf.writeByte(parts[i].length());\n    buf.writeBytes(charset.encode(parts[i]));\n  }\n  buf.writeByte(0);\n  buf.writeShort(question.type());\n  buf.writeShort(question.dnsClass());\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 66,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 717,
        "startLineNumber" : 53,
        "startColumnNumber" : 2,
        "endLineNumber" : 70,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Encodes the information in a  {@link DnsQuestion} and writes it to thespecified  {@link io.netty.buffer.ByteBuf}.\n * @param question the question being encoded\n * @param charset  charset names are encoded in\n * @param buf      the buffer the encoded data should be written to\n */\nprivate static void encodeQuestion(DnsQuestion question,Charset charset,ByteBuf buf){\n  String[] parts=question.name().split(\"\\\\.\");\n  for (int i=0; i < parts.length; i++) {\n    buf.writeByte(parts[i].length());\n    buf.writeBytes(charset.encode(parts[i]));\n  }\n  buf.writeByte(0);\n  buf.writeShort(question.type());\n  buf.writeShort(question.dnsClass());\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 84,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 63,
        "startColumnNumber" : 20,
        "endLineNumber" : 63,
        "endColumnNumber" : 36
      },
      "nodeContext" : "i < parts.length",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 2,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 12,
    "startLineNumber" : 63,
    "startColumnNumber" : 24,
    "endLineNumber" : 63,
    "endColumnNumber" : 36
  } ],
  "layoutRelationDataList" : [ ]
}