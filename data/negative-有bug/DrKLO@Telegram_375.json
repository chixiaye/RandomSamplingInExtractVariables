{
  "id" : 375,
  "expression" : "Format.NO_VALUE",
  "projectName" : "DrKLO@Telegram",
  "commitID" : "11fbfb1329df700b203e1852a71c4c11b5ab12f4",
  "filePath" : "/TMessagesProj/src/main/java/com/google/android/exoplayer2/ext/flac/FlacDecoder.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "Format.NO_VALUE",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 15,
      "startLineNumber" : 72,
      "startColumnNumber" : 30,
      "endLineNumber" : 72,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,expression]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 72,
        "startColumnNumber" : 8,
        "endLineNumber" : 72,
        "endColumnNumber" : 45
      },
      "nodeContext" : "maxInputBufferSize != Format.NO_VALUE",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 72,
        "startColumnNumber" : 8,
        "endLineNumber" : 72,
        "endColumnNumber" : 96
      },
      "nodeContext" : "maxInputBufferSize != Format.NO_VALUE ? maxInputBufferSize : streamMetadata.maxFrameSize",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 121,
        "startLineNumber" : 71,
        "startColumnNumber" : 8,
        "endLineNumber" : 72,
        "endColumnNumber" : 96
      },
      "nodeContext" : "initialInputBufferSize=maxInputBufferSize != Format.NO_VALUE ? maxInputBufferSize : streamMetadata.maxFrameSize",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 126,
        "startLineNumber" : 71,
        "startColumnNumber" : 4,
        "endLineNumber" : 72,
        "endColumnNumber" : 97
      },
      "nodeContext" : "int initialInputBufferSize=maxInputBufferSize != Format.NO_VALUE ? maxInputBufferSize : streamMetadata.maxFrameSize;\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 821,
        "startLineNumber" : 55,
        "startColumnNumber" : 34,
        "endLineNumber" : 74,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  super(new DecoderInputBuffer[numInputBuffers],new SimpleOutputBuffer[numOutputBuffers]);\n  if (initializationData.size() != 1) {\n    throw new FlacDecoderException(\"Initialization data must be of length 1\");\n  }\n  decoderJni=new FlacDecoderJni();\n  decoderJni.setData(ByteBuffer.wrap(initializationData.get(0)));\n  try {\n    streamMetadata=decoderJni.decodeStreamMetadata();\n  }\n catch (  ParserException e) {\n    throw new FlacDecoderException(\"Failed to decode StreamInfo\",e);\n  }\ncatch (  IOException|InterruptedException e) {\n    throw new IllegalStateException(e);\n  }\n  int initialInputBufferSize=maxInputBufferSize != Format.NO_VALUE ? maxInputBufferSize : streamMetadata.maxFrameSize;\n  setInitialInputBufferSize(initialInputBufferSize);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 95,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1523,
        "startLineNumber" : 39,
        "startColumnNumber" : 2,
        "endLineNumber" : 74,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Creates a Flac decoder.\n * @param numInputBuffers The number of input buffers.\n * @param numOutputBuffers The number of output buffers.\n * @param maxInputBufferSize The maximum required input buffer size if known, or {@link Format#NO_VALUE} otherwise.\n * @param initializationData Codec-specific initialization data. It should contain only one entrywhich is the flac file header.\n * @throws FlacDecoderException Thrown if an exception occurs when initializing the decoder.\n */\npublic FlacDecoder(int numInputBuffers,int numOutputBuffers,int maxInputBufferSize,List<byte[]> initializationData) throws FlacDecoderException {\n  super(new DecoderInputBuffer[numInputBuffers],new SimpleOutputBuffer[numOutputBuffers]);\n  if (initializationData.size() != 1) {\n    throw new FlacDecoderException(\"Initialization data must be of length 1\");\n  }\n  decoderJni=new FlacDecoderJni();\n  decoderJni.setData(ByteBuffer.wrap(initializationData.get(0)));\n  try {\n    streamMetadata=decoderJni.decodeStreamMetadata();\n  }\n catch (  ParserException e) {\n    throw new FlacDecoderException(\"Failed to decode StreamInfo\",e);\n  }\ncatch (  IOException|InterruptedException e) {\n    throw new IllegalStateException(e);\n  }\n  int initialInputBufferSize=maxInputBufferSize != Format.NO_VALUE ? maxInputBufferSize : streamMetadata.maxFrameSize;\n  setInitialInputBufferSize(initialInputBufferSize);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 118,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 88,
        "startLineNumber" : 72,
        "startColumnNumber" : 8,
        "endLineNumber" : 72,
        "endColumnNumber" : 96
      },
      "nodeContext" : "maxInputBufferSize != Format.NO_VALUE ? maxInputBufferSize : streamMetadata.maxFrameSize",
      "nodeType" : "ConditionalExpression",
      "astNodeNumber" : 10,
      "astHeight" : 4
    },
    "tokenLength" : 3,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 15,
    "startLineNumber" : 72,
    "startColumnNumber" : 30,
    "endLineNumber" : 72,
    "endColumnNumber" : 45
  } ],
  "layoutRelationDataList" : [ ]
}