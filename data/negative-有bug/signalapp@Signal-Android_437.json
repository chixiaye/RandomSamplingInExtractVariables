{
  "id" : 437,
  "expression" : "\"identity\"",
  "projectName" : "signalapp@Signal-Android",
  "commitID" : "7e91132e7ed62a58b5f347de252ab1eda3f43b90",
  "filePath" : "/app/src/main/java/org/thoughtcrime/securesms/net/ChunkedDataFetcher.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"identity\"",
    "nodeType" : "StringLiteral",
    "nodePosition" : {
      "charLength" : 10,
      "startLineNumber" : 63,
      "startColumnNumber" : 65,
      "endLineNumber" : 63,
      "endColumnNumber" : 75
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 287,
        "startLineNumber" : 59,
        "startColumnNumber" : 24,
        "endLineNumber" : 63,
        "endColumnNumber" : 76
      },
      "nodeContext" : "new Request.Builder().url(url).cacheControl(NO_CACHE).addHeader(\"Range\",\"bytes=0-\" + (chunkSize - 1)).addHeader(\"Accept-Encoding\",\"identity\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 24,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 331,
        "startLineNumber" : 59,
        "startColumnNumber" : 24,
        "endLineNumber" : 64,
        "endColumnNumber" : 43
      },
      "nodeContext" : "new Request.Builder().url(url).cacheControl(NO_CACHE).addHeader(\"Range\",\"bytes=0-\" + (chunkSize - 1)).addHeader(\"Accept-Encoding\",\"identity\").build()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 26,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 343,
        "startLineNumber" : 59,
        "startColumnNumber" : 12,
        "endLineNumber" : 64,
        "endColumnNumber" : 43
      },
      "nodeContext" : "request=new Request.Builder().url(url).cacheControl(NO_CACHE).addHeader(\"Range\",\"bytes=0-\" + (chunkSize - 1)).addHeader(\"Accept-Encoding\",\"identity\").build()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 28,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 352,
        "startLineNumber" : 59,
        "startColumnNumber" : 4,
        "endLineNumber" : 64,
        "endColumnNumber" : 44
      },
      "nodeContext" : "Request request=new Request.Builder().url(url).cacheControl(NO_CACHE).addHeader(\"Range\",\"bytes=0-\" + (chunkSize - 1)).addHeader(\"Accept-Encoding\",\"identity\").build();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 31,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2900,
        "startLineNumber" : 55,
        "startColumnNumber" : 109,
        "endLineNumber" : 129,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  CompositeRequestController compositeController=new CompositeRequestController();\n  long chunkSize=new SecureRandom().nextInt(1024) + 1024;\n  Request request=new Request.Builder().url(url).cacheControl(NO_CACHE).addHeader(\"Range\",\"bytes=0-\" + (chunkSize - 1)).addHeader(\"Accept-Encoding\",\"identity\").build();\n  Call firstChunkCall=client.newCall(request);\n  compositeController.addController(new CallRequestController(firstChunkCall));\n  firstChunkCall.enqueue(new okhttp3.Callback(){\n    @Override public void onFailure(    @NonNull Call call,    @NonNull IOException e){\n      if (!compositeController.isCanceled()) {\n        callback.onFailure(e);\n        compositeController.cancel();\n      }\n    }\n    @Override public void onResponse(    @NonNull Call call,    @NonNull Response response){\n      String contentRange=response.header(\"Content-Range\");\n      if (!response.isSuccessful()) {\n        Log.w(TAG,\"Non-successful response code: \" + response.code());\n        callback.onFailure(new IOException(\"Non-successful response code: \" + response.code()));\n        compositeController.cancel();\n        if (response.body() != null)         response.body().close();\n        return;\n      }\n      if (TextUtils.isEmpty(contentRange)) {\n        Log.w(TAG,\"Missing Content-Range header.\");\n        callback.onFailure(new IOException(\"Missing Content-Length header.\"));\n        compositeController.cancel();\n        if (response.body() != null)         response.body().close();\n        return;\n      }\n      if (response.body() == null) {\n        Log.w(TAG,\"Missing body.\");\n        callback.onFailure(new IOException(\"Missing body on initial request.\"));\n        compositeController.cancel();\n        return;\n      }\n      Optional<Long> contentLength=parseLengthFromContentRange(contentRange);\n      if (!contentLength.isPresent()) {\n        Log.w(TAG,\"Unable to parse length from Content-Range.\");\n        callback.onFailure(new IOException(\"Unable to get parse length from Content-Range.\"));\n        compositeController.cancel();\n        return;\n      }\n      if (chunkSize >= contentLength.get()) {\n        try {\n          callback.onSuccess(response.body().byteStream());\n        }\n catch (        IOException e) {\n          callback.onFailure(e);\n          compositeController.cancel();\n        }\n      }\n else {\n        InputStream stream=ContentLengthInputStream.obtain(response.body().byteStream(),chunkSize);\n        fetchChunks(url,contentLength.get(),Optional.of(new Pair<>(stream,chunkSize)),compositeController,callback);\n      }\n    }\n  }\n);\n  return compositeController;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 353,
      "astHeight" : 16
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3007,
        "startLineNumber" : 55,
        "startColumnNumber" : 2,
        "endLineNumber" : 129,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private RequestController fetchChunksWithUnknownTotalSize(@NonNull String url,@NonNull Callback callback){\n  CompositeRequestController compositeController=new CompositeRequestController();\n  long chunkSize=new SecureRandom().nextInt(1024) + 1024;\n  Request request=new Request.Builder().url(url).cacheControl(NO_CACHE).addHeader(\"Range\",\"bytes=0-\" + (chunkSize - 1)).addHeader(\"Accept-Encoding\",\"identity\").build();\n  Call firstChunkCall=client.newCall(request);\n  compositeController.addController(new CallRequestController(firstChunkCall));\n  firstChunkCall.enqueue(new okhttp3.Callback(){\n    @Override public void onFailure(    @NonNull Call call,    @NonNull IOException e){\n      if (!compositeController.isCanceled()) {\n        callback.onFailure(e);\n        compositeController.cancel();\n      }\n    }\n    @Override public void onResponse(    @NonNull Call call,    @NonNull Response response){\n      String contentRange=response.header(\"Content-Range\");\n      if (!response.isSuccessful()) {\n        Log.w(TAG,\"Non-successful response code: \" + response.code());\n        callback.onFailure(new IOException(\"Non-successful response code: \" + response.code()));\n        compositeController.cancel();\n        if (response.body() != null)         response.body().close();\n        return;\n      }\n      if (TextUtils.isEmpty(contentRange)) {\n        Log.w(TAG,\"Missing Content-Range header.\");\n        callback.onFailure(new IOException(\"Missing Content-Length header.\"));\n        compositeController.cancel();\n        if (response.body() != null)         response.body().close();\n        return;\n      }\n      if (response.body() == null) {\n        Log.w(TAG,\"Missing body.\");\n        callback.onFailure(new IOException(\"Missing body on initial request.\"));\n        compositeController.cancel();\n        return;\n      }\n      Optional<Long> contentLength=parseLengthFromContentRange(contentRange);\n      if (!contentLength.isPresent()) {\n        Log.w(TAG,\"Unable to parse length from Content-Range.\");\n        callback.onFailure(new IOException(\"Unable to get parse length from Content-Range.\"));\n        compositeController.cancel();\n        return;\n      }\n      if (chunkSize >= contentLength.get()) {\n        try {\n          callback.onSuccess(response.body().byteStream());\n        }\n catch (        IOException e) {\n          callback.onFailure(e);\n          compositeController.cancel();\n        }\n      }\n else {\n        InputStream stream=ContentLengthInputStream.obtain(response.body().byteStream(),chunkSize);\n        fetchChunks(url,contentLength.get(),Optional.of(new Pair<>(stream,chunkSize)),compositeController,callback);\n      }\n    }\n  }\n);\n  return compositeController;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 370,
      "astHeight" : 17
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 287,
        "startLineNumber" : 59,
        "startColumnNumber" : 24,
        "endLineNumber" : 63,
        "endColumnNumber" : 76
      },
      "nodeContext" : "new Request.Builder().url(url).cacheControl(NO_CACHE).addHeader(\"Range\",\"bytes=0-\" + (chunkSize - 1)).addHeader(\"Accept-Encoding\",\"identity\")",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 24,
      "astHeight" : 8
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 10,
    "startLineNumber" : 63,
    "startColumnNumber" : 65,
    "endLineNumber" : 63,
    "endColumnNumber" : 75
  } ],
  "layoutRelationDataList" : [ ]
}