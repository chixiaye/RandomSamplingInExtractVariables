{
  "id" : 379,
  "expression" : "value > 0 && value <= 0x1fffffc",
  "projectName" : "NationalSecurityAgency@ghidra",
  "commitID" : "a54d0e28d652c48502551a88278808549aed5f98",
  "filePath" : "/Ghidra/Processors/PowerPC/src/main/java/ghidra/app/util/bin/format/elf/relocation/PowerPC_ElfRelocationHandler.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "value > 0 && value <= 0x1fffffc",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 31,
      "startLineNumber" : 194,
      "startColumnNumber" : 14,
      "endLineNumber" : 194,
      "endColumnNumber" : 45
    },
    "astNodeNumber" : 7,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 194,
        "startColumnNumber" : 13,
        "endLineNumber" : 194,
        "endColumnNumber" : 46
      },
      "nodeContext" : "(value > 0 && value <= 0x1fffffc)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 194,
        "startColumnNumber" : 13,
        "endLineNumber" : 194,
        "endColumnNumber" : 84
      },
      "nodeContext" : "(value > 0 && value <= 0x1fffffc) || (value < 0 && value >= 0xfe000000)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 590,
        "startLineNumber" : 194,
        "startColumnNumber" : 9,
        "endLineNumber" : 205,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if ((value > 0 && value <= 0x1fffffc) || (value < 0 && value >= 0xfe000000)) {\n  newValue=0x48000002 | (value & 0x3fffffc);\n  memory.setInt(relocationAddress,newValue);\n}\n else {\n  markAsUnhandled(program,relocationAddress,type,symbolIndex,symbolName,elfRelocationContext.getLog());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 46,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 807,
        "startLineNumber" : 189,
        "startColumnNumber" : 4,
        "endLineNumber" : 205,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if ((displacement << 6 >> 6) == displacement) {\n  newValue=0x48000000 | (displacement & 0x3fffffc);\n  memory.setInt(relocationAddress,newValue);\n}\n else if ((value > 0 && value <= 0x1fffffc) || (value < 0 && value >= 0xfe000000)) {\n  newValue=0x48000002 | (value & 0x3fffffc);\n  memory.setInt(relocationAddress,newValue);\n}\n else {\n  markAsUnhandled(program,relocationAddress,type,symbolIndex,symbolName,elfRelocationContext.getLog());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 71,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 5593,
        "startLineNumber" : 86,
        "startColumnNumber" : 2,
        "endLineNumber" : 211,
        "endColumnNumber" : 3
      },
      "nodeContext" : "switch (type) {\ncase PowerPC_ElfRelocationConstants.R_PPC_COPY:  markAsWarning(program,relocationAddress,\"R_PPC_COPY\",symbolName,symbolIndex,\"Runtime copy not supported\",elfRelocationContext.getLog());\nbreak;\ncase PowerPC_ElfRelocationConstants.R_PPC_ADDR32:case PowerPC_ElfRelocationConstants.R_PPC_UADDR32:case PowerPC_ElfRelocationConstants.R_PPC_GLOB_DAT:if (addend != 0 && isUnsupportedExternalRelocation(program,relocationAddress,symbolAddr,symbolName,addend,elfRelocationContext.getLog())) {\naddend=0;\n}\nnewValue=symbolValue + addend;\nmemory.setInt(relocationAddress,newValue);\nbreak;\ncase PowerPC_ElfRelocationConstants.R_PPC_ADDR24:newValue=(symbolValue + addend) >> 2;\nnewValue=(oldValue & ~PowerPC_ElfRelocationConstants.PPC_LOW24) | (newValue << 2);\nmemory.setInt(relocationAddress,newValue);\nbreak;\ncase PowerPC_ElfRelocationConstants.R_PPC_ADDR16:case PowerPC_ElfRelocationConstants.R_PPC_UADDR16:case PowerPC_ElfRelocationConstants.R_PPC_ADDR16_LO:newValue=symbolValue + addend;\nmemory.setShort(relocationAddress,(short)newValue);\nbreak;\ncase PowerPC_ElfRelocationConstants.R_PPC_ADDR16_HI:newValue=(symbolValue + addend) >> 16;\nmemory.setShort(relocationAddress,(short)newValue);\nbreak;\ncase PowerPC_ElfRelocationConstants.R_PPC_ADDR16_HA:newValue=(symbolValue + addend + 0x8000) >> 16;\nmemory.setShort(relocationAddress,(short)newValue);\nbreak;\ncase PowerPC_ElfRelocationConstants.R_PPC_ADDR14:case PowerPC_ElfRelocationConstants.R_PPC_ADDR14_BRTAKEN:case PowerPC_ElfRelocationConstants.R_PPC_ADDR14_BRNTAKEN:newValue=(symbolValue + addend) >> 2;\nnewValue=(oldValue & ~PowerPC_ElfRelocationConstants.PPC_LOW14) | ((newValue << 2) & PowerPC_ElfRelocationConstants.PPC_LOW24);\nmemory.setInt(relocationAddress,newValue);\nbreak;\ncase PowerPC_ElfRelocationConstants.R_PPC_REL24:newValue=(symbolValue + addend - offset) >> 2;\nnewValue=((newValue << 2) & PowerPC_ElfRelocationConstants.PPC_LOW24);\nnewValue=(oldValue & ~PowerPC_ElfRelocationConstants.PPC_LOW24) | newValue;\nmemory.setInt(relocationAddress,newValue);\nbreak;\ncase PowerPC_ElfRelocationConstants.R_PPC_RELATIVE:newValue=(int)elfRelocationContext.getImageBaseWordAdjustmentOffset() + addend;\nmemory.setInt(relocationAddress,newValue);\nbreak;\ncase PowerPC_ElfRelocationConstants.R_PPC_REL32:newValue=(symbolValue + addend - offset);\nmemory.setInt(relocationAddress,newValue);\nbreak;\ncase PowerPC_ElfRelocationConstants.R_PPC_REL14:case PowerPC_ElfRelocationConstants.R_PPC_REL14_BRTAKEN:case PowerPC_ElfRelocationConstants.R_PPC_REL14_BRNTAKEN:newValue=(symbolValue + addend - offset) >> 2;\nnewValue=(oldValue & ~PowerPC_ElfRelocationConstants.PPC_LOW14) | ((newValue << 2) & PowerPC_ElfRelocationConstants.PPC_LOW14);\nmemory.setInt(relocationAddress,newValue);\nbreak;\ncase PowerPC_ElfRelocationConstants.R_PPC_JMP_SLOT:int value=symbolValue + addend;\nElfDynamicTable dynamicTable=elf.getDynamicTable();\nif (dynamicTable != null && dynamicTable.containsDynamicValue(PowerPC_ElfExtension.DT_PPC_GOT)) {\nmemory.setInt(relocationAddress,value);\nbreak;\n}\nint displacement=value - offset;\nif ((displacement << 6 >> 6) == displacement) {\nnewValue=0x48000000 | (displacement & 0x3fffffc);\nmemory.setInt(relocationAddress,newValue);\n}\n else if ((value > 0 && value <= 0x1fffffc) || (value < 0 && value >= 0xfe000000)) {\nnewValue=0x48000002 | (value & 0x3fffffc);\nmemory.setInt(relocationAddress,newValue);\n}\n else {\nmarkAsUnhandled(program,relocationAddress,type,symbolIndex,symbolName,elfRelocationContext.getLog());\n}\nbreak;\ndefault:markAsUnhandled(program,relocationAddress,type,symbolIndex,symbolName,elfRelocationContext.getLog());\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 486,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 7417,
        "startLineNumber" : 36,
        "startColumnNumber" : 78,
        "endLineNumber" : 213,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  ElfHeader elf=elfRelocationContext.getElfHeader();\n  if (elf.e_machine() != ElfConstants.EM_PPC || !elf.is32Bit()) {\n    return;\n  }\n  Program program=elfRelocationContext.getProgram();\n  Memory memory=program.getMemory();\n  int type=relocation.getType();\n  if (type == PowerPC_ElfRelocationConstants.R_PPC_NONE) {\n    return;\n  }\n  int symbolIndex=relocation.getSymbolIndex();\n  Language language=elfRelocationContext.getProgram().getLanguage();\n  if (!\"PowerPC\".equals(language.getProcessor().toString()) || language.getLanguageDescription().getSize() != 32) {\n    markAsError(program,relocationAddress,Long.toString(type),null,\"Unsupported language for 32-bit PowerPC relocation\",elfRelocationContext.getLog());\n  }\n  int addend=(int)relocation.getAddend();\n  int offset=(int)relocationAddress.getOffset();\n  ElfSymbol sym=elfRelocationContext.getSymbol(symbolIndex);\n  Address symbolAddr=(elfRelocationContext.getSymbolAddress(sym));\n  int symbolValue=(int)elfRelocationContext.getSymbolValue(sym);\n  String symbolName=sym.getNameAsString();\n  int oldValue=memory.getInt(relocationAddress);\n  int newValue=0;\nswitch (type) {\ncase PowerPC_ElfRelocationConstants.R_PPC_COPY:    markAsWarning(program,relocationAddress,\"R_PPC_COPY\",symbolName,symbolIndex,\"Runtime copy not supported\",elfRelocationContext.getLog());\n  break;\ncase PowerPC_ElfRelocationConstants.R_PPC_ADDR32:case PowerPC_ElfRelocationConstants.R_PPC_UADDR32:case PowerPC_ElfRelocationConstants.R_PPC_GLOB_DAT:if (addend != 0 && isUnsupportedExternalRelocation(program,relocationAddress,symbolAddr,symbolName,addend,elfRelocationContext.getLog())) {\n  addend=0;\n}\nnewValue=symbolValue + addend;\nmemory.setInt(relocationAddress,newValue);\nbreak;\ncase PowerPC_ElfRelocationConstants.R_PPC_ADDR24:newValue=(symbolValue + addend) >> 2;\nnewValue=(oldValue & ~PowerPC_ElfRelocationConstants.PPC_LOW24) | (newValue << 2);\nmemory.setInt(relocationAddress,newValue);\nbreak;\ncase PowerPC_ElfRelocationConstants.R_PPC_ADDR16:case PowerPC_ElfRelocationConstants.R_PPC_UADDR16:case PowerPC_ElfRelocationConstants.R_PPC_ADDR16_LO:newValue=symbolValue + addend;\nmemory.setShort(relocationAddress,(short)newValue);\nbreak;\ncase PowerPC_ElfRelocationConstants.R_PPC_ADDR16_HI:newValue=(symbolValue + addend) >> 16;\nmemory.setShort(relocationAddress,(short)newValue);\nbreak;\ncase PowerPC_ElfRelocationConstants.R_PPC_ADDR16_HA:newValue=(symbolValue + addend + 0x8000) >> 16;\nmemory.setShort(relocationAddress,(short)newValue);\nbreak;\ncase PowerPC_ElfRelocationConstants.R_PPC_ADDR14:case PowerPC_ElfRelocationConstants.R_PPC_ADDR14_BRTAKEN:case PowerPC_ElfRelocationConstants.R_PPC_ADDR14_BRNTAKEN:newValue=(symbolValue + addend) >> 2;\nnewValue=(oldValue & ~PowerPC_ElfRelocationConstants.PPC_LOW14) | ((newValue << 2) & PowerPC_ElfRelocationConstants.PPC_LOW24);\nmemory.setInt(relocationAddress,newValue);\nbreak;\ncase PowerPC_ElfRelocationConstants.R_PPC_REL24:newValue=(symbolValue + addend - offset) >> 2;\nnewValue=((newValue << 2) & PowerPC_ElfRelocationConstants.PPC_LOW24);\nnewValue=(oldValue & ~PowerPC_ElfRelocationConstants.PPC_LOW24) | newValue;\nmemory.setInt(relocationAddress,newValue);\nbreak;\ncase PowerPC_ElfRelocationConstants.R_PPC_RELATIVE:newValue=(int)elfRelocationContext.getImageBaseWordAdjustmentOffset() + addend;\nmemory.setInt(relocationAddress,newValue);\nbreak;\ncase PowerPC_ElfRelocationConstants.R_PPC_REL32:newValue=(symbolValue + addend - offset);\nmemory.setInt(relocationAddress,newValue);\nbreak;\ncase PowerPC_ElfRelocationConstants.R_PPC_REL14:case PowerPC_ElfRelocationConstants.R_PPC_REL14_BRTAKEN:case PowerPC_ElfRelocationConstants.R_PPC_REL14_BRNTAKEN:newValue=(symbolValue + addend - offset) >> 2;\nnewValue=(oldValue & ~PowerPC_ElfRelocationConstants.PPC_LOW14) | ((newValue << 2) & PowerPC_ElfRelocationConstants.PPC_LOW14);\nmemory.setInt(relocationAddress,newValue);\nbreak;\ncase PowerPC_ElfRelocationConstants.R_PPC_JMP_SLOT:int value=symbolValue + addend;\nElfDynamicTable dynamicTable=elf.getDynamicTable();\nif (dynamicTable != null && dynamicTable.containsDynamicValue(PowerPC_ElfExtension.DT_PPC_GOT)) {\nmemory.setInt(relocationAddress,value);\nbreak;\n}\nint displacement=value - offset;\nif ((displacement << 6 >> 6) == displacement) {\nnewValue=0x48000000 | (displacement & 0x3fffffc);\nmemory.setInt(relocationAddress,newValue);\n}\n else if ((value > 0 && value <= 0x1fffffc) || (value < 0 && value >= 0xfe000000)) {\nnewValue=0x48000002 | (value & 0x3fffffc);\nmemory.setInt(relocationAddress,newValue);\n}\n else {\nmarkAsUnhandled(program,relocationAddress,type,symbolIndex,symbolName,elfRelocationContext.getLog());\n}\nbreak;\ndefault:markAsUnhandled(program,relocationAddress,type,symbolIndex,symbolName,elfRelocationContext.getLog());\nbreak;\n}\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 659,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 7598,
        "startLineNumber" : 34,
        "startColumnNumber" : 1,
        "endLineNumber" : 213,
        "endColumnNumber" : 2
      },
      "nodeContext" : "@Override public void relocate(ElfRelocationContext elfRelocationContext,ElfRelocation relocation,Address relocationAddress) throws MemoryAccessException, NotFoundException {\n  ElfHeader elf=elfRelocationContext.getElfHeader();\n  if (elf.e_machine() != ElfConstants.EM_PPC || !elf.is32Bit()) {\n    return;\n  }\n  Program program=elfRelocationContext.getProgram();\n  Memory memory=program.getMemory();\n  int type=relocation.getType();\n  if (type == PowerPC_ElfRelocationConstants.R_PPC_NONE) {\n    return;\n  }\n  int symbolIndex=relocation.getSymbolIndex();\n  Language language=elfRelocationContext.getProgram().getLanguage();\n  if (!\"PowerPC\".equals(language.getProcessor().toString()) || language.getLanguageDescription().getSize() != 32) {\n    markAsError(program,relocationAddress,Long.toString(type),null,\"Unsupported language for 32-bit PowerPC relocation\",elfRelocationContext.getLog());\n  }\n  int addend=(int)relocation.getAddend();\n  int offset=(int)relocationAddress.getOffset();\n  ElfSymbol sym=elfRelocationContext.getSymbol(symbolIndex);\n  Address symbolAddr=(elfRelocationContext.getSymbolAddress(sym));\n  int symbolValue=(int)elfRelocationContext.getSymbolValue(sym);\n  String symbolName=sym.getNameAsString();\n  int oldValue=memory.getInt(relocationAddress);\n  int newValue=0;\nswitch (type) {\ncase PowerPC_ElfRelocationConstants.R_PPC_COPY:    markAsWarning(program,relocationAddress,\"R_PPC_COPY\",symbolName,symbolIndex,\"Runtime copy not supported\",elfRelocationContext.getLog());\n  break;\ncase PowerPC_ElfRelocationConstants.R_PPC_ADDR32:case PowerPC_ElfRelocationConstants.R_PPC_UADDR32:case PowerPC_ElfRelocationConstants.R_PPC_GLOB_DAT:if (addend != 0 && isUnsupportedExternalRelocation(program,relocationAddress,symbolAddr,symbolName,addend,elfRelocationContext.getLog())) {\n  addend=0;\n}\nnewValue=symbolValue + addend;\nmemory.setInt(relocationAddress,newValue);\nbreak;\ncase PowerPC_ElfRelocationConstants.R_PPC_ADDR24:newValue=(symbolValue + addend) >> 2;\nnewValue=(oldValue & ~PowerPC_ElfRelocationConstants.PPC_LOW24) | (newValue << 2);\nmemory.setInt(relocationAddress,newValue);\nbreak;\ncase PowerPC_ElfRelocationConstants.R_PPC_ADDR16:case PowerPC_ElfRelocationConstants.R_PPC_UADDR16:case PowerPC_ElfRelocationConstants.R_PPC_ADDR16_LO:newValue=symbolValue + addend;\nmemory.setShort(relocationAddress,(short)newValue);\nbreak;\ncase PowerPC_ElfRelocationConstants.R_PPC_ADDR16_HI:newValue=(symbolValue + addend) >> 16;\nmemory.setShort(relocationAddress,(short)newValue);\nbreak;\ncase PowerPC_ElfRelocationConstants.R_PPC_ADDR16_HA:newValue=(symbolValue + addend + 0x8000) >> 16;\nmemory.setShort(relocationAddress,(short)newValue);\nbreak;\ncase PowerPC_ElfRelocationConstants.R_PPC_ADDR14:case PowerPC_ElfRelocationConstants.R_PPC_ADDR14_BRTAKEN:case PowerPC_ElfRelocationConstants.R_PPC_ADDR14_BRNTAKEN:newValue=(symbolValue + addend) >> 2;\nnewValue=(oldValue & ~PowerPC_ElfRelocationConstants.PPC_LOW14) | ((newValue << 2) & PowerPC_ElfRelocationConstants.PPC_LOW24);\nmemory.setInt(relocationAddress,newValue);\nbreak;\ncase PowerPC_ElfRelocationConstants.R_PPC_REL24:newValue=(symbolValue + addend - offset) >> 2;\nnewValue=((newValue << 2) & PowerPC_ElfRelocationConstants.PPC_LOW24);\nnewValue=(oldValue & ~PowerPC_ElfRelocationConstants.PPC_LOW24) | newValue;\nmemory.setInt(relocationAddress,newValue);\nbreak;\ncase PowerPC_ElfRelocationConstants.R_PPC_RELATIVE:newValue=(int)elfRelocationContext.getImageBaseWordAdjustmentOffset() + addend;\nmemory.setInt(relocationAddress,newValue);\nbreak;\ncase PowerPC_ElfRelocationConstants.R_PPC_REL32:newValue=(symbolValue + addend - offset);\nmemory.setInt(relocationAddress,newValue);\nbreak;\ncase PowerPC_ElfRelocationConstants.R_PPC_REL14:case PowerPC_ElfRelocationConstants.R_PPC_REL14_BRTAKEN:case PowerPC_ElfRelocationConstants.R_PPC_REL14_BRNTAKEN:newValue=(symbolValue + addend - offset) >> 2;\nnewValue=(oldValue & ~PowerPC_ElfRelocationConstants.PPC_LOW14) | ((newValue << 2) & PowerPC_ElfRelocationConstants.PPC_LOW14);\nmemory.setInt(relocationAddress,newValue);\nbreak;\ncase PowerPC_ElfRelocationConstants.R_PPC_JMP_SLOT:int value=symbolValue + addend;\nElfDynamicTable dynamicTable=elf.getDynamicTable();\nif (dynamicTable != null && dynamicTable.containsDynamicValue(PowerPC_ElfExtension.DT_PPC_GOT)) {\nmemory.setInt(relocationAddress,value);\nbreak;\n}\nint displacement=value - offset;\nif ((displacement << 6 >> 6) == displacement) {\nnewValue=0x48000000 | (displacement & 0x3fffffc);\nmemory.setInt(relocationAddress,newValue);\n}\n else if ((value > 0 && value <= 0x1fffffc) || (value < 0 && value >= 0xfe000000)) {\nnewValue=0x48000002 | (value & 0x3fffffc);\nmemory.setInt(relocationAddress,newValue);\n}\n else {\nmarkAsUnhandled(program,relocationAddress,type,symbolIndex,symbolName,elfRelocationContext.getLog());\n}\nbreak;\ndefault:markAsUnhandled(program,relocationAddress,type,symbolIndex,symbolName,elfRelocationContext.getLog());\nbreak;\n}\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 681,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 194,
        "startColumnNumber" : 13,
        "endLineNumber" : 194,
        "endColumnNumber" : 84
      },
      "nodeContext" : "(value > 0 && value <= 0x1fffffc) || (value < 0 && value >= 0xfe000000)",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 17,
      "astHeight" : 5
    },
    "tokenLength" : 7,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 31,
    "startLineNumber" : 194,
    "startColumnNumber" : 14,
    "endLineNumber" : 194,
    "endColumnNumber" : 45
  } ],
  "layoutRelationDataList" : [ ]
}