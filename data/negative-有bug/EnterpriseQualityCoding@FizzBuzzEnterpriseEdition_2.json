{
  "id" : 2,
  "expression" : "true",
  "projectName" : "EnterpriseQualityCoding@FizzBuzzEnterpriseEdition",
  "commitID" : "27e040318cdbe460fe08f50659402a428041879b",
  "filePath" : "/src/main/java/com/seriouscompany/business/java/fizzbuzz/packagenamingpackage/impl/math/arithmetics/NumberIsMultipleOfAnotherNumberVerifier.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "true",
    "nodeType" : "BooleanLiteral",
    "nodePosition" : {
      "charLength" : 4,
      "startLineNumber" : 29,
      "startColumnNumber" : 11,
      "endLineNumber" : 29,
      "endColumnNumber" : 15
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 29,
        "startColumnNumber" : 4,
        "endLineNumber" : 29,
        "endColumnNumber" : 16
      },
      "nodeContext" : "return true;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 28,
        "startColumnNumber" : 20,
        "endLineNumber" : 30,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 3,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 177,
        "startLineNumber" : 27,
        "startColumnNumber" : 3,
        "endLineNumber" : 32,
        "endColumnNumber" : 4
      },
      "nodeContext" : "if (IntegerForEqualityComparator.areTwoIntegersEqual(nMultiplyDivisionResultBySecondIntegerResult,nFirstNumber)) {\n  return true;\n}\n else {\n  return false;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 12,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 430,
        "startLineNumber" : 22,
        "startColumnNumber" : 6,
        "endLineNumber" : 33,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  final int nDivideFirstIntegerBySecondIntegerResult=(integerDivider.divide(nFirstNumber,nSecondNumber));\n  final int nMultiplyDivisionResultBySecondIntegerResult=nDivideFirstIntegerBySecondIntegerResult * nSecondNumber;\n  if (IntegerForEqualityComparator.areTwoIntegersEqual(nMultiplyDivisionResultBySecondIntegerResult,nFirstNumber)) {\n    return true;\n  }\n else {\n    return false;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 32,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 496,
        "startLineNumber" : 22,
        "startColumnNumber" : 2,
        "endLineNumber" : 35,
        "endColumnNumber" : 3
      },
      "nodeContext" : "try {\n  final int nDivideFirstIntegerBySecondIntegerResult=(integerDivider.divide(nFirstNumber,nSecondNumber));\n  final int nMultiplyDivisionResultBySecondIntegerResult=nDivideFirstIntegerBySecondIntegerResult * nSecondNumber;\n  if (IntegerForEqualityComparator.areTwoIntegersEqual(nMultiplyDivisionResultBySecondIntegerResult,nFirstNumber)) {\n    return true;\n  }\n else {\n    return false;\n  }\n}\n catch (final ArithmeticException ae) {\n  return false;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 42,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 505,
        "startLineNumber" : 21,
        "startColumnNumber" : 104,
        "endLineNumber" : 36,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  try {\n    final int nDivideFirstIntegerBySecondIntegerResult=(integerDivider.divide(nFirstNumber,nSecondNumber));\n    final int nMultiplyDivisionResultBySecondIntegerResult=nDivideFirstIntegerBySecondIntegerResult * nSecondNumber;\n    if (IntegerForEqualityComparator.areTwoIntegersEqual(nMultiplyDivisionResultBySecondIntegerResult,nFirstNumber)) {\n      return true;\n    }\n else {\n      return false;\n    }\n  }\n catch (  final ArithmeticException ae) {\n    return false;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 43,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 608,
        "startLineNumber" : 21,
        "startColumnNumber" : 1,
        "endLineNumber" : 36,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public static boolean numberIsMultipleOfAnotherNumber(final int nFirstNumber,final int nSecondNumber){\n  try {\n    final int nDivideFirstIntegerBySecondIntegerResult=(integerDivider.divide(nFirstNumber,nSecondNumber));\n    final int nMultiplyDivisionResultBySecondIntegerResult=nDivideFirstIntegerBySecondIntegerResult * nSecondNumber;\n    if (IntegerForEqualityComparator.areTwoIntegersEqual(nMultiplyDivisionResultBySecondIntegerResult,nFirstNumber)) {\n      return true;\n    }\n else {\n      return false;\n    }\n  }\n catch (  final ArithmeticException ae) {\n    return false;\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 56,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 12,
        "startLineNumber" : 29,
        "startColumnNumber" : 4,
        "endLineNumber" : 29,
        "endColumnNumber" : 16
      },
      "nodeContext" : "return true;\n",
      "nodeType" : "ReturnStatement",
      "astNodeNumber" : 2,
      "astHeight" : 2
    },
    "tokenLength" : 1,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 4,
    "startLineNumber" : 29,
    "startColumnNumber" : 11,
    "endLineNumber" : 29,
    "endColumnNumber" : 15
  } ],
  "layoutRelationDataList" : [ ]
}