{
  "id" : 335,
  "expression" : "input",
  "projectName" : "apache@druid",
  "commitID" : "f6662b4893a9b8cc8a0ebb77e63daddde882148d",
  "filePath" : "/core/src/main/java/org/apache/druid/data/input/impl/DelimitedInputFormat.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "input",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 93,
      "startColumnNumber" : 31,
      "endLineNumber" : 93,
      "endColumnNumber" : 36
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 33,
        "startLineNumber" : 93,
        "startColumnNumber" : 4,
        "endLineNumber" : 93,
        "endColumnNumber" : 37
      },
      "nodeContext" : "Preconditions.checkNotNull(input)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 93,
        "startColumnNumber" : 4,
        "endLineNumber" : 93,
        "endColumnNumber" : 38
      },
      "nodeContext" : "Preconditions.checkNotNull(input);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 442,
        "startLineNumber" : 92,
        "startColumnNumber" : 2,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Preconditions.checkNotNull(input);\n  Iterator<String> iterator=splitter.split(input).iterator();\n  List<String> result=new ArrayList<>();\n  while (iterator.hasNext()) {\n    String splitValue=iterator.next();\n    if (!NullHandling.replaceWithDefault() && splitValue.isEmpty()) {\n      result.add(null);\n    }\n else {\n      result.add(splitValue);\n    }\n  }\n  return Collections.unmodifiableList(result);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 71,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 886,
        "startLineNumber" : 85,
        "startColumnNumber" : 2,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Copied from Guava's  {@link Splitter#splitToList(CharSequence)}. This is to avoid the error of the missing method signature when using an old Guava library. For example, it may happen when running Druid Hadoop indexing jobs, since we may inherit the version provided by the Hadoop cluster. See https://github.com/apache/druid/issues/6801.\n */\npublic static List<String> splitToList(Splitter splitter,String input){\n  Preconditions.checkNotNull(input);\n  Iterator<String> iterator=splitter.split(input).iterator();\n  List<String> result=new ArrayList<>();\n  while (iterator.hasNext()) {\n    String splitValue=iterator.next();\n    if (!NullHandling.replaceWithDefault() && splitValue.isEmpty()) {\n      result.add(null);\n    }\n else {\n      result.add(splitValue);\n    }\n  }\n  return Collections.unmodifiableList(result);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 89,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 93,
        "startColumnNumber" : 4,
        "endLineNumber" : 93,
        "endColumnNumber" : 38
      },
      "nodeContext" : "Preconditions.checkNotNull(input);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  }, {
    "nodeContext" : "input",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 5,
      "startLineNumber" : 95,
      "startColumnNumber" : 47,
      "endLineNumber" : 95,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 21,
        "startLineNumber" : 95,
        "startColumnNumber" : 32,
        "endLineNumber" : 95,
        "endColumnNumber" : 53
      },
      "nodeContext" : "splitter.split(input)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 32,
        "startLineNumber" : 95,
        "startColumnNumber" : 32,
        "endLineNumber" : 95,
        "endColumnNumber" : 64
      },
      "nodeContext" : "splitter.split(input).iterator()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 43,
        "startLineNumber" : 95,
        "startColumnNumber" : 21,
        "endLineNumber" : 95,
        "endColumnNumber" : 64
      },
      "nodeContext" : "iterator=splitter.split(input).iterator()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 95,
        "startColumnNumber" : 4,
        "endLineNumber" : 95,
        "endColumnNumber" : 65
      },
      "nodeContext" : "Iterator<String> iterator=splitter.split(input).iterator();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 442,
        "startLineNumber" : 92,
        "startColumnNumber" : 2,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Preconditions.checkNotNull(input);\n  Iterator<String> iterator=splitter.split(input).iterator();\n  List<String> result=new ArrayList<>();\n  while (iterator.hasNext()) {\n    String splitValue=iterator.next();\n    if (!NullHandling.replaceWithDefault() && splitValue.isEmpty()) {\n      result.add(null);\n    }\n else {\n      result.add(splitValue);\n    }\n  }\n  return Collections.unmodifiableList(result);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 71,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 886,
        "startLineNumber" : 85,
        "startColumnNumber" : 2,
        "endLineNumber" : 108,
        "endColumnNumber" : 3
      },
      "nodeContext" : "/** \n * Copied from Guava's  {@link Splitter#splitToList(CharSequence)}. This is to avoid the error of the missing method signature when using an old Guava library. For example, it may happen when running Druid Hadoop indexing jobs, since we may inherit the version provided by the Hadoop cluster. See https://github.com/apache/druid/issues/6801.\n */\npublic static List<String> splitToList(Splitter splitter,String input){\n  Preconditions.checkNotNull(input);\n  Iterator<String> iterator=splitter.split(input).iterator();\n  List<String> result=new ArrayList<>();\n  while (iterator.hasNext()) {\n    String splitValue=iterator.next();\n    if (!NullHandling.replaceWithDefault() && splitValue.isEmpty()) {\n      result.add(null);\n    }\n else {\n      result.add(splitValue);\n    }\n  }\n  return Collections.unmodifiableList(result);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 89,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 61,
        "startLineNumber" : 95,
        "startColumnNumber" : 4,
        "endLineNumber" : 95,
        "endColumnNumber" : 65
      },
      "nodeContext" : "Iterator<String> iterator=splitter.split(input).iterator();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 5,
    "startLineNumber" : 93,
    "startColumnNumber" : 31,
    "endLineNumber" : 93,
    "endColumnNumber" : 36
  }, {
    "charLength" : 5,
    "startLineNumber" : 95,
    "startColumnNumber" : 47,
    "endLineNumber" : 95,
    "endColumnNumber" : 52
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  } ]
}