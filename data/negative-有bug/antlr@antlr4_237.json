{
  "id" : 237,
  "expression" : "i",
  "projectName" : "antlr@antlr4",
  "commitID" : "f2b93e550cd912be3973743d09206db98f4092c9",
  "filePath" : "/tool-testsuite/test/org/antlr/v4/test/tool/TestLookaheadTrees.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "i",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 145,
      "startColumnNumber" : 18,
      "endLineNumber" : 145,
      "endColumnNumber" : 19
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 145,
        "startColumnNumber" : 18,
        "endLineNumber" : 145,
        "endColumnNumber" : 48
      },
      "nodeContext" : "i < lookaheadParseTrees.size()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 192,
        "startLineNumber" : 145,
        "startColumnNumber" : 2,
        "endLineNumber" : 148,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0; i < lookaheadParseTrees.size(); i++) {\n  ParserRuleContext lt=lookaheadParseTrees.get(i);\n  assertEquals(expectedTrees[i],Trees.toStringTree(lt,nodeTextProvider));\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 34,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1144,
        "startLineNumber" : 126,
        "startColumnNumber" : 1,
        "endLineNumber" : 149,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  int startRuleIndex=g.getRule(startRuleName).index;\n  InterpreterTreeTextProvider nodeTextProvider=new InterpreterTreeTextProvider(g.getRuleNames());\n  LexerInterpreter lexEngine=lg.createLexerInterpreter(new ANTLRInputStream(input));\n  CommonTokenStream tokens=new CommonTokenStream(lexEngine);\n  GrammarParserInterpreter parser=g.createGrammarParserInterpreter(tokens);\n  parser.setProfile(true);\n  ParseTree t=parser.parse(startRuleIndex);\n  DecisionInfo decisionInfo=parser.getParseInfo().getDecisionInfo()[decision];\n  LookaheadEventInfo lookaheadEventInfo=decisionInfo.SLL_MaxLookEvent;\n  List<ParserRuleContext> lookaheadParseTrees=GrammarParserInterpreter.getLookaheadParseTrees(g,parser,tokens,startRuleIndex,lookaheadEventInfo.decision,lookaheadEventInfo.startIndex,lookaheadEventInfo.stopIndex);\n  assertEquals(expectedTrees.length,lookaheadParseTrees.size());\n  for (int i=0; i < lookaheadParseTrees.size(); i++) {\n    ParserRuleContext lt=lookaheadParseTrees.get(i);\n    assertEquals(expectedTrees[i],Trees.toStringTree(lt,nodeTextProvider));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 153,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1327,
        "startLineNumber" : 121,
        "startColumnNumber" : 1,
        "endLineNumber" : 149,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public void testLookaheadTrees(LexerGrammar lg,Grammar g,String input,String startRuleName,int decision,String[] expectedTrees){\n  int startRuleIndex=g.getRule(startRuleName).index;\n  InterpreterTreeTextProvider nodeTextProvider=new InterpreterTreeTextProvider(g.getRuleNames());\n  LexerInterpreter lexEngine=lg.createLexerInterpreter(new ANTLRInputStream(input));\n  CommonTokenStream tokens=new CommonTokenStream(lexEngine);\n  GrammarParserInterpreter parser=g.createGrammarParserInterpreter(tokens);\n  parser.setProfile(true);\n  ParseTree t=parser.parse(startRuleIndex);\n  DecisionInfo decisionInfo=parser.getParseInfo().getDecisionInfo()[decision];\n  LookaheadEventInfo lookaheadEventInfo=decisionInfo.SLL_MaxLookEvent;\n  List<ParserRuleContext> lookaheadParseTrees=GrammarParserInterpreter.getLookaheadParseTrees(g,parser,tokens,startRuleIndex,lookaheadEventInfo.decision,lookaheadEventInfo.startIndex,lookaheadEventInfo.stopIndex);\n  assertEquals(expectedTrees.length,lookaheadParseTrees.size());\n  for (int i=0; i < lookaheadParseTrees.size(); i++) {\n    ParserRuleContext lt=lookaheadParseTrees.get(i);\n    assertEquals(expectedTrees[i],Trees.toStringTree(lt,nodeTextProvider));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 182,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 145,
        "startColumnNumber" : 18,
        "endLineNumber" : 145,
        "endColumnNumber" : 48
      },
      "nodeContext" : "i < lookaheadParseTrees.size()",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "i",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 146,
      "startColumnNumber" : 50,
      "endLineNumber" : 146,
      "endColumnNumber" : 51
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 146,
        "startColumnNumber" : 26,
        "endLineNumber" : 146,
        "endColumnNumber" : 52
      },
      "nodeContext" : "lookaheadParseTrees.get(i)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 146,
        "startColumnNumber" : 21,
        "endLineNumber" : 146,
        "endColumnNumber" : 52
      },
      "nodeContext" : "lt=lookaheadParseTrees.get(i)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 146,
        "startColumnNumber" : 3,
        "endLineNumber" : 146,
        "endColumnNumber" : 53
      },
      "nodeContext" : "ParserRuleContext lt=lookaheadParseTrees.get(i);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 139,
        "startLineNumber" : 145,
        "startColumnNumber" : 55,
        "endLineNumber" : 148,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ParserRuleContext lt=lookaheadParseTrees.get(i);\n  assertEquals(expectedTrees[i],Trees.toStringTree(lt,nodeTextProvider));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 21,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 192,
        "startLineNumber" : 145,
        "startColumnNumber" : 2,
        "endLineNumber" : 148,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0; i < lookaheadParseTrees.size(); i++) {\n  ParserRuleContext lt=lookaheadParseTrees.get(i);\n  assertEquals(expectedTrees[i],Trees.toStringTree(lt,nodeTextProvider));\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 34,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1144,
        "startLineNumber" : 126,
        "startColumnNumber" : 1,
        "endLineNumber" : 149,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  int startRuleIndex=g.getRule(startRuleName).index;\n  InterpreterTreeTextProvider nodeTextProvider=new InterpreterTreeTextProvider(g.getRuleNames());\n  LexerInterpreter lexEngine=lg.createLexerInterpreter(new ANTLRInputStream(input));\n  CommonTokenStream tokens=new CommonTokenStream(lexEngine);\n  GrammarParserInterpreter parser=g.createGrammarParserInterpreter(tokens);\n  parser.setProfile(true);\n  ParseTree t=parser.parse(startRuleIndex);\n  DecisionInfo decisionInfo=parser.getParseInfo().getDecisionInfo()[decision];\n  LookaheadEventInfo lookaheadEventInfo=decisionInfo.SLL_MaxLookEvent;\n  List<ParserRuleContext> lookaheadParseTrees=GrammarParserInterpreter.getLookaheadParseTrees(g,parser,tokens,startRuleIndex,lookaheadEventInfo.decision,lookaheadEventInfo.startIndex,lookaheadEventInfo.stopIndex);\n  assertEquals(expectedTrees.length,lookaheadParseTrees.size());\n  for (int i=0; i < lookaheadParseTrees.size(); i++) {\n    ParserRuleContext lt=lookaheadParseTrees.get(i);\n    assertEquals(expectedTrees[i],Trees.toStringTree(lt,nodeTextProvider));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 153,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1327,
        "startLineNumber" : 121,
        "startColumnNumber" : 1,
        "endLineNumber" : 149,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public void testLookaheadTrees(LexerGrammar lg,Grammar g,String input,String startRuleName,int decision,String[] expectedTrees){\n  int startRuleIndex=g.getRule(startRuleName).index;\n  InterpreterTreeTextProvider nodeTextProvider=new InterpreterTreeTextProvider(g.getRuleNames());\n  LexerInterpreter lexEngine=lg.createLexerInterpreter(new ANTLRInputStream(input));\n  CommonTokenStream tokens=new CommonTokenStream(lexEngine);\n  GrammarParserInterpreter parser=g.createGrammarParserInterpreter(tokens);\n  parser.setProfile(true);\n  ParseTree t=parser.parse(startRuleIndex);\n  DecisionInfo decisionInfo=parser.getParseInfo().getDecisionInfo()[decision];\n  LookaheadEventInfo lookaheadEventInfo=decisionInfo.SLL_MaxLookEvent;\n  List<ParserRuleContext> lookaheadParseTrees=GrammarParserInterpreter.getLookaheadParseTrees(g,parser,tokens,startRuleIndex,lookaheadEventInfo.decision,lookaheadEventInfo.startIndex,lookaheadEventInfo.stopIndex);\n  assertEquals(expectedTrees.length,lookaheadParseTrees.size());\n  for (int i=0; i < lookaheadParseTrees.size(); i++) {\n    ParserRuleContext lt=lookaheadParseTrees.get(i);\n    assertEquals(expectedTrees[i],Trees.toStringTree(lt,nodeTextProvider));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 182,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 50,
        "startLineNumber" : 146,
        "startColumnNumber" : 3,
        "endLineNumber" : 146,
        "endColumnNumber" : 53
      },
      "nodeContext" : "ParserRuleContext lt=lookaheadParseTrees.get(i);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "i",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 147,
      "startColumnNumber" : 30,
      "endLineNumber" : 147,
      "endColumnNumber" : 31
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.MethodInvocation,arguments]",
      "nodePosition" : {
        "charLength" : 16,
        "startLineNumber" : 147,
        "startColumnNumber" : 16,
        "endLineNumber" : 147,
        "endColumnNumber" : 32
      },
      "nodeContext" : "expectedTrees[i]",
      "nodeType" : "ArrayAccess",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 147,
        "startColumnNumber" : 3,
        "endLineNumber" : 147,
        "endColumnNumber" : 75
      },
      "nodeContext" : "assertEquals(expectedTrees[i],Trees.toStringTree(lt,nodeTextProvider))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 147,
        "startColumnNumber" : 3,
        "endLineNumber" : 147,
        "endColumnNumber" : 76
      },
      "nodeContext" : "assertEquals(expectedTrees[i],Trees.toStringTree(lt,nodeTextProvider));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 139,
        "startLineNumber" : 145,
        "startColumnNumber" : 55,
        "endLineNumber" : 148,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  ParserRuleContext lt=lookaheadParseTrees.get(i);\n  assertEquals(expectedTrees[i],Trees.toStringTree(lt,nodeTextProvider));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 21,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 192,
        "startLineNumber" : 145,
        "startColumnNumber" : 2,
        "endLineNumber" : 148,
        "endColumnNumber" : 3
      },
      "nodeContext" : "for (int i=0; i < lookaheadParseTrees.size(); i++) {\n  ParserRuleContext lt=lookaheadParseTrees.get(i);\n  assertEquals(expectedTrees[i],Trees.toStringTree(lt,nodeTextProvider));\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 34,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1144,
        "startLineNumber" : 126,
        "startColumnNumber" : 1,
        "endLineNumber" : 149,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  int startRuleIndex=g.getRule(startRuleName).index;\n  InterpreterTreeTextProvider nodeTextProvider=new InterpreterTreeTextProvider(g.getRuleNames());\n  LexerInterpreter lexEngine=lg.createLexerInterpreter(new ANTLRInputStream(input));\n  CommonTokenStream tokens=new CommonTokenStream(lexEngine);\n  GrammarParserInterpreter parser=g.createGrammarParserInterpreter(tokens);\n  parser.setProfile(true);\n  ParseTree t=parser.parse(startRuleIndex);\n  DecisionInfo decisionInfo=parser.getParseInfo().getDecisionInfo()[decision];\n  LookaheadEventInfo lookaheadEventInfo=decisionInfo.SLL_MaxLookEvent;\n  List<ParserRuleContext> lookaheadParseTrees=GrammarParserInterpreter.getLookaheadParseTrees(g,parser,tokens,startRuleIndex,lookaheadEventInfo.decision,lookaheadEventInfo.startIndex,lookaheadEventInfo.stopIndex);\n  assertEquals(expectedTrees.length,lookaheadParseTrees.size());\n  for (int i=0; i < lookaheadParseTrees.size(); i++) {\n    ParserRuleContext lt=lookaheadParseTrees.get(i);\n    assertEquals(expectedTrees[i],Trees.toStringTree(lt,nodeTextProvider));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 153,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1327,
        "startLineNumber" : 121,
        "startColumnNumber" : 1,
        "endLineNumber" : 149,
        "endColumnNumber" : 2
      },
      "nodeContext" : "public void testLookaheadTrees(LexerGrammar lg,Grammar g,String input,String startRuleName,int decision,String[] expectedTrees){\n  int startRuleIndex=g.getRule(startRuleName).index;\n  InterpreterTreeTextProvider nodeTextProvider=new InterpreterTreeTextProvider(g.getRuleNames());\n  LexerInterpreter lexEngine=lg.createLexerInterpreter(new ANTLRInputStream(input));\n  CommonTokenStream tokens=new CommonTokenStream(lexEngine);\n  GrammarParserInterpreter parser=g.createGrammarParserInterpreter(tokens);\n  parser.setProfile(true);\n  ParseTree t=parser.parse(startRuleIndex);\n  DecisionInfo decisionInfo=parser.getParseInfo().getDecisionInfo()[decision];\n  LookaheadEventInfo lookaheadEventInfo=decisionInfo.SLL_MaxLookEvent;\n  List<ParserRuleContext> lookaheadParseTrees=GrammarParserInterpreter.getLookaheadParseTrees(g,parser,tokens,startRuleIndex,lookaheadEventInfo.decision,lookaheadEventInfo.startIndex,lookaheadEventInfo.stopIndex);\n  assertEquals(expectedTrees.length,lookaheadParseTrees.size());\n  for (int i=0; i < lookaheadParseTrees.size(); i++) {\n    ParserRuleContext lt=lookaheadParseTrees.get(i);\n    assertEquals(expectedTrees[i],Trees.toStringTree(lt,nodeTextProvider));\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 182,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 73,
        "startLineNumber" : 147,
        "startColumnNumber" : 3,
        "endLineNumber" : 147,
        "endColumnNumber" : 76
      },
      "nodeContext" : "assertEquals(expectedTrees[i],Trees.toStringTree(lt,nodeTextProvider));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 11,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 145,
    "startColumnNumber" : 18,
    "endLineNumber" : 145,
    "endColumnNumber" : 19
  }, {
    "charLength" : 1,
    "startLineNumber" : 146,
    "startColumnNumber" : 50,
    "endLineNumber" : 146,
    "endColumnNumber" : 51
  }, {
    "charLength" : 1,
    "startLineNumber" : 147,
    "startColumnNumber" : 30,
    "endLineNumber" : 147,
    "endColumnNumber" : 31
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 3
  } ]
}