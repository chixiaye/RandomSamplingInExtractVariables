{
  "id" : 231,
  "expression" : "tables",
  "projectName" : "apache@shardingsphere",
  "commitID" : "897bcea9f4b0f5e33eb545470f28a35d68fccf60",
  "filePath" : "/shardingsphere-infra/shardingsphere-infra-binder/src/test/java/org/apache/shardingsphere/infra/binder/statement/dml/UpdateStatementContextTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "tables",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 66,
      "startColumnNumber" : 8,
      "endLineNumber" : 66,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 66,
        "startColumnNumber" : 8,
        "endLineNumber" : 66,
        "endColumnNumber" : 26
      },
      "nodeContext" : "tables.add(table1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 66,
        "startColumnNumber" : 8,
        "endLineNumber" : 66,
        "endColumnNumber" : 27
      },
      "nodeContext" : "tables.add(table1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1563,
        "startLineNumber" : 59,
        "startColumnNumber" : 36,
        "endLineNumber" : 79,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  when(columnSegment.getOwner()).thenReturn(Optional.of(new OwnerSegment(0,0,new IdentifierValue(\"tbl_2\"))));\n  BinaryOperationExpression expression=new BinaryOperationExpression(0,0,columnSegment,null,null,null);\n  when(whereSegment.getExpr()).thenReturn(expression);\n  SimpleTableSegment table1=new SimpleTableSegment(new TableNameSegment(0,0,new IdentifierValue(\"tbl_1\")));\n  SimpleTableSegment table2=new SimpleTableSegment(new TableNameSegment(0,0,new IdentifierValue(\"tbl_2\")));\n  List<SimpleTableSegment> tables=new LinkedList<>();\n  tables.add(table1);\n  tables.add(table2);\n  JoinTableSegment joinTableSegment=new JoinTableSegment();\n  joinTableSegment.setLeft(table1);\n  joinTableSegment.setRight(table2);\n  UpdateStatement updateStatement=new MySQLUpdateStatement();\n  updateStatement.setWhere(whereSegment);\n  updateStatement.setTableSegment(joinTableSegment);\n  updateStatement.setSetAssignment(new SetAssignmentSegment(0,0,Collections.emptyList()));\n  UpdateStatementContext actual=new UpdateStatementContext(updateStatement,DefaultSchema.LOGIC_NAME);\n  assertThat(actual.getTablesContext().getTableNames(),is(new HashSet<>(Arrays.asList(\"tbl_1\",\"tbl_2\"))));\n  assertThat(actual.getWhere(),is(Optional.of(whereSegment)));\n  assertThat(actual.getAllTables().stream().map(a -> a.getTableName().getIdentifier().getValue()).collect(Collectors.toList()),is(Arrays.asList(\"tbl_1\",\"tbl_2\",\"tbl_2\")));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 224,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1605,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 79,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void assertNewInstance(){\n  when(columnSegment.getOwner()).thenReturn(Optional.of(new OwnerSegment(0,0,new IdentifierValue(\"tbl_2\"))));\n  BinaryOperationExpression expression=new BinaryOperationExpression(0,0,columnSegment,null,null,null);\n  when(whereSegment.getExpr()).thenReturn(expression);\n  SimpleTableSegment table1=new SimpleTableSegment(new TableNameSegment(0,0,new IdentifierValue(\"tbl_1\")));\n  SimpleTableSegment table2=new SimpleTableSegment(new TableNameSegment(0,0,new IdentifierValue(\"tbl_2\")));\n  List<SimpleTableSegment> tables=new LinkedList<>();\n  tables.add(table1);\n  tables.add(table2);\n  JoinTableSegment joinTableSegment=new JoinTableSegment();\n  joinTableSegment.setLeft(table1);\n  joinTableSegment.setRight(table2);\n  UpdateStatement updateStatement=new MySQLUpdateStatement();\n  updateStatement.setWhere(whereSegment);\n  updateStatement.setTableSegment(joinTableSegment);\n  updateStatement.setSetAssignment(new SetAssignmentSegment(0,0,Collections.emptyList()));\n  UpdateStatementContext actual=new UpdateStatementContext(updateStatement,DefaultSchema.LOGIC_NAME);\n  assertThat(actual.getTablesContext().getTableNames(),is(new HashSet<>(Arrays.asList(\"tbl_1\",\"tbl_2\"))));\n  assertThat(actual.getWhere(),is(Optional.of(whereSegment)));\n  assertThat(actual.getAllTables().stream().map(a -> a.getTableName().getIdentifier().getValue()).collect(Collectors.toList()),is(Arrays.asList(\"tbl_1\",\"tbl_2\",\"tbl_2\")));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 230,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 66,
        "startColumnNumber" : 8,
        "endLineNumber" : 66,
        "endColumnNumber" : 27
      },
      "nodeContext" : "tables.add(table1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.List<org.apache.shardingsphere.sql.parser.sql.common.segment.generic.table.SimpleTableSegment>"
  }, {
    "nodeContext" : "tables",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 6,
      "startLineNumber" : 67,
      "startColumnNumber" : 8,
      "endLineNumber" : 67,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 18,
        "startLineNumber" : 67,
        "startColumnNumber" : 8,
        "endLineNumber" : 67,
        "endColumnNumber" : 26
      },
      "nodeContext" : "tables.add(table2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 67,
        "startColumnNumber" : 8,
        "endLineNumber" : 67,
        "endColumnNumber" : 27
      },
      "nodeContext" : "tables.add(table2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1563,
        "startLineNumber" : 59,
        "startColumnNumber" : 36,
        "endLineNumber" : 79,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  when(columnSegment.getOwner()).thenReturn(Optional.of(new OwnerSegment(0,0,new IdentifierValue(\"tbl_2\"))));\n  BinaryOperationExpression expression=new BinaryOperationExpression(0,0,columnSegment,null,null,null);\n  when(whereSegment.getExpr()).thenReturn(expression);\n  SimpleTableSegment table1=new SimpleTableSegment(new TableNameSegment(0,0,new IdentifierValue(\"tbl_1\")));\n  SimpleTableSegment table2=new SimpleTableSegment(new TableNameSegment(0,0,new IdentifierValue(\"tbl_2\")));\n  List<SimpleTableSegment> tables=new LinkedList<>();\n  tables.add(table1);\n  tables.add(table2);\n  JoinTableSegment joinTableSegment=new JoinTableSegment();\n  joinTableSegment.setLeft(table1);\n  joinTableSegment.setRight(table2);\n  UpdateStatement updateStatement=new MySQLUpdateStatement();\n  updateStatement.setWhere(whereSegment);\n  updateStatement.setTableSegment(joinTableSegment);\n  updateStatement.setSetAssignment(new SetAssignmentSegment(0,0,Collections.emptyList()));\n  UpdateStatementContext actual=new UpdateStatementContext(updateStatement,DefaultSchema.LOGIC_NAME);\n  assertThat(actual.getTablesContext().getTableNames(),is(new HashSet<>(Arrays.asList(\"tbl_1\",\"tbl_2\"))));\n  assertThat(actual.getWhere(),is(Optional.of(whereSegment)));\n  assertThat(actual.getAllTables().stream().map(a -> a.getTableName().getIdentifier().getValue()).collect(Collectors.toList()),is(Arrays.asList(\"tbl_1\",\"tbl_2\",\"tbl_2\")));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 224,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1605,
        "startLineNumber" : 58,
        "startColumnNumber" : 4,
        "endLineNumber" : 79,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void assertNewInstance(){\n  when(columnSegment.getOwner()).thenReturn(Optional.of(new OwnerSegment(0,0,new IdentifierValue(\"tbl_2\"))));\n  BinaryOperationExpression expression=new BinaryOperationExpression(0,0,columnSegment,null,null,null);\n  when(whereSegment.getExpr()).thenReturn(expression);\n  SimpleTableSegment table1=new SimpleTableSegment(new TableNameSegment(0,0,new IdentifierValue(\"tbl_1\")));\n  SimpleTableSegment table2=new SimpleTableSegment(new TableNameSegment(0,0,new IdentifierValue(\"tbl_2\")));\n  List<SimpleTableSegment> tables=new LinkedList<>();\n  tables.add(table1);\n  tables.add(table2);\n  JoinTableSegment joinTableSegment=new JoinTableSegment();\n  joinTableSegment.setLeft(table1);\n  joinTableSegment.setRight(table2);\n  UpdateStatement updateStatement=new MySQLUpdateStatement();\n  updateStatement.setWhere(whereSegment);\n  updateStatement.setTableSegment(joinTableSegment);\n  updateStatement.setSetAssignment(new SetAssignmentSegment(0,0,Collections.emptyList()));\n  UpdateStatementContext actual=new UpdateStatementContext(updateStatement,DefaultSchema.LOGIC_NAME);\n  assertThat(actual.getTablesContext().getTableNames(),is(new HashSet<>(Arrays.asList(\"tbl_1\",\"tbl_2\"))));\n  assertThat(actual.getWhere(),is(Optional.of(whereSegment)));\n  assertThat(actual.getAllTables().stream().map(a -> a.getTableName().getIdentifier().getValue()).collect(Collectors.toList()),is(Arrays.asList(\"tbl_1\",\"tbl_2\",\"tbl_2\")));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 230,
      "astHeight" : 11
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 19,
        "startLineNumber" : 67,
        "startColumnNumber" : 8,
        "endLineNumber" : 67,
        "endColumnNumber" : 27
      },
      "nodeContext" : "tables.add(table2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.List<org.apache.shardingsphere.sql.parser.sql.common.segment.generic.table.SimpleTableSegment>"
  } ],
  "positionList" : [ {
    "charLength" : 6,
    "startLineNumber" : 66,
    "startColumnNumber" : 8,
    "endLineNumber" : 66,
    "endColumnNumber" : 14
  }, {
    "charLength" : 6,
    "startLineNumber" : 67,
    "startColumnNumber" : 8,
    "endLineNumber" : 67,
    "endColumnNumber" : 14
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}