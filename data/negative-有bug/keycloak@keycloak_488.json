{
  "id" : 488,
  "expression" : "nextEvent instanceof Comment",
  "projectName" : "keycloak@keycloak",
  "commitID" : "aacae9b9acb0fbedc49d4f88c9fbd7aa11922dce",
  "filePath" : "/saml-core/src/main/java/org/keycloak/saml/common/util/TransformerUtil.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "nextEvent instanceof Comment",
    "nodeType" : "InstanceofExpression",
    "nodePosition" : {
      "charLength" : 28,
      "startLineNumber" : 395,
      "startColumnNumber" : 16,
      "endLineNumber" : 395,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1072,
        "startLineNumber" : 395,
        "startColumnNumber" : 12,
        "endLineNumber" : 416,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (nextEvent instanceof Comment) {\n  Comment commentEvent=(Comment)nextEvent;\n  Node commentNode=doc.createComment(commentEvent.getText());\n  commentNode=doc.importNode(commentNode,true);\n  el.appendChild(commentNode);\n}\n else if (nextEvent.getEventType() == XMLEvent.CHARACTERS) {\n  Characters characterEvent=(Characters)nextEvent;\n  String trimmedData=characterEvent.getData().trim();\n  if (trimmedData != null && trimmedData.length() > 0) {\n    holder.encounteredTextNode=true;\n    try {\n      String text=StaxParserUtil.getElementText(xmlEventReader);\n      Node textNode=doc.createTextNode(text);\n      textNode=doc.importNode(textNode,true);\n      el.appendChild(textNode);\n    }\n catch (    Exception e) {\n      throw logger.parserException(e);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 128,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3978,
        "startLineNumber" : 333,
        "startColumnNumber" : 61,
        "endLineNumber" : 418,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Document doc=holder.doc;\n  QName elementName=startElement.getName();\n  String ns=elementName.getNamespaceURI();\n  String prefix=elementName.getPrefix();\n  String localPart=elementName.getLocalPart();\n  String qual=(prefix != null && !prefix.isEmpty()) ? prefix + \":\" + localPart : localPart;\n  Element el=doc.createElementNS(ns,qual);\n  String containsBaseNamespace=containsBaseNamespace(startElement);\n  if (StringUtil.isNotNull(containsBaseNamespace)) {\n    el=DocumentUtil.createDocumentWithBaseNamespace(containsBaseNamespace,localPart).getDocumentElement();\n    el=(Element)doc.importNode(el,true);\n  }\n  if (StringUtil.isNotNull(prefix)) {\n    el.setPrefix(prefix);\n  }\n  @SuppressWarnings(\"unchecked\") Iterator<Attribute> attrs=startElement.getAttributes();\n  while (attrs != null && attrs.hasNext()) {\n    Attribute attr=attrs.next();\n    QName attrName=attr.getName();\n    ns=attrName.getNamespaceURI();\n    prefix=attrName.getPrefix();\n    localPart=attrName.getLocalPart();\n    qual=(prefix != null && !prefix.isEmpty()) ? prefix + \":\" + localPart : localPart;\n    if (logger.isTraceEnabled()) {\n      logger.trace(\"Creating an Attribute Namespace=\" + ns + \":\"+ qual);\n    }\n    doc.createAttributeNS(ns,qual);\n    el.setAttributeNS(ns,qual,attr.getValue());\n  }\n  @SuppressWarnings(\"unchecked\") Iterator<Namespace> namespaces=startElement.getNamespaces();\n  while (namespaces != null && namespaces.hasNext()) {\n    Namespace namespace=namespaces.next();\n    QName name=namespace.getName();\n    localPart=name.getLocalPart();\n    prefix=name.getPrefix();\n    if (prefix != null && !prefix.isEmpty())     qual=(localPart != null && !localPart.isEmpty()) ? prefix + \":\" + localPart : prefix;\n    if (qual.equals(\"xmlns\"))     continue;\n    if (logger.isTraceEnabled()) {\n      logger.trace(\"Set Attribute Namespace=\" + name.getNamespaceURI() + \"::Qual=:\"+ qual+ \"::Value=\"+ namespace.getNamespaceURI());\n    }\n    if (qual != null && qual.startsWith(\"xmlns\")) {\n      el.setAttributeNS(name.getNamespaceURI(),qual,namespace.getNamespaceURI());\n    }\n  }\n  XMLEvent nextEvent=StaxParserUtil.peek(xmlEventReader);\n  if (nextEvent instanceof Comment) {\n    Comment commentEvent=(Comment)nextEvent;\n    Node commentNode=doc.createComment(commentEvent.getText());\n    commentNode=doc.importNode(commentNode,true);\n    el.appendChild(commentNode);\n  }\n else   if (nextEvent.getEventType() == XMLEvent.CHARACTERS) {\n    Characters characterEvent=(Characters)nextEvent;\n    String trimmedData=characterEvent.getData().trim();\n    if (trimmedData != null && trimmedData.length() > 0) {\n      holder.encounteredTextNode=true;\n      try {\n        String text=StaxParserUtil.getElementText(xmlEventReader);\n        Node textNode=doc.createTextNode(text);\n        textNode=doc.importNode(textNode,true);\n        el.appendChild(textNode);\n      }\n catch (      Exception e) {\n        throw logger.parserException(e);\n      }\n    }\n  }\n  return el;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 485,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4153,
        "startLineNumber" : 332,
        "startColumnNumber" : 8,
        "endLineNumber" : 418,
        "endColumnNumber" : 9
      },
      "nodeContext" : "private Element handleStartElement(XMLEventReader xmlEventReader,StartElement startElement,CustomHolder holder) throws ParsingException, ProcessingException {\n  Document doc=holder.doc;\n  QName elementName=startElement.getName();\n  String ns=elementName.getNamespaceURI();\n  String prefix=elementName.getPrefix();\n  String localPart=elementName.getLocalPart();\n  String qual=(prefix != null && !prefix.isEmpty()) ? prefix + \":\" + localPart : localPart;\n  Element el=doc.createElementNS(ns,qual);\n  String containsBaseNamespace=containsBaseNamespace(startElement);\n  if (StringUtil.isNotNull(containsBaseNamespace)) {\n    el=DocumentUtil.createDocumentWithBaseNamespace(containsBaseNamespace,localPart).getDocumentElement();\n    el=(Element)doc.importNode(el,true);\n  }\n  if (StringUtil.isNotNull(prefix)) {\n    el.setPrefix(prefix);\n  }\n  @SuppressWarnings(\"unchecked\") Iterator<Attribute> attrs=startElement.getAttributes();\n  while (attrs != null && attrs.hasNext()) {\n    Attribute attr=attrs.next();\n    QName attrName=attr.getName();\n    ns=attrName.getNamespaceURI();\n    prefix=attrName.getPrefix();\n    localPart=attrName.getLocalPart();\n    qual=(prefix != null && !prefix.isEmpty()) ? prefix + \":\" + localPart : localPart;\n    if (logger.isTraceEnabled()) {\n      logger.trace(\"Creating an Attribute Namespace=\" + ns + \":\"+ qual);\n    }\n    doc.createAttributeNS(ns,qual);\n    el.setAttributeNS(ns,qual,attr.getValue());\n  }\n  @SuppressWarnings(\"unchecked\") Iterator<Namespace> namespaces=startElement.getNamespaces();\n  while (namespaces != null && namespaces.hasNext()) {\n    Namespace namespace=namespaces.next();\n    QName name=namespace.getName();\n    localPart=name.getLocalPart();\n    prefix=name.getPrefix();\n    if (prefix != null && !prefix.isEmpty())     qual=(localPart != null && !localPart.isEmpty()) ? prefix + \":\" + localPart : prefix;\n    if (qual.equals(\"xmlns\"))     continue;\n    if (logger.isTraceEnabled()) {\n      logger.trace(\"Set Attribute Namespace=\" + name.getNamespaceURI() + \"::Qual=:\"+ qual+ \"::Value=\"+ namespace.getNamespaceURI());\n    }\n    if (qual != null && qual.startsWith(\"xmlns\")) {\n      el.setAttributeNS(name.getNamespaceURI(),qual,namespace.getNamespaceURI());\n    }\n  }\n  XMLEvent nextEvent=StaxParserUtil.peek(xmlEventReader);\n  if (nextEvent instanceof Comment) {\n    Comment commentEvent=(Comment)nextEvent;\n    Node commentNode=doc.createComment(commentEvent.getText());\n    commentNode=doc.importNode(commentNode,true);\n    el.appendChild(commentNode);\n  }\n else   if (nextEvent.getEventType() == XMLEvent.CHARACTERS) {\n    Characters characterEvent=(Characters)nextEvent;\n    String trimmedData=characterEvent.getData().trim();\n    if (trimmedData != null && trimmedData.length() > 0) {\n      holder.encounteredTextNode=true;\n      try {\n        String text=StaxParserUtil.getElementText(xmlEventReader);\n        Node textNode=doc.createTextNode(text);\n        textNode=doc.importNode(textNode,true);\n        el.appendChild(textNode);\n      }\n catch (      Exception e) {\n        throw logger.parserException(e);\n      }\n    }\n  }\n  return el;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 506,
      "astHeight" : 13
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1072,
        "startLineNumber" : 395,
        "startColumnNumber" : 12,
        "endLineNumber" : 416,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (nextEvent instanceof Comment) {\n  Comment commentEvent=(Comment)nextEvent;\n  Node commentNode=doc.createComment(commentEvent.getText());\n  commentNode=doc.importNode(commentNode,true);\n  el.appendChild(commentNode);\n}\n else if (nextEvent.getEventType() == XMLEvent.CHARACTERS) {\n  Characters characterEvent=(Characters)nextEvent;\n  String trimmedData=characterEvent.getData().trim();\n  if (trimmedData != null && trimmedData.length() > 0) {\n    holder.encounteredTextNode=true;\n    try {\n      String text=StaxParserUtil.getElementText(xmlEventReader);\n      Node textNode=doc.createTextNode(text);\n      textNode=doc.importNode(textNode,true);\n      el.appendChild(textNode);\n    }\n catch (    Exception e) {\n      throw logger.parserException(e);\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 128,
      "astHeight" : 11
    },
    "tokenLength" : 2,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 28,
    "startLineNumber" : 395,
    "startColumnNumber" : 16,
    "endLineNumber" : 395,
    "endColumnNumber" : 44
  } ],
  "layoutRelationDataList" : [ ]
}