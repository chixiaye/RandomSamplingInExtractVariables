{
  "id" : 30,
  "expression" : "capitalFirst(camel)",
  "projectName" : "baomidou@mybatis-plus",
  "commitID" : "7815611a659da4cc8d5443f5ef4c10ca0d937582",
  "filePath" : "/mybatis-plus-generate/src/main/java/com/baomidou/mybatisplus/generator/config/rules/NamingStrategy.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "capitalFirst(camel)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 62,
      "startColumnNumber" : 30,
      "endLineNumber" : 62,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 34,
        "startLineNumber" : 62,
        "startColumnNumber" : 16,
        "endLineNumber" : 62,
        "endColumnNumber" : 50
      },
      "nodeContext" : "result.append(capitalFirst(camel))",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 62,
        "startColumnNumber" : 16,
        "endLineNumber" : 62,
        "endColumnNumber" : 51
      },
      "nodeContext" : "result.append(capitalFirst(camel));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,elseStatement]",
      "nodePosition" : {
        "charLength" : 100,
        "startLineNumber" : 60,
        "startColumnNumber" : 19,
        "endLineNumber" : 63,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  result.append(capitalFirst(camel));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 220,
        "startLineNumber" : 57,
        "startColumnNumber" : 12,
        "endLineNumber" : 63,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (result.length() == 0) {\n  result.append(camel);\n}\n else {\n  result.append(capitalFirst(camel));\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 20,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]",
      "nodePosition" : {
        "charLength" : 394,
        "startLineNumber" : 51,
        "startColumnNumber" : 36,
        "endLineNumber" : 64,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  if (StringUtils.isEmpty(camel)) {\n    continue;\n  }\n  if (result.length() == 0) {\n    result.append(camel);\n  }\n else {\n    result.append(capitalFirst(camel));\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 28,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 422,
        "startLineNumber" : 51,
        "startColumnNumber" : 8,
        "endLineNumber" : 64,
        "endColumnNumber" : 9
      },
      "nodeContext" : "for (String camel : camels) {\n  if (StringUtils.isEmpty(camel)) {\n    continue;\n  }\n  if (result.length() == 0) {\n    result.append(camel);\n  }\n else {\n    result.append(capitalFirst(camel));\n  }\n}\n",
      "nodeType" : "EnhancedForStatement",
      "astNodeNumber" : 34,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 924,
        "startLineNumber" : 37,
        "startColumnNumber" : 55,
        "endLineNumber" : 66,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  if (StringUtils.isEmpty(name)) {\n    return \"\";\n  }\n  String tempName=name;\n  if (StringUtils.isCapitalMode(name) || StringUtils.isMixedMode(name)) {\n    tempName=name.toLowerCase();\n  }\n  StringBuilder result=new StringBuilder();\n  String camels[]=tempName.split(ConstVal.UNDERLINE);\n  for (  String camel : camels) {\n    if (StringUtils.isEmpty(camel)) {\n      continue;\n    }\n    if (result.length() == 0) {\n      result.append(camel);\n    }\n else {\n      result.append(capitalFirst(camel));\n    }\n  }\n  return result.toString();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 90,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.EnumDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 975,
        "startLineNumber" : 37,
        "startColumnNumber" : 4,
        "endLineNumber" : 66,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public static String underlineToCamel(String name){\n  if (StringUtils.isEmpty(name)) {\n    return \"\";\n  }\n  String tempName=name;\n  if (StringUtils.isCapitalMode(name) || StringUtils.isMixedMode(name)) {\n    tempName=name.toLowerCase();\n  }\n  StringBuilder result=new StringBuilder();\n  String camels[]=tempName.split(ConstVal.UNDERLINE);\n  for (  String camel : camels) {\n    if (StringUtils.isEmpty(camel)) {\n      continue;\n    }\n    if (result.length() == 0) {\n      result.append(camel);\n    }\n else {\n      result.append(capitalFirst(camel));\n    }\n  }\n  return result.toString();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 100,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 62,
        "startColumnNumber" : 16,
        "endLineNumber" : 62,
        "endColumnNumber" : 51
      },
      "nodeContext" : "result.append(capitalFirst(camel));\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 62,
    "startColumnNumber" : 30,
    "endLineNumber" : 62,
    "endColumnNumber" : 49
  } ],
  "layoutRelationDataList" : [ ]
}