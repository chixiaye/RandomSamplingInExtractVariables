{
  "id" : 392,
  "expression" : "struct2",
  "projectName" : "apache@kafka",
  "commitID" : "539f006e65d9060cd46a4052d1b70f2312d8ca34",
  "filePath" : "/clients/src/test/java/org/apache/kafka/common/protocol/types/StructTest.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "struct2",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 69,
      "startColumnNumber" : 30,
      "endLineNumber" : 69,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 69,
        "startColumnNumber" : 8,
        "endLineNumber" : 69,
        "endColumnNumber" : 38
      },
      "nodeContext" : "assertEquals(struct1,struct2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 69,
        "startColumnNumber" : 8,
        "endLineNumber" : 69,
        "endColumnNumber" : 39
      },
      "nodeContext" : "assertEquals(struct1,struct2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1840,
        "startLineNumber" : 43,
        "startColumnNumber" : 29,
        "endLineNumber" : 87,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Struct struct1=new Struct(FLAT_STRUCT_SCHEMA).set(\"int8\",(byte)12).set(\"int16\",(short)12).set(\"int32\",12).set(\"int64\",(long)12).set(\"boolean\",true).set(\"float64\",0.5).set(\"string\",\"foobar\");\n  Struct struct2=new Struct(FLAT_STRUCT_SCHEMA).set(\"int8\",(byte)12).set(\"int16\",(short)12).set(\"int32\",12).set(\"int64\",(long)12).set(\"boolean\",true).set(\"float64\",0.5).set(\"string\",\"foobar\");\n  Struct struct3=new Struct(FLAT_STRUCT_SCHEMA).set(\"int8\",(byte)12).set(\"int16\",(short)12).set(\"int32\",12).set(\"int64\",(long)12).set(\"boolean\",true).set(\"float64\",0.5).set(\"string\",\"mismatching string\");\n  assertEquals(struct1,struct2);\n  assertNotEquals(struct1,struct3);\n  Object[] array={(byte)1,(byte)2};\n  struct1=new Struct(NESTED_SCHEMA).set(\"array\",array).set(\"nested\",new Struct(NESTED_CHILD_SCHEMA).set(\"int8\",(byte)12));\n  Object[] array2={(byte)1,(byte)2};\n  struct2=new Struct(NESTED_SCHEMA).set(\"array\",array2).set(\"nested\",new Struct(NESTED_CHILD_SCHEMA).set(\"int8\",(byte)12));\n  Object[] array3={(byte)1,(byte)2,(byte)3};\n  struct3=new Struct(NESTED_SCHEMA).set(\"array\",array3).set(\"nested\",new Struct(NESTED_CHILD_SCHEMA).set(\"int8\",(byte)13));\n  assertEquals(struct1,struct2);\n  assertNotEquals(struct1,struct3);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 267,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1875,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 87,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testEquals(){\n  Struct struct1=new Struct(FLAT_STRUCT_SCHEMA).set(\"int8\",(byte)12).set(\"int16\",(short)12).set(\"int32\",12).set(\"int64\",(long)12).set(\"boolean\",true).set(\"float64\",0.5).set(\"string\",\"foobar\");\n  Struct struct2=new Struct(FLAT_STRUCT_SCHEMA).set(\"int8\",(byte)12).set(\"int16\",(short)12).set(\"int32\",12).set(\"int64\",(long)12).set(\"boolean\",true).set(\"float64\",0.5).set(\"string\",\"foobar\");\n  Struct struct3=new Struct(FLAT_STRUCT_SCHEMA).set(\"int8\",(byte)12).set(\"int16\",(short)12).set(\"int32\",12).set(\"int64\",(long)12).set(\"boolean\",true).set(\"float64\",0.5).set(\"string\",\"mismatching string\");\n  assertEquals(struct1,struct2);\n  assertNotEquals(struct1,struct3);\n  Object[] array={(byte)1,(byte)2};\n  struct1=new Struct(NESTED_SCHEMA).set(\"array\",array).set(\"nested\",new Struct(NESTED_CHILD_SCHEMA).set(\"int8\",(byte)12));\n  Object[] array2={(byte)1,(byte)2};\n  struct2=new Struct(NESTED_SCHEMA).set(\"array\",array2).set(\"nested\",new Struct(NESTED_CHILD_SCHEMA).set(\"int8\",(byte)12));\n  Object[] array3={(byte)1,(byte)2,(byte)3};\n  struct3=new Struct(NESTED_SCHEMA).set(\"array\",array3).set(\"nested\",new Struct(NESTED_CHILD_SCHEMA).set(\"int8\",(byte)13));\n  assertEquals(struct1,struct2);\n  assertNotEquals(struct1,struct3);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 273,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 69,
        "startColumnNumber" : 8,
        "endLineNumber" : 69,
        "endColumnNumber" : 39
      },
      "nodeContext" : "assertEquals(struct1,struct2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.kafka.common.protocol.types.Struct"
  }, {
    "nodeContext" : "struct2",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 7,
      "startLineNumber" : 85,
      "startColumnNumber" : 30,
      "endLineNumber" : 85,
      "endColumnNumber" : 37
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 30,
        "startLineNumber" : 85,
        "startColumnNumber" : 8,
        "endLineNumber" : 85,
        "endColumnNumber" : 38
      },
      "nodeContext" : "assertEquals(struct1,struct2)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 85,
        "startColumnNumber" : 8,
        "endLineNumber" : 85,
        "endColumnNumber" : 39
      },
      "nodeContext" : "assertEquals(struct1,struct2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 1840,
        "startLineNumber" : 43,
        "startColumnNumber" : 29,
        "endLineNumber" : 87,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Struct struct1=new Struct(FLAT_STRUCT_SCHEMA).set(\"int8\",(byte)12).set(\"int16\",(short)12).set(\"int32\",12).set(\"int64\",(long)12).set(\"boolean\",true).set(\"float64\",0.5).set(\"string\",\"foobar\");\n  Struct struct2=new Struct(FLAT_STRUCT_SCHEMA).set(\"int8\",(byte)12).set(\"int16\",(short)12).set(\"int32\",12).set(\"int64\",(long)12).set(\"boolean\",true).set(\"float64\",0.5).set(\"string\",\"foobar\");\n  Struct struct3=new Struct(FLAT_STRUCT_SCHEMA).set(\"int8\",(byte)12).set(\"int16\",(short)12).set(\"int32\",12).set(\"int64\",(long)12).set(\"boolean\",true).set(\"float64\",0.5).set(\"string\",\"mismatching string\");\n  assertEquals(struct1,struct2);\n  assertNotEquals(struct1,struct3);\n  Object[] array={(byte)1,(byte)2};\n  struct1=new Struct(NESTED_SCHEMA).set(\"array\",array).set(\"nested\",new Struct(NESTED_CHILD_SCHEMA).set(\"int8\",(byte)12));\n  Object[] array2={(byte)1,(byte)2};\n  struct2=new Struct(NESTED_SCHEMA).set(\"array\",array2).set(\"nested\",new Struct(NESTED_CHILD_SCHEMA).set(\"int8\",(byte)12));\n  Object[] array3={(byte)1,(byte)2,(byte)3};\n  struct3=new Struct(NESTED_SCHEMA).set(\"array\",array3).set(\"nested\",new Struct(NESTED_CHILD_SCHEMA).set(\"int8\",(byte)13));\n  assertEquals(struct1,struct2);\n  assertNotEquals(struct1,struct3);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 267,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 1875,
        "startLineNumber" : 42,
        "startColumnNumber" : 4,
        "endLineNumber" : 87,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testEquals(){\n  Struct struct1=new Struct(FLAT_STRUCT_SCHEMA).set(\"int8\",(byte)12).set(\"int16\",(short)12).set(\"int32\",12).set(\"int64\",(long)12).set(\"boolean\",true).set(\"float64\",0.5).set(\"string\",\"foobar\");\n  Struct struct2=new Struct(FLAT_STRUCT_SCHEMA).set(\"int8\",(byte)12).set(\"int16\",(short)12).set(\"int32\",12).set(\"int64\",(long)12).set(\"boolean\",true).set(\"float64\",0.5).set(\"string\",\"foobar\");\n  Struct struct3=new Struct(FLAT_STRUCT_SCHEMA).set(\"int8\",(byte)12).set(\"int16\",(short)12).set(\"int32\",12).set(\"int64\",(long)12).set(\"boolean\",true).set(\"float64\",0.5).set(\"string\",\"mismatching string\");\n  assertEquals(struct1,struct2);\n  assertNotEquals(struct1,struct3);\n  Object[] array={(byte)1,(byte)2};\n  struct1=new Struct(NESTED_SCHEMA).set(\"array\",array).set(\"nested\",new Struct(NESTED_CHILD_SCHEMA).set(\"int8\",(byte)12));\n  Object[] array2={(byte)1,(byte)2};\n  struct2=new Struct(NESTED_SCHEMA).set(\"array\",array2).set(\"nested\",new Struct(NESTED_CHILD_SCHEMA).set(\"int8\",(byte)12));\n  Object[] array3={(byte)1,(byte)2,(byte)3};\n  struct3=new Struct(NESTED_SCHEMA).set(\"array\",array3).set(\"nested\",new Struct(NESTED_CHILD_SCHEMA).set(\"int8\",(byte)13));\n  assertEquals(struct1,struct2);\n  assertNotEquals(struct1,struct3);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 273,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 31,
        "startLineNumber" : 85,
        "startColumnNumber" : 8,
        "endLineNumber" : 85,
        "endColumnNumber" : 39
      },
      "nodeContext" : "assertEquals(struct1,struct2);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "org.apache.kafka.common.protocol.types.Struct"
  } ],
  "positionList" : [ {
    "charLength" : 7,
    "startLineNumber" : 69,
    "startColumnNumber" : 30,
    "endLineNumber" : 69,
    "endColumnNumber" : 37
  }, {
    "charLength" : 7,
    "startLineNumber" : 85,
    "startColumnNumber" : 30,
    "endLineNumber" : 85,
    "endColumnNumber" : 37
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}