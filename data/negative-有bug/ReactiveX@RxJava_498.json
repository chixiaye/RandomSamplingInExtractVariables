{
  "id" : 498,
  "expression" : "new Thread(new Runnable(){\n  @Override public void run(){\n    try {\n      System.out.println(\"running TestMultiThreadedObservable thread\");\n      for (      final String s : values) {\n        threadPool.execute(new Runnable(){\n          @Override public void run(){\n            threadsRunning.incrementAndGet();\n            try {\n              if (s == null) {\n                System.out.println(\"TestMultiThreadedObservable onNext: null\");\n                throw npe;\n              }\n else               System.out.println(\"TestMultiThreadedObservable onNext: \" + s);\n              NbpObserver.onNext(s);\n              int concurrentThreads=threadsRunning.get();\n              int maxThreads=maxConcurrentThreads.get();\n              if (concurrentThreads > maxThreads) {\n                maxConcurrentThreads.compareAndSet(maxThreads,concurrentThreads);\n              }\n            }\n catch (            Throwable e) {\n              NbpObserver.onError(e);\n            }\n finally {\n              threadsRunning.decrementAndGet();\n            }\n          }\n        }\n);\n      }\n      threadPool.shutdown();\n    }\n catch (    Throwable e) {\n      throw new RuntimeException(e);\n    }\n    try {\n      threadPool.awaitTermination(2,TimeUnit.SECONDS);\n    }\n catch (    InterruptedException e) {\n      throw new RuntimeException(e);\n    }\n    NbpObserver.onComplete();\n  }\n}\n)",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/test/java/io/reactivex/internal/operators/observable/ObservableSerializeTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new Thread(new Runnable(){\n  @Override public void run(){\n    try {\n      System.out.println(\"running TestMultiThreadedObservable thread\");\n      for (      final String s : values) {\n        threadPool.execute(new Runnable(){\n          @Override public void run(){\n            threadsRunning.incrementAndGet();\n            try {\n              if (s == null) {\n                System.out.println(\"TestMultiThreadedObservable onNext: null\");\n                throw npe;\n              }\n else               System.out.println(\"TestMultiThreadedObservable onNext: \" + s);\n              NbpObserver.onNext(s);\n              int concurrentThreads=threadsRunning.get();\n              int maxThreads=maxConcurrentThreads.get();\n              if (concurrentThreads > maxThreads) {\n                maxConcurrentThreads.compareAndSet(maxThreads,concurrentThreads);\n              }\n            }\n catch (            Throwable e) {\n              NbpObserver.onError(e);\n            }\n finally {\n              threadsRunning.decrementAndGet();\n            }\n          }\n        }\n);\n      }\n      threadPool.shutdown();\n    }\n catch (    Throwable e) {\n      throw new RuntimeException(e);\n    }\n    try {\n      threadPool.awaitTermination(2,TimeUnit.SECONDS);\n    }\n catch (    InterruptedException e) {\n      throw new RuntimeException(e);\n    }\n    NbpObserver.onComplete();\n  }\n}\n)",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 2669,
      "startLineNumber" : 276,
      "startColumnNumber" : 16,
      "endLineNumber" : 326,
      "endColumnNumber" : 14
    },
    "astNodeNumber" : 161,
    "astHeight" : 23,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 2673,
        "startLineNumber" : 276,
        "startColumnNumber" : 12,
        "endLineNumber" : 326,
        "endColumnNumber" : 14
      },
      "nodeContext" : "t=new Thread(new Runnable(){\n  @Override public void run(){\n    try {\n      System.out.println(\"running TestMultiThreadedObservable thread\");\n      for (      final String s : values) {\n        threadPool.execute(new Runnable(){\n          @Override public void run(){\n            threadsRunning.incrementAndGet();\n            try {\n              if (s == null) {\n                System.out.println(\"TestMultiThreadedObservable onNext: null\");\n                throw npe;\n              }\n else               System.out.println(\"TestMultiThreadedObservable onNext: \" + s);\n              NbpObserver.onNext(s);\n              int concurrentThreads=threadsRunning.get();\n              int maxThreads=maxConcurrentThreads.get();\n              if (concurrentThreads > maxThreads) {\n                maxConcurrentThreads.compareAndSet(maxThreads,concurrentThreads);\n              }\n            }\n catch (            Throwable e) {\n              NbpObserver.onError(e);\n            }\n finally {\n              threadsRunning.decrementAndGet();\n            }\n          }\n        }\n);\n      }\n      threadPool.shutdown();\n    }\n catch (    Throwable e) {\n      throw new RuntimeException(e);\n    }\n    try {\n      threadPool.awaitTermination(2,TimeUnit.SECONDS);\n    }\n catch (    InterruptedException e) {\n      throw new RuntimeException(e);\n    }\n    NbpObserver.onComplete();\n  }\n}\n)",
      "nodeType" : "Assignment",
      "astNodeNumber" : 163,
      "astHeight" : 24
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2674,
        "startLineNumber" : 276,
        "startColumnNumber" : 12,
        "endLineNumber" : 326,
        "endColumnNumber" : 15
      },
      "nodeContext" : "t=new Thread(new Runnable(){\n  @Override public void run(){\n    try {\n      System.out.println(\"running TestMultiThreadedObservable thread\");\n      for (      final String s : values) {\n        threadPool.execute(new Runnable(){\n          @Override public void run(){\n            threadsRunning.incrementAndGet();\n            try {\n              if (s == null) {\n                System.out.println(\"TestMultiThreadedObservable onNext: null\");\n                throw npe;\n              }\n else               System.out.println(\"TestMultiThreadedObservable onNext: \" + s);\n              NbpObserver.onNext(s);\n              int concurrentThreads=threadsRunning.get();\n              int maxThreads=maxConcurrentThreads.get();\n              if (concurrentThreads > maxThreads) {\n                maxConcurrentThreads.compareAndSet(maxThreads,concurrentThreads);\n              }\n            }\n catch (            Throwable e) {\n              NbpObserver.onError(e);\n            }\n finally {\n              threadsRunning.decrementAndGet();\n            }\n          }\n        }\n);\n      }\n      threadPool.shutdown();\n    }\n catch (    Throwable e) {\n      throw new RuntimeException(e);\n    }\n    try {\n      threadPool.awaitTermination(2,TimeUnit.SECONDS);\n    }\n catch (    InterruptedException e) {\n      throw new RuntimeException(e);\n    }\n    NbpObserver.onComplete();\n  }\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 164,
      "astHeight" : 25
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3109,
        "startLineNumber" : 272,
        "startColumnNumber" : 74,
        "endLineNumber" : 330,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  NbpObserver.onSubscribe(EmptyDisposable.INSTANCE);\n  System.out.println(\"TestMultiThreadedObservable subscribed to ...\");\n  final NullPointerException npe=new NullPointerException();\n  t=new Thread(new Runnable(){\n    @Override public void run(){\n      try {\n        System.out.println(\"running TestMultiThreadedObservable thread\");\n        for (        final String s : values) {\n          threadPool.execute(new Runnable(){\n            @Override public void run(){\n              threadsRunning.incrementAndGet();\n              try {\n                if (s == null) {\n                  System.out.println(\"TestMultiThreadedObservable onNext: null\");\n                  throw npe;\n                }\n else                 System.out.println(\"TestMultiThreadedObservable onNext: \" + s);\n                NbpObserver.onNext(s);\n                int concurrentThreads=threadsRunning.get();\n                int maxThreads=maxConcurrentThreads.get();\n                if (concurrentThreads > maxThreads) {\n                  maxConcurrentThreads.compareAndSet(maxThreads,concurrentThreads);\n                }\n              }\n catch (              Throwable e) {\n                NbpObserver.onError(e);\n              }\n finally {\n                threadsRunning.decrementAndGet();\n              }\n            }\n          }\n);\n        }\n        threadPool.shutdown();\n      }\n catch (      Throwable e) {\n        throw new RuntimeException(e);\n      }\n      try {\n        threadPool.awaitTermination(2,TimeUnit.SECONDS);\n      }\n catch (      InterruptedException e) {\n        throw new RuntimeException(e);\n      }\n      NbpObserver.onComplete();\n    }\n  }\n);\n  System.out.println(\"starting TestMultiThreadedObservable thread\");\n  t.start();\n  System.out.println(\"done starting TestMultiThreadedObservable thread\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 206,
      "astHeight" : 26
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3194,
        "startLineNumber" : 271,
        "startColumnNumber" : 8,
        "endLineNumber" : 330,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public void subscribe(final Observer<? super String> NbpObserver){\n  NbpObserver.onSubscribe(EmptyDisposable.INSTANCE);\n  System.out.println(\"TestMultiThreadedObservable subscribed to ...\");\n  final NullPointerException npe=new NullPointerException();\n  t=new Thread(new Runnable(){\n    @Override public void run(){\n      try {\n        System.out.println(\"running TestMultiThreadedObservable thread\");\n        for (        final String s : values) {\n          threadPool.execute(new Runnable(){\n            @Override public void run(){\n              threadsRunning.incrementAndGet();\n              try {\n                if (s == null) {\n                  System.out.println(\"TestMultiThreadedObservable onNext: null\");\n                  throw npe;\n                }\n else                 System.out.println(\"TestMultiThreadedObservable onNext: \" + s);\n                NbpObserver.onNext(s);\n                int concurrentThreads=threadsRunning.get();\n                int maxThreads=maxConcurrentThreads.get();\n                if (concurrentThreads > maxThreads) {\n                  maxConcurrentThreads.compareAndSet(maxThreads,concurrentThreads);\n                }\n              }\n catch (              Throwable e) {\n                NbpObserver.onError(e);\n              }\n finally {\n                threadsRunning.decrementAndGet();\n              }\n            }\n          }\n);\n        }\n        threadPool.shutdown();\n      }\n catch (      Throwable e) {\n        throw new RuntimeException(e);\n      }\n      try {\n        threadPool.awaitTermination(2,TimeUnit.SECONDS);\n      }\n catch (      InterruptedException e) {\n        throw new RuntimeException(e);\n      }\n      NbpObserver.onComplete();\n    }\n  }\n);\n  System.out.println(\"starting TestMultiThreadedObservable thread\");\n  t.start();\n  System.out.println(\"done starting TestMultiThreadedObservable thread\");\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 221,
      "astHeight" : 27
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2674,
        "startLineNumber" : 276,
        "startColumnNumber" : 12,
        "endLineNumber" : 326,
        "endColumnNumber" : 15
      },
      "nodeContext" : "t=new Thread(new Runnable(){\n  @Override public void run(){\n    try {\n      System.out.println(\"running TestMultiThreadedObservable thread\");\n      for (      final String s : values) {\n        threadPool.execute(new Runnable(){\n          @Override public void run(){\n            threadsRunning.incrementAndGet();\n            try {\n              if (s == null) {\n                System.out.println(\"TestMultiThreadedObservable onNext: null\");\n                throw npe;\n              }\n else               System.out.println(\"TestMultiThreadedObservable onNext: \" + s);\n              NbpObserver.onNext(s);\n              int concurrentThreads=threadsRunning.get();\n              int maxThreads=maxConcurrentThreads.get();\n              if (concurrentThreads > maxThreads) {\n                maxConcurrentThreads.compareAndSet(maxThreads,concurrentThreads);\n              }\n            }\n catch (            Throwable e) {\n              NbpObserver.onError(e);\n            }\n finally {\n              threadsRunning.decrementAndGet();\n            }\n          }\n        }\n);\n      }\n      threadPool.shutdown();\n    }\n catch (    Throwable e) {\n      throw new RuntimeException(e);\n    }\n    try {\n      threadPool.awaitTermination(2,TimeUnit.SECONDS);\n    }\n catch (    InterruptedException e) {\n      throw new RuntimeException(e);\n    }\n    NbpObserver.onComplete();\n  }\n}\n);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 164,
      "astHeight" : 25
    },
    "tokenLength" : 75,
    "type" : "java.lang.Thread"
  } ],
  "positionList" : [ {
    "charLength" : 2669,
    "startLineNumber" : 276,
    "startColumnNumber" : 16,
    "endLineNumber" : 326,
    "endColumnNumber" : 14
  } ],
  "layoutRelationDataList" : [ ]
}