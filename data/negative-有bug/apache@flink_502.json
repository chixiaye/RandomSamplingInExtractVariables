{
  "id" : 502,
  "expression" : "totalEventsPerTimestamp",
  "projectName" : "apache@flink",
  "commitID" : "f8cb19e70ca7da6423dfb01b97e05c4d520c9fde",
  "filePath" : "/flink-libraries/flink-cep/src/main/java/org/apache/flink/cep/nfa/SharedBuffer.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "totalEventsPerTimestamp",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 327,
      "startColumnNumber" : 33,
      "endLineNumber" : 327,
      "endColumnNumber" : 56
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 66,
        "startLineNumber" : 327,
        "startColumnNumber" : 33,
        "endLineNumber" : 327,
        "endColumnNumber" : 99
      },
      "nodeContext" : "totalEventsPerTimestamp.computeIfAbsent(wrapper.timestamp,k -> 0)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 10,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 71,
        "startLineNumber" : 327,
        "startColumnNumber" : 28,
        "endLineNumber" : 327,
        "endColumnNumber" : 99
      },
      "nodeContext" : "id=totalEventsPerTimestamp.computeIfAbsent(wrapper.timestamp,k -> 0)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 12,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 327,
        "startColumnNumber" : 24,
        "endLineNumber" : 327,
        "endColumnNumber" : 100
      },
      "nodeContext" : "int id=totalEventsPerTimestamp.computeIfAbsent(wrapper.timestamp,k -> 0);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 469,
        "startLineNumber" : 326,
        "startColumnNumber" : 41,
        "endLineNumber" : 333,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  int id=totalEventsPerTimestamp.computeIfAbsent(wrapper.timestamp,k -> 0);\n  eventId=new EventId(id,wrapper.timestamp);\n  values.put(wrapper,eventId);\n  valuesWithIds.put(eventId,new Lockable<>(wrapper.value,1));\n  totalEventsPerTimestamp.computeIfPresent(wrapper.timestamp,(k,v) -> v + 1);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 59,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 643,
        "startLineNumber" : 326,
        "startColumnNumber" : 20,
        "endLineNumber" : 336,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (eventId == null) {\n  int id=totalEventsPerTimestamp.computeIfAbsent(wrapper.timestamp,k -> 0);\n  eventId=new EventId(id,wrapper.timestamp);\n  values.put(wrapper,eventId);\n  valuesWithIds.put(eventId,new Lockable<>(wrapper.value,1));\n  totalEventsPerTimestamp.computeIfPresent(wrapper.timestamp,(k,v) -> v + 1);\n}\n else {\n  Lockable<V> eventWrapper=valuesWithIds.get(eventId);\n  eventWrapper.lock();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 80,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1226,
        "startLineNumber" : 322,
        "startColumnNumber" : 56,
        "endLineNumber" : 344,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  ValueTimeWrapper<V> wrapper=ValueTimeWrapper.deserialize(valueSerializer,source);\n  EventId eventId=values.get(wrapper);\n  if (eventId == null) {\n    int id=totalEventsPerTimestamp.computeIfAbsent(wrapper.timestamp,k -> 0);\n    eventId=new EventId(id,wrapper.timestamp);\n    values.put(wrapper,eventId);\n    valuesWithIds.put(eventId,new Lockable<>(wrapper.value,1));\n    totalEventsPerTimestamp.computeIfPresent(wrapper.timestamp,(k,v) -> v + 1);\n  }\n else {\n    Lockable<V> eventWrapper=valuesWithIds.get(eventId);\n    eventWrapper.lock();\n  }\n  NodeId nodeId=new NodeId(eventId,(String)stateName);\n  int refCount=source.readInt();\n  entries.add(Tuple2.of(nodeId,new Lockable<>(new SharedBufferNode(),refCount)));\n  mappingContext.put(Tuple2.of((String)stateName,wrapper),nodeId);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 152,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1266,
        "startLineNumber" : 322,
        "startColumnNumber" : 16,
        "endLineNumber" : 344,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (int j=0; j < numberEntries; j++) {\n  ValueTimeWrapper<V> wrapper=ValueTimeWrapper.deserialize(valueSerializer,source);\n  EventId eventId=values.get(wrapper);\n  if (eventId == null) {\n    int id=totalEventsPerTimestamp.computeIfAbsent(wrapper.timestamp,k -> 0);\n    eventId=new EventId(id,wrapper.timestamp);\n    values.put(wrapper,eventId);\n    valuesWithIds.put(eventId,new Lockable<>(wrapper.value,1));\n    totalEventsPerTimestamp.computeIfPresent(wrapper.timestamp,(k,v) -> v + 1);\n  }\n else {\n    Lockable<V> eventWrapper=valuesWithIds.get(eventId);\n    eventWrapper.lock();\n  }\n  NodeId nodeId=new NodeId(eventId,(String)stateName);\n  int refCount=source.readInt();\n  entries.add(Tuple2.of(nodeId,new Lockable<>(new SharedBufferNode(),refCount)));\n  mappingContext.put(Tuple2.of((String)stateName,wrapper),nodeId);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 163,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1453,
        "startLineNumber" : 317,
        "startColumnNumber" : 49,
        "endLineNumber" : 345,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  K stateName=keySerializer.deserialize(source);\n  int numberEntries=source.readInt();\n  for (int j=0; j < numberEntries; j++) {\n    ValueTimeWrapper<V> wrapper=ValueTimeWrapper.deserialize(valueSerializer,source);\n    EventId eventId=values.get(wrapper);\n    if (eventId == null) {\n      int id=totalEventsPerTimestamp.computeIfAbsent(wrapper.timestamp,k -> 0);\n      eventId=new EventId(id,wrapper.timestamp);\n      values.put(wrapper,eventId);\n      valuesWithIds.put(eventId,new Lockable<>(wrapper.value,1));\n      totalEventsPerTimestamp.computeIfPresent(wrapper.timestamp,(k,v) -> v + 1);\n    }\n else {\n      Lockable<V> eventWrapper=valuesWithIds.get(eventId);\n      eventWrapper.lock();\n    }\n    NodeId nodeId=new NodeId(eventId,(String)stateName);\n    int refCount=source.readInt();\n    entries.add(Tuple2.of(nodeId,new Lockable<>(new SharedBufferNode(),refCount)));\n    mappingContext.put(Tuple2.of((String)stateName,wrapper),nodeId);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 180,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1490,
        "startLineNumber" : 317,
        "startColumnNumber" : 12,
        "endLineNumber" : 345,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < totalPages; i++) {\n  K stateName=keySerializer.deserialize(source);\n  int numberEntries=source.readInt();\n  for (int j=0; j < numberEntries; j++) {\n    ValueTimeWrapper<V> wrapper=ValueTimeWrapper.deserialize(valueSerializer,source);\n    EventId eventId=values.get(wrapper);\n    if (eventId == null) {\n      int id=totalEventsPerTimestamp.computeIfAbsent(wrapper.timestamp,k -> 0);\n      eventId=new EventId(id,wrapper.timestamp);\n      values.put(wrapper,eventId);\n      valuesWithIds.put(eventId,new Lockable<>(wrapper.value,1));\n      totalEventsPerTimestamp.computeIfPresent(wrapper.timestamp,(k,v) -> v + 1);\n    }\n else {\n      Lockable<V> eventWrapper=valuesWithIds.get(eventId);\n      eventWrapper.lock();\n    }\n    NodeId nodeId=new NodeId(eventId,(String)stateName);\n    int refCount=source.readInt();\n    entries.add(Tuple2.of(nodeId,new Lockable<>(new SharedBufferNode(),refCount)));\n    mappingContext.put(Tuple2.of((String)stateName,wrapper),nodeId);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 191,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3290,
        "startLineNumber" : 309,
        "startColumnNumber" : 84,
        "endLineNumber" : 373,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  List<Tuple2<NodeId,Lockable<SharedBufferNode>>> entries=new ArrayList<>();\n  Map<ValueTimeWrapper<V>,EventId> values=new HashMap<>();\n  Map<EventId,Lockable<V>> valuesWithIds=new HashMap<>();\n  Map<Tuple2<String,ValueTimeWrapper<V>>,NodeId> mappingContext=new HashMap<>();\n  Map<Long,Integer> totalEventsPerTimestamp=new HashMap<>();\n  int totalPages=source.readInt();\n  for (int i=0; i < totalPages; i++) {\n    K stateName=keySerializer.deserialize(source);\n    int numberEntries=source.readInt();\n    for (int j=0; j < numberEntries; j++) {\n      ValueTimeWrapper<V> wrapper=ValueTimeWrapper.deserialize(valueSerializer,source);\n      EventId eventId=values.get(wrapper);\n      if (eventId == null) {\n        int id=totalEventsPerTimestamp.computeIfAbsent(wrapper.timestamp,k -> 0);\n        eventId=new EventId(id,wrapper.timestamp);\n        values.put(wrapper,eventId);\n        valuesWithIds.put(eventId,new Lockable<>(wrapper.value,1));\n        totalEventsPerTimestamp.computeIfPresent(wrapper.timestamp,(k,v) -> v + 1);\n      }\n else {\n        Lockable<V> eventWrapper=valuesWithIds.get(eventId);\n        eventWrapper.lock();\n      }\n      NodeId nodeId=new NodeId(eventId,(String)stateName);\n      int refCount=source.readInt();\n      entries.add(Tuple2.of(nodeId,new Lockable<>(new SharedBufferNode(),refCount)));\n      mappingContext.put(Tuple2.of((String)stateName,wrapper),nodeId);\n    }\n  }\n  int totalEdges=source.readInt();\n  Map<Integer,EventId> starters=new HashMap<>();\n  for (int j=0; j < totalEdges; j++) {\n    int sourceIdx=source.readInt();\n    int targetIdx=source.readInt();\n    DeweyNumber version=versionSerializer.deserialize(source);\n    Tuple2<NodeId,Lockable<SharedBufferNode>> sourceEntry=entries.get(sourceIdx);\n    Tuple2<NodeId,Lockable<SharedBufferNode>> targetEntry=targetIdx < 0 ? Tuple2.of(null,null) : entries.get(targetIdx);\n    sourceEntry.f1.getElement().addEdge(new SharedBufferEdge(targetEntry.f0,version));\n    if (version.length() == 1) {\n      starters.put(version.getRun(),sourceEntry.f0.getEventId());\n    }\n  }\n  Map<NodeId,Lockable<SharedBufferNode>> entriesMap=entries.stream().collect(Collectors.toMap(e -> e.f0,e -> e.f1));\n  return new SharedBuffer<>(valuesWithIds,entriesMap,mappingContext,starters);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 464,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3384,
        "startLineNumber" : 308,
        "startColumnNumber" : 8,
        "endLineNumber" : 373,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public SharedBuffer<V> deserialize(DataInputView source) throws IOException {\n  List<Tuple2<NodeId,Lockable<SharedBufferNode>>> entries=new ArrayList<>();\n  Map<ValueTimeWrapper<V>,EventId> values=new HashMap<>();\n  Map<EventId,Lockable<V>> valuesWithIds=new HashMap<>();\n  Map<Tuple2<String,ValueTimeWrapper<V>>,NodeId> mappingContext=new HashMap<>();\n  Map<Long,Integer> totalEventsPerTimestamp=new HashMap<>();\n  int totalPages=source.readInt();\n  for (int i=0; i < totalPages; i++) {\n    K stateName=keySerializer.deserialize(source);\n    int numberEntries=source.readInt();\n    for (int j=0; j < numberEntries; j++) {\n      ValueTimeWrapper<V> wrapper=ValueTimeWrapper.deserialize(valueSerializer,source);\n      EventId eventId=values.get(wrapper);\n      if (eventId == null) {\n        int id=totalEventsPerTimestamp.computeIfAbsent(wrapper.timestamp,k -> 0);\n        eventId=new EventId(id,wrapper.timestamp);\n        values.put(wrapper,eventId);\n        valuesWithIds.put(eventId,new Lockable<>(wrapper.value,1));\n        totalEventsPerTimestamp.computeIfPresent(wrapper.timestamp,(k,v) -> v + 1);\n      }\n else {\n        Lockable<V> eventWrapper=valuesWithIds.get(eventId);\n        eventWrapper.lock();\n      }\n      NodeId nodeId=new NodeId(eventId,(String)stateName);\n      int refCount=source.readInt();\n      entries.add(Tuple2.of(nodeId,new Lockable<>(new SharedBufferNode(),refCount)));\n      mappingContext.put(Tuple2.of((String)stateName,wrapper),nodeId);\n    }\n  }\n  int totalEdges=source.readInt();\n  Map<Integer,EventId> starters=new HashMap<>();\n  for (int j=0; j < totalEdges; j++) {\n    int sourceIdx=source.readInt();\n    int targetIdx=source.readInt();\n    DeweyNumber version=versionSerializer.deserialize(source);\n    Tuple2<NodeId,Lockable<SharedBufferNode>> sourceEntry=entries.get(sourceIdx);\n    Tuple2<NodeId,Lockable<SharedBufferNode>> targetEntry=targetIdx < 0 ? Tuple2.of(null,null) : entries.get(targetIdx);\n    sourceEntry.f1.getElement().addEdge(new SharedBufferEdge(targetEntry.f0,version));\n    if (version.length() == 1) {\n      starters.put(version.getRun(),sourceEntry.f0.getEventId());\n    }\n  }\n  Map<NodeId,Lockable<SharedBufferNode>> entriesMap=entries.stream().collect(Collectors.toMap(e -> e.f0,e -> e.f1));\n  return new SharedBuffer<>(valuesWithIds,entriesMap,mappingContext,starters);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 480,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 76,
        "startLineNumber" : 327,
        "startColumnNumber" : 24,
        "endLineNumber" : 327,
        "endColumnNumber" : 100
      },
      "nodeContext" : "int id=totalEventsPerTimestamp.computeIfAbsent(wrapper.timestamp,k -> 0);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 14,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.util.Map<java.lang.Long,java.lang.Integer>"
  }, {
    "nodeContext" : "totalEventsPerTimestamp",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 23,
      "startLineNumber" : 331,
      "startColumnNumber" : 24,
      "endLineNumber" : 331,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 331,
        "startColumnNumber" : 24,
        "endLineNumber" : 332,
        "endColumnNumber" : 67
      },
      "nodeContext" : "totalEventsPerTimestamp.computeIfPresent(wrapper.timestamp,(k,v) -> v + 1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 110,
        "startLineNumber" : 331,
        "startColumnNumber" : 24,
        "endLineNumber" : 332,
        "endColumnNumber" : 68
      },
      "nodeContext" : "totalEventsPerTimestamp.computeIfPresent(wrapper.timestamp,(k,v) -> v + 1);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 15,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 469,
        "startLineNumber" : 326,
        "startColumnNumber" : 41,
        "endLineNumber" : 333,
        "endColumnNumber" : 21
      },
      "nodeContext" : "{\n  int id=totalEventsPerTimestamp.computeIfAbsent(wrapper.timestamp,k -> 0);\n  eventId=new EventId(id,wrapper.timestamp);\n  values.put(wrapper,eventId);\n  valuesWithIds.put(eventId,new Lockable<>(wrapper.value,1));\n  totalEventsPerTimestamp.computeIfPresent(wrapper.timestamp,(k,v) -> v + 1);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 59,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 643,
        "startLineNumber" : 326,
        "startColumnNumber" : 20,
        "endLineNumber" : 336,
        "endColumnNumber" : 21
      },
      "nodeContext" : "if (eventId == null) {\n  int id=totalEventsPerTimestamp.computeIfAbsent(wrapper.timestamp,k -> 0);\n  eventId=new EventId(id,wrapper.timestamp);\n  values.put(wrapper,eventId);\n  valuesWithIds.put(eventId,new Lockable<>(wrapper.value,1));\n  totalEventsPerTimestamp.computeIfPresent(wrapper.timestamp,(k,v) -> v + 1);\n}\n else {\n  Lockable<V> eventWrapper=valuesWithIds.get(eventId);\n  eventWrapper.lock();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 80,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1226,
        "startLineNumber" : 322,
        "startColumnNumber" : 56,
        "endLineNumber" : 344,
        "endColumnNumber" : 17
      },
      "nodeContext" : "{\n  ValueTimeWrapper<V> wrapper=ValueTimeWrapper.deserialize(valueSerializer,source);\n  EventId eventId=values.get(wrapper);\n  if (eventId == null) {\n    int id=totalEventsPerTimestamp.computeIfAbsent(wrapper.timestamp,k -> 0);\n    eventId=new EventId(id,wrapper.timestamp);\n    values.put(wrapper,eventId);\n    valuesWithIds.put(eventId,new Lockable<>(wrapper.value,1));\n    totalEventsPerTimestamp.computeIfPresent(wrapper.timestamp,(k,v) -> v + 1);\n  }\n else {\n    Lockable<V> eventWrapper=valuesWithIds.get(eventId);\n    eventWrapper.lock();\n  }\n  NodeId nodeId=new NodeId(eventId,(String)stateName);\n  int refCount=source.readInt();\n  entries.add(Tuple2.of(nodeId,new Lockable<>(new SharedBufferNode(),refCount)));\n  mappingContext.put(Tuple2.of((String)stateName,wrapper),nodeId);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 152,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1266,
        "startLineNumber" : 322,
        "startColumnNumber" : 16,
        "endLineNumber" : 344,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (int j=0; j < numberEntries; j++) {\n  ValueTimeWrapper<V> wrapper=ValueTimeWrapper.deserialize(valueSerializer,source);\n  EventId eventId=values.get(wrapper);\n  if (eventId == null) {\n    int id=totalEventsPerTimestamp.computeIfAbsent(wrapper.timestamp,k -> 0);\n    eventId=new EventId(id,wrapper.timestamp);\n    values.put(wrapper,eventId);\n    valuesWithIds.put(eventId,new Lockable<>(wrapper.value,1));\n    totalEventsPerTimestamp.computeIfPresent(wrapper.timestamp,(k,v) -> v + 1);\n  }\n else {\n    Lockable<V> eventWrapper=valuesWithIds.get(eventId);\n    eventWrapper.lock();\n  }\n  NodeId nodeId=new NodeId(eventId,(String)stateName);\n  int refCount=source.readInt();\n  entries.add(Tuple2.of(nodeId,new Lockable<>(new SharedBufferNode(),refCount)));\n  mappingContext.put(Tuple2.of((String)stateName,wrapper),nodeId);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 163,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 1453,
        "startLineNumber" : 317,
        "startColumnNumber" : 49,
        "endLineNumber" : 345,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  K stateName=keySerializer.deserialize(source);\n  int numberEntries=source.readInt();\n  for (int j=0; j < numberEntries; j++) {\n    ValueTimeWrapper<V> wrapper=ValueTimeWrapper.deserialize(valueSerializer,source);\n    EventId eventId=values.get(wrapper);\n    if (eventId == null) {\n      int id=totalEventsPerTimestamp.computeIfAbsent(wrapper.timestamp,k -> 0);\n      eventId=new EventId(id,wrapper.timestamp);\n      values.put(wrapper,eventId);\n      valuesWithIds.put(eventId,new Lockable<>(wrapper.value,1));\n      totalEventsPerTimestamp.computeIfPresent(wrapper.timestamp,(k,v) -> v + 1);\n    }\n else {\n      Lockable<V> eventWrapper=valuesWithIds.get(eventId);\n      eventWrapper.lock();\n    }\n    NodeId nodeId=new NodeId(eventId,(String)stateName);\n    int refCount=source.readInt();\n    entries.add(Tuple2.of(nodeId,new Lockable<>(new SharedBufferNode(),refCount)));\n    mappingContext.put(Tuple2.of((String)stateName,wrapper),nodeId);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 180,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 1490,
        "startLineNumber" : 317,
        "startColumnNumber" : 12,
        "endLineNumber" : 345,
        "endColumnNumber" : 13
      },
      "nodeContext" : "for (int i=0; i < totalPages; i++) {\n  K stateName=keySerializer.deserialize(source);\n  int numberEntries=source.readInt();\n  for (int j=0; j < numberEntries; j++) {\n    ValueTimeWrapper<V> wrapper=ValueTimeWrapper.deserialize(valueSerializer,source);\n    EventId eventId=values.get(wrapper);\n    if (eventId == null) {\n      int id=totalEventsPerTimestamp.computeIfAbsent(wrapper.timestamp,k -> 0);\n      eventId=new EventId(id,wrapper.timestamp);\n      values.put(wrapper,eventId);\n      valuesWithIds.put(eventId,new Lockable<>(wrapper.value,1));\n      totalEventsPerTimestamp.computeIfPresent(wrapper.timestamp,(k,v) -> v + 1);\n    }\n else {\n      Lockable<V> eventWrapper=valuesWithIds.get(eventId);\n      eventWrapper.lock();\n    }\n    NodeId nodeId=new NodeId(eventId,(String)stateName);\n    int refCount=source.readInt();\n    entries.add(Tuple2.of(nodeId,new Lockable<>(new SharedBufferNode(),refCount)));\n    mappingContext.put(Tuple2.of((String)stateName,wrapper),nodeId);\n  }\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 191,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3290,
        "startLineNumber" : 309,
        "startColumnNumber" : 84,
        "endLineNumber" : 373,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  List<Tuple2<NodeId,Lockable<SharedBufferNode>>> entries=new ArrayList<>();\n  Map<ValueTimeWrapper<V>,EventId> values=new HashMap<>();\n  Map<EventId,Lockable<V>> valuesWithIds=new HashMap<>();\n  Map<Tuple2<String,ValueTimeWrapper<V>>,NodeId> mappingContext=new HashMap<>();\n  Map<Long,Integer> totalEventsPerTimestamp=new HashMap<>();\n  int totalPages=source.readInt();\n  for (int i=0; i < totalPages; i++) {\n    K stateName=keySerializer.deserialize(source);\n    int numberEntries=source.readInt();\n    for (int j=0; j < numberEntries; j++) {\n      ValueTimeWrapper<V> wrapper=ValueTimeWrapper.deserialize(valueSerializer,source);\n      EventId eventId=values.get(wrapper);\n      if (eventId == null) {\n        int id=totalEventsPerTimestamp.computeIfAbsent(wrapper.timestamp,k -> 0);\n        eventId=new EventId(id,wrapper.timestamp);\n        values.put(wrapper,eventId);\n        valuesWithIds.put(eventId,new Lockable<>(wrapper.value,1));\n        totalEventsPerTimestamp.computeIfPresent(wrapper.timestamp,(k,v) -> v + 1);\n      }\n else {\n        Lockable<V> eventWrapper=valuesWithIds.get(eventId);\n        eventWrapper.lock();\n      }\n      NodeId nodeId=new NodeId(eventId,(String)stateName);\n      int refCount=source.readInt();\n      entries.add(Tuple2.of(nodeId,new Lockable<>(new SharedBufferNode(),refCount)));\n      mappingContext.put(Tuple2.of((String)stateName,wrapper),nodeId);\n    }\n  }\n  int totalEdges=source.readInt();\n  Map<Integer,EventId> starters=new HashMap<>();\n  for (int j=0; j < totalEdges; j++) {\n    int sourceIdx=source.readInt();\n    int targetIdx=source.readInt();\n    DeweyNumber version=versionSerializer.deserialize(source);\n    Tuple2<NodeId,Lockable<SharedBufferNode>> sourceEntry=entries.get(sourceIdx);\n    Tuple2<NodeId,Lockable<SharedBufferNode>> targetEntry=targetIdx < 0 ? Tuple2.of(null,null) : entries.get(targetIdx);\n    sourceEntry.f1.getElement().addEdge(new SharedBufferEdge(targetEntry.f0,version));\n    if (version.length() == 1) {\n      starters.put(version.getRun(),sourceEntry.f0.getEventId());\n    }\n  }\n  Map<NodeId,Lockable<SharedBufferNode>> entriesMap=entries.stream().collect(Collectors.toMap(e -> e.f0,e -> e.f1));\n  return new SharedBuffer<>(valuesWithIds,entriesMap,mappingContext,starters);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 464,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3384,
        "startLineNumber" : 308,
        "startColumnNumber" : 8,
        "endLineNumber" : 373,
        "endColumnNumber" : 9
      },
      "nodeContext" : "@Override public SharedBuffer<V> deserialize(DataInputView source) throws IOException {\n  List<Tuple2<NodeId,Lockable<SharedBufferNode>>> entries=new ArrayList<>();\n  Map<ValueTimeWrapper<V>,EventId> values=new HashMap<>();\n  Map<EventId,Lockable<V>> valuesWithIds=new HashMap<>();\n  Map<Tuple2<String,ValueTimeWrapper<V>>,NodeId> mappingContext=new HashMap<>();\n  Map<Long,Integer> totalEventsPerTimestamp=new HashMap<>();\n  int totalPages=source.readInt();\n  for (int i=0; i < totalPages; i++) {\n    K stateName=keySerializer.deserialize(source);\n    int numberEntries=source.readInt();\n    for (int j=0; j < numberEntries; j++) {\n      ValueTimeWrapper<V> wrapper=ValueTimeWrapper.deserialize(valueSerializer,source);\n      EventId eventId=values.get(wrapper);\n      if (eventId == null) {\n        int id=totalEventsPerTimestamp.computeIfAbsent(wrapper.timestamp,k -> 0);\n        eventId=new EventId(id,wrapper.timestamp);\n        values.put(wrapper,eventId);\n        valuesWithIds.put(eventId,new Lockable<>(wrapper.value,1));\n        totalEventsPerTimestamp.computeIfPresent(wrapper.timestamp,(k,v) -> v + 1);\n      }\n else {\n        Lockable<V> eventWrapper=valuesWithIds.get(eventId);\n        eventWrapper.lock();\n      }\n      NodeId nodeId=new NodeId(eventId,(String)stateName);\n      int refCount=source.readInt();\n      entries.add(Tuple2.of(nodeId,new Lockable<>(new SharedBufferNode(),refCount)));\n      mappingContext.put(Tuple2.of((String)stateName,wrapper),nodeId);\n    }\n  }\n  int totalEdges=source.readInt();\n  Map<Integer,EventId> starters=new HashMap<>();\n  for (int j=0; j < totalEdges; j++) {\n    int sourceIdx=source.readInt();\n    int targetIdx=source.readInt();\n    DeweyNumber version=versionSerializer.deserialize(source);\n    Tuple2<NodeId,Lockable<SharedBufferNode>> sourceEntry=entries.get(sourceIdx);\n    Tuple2<NodeId,Lockable<SharedBufferNode>> targetEntry=targetIdx < 0 ? Tuple2.of(null,null) : entries.get(targetIdx);\n    sourceEntry.f1.getElement().addEdge(new SharedBufferEdge(targetEntry.f0,version));\n    if (version.length() == 1) {\n      starters.put(version.getRun(),sourceEntry.f0.getEventId());\n    }\n  }\n  Map<NodeId,Lockable<SharedBufferNode>> entriesMap=entries.stream().collect(Collectors.toMap(e -> e.f0,e -> e.f1));\n  return new SharedBuffer<>(valuesWithIds,entriesMap,mappingContext,starters);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 480,
      "astHeight" : 14
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 109,
        "startLineNumber" : 331,
        "startColumnNumber" : 24,
        "endLineNumber" : 332,
        "endColumnNumber" : 67
      },
      "nodeContext" : "totalEventsPerTimestamp.computeIfPresent(wrapper.timestamp,(k,v) -> v + 1)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 14,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.Map<java.lang.Long,java.lang.Integer>"
  } ],
  "positionList" : [ {
    "charLength" : 23,
    "startLineNumber" : 327,
    "startColumnNumber" : 33,
    "endLineNumber" : 327,
    "endColumnNumber" : 56
  }, {
    "charLength" : 23,
    "startLineNumber" : 331,
    "startColumnNumber" : 24,
    "endLineNumber" : 331,
    "endColumnNumber" : 47
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}