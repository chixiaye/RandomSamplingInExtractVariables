{
  "id" : 464,
  "expression" : "!serverConfig.isResourceManager()",
  "projectName" : "prestodb@presto",
  "commitID" : "eff77883d0d24dc6022ecde252612d1430c9fbac",
  "filePath" : "/presto-main/src/main/java/com/facebook/presto/server/PrestoServer.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "!serverConfig.isResourceManager()",
    "nodeType" : "PrefixExpression",
    "nodePosition" : {
      "charLength" : 33,
      "startLineNumber" : 149,
      "startColumnNumber" : 16,
      "endLineNumber" : 149,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 133,
        "startLineNumber" : 149,
        "startColumnNumber" : 12,
        "endLineNumber" : 151,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!serverConfig.isResourceManager()) {\n  injector.getInstance(StaticCatalogStore.class).loadCatalogs();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2057,
        "startLineNumber" : 142,
        "startColumnNumber" : 12,
        "endLineNumber" : 181,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Injector injector=app.initialize();\n  injector.getInstance(PluginManager.class).loadPlugins();\n  ServerConfig serverConfig=injector.getInstance(ServerConfig.class);\n  if (!serverConfig.isResourceManager()) {\n    injector.getInstance(StaticCatalogStore.class).loadCatalogs();\n  }\n  updateConnectorIds(injector.getInstance(Announcer.class),injector.getInstance(CatalogManager.class),injector.getInstance(ServerConfig.class),injector.getInstance(NodeSchedulerConfig.class));\n  updateThriftServerPort(injector.getInstance(Announcer.class),injector.getInstance(DriftServer.class));\n  injector.getInstance(StaticFunctionNamespaceStore.class).loadFunctionNamespaceManagers();\n  injector.getInstance(SessionPropertyDefaults.class).loadConfigurationManager();\n  injector.getInstance(ResourceGroupManager.class).loadConfigurationManager();\n  if (!serverConfig.isResourceManager()) {\n    injector.getInstance(AccessControlManager.class).loadSystemAccessControl();\n  }\n  injector.getInstance(PasswordAuthenticatorManager.class).loadPasswordAuthenticator();\n  injector.getInstance(EventListenerManager.class).loadConfiguredEventListener();\n  injector.getInstance(TempStorageManager.class).loadTempStorages();\n  injector.getInstance(QueryPrerequisitesManager.class).loadQueryPrerequisites();\n  injector.getInstance(NodeTtlFetcherManager.class).loadNodeTtlFetcher();\n  injector.getInstance(ClusterTtlProviderManager.class).loadClusterTtlProvider();\n  injector.getInstance(Announcer.class).start();\n  log.info(\"======== SERVER STARTED ========\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 196,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2155,
        "startLineNumber" : 142,
        "startColumnNumber" : 8,
        "endLineNumber" : 185,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  Injector injector=app.initialize();\n  injector.getInstance(PluginManager.class).loadPlugins();\n  ServerConfig serverConfig=injector.getInstance(ServerConfig.class);\n  if (!serverConfig.isResourceManager()) {\n    injector.getInstance(StaticCatalogStore.class).loadCatalogs();\n  }\n  updateConnectorIds(injector.getInstance(Announcer.class),injector.getInstance(CatalogManager.class),injector.getInstance(ServerConfig.class),injector.getInstance(NodeSchedulerConfig.class));\n  updateThriftServerPort(injector.getInstance(Announcer.class),injector.getInstance(DriftServer.class));\n  injector.getInstance(StaticFunctionNamespaceStore.class).loadFunctionNamespaceManagers();\n  injector.getInstance(SessionPropertyDefaults.class).loadConfigurationManager();\n  injector.getInstance(ResourceGroupManager.class).loadConfigurationManager();\n  if (!serverConfig.isResourceManager()) {\n    injector.getInstance(AccessControlManager.class).loadSystemAccessControl();\n  }\n  injector.getInstance(PasswordAuthenticatorManager.class).loadPasswordAuthenticator();\n  injector.getInstance(EventListenerManager.class).loadConfiguredEventListener();\n  injector.getInstance(TempStorageManager.class).loadTempStorages();\n  injector.getInstance(QueryPrerequisitesManager.class).loadQueryPrerequisites();\n  injector.getInstance(NodeTtlFetcherManager.class).loadNodeTtlFetcher();\n  injector.getInstance(ClusterTtlProviderManager.class).loadClusterTtlProvider();\n  injector.getInstance(Announcer.class).start();\n  log.info(\"======== SERVER STARTED ========\");\n}\n catch (Throwable e) {\n  log.error(e);\n  System.exit(1);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 213,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3716,
        "startLineNumber" : 102,
        "startColumnNumber" : 4,
        "endLineNumber" : 186,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  verifyJvmRequirements();\n  verifySystemTimeIsReasonable();\n  Logger log=Logger.get(PrestoServer.class);\n  ImmutableList.Builder<Module> modules=ImmutableList.builder();\n  modules.add(new NodeModule(),new DiscoveryModule(),new HttpServerModule(),new JsonModule(),installModuleIf(FeaturesConfig.class,FeaturesConfig::isJsonSerdeCodeGenerationEnabled,binder -> jsonBinder(binder).addModuleBinding().to(AfterburnerModule.class)),new SmileModule(),new JaxrsModule(true),new MBeanModule(),new JmxModule(),new JmxHttpModule(),new LogJmxModule(),new TraceTokenModule(),new JsonEventModule(),new HttpEventModule(),new ServerSecurityModule(),new AccessControlModule(),new EventListenerModule(),new ServerMainModule(sqlParserOptions),new GracefulShutdownModule(),new WarningCollectorModule(),new TempStorageModule(),new QueryPrerequisitesManagerModule(),new NodeTtlFetcherManagerModule(),new ClusterTtlProviderManagerModule());\n  modules.addAll(getAdditionalModules());\n  Bootstrap app=new Bootstrap(modules.build());\n  try {\n    Injector injector=app.initialize();\n    injector.getInstance(PluginManager.class).loadPlugins();\n    ServerConfig serverConfig=injector.getInstance(ServerConfig.class);\n    if (!serverConfig.isResourceManager()) {\n      injector.getInstance(StaticCatalogStore.class).loadCatalogs();\n    }\n    updateConnectorIds(injector.getInstance(Announcer.class),injector.getInstance(CatalogManager.class),injector.getInstance(ServerConfig.class),injector.getInstance(NodeSchedulerConfig.class));\n    updateThriftServerPort(injector.getInstance(Announcer.class),injector.getInstance(DriftServer.class));\n    injector.getInstance(StaticFunctionNamespaceStore.class).loadFunctionNamespaceManagers();\n    injector.getInstance(SessionPropertyDefaults.class).loadConfigurationManager();\n    injector.getInstance(ResourceGroupManager.class).loadConfigurationManager();\n    if (!serverConfig.isResourceManager()) {\n      injector.getInstance(AccessControlManager.class).loadSystemAccessControl();\n    }\n    injector.getInstance(PasswordAuthenticatorManager.class).loadPasswordAuthenticator();\n    injector.getInstance(EventListenerManager.class).loadConfiguredEventListener();\n    injector.getInstance(TempStorageManager.class).loadTempStorages();\n    injector.getInstance(QueryPrerequisitesManager.class).loadQueryPrerequisites();\n    injector.getInstance(NodeTtlFetcherManager.class).loadNodeTtlFetcher();\n    injector.getInstance(ClusterTtlProviderManager.class).loadClusterTtlProvider();\n    injector.getInstance(Announcer.class).start();\n    log.info(\"======== SERVER STARTED ========\");\n  }\n catch (  Throwable e) {\n    log.error(e);\n    System.exit(1);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 357,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3752,
        "startLineNumber" : 100,
        "startColumnNumber" : 4,
        "endLineNumber" : 186,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  verifyJvmRequirements();\n  verifySystemTimeIsReasonable();\n  Logger log=Logger.get(PrestoServer.class);\n  ImmutableList.Builder<Module> modules=ImmutableList.builder();\n  modules.add(new NodeModule(),new DiscoveryModule(),new HttpServerModule(),new JsonModule(),installModuleIf(FeaturesConfig.class,FeaturesConfig::isJsonSerdeCodeGenerationEnabled,binder -> jsonBinder(binder).addModuleBinding().to(AfterburnerModule.class)),new SmileModule(),new JaxrsModule(true),new MBeanModule(),new JmxModule(),new JmxHttpModule(),new LogJmxModule(),new TraceTokenModule(),new JsonEventModule(),new HttpEventModule(),new ServerSecurityModule(),new AccessControlModule(),new EventListenerModule(),new ServerMainModule(sqlParserOptions),new GracefulShutdownModule(),new WarningCollectorModule(),new TempStorageModule(),new QueryPrerequisitesManagerModule(),new NodeTtlFetcherManagerModule(),new ClusterTtlProviderManagerModule());\n  modules.addAll(getAdditionalModules());\n  Bootstrap app=new Bootstrap(modules.build());\n  try {\n    Injector injector=app.initialize();\n    injector.getInstance(PluginManager.class).loadPlugins();\n    ServerConfig serverConfig=injector.getInstance(ServerConfig.class);\n    if (!serverConfig.isResourceManager()) {\n      injector.getInstance(StaticCatalogStore.class).loadCatalogs();\n    }\n    updateConnectorIds(injector.getInstance(Announcer.class),injector.getInstance(CatalogManager.class),injector.getInstance(ServerConfig.class),injector.getInstance(NodeSchedulerConfig.class));\n    updateThriftServerPort(injector.getInstance(Announcer.class),injector.getInstance(DriftServer.class));\n    injector.getInstance(StaticFunctionNamespaceStore.class).loadFunctionNamespaceManagers();\n    injector.getInstance(SessionPropertyDefaults.class).loadConfigurationManager();\n    injector.getInstance(ResourceGroupManager.class).loadConfigurationManager();\n    if (!serverConfig.isResourceManager()) {\n      injector.getInstance(AccessControlManager.class).loadSystemAccessControl();\n    }\n    injector.getInstance(PasswordAuthenticatorManager.class).loadPasswordAuthenticator();\n    injector.getInstance(EventListenerManager.class).loadConfiguredEventListener();\n    injector.getInstance(TempStorageManager.class).loadTempStorages();\n    injector.getInstance(QueryPrerequisitesManager.class).loadQueryPrerequisites();\n    injector.getInstance(NodeTtlFetcherManager.class).loadNodeTtlFetcher();\n    injector.getInstance(ClusterTtlProviderManager.class).loadClusterTtlProvider();\n    injector.getInstance(Announcer.class).start();\n    log.info(\"======== SERVER STARTED ========\");\n  }\n catch (  Throwable e) {\n    log.error(e);\n    System.exit(1);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 363,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 133,
        "startLineNumber" : 149,
        "startColumnNumber" : 12,
        "endLineNumber" : 151,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!serverConfig.isResourceManager()) {\n  injector.getInstance(StaticCatalogStore.class).loadCatalogs();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 8
    },
    "tokenLength" : 2,
    "type" : "boolean"
  }, {
    "nodeContext" : "!serverConfig.isResourceManager()",
    "nodeType" : "PrefixExpression",
    "nodePosition" : {
      "charLength" : 33,
      "startLineNumber" : 168,
      "startColumnNumber" : 16,
      "endLineNumber" : 168,
      "endColumnNumber" : 49
    },
    "astNodeNumber" : 4,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 146,
        "startLineNumber" : 168,
        "startColumnNumber" : 12,
        "endLineNumber" : 170,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!serverConfig.isResourceManager()) {\n  injector.getInstance(AccessControlManager.class).loadSystemAccessControl();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2057,
        "startLineNumber" : 142,
        "startColumnNumber" : 12,
        "endLineNumber" : 181,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  Injector injector=app.initialize();\n  injector.getInstance(PluginManager.class).loadPlugins();\n  ServerConfig serverConfig=injector.getInstance(ServerConfig.class);\n  if (!serverConfig.isResourceManager()) {\n    injector.getInstance(StaticCatalogStore.class).loadCatalogs();\n  }\n  updateConnectorIds(injector.getInstance(Announcer.class),injector.getInstance(CatalogManager.class),injector.getInstance(ServerConfig.class),injector.getInstance(NodeSchedulerConfig.class));\n  updateThriftServerPort(injector.getInstance(Announcer.class),injector.getInstance(DriftServer.class));\n  injector.getInstance(StaticFunctionNamespaceStore.class).loadFunctionNamespaceManagers();\n  injector.getInstance(SessionPropertyDefaults.class).loadConfigurationManager();\n  injector.getInstance(ResourceGroupManager.class).loadConfigurationManager();\n  if (!serverConfig.isResourceManager()) {\n    injector.getInstance(AccessControlManager.class).loadSystemAccessControl();\n  }\n  injector.getInstance(PasswordAuthenticatorManager.class).loadPasswordAuthenticator();\n  injector.getInstance(EventListenerManager.class).loadConfiguredEventListener();\n  injector.getInstance(TempStorageManager.class).loadTempStorages();\n  injector.getInstance(QueryPrerequisitesManager.class).loadQueryPrerequisites();\n  injector.getInstance(NodeTtlFetcherManager.class).loadNodeTtlFetcher();\n  injector.getInstance(ClusterTtlProviderManager.class).loadClusterTtlProvider();\n  injector.getInstance(Announcer.class).start();\n  log.info(\"======== SERVER STARTED ========\");\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 196,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2155,
        "startLineNumber" : 142,
        "startColumnNumber" : 8,
        "endLineNumber" : 185,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  Injector injector=app.initialize();\n  injector.getInstance(PluginManager.class).loadPlugins();\n  ServerConfig serverConfig=injector.getInstance(ServerConfig.class);\n  if (!serverConfig.isResourceManager()) {\n    injector.getInstance(StaticCatalogStore.class).loadCatalogs();\n  }\n  updateConnectorIds(injector.getInstance(Announcer.class),injector.getInstance(CatalogManager.class),injector.getInstance(ServerConfig.class),injector.getInstance(NodeSchedulerConfig.class));\n  updateThriftServerPort(injector.getInstance(Announcer.class),injector.getInstance(DriftServer.class));\n  injector.getInstance(StaticFunctionNamespaceStore.class).loadFunctionNamespaceManagers();\n  injector.getInstance(SessionPropertyDefaults.class).loadConfigurationManager();\n  injector.getInstance(ResourceGroupManager.class).loadConfigurationManager();\n  if (!serverConfig.isResourceManager()) {\n    injector.getInstance(AccessControlManager.class).loadSystemAccessControl();\n  }\n  injector.getInstance(PasswordAuthenticatorManager.class).loadPasswordAuthenticator();\n  injector.getInstance(EventListenerManager.class).loadConfiguredEventListener();\n  injector.getInstance(TempStorageManager.class).loadTempStorages();\n  injector.getInstance(QueryPrerequisitesManager.class).loadQueryPrerequisites();\n  injector.getInstance(NodeTtlFetcherManager.class).loadNodeTtlFetcher();\n  injector.getInstance(ClusterTtlProviderManager.class).loadClusterTtlProvider();\n  injector.getInstance(Announcer.class).start();\n  log.info(\"======== SERVER STARTED ========\");\n}\n catch (Throwable e) {\n  log.error(e);\n  System.exit(1);\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 213,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3716,
        "startLineNumber" : 102,
        "startColumnNumber" : 4,
        "endLineNumber" : 186,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  verifyJvmRequirements();\n  verifySystemTimeIsReasonable();\n  Logger log=Logger.get(PrestoServer.class);\n  ImmutableList.Builder<Module> modules=ImmutableList.builder();\n  modules.add(new NodeModule(),new DiscoveryModule(),new HttpServerModule(),new JsonModule(),installModuleIf(FeaturesConfig.class,FeaturesConfig::isJsonSerdeCodeGenerationEnabled,binder -> jsonBinder(binder).addModuleBinding().to(AfterburnerModule.class)),new SmileModule(),new JaxrsModule(true),new MBeanModule(),new JmxModule(),new JmxHttpModule(),new LogJmxModule(),new TraceTokenModule(),new JsonEventModule(),new HttpEventModule(),new ServerSecurityModule(),new AccessControlModule(),new EventListenerModule(),new ServerMainModule(sqlParserOptions),new GracefulShutdownModule(),new WarningCollectorModule(),new TempStorageModule(),new QueryPrerequisitesManagerModule(),new NodeTtlFetcherManagerModule(),new ClusterTtlProviderManagerModule());\n  modules.addAll(getAdditionalModules());\n  Bootstrap app=new Bootstrap(modules.build());\n  try {\n    Injector injector=app.initialize();\n    injector.getInstance(PluginManager.class).loadPlugins();\n    ServerConfig serverConfig=injector.getInstance(ServerConfig.class);\n    if (!serverConfig.isResourceManager()) {\n      injector.getInstance(StaticCatalogStore.class).loadCatalogs();\n    }\n    updateConnectorIds(injector.getInstance(Announcer.class),injector.getInstance(CatalogManager.class),injector.getInstance(ServerConfig.class),injector.getInstance(NodeSchedulerConfig.class));\n    updateThriftServerPort(injector.getInstance(Announcer.class),injector.getInstance(DriftServer.class));\n    injector.getInstance(StaticFunctionNamespaceStore.class).loadFunctionNamespaceManagers();\n    injector.getInstance(SessionPropertyDefaults.class).loadConfigurationManager();\n    injector.getInstance(ResourceGroupManager.class).loadConfigurationManager();\n    if (!serverConfig.isResourceManager()) {\n      injector.getInstance(AccessControlManager.class).loadSystemAccessControl();\n    }\n    injector.getInstance(PasswordAuthenticatorManager.class).loadPasswordAuthenticator();\n    injector.getInstance(EventListenerManager.class).loadConfiguredEventListener();\n    injector.getInstance(TempStorageManager.class).loadTempStorages();\n    injector.getInstance(QueryPrerequisitesManager.class).loadQueryPrerequisites();\n    injector.getInstance(NodeTtlFetcherManager.class).loadNodeTtlFetcher();\n    injector.getInstance(ClusterTtlProviderManager.class).loadClusterTtlProvider();\n    injector.getInstance(Announcer.class).start();\n    log.info(\"======== SERVER STARTED ========\");\n  }\n catch (  Throwable e) {\n    log.error(e);\n    System.exit(1);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 357,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3752,
        "startLineNumber" : 100,
        "startColumnNumber" : 4,
        "endLineNumber" : 186,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void run(){\n  verifyJvmRequirements();\n  verifySystemTimeIsReasonable();\n  Logger log=Logger.get(PrestoServer.class);\n  ImmutableList.Builder<Module> modules=ImmutableList.builder();\n  modules.add(new NodeModule(),new DiscoveryModule(),new HttpServerModule(),new JsonModule(),installModuleIf(FeaturesConfig.class,FeaturesConfig::isJsonSerdeCodeGenerationEnabled,binder -> jsonBinder(binder).addModuleBinding().to(AfterburnerModule.class)),new SmileModule(),new JaxrsModule(true),new MBeanModule(),new JmxModule(),new JmxHttpModule(),new LogJmxModule(),new TraceTokenModule(),new JsonEventModule(),new HttpEventModule(),new ServerSecurityModule(),new AccessControlModule(),new EventListenerModule(),new ServerMainModule(sqlParserOptions),new GracefulShutdownModule(),new WarningCollectorModule(),new TempStorageModule(),new QueryPrerequisitesManagerModule(),new NodeTtlFetcherManagerModule(),new ClusterTtlProviderManagerModule());\n  modules.addAll(getAdditionalModules());\n  Bootstrap app=new Bootstrap(modules.build());\n  try {\n    Injector injector=app.initialize();\n    injector.getInstance(PluginManager.class).loadPlugins();\n    ServerConfig serverConfig=injector.getInstance(ServerConfig.class);\n    if (!serverConfig.isResourceManager()) {\n      injector.getInstance(StaticCatalogStore.class).loadCatalogs();\n    }\n    updateConnectorIds(injector.getInstance(Announcer.class),injector.getInstance(CatalogManager.class),injector.getInstance(ServerConfig.class),injector.getInstance(NodeSchedulerConfig.class));\n    updateThriftServerPort(injector.getInstance(Announcer.class),injector.getInstance(DriftServer.class));\n    injector.getInstance(StaticFunctionNamespaceStore.class).loadFunctionNamespaceManagers();\n    injector.getInstance(SessionPropertyDefaults.class).loadConfigurationManager();\n    injector.getInstance(ResourceGroupManager.class).loadConfigurationManager();\n    if (!serverConfig.isResourceManager()) {\n      injector.getInstance(AccessControlManager.class).loadSystemAccessControl();\n    }\n    injector.getInstance(PasswordAuthenticatorManager.class).loadPasswordAuthenticator();\n    injector.getInstance(EventListenerManager.class).loadConfiguredEventListener();\n    injector.getInstance(TempStorageManager.class).loadTempStorages();\n    injector.getInstance(QueryPrerequisitesManager.class).loadQueryPrerequisites();\n    injector.getInstance(NodeTtlFetcherManager.class).loadNodeTtlFetcher();\n    injector.getInstance(ClusterTtlProviderManager.class).loadClusterTtlProvider();\n    injector.getInstance(Announcer.class).start();\n    log.info(\"======== SERVER STARTED ========\");\n  }\n catch (  Throwable e) {\n    log.error(e);\n    System.exit(1);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 363,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 146,
        "startLineNumber" : 168,
        "startColumnNumber" : 12,
        "endLineNumber" : 170,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (!serverConfig.isResourceManager()) {\n  injector.getInstance(AccessControlManager.class).loadSystemAccessControl();\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 15,
      "astHeight" : 8
    },
    "tokenLength" : 2,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 33,
    "startLineNumber" : 149,
    "startColumnNumber" : 16,
    "endLineNumber" : 149,
    "endColumnNumber" : 49
  }, {
    "charLength" : 33,
    "startLineNumber" : 168,
    "startColumnNumber" : 16,
    "endLineNumber" : 168,
    "endColumnNumber" : 49
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 1
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 1
  } ]
}