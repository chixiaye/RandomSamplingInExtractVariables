{
  "id" : 285,
  "expression" : "\"arg\" + i",
  "projectName" : "projectlombok@lombok",
  "commitID" : "25def866b50860715ee7c315c678b8c3d1ba9b56",
  "filePath" : "/src/eclipseAgent/lombok/eclipse/agent/PatchDelegate.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "\"arg\" + i",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 9,
      "startLineNumber" : 625,
      "startColumnNumber" : 39,
      "endLineNumber" : 625,
      "endColumnNumber" : 48
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 11,
        "startLineNumber" : 625,
        "startColumnNumber" : 38,
        "endLineNumber" : 625,
        "endColumnNumber" : 49
      },
      "nodeContext" : "(\"arg\" + i)",
      "nodeType" : "ParenthesizedExpression",
      "astNodeNumber" : 4,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 625,
        "startColumnNumber" : 38,
        "endLineNumber" : 625,
        "endColumnNumber" : 63
      },
      "nodeContext" : "(\"arg\" + i).toCharArray()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 625,
        "startColumnNumber" : 28,
        "endLineNumber" : 625,
        "endColumnNumber" : 63
      },
      "nodeContext" : "argName=(\"arg\" + i).toCharArray()",
      "nodeType" : "Assignment",
      "astNodeNumber" : 8,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 625,
        "startColumnNumber" : 28,
        "endLineNumber" : 625,
        "endColumnNumber" : 64
      },
      "nodeContext" : "argName=(\"arg\" + i).toCharArray();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 122,
        "startLineNumber" : 625,
        "startColumnNumber" : 4,
        "endLineNumber" : 628,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (sourceElem == null) argName=(\"arg\" + i).toCharArray();\n else {\n  argName=sourceElem.arguments[i].name;\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 24,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]",
      "nodePosition" : {
        "charLength" : 547,
        "startLineNumber" : 622,
        "startColumnNumber" : 53,
        "endLineNumber" : 636,
        "endColumnNumber" : 4
      },
      "nodeContext" : "{\n  AbstractMethodDeclaration sourceElem=pair.base.sourceMethod();\n  char[] argName;\n  if (sourceElem == null)   argName=(\"arg\" + i).toCharArray();\n else {\n    argName=sourceElem.arguments[i].name;\n  }\n  method.arguments[i]=new Argument(argName,pos(source),makeType(binding.parameters[i],source,false),ClassFileConstants.AccFinal);\n  setGeneratedBy(method.arguments[i],source);\n  call.arguments[i]=new SingleNameReference(argName,pos(source));\n  setGeneratedBy(call.arguments[i],source);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 99,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 597,
        "startLineNumber" : 622,
        "startColumnNumber" : 3,
        "endLineNumber" : 636,
        "endColumnNumber" : 4
      },
      "nodeContext" : "for (int i=0; i < method.arguments.length; i++) {\n  AbstractMethodDeclaration sourceElem=pair.base.sourceMethod();\n  char[] argName;\n  if (sourceElem == null)   argName=(\"arg\" + i).toCharArray();\n else {\n    argName=sourceElem.arguments[i].name;\n  }\n  method.arguments[i]=new Argument(argName,pos(source),makeType(binding.parameters[i],source,false),ClassFileConstants.AccFinal);\n  setGeneratedBy(method.arguments[i],source);\n  call.arguments[i]=new SingleNameReference(argName,pos(source));\n  setGeneratedBy(call.arguments[i],source);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 114,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 837,
        "startLineNumber" : 619,
        "startColumnNumber" : 67,
        "endLineNumber" : 640,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  method.arguments=new Argument[binding.parameters.length];\n  call.arguments=new Expression[method.arguments.length];\n  for (int i=0; i < method.arguments.length; i++) {\n    AbstractMethodDeclaration sourceElem=pair.base.sourceMethod();\n    char[] argName;\n    if (sourceElem == null)     argName=(\"arg\" + i).toCharArray();\n else {\n      argName=sourceElem.arguments[i].name;\n    }\n    method.arguments[i]=new Argument(argName,pos(source),makeType(binding.parameters[i],source,false),ClassFileConstants.AccFinal);\n    setGeneratedBy(method.arguments[i],source);\n    call.arguments[i]=new SingleNameReference(argName,pos(source));\n    setGeneratedBy(call.arguments[i],source);\n  }\n  if (isVarargs) {\n    method.arguments[method.arguments.length - 1].type.bits|=ASTNode.IsVarArgs;\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 168,
      "astHeight" : 12
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 902,
        "startLineNumber" : 619,
        "startColumnNumber" : 2,
        "endLineNumber" : 640,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (binding.parameters != null && binding.parameters.length > 0) {\n  method.arguments=new Argument[binding.parameters.length];\n  call.arguments=new Expression[method.arguments.length];\n  for (int i=0; i < method.arguments.length; i++) {\n    AbstractMethodDeclaration sourceElem=pair.base.sourceMethod();\n    char[] argName;\n    if (sourceElem == null)     argName=(\"arg\" + i).toCharArray();\n else {\n      argName=sourceElem.arguments[i].name;\n    }\n    method.arguments[i]=new Argument(argName,pos(source),makeType(binding.parameters[i],source,false),ClassFileConstants.AccFinal);\n    setGeneratedBy(method.arguments[i],source);\n    call.arguments[i]=new SingleNameReference(argName,pos(source));\n    setGeneratedBy(call.arguments[i],source);\n  }\n  if (isVarargs) {\n    method.arguments[method.arguments.length - 1].type.bits|=ASTNode.IsVarArgs;\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 182,
      "astHeight" : 13
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 4562,
        "startLineNumber" : 542,
        "startColumnNumber" : 202,
        "endLineNumber" : 652,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  boolean isVarargs=(pair.base.modifiers & ClassFileConstants.AccVarargs) != 0;\n  try {\n    checkConflictOfTypeVarNames(pair,typeNode);\n  }\n catch (  CantMakeDelegates e) {\n    annNode.addError(\"There's a conflict in the names of type parameters. Fix it by renaming the following type parameters of your class: \" + e.conflicted);\n    return null;\n  }\n  ASTNode source=annNode.get();\n  int pS=source.sourceStart, pE=source.sourceEnd;\n  MethodBinding binding=pair.parameterized;\n  MethodDeclaration method=new MethodDeclaration(compilationResult);\n  setGeneratedBy(method,source);\n  method.sourceStart=pS;\n  method.sourceEnd=pE;\n  method.modifiers=ClassFileConstants.AccPublic;\n  method.returnType=makeType(binding.returnType,source,false);\n  boolean isDeprecated=binding.isDeprecated();\n  method.selector=binding.selector;\n  if (binding.thrownExceptions != null && binding.thrownExceptions.length > 0) {\n    method.thrownExceptions=new TypeReference[binding.thrownExceptions.length];\n    for (int i=0; i < method.thrownExceptions.length; i++) {\n      method.thrownExceptions[i]=makeType(binding.thrownExceptions[i],source,false);\n    }\n  }\n  MessageSend call=new MessageSend();\n  call.sourceStart=pS;\n  call.sourceEnd=pE;\n  call.nameSourcePosition=pos(source);\n  setGeneratedBy(call,source);\n  call.receiver=delegateReceiver.get(source,name);\n  call.selector=binding.selector;\n  if (binding.typeVariables != null && binding.typeVariables.length > 0) {\n    method.typeParameters=new TypeParameter[binding.typeVariables.length];\n    call.typeArguments=new TypeReference[binding.typeVariables.length];\n    for (int i=0; i < method.typeParameters.length; i++) {\n      method.typeParameters[i]=new TypeParameter();\n      method.typeParameters[i].sourceStart=pS;\n      method.typeParameters[i].sourceEnd=pE;\n      setGeneratedBy(method.typeParameters[i],source);\n      method.typeParameters[i].name=binding.typeVariables[i].sourceName;\n      call.typeArguments[i]=new SingleTypeReference(binding.typeVariables[i].sourceName,pos(source));\n      setGeneratedBy(call.typeArguments[i],source);\n      ReferenceBinding super1=binding.typeVariables[i].superclass;\n      ReferenceBinding[] super2=binding.typeVariables[i].superInterfaces;\n      if (super2 == null)       super2=new ReferenceBinding[0];\n      if (super1 != null || super2.length > 0) {\n        int offset=super1 == null ? 0 : 1;\n        method.typeParameters[i].bounds=new TypeReference[super2.length + offset - 1];\n        if (super1 != null)         method.typeParameters[i].type=makeType(super1,source,false);\n else         method.typeParameters[i].type=makeType(super2[0],source,false);\n        int ctr=0;\n        for (int j=(super1 == null) ? 1 : 0; j < super2.length; j++) {\n          method.typeParameters[i].bounds[ctr]=makeType(super2[j],source,false);\n          method.typeParameters[i].bounds[ctr++].bits|=ASTNode.IsSuperType;\n        }\n      }\n    }\n  }\n  if (isDeprecated) {\n    method.annotations=new Annotation[]{generateDeprecatedAnnotation(source)};\n  }\n  method.bits|=ECLIPSE_DO_NOT_TOUCH_FLAG;\n  if (binding.parameters != null && binding.parameters.length > 0) {\n    method.arguments=new Argument[binding.parameters.length];\n    call.arguments=new Expression[method.arguments.length];\n    for (int i=0; i < method.arguments.length; i++) {\n      AbstractMethodDeclaration sourceElem=pair.base.sourceMethod();\n      char[] argName;\n      if (sourceElem == null)       argName=(\"arg\" + i).toCharArray();\n else {\n        argName=sourceElem.arguments[i].name;\n      }\n      method.arguments[i]=new Argument(argName,pos(source),makeType(binding.parameters[i],source,false),ClassFileConstants.AccFinal);\n      setGeneratedBy(method.arguments[i],source);\n      call.arguments[i]=new SingleNameReference(argName,pos(source));\n      setGeneratedBy(call.arguments[i],source);\n    }\n    if (isVarargs) {\n      method.arguments[method.arguments.length - 1].type.bits|=ASTNode.IsVarArgs;\n    }\n  }\n  Statement body;\n  if (method.returnType instanceof SingleTypeReference && ((SingleTypeReference)method.returnType).token == TypeConstants.VOID) {\n    body=call;\n  }\n else {\n    body=new ReturnStatement(call,source.sourceStart,source.sourceEnd);\n    setGeneratedBy(body,source);\n  }\n  method.statements=new Statement[]{body};\n  return method;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 832,
      "astHeight" : 17
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 4763,
        "startLineNumber" : 542,
        "startColumnNumber" : 1,
        "endLineNumber" : 652,
        "endColumnNumber" : 2
      },
      "nodeContext" : "private static MethodDeclaration createDelegateMethod(char[] name,EclipseNode typeNode,BindingTuple pair,CompilationResult compilationResult,EclipseNode annNode,DelegateReceiver delegateReceiver){\n  boolean isVarargs=(pair.base.modifiers & ClassFileConstants.AccVarargs) != 0;\n  try {\n    checkConflictOfTypeVarNames(pair,typeNode);\n  }\n catch (  CantMakeDelegates e) {\n    annNode.addError(\"There's a conflict in the names of type parameters. Fix it by renaming the following type parameters of your class: \" + e.conflicted);\n    return null;\n  }\n  ASTNode source=annNode.get();\n  int pS=source.sourceStart, pE=source.sourceEnd;\n  MethodBinding binding=pair.parameterized;\n  MethodDeclaration method=new MethodDeclaration(compilationResult);\n  setGeneratedBy(method,source);\n  method.sourceStart=pS;\n  method.sourceEnd=pE;\n  method.modifiers=ClassFileConstants.AccPublic;\n  method.returnType=makeType(binding.returnType,source,false);\n  boolean isDeprecated=binding.isDeprecated();\n  method.selector=binding.selector;\n  if (binding.thrownExceptions != null && binding.thrownExceptions.length > 0) {\n    method.thrownExceptions=new TypeReference[binding.thrownExceptions.length];\n    for (int i=0; i < method.thrownExceptions.length; i++) {\n      method.thrownExceptions[i]=makeType(binding.thrownExceptions[i],source,false);\n    }\n  }\n  MessageSend call=new MessageSend();\n  call.sourceStart=pS;\n  call.sourceEnd=pE;\n  call.nameSourcePosition=pos(source);\n  setGeneratedBy(call,source);\n  call.receiver=delegateReceiver.get(source,name);\n  call.selector=binding.selector;\n  if (binding.typeVariables != null && binding.typeVariables.length > 0) {\n    method.typeParameters=new TypeParameter[binding.typeVariables.length];\n    call.typeArguments=new TypeReference[binding.typeVariables.length];\n    for (int i=0; i < method.typeParameters.length; i++) {\n      method.typeParameters[i]=new TypeParameter();\n      method.typeParameters[i].sourceStart=pS;\n      method.typeParameters[i].sourceEnd=pE;\n      setGeneratedBy(method.typeParameters[i],source);\n      method.typeParameters[i].name=binding.typeVariables[i].sourceName;\n      call.typeArguments[i]=new SingleTypeReference(binding.typeVariables[i].sourceName,pos(source));\n      setGeneratedBy(call.typeArguments[i],source);\n      ReferenceBinding super1=binding.typeVariables[i].superclass;\n      ReferenceBinding[] super2=binding.typeVariables[i].superInterfaces;\n      if (super2 == null)       super2=new ReferenceBinding[0];\n      if (super1 != null || super2.length > 0) {\n        int offset=super1 == null ? 0 : 1;\n        method.typeParameters[i].bounds=new TypeReference[super2.length + offset - 1];\n        if (super1 != null)         method.typeParameters[i].type=makeType(super1,source,false);\n else         method.typeParameters[i].type=makeType(super2[0],source,false);\n        int ctr=0;\n        for (int j=(super1 == null) ? 1 : 0; j < super2.length; j++) {\n          method.typeParameters[i].bounds[ctr]=makeType(super2[j],source,false);\n          method.typeParameters[i].bounds[ctr++].bits|=ASTNode.IsSuperType;\n        }\n      }\n    }\n  }\n  if (isDeprecated) {\n    method.annotations=new Annotation[]{generateDeprecatedAnnotation(source)};\n  }\n  method.bits|=ECLIPSE_DO_NOT_TOUCH_FLAG;\n  if (binding.parameters != null && binding.parameters.length > 0) {\n    method.arguments=new Argument[binding.parameters.length];\n    call.arguments=new Expression[method.arguments.length];\n    for (int i=0; i < method.arguments.length; i++) {\n      AbstractMethodDeclaration sourceElem=pair.base.sourceMethod();\n      char[] argName;\n      if (sourceElem == null)       argName=(\"arg\" + i).toCharArray();\n else {\n        argName=sourceElem.arguments[i].name;\n      }\n      method.arguments[i]=new Argument(argName,pos(source),makeType(binding.parameters[i],source,false),ClassFileConstants.AccFinal);\n      setGeneratedBy(method.arguments[i],source);\n      call.arguments[i]=new SingleNameReference(argName,pos(source));\n      setGeneratedBy(call.arguments[i],source);\n    }\n    if (isVarargs) {\n      method.arguments[method.arguments.length - 1].type.bits|=ASTNode.IsVarArgs;\n    }\n  }\n  Statement body;\n  if (method.returnType instanceof SingleTypeReference && ((SingleTypeReference)method.returnType).token == TypeConstants.VOID) {\n    body=call;\n  }\n else {\n    body=new ReturnStatement(call,source.sourceStart,source.sourceEnd);\n    setGeneratedBy(body,source);\n  }\n  method.statements=new Statement[]{body};\n  return method;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 863,
      "astHeight" : 18
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 625,
        "startColumnNumber" : 28,
        "endLineNumber" : 625,
        "endColumnNumber" : 64
      },
      "nodeContext" : "argName=(\"arg\" + i).toCharArray();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 6
    },
    "tokenLength" : 3,
    "type" : "java.lang.String"
  } ],
  "positionList" : [ {
    "charLength" : 9,
    "startLineNumber" : 625,
    "startColumnNumber" : 39,
    "endLineNumber" : 625,
    "endColumnNumber" : 48
  } ],
  "layoutRelationDataList" : [ ]
}