{
  "id" : 323,
  "expression" : "new TestException()",
  "projectName" : "ReactiveX@RxJava",
  "commitID" : "75c40b58fc3f56283ad88ce299c72419975f6b00",
  "filePath" : "/src/test/java/io/reactivex/internal/operators/flowable/FlowableTakeTimedTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "new TestException()",
    "nodeType" : "ClassInstanceCreation",
    "nodePosition" : {
      "charLength" : 19,
      "startLineNumber" : 78,
      "startColumnNumber" : 23,
      "endLineNumber" : 78,
      "endColumnNumber" : 42
    },
    "astNodeNumber" : 3,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 43
      },
      "nodeContext" : "source.onError(new TestException())",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 6,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 44
      },
      "nodeContext" : "source.onError(new TestException());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 875,
        "startLineNumber" : 64,
        "startColumnNumber" : 47,
        "endLineNumber" : 93,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  TestScheduler scheduler=new TestScheduler();\n  PublishProcessor<Integer> source=PublishProcessor.create();\n  Flowable<Integer> result=source.take(1,TimeUnit.SECONDS,scheduler);\n  Subscriber<Object> o=TestHelper.mockSubscriber();\n  result.subscribe(o);\n  source.onNext(1);\n  source.onNext(2);\n  source.onNext(3);\n  source.onError(new TestException());\n  scheduler.advanceTimeBy(1,TimeUnit.SECONDS);\n  source.onNext(4);\n  InOrder inOrder=inOrder(o);\n  inOrder.verify(o).onNext(1);\n  inOrder.verify(o).onNext(2);\n  inOrder.verify(o).onNext(3);\n  inOrder.verify(o).onError(any(TestException.class));\n  inOrder.verifyNoMoreInteractions();\n  verify(o,never()).onComplete();\n  verify(o,never()).onNext(4);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 152,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 929,
        "startLineNumber" : 63,
        "startColumnNumber" : 4,
        "endLineNumber" : 93,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Test public void testTakeTimedErrorBeforeTime(){\n  TestScheduler scheduler=new TestScheduler();\n  PublishProcessor<Integer> source=PublishProcessor.create();\n  Flowable<Integer> result=source.take(1,TimeUnit.SECONDS,scheduler);\n  Subscriber<Object> o=TestHelper.mockSubscriber();\n  result.subscribe(o);\n  source.onNext(1);\n  source.onNext(2);\n  source.onNext(3);\n  source.onError(new TestException());\n  scheduler.advanceTimeBy(1,TimeUnit.SECONDS);\n  source.onNext(4);\n  InOrder inOrder=inOrder(o);\n  inOrder.verify(o).onNext(1);\n  inOrder.verify(o).onNext(2);\n  inOrder.verify(o).onNext(3);\n  inOrder.verify(o).onError(any(TestException.class));\n  inOrder.verifyNoMoreInteractions();\n  verify(o,never()).onComplete();\n  verify(o,never()).onNext(4);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 158,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 36,
        "startLineNumber" : 78,
        "startColumnNumber" : 8,
        "endLineNumber" : 78,
        "endColumnNumber" : 44
      },
      "nodeContext" : "source.onError(new TestException());\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 7,
      "astHeight" : 5
    },
    "tokenLength" : 1,
    "type" : "io.reactivex.exceptions.TestException"
  } ],
  "positionList" : [ {
    "charLength" : 19,
    "startLineNumber" : 78,
    "startColumnNumber" : 23,
    "endLineNumber" : 78,
    "endColumnNumber" : 42
  } ],
  "layoutRelationDataList" : [ ]
}