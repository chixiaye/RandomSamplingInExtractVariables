{
  "id" : 55,
  "expression" : "translatedFile",
  "projectName" : "zxing@zxing",
  "commitID" : "1b0aed9c091717337b865955f58290450a3a9e3a",
  "filePath" : "/javase/src/main/java/com/google/zxing/client/j2se/StringsResourceTranslator.java",
  "occurrences" : 3,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "translatedFile",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 115,
      "startColumnNumber" : 46,
      "endLineNumber" : 115,
      "endColumnNumber" : 60
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 25,
        "startLineNumber" : 115,
        "startColumnNumber" : 36,
        "endLineNumber" : 115,
        "endColumnNumber" : 61
      },
      "nodeContext" : "readLines(translatedFile)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 38,
        "startLineNumber" : 115,
        "startColumnNumber" : 23,
        "endLineNumber" : 115,
        "endColumnNumber" : 61
      },
      "nodeContext" : "translated=readLines(translatedFile)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 115,
        "startColumnNumber" : 4,
        "endLineNumber" : 115,
        "endColumnNumber" : 62
      },
      "nodeContext" : "Map<String,String> translated=readLines(translatedFile);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2224,
        "startLineNumber" : 112,
        "startColumnNumber" : 90,
        "endLineNumber" : 172,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Map<String,String> english=readLines(englishFile);\n  Map<String,String> translated=readLines(translatedFile);\n  String parentName=translatedFile.getParent().getFileName().toString();\n  Matcher stringsFileNameMatcher=STRINGS_FILE_NAME_PATTERN.matcher(parentName);\n  if (!stringsFileNameMatcher.find()) {\n    throw new IllegalArgumentException(\"Invalid parent dir: \" + parentName);\n  }\n  String language=stringsFileNameMatcher.group(1);\n  String massagedLanguage=LANGUAGE_CODE_MASSAGINGS.get(language);\n  if (massagedLanguage != null) {\n    language=massagedLanguage;\n  }\n  System.out.println(\"Translating \" + language);\n  Path resultTempFile=Files.createTempFile(null,null);\n  boolean anyChange=false;\n  try (Writer out=Files.newBufferedWriter(resultTempFile,StandardCharsets.UTF_8)){\n    out.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\");\n    out.write(APACHE_2_LICENSE);\n    out.write(\"<resources>\\n\");\n    for (    Map.Entry<String,String> englishEntry : english.entrySet()) {\n      String key=englishEntry.getKey();\n      String value=englishEntry.getValue();\n      out.write(\"  <string name=\\\"\");\n      out.write(key);\n      out.write('\"');\n      if (value.contains(\"%s\") || value.contains(\"%f\")) {\n        out.write(\" formatted=\\\"false\\\"\");\n      }\n      out.write('>');\n      String translatedString=translated.get(key);\n      if (translatedString == null || forceRetranslation.contains(key)) {\n        anyChange=true;\n        translatedString=translateString(value,language);\n        translatedString=translatedString.replaceAll(\"'\",\"\\\\\\\\'\");\n      }\n      out.write(translatedString);\n      out.write(\"</string>\\n\");\n    }\n    out.write(\"</resources>\\n\");\n    out.flush();\n  }\n   if (anyChange) {\n    System.out.println(\"  Writing translations\");\n    Files.move(resultTempFile,translatedFile,StandardCopyOption.REPLACE_EXISTING);\n  }\n else {\n    Files.delete(resultTempFile);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 291,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2417,
        "startLineNumber" : 110,
        "startColumnNumber" : 2,
        "endLineNumber" : 172,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static void translate(Path englishFile,Path translatedFile,Collection<String> forceRetranslation) throws IOException {\n  Map<String,String> english=readLines(englishFile);\n  Map<String,String> translated=readLines(translatedFile);\n  String parentName=translatedFile.getParent().getFileName().toString();\n  Matcher stringsFileNameMatcher=STRINGS_FILE_NAME_PATTERN.matcher(parentName);\n  if (!stringsFileNameMatcher.find()) {\n    throw new IllegalArgumentException(\"Invalid parent dir: \" + parentName);\n  }\n  String language=stringsFileNameMatcher.group(1);\n  String massagedLanguage=LANGUAGE_CODE_MASSAGINGS.get(language);\n  if (massagedLanguage != null) {\n    language=massagedLanguage;\n  }\n  System.out.println(\"Translating \" + language);\n  Path resultTempFile=Files.createTempFile(null,null);\n  boolean anyChange=false;\n  try (Writer out=Files.newBufferedWriter(resultTempFile,StandardCharsets.UTF_8)){\n    out.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\");\n    out.write(APACHE_2_LICENSE);\n    out.write(\"<resources>\\n\");\n    for (    Map.Entry<String,String> englishEntry : english.entrySet()) {\n      String key=englishEntry.getKey();\n      String value=englishEntry.getValue();\n      out.write(\"  <string name=\\\"\");\n      out.write(key);\n      out.write('\"');\n      if (value.contains(\"%s\") || value.contains(\"%f\")) {\n        out.write(\" formatted=\\\"false\\\"\");\n      }\n      out.write('>');\n      String translatedString=translated.get(key);\n      if (translatedString == null || forceRetranslation.contains(key)) {\n        anyChange=true;\n        translatedString=translateString(value,language);\n        translatedString=translatedString.replaceAll(\"'\",\"\\\\\\\\'\");\n      }\n      out.write(translatedString);\n      out.write(\"</string>\\n\");\n    }\n    out.write(\"</resources>\\n\");\n    out.flush();\n  }\n   if (anyChange) {\n    System.out.println(\"  Writing translations\");\n    Files.move(resultTempFile,translatedFile,StandardCopyOption.REPLACE_EXISTING);\n  }\n else {\n    Files.delete(resultTempFile);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 313,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 115,
        "startColumnNumber" : 4,
        "endLineNumber" : 115,
        "endColumnNumber" : 62
      },
      "nodeContext" : "Map<String,String> translated=readLines(translatedFile);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 13,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.nio.file.Path"
  }, {
    "nodeContext" : "translatedFile",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 116,
      "startColumnNumber" : 24,
      "endLineNumber" : 116,
      "endColumnNumber" : 38
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 26,
        "startLineNumber" : 116,
        "startColumnNumber" : 24,
        "endLineNumber" : 116,
        "endColumnNumber" : 50
      },
      "nodeContext" : "translatedFile.getParent()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 3,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 116,
        "startColumnNumber" : 24,
        "endLineNumber" : 116,
        "endColumnNumber" : 64
      },
      "nodeContext" : "translatedFile.getParent().getFileName()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 51,
        "startLineNumber" : 116,
        "startColumnNumber" : 24,
        "endLineNumber" : 116,
        "endColumnNumber" : 75
      },
      "nodeContext" : "translatedFile.getParent().getFileName().toString()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 64,
        "startLineNumber" : 116,
        "startColumnNumber" : 11,
        "endLineNumber" : 116,
        "endColumnNumber" : 75
      },
      "nodeContext" : "parentName=translatedFile.getParent().getFileName().toString()",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 9,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 116,
        "startColumnNumber" : 4,
        "endLineNumber" : 116,
        "endColumnNumber" : 76
      },
      "nodeContext" : "String parentName=translatedFile.getParent().getFileName().toString();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2224,
        "startLineNumber" : 112,
        "startColumnNumber" : 90,
        "endLineNumber" : 172,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Map<String,String> english=readLines(englishFile);\n  Map<String,String> translated=readLines(translatedFile);\n  String parentName=translatedFile.getParent().getFileName().toString();\n  Matcher stringsFileNameMatcher=STRINGS_FILE_NAME_PATTERN.matcher(parentName);\n  if (!stringsFileNameMatcher.find()) {\n    throw new IllegalArgumentException(\"Invalid parent dir: \" + parentName);\n  }\n  String language=stringsFileNameMatcher.group(1);\n  String massagedLanguage=LANGUAGE_CODE_MASSAGINGS.get(language);\n  if (massagedLanguage != null) {\n    language=massagedLanguage;\n  }\n  System.out.println(\"Translating \" + language);\n  Path resultTempFile=Files.createTempFile(null,null);\n  boolean anyChange=false;\n  try (Writer out=Files.newBufferedWriter(resultTempFile,StandardCharsets.UTF_8)){\n    out.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\");\n    out.write(APACHE_2_LICENSE);\n    out.write(\"<resources>\\n\");\n    for (    Map.Entry<String,String> englishEntry : english.entrySet()) {\n      String key=englishEntry.getKey();\n      String value=englishEntry.getValue();\n      out.write(\"  <string name=\\\"\");\n      out.write(key);\n      out.write('\"');\n      if (value.contains(\"%s\") || value.contains(\"%f\")) {\n        out.write(\" formatted=\\\"false\\\"\");\n      }\n      out.write('>');\n      String translatedString=translated.get(key);\n      if (translatedString == null || forceRetranslation.contains(key)) {\n        anyChange=true;\n        translatedString=translateString(value,language);\n        translatedString=translatedString.replaceAll(\"'\",\"\\\\\\\\'\");\n      }\n      out.write(translatedString);\n      out.write(\"</string>\\n\");\n    }\n    out.write(\"</resources>\\n\");\n    out.flush();\n  }\n   if (anyChange) {\n    System.out.println(\"  Writing translations\");\n    Files.move(resultTempFile,translatedFile,StandardCopyOption.REPLACE_EXISTING);\n  }\n else {\n    Files.delete(resultTempFile);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 291,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2417,
        "startLineNumber" : 110,
        "startColumnNumber" : 2,
        "endLineNumber" : 172,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static void translate(Path englishFile,Path translatedFile,Collection<String> forceRetranslation) throws IOException {\n  Map<String,String> english=readLines(englishFile);\n  Map<String,String> translated=readLines(translatedFile);\n  String parentName=translatedFile.getParent().getFileName().toString();\n  Matcher stringsFileNameMatcher=STRINGS_FILE_NAME_PATTERN.matcher(parentName);\n  if (!stringsFileNameMatcher.find()) {\n    throw new IllegalArgumentException(\"Invalid parent dir: \" + parentName);\n  }\n  String language=stringsFileNameMatcher.group(1);\n  String massagedLanguage=LANGUAGE_CODE_MASSAGINGS.get(language);\n  if (massagedLanguage != null) {\n    language=massagedLanguage;\n  }\n  System.out.println(\"Translating \" + language);\n  Path resultTempFile=Files.createTempFile(null,null);\n  boolean anyChange=false;\n  try (Writer out=Files.newBufferedWriter(resultTempFile,StandardCharsets.UTF_8)){\n    out.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\");\n    out.write(APACHE_2_LICENSE);\n    out.write(\"<resources>\\n\");\n    for (    Map.Entry<String,String> englishEntry : english.entrySet()) {\n      String key=englishEntry.getKey();\n      String value=englishEntry.getValue();\n      out.write(\"  <string name=\\\"\");\n      out.write(key);\n      out.write('\"');\n      if (value.contains(\"%s\") || value.contains(\"%f\")) {\n        out.write(\" formatted=\\\"false\\\"\");\n      }\n      out.write('>');\n      String translatedString=translated.get(key);\n      if (translatedString == null || forceRetranslation.contains(key)) {\n        anyChange=true;\n        translatedString=translateString(value,language);\n        translatedString=translatedString.replaceAll(\"'\",\"\\\\\\\\'\");\n      }\n      out.write(translatedString);\n      out.write(\"</string>\\n\");\n    }\n    out.write(\"</resources>\\n\");\n    out.flush();\n  }\n   if (anyChange) {\n    System.out.println(\"  Writing translations\");\n    Files.move(resultTempFile,translatedFile,StandardCopyOption.REPLACE_EXISTING);\n  }\n else {\n    Files.delete(resultTempFile);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 313,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 72,
        "startLineNumber" : 116,
        "startColumnNumber" : 4,
        "endLineNumber" : 116,
        "endColumnNumber" : 76
      },
      "nodeContext" : "String parentName=translatedFile.getParent().getFileName().toString();\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    },
    "tokenLength" : 1,
    "type" : "java.nio.file.Path"
  }, {
    "nodeContext" : "translatedFile",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 14,
      "startLineNumber" : 168,
      "startColumnNumber" : 33,
      "endLineNumber" : 168,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 79,
        "startLineNumber" : 168,
        "startColumnNumber" : 6,
        "endLineNumber" : 168,
        "endColumnNumber" : 85
      },
      "nodeContext" : "Files.move(resultTempFile,translatedFile,StandardCopyOption.REPLACE_EXISTING)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 8,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 168,
        "startColumnNumber" : 6,
        "endLineNumber" : 168,
        "endColumnNumber" : 86
      },
      "nodeContext" : "Files.move(resultTempFile,translatedFile,StandardCopyOption.REPLACE_EXISTING);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 149,
        "startLineNumber" : 166,
        "startColumnNumber" : 19,
        "endLineNumber" : 169,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  System.out.println(\"  Writing translations\");\n  Files.move(resultTempFile,translatedFile,StandardCopyOption.REPLACE_EXISTING);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 17,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 215,
        "startLineNumber" : 166,
        "startColumnNumber" : 4,
        "endLineNumber" : 171,
        "endColumnNumber" : 5
      },
      "nodeContext" : "if (anyChange) {\n  System.out.println(\"  Writing translations\");\n  Files.move(resultTempFile,translatedFile,StandardCopyOption.REPLACE_EXISTING);\n}\n else {\n  Files.delete(resultTempFile);\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 25,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2224,
        "startLineNumber" : 112,
        "startColumnNumber" : 90,
        "endLineNumber" : 172,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  Map<String,String> english=readLines(englishFile);\n  Map<String,String> translated=readLines(translatedFile);\n  String parentName=translatedFile.getParent().getFileName().toString();\n  Matcher stringsFileNameMatcher=STRINGS_FILE_NAME_PATTERN.matcher(parentName);\n  if (!stringsFileNameMatcher.find()) {\n    throw new IllegalArgumentException(\"Invalid parent dir: \" + parentName);\n  }\n  String language=stringsFileNameMatcher.group(1);\n  String massagedLanguage=LANGUAGE_CODE_MASSAGINGS.get(language);\n  if (massagedLanguage != null) {\n    language=massagedLanguage;\n  }\n  System.out.println(\"Translating \" + language);\n  Path resultTempFile=Files.createTempFile(null,null);\n  boolean anyChange=false;\n  try (Writer out=Files.newBufferedWriter(resultTempFile,StandardCharsets.UTF_8)){\n    out.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\");\n    out.write(APACHE_2_LICENSE);\n    out.write(\"<resources>\\n\");\n    for (    Map.Entry<String,String> englishEntry : english.entrySet()) {\n      String key=englishEntry.getKey();\n      String value=englishEntry.getValue();\n      out.write(\"  <string name=\\\"\");\n      out.write(key);\n      out.write('\"');\n      if (value.contains(\"%s\") || value.contains(\"%f\")) {\n        out.write(\" formatted=\\\"false\\\"\");\n      }\n      out.write('>');\n      String translatedString=translated.get(key);\n      if (translatedString == null || forceRetranslation.contains(key)) {\n        anyChange=true;\n        translatedString=translateString(value,language);\n        translatedString=translatedString.replaceAll(\"'\",\"\\\\\\\\'\");\n      }\n      out.write(translatedString);\n      out.write(\"</string>\\n\");\n    }\n    out.write(\"</resources>\\n\");\n    out.flush();\n  }\n   if (anyChange) {\n    System.out.println(\"  Writing translations\");\n    Files.move(resultTempFile,translatedFile,StandardCopyOption.REPLACE_EXISTING);\n  }\n else {\n    Files.delete(resultTempFile);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 291,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2417,
        "startLineNumber" : 110,
        "startColumnNumber" : 2,
        "endLineNumber" : 172,
        "endColumnNumber" : 3
      },
      "nodeContext" : "private static void translate(Path englishFile,Path translatedFile,Collection<String> forceRetranslation) throws IOException {\n  Map<String,String> english=readLines(englishFile);\n  Map<String,String> translated=readLines(translatedFile);\n  String parentName=translatedFile.getParent().getFileName().toString();\n  Matcher stringsFileNameMatcher=STRINGS_FILE_NAME_PATTERN.matcher(parentName);\n  if (!stringsFileNameMatcher.find()) {\n    throw new IllegalArgumentException(\"Invalid parent dir: \" + parentName);\n  }\n  String language=stringsFileNameMatcher.group(1);\n  String massagedLanguage=LANGUAGE_CODE_MASSAGINGS.get(language);\n  if (massagedLanguage != null) {\n    language=massagedLanguage;\n  }\n  System.out.println(\"Translating \" + language);\n  Path resultTempFile=Files.createTempFile(null,null);\n  boolean anyChange=false;\n  try (Writer out=Files.newBufferedWriter(resultTempFile,StandardCharsets.UTF_8)){\n    out.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\");\n    out.write(APACHE_2_LICENSE);\n    out.write(\"<resources>\\n\");\n    for (    Map.Entry<String,String> englishEntry : english.entrySet()) {\n      String key=englishEntry.getKey();\n      String value=englishEntry.getValue();\n      out.write(\"  <string name=\\\"\");\n      out.write(key);\n      out.write('\"');\n      if (value.contains(\"%s\") || value.contains(\"%f\")) {\n        out.write(\" formatted=\\\"false\\\"\");\n      }\n      out.write('>');\n      String translatedString=translated.get(key);\n      if (translatedString == null || forceRetranslation.contains(key)) {\n        anyChange=true;\n        translatedString=translateString(value,language);\n        translatedString=translatedString.replaceAll(\"'\",\"\\\\\\\\'\");\n      }\n      out.write(translatedString);\n      out.write(\"</string>\\n\");\n    }\n    out.write(\"</resources>\\n\");\n    out.flush();\n  }\n   if (anyChange) {\n    System.out.println(\"  Writing translations\");\n    Files.move(resultTempFile,translatedFile,StandardCopyOption.REPLACE_EXISTING);\n  }\n else {\n    Files.delete(resultTempFile);\n  }\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 313,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 80,
        "startLineNumber" : 168,
        "startColumnNumber" : 6,
        "endLineNumber" : 168,
        "endColumnNumber" : 86
      },
      "nodeContext" : "Files.move(resultTempFile,translatedFile,StandardCopyOption.REPLACE_EXISTING);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.nio.file.Path"
  } ],
  "positionList" : [ {
    "charLength" : 14,
    "startLineNumber" : 115,
    "startColumnNumber" : 46,
    "endLineNumber" : 115,
    "endColumnNumber" : 60
  }, {
    "charLength" : 14,
    "startLineNumber" : 116,
    "startColumnNumber" : 24,
    "endLineNumber" : 116,
    "endColumnNumber" : 38
  }, {
    "charLength" : 14,
    "startLineNumber" : 168,
    "startColumnNumber" : 33,
    "endLineNumber" : 168,
    "endColumnNumber" : 47
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 3
  }, {
    "firstKey" : 0,
    "secondKey" : 2,
    "layout" : 3
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 5
  }, {
    "firstKey" : 1,
    "secondKey" : 2,
    "layout" : 5
  }, {
    "firstKey" : 2,
    "secondKey" : 0,
    "layout" : 4
  }, {
    "firstKey" : 2,
    "secondKey" : 1,
    "layout" : 4
  } ]
}