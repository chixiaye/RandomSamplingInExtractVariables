{
  "id" : 390,
  "expression" : "CommonChannelConfigKeys.serverSslConfig",
  "projectName" : "Netflix@zuul",
  "commitID" : "f8ef3551d8dd57a512336315ec51bb6c0444c517",
  "filePath" : "/zuul-sample/src/main/java/com/netflix/zuul/sample/SampleServerStartup.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "CommonChannelConfigKeys.serverSslConfig",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 39,
      "startLineNumber" : 129,
      "startColumnNumber" : 34,
      "endLineNumber" : 129,
      "endColumnNumber" : 73
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 129,
        "startColumnNumber" : 16,
        "endLineNumber" : 129,
        "endColumnNumber" : 85
      },
      "nodeContext" : "channelConfig.set(CommonChannelConfigKeys.serverSslConfig,sslConfig)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 129,
        "startColumnNumber" : 16,
        "endLineNumber" : 129,
        "endColumnNumber" : 86
      },
      "nodeContext" : "channelConfig.set(CommonChannelConfigKeys.serverSslConfig,sslConfig);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6104,
        "startLineNumber" : 103,
        "startColumnNumber" : 8,
        "endLineNumber" : 204,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (SERVER_TYPE) {\ncase HTTP:  channelConfig.set(CommonChannelConfigKeys.allowProxyHeadersWhen,StripUntrustedProxyHeadersHandler.AllowWhen.ALWAYS);\nchannelConfig.set(CommonChannelConfigKeys.preferProxyProtocolForClientIp,false);\nchannelConfig.set(CommonChannelConfigKeys.isSSlFromIntermediary,false);\nchannelConfig.set(CommonChannelConfigKeys.withProxyProtocol,false);\nportsToChannels.put(port,new ZuulServerChannelInitializer(port,channelConfig,channelDependencies,clientChannels));\nlogPortConfigured(port,null);\nbreak;\ncase HTTP2:sslConfig=ServerSslConfig.withDefaultCiphers(loadFromResources(\"server.cert\"),loadFromResources(\"server.key\"),WWW_PROTOCOLS);\nchannelConfig.set(CommonChannelConfigKeys.allowProxyHeadersWhen,StripUntrustedProxyHeadersHandler.AllowWhen.NEVER);\nchannelConfig.set(CommonChannelConfigKeys.preferProxyProtocolForClientIp,true);\nchannelConfig.set(CommonChannelConfigKeys.isSSlFromIntermediary,false);\nchannelConfig.set(CommonChannelConfigKeys.serverSslConfig,sslConfig);\nchannelConfig.set(CommonChannelConfigKeys.sslContextFactory,new BaseSslContextFactory(registry,sslConfig));\naddHttp2DefaultConfig(channelConfig,mainPortName);\nportsToChannels.put(port,new Http2SslChannelInitializer(port,channelConfig,channelDependencies,clientChannels));\nlogPortConfigured(port,sslConfig);\nbreak;\ncase HTTP_MUTUAL_TLS:sslConfig=new ServerSslConfig(WWW_PROTOCOLS,ServerSslConfig.getDefaultCiphers(),loadFromResources(\"server.cert\"),loadFromResources(\"server.key\"),null,ClientAuth.REQUIRE,loadFromResources(\"truststore.jks\"),loadFromResources(\"truststore.key\"),false);\nchannelConfig.set(CommonChannelConfigKeys.allowProxyHeadersWhen,StripUntrustedProxyHeadersHandler.AllowWhen.NEVER);\nchannelConfig.set(CommonChannelConfigKeys.preferProxyProtocolForClientIp,true);\nchannelConfig.set(CommonChannelConfigKeys.isSSlFromIntermediary,false);\nchannelConfig.set(CommonChannelConfigKeys.withProxyProtocol,true);\nchannelConfig.set(CommonChannelConfigKeys.serverSslConfig,sslConfig);\nchannelConfig.set(CommonChannelConfigKeys.sslContextFactory,new BaseSslContextFactory(registry,sslConfig));\nportsToChannels.put(port,new Http1MutualSslChannelInitializer(port,channelConfig,channelDependencies,clientChannels));\nlogPortConfigured(port,sslConfig);\nbreak;\ncase WEBSOCKET:channelConfig.set(CommonChannelConfigKeys.allowProxyHeadersWhen,StripUntrustedProxyHeadersHandler.AllowWhen.NEVER);\nchannelConfig.set(CommonChannelConfigKeys.preferProxyProtocolForClientIp,true);\nchannelConfig.set(CommonChannelConfigKeys.isSSlFromIntermediary,false);\nchannelConfig.set(CommonChannelConfigKeys.withProxyProtocol,true);\nchannelDependencies.set(ZuulDependencyKeys.pushConnectionRegistry,pushConnectionRegistry);\nportsToChannels.put(port,new SampleWebSocketPushChannelInitializer(port,channelConfig,channelDependencies,clientChannels));\nlogPortConfigured(port,null);\nportsToChannels.put(pushPort,pushSenderInitializer);\nlogPortConfigured(pushPort,null);\nbreak;\ncase SSE:channelConfig.set(CommonChannelConfigKeys.allowProxyHeadersWhen,StripUntrustedProxyHeadersHandler.AllowWhen.NEVER);\nchannelConfig.set(CommonChannelConfigKeys.preferProxyProtocolForClientIp,true);\nchannelConfig.set(CommonChannelConfigKeys.isSSlFromIntermediary,false);\nchannelConfig.set(CommonChannelConfigKeys.withProxyProtocol,true);\nchannelDependencies.set(ZuulDependencyKeys.pushConnectionRegistry,pushConnectionRegistry);\nportsToChannels.put(port,new SampleSSEPushChannelInitializer(port,channelConfig,channelDependencies,clientChannels));\nlogPortConfigured(port,null);\nportsToChannels.put(pushPort,pushSenderInitializer);\nlogPortConfigured(pushPort,null);\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 397,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6806,
        "startLineNumber" : 89,
        "startColumnNumber" : 99,
        "endLineNumber" : 207,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<Integer,ChannelInitializer> portsToChannels=new HashMap<>();\n  String mainPortName=\"main\";\n  int port=new DynamicIntProperty(\"zuul.server.port.main\",7001).get();\n  ChannelConfig channelConfig=defaultChannelConfig(mainPortName);\n  int pushPort=new DynamicIntProperty(\"zuul.server.port.http.push\",7008).get();\n  ServerSslConfig sslConfig;\n  ChannelConfig channelDependencies=defaultChannelDependencies(mainPortName);\nswitch (SERVER_TYPE) {\ncase HTTP:    channelConfig.set(CommonChannelConfigKeys.allowProxyHeadersWhen,StripUntrustedProxyHeadersHandler.AllowWhen.ALWAYS);\n  channelConfig.set(CommonChannelConfigKeys.preferProxyProtocolForClientIp,false);\nchannelConfig.set(CommonChannelConfigKeys.isSSlFromIntermediary,false);\nchannelConfig.set(CommonChannelConfigKeys.withProxyProtocol,false);\nportsToChannels.put(port,new ZuulServerChannelInitializer(port,channelConfig,channelDependencies,clientChannels));\nlogPortConfigured(port,null);\nbreak;\ncase HTTP2:sslConfig=ServerSslConfig.withDefaultCiphers(loadFromResources(\"server.cert\"),loadFromResources(\"server.key\"),WWW_PROTOCOLS);\nchannelConfig.set(CommonChannelConfigKeys.allowProxyHeadersWhen,StripUntrustedProxyHeadersHandler.AllowWhen.NEVER);\nchannelConfig.set(CommonChannelConfigKeys.preferProxyProtocolForClientIp,true);\nchannelConfig.set(CommonChannelConfigKeys.isSSlFromIntermediary,false);\nchannelConfig.set(CommonChannelConfigKeys.serverSslConfig,sslConfig);\nchannelConfig.set(CommonChannelConfigKeys.sslContextFactory,new BaseSslContextFactory(registry,sslConfig));\naddHttp2DefaultConfig(channelConfig,mainPortName);\nportsToChannels.put(port,new Http2SslChannelInitializer(port,channelConfig,channelDependencies,clientChannels));\nlogPortConfigured(port,sslConfig);\nbreak;\ncase HTTP_MUTUAL_TLS:sslConfig=new ServerSslConfig(WWW_PROTOCOLS,ServerSslConfig.getDefaultCiphers(),loadFromResources(\"server.cert\"),loadFromResources(\"server.key\"),null,ClientAuth.REQUIRE,loadFromResources(\"truststore.jks\"),loadFromResources(\"truststore.key\"),false);\nchannelConfig.set(CommonChannelConfigKeys.allowProxyHeadersWhen,StripUntrustedProxyHeadersHandler.AllowWhen.NEVER);\nchannelConfig.set(CommonChannelConfigKeys.preferProxyProtocolForClientIp,true);\nchannelConfig.set(CommonChannelConfigKeys.isSSlFromIntermediary,false);\nchannelConfig.set(CommonChannelConfigKeys.withProxyProtocol,true);\nchannelConfig.set(CommonChannelConfigKeys.serverSslConfig,sslConfig);\nchannelConfig.set(CommonChannelConfigKeys.sslContextFactory,new BaseSslContextFactory(registry,sslConfig));\nportsToChannels.put(port,new Http1MutualSslChannelInitializer(port,channelConfig,channelDependencies,clientChannels));\nlogPortConfigured(port,sslConfig);\nbreak;\ncase WEBSOCKET:channelConfig.set(CommonChannelConfigKeys.allowProxyHeadersWhen,StripUntrustedProxyHeadersHandler.AllowWhen.NEVER);\nchannelConfig.set(CommonChannelConfigKeys.preferProxyProtocolForClientIp,true);\nchannelConfig.set(CommonChannelConfigKeys.isSSlFromIntermediary,false);\nchannelConfig.set(CommonChannelConfigKeys.withProxyProtocol,true);\nchannelDependencies.set(ZuulDependencyKeys.pushConnectionRegistry,pushConnectionRegistry);\nportsToChannels.put(port,new SampleWebSocketPushChannelInitializer(port,channelConfig,channelDependencies,clientChannels));\nlogPortConfigured(port,null);\nportsToChannels.put(pushPort,pushSenderInitializer);\nlogPortConfigured(pushPort,null);\nbreak;\ncase SSE:channelConfig.set(CommonChannelConfigKeys.allowProxyHeadersWhen,StripUntrustedProxyHeadersHandler.AllowWhen.NEVER);\nchannelConfig.set(CommonChannelConfigKeys.preferProxyProtocolForClientIp,true);\nchannelConfig.set(CommonChannelConfigKeys.isSSlFromIntermediary,false);\nchannelConfig.set(CommonChannelConfigKeys.withProxyProtocol,true);\nchannelDependencies.set(ZuulDependencyKeys.pushConnectionRegistry,pushConnectionRegistry);\nportsToChannels.put(port,new SampleSSEPushChannelInitializer(port,channelConfig,channelDependencies,clientChannels));\nlogPortConfigured(port,null);\nportsToChannels.put(pushPort,pushSenderInitializer);\nlogPortConfigured(pushPort,null);\nbreak;\n}\nreturn portsToChannels;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 463,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6915,
        "startLineNumber" : 88,
        "startColumnNumber" : 4,
        "endLineNumber" : 207,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override protected Map<Integer,ChannelInitializer> choosePortsAndChannels(ChannelGroup clientChannels){\n  Map<Integer,ChannelInitializer> portsToChannels=new HashMap<>();\n  String mainPortName=\"main\";\n  int port=new DynamicIntProperty(\"zuul.server.port.main\",7001).get();\n  ChannelConfig channelConfig=defaultChannelConfig(mainPortName);\n  int pushPort=new DynamicIntProperty(\"zuul.server.port.http.push\",7008).get();\n  ServerSslConfig sslConfig;\n  ChannelConfig channelDependencies=defaultChannelDependencies(mainPortName);\nswitch (SERVER_TYPE) {\ncase HTTP:    channelConfig.set(CommonChannelConfigKeys.allowProxyHeadersWhen,StripUntrustedProxyHeadersHandler.AllowWhen.ALWAYS);\n  channelConfig.set(CommonChannelConfigKeys.preferProxyProtocolForClientIp,false);\nchannelConfig.set(CommonChannelConfigKeys.isSSlFromIntermediary,false);\nchannelConfig.set(CommonChannelConfigKeys.withProxyProtocol,false);\nportsToChannels.put(port,new ZuulServerChannelInitializer(port,channelConfig,channelDependencies,clientChannels));\nlogPortConfigured(port,null);\nbreak;\ncase HTTP2:sslConfig=ServerSslConfig.withDefaultCiphers(loadFromResources(\"server.cert\"),loadFromResources(\"server.key\"),WWW_PROTOCOLS);\nchannelConfig.set(CommonChannelConfigKeys.allowProxyHeadersWhen,StripUntrustedProxyHeadersHandler.AllowWhen.NEVER);\nchannelConfig.set(CommonChannelConfigKeys.preferProxyProtocolForClientIp,true);\nchannelConfig.set(CommonChannelConfigKeys.isSSlFromIntermediary,false);\nchannelConfig.set(CommonChannelConfigKeys.serverSslConfig,sslConfig);\nchannelConfig.set(CommonChannelConfigKeys.sslContextFactory,new BaseSslContextFactory(registry,sslConfig));\naddHttp2DefaultConfig(channelConfig,mainPortName);\nportsToChannels.put(port,new Http2SslChannelInitializer(port,channelConfig,channelDependencies,clientChannels));\nlogPortConfigured(port,sslConfig);\nbreak;\ncase HTTP_MUTUAL_TLS:sslConfig=new ServerSslConfig(WWW_PROTOCOLS,ServerSslConfig.getDefaultCiphers(),loadFromResources(\"server.cert\"),loadFromResources(\"server.key\"),null,ClientAuth.REQUIRE,loadFromResources(\"truststore.jks\"),loadFromResources(\"truststore.key\"),false);\nchannelConfig.set(CommonChannelConfigKeys.allowProxyHeadersWhen,StripUntrustedProxyHeadersHandler.AllowWhen.NEVER);\nchannelConfig.set(CommonChannelConfigKeys.preferProxyProtocolForClientIp,true);\nchannelConfig.set(CommonChannelConfigKeys.isSSlFromIntermediary,false);\nchannelConfig.set(CommonChannelConfigKeys.withProxyProtocol,true);\nchannelConfig.set(CommonChannelConfigKeys.serverSslConfig,sslConfig);\nchannelConfig.set(CommonChannelConfigKeys.sslContextFactory,new BaseSslContextFactory(registry,sslConfig));\nportsToChannels.put(port,new Http1MutualSslChannelInitializer(port,channelConfig,channelDependencies,clientChannels));\nlogPortConfigured(port,sslConfig);\nbreak;\ncase WEBSOCKET:channelConfig.set(CommonChannelConfigKeys.allowProxyHeadersWhen,StripUntrustedProxyHeadersHandler.AllowWhen.NEVER);\nchannelConfig.set(CommonChannelConfigKeys.preferProxyProtocolForClientIp,true);\nchannelConfig.set(CommonChannelConfigKeys.isSSlFromIntermediary,false);\nchannelConfig.set(CommonChannelConfigKeys.withProxyProtocol,true);\nchannelDependencies.set(ZuulDependencyKeys.pushConnectionRegistry,pushConnectionRegistry);\nportsToChannels.put(port,new SampleWebSocketPushChannelInitializer(port,channelConfig,channelDependencies,clientChannels));\nlogPortConfigured(port,null);\nportsToChannels.put(pushPort,pushSenderInitializer);\nlogPortConfigured(pushPort,null);\nbreak;\ncase SSE:channelConfig.set(CommonChannelConfigKeys.allowProxyHeadersWhen,StripUntrustedProxyHeadersHandler.AllowWhen.NEVER);\nchannelConfig.set(CommonChannelConfigKeys.preferProxyProtocolForClientIp,true);\nchannelConfig.set(CommonChannelConfigKeys.isSSlFromIntermediary,false);\nchannelConfig.set(CommonChannelConfigKeys.withProxyProtocol,true);\nchannelDependencies.set(ZuulDependencyKeys.pushConnectionRegistry,pushConnectionRegistry);\nportsToChannels.put(port,new SampleSSEPushChannelInitializer(port,channelConfig,channelDependencies,clientChannels));\nlogPortConfigured(port,null);\nportsToChannels.put(pushPort,pushSenderInitializer);\nlogPortConfigured(pushPort,null);\nbreak;\n}\nreturn portsToChannels;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 479,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 129,
        "startColumnNumber" : 16,
        "endLineNumber" : 129,
        "endColumnNumber" : 86
      },
      "nodeContext" : "channelConfig.set(CommonChannelConfigKeys.serverSslConfig,sslConfig);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "com.netflix.netty.common.channel.config.ChannelConfigKey<com.netflix.netty.common.ssl.ServerSslConfig>"
  }, {
    "nodeContext" : "CommonChannelConfigKeys.serverSslConfig",
    "nodeType" : "QualifiedName",
    "nodePosition" : {
      "charLength" : 39,
      "startLineNumber" : 160,
      "startColumnNumber" : 34,
      "endLineNumber" : 160,
      "endColumnNumber" : 73
    },
    "astNodeNumber" : 3,
    "astHeight" : 2,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 69,
        "startLineNumber" : 160,
        "startColumnNumber" : 16,
        "endLineNumber" : 160,
        "endColumnNumber" : 85
      },
      "nodeContext" : "channelConfig.set(CommonChannelConfigKeys.serverSslConfig,sslConfig)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 7,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 160,
        "startColumnNumber" : 16,
        "endLineNumber" : 160,
        "endColumnNumber" : 86
      },
      "nodeContext" : "channelConfig.set(CommonChannelConfigKeys.serverSslConfig,sslConfig);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 6104,
        "startLineNumber" : 103,
        "startColumnNumber" : 8,
        "endLineNumber" : 204,
        "endColumnNumber" : 9
      },
      "nodeContext" : "switch (SERVER_TYPE) {\ncase HTTP:  channelConfig.set(CommonChannelConfigKeys.allowProxyHeadersWhen,StripUntrustedProxyHeadersHandler.AllowWhen.ALWAYS);\nchannelConfig.set(CommonChannelConfigKeys.preferProxyProtocolForClientIp,false);\nchannelConfig.set(CommonChannelConfigKeys.isSSlFromIntermediary,false);\nchannelConfig.set(CommonChannelConfigKeys.withProxyProtocol,false);\nportsToChannels.put(port,new ZuulServerChannelInitializer(port,channelConfig,channelDependencies,clientChannels));\nlogPortConfigured(port,null);\nbreak;\ncase HTTP2:sslConfig=ServerSslConfig.withDefaultCiphers(loadFromResources(\"server.cert\"),loadFromResources(\"server.key\"),WWW_PROTOCOLS);\nchannelConfig.set(CommonChannelConfigKeys.allowProxyHeadersWhen,StripUntrustedProxyHeadersHandler.AllowWhen.NEVER);\nchannelConfig.set(CommonChannelConfigKeys.preferProxyProtocolForClientIp,true);\nchannelConfig.set(CommonChannelConfigKeys.isSSlFromIntermediary,false);\nchannelConfig.set(CommonChannelConfigKeys.serverSslConfig,sslConfig);\nchannelConfig.set(CommonChannelConfigKeys.sslContextFactory,new BaseSslContextFactory(registry,sslConfig));\naddHttp2DefaultConfig(channelConfig,mainPortName);\nportsToChannels.put(port,new Http2SslChannelInitializer(port,channelConfig,channelDependencies,clientChannels));\nlogPortConfigured(port,sslConfig);\nbreak;\ncase HTTP_MUTUAL_TLS:sslConfig=new ServerSslConfig(WWW_PROTOCOLS,ServerSslConfig.getDefaultCiphers(),loadFromResources(\"server.cert\"),loadFromResources(\"server.key\"),null,ClientAuth.REQUIRE,loadFromResources(\"truststore.jks\"),loadFromResources(\"truststore.key\"),false);\nchannelConfig.set(CommonChannelConfigKeys.allowProxyHeadersWhen,StripUntrustedProxyHeadersHandler.AllowWhen.NEVER);\nchannelConfig.set(CommonChannelConfigKeys.preferProxyProtocolForClientIp,true);\nchannelConfig.set(CommonChannelConfigKeys.isSSlFromIntermediary,false);\nchannelConfig.set(CommonChannelConfigKeys.withProxyProtocol,true);\nchannelConfig.set(CommonChannelConfigKeys.serverSslConfig,sslConfig);\nchannelConfig.set(CommonChannelConfigKeys.sslContextFactory,new BaseSslContextFactory(registry,sslConfig));\nportsToChannels.put(port,new Http1MutualSslChannelInitializer(port,channelConfig,channelDependencies,clientChannels));\nlogPortConfigured(port,sslConfig);\nbreak;\ncase WEBSOCKET:channelConfig.set(CommonChannelConfigKeys.allowProxyHeadersWhen,StripUntrustedProxyHeadersHandler.AllowWhen.NEVER);\nchannelConfig.set(CommonChannelConfigKeys.preferProxyProtocolForClientIp,true);\nchannelConfig.set(CommonChannelConfigKeys.isSSlFromIntermediary,false);\nchannelConfig.set(CommonChannelConfigKeys.withProxyProtocol,true);\nchannelDependencies.set(ZuulDependencyKeys.pushConnectionRegistry,pushConnectionRegistry);\nportsToChannels.put(port,new SampleWebSocketPushChannelInitializer(port,channelConfig,channelDependencies,clientChannels));\nlogPortConfigured(port,null);\nportsToChannels.put(pushPort,pushSenderInitializer);\nlogPortConfigured(pushPort,null);\nbreak;\ncase SSE:channelConfig.set(CommonChannelConfigKeys.allowProxyHeadersWhen,StripUntrustedProxyHeadersHandler.AllowWhen.NEVER);\nchannelConfig.set(CommonChannelConfigKeys.preferProxyProtocolForClientIp,true);\nchannelConfig.set(CommonChannelConfigKeys.isSSlFromIntermediary,false);\nchannelConfig.set(CommonChannelConfigKeys.withProxyProtocol,true);\nchannelDependencies.set(ZuulDependencyKeys.pushConnectionRegistry,pushConnectionRegistry);\nportsToChannels.put(port,new SampleSSEPushChannelInitializer(port,channelConfig,channelDependencies,clientChannels));\nlogPortConfigured(port,null);\nportsToChannels.put(pushPort,pushSenderInitializer);\nlogPortConfigured(pushPort,null);\nbreak;\n}\n",
      "nodeType" : "SwitchStatement",
      "astNodeNumber" : 397,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 6806,
        "startLineNumber" : 89,
        "startColumnNumber" : 99,
        "endLineNumber" : 207,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  Map<Integer,ChannelInitializer> portsToChannels=new HashMap<>();\n  String mainPortName=\"main\";\n  int port=new DynamicIntProperty(\"zuul.server.port.main\",7001).get();\n  ChannelConfig channelConfig=defaultChannelConfig(mainPortName);\n  int pushPort=new DynamicIntProperty(\"zuul.server.port.http.push\",7008).get();\n  ServerSslConfig sslConfig;\n  ChannelConfig channelDependencies=defaultChannelDependencies(mainPortName);\nswitch (SERVER_TYPE) {\ncase HTTP:    channelConfig.set(CommonChannelConfigKeys.allowProxyHeadersWhen,StripUntrustedProxyHeadersHandler.AllowWhen.ALWAYS);\n  channelConfig.set(CommonChannelConfigKeys.preferProxyProtocolForClientIp,false);\nchannelConfig.set(CommonChannelConfigKeys.isSSlFromIntermediary,false);\nchannelConfig.set(CommonChannelConfigKeys.withProxyProtocol,false);\nportsToChannels.put(port,new ZuulServerChannelInitializer(port,channelConfig,channelDependencies,clientChannels));\nlogPortConfigured(port,null);\nbreak;\ncase HTTP2:sslConfig=ServerSslConfig.withDefaultCiphers(loadFromResources(\"server.cert\"),loadFromResources(\"server.key\"),WWW_PROTOCOLS);\nchannelConfig.set(CommonChannelConfigKeys.allowProxyHeadersWhen,StripUntrustedProxyHeadersHandler.AllowWhen.NEVER);\nchannelConfig.set(CommonChannelConfigKeys.preferProxyProtocolForClientIp,true);\nchannelConfig.set(CommonChannelConfigKeys.isSSlFromIntermediary,false);\nchannelConfig.set(CommonChannelConfigKeys.serverSslConfig,sslConfig);\nchannelConfig.set(CommonChannelConfigKeys.sslContextFactory,new BaseSslContextFactory(registry,sslConfig));\naddHttp2DefaultConfig(channelConfig,mainPortName);\nportsToChannels.put(port,new Http2SslChannelInitializer(port,channelConfig,channelDependencies,clientChannels));\nlogPortConfigured(port,sslConfig);\nbreak;\ncase HTTP_MUTUAL_TLS:sslConfig=new ServerSslConfig(WWW_PROTOCOLS,ServerSslConfig.getDefaultCiphers(),loadFromResources(\"server.cert\"),loadFromResources(\"server.key\"),null,ClientAuth.REQUIRE,loadFromResources(\"truststore.jks\"),loadFromResources(\"truststore.key\"),false);\nchannelConfig.set(CommonChannelConfigKeys.allowProxyHeadersWhen,StripUntrustedProxyHeadersHandler.AllowWhen.NEVER);\nchannelConfig.set(CommonChannelConfigKeys.preferProxyProtocolForClientIp,true);\nchannelConfig.set(CommonChannelConfigKeys.isSSlFromIntermediary,false);\nchannelConfig.set(CommonChannelConfigKeys.withProxyProtocol,true);\nchannelConfig.set(CommonChannelConfigKeys.serverSslConfig,sslConfig);\nchannelConfig.set(CommonChannelConfigKeys.sslContextFactory,new BaseSslContextFactory(registry,sslConfig));\nportsToChannels.put(port,new Http1MutualSslChannelInitializer(port,channelConfig,channelDependencies,clientChannels));\nlogPortConfigured(port,sslConfig);\nbreak;\ncase WEBSOCKET:channelConfig.set(CommonChannelConfigKeys.allowProxyHeadersWhen,StripUntrustedProxyHeadersHandler.AllowWhen.NEVER);\nchannelConfig.set(CommonChannelConfigKeys.preferProxyProtocolForClientIp,true);\nchannelConfig.set(CommonChannelConfigKeys.isSSlFromIntermediary,false);\nchannelConfig.set(CommonChannelConfigKeys.withProxyProtocol,true);\nchannelDependencies.set(ZuulDependencyKeys.pushConnectionRegistry,pushConnectionRegistry);\nportsToChannels.put(port,new SampleWebSocketPushChannelInitializer(port,channelConfig,channelDependencies,clientChannels));\nlogPortConfigured(port,null);\nportsToChannels.put(pushPort,pushSenderInitializer);\nlogPortConfigured(pushPort,null);\nbreak;\ncase SSE:channelConfig.set(CommonChannelConfigKeys.allowProxyHeadersWhen,StripUntrustedProxyHeadersHandler.AllowWhen.NEVER);\nchannelConfig.set(CommonChannelConfigKeys.preferProxyProtocolForClientIp,true);\nchannelConfig.set(CommonChannelConfigKeys.isSSlFromIntermediary,false);\nchannelConfig.set(CommonChannelConfigKeys.withProxyProtocol,true);\nchannelDependencies.set(ZuulDependencyKeys.pushConnectionRegistry,pushConnectionRegistry);\nportsToChannels.put(port,new SampleSSEPushChannelInitializer(port,channelConfig,channelDependencies,clientChannels));\nlogPortConfigured(port,null);\nportsToChannels.put(pushPort,pushSenderInitializer);\nlogPortConfigured(pushPort,null);\nbreak;\n}\nreturn portsToChannels;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 463,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 6915,
        "startLineNumber" : 88,
        "startColumnNumber" : 4,
        "endLineNumber" : 207,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override protected Map<Integer,ChannelInitializer> choosePortsAndChannels(ChannelGroup clientChannels){\n  Map<Integer,ChannelInitializer> portsToChannels=new HashMap<>();\n  String mainPortName=\"main\";\n  int port=new DynamicIntProperty(\"zuul.server.port.main\",7001).get();\n  ChannelConfig channelConfig=defaultChannelConfig(mainPortName);\n  int pushPort=new DynamicIntProperty(\"zuul.server.port.http.push\",7008).get();\n  ServerSslConfig sslConfig;\n  ChannelConfig channelDependencies=defaultChannelDependencies(mainPortName);\nswitch (SERVER_TYPE) {\ncase HTTP:    channelConfig.set(CommonChannelConfigKeys.allowProxyHeadersWhen,StripUntrustedProxyHeadersHandler.AllowWhen.ALWAYS);\n  channelConfig.set(CommonChannelConfigKeys.preferProxyProtocolForClientIp,false);\nchannelConfig.set(CommonChannelConfigKeys.isSSlFromIntermediary,false);\nchannelConfig.set(CommonChannelConfigKeys.withProxyProtocol,false);\nportsToChannels.put(port,new ZuulServerChannelInitializer(port,channelConfig,channelDependencies,clientChannels));\nlogPortConfigured(port,null);\nbreak;\ncase HTTP2:sslConfig=ServerSslConfig.withDefaultCiphers(loadFromResources(\"server.cert\"),loadFromResources(\"server.key\"),WWW_PROTOCOLS);\nchannelConfig.set(CommonChannelConfigKeys.allowProxyHeadersWhen,StripUntrustedProxyHeadersHandler.AllowWhen.NEVER);\nchannelConfig.set(CommonChannelConfigKeys.preferProxyProtocolForClientIp,true);\nchannelConfig.set(CommonChannelConfigKeys.isSSlFromIntermediary,false);\nchannelConfig.set(CommonChannelConfigKeys.serverSslConfig,sslConfig);\nchannelConfig.set(CommonChannelConfigKeys.sslContextFactory,new BaseSslContextFactory(registry,sslConfig));\naddHttp2DefaultConfig(channelConfig,mainPortName);\nportsToChannels.put(port,new Http2SslChannelInitializer(port,channelConfig,channelDependencies,clientChannels));\nlogPortConfigured(port,sslConfig);\nbreak;\ncase HTTP_MUTUAL_TLS:sslConfig=new ServerSslConfig(WWW_PROTOCOLS,ServerSslConfig.getDefaultCiphers(),loadFromResources(\"server.cert\"),loadFromResources(\"server.key\"),null,ClientAuth.REQUIRE,loadFromResources(\"truststore.jks\"),loadFromResources(\"truststore.key\"),false);\nchannelConfig.set(CommonChannelConfigKeys.allowProxyHeadersWhen,StripUntrustedProxyHeadersHandler.AllowWhen.NEVER);\nchannelConfig.set(CommonChannelConfigKeys.preferProxyProtocolForClientIp,true);\nchannelConfig.set(CommonChannelConfigKeys.isSSlFromIntermediary,false);\nchannelConfig.set(CommonChannelConfigKeys.withProxyProtocol,true);\nchannelConfig.set(CommonChannelConfigKeys.serverSslConfig,sslConfig);\nchannelConfig.set(CommonChannelConfigKeys.sslContextFactory,new BaseSslContextFactory(registry,sslConfig));\nportsToChannels.put(port,new Http1MutualSslChannelInitializer(port,channelConfig,channelDependencies,clientChannels));\nlogPortConfigured(port,sslConfig);\nbreak;\ncase WEBSOCKET:channelConfig.set(CommonChannelConfigKeys.allowProxyHeadersWhen,StripUntrustedProxyHeadersHandler.AllowWhen.NEVER);\nchannelConfig.set(CommonChannelConfigKeys.preferProxyProtocolForClientIp,true);\nchannelConfig.set(CommonChannelConfigKeys.isSSlFromIntermediary,false);\nchannelConfig.set(CommonChannelConfigKeys.withProxyProtocol,true);\nchannelDependencies.set(ZuulDependencyKeys.pushConnectionRegistry,pushConnectionRegistry);\nportsToChannels.put(port,new SampleWebSocketPushChannelInitializer(port,channelConfig,channelDependencies,clientChannels));\nlogPortConfigured(port,null);\nportsToChannels.put(pushPort,pushSenderInitializer);\nlogPortConfigured(pushPort,null);\nbreak;\ncase SSE:channelConfig.set(CommonChannelConfigKeys.allowProxyHeadersWhen,StripUntrustedProxyHeadersHandler.AllowWhen.NEVER);\nchannelConfig.set(CommonChannelConfigKeys.preferProxyProtocolForClientIp,true);\nchannelConfig.set(CommonChannelConfigKeys.isSSlFromIntermediary,false);\nchannelConfig.set(CommonChannelConfigKeys.withProxyProtocol,true);\nchannelDependencies.set(ZuulDependencyKeys.pushConnectionRegistry,pushConnectionRegistry);\nportsToChannels.put(port,new SampleSSEPushChannelInitializer(port,channelConfig,channelDependencies,clientChannels));\nlogPortConfigured(port,null);\nportsToChannels.put(pushPort,pushSenderInitializer);\nlogPortConfigured(pushPort,null);\nbreak;\n}\nreturn portsToChannels;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 479,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.SwitchStatement,statements]",
      "nodePosition" : {
        "charLength" : 70,
        "startLineNumber" : 160,
        "startColumnNumber" : 16,
        "endLineNumber" : 160,
        "endColumnNumber" : 86
      },
      "nodeContext" : "channelConfig.set(CommonChannelConfigKeys.serverSslConfig,sslConfig);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 8,
      "astHeight" : 4
    },
    "tokenLength" : 2,
    "type" : "com.netflix.netty.common.channel.config.ChannelConfigKey<com.netflix.netty.common.ssl.ServerSslConfig>"
  } ],
  "positionList" : [ {
    "charLength" : 39,
    "startLineNumber" : 129,
    "startColumnNumber" : 34,
    "endLineNumber" : 129,
    "endColumnNumber" : 73
  }, {
    "charLength" : 39,
    "startLineNumber" : 160,
    "startColumnNumber" : 34,
    "endLineNumber" : 160,
    "endColumnNumber" : 73
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}