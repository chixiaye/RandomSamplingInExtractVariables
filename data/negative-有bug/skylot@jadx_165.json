{
  "id" : 165,
  "expression" : "t.getSourceLine() != e.getSourceLine()",
  "projectName" : "skylot@jadx",
  "commitID" : "eb2a1734d3e02c19814f628e10bf80de5fb19772",
  "filePath" : "/jadx-core/src/main/java/jadx/core/dex/visitors/regions/TernaryMod.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "t.getSourceLine() != e.getSourceLine()",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 38,
      "startLineNumber" : 46,
      "startColumnNumber" : 6,
      "endLineNumber" : 46,
      "endColumnNumber" : 44
    },
    "astNodeNumber" : 7,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 400,
        "startLineNumber" : 46,
        "startColumnNumber" : 2,
        "endLineNumber" : 60,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (t.getSourceLine() != e.getSourceLine()) {\n  if (t.getSourceLine() != 0 && e.getSourceLine() != 0) {\n    if (!checkLineStats(t,e)) {\n      return false;\n    }\n  }\n else {\n    if (containsTernary(t) || containsTernary(e)) {\n      return false;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 43,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2575,
        "startLineNumber" : 28,
        "startColumnNumber" : 67,
        "endLineNumber" : 117,
        "endColumnNumber" : 2
      },
      "nodeContext" : "{\n  if (ifRegion.contains(AFlag.ELSE_IF_CHAIN)) {\n    return false;\n  }\n  IContainer thenRegion=ifRegion.getThenRegion();\n  IContainer elseRegion=ifRegion.getElseRegion();\n  if (thenRegion == null || elseRegion == null) {\n    return false;\n  }\n  BlockNode tb=getTernaryInsnBlock(thenRegion);\n  BlockNode eb=getTernaryInsnBlock(elseRegion);\n  if (tb == null || eb == null) {\n    return false;\n  }\n  BlockNode header=ifRegion.getHeader();\n  InsnNode t=tb.getInstructions().get(0);\n  InsnNode e=eb.getInstructions().get(0);\n  if (t.getSourceLine() != e.getSourceLine()) {\n    if (t.getSourceLine() != 0 && e.getSourceLine() != 0) {\n      if (!checkLineStats(t,e)) {\n        return false;\n      }\n    }\n else {\n      if (containsTernary(t) || containsTernary(e)) {\n        return false;\n      }\n    }\n  }\n  if (t.getResult() != null && e.getResult() != null) {\n    PhiInsn phi=t.getResult().getSVar().getUsedInPhi();\n    if (phi == null || !t.getResult().equalRegisterAndType(e.getResult())) {\n      return false;\n    }\n    if (!ifRegion.getParent().replaceSubBlock(ifRegion,header)) {\n      return false;\n    }\n    InsnList.remove(tb,t);\n    InsnList.remove(eb,e);\n    RegisterArg resArg;\n    if (phi.getArgsCount() == 2) {\n      resArg=phi.getResult();\n    }\n else {\n      resArg=t.getResult();\n      phi.removeArg(e.getResult());\n    }\n    TernaryInsn ternInsn=new TernaryInsn(ifRegion.getCondition(),resArg,InsnArg.wrapArg(t),InsnArg.wrapArg(e));\n    ternInsn.setSourceLine(t.getSourceLine());\n    header.getInstructions().clear();\n    header.getInstructions().add(ternInsn);\n    CodeShrinker.shrinkMethod(mth);\n    return true;\n  }\n  if (!mth.getReturnType().equals(ArgType.VOID) && t.getType() == InsnType.RETURN && e.getType() == InsnType.RETURN) {\n    if (!ifRegion.getParent().replaceSubBlock(ifRegion,header)) {\n      return false;\n    }\n    InsnList.remove(tb,t);\n    InsnList.remove(eb,e);\n    tb.remove(AFlag.RETURN);\n    eb.remove(AFlag.RETURN);\n    TernaryInsn ternInsn=new TernaryInsn(ifRegion.getCondition(),null,t.getArg(0),e.getArg(0));\n    ternInsn.setSourceLine(t.getSourceLine());\n    InsnNode retInsn=new InsnNode(InsnType.RETURN,1);\n    retInsn.addArg(InsnArg.wrapArg(ternInsn));\n    header.getInstructions().clear();\n    header.getInstructions().add(retInsn);\n    header.add(AFlag.RETURN);\n    CodeShrinker.shrinkMethod(mth);\n    return true;\n  }\n  return false;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 424,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2641,
        "startLineNumber" : 28,
        "startColumnNumber" : 1,
        "endLineNumber" : 117,
        "endColumnNumber" : 2
      },
      "nodeContext" : "static boolean makeTernaryInsn(MethodNode mth,IfRegion ifRegion){\n  if (ifRegion.contains(AFlag.ELSE_IF_CHAIN)) {\n    return false;\n  }\n  IContainer thenRegion=ifRegion.getThenRegion();\n  IContainer elseRegion=ifRegion.getElseRegion();\n  if (thenRegion == null || elseRegion == null) {\n    return false;\n  }\n  BlockNode tb=getTernaryInsnBlock(thenRegion);\n  BlockNode eb=getTernaryInsnBlock(elseRegion);\n  if (tb == null || eb == null) {\n    return false;\n  }\n  BlockNode header=ifRegion.getHeader();\n  InsnNode t=tb.getInstructions().get(0);\n  InsnNode e=eb.getInstructions().get(0);\n  if (t.getSourceLine() != e.getSourceLine()) {\n    if (t.getSourceLine() != 0 && e.getSourceLine() != 0) {\n      if (!checkLineStats(t,e)) {\n        return false;\n      }\n    }\n else {\n      if (containsTernary(t) || containsTernary(e)) {\n        return false;\n      }\n    }\n  }\n  if (t.getResult() != null && e.getResult() != null) {\n    PhiInsn phi=t.getResult().getSVar().getUsedInPhi();\n    if (phi == null || !t.getResult().equalRegisterAndType(e.getResult())) {\n      return false;\n    }\n    if (!ifRegion.getParent().replaceSubBlock(ifRegion,header)) {\n      return false;\n    }\n    InsnList.remove(tb,t);\n    InsnList.remove(eb,e);\n    RegisterArg resArg;\n    if (phi.getArgsCount() == 2) {\n      resArg=phi.getResult();\n    }\n else {\n      resArg=t.getResult();\n      phi.removeArg(e.getResult());\n    }\n    TernaryInsn ternInsn=new TernaryInsn(ifRegion.getCondition(),resArg,InsnArg.wrapArg(t),InsnArg.wrapArg(e));\n    ternInsn.setSourceLine(t.getSourceLine());\n    header.getInstructions().clear();\n    header.getInstructions().add(ternInsn);\n    CodeShrinker.shrinkMethod(mth);\n    return true;\n  }\n  if (!mth.getReturnType().equals(ArgType.VOID) && t.getType() == InsnType.RETURN && e.getType() == InsnType.RETURN) {\n    if (!ifRegion.getParent().replaceSubBlock(ifRegion,header)) {\n      return false;\n    }\n    InsnList.remove(tb,t);\n    InsnList.remove(eb,e);\n    tb.remove(AFlag.RETURN);\n    eb.remove(AFlag.RETURN);\n    TernaryInsn ternInsn=new TernaryInsn(ifRegion.getCondition(),null,t.getArg(0),e.getArg(0));\n    ternInsn.setSourceLine(t.getSourceLine());\n    InsnNode retInsn=new InsnNode(InsnType.RETURN,1);\n    retInsn.addArg(InsnArg.wrapArg(ternInsn));\n    header.getInstructions().clear();\n    header.getInstructions().add(retInsn);\n    header.add(AFlag.RETURN);\n    CodeShrinker.shrinkMethod(mth);\n    return true;\n  }\n  return false;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 436,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 400,
        "startLineNumber" : 46,
        "startColumnNumber" : 2,
        "endLineNumber" : 60,
        "endColumnNumber" : 3
      },
      "nodeContext" : "if (t.getSourceLine() != e.getSourceLine()) {\n  if (t.getSourceLine() != 0 && e.getSourceLine() != 0) {\n    if (!checkLineStats(t,e)) {\n      return false;\n    }\n  }\n else {\n    if (containsTernary(t) || containsTernary(e)) {\n      return false;\n    }\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 43,
      "astHeight" : 8
    },
    "tokenLength" : 5,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 38,
    "startLineNumber" : 46,
    "startColumnNumber" : 6,
    "endLineNumber" : 46,
    "endColumnNumber" : 44
  } ],
  "layoutRelationDataList" : [ ]
}