{
  "id" : 21,
  "expression" : "index < libraryJars.size()",
  "projectName" : "bazelbuild@bazel",
  "commitID" : "302971e1b3d803069ac949c0085c0d2a3916c8ab",
  "filePath" : "/third_party/java/proguard/proguard6.2.2/src/proguard/UpToDateChecker.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "index < libraryJars.size()",
    "nodeType" : "InfixExpression",
    "nodePosition" : {
      "charLength" : 26,
      "startLineNumber" : 76,
      "startColumnNumber" : 36,
      "endLineNumber" : 76,
      "endColumnNumber" : 62
    },
    "astNodeNumber" : 5,
    "astHeight" : 3,
    "parentDataList" : [ {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 364,
        "startLineNumber" : 76,
        "startColumnNumber" : 16,
        "endLineNumber" : 83,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (int index=0; index < libraryJars.size(); index++) {\n  ClassPathEntry classPathEntry=libraryJars.get(index);\n  checker.updateModificationTime(classPathEntry.getFile(),false);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 31,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]",
      "nodePosition" : {
        "charLength" : 396,
        "startLineNumber" : 75,
        "startColumnNumber" : 12,
        "endLineNumber" : 84,
        "endColumnNumber" : 13
      },
      "nodeContext" : "{\n  for (int index=0; index < libraryJars.size(); index++) {\n    ClassPathEntry classPathEntry=libraryJars.get(index);\n    checker.updateModificationTime(classPathEntry.getFile(),false);\n  }\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 32,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 433,
        "startLineNumber" : 74,
        "startColumnNumber" : 12,
        "endLineNumber" : 84,
        "endColumnNumber" : 13
      },
      "nodeContext" : "if (libraryJars != null) {\n  for (int index=0; index < libraryJars.size(); index++) {\n    ClassPathEntry classPathEntry=libraryJars.get(index);\n    checker.updateModificationTime(classPathEntry.getFile(),false);\n  }\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 36,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]",
      "nodePosition" : {
        "charLength" : 2195,
        "startLineNumber" : 52,
        "startColumnNumber" : 8,
        "endLineNumber" : 98,
        "endColumnNumber" : 9
      },
      "nodeContext" : "{\n  ModificationTimeChecker checker=new ModificationTimeChecker();\n  checker.updateInputModificationTime(configuration.lastModified);\n  ClassPath programJars=configuration.programJars;\n  ClassPath libraryJars=configuration.libraryJars;\n  if (programJars != null) {\n    for (int index=0; index < programJars.size(); index++) {\n      ClassPathEntry classPathEntry=programJars.get(index);\n      checker.updateModificationTime(classPathEntry.getFile(),classPathEntry.isOutput());\n    }\n  }\n  if (libraryJars != null) {\n    for (int index=0; index < libraryJars.size(); index++) {\n      ClassPathEntry classPathEntry=libraryJars.get(index);\n      checker.updateModificationTime(classPathEntry.getFile(),false);\n    }\n  }\n  checker.updateInputModificationTime(configuration.applyMapping);\n  checker.updateInputModificationTime(configuration.obfuscationDictionary);\n  checker.updateInputModificationTime(configuration.classObfuscationDictionary);\n  checker.updateInputModificationTime(configuration.packageObfuscationDictionary);\n  checker.updateOutputModificationTime(configuration.printSeeds);\n  checker.updateOutputModificationTime(configuration.printUsage);\n  checker.updateOutputModificationTime(configuration.printMapping);\n  checker.updateOutputModificationTime(configuration.printConfiguration);\n  checker.updateOutputModificationTime(configuration.dump);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 169,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 2332,
        "startLineNumber" : 51,
        "startColumnNumber" : 8,
        "endLineNumber" : 103,
        "endColumnNumber" : 9
      },
      "nodeContext" : "try {\n  ModificationTimeChecker checker=new ModificationTimeChecker();\n  checker.updateInputModificationTime(configuration.lastModified);\n  ClassPath programJars=configuration.programJars;\n  ClassPath libraryJars=configuration.libraryJars;\n  if (programJars != null) {\n    for (int index=0; index < programJars.size(); index++) {\n      ClassPathEntry classPathEntry=programJars.get(index);\n      checker.updateModificationTime(classPathEntry.getFile(),classPathEntry.isOutput());\n    }\n  }\n  if (libraryJars != null) {\n    for (int index=0; index < libraryJars.size(); index++) {\n      ClassPathEntry classPathEntry=libraryJars.get(index);\n      checker.updateModificationTime(classPathEntry.getFile(),false);\n    }\n  }\n  checker.updateInputModificationTime(configuration.applyMapping);\n  checker.updateInputModificationTime(configuration.obfuscationDictionary);\n  checker.updateInputModificationTime(configuration.classObfuscationDictionary);\n  checker.updateInputModificationTime(configuration.packageObfuscationDictionary);\n  checker.updateOutputModificationTime(configuration.printSeeds);\n  checker.updateOutputModificationTime(configuration.printUsage);\n  checker.updateOutputModificationTime(configuration.printMapping);\n  checker.updateOutputModificationTime(configuration.printConfiguration);\n  checker.updateOutputModificationTime(configuration.dump);\n}\n catch (IllegalStateException e) {\n  return false;\n}\n",
      "nodeType" : "TryStatement",
      "astNodeNumber" : 178,
      "astHeight" : 10
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 2430,
        "startLineNumber" : 50,
        "startColumnNumber" : 4,
        "endLineNumber" : 108,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  try {\n    ModificationTimeChecker checker=new ModificationTimeChecker();\n    checker.updateInputModificationTime(configuration.lastModified);\n    ClassPath programJars=configuration.programJars;\n    ClassPath libraryJars=configuration.libraryJars;\n    if (programJars != null) {\n      for (int index=0; index < programJars.size(); index++) {\n        ClassPathEntry classPathEntry=programJars.get(index);\n        checker.updateModificationTime(classPathEntry.getFile(),classPathEntry.isOutput());\n      }\n    }\n    if (libraryJars != null) {\n      for (int index=0; index < libraryJars.size(); index++) {\n        ClassPathEntry classPathEntry=libraryJars.get(index);\n        checker.updateModificationTime(classPathEntry.getFile(),false);\n      }\n    }\n    checker.updateInputModificationTime(configuration.applyMapping);\n    checker.updateInputModificationTime(configuration.obfuscationDictionary);\n    checker.updateInputModificationTime(configuration.classObfuscationDictionary);\n    checker.updateInputModificationTime(configuration.packageObfuscationDictionary);\n    checker.updateOutputModificationTime(configuration.printSeeds);\n    checker.updateOutputModificationTime(configuration.printUsage);\n    checker.updateOutputModificationTime(configuration.printMapping);\n    checker.updateOutputModificationTime(configuration.printConfiguration);\n    checker.updateOutputModificationTime(configuration.dump);\n  }\n catch (  IllegalStateException e) {\n    return false;\n  }\n  System.out.println(\"The output seems up to date\");\n  return true;\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 188,
      "astHeight" : 11
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 2628,
        "startLineNumber" : 45,
        "startColumnNumber" : 4,
        "endLineNumber" : 108,
        "endColumnNumber" : 5
      },
      "nodeContext" : "/** \n * Returns whether the output is up to date, based on the modification times of the input jars, output jars, and library jars (or directories).\n */\npublic boolean check(){\n  try {\n    ModificationTimeChecker checker=new ModificationTimeChecker();\n    checker.updateInputModificationTime(configuration.lastModified);\n    ClassPath programJars=configuration.programJars;\n    ClassPath libraryJars=configuration.libraryJars;\n    if (programJars != null) {\n      for (int index=0; index < programJars.size(); index++) {\n        ClassPathEntry classPathEntry=programJars.get(index);\n        checker.updateModificationTime(classPathEntry.getFile(),classPathEntry.isOutput());\n      }\n    }\n    if (libraryJars != null) {\n      for (int index=0; index < libraryJars.size(); index++) {\n        ClassPathEntry classPathEntry=libraryJars.get(index);\n        checker.updateModificationTime(classPathEntry.getFile(),false);\n      }\n    }\n    checker.updateInputModificationTime(configuration.applyMapping);\n    checker.updateInputModificationTime(configuration.obfuscationDictionary);\n    checker.updateInputModificationTime(configuration.classObfuscationDictionary);\n    checker.updateInputModificationTime(configuration.packageObfuscationDictionary);\n    checker.updateOutputModificationTime(configuration.printSeeds);\n    checker.updateOutputModificationTime(configuration.printUsage);\n    checker.updateOutputModificationTime(configuration.printMapping);\n    checker.updateOutputModificationTime(configuration.printConfiguration);\n    checker.updateOutputModificationTime(configuration.dump);\n  }\n catch (  IllegalStateException e) {\n    return false;\n  }\n  System.out.println(\"The output seems up to date\");\n  return true;\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 193,
      "astHeight" : 12
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 364,
        "startLineNumber" : 76,
        "startColumnNumber" : 16,
        "endLineNumber" : 83,
        "endColumnNumber" : 17
      },
      "nodeContext" : "for (int index=0; index < libraryJars.size(); index++) {\n  ClassPathEntry classPathEntry=libraryJars.get(index);\n  checker.updateModificationTime(classPathEntry.getFile(),false);\n}\n",
      "nodeType" : "ForStatement",
      "astNodeNumber" : 31,
      "astHeight" : 6
    },
    "tokenLength" : 4,
    "type" : "boolean"
  } ],
  "positionList" : [ {
    "charLength" : 26,
    "startLineNumber" : 76,
    "startColumnNumber" : 36,
    "endLineNumber" : 76,
    "endColumnNumber" : 62
  } ],
  "layoutRelationDataList" : [ ]
}