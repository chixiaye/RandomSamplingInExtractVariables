{
  "id" : 168,
  "expression" : "QueryRequest.builder().serviceName(\"foo\").limit(0)",
  "projectName" : "openzipkin@zipkin",
  "commitID" : "f02a993656f506277ca83737ddf494ed45fde4b3",
  "filePath" : "/zipkin/src/test/java/zipkin/QueryRequestTest.java",
  "occurrences" : 1,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "QueryRequest.builder().serviceName(\"foo\").limit(0)",
    "nodeType" : "MethodInvocation",
    "nodePosition" : {
      "charLength" : 50,
      "startLineNumber" : 85,
      "startColumnNumber" : 4,
      "endLineNumber" : 85,
      "endColumnNumber" : 54
    },
    "astNodeNumber" : 9,
    "astHeight" : 4,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 58,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 85,
        "endColumnNumber" : 62
      },
      "nodeContext" : "QueryRequest.builder().serviceName(\"foo\").limit(0).build()",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 11,
      "astHeight" : 5
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 85,
        "endColumnNumber" : 63
      },
      "nodeContext" : "QueryRequest.builder().serviceName(\"foo\").limit(0).build();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 182,
        "startLineNumber" : 81,
        "startColumnNumber" : 36,
        "endLineNumber" : 86,
        "endColumnNumber" : 3
      },
      "nodeContext" : "{\n  thrown.expect(IllegalArgumentException.class);\n  thrown.expectMessage(\"limit should be positive: was 0\");\n  QueryRequest.builder().serviceName(\"foo\").limit(0).build();\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 25,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 224,
        "startLineNumber" : 80,
        "startColumnNumber" : 2,
        "endLineNumber" : 86,
        "endColumnNumber" : 3
      },
      "nodeContext" : "@Test public void limitMustBePositive(){\n  thrown.expect(IllegalArgumentException.class);\n  thrown.expectMessage(\"limit should be positive: was 0\");\n  QueryRequest.builder().serviceName(\"foo\").limit(0).build();\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 31,
      "astHeight" : 8
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 59,
        "startLineNumber" : 85,
        "startColumnNumber" : 4,
        "endLineNumber" : 85,
        "endColumnNumber" : 63
      },
      "nodeContext" : "QueryRequest.builder().serviceName(\"foo\").limit(0).build();\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 12,
      "astHeight" : 6
    },
    "tokenLength" : 6,
    "type" : "zipkin.QueryRequest.Builder"
  } ],
  "positionList" : [ {
    "charLength" : 50,
    "startLineNumber" : 85,
    "startColumnNumber" : 4,
    "endLineNumber" : 85,
    "endColumnNumber" : 54
  } ],
  "layoutRelationDataList" : [ ]
}