{
  "id" : 75,
  "expression" : "0",
  "projectName" : "apache@pulsar",
  "commitID" : "ded806fd52f6e2f182fa02052cbd82c2a6755098",
  "filePath" : "/pulsar-io/kafka/src/main/java/org/apache/pulsar/io/kafka/KafkaAbstractSink.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 87,
      "startColumnNumber" : 46,
      "endLineNumber" : 87,
      "endColumnNumber" : 47
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 87,
        "startColumnNumber" : 12,
        "endLineNumber" : 87,
        "endColumnNumber" : 47
      },
      "nodeContext" : "kafkaSinkConfig.getBatchSize() <= 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 188,
        "startLineNumber" : 87,
        "startColumnNumber" : 8,
        "endLineNumber" : 90,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (kafkaSinkConfig.getBatchSize() <= 0) {\n  throw new IllegalArgumentException(\"Invalid Kafka Producer batchSize : \" + kafkaSinkConfig.getBatchSize());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3013,
        "startLineNumber" : 82,
        "startColumnNumber" : 91,
        "endLineNumber" : 130,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  kafkaSinkConfig=KafkaSinkConfig.load(config);\n  Objects.requireNonNull(kafkaSinkConfig.getTopic(),\"Kafka topic is not set\");\n  Objects.requireNonNull(kafkaSinkConfig.getBootstrapServers(),\"Kafka bootstrapServers is not set\");\n  Objects.requireNonNull(kafkaSinkConfig.getAcks(),\"Kafka acks mode is not set\");\n  if (kafkaSinkConfig.getBatchSize() <= 0) {\n    throw new IllegalArgumentException(\"Invalid Kafka Producer batchSize : \" + kafkaSinkConfig.getBatchSize());\n  }\n  if (kafkaSinkConfig.getMaxRequestSize() <= 0) {\n    throw new IllegalArgumentException(\"Invalid Kafka Producer maxRequestSize : \" + kafkaSinkConfig.getMaxRequestSize());\n  }\n  if (kafkaSinkConfig.getProducerConfigProperties() != null) {\n    props.putAll(kafkaSinkConfig.getProducerConfigProperties());\n  }\n  props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,kafkaSinkConfig.getBootstrapServers());\n  if (StringUtils.isNotEmpty(kafkaSinkConfig.getSecurityProtocol())) {\n    props.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG,kafkaSinkConfig.getSecurityProtocol());\n  }\n  if (StringUtils.isNotEmpty(kafkaSinkConfig.getSaslMechanism())) {\n    props.put(SaslConfigs.SASL_MECHANISM,kafkaSinkConfig.getSaslMechanism());\n  }\n  if (StringUtils.isNotEmpty(kafkaSinkConfig.getSaslJaasConfig())) {\n    props.put(SaslConfigs.SASL_JAAS_CONFIG,kafkaSinkConfig.getSaslJaasConfig());\n  }\n  if (StringUtils.isNotEmpty(kafkaSinkConfig.getSslEnabledProtocols())) {\n    props.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG,kafkaSinkConfig.getSslEnabledProtocols());\n  }\n  if (StringUtils.isNotEmpty(kafkaSinkConfig.getSslEndpointIdentificationAlgorithm())) {\n    props.put(SslConfigs.SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONFIG,kafkaSinkConfig.getSslEndpointIdentificationAlgorithm());\n  }\n  if (StringUtils.isNotEmpty(kafkaSinkConfig.getSslTruststoreLocation())) {\n    props.put(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG,kafkaSinkConfig.getSslTruststoreLocation());\n  }\n  if (StringUtils.isNotEmpty(kafkaSinkConfig.getSslTruststorePassword())) {\n    props.put(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG,kafkaSinkConfig.getSslTruststorePassword());\n  }\n  props.put(ProducerConfig.ACKS_CONFIG,kafkaSinkConfig.getAcks());\n  props.put(ProducerConfig.BATCH_SIZE_CONFIG,String.valueOf(kafkaSinkConfig.getBatchSize()));\n  props.put(ProducerConfig.MAX_REQUEST_SIZE_CONFIG,String.valueOf(kafkaSinkConfig.getMaxRequestSize()));\n  props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,kafkaSinkConfig.getKeySerializerClass());\n  props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,kafkaSinkConfig.getValueSerializerClass());\n  producer=new KafkaProducer<>(beforeCreateProducer(props));\n  log.info(\"Kafka sink started : {}.\",props);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 286,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3114,
        "startLineNumber" : 81,
        "startColumnNumber" : 4,
        "endLineNumber" : 130,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void open(Map<String,Object> config,SinkContext sinkContext) throws Exception {\n  kafkaSinkConfig=KafkaSinkConfig.load(config);\n  Objects.requireNonNull(kafkaSinkConfig.getTopic(),\"Kafka topic is not set\");\n  Objects.requireNonNull(kafkaSinkConfig.getBootstrapServers(),\"Kafka bootstrapServers is not set\");\n  Objects.requireNonNull(kafkaSinkConfig.getAcks(),\"Kafka acks mode is not set\");\n  if (kafkaSinkConfig.getBatchSize() <= 0) {\n    throw new IllegalArgumentException(\"Invalid Kafka Producer batchSize : \" + kafkaSinkConfig.getBatchSize());\n  }\n  if (kafkaSinkConfig.getMaxRequestSize() <= 0) {\n    throw new IllegalArgumentException(\"Invalid Kafka Producer maxRequestSize : \" + kafkaSinkConfig.getMaxRequestSize());\n  }\n  if (kafkaSinkConfig.getProducerConfigProperties() != null) {\n    props.putAll(kafkaSinkConfig.getProducerConfigProperties());\n  }\n  props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,kafkaSinkConfig.getBootstrapServers());\n  if (StringUtils.isNotEmpty(kafkaSinkConfig.getSecurityProtocol())) {\n    props.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG,kafkaSinkConfig.getSecurityProtocol());\n  }\n  if (StringUtils.isNotEmpty(kafkaSinkConfig.getSaslMechanism())) {\n    props.put(SaslConfigs.SASL_MECHANISM,kafkaSinkConfig.getSaslMechanism());\n  }\n  if (StringUtils.isNotEmpty(kafkaSinkConfig.getSaslJaasConfig())) {\n    props.put(SaslConfigs.SASL_JAAS_CONFIG,kafkaSinkConfig.getSaslJaasConfig());\n  }\n  if (StringUtils.isNotEmpty(kafkaSinkConfig.getSslEnabledProtocols())) {\n    props.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG,kafkaSinkConfig.getSslEnabledProtocols());\n  }\n  if (StringUtils.isNotEmpty(kafkaSinkConfig.getSslEndpointIdentificationAlgorithm())) {\n    props.put(SslConfigs.SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONFIG,kafkaSinkConfig.getSslEndpointIdentificationAlgorithm());\n  }\n  if (StringUtils.isNotEmpty(kafkaSinkConfig.getSslTruststoreLocation())) {\n    props.put(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG,kafkaSinkConfig.getSslTruststoreLocation());\n  }\n  if (StringUtils.isNotEmpty(kafkaSinkConfig.getSslTruststorePassword())) {\n    props.put(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG,kafkaSinkConfig.getSslTruststorePassword());\n  }\n  props.put(ProducerConfig.ACKS_CONFIG,kafkaSinkConfig.getAcks());\n  props.put(ProducerConfig.BATCH_SIZE_CONFIG,String.valueOf(kafkaSinkConfig.getBatchSize()));\n  props.put(ProducerConfig.MAX_REQUEST_SIZE_CONFIG,String.valueOf(kafkaSinkConfig.getMaxRequestSize()));\n  props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,kafkaSinkConfig.getKeySerializerClass());\n  props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,kafkaSinkConfig.getValueSerializerClass());\n  producer=new KafkaProducer<>(beforeCreateProducer(props));\n  log.info(\"Kafka sink started : {}.\",props);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 307,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 35,
        "startLineNumber" : 87,
        "startColumnNumber" : 12,
        "endLineNumber" : 87,
        "endColumnNumber" : 47
      },
      "nodeContext" : "kafkaSinkConfig.getBatchSize() <= 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  }, {
    "nodeContext" : "0",
    "nodeType" : "NumberLiteral",
    "nodePosition" : {
      "charLength" : 1,
      "startLineNumber" : 91,
      "startColumnNumber" : 51,
      "endLineNumber" : 91,
      "endColumnNumber" : 52
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 91,
        "startColumnNumber" : 12,
        "endLineNumber" : 91,
        "endColumnNumber" : 52
      },
      "nodeContext" : "kafkaSinkConfig.getMaxRequestSize() <= 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 203,
        "startLineNumber" : 91,
        "startColumnNumber" : 8,
        "endLineNumber" : 94,
        "endColumnNumber" : 9
      },
      "nodeContext" : "if (kafkaSinkConfig.getMaxRequestSize() <= 0) {\n  throw new IllegalArgumentException(\"Invalid Kafka Producer maxRequestSize : \" + kafkaSinkConfig.getMaxRequestSize());\n}\n",
      "nodeType" : "IfStatement",
      "astNodeNumber" : 16,
      "astHeight" : 7
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 3013,
        "startLineNumber" : 82,
        "startColumnNumber" : 91,
        "endLineNumber" : 130,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  kafkaSinkConfig=KafkaSinkConfig.load(config);\n  Objects.requireNonNull(kafkaSinkConfig.getTopic(),\"Kafka topic is not set\");\n  Objects.requireNonNull(kafkaSinkConfig.getBootstrapServers(),\"Kafka bootstrapServers is not set\");\n  Objects.requireNonNull(kafkaSinkConfig.getAcks(),\"Kafka acks mode is not set\");\n  if (kafkaSinkConfig.getBatchSize() <= 0) {\n    throw new IllegalArgumentException(\"Invalid Kafka Producer batchSize : \" + kafkaSinkConfig.getBatchSize());\n  }\n  if (kafkaSinkConfig.getMaxRequestSize() <= 0) {\n    throw new IllegalArgumentException(\"Invalid Kafka Producer maxRequestSize : \" + kafkaSinkConfig.getMaxRequestSize());\n  }\n  if (kafkaSinkConfig.getProducerConfigProperties() != null) {\n    props.putAll(kafkaSinkConfig.getProducerConfigProperties());\n  }\n  props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,kafkaSinkConfig.getBootstrapServers());\n  if (StringUtils.isNotEmpty(kafkaSinkConfig.getSecurityProtocol())) {\n    props.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG,kafkaSinkConfig.getSecurityProtocol());\n  }\n  if (StringUtils.isNotEmpty(kafkaSinkConfig.getSaslMechanism())) {\n    props.put(SaslConfigs.SASL_MECHANISM,kafkaSinkConfig.getSaslMechanism());\n  }\n  if (StringUtils.isNotEmpty(kafkaSinkConfig.getSaslJaasConfig())) {\n    props.put(SaslConfigs.SASL_JAAS_CONFIG,kafkaSinkConfig.getSaslJaasConfig());\n  }\n  if (StringUtils.isNotEmpty(kafkaSinkConfig.getSslEnabledProtocols())) {\n    props.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG,kafkaSinkConfig.getSslEnabledProtocols());\n  }\n  if (StringUtils.isNotEmpty(kafkaSinkConfig.getSslEndpointIdentificationAlgorithm())) {\n    props.put(SslConfigs.SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONFIG,kafkaSinkConfig.getSslEndpointIdentificationAlgorithm());\n  }\n  if (StringUtils.isNotEmpty(kafkaSinkConfig.getSslTruststoreLocation())) {\n    props.put(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG,kafkaSinkConfig.getSslTruststoreLocation());\n  }\n  if (StringUtils.isNotEmpty(kafkaSinkConfig.getSslTruststorePassword())) {\n    props.put(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG,kafkaSinkConfig.getSslTruststorePassword());\n  }\n  props.put(ProducerConfig.ACKS_CONFIG,kafkaSinkConfig.getAcks());\n  props.put(ProducerConfig.BATCH_SIZE_CONFIG,String.valueOf(kafkaSinkConfig.getBatchSize()));\n  props.put(ProducerConfig.MAX_REQUEST_SIZE_CONFIG,String.valueOf(kafkaSinkConfig.getMaxRequestSize()));\n  props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,kafkaSinkConfig.getKeySerializerClass());\n  props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,kafkaSinkConfig.getValueSerializerClass());\n  producer=new KafkaProducer<>(beforeCreateProducer(props));\n  log.info(\"Kafka sink started : {}.\",props);\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 286,
      "astHeight" : 8
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 3114,
        "startLineNumber" : 81,
        "startColumnNumber" : 4,
        "endLineNumber" : 130,
        "endColumnNumber" : 5
      },
      "nodeContext" : "@Override public void open(Map<String,Object> config,SinkContext sinkContext) throws Exception {\n  kafkaSinkConfig=KafkaSinkConfig.load(config);\n  Objects.requireNonNull(kafkaSinkConfig.getTopic(),\"Kafka topic is not set\");\n  Objects.requireNonNull(kafkaSinkConfig.getBootstrapServers(),\"Kafka bootstrapServers is not set\");\n  Objects.requireNonNull(kafkaSinkConfig.getAcks(),\"Kafka acks mode is not set\");\n  if (kafkaSinkConfig.getBatchSize() <= 0) {\n    throw new IllegalArgumentException(\"Invalid Kafka Producer batchSize : \" + kafkaSinkConfig.getBatchSize());\n  }\n  if (kafkaSinkConfig.getMaxRequestSize() <= 0) {\n    throw new IllegalArgumentException(\"Invalid Kafka Producer maxRequestSize : \" + kafkaSinkConfig.getMaxRequestSize());\n  }\n  if (kafkaSinkConfig.getProducerConfigProperties() != null) {\n    props.putAll(kafkaSinkConfig.getProducerConfigProperties());\n  }\n  props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,kafkaSinkConfig.getBootstrapServers());\n  if (StringUtils.isNotEmpty(kafkaSinkConfig.getSecurityProtocol())) {\n    props.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG,kafkaSinkConfig.getSecurityProtocol());\n  }\n  if (StringUtils.isNotEmpty(kafkaSinkConfig.getSaslMechanism())) {\n    props.put(SaslConfigs.SASL_MECHANISM,kafkaSinkConfig.getSaslMechanism());\n  }\n  if (StringUtils.isNotEmpty(kafkaSinkConfig.getSaslJaasConfig())) {\n    props.put(SaslConfigs.SASL_JAAS_CONFIG,kafkaSinkConfig.getSaslJaasConfig());\n  }\n  if (StringUtils.isNotEmpty(kafkaSinkConfig.getSslEnabledProtocols())) {\n    props.put(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG,kafkaSinkConfig.getSslEnabledProtocols());\n  }\n  if (StringUtils.isNotEmpty(kafkaSinkConfig.getSslEndpointIdentificationAlgorithm())) {\n    props.put(SslConfigs.SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONFIG,kafkaSinkConfig.getSslEndpointIdentificationAlgorithm());\n  }\n  if (StringUtils.isNotEmpty(kafkaSinkConfig.getSslTruststoreLocation())) {\n    props.put(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG,kafkaSinkConfig.getSslTruststoreLocation());\n  }\n  if (StringUtils.isNotEmpty(kafkaSinkConfig.getSslTruststorePassword())) {\n    props.put(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG,kafkaSinkConfig.getSslTruststorePassword());\n  }\n  props.put(ProducerConfig.ACKS_CONFIG,kafkaSinkConfig.getAcks());\n  props.put(ProducerConfig.BATCH_SIZE_CONFIG,String.valueOf(kafkaSinkConfig.getBatchSize()));\n  props.put(ProducerConfig.MAX_REQUEST_SIZE_CONFIG,String.valueOf(kafkaSinkConfig.getMaxRequestSize()));\n  props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,kafkaSinkConfig.getKeySerializerClass());\n  props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,kafkaSinkConfig.getValueSerializerClass());\n  producer=new KafkaProducer<>(beforeCreateProducer(props));\n  log.info(\"Kafka sink started : {}.\",props);\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 307,
      "astHeight" : 9
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]",
      "nodePosition" : {
        "charLength" : 40,
        "startLineNumber" : 91,
        "startColumnNumber" : 12,
        "endLineNumber" : 91,
        "endColumnNumber" : 52
      },
      "nodeContext" : "kafkaSinkConfig.getMaxRequestSize() <= 0",
      "nodeType" : "InfixExpression",
      "astNodeNumber" : 5,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "int"
  } ],
  "positionList" : [ {
    "charLength" : 1,
    "startLineNumber" : 87,
    "startColumnNumber" : 46,
    "endLineNumber" : 87,
    "endColumnNumber" : 47
  }, {
    "charLength" : 1,
    "startLineNumber" : 91,
    "startColumnNumber" : 51,
    "endLineNumber" : 91,
    "endColumnNumber" : 52
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 2
  } ]
}