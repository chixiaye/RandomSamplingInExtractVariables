{
  "id" : 151,
  "expression" : "map",
  "projectName" : "alibaba@fastjson",
  "commitID" : "d3797da65a3d9f804c9e275c25395c59e31f097d",
  "filePath" : "/src/test/java/com/alibaba/json/bvt/bug/Issue215_float_array.java",
  "occurrences" : 2,
  "isArithmeticExpression" : 0,
  "isGetTypeMethod" : 0,
  "expressionList" : [ {
    "nodeContext" : "map",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 25,
      "startColumnNumber" : 8,
      "endLineNumber" : 25,
      "endColumnNumber" : 11
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 25,
        "startColumnNumber" : 8,
        "endLineNumber" : 25,
        "endColumnNumber" : 30
      },
      "nodeContext" : "map.put(\"val\",values)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 5,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 25,
        "startColumnNumber" : 8,
        "endLineNumber" : 25,
        "endColumnNumber" : 31
      },
      "nodeContext" : "map.put(\"val\",values);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 618,
        "startLineNumber" : 17,
        "startColumnNumber" : 50,
        "endLineNumber" : 33,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  float[] values=new float[128];\n  Random random=new Random();\n  for (int i=0; i < values.length; ++i) {\n    values[i]=random.nextFloat();\n  }\n  Map<String,float[]> map=new HashMap<String,float[]>();\n  map.put(\"val\",values);\n  String text=JSON.toJSONString(map);\n  System.out.println(text);\n  Map<String,float[]> map2=JSON.parseObject(text,new TypeReference<HashMap<String,float[]>>(){\n  }\n);\n  float[] values2=(float[])map2.get(\"val\");\n  Assert.assertTrue(Arrays.equals(values2,values));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 135,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 664,
        "startLineNumber" : 17,
        "startColumnNumber" : 4,
        "endLineNumber" : 33,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void test_for_issue() throws Exception {\n  float[] values=new float[128];\n  Random random=new Random();\n  for (int i=0; i < values.length; ++i) {\n    values[i]=random.nextFloat();\n  }\n  Map<String,float[]> map=new HashMap<String,float[]>();\n  map.put(\"val\",values);\n  String text=JSON.toJSONString(map);\n  System.out.println(text);\n  Map<String,float[]> map2=JSON.parseObject(text,new TypeReference<HashMap<String,float[]>>(){\n  }\n);\n  float[] values2=(float[])map2.get(\"val\");\n  Assert.assertTrue(Arrays.equals(values2,values));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 141,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 23,
        "startLineNumber" : 25,
        "startColumnNumber" : 8,
        "endLineNumber" : 25,
        "endColumnNumber" : 31
      },
      "nodeContext" : "map.put(\"val\",values);\n",
      "nodeType" : "ExpressionStatement",
      "astNodeNumber" : 6,
      "astHeight" : 3
    },
    "tokenLength" : 1,
    "type" : "java.util.Map<java.lang.String,float[]>"
  }, {
    "nodeContext" : "map",
    "nodeType" : "SimpleName",
    "nodePosition" : {
      "charLength" : 3,
      "startLineNumber" : 27,
      "startColumnNumber" : 40,
      "endLineNumber" : 27,
      "endColumnNumber" : 43
    },
    "astNodeNumber" : 1,
    "astHeight" : 1,
    "parentDataList" : [ {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]",
      "nodePosition" : {
        "charLength" : 22,
        "startLineNumber" : 27,
        "startColumnNumber" : 22,
        "endLineNumber" : 27,
        "endColumnNumber" : 44
      },
      "nodeContext" : "JSON.toJSONString(map)",
      "nodeType" : "MethodInvocation",
      "astNodeNumber" : 4,
      "astHeight" : 2
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,fragments]",
      "nodePosition" : {
        "charLength" : 29,
        "startLineNumber" : 27,
        "startColumnNumber" : 15,
        "endLineNumber" : 27,
        "endColumnNumber" : 44
      },
      "nodeContext" : "text=JSON.toJSONString(map)",
      "nodeType" : "VariableDeclarationFragment",
      "astNodeNumber" : 6,
      "astHeight" : 3
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 27,
        "startColumnNumber" : 8,
        "endLineNumber" : 27,
        "endColumnNumber" : 45
      },
      "nodeContext" : "String text=JSON.toJSONString(map);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    }, {
      "locationInParent" : "ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]",
      "nodePosition" : {
        "charLength" : 618,
        "startLineNumber" : 17,
        "startColumnNumber" : 50,
        "endLineNumber" : 33,
        "endColumnNumber" : 5
      },
      "nodeContext" : "{\n  float[] values=new float[128];\n  Random random=new Random();\n  for (int i=0; i < values.length; ++i) {\n    values[i]=random.nextFloat();\n  }\n  Map<String,float[]> map=new HashMap<String,float[]>();\n  map.put(\"val\",values);\n  String text=JSON.toJSONString(map);\n  System.out.println(text);\n  Map<String,float[]> map2=JSON.parseObject(text,new TypeReference<HashMap<String,float[]>>(){\n  }\n);\n  float[] values2=(float[])map2.get(\"val\");\n  Assert.assertTrue(Arrays.equals(values2,values));\n}\n",
      "nodeType" : "Block",
      "astNodeNumber" : 135,
      "astHeight" : 9
    }, {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.TypeDeclaration,bodyDeclarations]",
      "nodePosition" : {
        "charLength" : 664,
        "startLineNumber" : 17,
        "startColumnNumber" : 4,
        "endLineNumber" : 33,
        "endColumnNumber" : 5
      },
      "nodeContext" : "public void test_for_issue() throws Exception {\n  float[] values=new float[128];\n  Random random=new Random();\n  for (int i=0; i < values.length; ++i) {\n    values[i]=random.nextFloat();\n  }\n  Map<String,float[]> map=new HashMap<String,float[]>();\n  map.put(\"val\",values);\n  String text=JSON.toJSONString(map);\n  System.out.println(text);\n  Map<String,float[]> map2=JSON.parseObject(text,new TypeReference<HashMap<String,float[]>>(){\n  }\n);\n  float[] values2=(float[])map2.get(\"val\");\n  Assert.assertTrue(Arrays.equals(values2,values));\n}\n",
      "nodeType" : "MethodDeclaration",
      "astNodeNumber" : 141,
      "astHeight" : 10
    } ],
    "currentLineData" : {
      "locationInParent" : "ChildListProperty[org.eclipse.jdt.core.dom.Block,statements]",
      "nodePosition" : {
        "charLength" : 37,
        "startLineNumber" : 27,
        "startColumnNumber" : 8,
        "endLineNumber" : 27,
        "endColumnNumber" : 45
      },
      "nodeContext" : "String text=JSON.toJSONString(map);\n",
      "nodeType" : "VariableDeclarationStatement",
      "astNodeNumber" : 9,
      "astHeight" : 4
    },
    "tokenLength" : 1,
    "type" : "java.util.Map<java.lang.String,float[]>"
  } ],
  "positionList" : [ {
    "charLength" : 3,
    "startLineNumber" : 25,
    "startColumnNumber" : 8,
    "endLineNumber" : 25,
    "endColumnNumber" : 11
  }, {
    "charLength" : 3,
    "startLineNumber" : 27,
    "startColumnNumber" : 40,
    "endLineNumber" : 27,
    "endColumnNumber" : 43
  } ],
  "layoutRelationDataList" : [ {
    "firstKey" : 0,
    "secondKey" : 1,
    "layout" : 2
  }, {
    "firstKey" : 1,
    "secondKey" : 0,
    "layout" : 3
  } ]
}